{"a8":{"$":0,"a":{"c1":{"$":0,"a":1211397742},"bS":{"$":0},"dk":3082277983,"dw":{"aq":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedRecords"]},"c":0,"d":{"$":-1,"a":0,"b":{"$":"$L","a":["NoUnsortedCases"]},"c":0,"d":{"$":-1,"a":1,"b":{"$":0},"c":0,"d":{"$":-2},"e":{"$":-2}},"e":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedLetDeclarations"]},"c":0,"d":{"$":-2},"e":{"$":-2}}},"e":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedTopLevelDeclarations"]},"c":0,"d":{"$":-2},"e":{"$":-2}}},"a9":{"$":"$L","a":[{"bw":{"$":1,"a":{"c0":"# elm-review-no-unsorted\n\nProvides [`elm-review`](https://package.elm-lang.org/packages/jfmengels/elm-review/latest/)\nrules to ensure that anything (readily) sortable in Elm code is sorted in the\n\"proper\" order.\n\n## Provided rules\n\n* [üîß`NoUnsortedCases`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedCases/) - Reports case patterns that are not in the \"proper\" order.\n* [üîß`NoUnsortedLetDeclarations`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedLetDeclarations/) - Reports `let` declarations that are not in the \"proper\" order.\n* [üîß`NoUnsortedRecords`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/) - Reports record fields that are not in the \"proper\" order.\n* [üîß`NoUnsortedTopLevelDeclarations`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedTopLevelDeclarations/) - Reports top-level declarations that are not in the \"proper\" order.\n\n## Configuration\n\n```elm\nmodule ReviewConfig exposing (config)\n\nimport NoUnsortedCases\nimport NoUnsortedLetDeclarations\nimport NoUnsortedRecords\nimport NoUnsortedTopLevelDeclarations\nimport Review.Rule exposing (Rule)\n\nconfig : List Rule\nconfig =\n    [ NoUnsortedCases.rule NoUnsortedCases.defaults\n    , NoUnsortedLetDeclarations.rule\n        (NoUnsortedLetDeclarations.sortLetDeclarations\n            |> NoUnsortedLetDeclarations.alphabetically\n        )\n    , NoUnsortedRecords.rule\n        (NoUnsortedRecords.defaults\n            |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n        )\n    , NoUnsortedTopLevelDeclarations.rule\n        (NoUnsortedTopLevelDeclarations.sortTopLevelDeclarations\n            |> NoUnsortedTopLevelDeclarations.portsFirst\n            |> NoUnsortedTopLevelDeclarations.exposedOrderWithPrivateLast\n            |> NoUnsortedTopLevelDeclarations.alphabetically\n        )\n    ]\n```\n\n## Try it out\n\nYou can try the example configuration above out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example\n```\n\n## Changelog\n\n* `1.1.3` -- Bump `elm-review` to v2.11.1 and mark rule as providing fixes.\n* `1.1.2` -- üêõ Fix a bug where, when dealing with cyclical sorting conditions,\n  some low priority edges associated with the cycle but not actually responsible\n  for it would be disregarded instead of only those responsible.  In practice,\n  this meant that, very rarely, sortable `case` patterns would not be sorted at\n  all (or would be sorted unstably) when wildcard (`_`) patterns lead to cyclic\n  ordering relationships.  Since the\n  [problem at the core of this](https://en.wikipedia.org/wiki/Feedback_arc_set#NP-hardness)\n  is NP-hard, it is not guaranteed to be fixed but should nevertheless now occur\n  substantially less often (if at all).  Please\n  [open an issue](https://github.com/SiriusStarr/elm-review-no-unsorted/issues)\n  if you encounter unstable sorting behavior or `case` patterns that should be\n  able to be sorted but are not with this version.\n* `1.1.1` -- üöë Fix critical bug caused by upstream bugfix in `elm-syntax`.\n  Version `7.2.9` of `elm-syntax` no longer incorrectly parses record field type\n  signature ranges, so `NoUnsortedRecords` (which repaired the previously\n  incorrect behavior) was producing in invalid ranges for fixes, causing them to\n  mangle code.  `elm-syntax` new lower bound is set to `7.2.9` and the\n  workaround removed, fixing the issue.\n* `1.1.0`\n  * **New Features:**\n    * ‚ú® -- Disable typechecking of unambiguous records by `NoUnsortedRecords`.\n      The old default can be re-enabled with\n      [`typecheckAllRecords`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#typecheckAllRecords)\n    * ‚ú® -- Add control over subrecord support for `NoUnsortedRecords`.  Default\n      behavior is to sort them when they appear in context (e.g. as part of\n      their larger record) but not when they appear alone.  The old behavior did\n      this unreliably and also treated custom type argument records as always\n      canonical; this **old behavior may be re-enabled** (without the\n      unreliability) with\n      [`treatCustomTypeRecordsAsCanonical`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#treatCustomTypeRecordsAsCanonical).\n      New settings for this behavior are also available with\n      [`treatSubrecordsAsUnknown`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#treatSubrecordsAsUnknown)\n      and\n      [`treatAllSubrecordsAsCanonical`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#treatAllSubrecordsAsCanonical).\n  * **Bugfixes:**\n    * üöë -- Fix critical bug causing control flow to sometimes be altered by\n      `NoUnsortedCases` due to `List.sort` assuming transitivity.  New sorting\n      methodology renders such issues impossible in the future.\n    * üêõ -- Fix doc comments not moving for ports with\n      `NoUnsortedTopLevelDeclarations` (possibly leading to invalid code after\n      fixes).  Doc comment support for ports was added manually, as `elm-syntax`\n      does not parse them, and they now behave like doc comments for all other\n      declarations.\n    * üêõ -- Improve handling of subrecords by `NoUnsortedRecords`. Previously,\n      they were sometimes sorted and sometimes not (depending on what type\n      information was available).  (See above for new configuration options\n      controlling this behavior.)\n    * üêõ -- Fix bad type checking by `NoUnsortedRecords` assigning independent\n      type vars to the same type, e.g. assigning all `Nothing`s to the same\n      `Maybe a` value, even if they were different.\n    * üêõ -- Fix bad type checking by `NoUnsortedRecords` preserving type var\n      assignment between fields (for type vars not in the known record), causing\n      e.g. all `Nothing`s in a record to be required to be the same type.\n    * üêõ -- Fix bad type inference of lambda functions by `NoUnsortedRecords`.\n    * üêõ -- Fix non-functions being considered dependencies/helpers by\n      `NoUnsortedTopLevelDeclarations`.  This brings actual rule behavior in\n      line with that stated in the documentation.\n  * **Other Changes:**\n    * ‚ö°Ô∏è --  Significantly improve performance of `NoUnsortedRecords` (2x faster\n      on some real-world codebases).  Previously, a significant amount of\n      unnecessary type inference and duplicated recursion was being performed\n      due to lack of laziness.\n* `1.0.6` -- üêõ Fix a bug causing `NoUnsortedRecords` to recurse infinitely in\n  certain rare cases where a type variable was assigned to a value containing an\n  identically-named type variable (e.g. the type variable `a` ended up being\n  assigned to a value defined by the generic record `{ a | field : Int }`).\n* `1.0.5` -- üöë Fix critical bug causing `NoUnsortedRecords` to rarely generate\n  valid code that was missing fields for record updates.  It is recommended that\n  you **check any record update expressions** that **contained comments** that\n  were fixed by this rule prior to this version, as one or more fields may have\n  been appended to the end of a comment in sorting.\n* `1.0.4` -- Update to `elm-syntax` v7.2.8 to fix upstream issue with lambda\n  ranges generating invalid code in fixes.\n* `1.0.3` -- Fix crash with `--fix` or `--watch` due to comparison of function\n  types in `ProjectContext` of `NoUnsortedRecords`.\n* `1.0.2` -- Fix crash in handling of record type comparison.\n* `1.0.1` -- Fix crash in handling of generic records when not all fields must\n  be present.\n* `1.0.0` -- Initial release\n","id":"README.md"}},"b3":{"$":"$L","a":[{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"jfmengels/elm-review","iv":{"$":1},"hg":"latest"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":91,"b9":3},"dC":{"bL":25,"b9":3}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedCases"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":119,"b9":9},"dC":{"bL":24,"b9":9}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedLetDeclarations"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":139,"b9":10},"dC":{"bL":34,"b9":10}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":123,"b9":11},"dC":{"bL":26,"b9":11}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedTopLevelDeclarations"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":149,"b9":12},"dC":{"bL":39,"b9":12}}},{"bd":true,"eF":{"fi":{"$":3,"a":"https://en.wikipedia.org/wiki/Feedback_arc_set"},"bF":{"$":0,"a":"NP-hardness"},"it":false},"cF":{"c7":{"bL":91,"b9":62},"dC":{"bL":33,"b9":62}}},{"bd":true,"eF":{"fi":{"$":3,"a":"https://github.com/SiriusStarr/elm-review-no-unsorted/issues"},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":79,"b9":65},"dC":{"bL":19,"b9":65}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"typecheckAllRecords"},"it":false},"cF":{"c7":{"bL":148,"b9":78},"dC":{"bL":31,"b9":78}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"treatCustomTypeRecordsAsCanonical"},"it":false},"cF":{"c7":{"bL":176,"b9":85},"dC":{"bL":45,"b9":85}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"treatSubrecordsAsUnknown"},"it":false},"cF":{"c7":{"bL":158,"b9":87},"dC":{"bL":36,"b9":87}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"treatAllSubrecordsAsCanonical"},"it":false},"cF":{"c7":{"bL":168,"b9":89},"dC":{"bL":41,"b9":89}}}]},"eL":{"$":0},"aZ":{"$":"$L","a":[{"bd":true,"bF":"elm-review-no-unsorted"},{"bd":true,"bF":"provided-rules"},{"bd":true,"bF":"configuration"},{"bd":true,"bF":"try-it-out"},{"bd":true,"bF":"changelog"}]}}]},"bi":{"$":0,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","hg":"1.1.3"}}}}},"ei":{"$":0,"a":{"c1":{"$":0,"a":1211397742},"bS":{"$":0},"dk":1351896117,"dw":{"aq":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedRecords"]},"c":0,"d":{"$":-1,"a":0,"b":{"$":"$L","a":["NoUnsortedCases"]},"c":0,"d":{"$":-1,"a":1,"b":{"$":0},"c":0,"d":{"$":-2},"e":{"$":-2}},"e":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedLetDeclarations"]},"c":0,"d":{"$":-2},"e":{"$":-2}}},"e":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedTopLevelDeclarations"]},"c":0,"d":{"$":-2},"e":{"$":-2}}},"a9":{"$":0},"bi":{"$":0,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","hg":"1.1.3"}}}}},"gh":{"$":1},"dd":{"$":0,"a":{"p":3845949080,"gP":{"$":0}}},"L":{"$":-1,"a":1,"b":"src/NoUnsortedTopLevelDeclarations.elm","c":{"c1":1130522341,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"src/NoUnsortedTopLevelDeclarations.elm"},"b3":{"$":"$L","a":[{"bd":true,"eF":{"fi":{"$":0,"a":{"$":"$L","a":["NoUnsortedTopLevelDeclarations"]}},"bF":{"$":0,"a":"configuration"},"it":false},"cF":{"c7":{"bL":31,"b9":63},"dC":{"bL":17,"b9":63}}}]},"eL":{"$":"$L","a":["NoUnsortedTopLevelDeclarations"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"fail"},{"bd":true,"bF":"success"},{"bd":true,"bF":"when-not-to-enable-this-rule"},{"bd":true,"bF":"try-it-out"},{"bd":true,"bF":"RuleConfig"},{"bd":true,"bF":"alphabetically"},{"bd":true,"bF":"exposedOrderWithPrivateFirst"},{"bd":true,"bF":"exposedOrderWithPrivateLast"},{"bd":true,"bF":"glueDependenciesAfterFirstDependent"},{"bd":true,"bF":"glueDependenciesAfterLastDependent"},{"bd":true,"bF":"glueDependenciesBeforeFirstDependent"},{"bd":true,"bF":"glueDependenciesBeforeLastDependent"},{"bd":true,"bF":"glueHelpersAfter"},{"bd":true,"bF":"glueHelpersBefore"},{"bd":true,"bF":"portsFirst"},{"bd":true,"bF":"portsLast"},{"bd":true,"bF":"rule"},{"bd":true,"bF":"sortTopLevelDeclarations"},{"bd":true,"bF":"typesFirst"},{"bd":true,"bF":"typesLast"},{"bd":true,"bF":"review-rule"},{"bd":true,"bF":"configuration"},{"bd":true,"bF":"orderings"},{"bd":true,"bF":"glues"}]}}]},"bi":{"$":1}}},"d":{"$":-1,"a":1,"b":"src/NoUnsortedLetDeclarations.elm","c":{"c1":3093415870,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"src/NoUnsortedLetDeclarations.elm"},"b3":{"$":"$L","a":[{"bd":true,"eF":{"fi":{"$":0,"a":{"$":"$L","a":["NoUnsortedLetDeclarations"]}},"bF":{"$":0,"a":"configuration"},"it":false},"cF":{"c7":{"bL":31,"b9":58},"dC":{"bL":17,"b9":58}}}]},"eL":{"$":"$L","a":["NoUnsortedLetDeclarations"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"fail"},{"bd":true,"bF":"success"},{"bd":true,"bF":"when-not-to-enable-this-rule"},{"bd":true,"bF":"try-it-out"},{"bd":true,"bF":"RuleConfig"},{"bd":true,"bF":"alphabetically"},{"bd":true,"bF":"glueDependenciesAfterFirstDependent"},{"bd":true,"bF":"glueDependenciesAfterLastDependent"},{"bd":true,"bF":"glueDependenciesBeforeFirstDependent"},{"bd":true,"bF":"glueDependenciesBeforeLastDependent"},{"bd":true,"bF":"glueHelpersAfter"},{"bd":true,"bF":"glueHelpersBefore"},{"bd":true,"bF":"rule"},{"bd":true,"bF":"sortLetDeclarations"},{"bd":true,"bF":"usedInExpressionFirst"},{"bd":true,"bF":"usedInExpressionLast"},{"bd":true,"bF":"usedInOtherDeclarationsFirst"},{"bd":true,"bF":"usedInOtherDeclarationsLast"},{"bd":true,"bF":"valuesAfterFunctions"},{"bd":true,"bF":"valuesBeforeFunctions"},{"bd":true,"bF":"review-rule"},{"bd":true,"bF":"configuration"},{"bd":true,"bF":"orderings"},{"bd":true,"bF":"glues"}]}}]},"bi":{"$":1}}},"d":{"$":-1,"a":1,"b":"src/NoUnsortedCases.elm","c":{"c1":4024434763,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"src/NoUnsortedCases.elm"},"b3":{"$":"$L","a":[{"bd":true,"eF":{"fi":{"$":0,"a":{"$":"$L","a":["NoUnsortedCases"]}},"bF":{"$":0,"a":"configuration"},"it":false},"cF":{"c7":{"bL":54,"b9":47},"dC":{"bL":40,"b9":47}}}]},"eL":{"$":"$L","a":["NoUnsortedCases"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"fail"},{"bd":true,"bF":"success"},{"bd":true,"bF":"when-not-to-enable-this-rule"},{"bd":true,"bF":"try-it-out"},{"bd":true,"bF":"RuleConfig"},{"bd":true,"bF":"defaults"},{"bd":true,"bF":"doNotLookPastUnsortable"},{"bd":true,"bF":"doNotSortLiterals"},{"bd":true,"bF":"doNotSortTypesFromDependencies"},{"bd":true,"bF":"rule"},{"bd":true,"bF":"sortListPatternsByLength"},{"bd":true,"bF":"sortOnlyMatchingTypes"},{"bd":true,"bF":"sortTypesFromDependenciesAlphabetically"},{"bd":true,"bF":"review-rule"},{"bd":true,"bF":"configuration"}]}}]},"bi":{"$":1}}},"d":{"$":-2},"e":{"$":-2}},"e":{"$":-1,"a":1,"b":"src/NoUnsortedRecords.elm","c":{"c1":3750573039,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"src/NoUnsortedRecords.elm"},"b3":{"$":"$L","a":[{"bd":true,"eF":{"fi":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"bF":{"$":0,"a":"treatAllSubrecordsAsCanonical"},"it":false},"cF":{"c7":{"bL":70,"b9":118},"dC":{"bL":40,"b9":118}}},{"bd":true,"eF":{"fi":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"bF":{"$":0,"a":"treatCustomTypeRecordsAsCanonical"},"it":false},"cF":{"c7":{"bL":73,"b9":119},"dC":{"bL":39,"b9":119}}}]},"eL":{"$":"$L","a":["NoUnsortedRecords"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"\"proper\"-order"},{"bd":true,"bF":"inference/disambiguation"},{"bd":true,"bF":"best-practices-for-disambiguation"},{"bd":true,"bF":"when-not-to-enable-this-rule"},{"bd":true,"bF":"try-it-out"},{"bd":true,"bF":"RuleConfig"},{"bd":true,"bF":"defaults"},{"bd":true,"bF":"doNotSortAmbiguousRecords"},{"bd":true,"bF":"doNotSortUnknownRecords"},{"bd":true,"bF":"reportAmbiguousRecordsWithoutFix"},{"bd":true,"bF":"reportUnknownRecordsWithoutFix"},{"bd":true,"bF":"rule"},{"bd":true,"bF":"sortGenericFieldsLast"},{"bd":true,"bF":"treatAllSubrecordsAsCanonical"},{"bd":true,"bF":"treatCustomTypeRecordsAsCanonical"},{"bd":true,"bF":"treatSubrecordsAsUnknown"},{"bd":true,"bF":"typecheckAllRecords"},{"bd":true,"bF":"review-rule"},{"bd":true,"bF":"configuration"},{"bd":true,"bF":"sorting"},{"bd":true,"bF":"ambiguous-records"},{"bd":true,"bF":"unknown-records"},{"bd":true,"bF":"subrecords"},{"bd":true,"bF":"other-settings"}]}}]},"bi":{"$":1}}},"d":{"$":-2},"e":{"$":-2}}},"e":{"$":-1,"a":1,"b":"tests/NoUnsortedRecordsTest.elm","c":{"c1":87950215,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"tests/NoUnsortedRecordsTest.elm"},"b3":{"$":0},"eL":{"$":"$L","a":["NoUnsortedRecordsTest"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"all"}]}}]},"bi":{"$":1}}},"d":{"$":-1,"a":0,"b":"tests/NoUnsortedCasesTest.elm","c":{"c1":1657986532,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"tests/NoUnsortedCasesTest.elm"},"b3":{"$":0},"eL":{"$":"$L","a":["NoUnsortedCasesTest"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"all"}]}}]},"bi":{"$":1}}},"d":{"$":-1,"a":1,"b":"src/Util.elm","c":{"c1":2652841245,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"src/Util.elm"},"b3":{"$":0},"eL":{"$":"$L","a":["Util"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"GluedTo"},{"bd":true,"bF":"allBindingsInPattern"},{"bd":true,"bF":"checkSorting"},{"bd":true,"bF":"checkSortingWithGlue"},{"bd":true,"bF":"countUsesIn"},{"bd":true,"bF":"fallbackCompareFor"},{"bd":true,"bF":"fallbackCompareWithUnsortableFor"},{"bd":true,"bF":"findAllNamesIn"},{"bd":true,"bF":"findDependencies"},{"bd":true,"bF":"makeAccessFunc"},{"bd":true,"bF":"validate"}]}}]},"bi":{"$":1}}},"d":{"$":-2},"e":{"$":-2}},"e":{"$":-1,"a":1,"b":"tests/NoUnsortedLetDeclarationsTest.elm","c":{"c1":1771235242,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"tests/NoUnsortedLetDeclarationsTest.elm"},"b3":{"$":0},"eL":{"$":"$L","a":["NoUnsortedLetDeclarationsTest"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"all"}]}}]},"bi":{"$":1}}},"d":{"$":-2},"e":{"$":-2}}},"e":{"$":-1,"a":1,"b":"tests/NoUnsortedTopLevelDeclarationsTest.elm","c":{"c1":3507466519,"bS":{"$":0},"dk":3082277983,"ey":false,"dw":{"aq":{"$":-2},"a9":{"$":"$L","a":[{"bw":{"$":0,"a":"tests/NoUnsortedTopLevelDeclarationsTest.elm"},"b3":{"$":0},"eL":{"$":"$L","a":["NoUnsortedTopLevelDeclarationsTest"]},"aZ":{"$":"$L","a":[{"bd":true,"bF":"all"}]}}]},"bi":{"$":1}}},"d":{"$":-2},"e":{"$":-2}}}},"fG":{"$":0,"a":{"c1":{"$":0,"a":3715779789},"bS":{"$":0},"dk":929107840,"dw":{"aq":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedRecords"]},"c":0,"d":{"$":-1,"a":0,"b":{"$":"$L","a":["NoUnsortedCases"]},"c":0,"d":{"$":-1,"a":1,"b":{"$":0},"c":0,"d":{"$":-2},"e":{"$":-2}},"e":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedLetDeclarations"]},"c":0,"d":{"$":-2},"e":{"$":-2}}},"e":{"$":-1,"a":1,"b":{"$":"$L","a":["NoUnsortedTopLevelDeclarations"]},"c":0,"d":{"$":-2},"e":{"$":-2}}},"a9":{"$":"$L","a":[{"bw":{"$":1,"a":{"c0":"# elm-review-no-unsorted\n\nProvides [`elm-review`](https://package.elm-lang.org/packages/jfmengels/elm-review/latest/)\nrules to ensure that anything (readily) sortable in Elm code is sorted in the\n\"proper\" order.\n\n## Provided rules\n\n* [üîß`NoUnsortedCases`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedCases/) - Reports case patterns that are not in the \"proper\" order.\n* [üîß`NoUnsortedLetDeclarations`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedLetDeclarations/) - Reports `let` declarations that are not in the \"proper\" order.\n* [üîß`NoUnsortedRecords`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/) - Reports record fields that are not in the \"proper\" order.\n* [üîß`NoUnsortedTopLevelDeclarations`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedTopLevelDeclarations/) - Reports top-level declarations that are not in the \"proper\" order.\n\n## Configuration\n\n```elm\nmodule ReviewConfig exposing (config)\n\nimport NoUnsortedCases\nimport NoUnsortedLetDeclarations\nimport NoUnsortedRecords\nimport NoUnsortedTopLevelDeclarations\nimport Review.Rule exposing (Rule)\n\nconfig : List Rule\nconfig =\n    [ NoUnsortedCases.rule NoUnsortedCases.defaults\n    , NoUnsortedLetDeclarations.rule\n        (NoUnsortedLetDeclarations.sortLetDeclarations\n            |> NoUnsortedLetDeclarations.alphabetically\n        )\n    , NoUnsortedRecords.rule\n        (NoUnsortedRecords.defaults\n            |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n        )\n    , NoUnsortedTopLevelDeclarations.rule\n        (NoUnsortedTopLevelDeclarations.sortTopLevelDeclarations\n            |> NoUnsortedTopLevelDeclarations.portsFirst\n            |> NoUnsortedTopLevelDeclarations.exposedOrderWithPrivateLast\n            |> NoUnsortedTopLevelDeclarations.alphabetically\n        )\n    ]\n```\n\n## Try it out\n\nYou can try the example configuration above out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example\n```\n\n## Changelog\n\n* `1.1.3` -- Bump `elm-review` to v2.11.1 and mark rule as providing fixes.\n* `1.1.2` -- üêõ Fix a bug where, when dealing with cyclical sorting conditions,\n  some low priority edges associated with the cycle but not actually responsible\n  for it would be disregarded instead of only those responsible.  In practice,\n  this meant that, very rarely, sortable `case` patterns would not be sorted at\n  all (or would be sorted unstably) when wildcard (`_`) patterns lead to cyclic\n  ordering relationships.  Since the\n  [problem at the core of this](https://en.wikipedia.org/wiki/Feedback_arc_set#NP-hardness)\n  is NP-hard, it is not guaranteed to be fixed but should nevertheless now occur\n  substantially less often (if at all).  Please\n  [open an issue](https://github.com/SiriusStarr/elm-review-no-unsorted/issues)\n  if you encounter unstable sorting behavior or `case` patterns that should be\n  able to be sorted but are not with this version.\n* `1.1.1` -- üöë Fix critical bug caused by upstream bugfix in `elm-syntax`.\n  Version `7.2.9` of `elm-syntax` no longer incorrectly parses record field type\n  signature ranges, so `NoUnsortedRecords` (which repaired the previously\n  incorrect behavior) was producing in invalid ranges for fixes, causing them to\n  mangle code.  `elm-syntax` new lower bound is set to `7.2.9` and the\n  workaround removed, fixing the issue.\n* `1.1.0`\n  * **New Features:**\n    * ‚ú® -- Disable typechecking of unambiguous records by `NoUnsortedRecords`.\n      The old default can be re-enabled with\n      [`typecheckAllRecords`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#typecheckAllRecords)\n    * ‚ú® -- Add control over subrecord support for `NoUnsortedRecords`.  Default\n      behavior is to sort them when they appear in context (e.g. as part of\n      their larger record) but not when they appear alone.  The old behavior did\n      this unreliably and also treated custom type argument records as always\n      canonical; this **old behavior may be re-enabled** (without the\n      unreliability) with\n      [`treatCustomTypeRecordsAsCanonical`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#treatCustomTypeRecordsAsCanonical).\n      New settings for this behavior are also available with\n      [`treatSubrecordsAsUnknown`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#treatSubrecordsAsUnknown)\n      and\n      [`treatAllSubrecordsAsCanonical`](https://package.elm-lang.org/packages/SiriusStarr/elm-review-no-unsorted/1.1.3/NoUnsortedRecords/#treatAllSubrecordsAsCanonical).\n  * **Bugfixes:**\n    * üöë -- Fix critical bug causing control flow to sometimes be altered by\n      `NoUnsortedCases` due to `List.sort` assuming transitivity.  New sorting\n      methodology renders such issues impossible in the future.\n    * üêõ -- Fix doc comments not moving for ports with\n      `NoUnsortedTopLevelDeclarations` (possibly leading to invalid code after\n      fixes).  Doc comment support for ports was added manually, as `elm-syntax`\n      does not parse them, and they now behave like doc comments for all other\n      declarations.\n    * üêõ -- Improve handling of subrecords by `NoUnsortedRecords`. Previously,\n      they were sometimes sorted and sometimes not (depending on what type\n      information was available).  (See above for new configuration options\n      controlling this behavior.)\n    * üêõ -- Fix bad type checking by `NoUnsortedRecords` assigning independent\n      type vars to the same type, e.g. assigning all `Nothing`s to the same\n      `Maybe a` value, even if they were different.\n    * üêõ -- Fix bad type checking by `NoUnsortedRecords` preserving type var\n      assignment between fields (for type vars not in the known record), causing\n      e.g. all `Nothing`s in a record to be required to be the same type.\n    * üêõ -- Fix bad type inference of lambda functions by `NoUnsortedRecords`.\n    * üêõ -- Fix non-functions being considered dependencies/helpers by\n      `NoUnsortedTopLevelDeclarations`.  This brings actual rule behavior in\n      line with that stated in the documentation.\n  * **Other Changes:**\n    * ‚ö°Ô∏è --  Significantly improve performance of `NoUnsortedRecords` (2x faster\n      on some real-world codebases).  Previously, a significant amount of\n      unnecessary type inference and duplicated recursion was being performed\n      due to lack of laziness.\n* `1.0.6` -- üêõ Fix a bug causing `NoUnsortedRecords` to recurse infinitely in\n  certain rare cases where a type variable was assigned to a value containing an\n  identically-named type variable (e.g. the type variable `a` ended up being\n  assigned to a value defined by the generic record `{ a | field : Int }`).\n* `1.0.5` -- üöë Fix critical bug causing `NoUnsortedRecords` to rarely generate\n  valid code that was missing fields for record updates.  It is recommended that\n  you **check any record update expressions** that **contained comments** that\n  were fixed by this rule prior to this version, as one or more fields may have\n  been appended to the end of a comment in sorting.\n* `1.0.4` -- Update to `elm-syntax` v7.2.8 to fix upstream issue with lambda\n  ranges generating invalid code in fixes.\n* `1.0.3` -- Fix crash with `--fix` or `--watch` due to comparison of function\n  types in `ProjectContext` of `NoUnsortedRecords`.\n* `1.0.2` -- Fix crash in handling of record type comparison.\n* `1.0.1` -- Fix crash in handling of generic records when not all fields must\n  be present.\n* `1.0.0` -- Initial release\n","id":"README.md"}},"b3":{"$":"$L","a":[{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"jfmengels/elm-review","iv":{"$":1},"hg":"latest"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":91,"b9":3},"dC":{"bL":25,"b9":3}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedCases"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":119,"b9":9},"dC":{"bL":24,"b9":9}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedLetDeclarations"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":139,"b9":10},"dC":{"bL":34,"b9":10}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":123,"b9":11},"dC":{"bL":26,"b9":11}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedTopLevelDeclarations"]}},"hg":"1.1.3"}},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":149,"b9":12},"dC":{"bL":39,"b9":12}}},{"bd":true,"eF":{"fi":{"$":3,"a":"https://en.wikipedia.org/wiki/Feedback_arc_set"},"bF":{"$":0,"a":"NP-hardness"},"it":false},"cF":{"c7":{"bL":91,"b9":62},"dC":{"bL":33,"b9":62}}},{"bd":true,"eF":{"fi":{"$":3,"a":"https://github.com/SiriusStarr/elm-review-no-unsorted/issues"},"bF":{"$":1},"it":false},"cF":{"c7":{"bL":79,"b9":65},"dC":{"bL":19,"b9":65}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"typecheckAllRecords"},"it":false},"cF":{"c7":{"bL":148,"b9":78},"dC":{"bL":31,"b9":78}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"treatCustomTypeRecordsAsCanonical"},"it":false},"cF":{"c7":{"bL":176,"b9":85},"dC":{"bL":45,"b9":85}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"treatSubrecordsAsUnknown"},"it":false},"cF":{"c7":{"bL":158,"b9":87},"dC":{"bL":36,"b9":87}}},{"bd":true,"eF":{"fi":{"$":2,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","iv":{"$":0,"a":{"$":"$L","a":["NoUnsortedRecords"]}},"hg":"1.1.3"}},"bF":{"$":0,"a":"treatAllSubrecordsAsCanonical"},"it":false},"cF":{"c7":{"bL":168,"b9":89},"dC":{"bL":41,"b9":89}}}]},"eL":{"$":0},"aZ":{"$":"$L","a":[{"bd":true,"bF":"elm-review-no-unsorted"},{"bd":true,"bF":"provided-rules"},{"bd":true,"bF":"configuration"},{"bd":true,"bF":"try-it-out"},{"bd":true,"bF":"changelog"}]}}]},"bi":{"$":0,"a":{"cH":"SiriusStarr/elm-review-no-unsorted","hg":"1.1.3"}}}}}}
