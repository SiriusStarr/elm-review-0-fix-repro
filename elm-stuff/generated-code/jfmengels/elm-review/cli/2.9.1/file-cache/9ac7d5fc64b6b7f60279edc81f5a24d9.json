[1,[[1,1,6,6,[0,[[1,8,1,38,["NoUnsortedTopLevelDeclarations"]],[1,39,6,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,43,[1,"sortTopLevelDeclarations"]],[4,7,4,21,[1,"alphabetically"]],[4,23,4,50,[1,"exposedOrderWithPrivateLast"]],[4,52,4,80,[1,"exposedOrderWithPrivateFirst"]],[4,82,4,92,[1,"typesFirst"]],[4,94,4,103,[1,"typesLast"]],[4,105,4,115,[1,"portsFirst"]],[4,117,4,126,[1,"portsLast"]],[5,7,5,24,[1,"glueHelpersBefore"]],[5,26,5,42,[1,"glueHelpersAfter"]],[5,44,5,80,[1,"glueDependenciesBeforeFirstDependent"]],[5,82,5,117,[1,"glueDependenciesAfterFirstDependent"]],[5,119,5,153,[1,"glueDependenciesAfterLastDependent"]],[5,155,5,190,[1,"glueDependenciesBeforeLastDependent"]]]]]]]],[[44,1,44,57,[[44,8,44,30,["Elm","Syntax","Declaration"]],[0],[1,[44,31,44,57,[1,[[44,41,44,56,[3,["Declaration",[1,[44,52,44,56]]]]]]]]]]],[45,1,45,69,[[45,8,45,27,["Elm","Syntax","Exposing"]],[1,[45,31,45,39,["Exposing"]]],[1,[45,40,45,69,[1,[[45,50,45,68,[3,["TopLevelExpose",[1,[45,64,45,68]]]]]]]]]]],[46,1,46,43,[[46,8,46,25,["Elm","Syntax","Import"]],[0],[1,[46,26,46,43,[1,[[46,36,46,42,[2,"Import"]]]]]]]],[47,1,47,53,[[47,8,47,25,["Elm","Syntax","Module"]],[1,[47,29,47,35,["Module"]]],[1,[47,36,47,53,[1,[[47,46,47,52,[2,"Module"]]]]]]]],[48,1,48,47,[[48,8,48,23,["Elm","Syntax","Node"]],[1,[48,27,48,31,["Node"]]],[1,[48,32,48,47,[1,[[48,42,48,46,[2,"Node"]]]]]]]],[49,1,49,50,[[49,8,49,24,["Elm","Syntax","Range"]],[1,[49,28,49,33,["Range"]]],[1,[49,34,49,50,[1,[[49,44,49,49,[2,"Range"]]]]]]]],[50,1,50,27,[[50,8,50,18,["List","Extra"]],[1,[50,22,50,27,["ListX"]]],[0]]],[51,1,51,29,[[51,8,51,19,["Maybe","Extra"]],[1,[51,23,51,29,["MaybeX"]]],[0]]],[52,1,52,50,[[52,8,52,19,["Review","Rule"]],[1,[52,23,52,27,["Rule"]]],[1,[52,28,52,50,[1,[[52,38,52,43,[2,"Error"]],[52,45,52,49,[2,"Rule"]]]]]]]],[53,1,53,26,[[53,8,53,11,["Set"]],[0],[1,[53,12,53,26,[1,[[53,22,53,25,[2,"Set"]]]]]]]],[54,1,54,31,[[54,8,54,20,["String","Extra"]],[1,[54,24,54,31,["StringX"]]],[0]]],[55,1,55,101,[[55,8,55,12,["Util"]],[0],[1,[55,13,55,101,[1,[[55,23,55,34,[3,["GluedTo",[1,[55,30,55,34]]]]],[55,36,55,56,[1,"checkSortingWithGlue"]],[55,58,55,72,[1,"findAllNamesIn"]],[55,74,55,90,[1,"findDependencies"]],[55,92,55,100,[1,"validate"]]]]]]]]],[[58,1,175,37,[0,[[1,[58,1,153,3,"{-| Reports top-level declarations that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the declarations.\n\nThe proper order of declarations is specified in the rule configuration. See the\n[Configuration](#configuration) section below for more information.\n\n    config =\n        [ NoUnsortedTopLevelDeclarations.rule\n            (NoUnsortedTopLevelDeclarations.sortTopLevelDeclarations\n                |> NoUnsortedTopLevelDeclarations.portsFirst\n                |> NoUnsortedTopLevelDeclarations.exposedOrderWithPrivateLast\n                |> NoUnsortedTopLevelDeclarations.alphabetically\n            )\n        ]\n\n\n## Fail\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    type A\n        = A\n\n    z =\n        zed\n\n    type alias Z =\n        A\n\n    a =\n        foo\n\n    b =\n        bar\n\n\n## Success\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    type A\n        = A\n\n    a =\n        foo\n\n    type alias Z =\n        A\n\n    b =\n        bar\n\n    z =\n        zed\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that your top-level declarations are\nin a consistent, predictable order.\n\nThis rule is not useful when you want to be able to write top-level declarations\nin varying orders throughout your codebase, e.g. if you want to emphasize what\nis most important on a case-by-case basis.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedTopLevelDeclarations\n```\n\n-}"]],[1,[154,1,154,28,[[154,1,154,5,"rule"],[154,8,154,28,[6,[154,8,154,20,[1,[154,8,154,18,[[],"RuleConfig"]],[[154,19,154,20,[0,"r"]]]]],[154,24,154,28,[1,[154,24,154,28,[[],"Rule"]],[]]]]]]]],[155,1,175,37,[[155,1,155,5,"rule"],[[155,6,155,20,[14,[155,7,155,19,[12,[[],"RuleConfig"],[[155,18,155,19,[11,"r"]]]]]]]],[156,5,175,37,[1,"|>",0,[156,5,174,43,[1,"|>",0,[156,5,173,14,[1,"|>",0,[156,5,159,90,[1,"|>",0,[156,5,158,95,[1,"|>",0,[156,5,157,83,[1,"|>",0,[156,5,156,96,[0,[[156,5,156,48,[2,["Rule"],"newModuleRuleSchemaUsingContextCreator"]],[156,49,156,81,[5,"NoUnsortedTopLevelDeclarations"]],[156,82,156,96,[2,[],"initialContext"]]]]],[157,12,157,83,[0,[[157,12,157,44,[2,["Rule"],"withModuleDefinitionVisitor"]],[157,45,157,83,[7,[157,46,157,82,[18,[[[157,47,157,48,[11,"m"]],[157,49,157,50,[11,"c"]]],[157,54,157,82,[6,[[157,56,157,58,[9,[]]],[157,60,157,80,[0,[[157,60,157,76,[2,[],"getModuleExports"]],[157,77,157,78,[2,[],"m"]],[157,79,157,80,[2,[],"c"]]]]]]]]]]]]]]]]]],[158,12,158,95,[0,[[158,12,158,36,[2,["Rule"],"withCommentsVisitor"]],[158,37,158,95,[7,[158,38,158,94,[18,[[[158,39,158,41,[11,"cs"]],[158,42,158,49,[11,"context"]]],[158,53,158,94,[6,[[158,55,158,57,[9,[]]],[158,59,158,92,[0,[[158,59,158,81,[2,[],"getUnparsedDocComments"]],[158,82,158,84,[2,[],"cs"]],[158,85,158,92,[2,[],"context"]]]]]]]]]]]]]]]]]],[159,12,159,90,[0,[[159,12,159,34,[2,["Rule"],"withImportVisitor"]],[159,35,159,90,[7,[159,36,159,89,[18,[[[159,37,159,38,[11,"i"]],[159,39,159,46,[11,"context"]]],[159,50,159,89,[6,[[159,52,159,54,[9,[]]],[159,56,159,87,[0,[[159,56,159,77,[2,[],"accumulateImportRange"]],[159,78,159,79,[2,[],"i"]],[159,80,159,87,[2,[],"context"]]]]]]]]]]]]]]]]]],[160,12,173,14,[0,[[160,12,160,43,[2,["Rule"],"withDeclarationListVisitor"]],[161,13,173,14,[7,[161,14,172,18,[18,[[[161,15,161,17,[11,"ds"]],[161,18,161,19,[11,"c"]]],[162,17,172,18,[6,[[162,19,170,22,[0,[[162,19,162,37,[2,[],"declarationVisitor"]],[163,21,168,22,[7,[163,22,167,26,[0,[[163,22,163,32,[2,[],"RuleConfig"]],[164,25,167,26,[21,[164,27,164,28,"r"],[[165,31,166,29,[[165,31,165,37,"sortBy"],[165,40,165,61,[0,[[165,40,165,52,[2,["List"],"reverse"]],[165,53,165,61,[19,[165,53,165,54,[2,[],"r"]],[165,55,165,61,"sortBy"]]]]]]]],[166,31,167,25,[[166,31,166,36,"glues"],[166,39,166,59,[0,[[166,39,166,51,[2,["List"],"reverse"]],[166,52,166,59,[19,[166,52,166,53,[2,[],"r"]],[166,54,166,59,"glues"]]]]]]]]]]]]]]]],[169,21,169,23,[2,[],"ds"]],[170,21,170,22,[2,[],"c"]]]]],[171,19,171,20,[2,[],"c"]]]]]]]]]]]]]]],[174,12,174,43,[2,["Rule"],"providesFixesForModuleRule"]]]],[175,12,175,37,[2,["Rule"],"fromModuleRuleSchema"]]]]]]]]],[178,1,185,10,[2,[[1,[178,1,180,3,"{-| Configuration for this rule. Create a new one with\n`sortTopLevelDeclarations` and use orderings to create a hierarchy of sorting.\n-}"]],[181,6,181,16,"RuleConfig"],[[181,17,181,18,"r"]],[[182,7,185,10,[[182,7,182,17,"RuleConfig"],[[183,9,185,10,[4,[[183,11,183,46,[[183,11,183,17,"sortBy"],[183,20,183,46,[1,[183,20,183,24,[[],"List"]],[[183,25,183,46,[6,[183,26,183,29,[1,[183,26,183,29,[[],"TLD"]],[]]],[183,33,183,45,[6,[183,33,183,36,[1,[183,33,183,36,[[],"TLD"]],[]]],[183,40,183,45,[1,[183,40,183,45,[[],"Order"]],[]]]]]]]]]]]],[184,11,185,9,[[184,11,184,16,"glues"],[184,19,184,28,[1,[184,19,184,23,[[],"List"]],[[184,24,184,28,[1,[184,24,184,28,[[],"Glue"]],[]]]]]]]]]]]]]]]]]],[188,1,196,6,[1,[[1,[188,1,189,3,"{-| Info about the module, as well as the source extractor.\n-}"]],[190,12,190,19,"Context"],[],[191,5,196,6,[4,[[191,7,191,38,[[191,7,191,20,"extractSource"],[191,23,191,38,[6,[191,23,191,28,[1,[191,23,191,28,[[],"Range"]],[]]],[191,32,191,38,[1,[191,32,191,38,[[],"String"]],[]]]]]]],[192,7,193,5,[[192,7,192,14,"exports"],[192,17,192,36,[1,[192,17,192,22,[[],"Maybe"]],[[192,23,192,36,[1,[192,24,192,28,[[],"List"]],[[192,29,192,35,[1,[192,29,192,35,[[],"String"]],[]]]]]]]]]]],[193,7,194,5,[[193,7,193,17,"errorRange"],[193,20,193,25,[1,[193,20,193,25,[[],"Range"]],[]]]]],[194,7,195,5,[[194,7,194,26,"unparsedDocComments"],[194,29,194,47,[1,[194,29,194,33,[[],"List"]],[[194,34,194,47,[1,[194,35,194,39,[[],"Node"]],[[194,40,194,46,[1,[194,40,194,46,[[],"String"]],[]]]]]]]]]]],[195,7,196,5,[[195,7,195,24,"moduleImportRange"],[195,27,195,38,[1,[195,27,195,32,[[],"Maybe"]],[[195,33,195,38,[1,[195,33,195,38,[[],"Range"]],[]]]]]]]]]]]]]],[199,1,202,46,[1,[[1,[199,1,200,3,"{-| Given a `TLD` and a list of other `TLD`s,\n-}"]],[201,12,201,16,"Glue"],[],[202,5,202,46,[6,[202,5,202,17,[3,[[202,7,202,10,[1,[202,7,202,10,[[],"Int"]],[]]],[202,12,202,15,[1,[202,12,202,15,[[],"TLD"]],[]]]]]],[202,21,202,46,[6,[202,21,202,29,[1,[202,21,202,25,[[],"List"]],[[202,26,202,29,[1,[202,26,202,29,[[],"TLD"]],[]]]]]],[202,33,202,46,[1,[202,33,202,38,[[],"Maybe"]],[[202,39,202,46,[1,[202,39,202,46,[[],"GluedTo"]],[]]]]]]]]]]]]],[205,1,214,6,[1,[[1,[205,1,206,3,"{-| Information about a TLD.\n-}"]],[207,12,207,15,"TLD"],[],[208,5,214,6,[4,[[208,7,208,30,[[208,7,208,12,"type_"],[208,15,208,30,[1,[208,15,208,30,[[],"DeclarationType"]],[]]]]],[209,7,210,5,[[209,7,209,17,"namesBound"],[209,20,209,30,[1,[209,20,209,23,[[],"Set"]],[[209,24,209,30,[1,[209,24,209,30,[[],"String"]],[]]]]]]]],[210,7,211,5,[[210,7,210,19,"exposedOrder"],[210,22,210,31,[1,[210,22,210,27,[[],"Maybe"]],[[210,28,210,31,[1,[210,28,210,31,[[],"Int"]],[]]]]]]]],[211,7,212,5,[[211,7,211,12,"range"],[211,15,211,20,[1,[211,15,211,20,[[],"Range"]],[]]]]],[212,7,213,5,[[212,7,212,26,"dependentOnBindings"],[212,29,212,39,[1,[212,29,212,32,[[],"Set"]],[[212,33,212,39,[1,[212,33,212,39,[[],"String"]],[]]]]]]]],[213,7,214,5,[[213,7,213,12,"glued"],[213,15,213,28,[1,[213,15,213,20,[[],"Maybe"]],[[213,21,213,28,[1,[213,21,213,28,[[],"GluedTo"]],[]]]]]]]]]]]]]],[217,1,222,11,[2,[[1,[217,1,218,3,"{-| The type of TLD it is.\n-}"]],[219,6,219,21,"DeclarationType"],[],[[220,7,220,15,[[220,7,220,15,"Function"],[]]],[221,7,221,11,[[221,7,221,11,"Port"],[]]],[222,7,222,11,[[222,7,222,11,"Type"],[]]]]]]],[225,1,230,43,[0,[[1,[225,1,227,3,"{-| Create a new `RuleConfig`. Use the various orderings to then specify\nprimary and fallback orderings.\n-}"]],[1,[228,1,228,138,[[228,1,228,25,"sortTopLevelDeclarations"],[228,28,228,138,[1,[228,28,228,38,[[],"RuleConfig"]],[[228,39,228,138,[4,[[228,41,228,60,[[228,41,228,55,"noAlphabetical"],[228,58,228,60,[2]]]],[228,62,228,79,[[228,62,228,74,"noDependency"],[228,77,228,79,[2]]]],[228,81,228,95,[[228,81,228,90,"noExposed"],[228,93,228,95,[2]]]],[228,97,228,110,[[228,97,228,105,"noHelper"],[228,108,228,110,[2]]]],[228,112,228,123,[[228,112,228,118,"noPort"],[228,121,228,123,[2]]]],[228,125,228,137,[[228,125,228,131,"noType"],[228,134,228,136,[2]]]]]]]]]]]]],[229,1,230,43,[[229,1,229,25,"sortTopLevelDeclarations"],[],[230,5,230,43,[0,[[230,5,230,15,[2,[],"RuleConfig"]],[230,16,230,43,[8,[[230,18,230,29,[[230,18,230,24,"sortBy"],[230,27,230,29,[9,[]]]]],[230,31,230,42,[[230,31,230,36,"glues"],[230,39,230,41,[9,[]]]]]]]]]]]]]]]],[233,1,260,10,[0,[[1,[233,1,252,3,"{-| Sort declarations alphabetically. Note that this decapitalizes the first\nletter before performing the comparison so as to treat types and functions the\nsame. For example, the following is sorted alphabetically:\n\n    type A\n        = A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    z =\n        zed\n\n    type alias Z =\n        A\n\n-}"]],[1,[253,1,253,72,[[253,1,253,15,"alphabetically"],[253,18,253,72,[6,[253,18,253,56,[1,[253,18,253,28,[[],"RuleConfig"]],[[253,29,253,56,[5,[253,31,253,32,"r"],[253,34,253,55,[[253,35,253,55,[[253,35,253,49,"noAlphabetical"],[253,52,253,54,[2]]]]]]]]]]],[253,60,253,72,[1,[253,60,253,70,[[],"RuleConfig"]],[[253,71,253,72,[0,"r"]]]]]]]]]],[254,1,260,10,[[254,1,254,15,"alphabetically"],[[254,16,254,30,[14,[254,17,254,29,[12,[[],"RuleConfig"],[[254,28,254,29,[11,"r"]]]]]]]],[255,5,260,10,[0,[[255,5,255,15,[2,[],"RuleConfig"]],[256,9,260,10,[21,[256,11,256,12,"r"],[[257,15,260,9,[[257,15,257,21,"sortBy"],[258,17,259,32,[1,"::",1,[258,17,258,154,[7,[258,18,258,153,[18,[[[258,19,258,21,[11,"d1"]],[258,22,258,24,[11,"d2"]]],[258,28,258,153,[0,[[258,28,258,35,[2,[],"compare"]],[258,36,258,94,[7,[258,37,258,93,[1,"<|",1,[258,37,258,47,[2,["Set"],"toList"]],[258,51,258,93,[0,[[258,51,258,58,[2,["Set"],"map"]],[258,59,258,79,[2,["StringX"],"decapitalize"]],[258,80,258,93,[19,[258,80,258,82,[2,[],"d1"]],[258,83,258,93,"namesBound"]]]]]]]]]],[258,95,258,153,[7,[258,96,258,152,[1,"<|",1,[258,96,258,106,[2,["Set"],"toList"]],[258,110,258,152,[0,[[258,110,258,117,[2,["Set"],"map"]],[258,118,258,138,[2,["StringX"],"decapitalize"]],[258,139,258,152,[19,[258,139,258,141,[2,[],"d2"]],[258,142,258,152,"namesBound"]]]]]]]]]]]]]]]]]],[259,24,259,32,[19,[259,24,259,25,[2,[],"r"]],[259,26,259,32,"sortBy"]]]]]]]]]]]]]]]]]],[263,1,315,10,[0,[[1,[263,1,294,3,"{-| Sort TLDs in the order they are exposed by the module, with private TLDs\ncoming after all those that are exposed. For example, the following is sorted\nby this and then alphabetically:\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    type A\n        = A\n\n    a =\n        foo\n\n    type alias Z =\n        A\n\n    b =\n        bar\n\n    z =\n        zed\n\n-}"]],[1,[295,1,295,80,[[295,1,295,28,"exposedOrderWithPrivateLast"],[295,31,295,80,[6,[295,31,295,64,[1,[295,31,295,41,[[],"RuleConfig"]],[[295,42,295,64,[5,[295,44,295,45,"r"],[295,47,295,63,[[295,48,295,63,[[295,48,295,57,"noExposed"],[295,60,295,62,[2]]]]]]]]]]],[295,68,295,80,[1,[295,68,295,78,[[],"RuleConfig"]],[[295,79,295,80,[0,"r"]]]]]]]]]],[296,1,315,10,[[296,1,296,28,"exposedOrderWithPrivateLast"],[[296,29,296,43,[14,[296,30,296,42,[12,[[],"RuleConfig"],[[296,41,296,42,[11,"r"]]]]]]]],[297,5,315,10,[0,[[297,5,297,15,[2,[],"RuleConfig"]],[298,9,315,10,[21,[298,11,298,12,"r"],[[299,15,315,9,[[299,15,299,21,"sortBy"],[300,17,314,32,[1,"::",1,[300,17,313,18,[7,[300,18,312,31,[18,[[[300,19,300,21,[11,"d1"]],[300,22,300,24,[11,"d2"]]],[301,21,312,31,[17,[[301,26,301,62,[6,[[301,28,301,43,[19,[301,28,301,30,[2,[],"d1"]],[301,31,301,43,"exposedOrder"]]],[301,45,301,60,[19,[301,45,301,47,[2,[],"d2"]],[301,48,301,60,"exposedOrder"]]]]]],[[[302,25,302,45,[7,[[302,27,302,34,[12,[[],"Just"],[[302,32,302,34,[11,"i1"]]]]],[302,36,302,43,[12,[[],"Just"],[[302,41,302,43,[11,"i2"]]]]]]]],[303,29,303,42,[0,[[303,29,303,36,[2,[],"compare"]],[303,37,303,39,[2,[],"i1"]],[303,40,303,42,[2,[],"i2"]]]]]],[[305,25,305,44,[7,[[305,27,305,33,[12,[[],"Just"],[[305,32,305,33,[0]]]]],[305,35,305,42,[12,[[],"Nothing"],[]]]]]],[306,29,306,31,[2,[],"LT"]]],[[308,25,308,44,[7,[[308,27,308,34,[12,[[],"Nothing"],[]]],[308,36,308,42,[12,[[],"Just"],[[308,41,308,42,[0]]]]]]]],[309,29,309,31,[2,[],"GT"]]],[[311,25,311,45,[7,[[311,27,311,34,[12,[[],"Nothing"],[]]],[311,36,311,43,[12,[[],"Nothing"],[]]]]]],[312,29,312,31,[2,[],"EQ"]]]]]]]]]]]],[314,24,314,32,[19,[314,24,314,25,[2,[],"r"]],[314,26,314,32,"sortBy"]]]]]]]]]]]]]]]]]],[318,1,370,10,[0,[[1,[318,1,349,3,"{-| Sort TLDs in the order they are exposed by the module, with private TLDs\ncoming before all those that are exposed. For example, the following is sorted\nby this and then alphabetically:\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    b =\n        bar\n\n    z =\n        zed\n\n    type A\n        = A\n\n    a =\n        foo\n\n    type alias Z =\n        A\n\n-}"]],[1,[350,1,350,81,[[350,1,350,29,"exposedOrderWithPrivateFirst"],[350,32,350,81,[6,[350,32,350,65,[1,[350,32,350,42,[[],"RuleConfig"]],[[350,43,350,65,[5,[350,45,350,46,"r"],[350,48,350,64,[[350,49,350,64,[[350,49,350,58,"noExposed"],[350,61,350,63,[2]]]]]]]]]]],[350,69,350,81,[1,[350,69,350,79,[[],"RuleConfig"]],[[350,80,350,81,[0,"r"]]]]]]]]]],[351,1,370,10,[[351,1,351,29,"exposedOrderWithPrivateFirst"],[[351,30,351,44,[14,[351,31,351,43,[12,[[],"RuleConfig"],[[351,42,351,43,[11,"r"]]]]]]]],[352,5,370,10,[0,[[352,5,352,15,[2,[],"RuleConfig"]],[353,9,370,10,[21,[353,11,353,12,"r"],[[354,15,370,9,[[354,15,354,21,"sortBy"],[355,17,369,32,[1,"::",1,[355,17,368,18,[7,[355,18,367,31,[18,[[[355,19,355,21,[11,"d1"]],[355,22,355,24,[11,"d2"]]],[356,21,367,31,[17,[[356,26,356,62,[6,[[356,28,356,43,[19,[356,28,356,30,[2,[],"d1"]],[356,31,356,43,"exposedOrder"]]],[356,45,356,60,[19,[356,45,356,47,[2,[],"d2"]],[356,48,356,60,"exposedOrder"]]]]]],[[[357,25,357,45,[7,[[357,27,357,34,[12,[[],"Just"],[[357,32,357,34,[11,"i1"]]]]],[357,36,357,43,[12,[[],"Just"],[[357,41,357,43,[11,"i2"]]]]]]]],[358,29,358,42,[0,[[358,29,358,36,[2,[],"compare"]],[358,37,358,39,[2,[],"i1"]],[358,40,358,42,[2,[],"i2"]]]]]],[[360,25,360,44,[7,[[360,27,360,33,[12,[[],"Just"],[[360,32,360,33,[0]]]]],[360,35,360,42,[12,[[],"Nothing"],[]]]]]],[361,29,361,31,[2,[],"GT"]]],[[363,25,363,44,[7,[[363,27,363,34,[12,[[],"Nothing"],[]]],[363,36,363,42,[12,[[],"Just"],[[363,41,363,42,[0]]]]]]]],[364,29,364,31,[2,[],"LT"]]],[[366,25,366,45,[7,[[366,27,366,34,[12,[[],"Nothing"],[]]],[366,36,366,43,[12,[[],"Nothing"],[]]]]]],[367,29,367,31,[2,[],"EQ"]]]]]]]]]]]],[369,24,369,32,[19,[369,24,369,25,[2,[],"r"]],[369,26,369,32,"sortBy"]]]]]]]]]]]]]]]]]],[373,1,413,10,[0,[[1,[373,1,392,3,"{-| Sort TLDs so that types and type aliases always come before functions (and\nports, if they haven't been sorted already). For example, the following is\nsorted by this order and then alphabetically:\n\n    type A\n        = A\n\n    type alias Z =\n        A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    z =\n        zed\n\n-}"]],[1,[393,1,393,60,[[393,1,393,11,"typesFirst"],[393,14,393,60,[6,[393,14,393,44,[1,[393,14,393,24,[[],"RuleConfig"]],[[393,25,393,44,[5,[393,27,393,28,"r"],[393,30,393,43,[[393,31,393,43,[[393,31,393,37,"noType"],[393,40,393,42,[2]]]]]]]]]]],[393,48,393,60,[1,[393,48,393,58,[[],"RuleConfig"]],[[393,59,393,60,[0,"r"]]]]]]]]]],[394,1,413,10,[[394,1,394,11,"typesFirst"],[[394,12,394,26,[14,[394,13,394,25,[12,[[],"RuleConfig"],[[394,24,394,25,[11,"r"]]]]]]]],[395,5,413,10,[0,[[395,5,395,15,[2,[],"RuleConfig"]],[396,9,413,10,[21,[396,11,396,12,"r"],[[397,15,413,9,[[397,15,397,21,"sortBy"],[398,17,412,32,[1,"::",1,[398,17,411,18,[7,[398,18,410,31,[18,[[[398,19,398,21,[11,"d1"]],[398,22,398,24,[11,"d2"]]],[399,21,410,31,[17,[[399,26,399,48,[6,[[399,28,399,36,[19,[399,28,399,30,[2,[],"d1"]],[399,31,399,36,"type_"]]],[399,38,399,46,[19,[399,38,399,40,[2,[],"d2"]],[399,41,399,46,"type_"]]]]]],[[[400,25,400,39,[7,[[400,27,400,31,[12,[[],"Type"],[]]],[400,33,400,37,[12,[[],"Type"],[]]]]]],[401,29,401,31,[2,[],"EQ"]]],[[403,25,403,36,[7,[[403,27,403,31,[12,[[],"Type"],[]]],[403,33,403,34,[0]]]]],[404,29,404,31,[2,[],"LT"]]],[[406,25,406,36,[7,[[406,27,406,28,[0]],[406,30,406,34,[12,[[],"Type"],[]]]]]],[407,29,407,31,[2,[],"GT"]]],[[409,25,409,26,[0]],[410,29,410,31,[2,[],"EQ"]]]]]]]]]]]],[412,24,412,32,[19,[412,24,412,25,[2,[],"r"]],[412,26,412,32,"sortBy"]]]]]]]]]]]]]]]]]],[416,1,456,10,[0,[[1,[416,1,435,3,"{-| Sort TLDs so that types and type aliases always come after functions (and\nports, if they haven't been sorted already). For example, the following is\nsorted by this order and then alphabetically:\n\n    a =\n        foo\n\n    b =\n        bar\n\n    z =\n        zed\n\n    type A\n        = A\n\n    type alias Z =\n        A\n\n-}"]],[1,[436,1,436,59,[[436,1,436,10,"typesLast"],[436,13,436,59,[6,[436,13,436,43,[1,[436,13,436,23,[[],"RuleConfig"]],[[436,24,436,43,[5,[436,26,436,27,"r"],[436,29,436,42,[[436,30,436,42,[[436,30,436,36,"noType"],[436,39,436,41,[2]]]]]]]]]]],[436,47,436,59,[1,[436,47,436,57,[[],"RuleConfig"]],[[436,58,436,59,[0,"r"]]]]]]]]]],[437,1,456,10,[[437,1,437,10,"typesLast"],[[437,11,437,25,[14,[437,12,437,24,[12,[[],"RuleConfig"],[[437,23,437,24,[11,"r"]]]]]]]],[438,5,456,10,[0,[[438,5,438,15,[2,[],"RuleConfig"]],[439,9,456,10,[21,[439,11,439,12,"r"],[[440,15,456,9,[[440,15,440,21,"sortBy"],[441,17,455,32,[1,"::",1,[441,17,454,18,[7,[441,18,453,31,[18,[[[441,19,441,21,[11,"d1"]],[441,22,441,24,[11,"d2"]]],[442,21,453,31,[17,[[442,26,442,48,[6,[[442,28,442,36,[19,[442,28,442,30,[2,[],"d1"]],[442,31,442,36,"type_"]]],[442,38,442,46,[19,[442,38,442,40,[2,[],"d2"]],[442,41,442,46,"type_"]]]]]],[[[443,25,443,39,[7,[[443,27,443,31,[12,[[],"Type"],[]]],[443,33,443,37,[12,[[],"Type"],[]]]]]],[444,29,444,31,[2,[],"EQ"]]],[[446,25,446,36,[7,[[446,27,446,31,[12,[[],"Type"],[]]],[446,33,446,34,[0]]]]],[447,29,447,31,[2,[],"GT"]]],[[449,25,449,36,[7,[[449,27,449,28,[0]],[449,30,449,34,[12,[[],"Type"],[]]]]]],[450,29,450,31,[2,[],"LT"]]],[[452,25,452,26,[0]],[453,29,453,31,[2,[],"EQ"]]]]]]]]]]]],[455,24,455,32,[19,[455,24,455,25,[2,[],"r"]],[455,26,455,32,"sortBy"]]]]]]]]]]]]]]]]]],[459,1,501,10,[0,[[1,[459,1,480,3,"{-| Sort TLDs so that ports always come before functions (and types, if they\nhaven't been sorted already). For example, the following is sorted by this order\nand then alphabetically:\n\n    port sendMessage : String -> Cmd msg\n\n    type A\n        = A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    type alias Z =\n        A\n\n    z =\n        zed\n\n-}"]],[1,[481,1,481,60,[[481,1,481,11,"portsFirst"],[481,14,481,60,[6,[481,14,481,44,[1,[481,14,481,24,[[],"RuleConfig"]],[[481,25,481,44,[5,[481,27,481,28,"r"],[481,30,481,43,[[481,31,481,43,[[481,31,481,37,"noPort"],[481,40,481,42,[2]]]]]]]]]]],[481,48,481,60,[1,[481,48,481,58,[[],"RuleConfig"]],[[481,59,481,60,[0,"r"]]]]]]]]]],[482,1,501,10,[[482,1,482,11,"portsFirst"],[[482,12,482,26,[14,[482,13,482,25,[12,[[],"RuleConfig"],[[482,24,482,25,[11,"r"]]]]]]]],[483,5,501,10,[0,[[483,5,483,15,[2,[],"RuleConfig"]],[484,9,501,10,[21,[484,11,484,12,"r"],[[485,15,501,9,[[485,15,485,21,"sortBy"],[486,17,500,32,[1,"::",1,[486,17,499,18,[7,[486,18,498,31,[18,[[[486,19,486,21,[11,"d1"]],[486,22,486,24,[11,"d2"]]],[487,21,498,31,[17,[[487,26,487,48,[6,[[487,28,487,36,[19,[487,28,487,30,[2,[],"d1"]],[487,31,487,36,"type_"]]],[487,38,487,46,[19,[487,38,487,40,[2,[],"d2"]],[487,41,487,46,"type_"]]]]]],[[[488,25,488,39,[7,[[488,27,488,31,[12,[[],"Port"],[]]],[488,33,488,37,[12,[[],"Port"],[]]]]]],[489,29,489,31,[2,[],"EQ"]]],[[491,25,491,36,[7,[[491,27,491,31,[12,[[],"Port"],[]]],[491,33,491,34,[0]]]]],[492,29,492,31,[2,[],"LT"]]],[[494,25,494,36,[7,[[494,27,494,28,[0]],[494,30,494,34,[12,[[],"Port"],[]]]]]],[495,29,495,31,[2,[],"GT"]]],[[497,25,497,26,[0]],[498,29,498,31,[2,[],"EQ"]]]]]]]]]]]],[500,24,500,32,[19,[500,24,500,25,[2,[],"r"]],[500,26,500,32,"sortBy"]]]]]]]]]]]]]]]]]],[504,1,546,10,[0,[[1,[504,1,525,3,"{-| Sort TLDs so that ports always come after functions (and types, if they\nhaven't been sorted already). For example, the following is sorted by this order\nand then alphabetically:\n\n    type A\n        = A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    type alias Z =\n        A\n\n    z =\n        zed\n\n    port sendMessage : String -> Cmd msg\n\n-}"]],[1,[526,1,526,59,[[526,1,526,10,"portsLast"],[526,13,526,59,[6,[526,13,526,43,[1,[526,13,526,23,[[],"RuleConfig"]],[[526,24,526,43,[5,[526,26,526,27,"r"],[526,29,526,42,[[526,30,526,42,[[526,30,526,36,"noPort"],[526,39,526,41,[2]]]]]]]]]]],[526,47,526,59,[1,[526,47,526,57,[[],"RuleConfig"]],[[526,58,526,59,[0,"r"]]]]]]]]]],[527,1,546,10,[[527,1,527,10,"portsLast"],[[527,11,527,25,[14,[527,12,527,24,[12,[[],"RuleConfig"],[[527,23,527,24,[11,"r"]]]]]]]],[528,5,546,10,[0,[[528,5,528,15,[2,[],"RuleConfig"]],[529,9,546,10,[21,[529,11,529,12,"r"],[[530,15,546,9,[[530,15,530,21,"sortBy"],[531,17,545,32,[1,"::",1,[531,17,544,18,[7,[531,18,543,31,[18,[[[531,19,531,21,[11,"d1"]],[531,22,531,24,[11,"d2"]]],[532,21,543,31,[17,[[532,26,532,48,[6,[[532,28,532,36,[19,[532,28,532,30,[2,[],"d1"]],[532,31,532,36,"type_"]]],[532,38,532,46,[19,[532,38,532,40,[2,[],"d2"]],[532,41,532,46,"type_"]]]]]],[[[533,25,533,39,[7,[[533,27,533,31,[12,[[],"Port"],[]]],[533,33,533,37,[12,[[],"Port"],[]]]]]],[534,29,534,31,[2,[],"EQ"]]],[[536,25,536,36,[7,[[536,27,536,31,[12,[[],"Port"],[]]],[536,33,536,34,[0]]]]],[537,29,537,31,[2,[],"GT"]]],[[539,25,539,36,[7,[[539,27,539,28,[0]],[539,30,539,34,[12,[[],"Port"],[]]]]]],[540,29,540,31,[2,[],"LT"]]],[[542,25,542,26,[0]],[543,29,543,31,[2,[],"EQ"]]]]]]]]]]]],[545,24,545,32,[19,[545,24,545,25,[2,[],"r"]],[545,26,545,32,"sortBy"]]]]]]]]]]]]]]]]]],[549,1,584,10,[0,[[1,[549,1,567,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately before the first function they\nare used in.\n\nFor example:\n\n    unwrap =\n        some func\n\n    a x =\n        unwrap x\n\n    b x =\n        unwrap x\n\n    c x =\n        unwrap x\n\n-}"]],[1,[568,1,568,92,[[568,1,568,37,"glueDependenciesBeforeFirstDependent"],[568,40,568,92,[6,[568,40,568,76,[1,[568,40,568,50,[[],"RuleConfig"]],[[568,51,568,76,[5,[568,53,568,54,"r"],[568,56,568,75,[[568,57,568,75,[[568,57,568,69,"noDependency"],[568,72,568,74,[2]]]]]]]]]]],[568,80,568,92,[1,[568,80,568,90,[[],"RuleConfig"]],[[568,91,568,92,[0,"r"]]]]]]]]]],[569,1,584,10,[[569,1,569,37,"glueDependenciesBeforeFirstDependent"],[[569,38,569,52,[14,[569,39,569,51,[12,[[],"RuleConfig"],[[569,50,569,51,[11,"r"]]]]]]]],[570,5,584,10,[0,[[570,5,570,15,[2,[],"RuleConfig"]],[571,9,584,10,[21,[571,11,571,12,"r"],[[572,15,584,9,[[572,15,572,20,"glues"],[573,17,583,31,[1,"::",1,[573,17,582,18,[7,[573,18,581,32,[18,[[[573,19,573,27,[7,[[573,21,573,22,[11,"i"]],[573,24,573,25,[11,"d"]]]]],[573,28,573,30,[11,"ds"]]],[575,21,581,32,[11,[575,24,575,72,[1,"&&",1,[575,24,575,49,[1,"==",2,[575,24,575,38,[19,[575,24,575,25,[2,[],"d"]],[575,26,575,38,"exposedOrder"]]],[575,42,575,49,[2,[],"Nothing"]]]],[575,53,575,72,[1,"==",2,[575,53,575,60,[19,[575,53,575,54,[2,[],"d"]],[575,55,575,60,"type_"]]],[575,64,575,72,[2,[],"Function"]]]]]],[576,25,578,75,[1,"|>",0,[576,25,577,83,[1,"|>",0,[576,25,576,53,[0,[[576,25,576,41,[2,[],"findDependencies"]],[576,42,576,50,[6,[[576,44,576,45,[2,[],"i"]],[576,47,576,48,[2,[],"d"]]]]],[576,51,576,53,[2,[],"ds"]]]]],[577,32,577,83,[0,[[577,32,577,40,[2,[],"validate"]],[577,41,577,83,[7,[577,42,577,82,[18,[[[577,43,577,62,[7,[[577,45,577,46,[0]],[577,48,577,60,[11,"numberUsedIn"]]]]]],[577,66,577,82,[1,">",2,[577,66,577,78,[2,[],"numberUsedIn"]],[577,81,577,82,[3,1]]]]]]]]]]]]]],[578,32,578,75,[0,[[578,32,578,41,[2,["Maybe"],"map"]],[578,42,578,75,[7,[578,43,578,74,[1,"<<",0,[578,43,578,59,[2,[],"GluedBeforeFirst"]],[578,63,578,74,[2,["Tuple"],"first"]]]]]]]]]]],[581,25,581,32,[2,[],"Nothing"]]]]]]]]],[583,24,583,31,[19,[583,24,583,25,[2,[],"r"]],[583,26,583,31,"glues"]]]]]]]]]]]]]]]]]],[587,1,622,10,[0,[[1,[587,1,605,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately after the first function they\nare used in.\n\nFor example:\n\n    a x =\n        unwrap x\n\n    unwrap =\n        some func\n\n    b x =\n        unwrap x\n\n    c x =\n        unwrap x\n\n-}"]],[1,[606,1,606,91,[[606,1,606,36,"glueDependenciesAfterFirstDependent"],[606,39,606,91,[6,[606,39,606,75,[1,[606,39,606,49,[[],"RuleConfig"]],[[606,50,606,75,[5,[606,52,606,53,"r"],[606,55,606,74,[[606,56,606,74,[[606,56,606,68,"noDependency"],[606,71,606,73,[2]]]]]]]]]]],[606,79,606,91,[1,[606,79,606,89,[[],"RuleConfig"]],[[606,90,606,91,[0,"r"]]]]]]]]]],[607,1,622,10,[[607,1,607,36,"glueDependenciesAfterFirstDependent"],[[607,37,607,51,[14,[607,38,607,50,[12,[[],"RuleConfig"],[[607,49,607,50,[11,"r"]]]]]]]],[608,5,622,10,[0,[[608,5,608,15,[2,[],"RuleConfig"]],[609,9,622,10,[21,[609,11,609,12,"r"],[[610,15,622,9,[[610,15,610,20,"glues"],[611,17,621,31,[1,"::",1,[611,17,620,18,[7,[611,18,619,32,[18,[[[611,19,611,27,[7,[[611,21,611,22,[11,"i"]],[611,24,611,25,[11,"d"]]]]],[611,28,611,30,[11,"ds"]]],[613,21,619,32,[11,[613,24,613,72,[1,"&&",1,[613,24,613,49,[1,"==",2,[613,24,613,38,[19,[613,24,613,25,[2,[],"d"]],[613,26,613,38,"exposedOrder"]]],[613,42,613,49,[2,[],"Nothing"]]]],[613,53,613,72,[1,"==",2,[613,53,613,60,[19,[613,53,613,54,[2,[],"d"]],[613,55,613,60,"type_"]]],[613,64,613,72,[2,[],"Function"]]]]]],[614,25,616,74,[1,"|>",0,[614,25,615,83,[1,"|>",0,[614,25,614,53,[0,[[614,25,614,41,[2,[],"findDependencies"]],[614,42,614,50,[6,[[614,44,614,45,[2,[],"i"]],[614,47,614,48,[2,[],"d"]]]]],[614,51,614,53,[2,[],"ds"]]]]],[615,32,615,83,[0,[[615,32,615,40,[2,[],"validate"]],[615,41,615,83,[7,[615,42,615,82,[18,[[[615,43,615,62,[7,[[615,45,615,46,[0]],[615,48,615,60,[11,"numberUsedIn"]]]]]],[615,66,615,82,[1,">",2,[615,66,615,78,[2,[],"numberUsedIn"]],[615,81,615,82,[3,1]]]]]]]]]]]]]],[616,32,616,74,[0,[[616,32,616,41,[2,["Maybe"],"map"]],[616,42,616,74,[7,[616,43,616,73,[1,"<<",0,[616,43,616,58,[2,[],"GluedAfterFirst"]],[616,62,616,73,[2,["Tuple"],"first"]]]]]]]]]]],[619,25,619,32,[2,[],"Nothing"]]]]]]]]],[621,24,621,31,[19,[621,24,621,25,[2,[],"r"]],[621,26,621,31,"glues"]]]]]]]]]]]]]]]]]],[625,1,660,10,[0,[[1,[625,1,643,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately before the last function they\nare used in.\n\nFor example:\n\n    a x =\n        unwrap x\n\n    b x =\n        unwrap x\n\n    unwrap =\n        some func\n\n    c x =\n        unwrap x\n\n-}"]],[1,[644,1,644,91,[[644,1,644,36,"glueDependenciesBeforeLastDependent"],[644,39,644,91,[6,[644,39,644,75,[1,[644,39,644,49,[[],"RuleConfig"]],[[644,50,644,75,[5,[644,52,644,53,"r"],[644,55,644,74,[[644,56,644,74,[[644,56,644,68,"noDependency"],[644,71,644,73,[2]]]]]]]]]]],[644,79,644,91,[1,[644,79,644,89,[[],"RuleConfig"]],[[644,90,644,91,[0,"r"]]]]]]]]]],[645,1,660,10,[[645,1,645,36,"glueDependenciesBeforeLastDependent"],[[645,37,645,51,[14,[645,38,645,50,[12,[[],"RuleConfig"],[[645,49,645,50,[11,"r"]]]]]]]],[646,5,660,10,[0,[[646,5,646,15,[2,[],"RuleConfig"]],[647,9,660,10,[21,[647,11,647,12,"r"],[[648,15,660,9,[[648,15,648,20,"glues"],[649,17,659,31,[1,"::",1,[649,17,658,18,[7,[649,18,657,32,[18,[[[649,19,649,27,[7,[[649,21,649,22,[11,"i"]],[649,24,649,25,[11,"d"]]]]],[649,28,649,30,[11,"ds"]]],[651,21,657,32,[11,[651,24,651,72,[1,"&&",1,[651,24,651,49,[1,"==",2,[651,24,651,38,[19,[651,24,651,25,[2,[],"d"]],[651,26,651,38,"exposedOrder"]]],[651,42,651,49,[2,[],"Nothing"]]]],[651,53,651,72,[1,"==",2,[651,53,651,60,[19,[651,53,651,54,[2,[],"d"]],[651,55,651,60,"type_"]]],[651,64,651,72,[2,[],"Function"]]]]]],[652,25,654,74,[1,"|>",0,[652,25,653,83,[1,"|>",0,[652,25,652,53,[0,[[652,25,652,41,[2,[],"findDependencies"]],[652,42,652,50,[6,[[652,44,652,45,[2,[],"i"]],[652,47,652,48,[2,[],"d"]]]]],[652,51,652,53,[2,[],"ds"]]]]],[653,32,653,83,[0,[[653,32,653,40,[2,[],"validate"]],[653,41,653,83,[7,[653,42,653,82,[18,[[[653,43,653,62,[7,[[653,45,653,46,[0]],[653,48,653,60,[11,"numberUsedIn"]]]]]],[653,66,653,82,[1,">",2,[653,66,653,78,[2,[],"numberUsedIn"]],[653,81,653,82,[3,1]]]]]]]]]]]]]],[654,32,654,74,[0,[[654,32,654,41,[2,["Maybe"],"map"]],[654,42,654,74,[7,[654,43,654,73,[1,"<<",0,[654,43,654,58,[2,[],"GluedBeforeLast"]],[654,62,654,73,[2,["Tuple"],"first"]]]]]]]]]]],[657,25,657,32,[2,[],"Nothing"]]]]]]]]],[659,24,659,31,[19,[659,24,659,25,[2,[],"r"]],[659,26,659,31,"glues"]]]]]]]]]]]]]]]]]],[663,1,698,10,[0,[[1,[663,1,681,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately after the last function they\nare used in.\n\nFor example:\n\n    a x =\n        unwrap x\n\n    b x =\n        unwrap x\n\n    c x =\n        unwrap x\n\n    unwrap =\n        some func\n\n-}"]],[1,[682,1,682,90,[[682,1,682,35,"glueDependenciesAfterLastDependent"],[682,38,682,90,[6,[682,38,682,74,[1,[682,38,682,48,[[],"RuleConfig"]],[[682,49,682,74,[5,[682,51,682,52,"r"],[682,54,682,73,[[682,55,682,73,[[682,55,682,67,"noDependency"],[682,70,682,72,[2]]]]]]]]]]],[682,78,682,90,[1,[682,78,682,88,[[],"RuleConfig"]],[[682,89,682,90,[0,"r"]]]]]]]]]],[683,1,698,10,[[683,1,683,35,"glueDependenciesAfterLastDependent"],[[683,36,683,50,[14,[683,37,683,49,[12,[[],"RuleConfig"],[[683,48,683,49,[11,"r"]]]]]]]],[684,5,698,10,[0,[[684,5,684,15,[2,[],"RuleConfig"]],[685,9,698,10,[21,[685,11,685,12,"r"],[[686,15,698,9,[[686,15,686,20,"glues"],[687,17,697,31,[1,"::",1,[687,17,696,18,[7,[687,18,695,32,[18,[[[687,19,687,27,[7,[[687,21,687,22,[11,"i"]],[687,24,687,25,[11,"d"]]]]],[687,28,687,30,[11,"ds"]]],[689,21,695,32,[11,[689,24,689,72,[1,"&&",1,[689,24,689,49,[1,"==",2,[689,24,689,38,[19,[689,24,689,25,[2,[],"d"]],[689,26,689,38,"exposedOrder"]]],[689,42,689,49,[2,[],"Nothing"]]]],[689,53,689,72,[1,"==",2,[689,53,689,60,[19,[689,53,689,54,[2,[],"d"]],[689,55,689,60,"type_"]]],[689,64,689,72,[2,[],"Function"]]]]]],[690,25,692,73,[1,"|>",0,[690,25,691,83,[1,"|>",0,[690,25,690,53,[0,[[690,25,690,41,[2,[],"findDependencies"]],[690,42,690,50,[6,[[690,44,690,45,[2,[],"i"]],[690,47,690,48,[2,[],"d"]]]]],[690,51,690,53,[2,[],"ds"]]]]],[691,32,691,83,[0,[[691,32,691,40,[2,[],"validate"]],[691,41,691,83,[7,[691,42,691,82,[18,[[[691,43,691,62,[7,[[691,45,691,46,[0]],[691,48,691,60,[11,"numberUsedIn"]]]]]],[691,66,691,82,[1,">",2,[691,66,691,78,[2,[],"numberUsedIn"]],[691,81,691,82,[3,1]]]]]]]]]]]]]],[692,32,692,73,[0,[[692,32,692,41,[2,["Maybe"],"map"]],[692,42,692,73,[7,[692,43,692,72,[1,"<<",0,[692,43,692,57,[2,[],"GluedAfterLast"]],[692,61,692,72,[2,["Tuple"],"first"]]]]]]]]]]],[695,25,695,32,[2,[],"Nothing"]]]]]]]]],[697,24,697,31,[19,[697,24,697,25,[2,[],"r"]],[697,26,697,31,"glues"]]]]]]]]]]]]]]]]]],[701,1,739,10,[0,[[1,[701,1,722,3,"{-| Helpers are _unexposed_ functions that are used in exactly one other\nfunction. This glue attaches them immediately before the function they are used\nin.\n\nFor example:\n\n    foldrHelper : (a -> b -> b) -> b -> Int -> List a -> b\n    foldrHelper fn acc ctr ls =\n        case ls of\n            [] ->\n                acc\n\n            a :: r1 ->\n                ...\n\n    {-| Reduce a list from the right.\n    -}\n    foldr : (a -> b -> b) -> b -> List a -> b\n    foldr fn acc ls =\n        foldrHelper fn acc 0 ls\n\n-}"]],[1,[723,1,723,69,[[723,1,723,18,"glueHelpersBefore"],[723,21,723,69,[6,[723,21,723,53,[1,[723,21,723,31,[[],"RuleConfig"]],[[723,32,723,53,[5,[723,34,723,35,"r"],[723,37,723,52,[[723,38,723,52,[[723,38,723,46,"noHelper"],[723,49,723,51,[2]]]]]]]]]]],[723,57,723,69,[1,[723,57,723,67,[[],"RuleConfig"]],[[723,68,723,69,[0,"r"]]]]]]]]]],[724,1,739,10,[[724,1,724,18,"glueHelpersBefore"],[[724,19,724,33,[14,[724,20,724,32,[12,[[],"RuleConfig"],[[724,31,724,32,[11,"r"]]]]]]]],[725,5,739,10,[0,[[725,5,725,15,[2,[],"RuleConfig"]],[726,9,739,10,[21,[726,11,726,12,"r"],[[727,15,739,9,[[727,15,727,20,"glues"],[728,17,738,31,[1,"::",1,[728,17,737,18,[7,[728,18,736,32,[18,[[[728,19,728,27,[7,[[728,21,728,22,[11,"i"]],[728,24,728,25,[11,"d"]]]]],[728,28,728,30,[11,"ds"]]],[730,21,736,32,[11,[730,24,730,72,[1,"&&",1,[730,24,730,49,[1,"==",2,[730,24,730,38,[19,[730,24,730,25,[2,[],"d"]],[730,26,730,38,"exposedOrder"]]],[730,42,730,49,[2,[],"Nothing"]]]],[730,53,730,72,[1,"==",2,[730,53,730,60,[19,[730,53,730,54,[2,[],"d"]],[730,55,730,60,"type_"]]],[730,64,730,72,[2,[],"Function"]]]]]],[731,25,733,75,[1,"|>",0,[731,25,732,65,[1,"|>",0,[731,25,731,53,[0,[[731,25,731,41,[2,[],"findDependencies"]],[731,42,731,50,[6,[[731,44,731,45,[2,[],"i"]],[731,47,731,48,[2,[],"d"]]]]],[731,51,731,53,[2,[],"ds"]]]]],[732,32,732,65,[0,[[732,32,732,40,[2,[],"validate"]],[732,41,732,65,[7,[732,42,732,64,[1,"<<",0,[732,42,732,48,[0,[[732,42,732,46,[12,"=="]],[732,47,732,48,[3,1]]]]],[732,52,732,64,[2,["Tuple"],"second"]]]]]]]]]]],[733,32,733,75,[0,[[733,32,733,41,[2,["Maybe"],"map"]],[733,42,733,75,[7,[733,43,733,74,[1,"<<",0,[733,43,733,59,[2,[],"GluedBeforeFirst"]],[733,63,733,74,[2,["Tuple"],"first"]]]]]]]]]]],[736,25,736,32,[2,[],"Nothing"]]]]]]]]],[738,24,738,31,[19,[738,24,738,25,[2,[],"r"]],[738,26,738,31,"glues"]]]]]]]]]]]]]]]]]],[742,1,780,10,[0,[[1,[742,1,763,3,"{-| Helpers are _unexposed_ functions that are used in exactly one other\nfunction. This glue attaches them immediately after the function they are used\nin.\n\nFor example:\n\n    {-| Reduce a list from the right.\n    -}\n    foldr : (a -> b -> b) -> b -> List a -> b\n    foldr fn acc ls =\n        foldrHelper fn acc 0 ls\n\n    foldrHelper : (a -> b -> b) -> b -> Int -> List a -> b\n    foldrHelper fn acc ctr ls =\n        case ls of\n            [] ->\n                acc\n\n            a :: r1 ->\n                ...\n\n-}"]],[1,[764,1,764,68,[[764,1,764,17,"glueHelpersAfter"],[764,20,764,68,[6,[764,20,764,52,[1,[764,20,764,30,[[],"RuleConfig"]],[[764,31,764,52,[5,[764,33,764,34,"r"],[764,36,764,51,[[764,37,764,51,[[764,37,764,45,"noHelper"],[764,48,764,50,[2]]]]]]]]]]],[764,56,764,68,[1,[764,56,764,66,[[],"RuleConfig"]],[[764,67,764,68,[0,"r"]]]]]]]]]],[765,1,780,10,[[765,1,765,17,"glueHelpersAfter"],[[765,18,765,32,[14,[765,19,765,31,[12,[[],"RuleConfig"],[[765,30,765,31,[11,"r"]]]]]]]],[766,5,780,10,[0,[[766,5,766,15,[2,[],"RuleConfig"]],[767,9,780,10,[21,[767,11,767,12,"r"],[[768,15,780,9,[[768,15,768,20,"glues"],[769,17,779,31,[1,"::",1,[769,17,778,18,[7,[769,18,777,32,[18,[[[769,19,769,27,[7,[[769,21,769,22,[11,"i"]],[769,24,769,25,[11,"d"]]]]],[769,28,769,30,[11,"ds"]]],[771,21,777,32,[11,[771,24,771,72,[1,"&&",1,[771,24,771,49,[1,"==",2,[771,24,771,38,[19,[771,24,771,25,[2,[],"d"]],[771,26,771,38,"exposedOrder"]]],[771,42,771,49,[2,[],"Nothing"]]]],[771,53,771,72,[1,"==",2,[771,53,771,60,[19,[771,53,771,54,[2,[],"d"]],[771,55,771,60,"type_"]]],[771,64,771,72,[2,[],"Function"]]]]]],[772,25,774,74,[1,"|>",0,[772,25,773,65,[1,"|>",0,[772,25,772,53,[0,[[772,25,772,41,[2,[],"findDependencies"]],[772,42,772,50,[6,[[772,44,772,45,[2,[],"i"]],[772,47,772,48,[2,[],"d"]]]]],[772,51,772,53,[2,[],"ds"]]]]],[773,32,773,65,[0,[[773,32,773,40,[2,[],"validate"]],[773,41,773,65,[7,[773,42,773,64,[1,"<<",0,[773,42,773,48,[0,[[773,42,773,46,[12,"=="]],[773,47,773,48,[3,1]]]]],[773,52,773,64,[2,["Tuple"],"second"]]]]]]]]]]],[774,32,774,74,[0,[[774,32,774,41,[2,["Maybe"],"map"]],[774,42,774,74,[7,[774,43,774,73,[1,"<<",0,[774,43,774,58,[2,[],"GluedAfterFirst"]],[774,62,774,73,[2,["Tuple"],"first"]]]]]]]]]]],[777,25,777,32,[2,[],"Nothing"]]]]]]]]],[779,24,779,31,[19,[779,24,779,25,[2,[],"r"]],[779,26,779,31,"glues"]]]]]]]]]]]]]]]]]],[783,1,796,40,[0,[[1,[783,1,784,3,"{-| Create a context with a source extractor.\n-}"]],[1,[785,1,785,48,[[785,1,785,15,"initialContext"],[785,18,785,48,[1,[785,18,785,37,[["Rule"],"ContextCreator"]],[[785,38,785,40,[2]],[785,41,785,48,[1,[785,41,785,48,[[],"Context"]],[]]]]]]]]],[786,1,796,40,[[786,1,786,15,"initialContext"],[],[787,5,796,40,[1,"|>",0,[787,5,795,10,[0,[[787,5,787,28,[2,["Rule"],"initContextCreator"]],[788,9,795,10,[7,[788,10,794,14,[18,[[[788,11,788,24,[11,"extractSource"]],[788,25,788,27,[1]]],[789,13,794,14,[8,[[789,15,789,44,[[789,15,789,28,"extractSource"],[789,31,789,44,[2,[],"extractSource"]]]],[790,15,791,13,[[790,15,790,22,"exports"],[790,25,790,32,[2,[],"Nothing"]]]],[791,15,792,13,[[791,15,791,25,"errorRange"],[791,28,791,44,[2,["Range"],"emptyRange"]]]],[792,15,793,13,[[792,15,792,34,"unparsedDocComments"],[792,37,792,39,[9,[]]]]],[793,15,794,13,[[793,15,793,32,"moduleImportRange"],[793,35,793,42,[2,[],"Nothing"]]]]]]]]]]]]]]],[796,12,796,40,[2,["Rule"],"withSourceCodeExtractor"]]]]]]]]],[799,1,845,14,[0,[[1,[799,1,800,3,"{-| Get an ordered list of all names exported by a module.\n-}"]],[1,[801,1,801,53,[[801,1,801,17,"getModuleExports"],[801,20,801,53,[6,[801,20,801,31,[1,[801,20,801,24,[[],"Node"]],[[801,25,801,31,[1,[801,25,801,31,[[],"Module"]],[]]]]]],[801,35,801,53,[6,[801,35,801,42,[1,[801,35,801,42,[[],"Context"]],[]]],[801,46,801,53,[1,[801,46,801,53,[[],"Context"]],[]]]]]]]]]],[802,1,845,14,[[802,1,802,17,"getModuleExports"],[[802,18,802,19,[11,"m"]],[802,20,802,27,[11,"context"]]],[803,5,845,14,[16,[[[804,9,814,85,[0,[[0],[1,[804,9,804,27,[[804,9,804,19,"errorRange"],[804,22,804,27,[1,[804,22,804,27,[[],"Range"]],[]]]]]],[805,9,814,85,[[805,9,805,19,"errorRange"],[],[806,13,814,85,[17,[[806,18,806,30,[0,[[806,18,806,28,[2,["Node"],"value"]],[806,29,806,30,[2,[],"m"]]]]],[[[807,17,807,36,[12,[["Module"],"PortModule"],[[807,35,807,36,[0]]]]],[809,21,809,86,[21,[809,23,809,24,"r"],[[809,27,809,85,[[809,27,809,30,"end"],[809,33,809,84,[8,[[809,35,809,52,[[809,35,809,38,"row"],[809,41,809,52,[19,[809,41,809,48,[19,[809,41,809,42,[2,[],"r"]],[809,43,809,48,"start"]]],[809,49,809,52,"row"]]]]],[809,54,809,83,[[809,54,809,60,"column"],[809,63,809,82,[1,"+",0,[809,63,809,77,[19,[809,63,809,70,[19,[809,63,809,64,[2,[],"r"]],[809,65,809,70,"start"]]],[809,71,809,77,"column"]]],[809,80,809,82,[3,11]]]]]]]]]]]]]]],[[811,17,811,18,[0]],[814,21,814,85,[21,[814,23,814,24,"r"],[[814,27,814,84,[[814,27,814,30,"end"],[814,33,814,83,[8,[[814,35,814,52,[[814,35,814,38,"row"],[814,41,814,52,[19,[814,41,814,48,[19,[814,41,814,42,[2,[],"r"]],[814,43,814,48,"start"]]],[814,49,814,52,"row"]]]]],[814,54,814,82,[[814,54,814,60,"column"],[814,63,814,81,[1,"+",0,[814,63,814,77,[19,[814,63,814,70,[19,[814,63,814,64,[2,[],"r"]],[814,65,814,70,"start"]]],[814,71,814,77,"column"]]],[814,80,814,81,[3,6]]]]]]]]]]]]]]]]]]]]]]]],[816,9,818,25,[0,[[0],[1,[816,9,816,18,[[816,9,816,10,"r"],[816,13,816,18,[1,[816,13,816,18,[[],"Range"]],[]]]]]],[817,9,818,25,[[817,9,817,10,"r"],[],[818,13,818,25,[0,[[818,13,818,23,[2,["Node"],"range"]],[818,24,818,25,[2,[],"m"]]]]]]]]]]],[820,5,845,14,[17,[[820,10,820,45,[1,"<|",1,[820,10,820,29,[2,["Module"],"exposingList"]],[820,33,820,45,[0,[[820,33,820,43,[2,["Node"],"value"]],[820,44,820,45,[2,[],"m"]]]]]]],[[[821,9,821,23,[12,[["Exposing"],"All"],[[821,22,821,23,[0]]]]],[822,13,822,50,[21,[822,15,822,22,"context"],[[822,25,822,49,[[822,25,822,35,"errorRange"],[822,38,822,48,[2,[],"errorRange"]]]]]]]],[[824,9,824,34,[12,[["Exposing"],"Explicit"],[[824,27,824,34,[11,"exports"]]]]],[825,13,845,14,[21,[825,15,825,22,"context"],[[826,19,844,17,[[826,19,826,26,"exports"],[827,21,843,36,[1,"<|",1,[827,21,827,25,[2,[],"Just"]],[828,25,843,36,[0,[[828,25,828,33,[2,["List"],"map"]],[829,29,842,30,[7,[829,30,841,45,[18,[[[829,31,829,32,[11,"e"]]],[830,33,841,45,[17,[[830,38,830,50,[0,[[830,38,830,48,[2,["Node"],"value"]],[830,49,830,50,[2,[],"e"]]]]],[[[831,37,831,50,[12,[[],"InfixExpose"],[[831,49,831,50,[11,"s"]]]]],[832,41,832,42,[2,[],"s"]]],[[834,37,834,53,[12,[[],"FunctionExpose"],[[834,52,834,53,[11,"s"]]]]],[835,41,835,42,[2,[],"s"]]],[[837,37,837,56,[12,[[],"TypeOrAliasExpose"],[[837,55,837,56,[11,"s"]]]]],[838,41,838,42,[2,[],"s"]]],[[840,37,840,56,[12,[[],"TypeExpose"],[[840,48,840,56,[8,[[840,50,840,54,"name"]]]]]]],[841,41,841,45,[2,[],"name"]]]]]]]]]]]],[843,29,843,36,[2,[],"exports"]]]]]]]]],[844,19,845,13,[[844,19,844,29,"errorRange"],[844,32,844,42,[2,[],"errorRange"]]]]]]]]]]]]]]]]]]]],[848,1,863,6,[0,[[1,[848,1,850,3,"{-| Get an ordered list of all doc comments in the module that were not parsed\nby `elm-syntax`.\n-}"]],[1,[851,1,851,66,[[851,1,851,23,"getUnparsedDocComments"],[851,26,851,66,[6,[851,26,851,44,[1,[851,26,851,30,[[],"List"]],[[851,31,851,44,[1,[851,32,851,36,[[],"Node"]],[[851,37,851,43,[1,[851,37,851,43,[[],"String"]],[]]]]]]]]],[851,48,851,66,[6,[851,48,851,55,[1,[851,48,851,55,[[],"Context"]],[]]],[851,59,851,66,[1,[851,59,851,66,[[],"Context"]],[]]]]]]]]]],[852,1,863,6,[[852,1,852,23,"getUnparsedDocComments"],[[852,24,852,32,[11,"comments"]],[852,33,852,40,[11,"context"]]],[853,5,863,6,[21,[853,7,853,14,"context"],[[854,11,863,5,[[854,11,854,30,"unparsedDocComments"],[855,13,862,25,[0,[[855,13,855,24,[2,["List"],"filter"]],[856,17,861,18,[7,[856,18,860,25,[1,">>",1,[856,18,856,28,[2,["Node"],"value"]],[857,24,860,25,[7,[857,25,859,58,[18,[[[857,26,857,27,[11,"c"]]],[858,29,859,58,[1,"&&",1,[858,29,858,54,[0,[[858,29,858,46,[2,["String"],"startsWith"]],[858,47,858,52,[5,"{-|"]],[858,53,858,54,[2,[],"c"]]]]],[859,36,859,58,[0,[[859,36,859,51,[2,["String"],"endsWith"]],[859,52,859,56,[5,"-}"]],[859,57,859,58,[2,[],"c"]]]]]]]]]]]]]]]],[862,17,862,25,[2,[],"comments"]]]]]]]]]]]]]]],[866,1,875,6,[0,[[1,[866,1,867,3,"{-| Collect the range of imports in the module.\n-}"]],[1,[868,1,868,58,[[868,1,868,22,"accumulateImportRange"],[868,25,868,58,[6,[868,25,868,36,[1,[868,25,868,29,[[],"Node"]],[[868,30,868,36,[1,[868,30,868,36,[[],"Import"]],[]]]]]],[868,40,868,58,[6,[868,40,868,47,[1,[868,40,868,47,[[],"Context"]],[]]],[868,51,868,58,[1,[868,51,868,58,[[],"Context"]],[]]]]]]]]]],[869,1,875,6,[[869,1,869,22,"accumulateImportRange"],[[869,23,869,24,[11,"i"]],[869,25,869,32,[11,"context"]]],[870,5,875,6,[21,[870,7,870,14,"context"],[[871,11,875,5,[[871,11,871,28,"moduleImportRange"],[872,13,874,42,[0,[[872,13,872,26,[2,["MaybeX"],"unpack"]],[872,27,872,56,[7,[872,28,872,55,[18,[[[872,29,872,31,[1]]],[872,35,872,55,[1,"<|",1,[872,35,872,39,[2,[],"Just"]],[872,43,872,55,[0,[[872,43,872,53,[2,["Node"],"range"]],[872,54,872,55,[2,[],"i"]]]]]]]]]]]],[873,17,873,66,[7,[873,18,873,65,[18,[[[873,19,873,20,[11,"r"]]],[873,24,873,65,[1,"<|",1,[873,24,873,28,[2,[],"Just"]],[873,32,873,65,[0,[[873,32,873,45,[2,["Range"],"combine"]],[873,46,873,65,[9,[[873,48,873,49,[2,[],"r"]],[873,51,873,63,[0,[[873,51,873,61,[2,["Node"],"range"]],[873,62,873,63,[2,[],"i"]]]]]]]]]]]]]]]]]],[874,17,874,42,[19,[874,17,874,24,[2,[],"context"]],[874,25,874,42,"moduleImportRange"]]]]]]]]]]]]]]]],[878,1,923,105,[0,[[1,[878,1,879,3,"{-| Generate declaration info for all TLDs and then check that they are sorted.\n-}"]],[1,[880,1,880,91,[[880,1,880,19,"declarationVisitor"],[880,22,880,91,[6,[880,22,880,34,[1,[880,22,880,32,[[],"RuleConfig"]],[[880,33,880,34,[0,"r"]]]]],[880,38,880,91,[6,[880,38,880,61,[1,[880,38,880,42,[[],"List"]],[[880,43,880,61,[1,[880,44,880,48,[[],"Node"]],[[880,49,880,60,[1,[880,49,880,60,[[],"Declaration"]],[]]]]]]]]],[880,65,880,91,[6,[880,65,880,72,[1,[880,65,880,72,[[],"Context"]],[]]],[880,76,880,91,[1,[880,76,880,80,[[],"List"]],[[880,81,880,91,[1,[880,82,880,87,[[],"Error"]],[[880,88,880,90,[4,[]]]]]]]]]]]]]]]]]],[881,1,923,105,[[881,1,881,19,"declarationVisitor"],[[881,20,881,50,[14,[881,21,881,49,[12,[[],"RuleConfig"],[[881,32,881,49,[8,[[881,34,881,40,"sortBy"],[881,42,881,47,"glues"]]]]]]]]],[881,51,881,55,[11,"decs"]],[881,56,881,63,[11,"context"]]],[882,5,923,105,[16,[[[883,9,885,70,[0,[[0],[1,[883,9,883,51,[[883,9,883,19,"applyGlues"],[883,22,883,51,[6,[883,22,883,30,[1,[883,22,883,26,[[],"List"]],[[883,27,883,30,[1,[883,27,883,30,[[],"TLD"]],[]]]]]],[883,34,883,51,[6,[883,34,883,37,[1,[883,34,883,37,[[],"Int"]],[]]],[883,41,883,51,[6,[883,41,883,44,[1,[883,41,883,44,[[],"TLD"]],[]]],[883,48,883,51,[1,[883,48,883,51,[[],"TLD"]],[]]]]]]]]]]]],[884,9,885,70,[[884,9,884,19,"applyGlues"],[[884,20,884,22,[11,"ds"]],[884,23,884,24,[11,"i"]],[884,25,884,26,[11,"d"]]],[885,13,885,70,[21,[885,15,885,16,"d"],[[885,19,885,69,[[885,19,885,24,"glued"],[885,27,885,68,[0,[[885,27,885,40,[2,["ListX"],"findMap"]],[885,41,885,62,[7,[885,42,885,61,[18,[[[885,43,885,44,[11,"g"]]],[885,48,885,61,[0,[[885,48,885,49,[2,[],"g"]],[885,50,885,58,[6,[[885,52,885,53,[2,[],"i"]],[885,55,885,56,[2,[],"d"]]]]],[885,59,885,61,[2,[],"ds"]]]]]]]]]],[885,63,885,68,[2,[],"glues"]]]]]]]]]]]]]]]],[887,5,923,105,[1,"|>",0,[887,5,922,55,[1,"|>",0,[887,5,921,24,[1,"|>",0,[887,5,920,23,[1,"|>",0,[887,5,919,13,[1,"|>",0,[887,5,916,14,[1,"|>",0,[887,5,887,45,[0,[[887,5,887,17,[2,["ListX"],"uncons"]],[887,18,887,45,[19,[887,18,887,25,[2,[],"context"]],[887,26,887,45,"unparsedDocComments"]]]]]],[888,12,916,14,[0,[[888,12,888,25,[2,["MaybeX"],"unwrap"]],[888,26,888,28,[9,[]]],[889,13,916,14,[7,[889,14,915,27,[18,[[[889,15,889,24,[7,[[889,17,889,18,[11,"c"]],[889,20,889,22,[11,"cs"]]]]]],[890,17,915,27,[17,[[890,22,890,88,[0,[[890,22,890,31,[2,["Maybe"],"map"]],[890,32,890,62,[7,[890,33,890,61,[0,[[890,33,890,46,[2,["Range"],"compare"]],[890,47,890,61,[7,[890,48,890,60,[0,[[890,48,890,58,[2,["Node"],"range"]],[890,59,890,60,[2,[],"c"]]]]]]]]]]]],[890,63,890,88,[19,[890,63,890,70,[2,[],"context"]],[890,71,890,88,"moduleImportRange"]]]]]],[[[891,21,891,28,[12,[[],"Just"],[[891,26,891,28,[12,[[],"GT"],[]]]]]],[893,25,893,52,[19,[893,25,893,32,[2,[],"context"]],[893,33,893,52,"unparsedDocComments"]]]],[[895,21,895,28,[12,[[],"Nothing"],[]]],[906,25,911,56,[11,[906,28,906,96,[1,"<|",1,[906,28,906,64,[0,[[906,28,906,36,[2,["List"],"any"]],[906,37,906,64,[7,[906,38,906,63,[0,[[906,38,906,55,[2,["String"],"startsWith"]],[906,56,906,63,[5,"@docs"]]]]]]]]]],[906,68,906,96,[1,"<|",1,[906,68,906,80,[2,["String"],"lines"]],[906,84,906,96,[0,[[906,84,906,94,[2,["Node"],"value"]],[906,95,906,96,[2,[],"c"]]]]]]]]],[907,29,907,31,[2,[],"cs"]],[911,29,911,56,[19,[911,29,911,36,[2,[],"context"]],[911,37,911,56,"unparsedDocComments"]]]]]],[[913,21,913,22,[0]],[915,25,915,27,[2,[],"cs"]]]]]]]]]]]]]]]]],[917,12,919,13,[7,[917,13,918,94,[18,[[[917,14,917,38,[11,"docCommentsWithoutModule"]]],[918,17,918,94,[0,[[918,17,918,27,[2,["List"],"foldl"]],[918,28,918,56,[7,[918,29,918,55,[0,[[918,29,918,39,[2,[],"getDecInfo"]],[918,40,918,55,[19,[918,40,918,47,[2,[],"context"]],[918,48,918,55,"exports"]]]]]]]],[918,57,918,89,[6,[[918,59,918,61,[9,[]]],[918,63,918,87,[2,[],"docCommentsWithoutModule"]]]]],[918,90,918,94,[2,[],"decs"]]]]]]]]]]]],[920,12,920,23,[2,["Tuple"],"first"]]]],[921,12,921,24,[2,["List"],"reverse"]]]],[922,12,922,55,[7,[922,13,922,54,[18,[[[922,14,922,16,[11,"ds"]]],[922,20,922,54,[0,[[922,20,922,35,[2,["List"],"indexedMap"]],[922,36,922,51,[7,[922,37,922,50,[0,[[922,37,922,47,[2,[],"applyGlues"]],[922,48,922,50,[2,[],"ds"]]]]]]],[922,52,922,54,[2,[],"ds"]]]]]]]]]]]],[923,12,923,105,[0,[[923,12,923,32,[2,[],"checkSortingWithGlue"]],[923,33,923,54,[19,[923,33,923,40,[2,[],"context"]],[923,41,923,54,"extractSource"]]],[923,55,923,79,[5,"Top-level declarations"]],[923,80,923,86,[2,[],"sortBy"]],[923,87,923,105,[19,[923,87,923,94,[2,[],"context"]],[923,95,923,105,"errorRange"]]]]]]]]]]]]]]]],[926,1,993,67,[0,[[1,[926,1,927,3,"{-| Given a list of module exports, generate TLD info from a `declaration`.\n-}"]],[1,[928,1,928,125,[[928,1,928,11,"getDecInfo"],[928,14,928,125,[6,[928,14,928,33,[1,[928,14,928,19,[[],"Maybe"]],[[928,20,928,33,[1,[928,21,928,25,[[],"List"]],[[928,26,928,32,[1,[928,26,928,32,[[],"String"]],[]]]]]]]]],[928,37,928,125,[6,[928,37,928,53,[1,[928,37,928,41,[[],"Node"]],[[928,42,928,53,[1,[928,42,928,53,[[],"Declaration"]],[]]]]]],[928,57,928,125,[6,[928,57,928,89,[3,[[928,59,928,67,[1,[928,59,928,63,[[],"List"]],[[928,64,928,67,[1,[928,64,928,67,[[],"TLD"]],[]]]]]],[928,69,928,87,[1,[928,69,928,73,[[],"List"]],[[928,74,928,87,[1,[928,75,928,79,[[],"Node"]],[[928,80,928,86,[1,[928,80,928,86,[[],"String"]],[]]]]]]]]]]]],[928,93,928,125,[3,[[928,95,928,103,[1,[928,95,928,99,[[],"List"]],[[928,100,928,103,[1,[928,100,928,103,[[],"TLD"]],[]]]]]],[928,105,928,123,[1,[928,105,928,109,[[],"List"]],[[928,110,928,123,[1,[928,111,928,115,[[],"Node"]],[[928,116,928,122,[1,[928,116,928,122,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]],[929,1,993,67,[[929,1,929,11,"getDecInfo"],[[929,12,929,19,[11,"exports"]],[929,20,929,21,[11,"d"]],[929,22,929,50,[7,[[929,24,929,27,[11,"acc"]],[929,29,929,48,[11,"unparsedDocComments"]]]]]],[930,5,993,67,[16,[[[931,9,936,45,[1,[931,9,931,64,[7,[[931,11,931,40,[11,"immediatelyPreviousDocComment"]],[931,42,931,62,[11,"remainingDocComments"]]]]],[932,13,936,45,[1,"|>",0,[932,13,935,48,[1,"|>",0,[932,13,932,106,[0,[[932,13,932,28,[2,["ListX"],"splitWhen"]],[932,29,932,86,[7,[932,30,932,85,[18,[[[932,31,932,32,[11,"c"]]],[932,36,932,85,[1,"==",2,[932,36,932,79,[0,[[932,36,932,49,[2,["Range"],"compare"]],[932,50,932,64,[7,[932,51,932,63,[0,[[932,51,932,61,[2,["Node"],"range"]],[932,62,932,63,[2,[],"c"]]]]]]],[932,65,932,79,[7,[932,66,932,78,[0,[[932,66,932,76,[2,["Node"],"range"]],[932,77,932,78,[2,[],"d"]]]]]]]]]],[932,83,932,85,[2,[],"GT"]]]]]]]]],[932,87,932,106,[2,[],"unparsedDocComments"]]]]],[933,20,935,48,[0,[[933,20,933,37,[2,["Maybe"],"withDefault"]],[935,21,935,48,[6,[[935,23,935,42,[2,[],"unparsedDocComments"]],[935,44,935,46,[9,[]]]]]]]]]]],[936,20,936,45,[0,[[936,20,936,34,[2,["Tuple"],"mapFirst"]],[936,35,936,45,[2,["ListX"],"last"]]]]]]]]]],[938,5,993,67,[1,"|>",0,[938,5,992,6,[6,[[938,7,990,20,[17,[[938,12,938,24,[0,[[938,12,938,22,[2,["Node"],"value"]],[938,23,938,24,[2,[],"d"]]]]],[[[939,9,939,44,[12,[[],"FunctionDeclaration"],[[939,29,939,44,[8,[[939,31,939,42,"declaration"]]]]]]],[940,13,950,24,[1,"|>",0,[940,13,949,21,[1,"|>",0,[940,13,940,35,[0,[[940,13,940,23,[2,["Node"],"value"]],[940,24,940,35,[2,[],"declaration"]]]]],[941,20,949,21,[7,[941,21,948,26,[18,[[[941,22,941,42,[8,[[941,24,941,28,"name"],[941,30,941,40,"expression"]]]]],[942,25,948,26,[8,[[942,27,942,43,[[942,27,942,32,"type_"],[942,35,942,43,[2,[],"Function"]]]],[943,27,944,25,[[943,27,943,37,"namesBound"],[943,40,943,72,[1,"<|",1,[943,40,943,53,[2,["Set"],"singleton"]],[943,57,943,72,[0,[[943,57,943,67,[2,["Node"],"value"]],[943,68,943,72,[2,[],"name"]]]]]]]]],[944,27,945,25,[[944,27,944,39,"exposedOrder"],[944,42,944,100,[0,[[944,42,944,55,[2,["Maybe"],"andThen"]],[944,56,944,92,[7,[944,57,944,91,[1,"<|",1,[944,57,944,72,[2,["ListX"],"elemIndex"]],[944,76,944,91,[0,[[944,76,944,86,[2,["Node"],"value"]],[944,87,944,91,[2,[],"name"]]]]]]]]],[944,93,944,100,[2,[],"exports"]]]]]]],[945,27,946,25,[[945,27,945,32,"range"],[945,35,945,47,[0,[[945,35,945,45,[2,["Node"],"range"]],[945,46,945,47,[2,[],"d"]]]]]]],[946,27,947,25,[[946,27,946,46,"dependentOnBindings"],[946,49,946,74,[0,[[946,49,946,63,[2,[],"findAllNamesIn"]],[946,64,946,74,[2,[],"expression"]]]]]]],[947,27,948,25,[[947,27,947,32,"glued"],[947,35,947,42,[2,[],"Nothing"]]]]]]]]]]]]]],[950,20,950,24,[2,[],"Just"]]]]],[[952,9,952,34,[12,[[],"AliasDeclaration"],[[952,26,952,34,[8,[[952,28,952,32,"name"]]]]]]],[953,13,960,18,[0,[[953,13,953,17,[2,[],"Just"]],[954,17,960,18,[8,[[954,19,954,31,[[954,19,954,24,"type_"],[954,27,954,31,[2,[],"Type"]]]],[955,19,956,17,[[955,19,955,29,"namesBound"],[955,32,955,64,[1,"<|",1,[955,32,955,45,[2,["Set"],"singleton"]],[955,49,955,64,[0,[[955,49,955,59,[2,["Node"],"value"]],[955,60,955,64,[2,[],"name"]]]]]]]]],[956,19,957,17,[[956,19,956,31,"exposedOrder"],[956,34,956,91,[0,[[956,34,956,47,[2,["Maybe"],"andThen"]],[956,48,956,83,[7,[956,49,956,82,[0,[[956,49,956,64,[2,["ListX"],"elemIndex"]],[956,65,956,82,[7,[956,66,956,81,[0,[[956,66,956,76,[2,["Node"],"value"]],[956,77,956,81,[2,[],"name"]]]]]]]]]]]],[956,84,956,91,[2,[],"exports"]]]]]]],[957,19,958,17,[[957,19,957,24,"range"],[957,27,957,39,[0,[[957,27,957,37,[2,["Node"],"range"]],[957,38,957,39,[2,[],"d"]]]]]]],[958,19,959,17,[[958,19,958,38,"dependentOnBindings"],[958,41,958,50,[2,["Set"],"empty"]]]],[959,19,960,17,[[959,19,959,24,"glued"],[959,27,959,34,[2,[],"Nothing"]]]]]]]]]]],[[962,9,962,39,[12,[[],"CustomTypeDeclaration"],[[962,31,962,39,[8,[[962,33,962,37,"name"]]]]]]],[963,13,970,18,[0,[[963,13,963,17,[2,[],"Just"]],[964,17,970,18,[8,[[964,19,964,31,[[964,19,964,24,"type_"],[964,27,964,31,[2,[],"Type"]]]],[965,19,966,17,[[965,19,965,29,"namesBound"],[965,32,965,64,[1,"<|",1,[965,32,965,45,[2,["Set"],"singleton"]],[965,49,965,64,[0,[[965,49,965,59,[2,["Node"],"value"]],[965,60,965,64,[2,[],"name"]]]]]]]]],[966,19,967,17,[[966,19,966,31,"exposedOrder"],[966,34,966,91,[0,[[966,34,966,47,[2,["Maybe"],"andThen"]],[966,48,966,83,[7,[966,49,966,82,[0,[[966,49,966,64,[2,["ListX"],"elemIndex"]],[966,65,966,82,[7,[966,66,966,81,[0,[[966,66,966,76,[2,["Node"],"value"]],[966,77,966,81,[2,[],"name"]]]]]]]]]]]],[966,84,966,91,[2,[],"exports"]]]]]]],[967,19,968,17,[[967,19,967,24,"range"],[967,27,967,39,[0,[[967,27,967,37,[2,["Node"],"range"]],[967,38,967,39,[2,[],"d"]]]]]]],[968,19,969,17,[[968,19,968,38,"dependentOnBindings"],[968,41,968,50,[2,["Set"],"empty"]]]],[969,19,970,17,[[969,19,969,24,"glued"],[969,27,969,34,[2,[],"Nothing"]]]]]]]]]]],[[972,9,972,33,[12,[[],"PortDeclaration"],[[972,25,972,33,[8,[[972,27,972,31,"name"]]]]]]],[973,13,984,18,[0,[[973,13,973,17,[2,[],"Just"]],[974,17,984,18,[8,[[974,19,974,31,[[974,19,974,24,"type_"],[974,27,974,31,[2,[],"Port"]]]],[975,19,978,17,[[975,19,975,29,"namesBound"],[975,32,975,64,[1,"<|",1,[975,32,975,45,[2,["Set"],"singleton"]],[975,49,975,64,[0,[[975,49,975,59,[2,["Node"],"value"]],[975,60,975,64,[2,[],"name"]]]]]]]]],[978,19,979,17,[[978,19,978,31,"exposedOrder"],[978,34,978,41,[2,[],"Nothing"]]]],[979,19,980,17,[[979,19,979,24,"range"],[979,27,979,138,[0,[[979,27,979,40,[2,["MaybeX"],"unwrap"]],[979,41,979,55,[7,[979,42,979,54,[0,[[979,42,979,52,[2,["Node"],"range"]],[979,53,979,54,[2,[],"d"]]]]]]],[979,56,979,108,[7,[979,57,979,107,[18,[[[979,58,979,59,[11,"c"]]],[979,63,979,107,[0,[[979,63,979,76,[2,["Range"],"combine"]],[979,77,979,107,[9,[[979,79,979,91,[0,[[979,79,979,89,[2,["Node"],"range"]],[979,90,979,91,[2,[],"c"]]]]],[979,93,979,105,[0,[[979,93,979,103,[2,["Node"],"range"]],[979,104,979,105,[2,[],"d"]]]]]]]]]]]]]]]],[979,109,979,138,[2,[],"immediatelyPreviousDocComment"]]]]]]],[980,19,981,17,[[980,19,980,38,"dependentOnBindings"],[980,41,980,50,[2,["Set"],"empty"]]]],[981,19,984,17,[[981,19,981,24,"glued"],[981,27,981,34,[2,[],"Nothing"]]]]]]]]]]],[[986,9,986,10,[0]],[990,13,990,20,[2,[],"Nothing"]]]]]]],[991,7,991,27,[2,[],"remainingDocComments"]]]]],[993,12,993,67,[0,[[993,12,993,26,[2,["Tuple"],"mapFirst"]],[993,27,993,67,[7,[993,28,993,66,[0,[[993,28,993,41,[2,["MaybeX"],"unwrap"]],[993,42,993,45,[2,[],"acc"]],[993,46,993,66,[7,[993,47,993,65,[18,[[[993,48,993,51,[11,"tld"]]],[993,55,993,65,[1,"::",1,[993,55,993,58,[2,[],"tld"]],[993,62,993,65,[2,[],"acc"]]]]]]]]]]]]]]]]]]]]]]]]]]]],[[8,1,42,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, sortTopLevelDeclarations\n\n\n## Orderings\n\n@docs alphabetically, exposedOrderWithPrivateLast, exposedOrderWithPrivateFirst, typesFirst, typesLast, portsFirst, portsLast\n\n\n## Glues\n\nGlues provide a way to \"stick\" one declaration to another, i.e. to always sort\none declaration alongside another. Note that glues will chain, i.e. if `a` is\nglued before `b` and `b` is glued after `c`, then the result will be `c` -> `a`\n-> `b` (sorted wherever `c` is sorted to). Glues behave in the following ways:\n\n  - If multiple glues are specified, the first specified will be used.\n  - If multiple declarations are glued at the same place, they will be ordered\n    by the orderings specified.\n  - If glues are not acyclic (i.e. two declarations are glued to each other,\n    possibly via intermediates), then all of the involved declarations will not\n    be glued and will be sorted normally.\n\n@docs glueHelpersBefore, glueHelpersAfter, glueDependenciesBeforeFirstDependent, glueDependenciesAfterFirstDependent, glueDependenciesAfterLastDependent, glueDependenciesBeforeLastDependent\n\n-}"],[574,21,574,68,"-- Only unexposed functions can be dependencies"],[612,21,612,68,"-- Only unexposed functions can be dependencies"],[650,21,650,68,"-- Only unexposed functions can be dependencies"],[688,21,688,68,"-- Only unexposed functions can be dependencies"],[729,21,729,63,"-- Only unexposed functions can be helpers"],[770,21,770,63,"-- Only unexposed functions can be helpers"],[808,21,808,92,"-- Assume that the `port module` of a module is just the first 11 chars"],[812,21,812,86,"-- Assume that the `module` of a module is just the first 6 chars"],[813,21,813,53,"-- Effect modules aren't a thing"],[892,25,892,95,"-- First doc comment is after imports, so cannot be module-associated."],[896,25,896,80,"-- No module imports, so have to figure it out manually"],[897,25,897,80,"-- If there are two doc comments before first TLD, then"],[898,25,898,80,"-- the first must be module But do not need to test for"],[899,25,899,78,"-- this, because the first would get dropped anyways,"],[900,25,900,78,"-- since only the latter would possibly get attached."],[901,25,901,80,"-- Similarly, do not need to worry if the first TLD has"],[902,25,902,81,"-- a parsed doc comment, because it would get dropped by"],[903,25,903,81,"-- going past that TLD. If first is a doc comment with a"],[904,25,904,81,"-- line that begins with \"@docs\", then it is essentially"],[905,25,905,69,"-- guaranteed to be for the module, however."],[910,29,910,141,"-- There is no @docs in the comment, so this might be a doc comment belonging to the first TLD, if it is a port."],[914,25,914,105,"-- First doc comment is before imports, so is the module doc comment, so drop it"],[934,21,934,82,"-- No doc comments were after the TLD, so it must be the last"],[977,17,977,99,"-- Glue doc comment on, since port doc comments are not yet parsed by `elm-syntax`"],[983,17,983,69,"-- Ports can't be exposed or dependent on other TLDs"],[987,13,987,36,"-- These are impossible"],[988,13,988,62,"-- Destructuring (Node Pattern) (Node Expression)"],[989,13,989,38,"-- InfixDeclaration Infix"]]]]
