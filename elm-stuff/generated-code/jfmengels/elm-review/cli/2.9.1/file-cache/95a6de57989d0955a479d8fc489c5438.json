[1,[[1,1,9,6,[0,[[1,8,1,25,["NoUnsortedRecords"]],[1,26,9,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,27,[1,"defaults"]],[4,7,4,28,[1,"sortGenericFieldsLast"]],[5,7,5,32,[1,"doNotSortAmbiguousRecords"]],[5,34,5,66,[1,"reportAmbiguousRecordsWithoutFix"]],[6,7,6,30,[1,"doNotSortUnknownRecords"]],[6,32,6,62,[1,"reportUnknownRecordsWithoutFix"]],[7,7,7,31,[1,"treatSubrecordsAsUnknown"]],[7,33,7,62,[1,"treatAllSubrecordsAsCanonical"]],[7,64,7,97,[1,"treatCustomTypeRecordsAsCanonical"]],[8,7,8,26,[1,"typecheckAllRecords"]]]]]]]],[[58,1,58,28,[[58,8,58,12,["Dict"]],[0],[1,[58,13,58,28,[1,[[58,23,58,27,[2,"Dict"]]]]]]]],[59,1,59,27,[[59,8,59,18,["Dict","Extra"]],[1,[59,22,59,27,["DictX"]]],[0]]],[60,1,60,16,[[60,8,60,16,["Elm","Docs"]],[0],[0]]],[61,1,61,57,[[61,8,61,30,["Elm","Syntax","Declaration"]],[0],[1,[61,31,61,57,[1,[[61,41,61,56,[3,["Declaration",[1,[61,52,61,56]]]]]]]]]]],[62,1,62,71,[[62,8,62,27,["Elm","Syntax","Exposing"]],[0],[1,[62,28,62,71,[1,[[62,38,62,50,[3,["Exposing",[1,[62,46,62,50]]]]],[62,52,62,70,[3,["TopLevelExpose",[1,[62,66,62,70]]]]]]]]]]],[63,1,63,99,[[63,8,63,29,["Elm","Syntax","Expression"]],[0],[1,[63,30,63,99,[1,[[63,40,63,54,[3,["Expression",[1,[63,50,63,54]]]]],[63,56,63,64,[2,"Function"]],[63,66,63,84,[3,["LetDeclaration",[1,[63,80,63,84]]]]],[63,86,63,98,[2,"RecordSetter"]]]]]]]],[64,1,64,53,[[64,8,64,25,["Elm","Syntax","Module"]],[1,[64,29,64,35,["Module"]]],[1,[64,36,64,53,[1,[[64,46,64,52,[2,"Module"]]]]]]]],[65,1,65,51,[[65,8,65,29,["Elm","Syntax","ModuleName"]],[0],[1,[65,30,65,51,[1,[[65,40,65,50,[2,"ModuleName"]]]]]]]],[66,1,66,51,[[66,8,66,23,["Elm","Syntax","Node"]],[1,[66,27,66,31,["Node"]]],[1,[66,32,66,51,[1,[[66,42,66,50,[3,["Node",[1,[66,46,66,50]]]]]]]]]]],[67,1,67,49,[[67,8,67,26,["Elm","Syntax","Pattern"]],[0],[1,[67,27,67,49,[1,[[67,37,67,48,[3,["Pattern",[1,[67,44,67,48]]]]]]]]]]],[68,1,68,60,[[68,8,68,24,["Elm","Syntax","Range"]],[1,[68,28,68,33,["Range"]]],[1,[68,34,68,60,[1,[[68,44,68,52,[2,"Location"]],[68,54,68,59,[2,"Range"]]]]]]]],[69,1,69,51,[[69,8,69,23,["Elm","Syntax","Type"]],[0],[1,[69,24,69,51,[1,[[69,34,69,50,[2,"ValueConstructor"]]]]]]]],[70,1,70,99,[[70,8,70,33,["Elm","Syntax","TypeAnnotation"]],[1,[70,37,70,51,["TypeAnnotation"]]],[1,[70,52,70,99,[1,[[70,62,70,78,[2,"RecordDefinition"]],[70,80,70,98,[3,["TypeAnnotation",[1,[70,94,70,98]]]]]]]]]]],[71,1,71,16,[[71,8,71,16,["Elm","Type"]],[0],[0]]],[72,1,72,27,[[72,8,72,18,["List","Extra"]],[1,[72,22,72,27,["ListX"]]],[0]]],[73,1,73,29,[[73,8,73,19,["Maybe","Extra"]],[1,[73,23,73,29,["MaybeX"]]],[0]]],[74,1,74,84,[[74,8,74,36,["Review","ModuleNameLookupTable"]],[0],[1,[74,37,74,84,[1,[[74,47,74,68,[2,"ModuleNameLookupTable"]],[74,70,74,83,[1,"moduleNameFor"]]]]]]]],[75,1,75,69,[[75,8,75,33,["Review","Project","Dependency"]],[1,[75,37,75,47,["Dependency"]]],[1,[75,48,75,69,[1,[[75,58,75,68,[2,"Dependency"]]]]]]]],[76,1,76,50,[[76,8,76,19,["Review","Rule"]],[1,[76,23,76,27,["Rule"]]],[1,[76,28,76,50,[1,[[76,38,76,43,[2,"Error"]],[76,45,76,49,[2,"Rule"]]]]]]]],[77,1,77,26,[[77,8,77,11,["Set"]],[0],[1,[77,12,77,26,[1,[[77,22,77,25,[2,"Set"]]]]]]]],[78,1,78,62,[[78,8,78,12,["Util"]],[0],[1,[78,13,78,62,[1,[[78,23,78,35,[1,"checkSorting"]],[78,37,78,51,[1,"makeAccessFunc"]],[78,53,78,61,[1,"validate"]]]]]]]]],[[81,1,337,38,[0,[[1,[81,1,324,3,"{-| Reports record fields that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the fields.\n\nThe proper order of record fields is the order in which they are defined in the\ntype alias in your source files. See the \"Configuration\" section below for more\ninformation.\n\n    config =\n        [ NoUnsortedRecords.rule\n            (NoUnsortedRecords.defaults\n                |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n            )\n        ]\n\n\n## \"Proper\" Order\n\nProper order may be defined in several ways. Firstly, type aliases define order,\ne.g.\n\n    type alias MyRecord =\n        { foo : Int, bar : Int, baz : Int }\n\ncreates a record with name `MyRecord` and the known field order `foo`, `bar`,\n`baz`.\n\nSecondly, records without a defined type alias that are nevertheless either a\nsubrecord of a type alias or attached to a custom type are considered to be in\nthe order they are defined in the source:\n\n    type MyType\n        = A Int { foo : Int, bar : Int, baz : Int }\n        | B { b : Int, a : Int, c : Int } String\n\nwhen encountered in their larger context. By default, these are _not_ considered\ncanonical records when encountered alone, though this behavior may be turned on\nwith [`treatAllSubrecordsAsCanonical`](#treatAllSubrecordsAsCanonical) or\n[`treatCustomTypeRecordsAsCanonical`](#treatCustomTypeRecordsAsCanonical).\n\n\n## Inference/Disambiguation\n\nSince records are not associated with a unique name, it is necessary to infer\nwhat type alias a record matches. In the most ambiguous case, all type aliases\nare checked for matching fields. If none are found, then the rule can't match it\nto a specific order (though it may still optionally be sorted alphabetically).\n\nIf only one matching type alias is found, then the rule will sort by that order.\n\nIn the case of multiple matching field sets, several things may happen. If all\nof the field sets have the same order, then it isn't necessary to unambiguously\nidentify which is being matched, and that one order will be used. Otherwise, the\nrule is capable of using the following disambiguation rules:\n\n  - Disambiguation by the fact that all fields must be present:\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int, extra : Int }\n\n-- Must be type `A` because missing `extra`\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\n  - Disambiguation by type signature:\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int }\n\na : A\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\nIt should be noted that this works with relatively complex type signatures, e.g.\n\n    type alias A =\n        { foo : Int, bar : Int, baz : Int }\n\n    type alias B =\n        { bar : Int, foo : Int, baz : Int }\n\n    a : Int -> String -> ( Int, String, List A )\n    a i s =\n        ( i, s, [ { foo = 1, bar = 2, baz = 3 } ] )\n\nThis also works with patterns, e.g.\n\n    type alias A =\n        { foo : Int, bar : Int, baz : Int }\n\n    type alias B =\n        { bar : Int, foo : Int, baz : Int }\n\n    a : Int -> A -> Int -> Bool\n    a i1 { foo, bar, baz } i2 =\n        True\n\n  - Disambiguation by field type. Very rudimentary type inference is performed,\n    but it may frequently be useful to add annotations, as the inference is by\n    no means complete.\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : String, baz : Int }\n\n-- Must be type `A` because `foo` is `Int`\na : { foo : Int, bar : Int, baz : Int }\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\n  - Disambiguation by the fact that the it is associated with a custom type with\n    a known record argument:\n\n```\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na =\n    -- Must be `A`'s record\n    A { foo = 1, bar = 2, baz = 3 }\n\nb custom =\n    case custom of\n        -- Must be `A`'s record\n        A { foo, bar } ->\n            False\n\n        -- Must be `B`'s record\n        B { bar, foo } ->\n            True\n```\n\n  - Disambiguation by the fact that the it is associated with a specific index\n    of a custom type with a known record argument:\n\n```\ntype Custom\n    = A\n        Int\n        { foo : Int\n        , bar : Int\n        , baz : Int\n        }\n        String\n        { bar : Int\n        , foo : Int\n        , baz : Int\n        }\n\na custom =\n    case custom of\n        A _ { foo, bar } _ { bar, foo } ->\n            False\n```\n\n  - Disambiguation by the fact that the it is associated with a specific field\n    of a record alias:\n\n```\ntype alias A =\n    { a : { foo : Int, bar : Int, baz : Int }\n    , b : { bar : Int, foo : Int, baz : Int }\n    }\n\nfunc : A\nfunc =\n    { a = { foo = 2, bar = 1, baz = 3 }\n    , b = { bar = 2, foo = 1, baz = 3 }\n    }\n```\n\n  - Disambiguation by known function argument types (this includes local\n    bindings):\n\n```\nmodule A exposing (..)\n\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a =\n    True\n\nfunc : Bool\nfunc =\n    -- Must be `A`, because `foo` has type `A -> Bool`\n    foo { foo = 1, bar = 2, baz = 3 }\n```\n\n\n## Best Practices for Disambiguation\n\nType annotations are always useful! If all functions have type annotations (with\nthe appropriate aliases), then it's unlikely ambiguous records will ever be\nencountered. Beyond that, ambiguity can always be avoided by just making the\ncanonical order for possibly-ambiguous records identical.\n\nIf you want to ensure that this rule is not encountering ambiguous/unknown\nrecords, then you can use `reportAmbiguousRecordsWithoutFix` and/or\n`reportUnknownRecordsWithoutFix` to report them without automatically sorting\nthem alphabetically. Alternately, you can use `doNotSortAmbiguousRecords` and/or\n`doNotSortUnknownRecords` to disable all sorting/error reporting for them.\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that your record fields are in a\nconsistent, predictable order, that is consistent with the order in which they\nwere defined.\n\nThis rule is not useful when you want to be able to write records in different\norders throughout your codebase, e.g. if you want to emphasize what fields are\nmost important at any given point. It may also not be useful if you have many\nrecords with the same fields.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedRecords\n```\n\n-}"]],[1,[325,1,325,26,[[325,1,325,5,"rule"],[325,8,325,26,[6,[325,8,325,18,[1,[325,8,325,18,[[],"RuleConfig"]],[]]],[325,22,325,26,[1,[325,22,325,26,[[],"Rule"]],[]]]]]]]],[326,1,337,38,[[326,1,326,5,"rule"],[[326,6,326,12,[11,"config"]]],[327,5,337,38,[1,"|>",0,[327,5,336,44,[1,"|>",0,[327,5,335,47,[1,"|>",0,[327,5,334,14,[1,"|>",0,[327,5,329,57,[1,"|>",0,[327,5,328,94,[1,"|>",0,[327,5,327,72,[0,[[327,5,327,30,[2,["Rule"],"newProjectRuleSchema"]],[327,31,327,50,[5,"NoUnsortedRecords"]],[327,51,327,72,[2,[],"initialProjectContext"]]]]],[328,12,328,94,[0,[[328,12,328,47,[2,["Rule"],"withDependenciesProjectVisitor"]],[328,48,328,94,[7,[328,49,328,93,[18,[[[328,50,328,51,[11,"d"]],[328,52,328,53,[11,"c"]]],[328,57,328,93,[6,[[328,59,328,61,[9,[]]],[328,63,328,91,[0,[[328,63,328,80,[2,[],"dependencyVisitor"]],[328,81,328,87,[2,[],"config"]],[328,88,328,89,[2,[],"c"]],[328,90,328,91,[2,[],"d"]]]]]]]]]]]]]]]]]],[329,12,329,57,[0,[[329,12,329,34,[2,["Rule"],"withModuleVisitor"]],[329,35,329,57,[7,[329,36,329,56,[0,[[329,36,329,49,[2,[],"moduleVisitor"]],[329,50,329,56,[2,[],"config"]]]]]]]]]]]],[330,12,334,14,[0,[[330,12,330,53,[2,["Rule"],"withModuleContextUsingContextCreator"]],[331,13,334,14,[8,[[331,15,331,63,[[331,15,331,34,"fromProjectToModule"],[331,37,331,63,[0,[[331,37,331,56,[2,[],"fromProjectToModule"]],[331,57,331,63,[2,[],"config"]]]]]]],[332,15,333,13,[[332,15,332,34,"fromModuleToProject"],[332,37,332,56,[2,[],"fromModuleToProject"]]]],[333,15,334,13,[[333,15,333,34,"foldProjectContexts"],[333,37,333,56,[2,[],"foldProjectContexts"]]]]]]]]]]]],[335,12,335,47,[2,["Rule"],"withContextFromImportedModules"]]]],[336,12,336,44,[2,["Rule"],"providesFixesForProjectRule"]]]],[337,12,337,38,[2,["Rule"],"fromProjectRuleSchema"]]]]]]]]],[340,1,350,10,[2,[[1,[340,1,342,3,"{-| Configuration for this rule. Create a new one with `defaults` and use\n`reportAmbiguousRecordsWithoutFix`, `doNotSortUnknownRecords`, etc. to alter it.\n-}"]],[343,6,343,16,"RuleConfig"],[],[[344,7,350,10,[[344,7,344,17,"RuleConfig"],[[345,9,350,10,[4,[[345,11,345,50,[[345,11,345,22,"sortUnknown"],[345,25,345,50,[1,[345,25,345,50,[[],"SortWithoutCanonicalOrder"]],[]]]]],[346,11,347,9,[[346,11,346,24,"sortAmbiguous"],[346,27,346,52,[1,[346,27,346,52,[[],"SortWithoutCanonicalOrder"]],[]]]]],[347,11,348,9,[[347,11,347,23,"sortGenerics"],[347,26,347,38,[1,[347,26,347,38,[[],"SortGenerics"]],[]]]]],[348,11,349,9,[[348,11,348,29,"subrecordTreatment"],[348,32,348,51,[1,[348,32,348,51,[[],"SubrecordCanonicity"]],[]]]]],[349,11,350,9,[[349,11,349,38,"typecheckUnambiguousRecords"],[349,41,349,45,[1,[349,41,349,45,[[],"Bool"]],[]]]]]]]]]]]]]]],[353,1,370,22,[2,[[1,[353,1,365,3,"{-| Specify how to deal with subrecords.\n\n  - `CanonicalWhenSubrecord` -- Subrecords have canonical order only when they\n    are part of their larger record/constructor.\n  - `CustomTypeArgsAlwaysCanonical` -- Arguments of custom types are always\n    canonical, but other subrecords are only canonical in place. This was the\n    behavior prior to 1.1.0.\n  - `AlwaysUnknown` -- Always consider subrecords unknown records (unless of\n    course they match something else).\n  - `AlwaysCanonical` -- Check for standalone subrecords as a lower-priority\n    \"known\" record.\n\n-}"]],[366,6,366,25,"SubrecordCanonicity"],[],[[367,7,367,29,[[367,7,367,29,"CanonicalWhenSubrecord"],[]]],[368,7,368,36,[[368,7,368,36,"CustomTypeArgsAlwaysCanonical"],[]]],[369,7,369,20,[[369,7,369,20,"AlwaysUnknown"],[]]],[370,7,370,22,[[370,7,370,22,"AlwaysCanonical"],[]]]]]]],[373,1,377,24,[2,[[1,[373,1,374,3,"{-| Specify how to handle generic records.\n-}"]],[375,6,375,18,"SortGenerics"],[],[[376,7,376,25,[[376,7,376,25,"GenericFieldsFirst"],[]]],[377,7,377,24,[[377,7,377,24,"GenericFieldsLast"],[]]]]]]],[380,1,385,16,[2,[[1,[380,1,381,3,"{-| Specify how to handle records without a canonical order.\n-}"]],[382,6,382,31,"SortWithoutCanonicalOrder"],[],[[383,7,383,21,[[383,7,383,21,"Alphabetically"],[]]],[384,7,384,17,[[384,7,384,17,"ReportOnly"],[]]],[385,7,385,16,[[385,7,385,16,"DoNotSort"],[]]]]]]],[388,1,422,10,[0,[[1,[388,1,413,3,"{-| The default configuration, with the following behavior:\n\n  - Unknown records (those that match no known canonical order) are sorted\n    alphabetically\n  - Ambiguous records (those that match more than one canonical order) are\n    sorted alphabetically\n  - Generic fields of generic records are sorted before the canonical ones.\n  - Subrecords are treated as having canonical order only when associated with\n    their outer record/constructor.\n  - Typechecking is only used to disambiguate records, i.e. a record will not\n    _not_ match a canonical record just because the rule thinks it has the wrong\n    type. For instance, `{ foo = 1, bar = 2 }` will match\n    `{ foo : String, bar : String }` if no other records exist with the fields\n    `foo` and `bar`. This is to protect against incorrect type inference by this\n    rule.\n\nUse `reportUnknownRecordsWithoutFix`, etc. to alter this behavior, e.g.\n\n    config =\n        [ NoUnsortedRecords.rule\n            (NoUnsortedRecords.defaults\n                |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n            )\n        ]\n\n-}"]],[1,[414,1,414,22,[[414,1,414,9,"defaults"],[414,12,414,22,[1,[414,12,414,22,[[],"RuleConfig"]],[]]]]]],[415,1,422,10,[[415,1,415,9,"defaults"],[],[416,5,422,10,[0,[[416,5,416,15,[2,[],"RuleConfig"]],[417,9,422,10,[8,[[417,11,417,39,[[417,11,417,22,"sortUnknown"],[417,25,417,39,[2,[],"Alphabetically"]]]],[418,11,419,9,[[418,11,418,24,"sortAmbiguous"],[418,27,418,41,[2,[],"Alphabetically"]]]],[419,11,420,9,[[419,11,419,23,"sortGenerics"],[419,26,419,44,[2,[],"GenericFieldsFirst"]]]],[420,11,421,9,[[420,11,420,29,"subrecordTreatment"],[420,32,420,54,[2,[],"CanonicalWhenSubrecord"]]]],[421,11,422,9,[[421,11,421,38,"typecheckUnambiguousRecords"],[421,41,421,46,[2,[],"False"]]]]]]]]]]]]]]],[425,1,434,58,[0,[[1,[425,1,431,3,"{-| By default, typechecking is only used to disambiguate records. This alters\nthat behavior to typecheck _all_ records. For instance, this will force\n`{ foo = 1, bar = 2 }` to be an \"unknown\" record if\n`{ foo : String, bar : String }` is known. This should probably be left turned\noff, unless you wish to help find examples of incorrect type inference by this\nrule.\n-}"]],[1,[432,1,432,47,[[432,1,432,20,"typecheckAllRecords"],[432,23,432,47,[6,[432,23,432,33,[1,[432,23,432,33,[[],"RuleConfig"]],[]]],[432,37,432,47,[1,[432,37,432,47,[[],"RuleConfig"]],[]]]]]]]],[433,1,434,58,[[433,1,433,20,"typecheckAllRecords"],[[433,21,433,35,[14,[433,22,433,34,[12,[[],"RuleConfig"],[[433,33,433,34,[11,"r"]]]]]]]],[434,5,434,58,[0,[[434,5,434,15,[2,[],"RuleConfig"]],[434,16,434,58,[21,[434,18,434,19,"r"],[[434,22,434,57,[[434,22,434,49,"typecheckUnambiguousRecords"],[434,52,434,56,[2,[],"True"]]]]]]]]]]]]]]],[437,1,463,58,[0,[[1,[437,1,460,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This disables that behavior,\ntreating them the same as any other unknown record.\n\nFor example:\n\n    type A\n        = A { foo : Int, bar : Int, baz : Int }\n\n    type alias Rec =\n        { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\n    thisWillBeUnknown =\n        A { bar = 1, baz = 2, foo = 3 }\n\n    and =\n        { yi =\n            -- This will also be unknown\n            { bar = 1, baz = 2, foo = 3 }\n        , er = 1\n        }\n\n-}"]],[1,[461,1,461,52,[[461,1,461,25,"treatSubrecordsAsUnknown"],[461,28,461,52,[6,[461,28,461,38,[1,[461,28,461,38,[[],"RuleConfig"]],[]]],[461,42,461,52,[1,[461,42,461,52,[[],"RuleConfig"]],[]]]]]]]],[462,1,463,58,[[462,1,462,25,"treatSubrecordsAsUnknown"],[[462,26,462,40,[14,[462,27,462,39,[12,[[],"RuleConfig"],[[462,38,462,39,[11,"r"]]]]]]]],[463,5,463,58,[0,[[463,5,463,15,[2,[],"RuleConfig"]],[463,16,463,58,[21,[463,18,463,19,"r"],[[463,22,463,57,[[463,22,463,40,"subrecordTreatment"],[463,43,463,56,[2,[],"AlwaysUnknown"]]]]]]]]]]]]]]],[466,1,486,74,[0,[[1,[466,1,483,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This extends that behavior to sort\ncustom type args even when encountered alone (i.e. not in the context of their\nconstructor. This was the behavior prior to version `1.1.0` and thus this\nsetting is provided for compatibility. Note that canonical records will always\ntake priority, however.\n\nFor example:\n\n    type A\n        = A { foo : Int, bar : Int, baz : Int }\n\n    thisWillHaveCanonicalOrder =\n        -- Even though it does not appear in the context of `A`\n        { foo = 3, bar = 1, baz = 2 }\n\n-}"]],[1,[484,1,484,61,[[484,1,484,34,"treatCustomTypeRecordsAsCanonical"],[484,37,484,61,[6,[484,37,484,47,[1,[484,37,484,47,[[],"RuleConfig"]],[]]],[484,51,484,61,[1,[484,51,484,61,[[],"RuleConfig"]],[]]]]]]]],[485,1,486,74,[[485,1,485,34,"treatCustomTypeRecordsAsCanonical"],[[485,35,485,49,[14,[485,36,485,48,[12,[[],"RuleConfig"],[[485,47,485,48,[11,"r"]]]]]]]],[486,5,486,74,[0,[[486,5,486,15,[2,[],"RuleConfig"]],[486,16,486,74,[21,[486,18,486,19,"r"],[[486,22,486,73,[[486,22,486,40,"subrecordTreatment"],[486,43,486,72,[2,[],"CustomTypeArgsAlwaysCanonical"]]]]]]]]]]]]]]],[489,1,508,60,[0,[[1,[489,1,505,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This extends that behavior to sort\nthem even when encountered alone (i.e. not in the context of their parent\nrecord/constructor. Note that canonical records will always take priority,\nhowever.\n\nFor example:\n\n    type alias Rec =\n        { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\n    thisWillHaveCanonicalOrder =\n        -- Even though it does not appear in the context of `Rec`\n        { foo = 3, bar = 1, baz = 2 }\n\n-}"]],[1,[506,1,506,57,[[506,1,506,30,"treatAllSubrecordsAsCanonical"],[506,33,506,57,[6,[506,33,506,43,[1,[506,33,506,43,[[],"RuleConfig"]],[]]],[506,47,506,57,[1,[506,47,506,57,[[],"RuleConfig"]],[]]]]]]]],[507,1,508,60,[[507,1,507,30,"treatAllSubrecordsAsCanonical"],[[507,31,507,45,[14,[507,32,507,44,[12,[[],"RuleConfig"],[[507,43,507,44,[11,"r"]]]]]]]],[508,5,508,60,[0,[[508,5,508,15,[2,[],"RuleConfig"]],[508,16,508,60,[21,[508,18,508,19,"r"],[[508,22,508,59,[[508,22,508,40,"subrecordTreatment"],[508,43,508,58,[2,[],"AlwaysCanonical"]]]]]]]]]]]]]]],[511,1,517,47,[0,[[1,[511,1,514,3,"{-| By default, records that do not match any known aliases or custom types are\nsorted alphabetically. This disables that behavior, leaving them in their base\nsorting.\n-}"]],[1,[515,1,515,51,[[515,1,515,24,"doNotSortUnknownRecords"],[515,27,515,51,[6,[515,27,515,37,[1,[515,27,515,37,[[],"RuleConfig"]],[]]],[515,41,515,51,[1,[515,41,515,51,[[],"RuleConfig"]],[]]]]]]]],[516,1,517,47,[[516,1,516,24,"doNotSortUnknownRecords"],[[516,25,516,39,[14,[516,26,516,38,[12,[[],"RuleConfig"],[[516,37,516,38,[11,"r"]]]]]]]],[517,5,517,47,[0,[[517,5,517,15,[2,[],"RuleConfig"]],[517,16,517,47,[21,[517,18,517,19,"r"],[[517,22,517,46,[[517,22,517,33,"sortUnknown"],[517,36,517,45,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[520,1,527,49,[0,[[1,[520,1,524,3,"{-| By default, records that match multiple known aliases with different field\norders are sorted alphabetically. (If the field orders of the various matches\nare identical, then it is not ambiguous.) This disables that behavior, leaving\nthem in their base sorting instead.\n-}"]],[1,[525,1,525,53,[[525,1,525,26,"doNotSortAmbiguousRecords"],[525,29,525,53,[6,[525,29,525,39,[1,[525,29,525,39,[[],"RuleConfig"]],[]]],[525,43,525,53,[1,[525,43,525,53,[[],"RuleConfig"]],[]]]]]]]],[526,1,527,49,[[526,1,526,26,"doNotSortAmbiguousRecords"],[[526,27,526,41,[14,[526,28,526,40,[12,[[],"RuleConfig"],[[526,39,526,40,[11,"r"]]]]]]]],[527,5,527,49,[0,[[527,5,527,15,[2,[],"RuleConfig"]],[527,16,527,49,[21,[527,18,527,19,"r"],[[527,22,527,48,[[527,22,527,35,"sortAmbiguous"],[527,38,527,47,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[530,1,539,48,[0,[[1,[530,1,536,3,"{-| By default, records that do not match any known aliases or custom types are\nsorted alphabetically. This disables that behavior, reporting them as unknown\nwithout automatically fixing them.\n\nNote that this will effectively forbid the use of _ad hoc_/anonymous records!\n\n-}"]],[1,[537,1,537,58,[[537,1,537,31,"reportUnknownRecordsWithoutFix"],[537,34,537,58,[6,[537,34,537,44,[1,[537,34,537,44,[[],"RuleConfig"]],[]]],[537,48,537,58,[1,[537,48,537,58,[[],"RuleConfig"]],[]]]]]]]],[538,1,539,48,[[538,1,538,31,"reportUnknownRecordsWithoutFix"],[[538,32,538,46,[14,[538,33,538,45,[12,[[],"RuleConfig"],[[538,44,538,45,[11,"r"]]]]]]]],[539,5,539,48,[0,[[539,5,539,15,[2,[],"RuleConfig"]],[539,16,539,48,[21,[539,18,539,19,"r"],[[539,22,539,47,[[539,22,539,33,"sortUnknown"],[539,36,539,46,[2,[],"ReportOnly"]]]]]]]]]]]]]]],[542,1,551,50,[0,[[1,[542,1,548,3,"{-| By default, records that match multiple known aliases with different field\norders are sorted alphabetically. (If the field orders of the various matches\nare identical, then it is not ambiguous.) This disables that behavior, reporting\nthem as ambiguous without automatically fixing them. This is useful if you want\nto catch ambiguous records and e.g. provide type annotations to make them\nunambiguous.\n-}"]],[1,[549,1,549,60,[[549,1,549,33,"reportAmbiguousRecordsWithoutFix"],[549,36,549,60,[6,[549,36,549,46,[1,[549,36,549,46,[[],"RuleConfig"]],[]]],[549,50,549,60,[1,[549,50,549,60,[[],"RuleConfig"]],[]]]]]]]],[550,1,551,50,[[550,1,550,33,"reportAmbiguousRecordsWithoutFix"],[[550,34,550,48,[14,[550,35,550,47,[12,[[],"RuleConfig"],[[550,46,550,47,[11,"r"]]]]]]]],[551,5,551,50,[0,[[551,5,551,15,[2,[],"RuleConfig"]],[551,16,551,50,[21,[551,18,551,19,"r"],[[551,22,551,49,[[551,22,551,35,"sortAmbiguous"],[551,38,551,48,[2,[],"ReportOnly"]]]]]]]]]]]]]]],[554,1,570,56,[0,[[1,[554,1,567,3,"{-| By default, generic fields are placed before others; this alters that\nbehavior to place them at the end instead, e.g.\n\n    type alias A =\n        { z : Int, y : Int, x : Int }\n\n    type alias Generic record =\n        { record | foo : Int, bar : Int, baz : Int }\n\n    rec : Generic A\n    rec =\n        { foo = 1, bar = 2, baz = 3, z = 4, y = 5, x = 6 }\n\n-}"]],[1,[568,1,568,49,[[568,1,568,22,"sortGenericFieldsLast"],[568,25,568,49,[6,[568,25,568,35,[1,[568,25,568,35,[[],"RuleConfig"]],[]]],[568,39,568,49,[1,[568,39,568,49,[[],"RuleConfig"]],[]]]]]]]],[569,1,570,56,[[569,1,569,22,"sortGenericFieldsLast"],[[569,23,569,37,[14,[569,24,569,36,[12,[[],"RuleConfig"],[[569,35,569,36,[11,"r"]]]]]]]],[570,5,570,56,[0,[[570,5,570,15,[2,[],"RuleConfig"]],[570,16,570,56,[21,[570,18,570,19,"r"],[[570,22,570,55,[[570,22,570,34,"sortGenerics"],[570,37,570,54,[2,[],"GenericFieldsLast"]]]]]]]]]]]]]]],[573,1,579,6,[1,[[1,[573,1,574,3,"{-| A canonical ordering of fields in a record definition.\n-}"]],[575,12,575,23,"KnownRecord"],[],[576,5,579,6,[4,[[576,7,576,40,[[576,7,576,12,"order"],[576,15,576,40,[1,[576,15,576,19,[[],"Dict"]],[[576,20,576,26,[1,[576,20,576,26,[[],"String"]],[]]],[576,27,576,40,[3,[[576,29,576,32,[1,[576,29,576,32,[[],"Int"]],[]]],[576,34,576,38,[1,[576,34,576,38,[[],"Type"]],[]]]]]]]]]]],[577,7,578,5,[[577,7,577,16,"isGeneric"],[577,19,577,23,[1,[577,19,577,23,[[],"Bool"]],[]]]]],[578,7,579,5,[[578,7,578,18,"isSubrecord"],[578,21,578,25,[1,[578,21,578,25,[[],"Bool"]],[]]]]]]]]]]],[582,1,585,70,[1,[[1,[582,1,583,3,"{-| A single field of a record, to check for sorting.\n-}"]],[584,12,584,17,"Field"],[],[585,5,585,70,[4,[[585,7,585,21,[[585,7,585,12,"field"],[585,15,585,21,[1,[585,15,585,21,[[],"String"]],[]]]]],[585,23,585,53,[[585,23,585,28,"type_"],[585,31,585,53,[1,[585,31,585,36,[[],"Maybe"]],[[585,37,585,53,[1,[585,37,585,53,[[],"DereferencedType"]],[]]]]]]]],[585,55,585,69,[[585,55,585,60,"range"],[585,63,585,68,[1,[585,63,585,68,[[],"Range"]],[]]]]]]]]]]],[588,1,595,6,[1,[[1,[588,1,590,3,"{-| A record type, expression, or pattern, packaged in a standardized format for\nchecking.\n-}"]],[591,12,591,25,"RecordToCheck"],[],[592,5,595,6,[4,[[592,7,592,24,[[592,7,592,16,"fullRange"],[592,19,592,24,[1,[592,19,592,24,[[],"Range"]],[]]]]],[593,7,594,5,[[593,7,593,16,"orderInfo"],[593,19,593,34,[1,[593,19,593,24,[[],"Maybe"]],[[593,25,593,34,[1,[593,25,593,34,[[],"OrderInfo"]],[]]]]]]]],[594,7,595,5,[[594,7,594,13,"fields"],[594,16,594,26,[1,[594,16,594,20,[[],"List"]],[[594,21,594,26,[1,[594,21,594,26,[[],"Field"]],[]]]]]]]]]]]]]],[598,1,604,10,[2,[[1,[598,1,599,3,"{-| Define a canonical ordering (and type) for fields.\n-}"]],[600,6,600,16,"FieldOrder"],[],[[601,7,604,10,[[601,7,601,17,"FieldOrder"],[[602,9,604,10,[4,[[602,11,602,48,[[602,11,602,20,"canonical"],[602,23,602,48,[1,[602,23,602,27,[[],"Dict"]],[[602,28,602,34,[1,[602,28,602,34,[[],"String"]],[]]],[602,35,602,48,[3,[[602,37,602,40,[1,[602,37,602,40,[[],"Int"]],[]]],[602,42,602,46,[1,[602,42,602,46,[[],"Type"]],[]]]]]]]]]]],[603,11,604,9,[[603,11,603,18,"generic"],[603,21,603,34,[1,[603,21,603,26,[[],"Maybe"]],[[603,27,603,34,[1,[603,27,603,34,[[],"Generic"]],[]]]]]]]]]]]]]]]]]],[607,1,612,31,[2,[[1,[607,1,609,3,"{-| The type of generic fields in a field order, which may be unknown or have\ncanonical ordering.\n-}"]],[610,6,610,13,"Generic"],[],[[611,7,611,34,[[611,7,611,20,"UnknownFields"],[[611,21,611,34,[1,[611,22,611,26,[[],"List"]],[[611,27,611,33,[1,[611,27,611,33,[[],"String"]],[]]]]]]]]],[612,7,612,31,[[612,7,612,20,"OrderedFields"],[[612,21,612,31,[1,[612,21,612,31,[[],"FieldOrder"]],[]]]]]]]]]],[615,1,620,19,[2,[[1,[615,1,617,3,"{-| Any info we can glean about the record that might help us figure out what\nits field order should be.\n-}"]],[618,6,618,15,"OrderInfo"],[],[[619,7,619,31,[[619,7,619,20,"HasFieldOrder"],[[619,21,619,31,[1,[619,21,619,31,[[],"FieldOrder"]],[]]]]]],[620,7,620,19,[[620,7,620,19,"HasAllFields"],[]]]]]]],[623,1,638,39,[2,[[1,[623,1,630,3,"{-| A type that, after being dereferenced, will not contain aliases and stores\nwhether or not records have canonical field order.\n\nNote that `TypeVar` is never concrete, as a `Type` is always made with full info\nabout all type variables, so the only way `TypeVar` can exist is if it's not\nused.\n\n-}"]],[631,6,631,10,"Type"],[],[[632,7,632,46,[[632,7,632,19,"FunctionType"],[[632,20,632,46,[4,[[632,22,632,33,[[632,22,632,26,"from"],[632,29,632,33,[1,[632,29,632,33,[[],"Type"]],[]]]]],[632,35,632,45,[[632,35,632,37,"to"],[632,40,632,44,[1,[632,40,632,44,[[],"Type"]],[]]]]]]]]]]],[633,7,633,28,[[633,7,633,16,"TupleType"],[[633,17,633,28,[1,[633,18,633,22,[[],"List"]],[[633,23,633,27,[1,[633,23,633,27,[[],"Type"]],[]]]]]]]]],[634,7,634,20,[[634,7,634,15,"ListType"],[[634,16,634,20,[1,[634,16,634,20,[[],"Type"]],[]]]]]],[635,7,635,15,[[635,7,635,15,"UnitType"],[]]],[636,7,636,51,[[636,7,636,16,"NamedType"],[[636,17,636,39,[3,[[636,19,636,29,[1,[636,19,636,29,[[],"ModuleName"]],[]]],[636,31,636,37,[1,[636,31,636,37,[[],"String"]],[]]]]]],[636,40,636,51,[1,[636,41,636,45,[[],"List"]],[[636,46,636,50,[1,[636,46,636,50,[[],"Type"]],[]]]]]]]]],[637,7,637,92,[[637,7,637,17,"RecordType"],[[637,18,637,92,[4,[[637,20,637,40,[[637,20,637,27,"generic"],[637,30,637,40,[1,[637,30,637,35,[[],"Maybe"]],[[637,36,637,40,[1,[637,36,637,40,[[],"Type"]],[]]]]]]]],[637,42,637,58,[[637,42,637,51,"canonical"],[637,54,637,58,[1,[637,54,637,58,[[],"Bool"]],[]]]]],[637,60,637,91,[[637,60,637,66,"fields"],[637,69,637,90,[1,[637,69,637,73,[[],"List"]],[[637,74,637,90,[3,[[637,76,637,82,[1,[637,76,637,82,[[],"String"]],[]]],[637,84,637,88,[1,[637,84,637,88,[[],"Type"]],[]]]]]]]]]]]]]]]]],[638,7,638,39,[[638,7,638,14,"TypeVar"],[[638,15,638,32,[1,[638,16,638,21,[[],"Maybe"]],[[638,22,638,31,[1,[638,22,638,31,[[],"Typeclass"]],[]]]]]],[638,33,638,39,[1,[638,33,638,39,[[],"String"]],[]]]]]]]]]],[641,1,647,17,[2,[[1,[641,1,642,3,"{-| Represent an Elm \"typeclass\" (constrained type variable, like `number`).\n-}"]],[643,6,643,15,"Typeclass"],[],[[644,7,644,17,[[644,7,644,17,"Appendable"],[]]],[645,7,645,13,[[645,7,645,13,"Number"],[]]],[646,7,646,17,[[646,7,646,17,"Comparable"],[]]],[647,7,647,17,[[647,7,647,17,"CompAppend"],[]]]]]]],[650,1,653,28,[2,[[1,[650,1,651,3,"{-| A type with all aliases dereferenced.\n-}"]],[652,6,652,22,"DereferencedType"],[],[[653,7,653,28,[[653,7,653,23,"DereferencedType"],[[653,24,653,28,[1,[653,24,653,28,[[],"Type"]],[]]]]]]]]]],[656,1,660,34,[2,[[1,[656,1,658,3,"{-| A type with positional type variables, e.g. `Ok a` having been created from\n`Result a b`.\n-}"]],[659,6,659,28,"TypeWithPositionalVars"],[],[[660,7,660,34,[[660,7,660,29,"TypeWithPositionalVars"],[[660,30,660,34,[1,[660,30,660,34,[[],"Type"]],[]]]]]]]]]],[663,1,680,6,[1,[[1,[663,1,674,3,"{-| The project context.\n\n`aliases` stores all type aliases.\n\n`canonicalRecords` stores known aliased records.\n\n`constructors` are different than functions, as they (might) require type\nvars.\n\n`functionTypes` stores the types of all functions (for type inference).\n\n-}"]],[675,12,675,26,"ProjectContext"],[],[676,5,680,6,[4,[[676,7,676,69,[[676,7,676,14,"aliases"],[676,17,676,69,[1,[676,17,676,21,[[],"Dict"]],[[676,22,676,32,[1,[676,22,676,32,[[],"ModuleName"]],[]]],[676,33,676,69,[1,[676,34,676,38,[[],"Dict"]],[[676,39,676,45,[1,[676,39,676,45,[[],"String"]],[]]],[676,46,676,68,[1,[676,46,676,68,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[677,7,678,5,[[677,7,677,23,"canonicalRecords"],[677,26,677,67,[1,[677,26,677,30,[[],"Dict"]],[[677,31,677,41,[1,[677,31,677,41,[[],"ModuleName"]],[]]],[677,42,677,67,[1,[677,43,677,47,[[],"Dict"]],[[677,48,677,54,[1,[677,48,677,54,[[],"String"]],[]]],[677,55,677,66,[1,[677,55,677,66,[[],"KnownRecord"]],[]]]]]]]]]]],[678,7,679,5,[[678,7,678,19,"constructors"],[678,22,678,117,[1,[678,22,678,26,[[],"Dict"]],[[678,27,678,37,[1,[678,27,678,37,[[],"ModuleName"]],[]]],[678,38,678,117,[1,[678,39,678,43,[[],"Dict"]],[[678,44,678,50,[1,[678,44,678,50,[[],"String"]],[]]],[678,51,678,116,[4,[[678,53,678,82,[[678,53,678,67,"customTypeName"],[678,70,678,82,[1,[678,70,678,75,[[],"Maybe"]],[[678,76,678,82,[1,[678,76,678,82,[[],"String"]],[]]]]]]]],[678,84,678,115,[[678,84,678,89,"type_"],[678,92,678,114,[1,[678,92,678,114,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[679,7,680,5,[[679,7,679,20,"functionTypes"],[679,23,679,57,[1,[679,23,679,27,[[],"Dict"]],[[679,28,679,38,[1,[679,28,679,38,[[],"ModuleName"]],[]]],[679,39,679,57,[1,[679,40,679,44,[[],"Dict"]],[[679,45,679,51,[1,[679,45,679,51,[[],"String"]],[]]],[679,52,679,56,[1,[679,52,679,56,[[],"Type"]],[]]]]]]]]]]]]]]]]],[683,1,711,6,[1,[[1,[683,1,695,3,"{-| The module context.\n\n`aliases` stores all type aliases.\n\n`canonicalRecords` stores known aliased records.\n\n`constructors` are different than functions, as they (might) require type\nvars.\n\n`functionTypes` stores the types of all functions (for type inference), along\nwith any (anonymous) records associated with custom types (by index).\n\n-}"]],[696,12,696,25,"ModuleContext"],[],[697,5,711,6,[4,[[697,7,697,69,[[697,7,697,14,"aliases"],[697,17,697,69,[1,[697,17,697,21,[[],"Dict"]],[[697,22,697,32,[1,[697,22,697,32,[[],"ModuleName"]],[]]],[697,33,697,69,[1,[697,34,697,38,[[],"Dict"]],[[697,39,697,45,[1,[697,39,697,45,[[],"String"]],[]]],[697,46,697,68,[1,[697,46,697,68,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[698,7,699,5,[[698,7,698,23,"canonicalRecords"],[698,26,698,67,[1,[698,26,698,30,[[],"Dict"]],[[698,31,698,41,[1,[698,31,698,41,[[],"ModuleName"]],[]]],[698,42,698,67,[1,[698,43,698,47,[[],"Dict"]],[[698,48,698,54,[1,[698,48,698,54,[[],"String"]],[]]],[698,55,698,66,[1,[698,55,698,66,[[],"KnownRecord"]],[]]]]]]]]]]],[699,7,700,5,[[699,7,699,19,"constructors"],[699,22,699,117,[1,[699,22,699,26,[[],"Dict"]],[[699,27,699,37,[1,[699,27,699,37,[[],"ModuleName"]],[]]],[699,38,699,117,[1,[699,39,699,43,[[],"Dict"]],[[699,44,699,50,[1,[699,44,699,50,[[],"String"]],[]]],[699,51,699,116,[4,[[699,53,699,82,[[699,53,699,67,"customTypeName"],[699,70,699,82,[1,[699,70,699,75,[[],"Maybe"]],[[699,76,699,82,[1,[699,76,699,82,[[],"String"]],[]]]]]]]],[699,84,699,115,[[699,84,699,89,"type_"],[699,92,699,114,[1,[699,92,699,114,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[700,7,701,5,[[700,7,700,20,"functionTypes"],[700,23,700,57,[1,[700,23,700,27,[[],"Dict"]],[[700,28,700,38,[1,[700,28,700,38,[[],"ModuleName"]],[]]],[700,39,700,57,[1,[700,40,700,44,[[],"Dict"]],[[700,45,700,51,[1,[700,45,700,51,[[],"String"]],[]]],[700,52,700,56,[1,[700,52,700,56,[[],"Type"]],[]]]]]]]]]]],[701,7,707,5,[[701,7,701,14,"exposed"],[702,9,706,10,[4,[[702,11,702,55,[[702,11,702,18,"aliases"],[702,21,702,55,[1,[702,21,702,25,[[],"Dict"]],[[702,26,702,32,[1,[702,26,702,32,[[],"String"]],[]]],[702,33,702,55,[1,[702,33,702,55,[[],"TypeWithPositionalVars"]],[]]]]]]]],[703,11,704,9,[[703,11,703,27,"canonicalRecords"],[703,30,703,53,[1,[703,30,703,34,[[],"Dict"]],[[703,35,703,41,[1,[703,35,703,41,[[],"String"]],[]]],[703,42,703,53,[1,[703,42,703,53,[[],"KnownRecord"]],[]]]]]]]],[704,11,705,9,[[704,11,704,23,"constructors"],[704,26,704,103,[1,[704,26,704,30,[[],"Dict"]],[[704,31,704,37,[1,[704,31,704,37,[[],"String"]],[]]],[704,38,704,103,[4,[[704,40,704,69,[[704,40,704,54,"customTypeName"],[704,57,704,69,[1,[704,57,704,62,[[],"Maybe"]],[[704,63,704,69,[1,[704,63,704,69,[[],"String"]],[]]]]]]]],[704,71,704,102,[[704,71,704,76,"type_"],[704,79,704,101,[1,[704,79,704,101,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]],[705,11,706,9,[[705,11,705,24,"functionTypes"],[705,27,705,43,[1,[705,27,705,31,[[],"Dict"]],[[705,32,705,38,[1,[705,32,705,38,[[],"String"]],[]]],[705,39,705,43,[1,[705,39,705,43,[[],"Type"]],[]]]]]]]]]]]]],[707,7,708,5,[[707,7,707,17,"moduleName"],[707,20,707,30,[1,[707,20,707,30,[[],"ModuleName"]],[]]]]],[708,7,709,5,[[708,7,708,20,"fileIsIgnored"],[708,23,708,27,[1,[708,23,708,27,[[],"Bool"]],[]]]]],[709,7,710,5,[[709,7,709,18,"lookupTable"],[709,21,709,42,[1,[709,21,709,42,[[],"ModuleNameLookupTable"]],[]]]]],[710,7,711,5,[[710,7,710,20,"extractSource"],[710,23,710,38,[6,[710,23,710,28,[1,[710,23,710,28,[[],"Range"]],[]]],[710,32,710,38,[1,[710,32,710,38,[[],"String"]],[]]]]]]]]]]]]],[714,1,720,6,[1,[[1,[714,1,716,3,"{-| Context within an expression, which may have additional bindings from `let`\ndeclarations and patterns.\n-}"]],[717,12,717,24,"LocalContext"],[],[718,5,720,6,[4,[[718,7,718,30,[[718,7,718,14,"context"],[718,17,718,30,[1,[718,17,718,30,[[],"ModuleContext"]],[]]]]],[719,7,720,5,[[719,7,719,21,"localFunctions"],[719,24,719,40,[1,[719,24,719,28,[[],"Dict"]],[[719,29,719,35,[1,[719,29,719,35,[[],"String"]],[]]],[719,36,719,40,[1,[719,36,719,40,[[],"Type"]],[]]]]]]]]]]]]]],[723,1,736,14,[0,[[1,[723,1,725,3,"{-| Visit each module, first getting type aliases from all declarations and then\nchecking all expressions for records.\n-}"]],[1,[726,1,726,141,[[726,1,726,14,"moduleVisitor"],[726,17,726,141,[6,[726,17,726,27,[1,[726,17,726,27,[[],"RuleConfig"]],[]]],[726,31,726,141,[6,[726,31,726,68,[1,[726,31,726,52,[["Rule"],"ModuleRuleSchema"]],[[726,53,726,54,[0,"r"]],[726,55,726,68,[1,[726,55,726,68,[[],"ModuleContext"]],[]]]]]],[726,72,726,141,[1,[726,72,726,93,[["Rule"],"ModuleRuleSchema"]],[[726,94,726,127,[5,[726,96,726,97,"r"],[726,99,726,126,[[726,100,726,126,[[726,100,726,120,"hasAtLeastOneVisitor"],[726,123,726,125,[2]]]]]]]],[726,128,726,141,[1,[726,128,726,141,[[],"ModuleContext"]],[]]]]]]]]]]]]],[727,1,736,14,[[727,1,727,14,"moduleVisitor"],[[727,15,727,21,[11,"config"]],[727,22,727,28,[11,"schema"]]],[728,5,736,14,[1,"|>",0,[728,5,728,11,[2,[],"schema"]],[729,12,736,14,[0,[[729,12,729,44,[2,["Rule"],"withDeclarationEnterVisitor"]],[730,13,736,14,[7,[730,14,735,62,[18,[[[730,15,730,16,[11,"d"]],[730,17,730,18,[11,"c"]]],[731,17,735,62,[11,[731,20,731,35,[19,[731,20,731,21,[2,[],"c"]],[731,22,731,35,"fileIsIgnored"]]],[732,21,732,30,[6,[[732,23,732,25,[9,[]]],[732,27,732,28,[2,[],"c"]]]]],[735,21,735,62,[6,[[735,23,735,57,[0,[[735,23,735,46,[2,[],"declarationEnterVisitor"]],[735,47,735,53,[2,[],"config"]],[735,54,735,55,[2,[],"c"]],[735,56,735,57,[2,[],"d"]]]]],[735,59,735,60,[2,[],"c"]]]]]]]]]]]]]]]]]]]]]],[739,1,747,6,[0,[[1,[739,1,740,3,"{-| The initial project context knows of no types.\n-}"]],[1,[741,1,741,39,[[741,1,741,22,"initialProjectContext"],[741,25,741,39,[1,[741,25,741,39,[[],"ProjectContext"]],[]]]]]],[742,1,747,6,[[742,1,742,22,"initialProjectContext"],[],[743,5,747,6,[8,[[743,7,743,27,[[743,7,743,14,"aliases"],[743,17,743,27,[2,["Dict"],"empty"]]]],[744,7,745,5,[[744,7,744,23,"canonicalRecords"],[744,26,744,36,[2,["Dict"],"empty"]]]],[745,7,746,5,[[745,7,745,19,"constructors"],[745,22,745,32,[2,["Dict"],"empty"]]]],[746,7,747,5,[[746,7,746,20,"functionTypes"],[746,23,746,33,[2,["Dict"],"empty"]]]]]]]]]]]],[750,1,783,31,[0,[[1,[750,1,752,3,"{-| Create a `ProjectContext` from a `ModuleContext`, keeping only exposed\nfunctions (since unexposed won't be relevant out of the module).\n-}"]],[1,[753,1,753,71,[[753,1,753,20,"fromModuleToProject"],[753,23,753,71,[1,[753,23,753,42,[["Rule"],"ContextCreator"]],[[753,43,753,56,[1,[753,43,753,56,[[],"ModuleContext"]],[]]],[753,57,753,71,[1,[753,57,753,71,[[],"ProjectContext"]],[]]]]]]]]],[754,1,783,31,[[754,1,754,20,"fromModuleToProject"],[],[755,5,783,31,[1,"|>",0,[755,5,782,10,[0,[[755,5,755,28,[2,["Rule"],"initContextCreator"]],[756,9,782,10,[7,[756,10,781,14,[18,[[[756,11,756,21,[11,"moduleName"]],[756,22,756,33,[8,[[756,24,756,31,"exposed"]]]]],[757,13,781,14,[8,[[757,15,762,62,[[757,15,757,22,"aliases"],[758,17,762,62,[11,[758,20,758,48,[0,[[758,20,758,32,[2,["Dict"],"isEmpty"]],[758,33,758,48,[19,[758,33,758,40,[2,[],"exposed"]],[758,41,758,48,"aliases"]]]]]],[759,21,759,31,[2,["Dict"],"empty"]],[762,21,762,62,[0,[[762,21,762,35,[2,["Dict"],"singleton"]],[762,36,762,46,[2,[],"moduleName"]],[762,47,762,62,[19,[762,47,762,54,[2,[],"exposed"]],[762,55,762,62,"aliases"]]]]]]]]]],[763,15,769,13,[[763,15,763,31,"canonicalRecords"],[764,17,768,71,[11,[764,20,764,57,[0,[[764,20,764,32,[2,["Dict"],"isEmpty"]],[764,33,764,57,[19,[764,33,764,40,[2,[],"exposed"]],[764,41,764,57,"canonicalRecords"]]]]]],[765,21,765,31,[2,["Dict"],"empty"]],[768,21,768,71,[0,[[768,21,768,35,[2,["Dict"],"singleton"]],[768,36,768,46,[2,[],"moduleName"]],[768,47,768,71,[19,[768,47,768,54,[2,[],"exposed"]],[768,55,768,71,"canonicalRecords"]]]]]]]]]],[769,15,775,13,[[769,15,769,27,"constructors"],[770,17,774,67,[11,[770,20,770,53,[0,[[770,20,770,32,[2,["Dict"],"isEmpty"]],[770,33,770,53,[19,[770,33,770,40,[2,[],"exposed"]],[770,41,770,53,"constructors"]]]]]],[771,21,771,31,[2,["Dict"],"empty"]],[774,21,774,67,[0,[[774,21,774,35,[2,["Dict"],"singleton"]],[774,36,774,46,[2,[],"moduleName"]],[774,47,774,67,[19,[774,47,774,54,[2,[],"exposed"]],[774,55,774,67,"constructors"]]]]]]]]]],[775,15,781,13,[[775,15,775,28,"functionTypes"],[776,17,780,68,[11,[776,20,776,54,[0,[[776,20,776,32,[2,["Dict"],"isEmpty"]],[776,33,776,54,[19,[776,33,776,40,[2,[],"exposed"]],[776,41,776,54,"functionTypes"]]]]]],[777,21,777,31,[2,["Dict"],"empty"]],[780,21,780,68,[0,[[780,21,780,35,[2,["Dict"],"singleton"]],[780,36,780,46,[2,[],"moduleName"]],[780,47,780,68,[19,[780,47,780,54,[2,[],"exposed"]],[780,55,780,68,"functionTypes"]]]]]]]]]]]]]]]]]]]]],[783,12,783,31,[2,["Rule"],"withModuleName"]]]]]]]]],[786,1,821,28,[0,[[1,[786,1,787,3,"{-| Create a `ModuleContext` from a `ProjectContext`.\n-}"]],[1,[788,1,788,85,[[788,1,788,20,"fromProjectToModule"],[788,23,788,85,[6,[788,23,788,33,[1,[788,23,788,33,[[],"RuleConfig"]],[]]],[788,37,788,85,[1,[788,37,788,56,[["Rule"],"ContextCreator"]],[[788,57,788,71,[1,[788,57,788,71,[[],"ProjectContext"]],[]]],[788,72,788,85,[1,[788,72,788,85,[[],"ModuleContext"]],[]]]]]]]]]]],[789,1,821,28,[[789,1,789,20,"fromProjectToModule"],[[789,21,789,27,[11,"config"]]],[790,5,821,28,[1,"|>",0,[790,5,820,34,[1,"|>",0,[790,5,819,31,[1,"|>",0,[790,5,818,40,[1,"|>",0,[790,5,817,42,[1,"|>",0,[790,5,816,10,[0,[[790,5,790,28,[2,["Rule"],"initContextCreator"]],[791,9,816,10,[7,[791,10,815,14,[18,[[[791,11,791,22,[11,"lookupTable"]],[791,23,791,42,[11,"sourceCodeExtractor"]],[791,43,791,53,[11,"moduleName"]],[791,54,791,67,[11,"fileIsIgnored"]],[791,68,791,102,[8,[[791,70,791,86,"moduleDefinition"],[791,88,791,100,"declarations"]]]],[791,103,791,117,[11,"projectContext"]]],[792,13,815,14,[16,[[[793,17,804,37,[1,[793,17,793,84,[8,[[793,19,793,26,"aliases"],[793,28,793,44,"canonicalRecords"],[793,46,793,58,"constructors"],[793,60,793,73,"functionTypes"],[793,75,793,82,"exposed"]]]],[794,21,804,37,[0,[[794,21,794,43,[2,[],"declarationListVisitor"]],[794,44,794,50,[2,[],"config"]],[795,25,803,26,[8,[[795,27,795,50,[[795,27,795,37,"moduleName"],[795,40,795,50,[2,[],"moduleName"]]]],[796,27,797,25,[[796,27,796,38,"lookupTable"],[796,41,796,52,[2,[],"lookupTable"]]]],[797,27,798,25,[[797,27,797,34,"aliases"],[797,37,797,59,[19,[797,37,797,51,[2,[],"projectContext"]],[797,52,797,59,"aliases"]]]]],[798,27,799,25,[[798,27,798,43,"canonicalRecords"],[798,46,798,77,[19,[798,46,798,60,[2,[],"projectContext"]],[798,61,798,77,"canonicalRecords"]]]]],[799,27,800,25,[[799,27,799,39,"constructors"],[799,42,799,69,[19,[799,42,799,56,[2,[],"projectContext"]],[799,57,799,69,"constructors"]]]]],[800,27,801,25,[[800,27,800,40,"functionTypes"],[800,43,800,71,[19,[800,43,800,57,[2,[],"projectContext"]],[800,58,800,71,"functionTypes"]]]]],[801,27,802,25,[[801,27,801,39,"exposingList"],[801,42,801,88,[1,"<|",1,[801,42,801,57,[2,[],"getExposedNames"]],[801,61,801,88,[0,[[801,61,801,71,[2,["Node"],"value"]],[801,72,801,88,[2,[],"moduleDefinition"]]]]]]]]],[802,27,803,25,[[802,27,802,40,"fileIsIgnored"],[802,43,802,56,[2,[],"fileIsIgnored"]]]]]]],[804,25,804,37,[2,[],"declarations"]]]]]]]],[806,13,815,14,[8,[[806,15,806,32,[[806,15,806,22,"aliases"],[806,25,806,32,[2,[],"aliases"]]]],[807,15,808,13,[[807,15,807,31,"canonicalRecords"],[807,34,807,50,[2,[],"canonicalRecords"]]]],[808,15,809,13,[[808,15,808,27,"constructors"],[808,30,808,42,[2,[],"constructors"]]]],[809,15,810,13,[[809,15,809,28,"functionTypes"],[809,31,809,44,[2,[],"functionTypes"]]]],[810,15,811,13,[[810,15,810,22,"exposed"],[810,25,810,32,[2,[],"exposed"]]]],[811,15,812,13,[[811,15,811,28,"fileIsIgnored"],[811,31,811,44,[2,[],"fileIsIgnored"]]]],[812,15,813,13,[[812,15,812,25,"moduleName"],[812,28,812,38,[2,[],"moduleName"]]]],[813,15,814,13,[[813,15,813,26,"lookupTable"],[813,29,813,40,[2,[],"lookupTable"]]]],[814,15,815,13,[[814,15,814,28,"extractSource"],[814,31,814,50,[2,[],"sourceCodeExtractor"]]]]]]]]]]]]]]]]]],[817,12,817,42,[2,["Rule"],"withModuleNameLookupTable"]]]],[818,12,818,40,[2,["Rule"],"withSourceCodeExtractor"]]]],[819,12,819,31,[2,["Rule"],"withModuleName"]]]],[820,12,820,34,[2,["Rule"],"withIsFileIgnored"]]]],[821,12,821,28,[2,["Rule"],"withFullAst"]]]]]]]]],[824,1,836,6,[0,[[1,[824,1,825,3,"{-| Combine `ProjectContext`s by taking the union of known type info.\n-}"]],[1,[826,1,826,73,[[826,1,826,20,"foldProjectContexts"],[826,23,826,73,[6,[826,23,826,37,[1,[826,23,826,37,[[],"ProjectContext"]],[]]],[826,41,826,73,[6,[826,41,826,55,[1,[826,41,826,55,[[],"ProjectContext"]],[]]],[826,59,826,73,[1,[826,59,826,73,[[],"ProjectContext"]],[]]]]]]]]]],[827,1,836,6,[[827,1,827,20,"foldProjectContexts"],[[827,21,827,31,[11,"newContext"]],[827,32,827,43,[11,"prevContext"]]],[828,5,836,6,[8,[[828,7,829,58,[[828,7,828,14,"aliases"],[829,9,829,58,[0,[[829,9,829,19,[2,["Dict"],"union"]],[829,20,829,38,[19,[829,20,829,30,[2,[],"newContext"]],[829,31,829,38,"aliases"]]],[829,39,829,58,[19,[829,39,829,50,[2,[],"prevContext"]],[829,51,829,58,"aliases"]]]]]]]],[830,7,832,5,[[830,7,830,23,"canonicalRecords"],[831,9,831,76,[0,[[831,9,831,19,[2,["Dict"],"union"]],[831,20,831,47,[19,[831,20,831,30,[2,[],"newContext"]],[831,31,831,47,"canonicalRecords"]]],[831,48,831,76,[19,[831,48,831,59,[2,[],"prevContext"]],[831,60,831,76,"canonicalRecords"]]]]]]]],[832,7,834,5,[[832,7,832,19,"constructors"],[833,9,833,68,[0,[[833,9,833,19,[2,["Dict"],"union"]],[833,20,833,43,[19,[833,20,833,30,[2,[],"newContext"]],[833,31,833,43,"constructors"]]],[833,44,833,68,[19,[833,44,833,55,[2,[],"prevContext"]],[833,56,833,68,"constructors"]]]]]]]],[834,7,836,5,[[834,7,834,20,"functionTypes"],[835,9,835,70,[0,[[835,9,835,19,[2,["Dict"],"union"]],[835,20,835,44,[19,[835,20,835,30,[2,[],"newContext"]],[835,31,835,44,"functionTypes"]]],[835,45,835,70,[19,[835,45,835,56,[2,[],"prevContext"]],[835,57,835,70,"functionTypes"]]]]]]]]]]]]]]]],[839,1,855,22,[0,[[1,[839,1,841,3,"{-| Return whether or not subrecords should be considered canonical, for\ncreating the type of a full record.\n-}"]],[1,[842,1,842,65,[[842,1,842,29,"subrecordCanonicityForRecord"],[842,32,842,65,[6,[842,32,842,51,[1,[842,32,842,51,[[],"SubrecordCanonicity"]],[]]],[842,55,842,65,[1,[842,55,842,60,[[],"Maybe"]],[[842,61,842,65,[1,[842,61,842,65,[[],"Bool"]],[]]]]]]]]]]],[843,1,855,22,[[843,1,843,29,"subrecordCanonicityForRecord"],[[843,30,843,48,[11,"subrecordTreatment"]]],[844,5,855,22,[17,[[844,10,844,28,[2,[],"subrecordTreatment"]],[[[845,9,845,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[846,13,846,22,[0,[[846,13,846,17,[2,[],"Just"]],[846,18,846,22,[2,[],"True"]]]]]],[[848,9,848,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[849,13,849,22,[0,[[849,13,849,17,[2,[],"Just"]],[849,18,849,22,[2,[],"True"]]]]]],[[851,9,851,22,[12,[[],"AlwaysUnknown"],[]]],[852,13,852,23,[0,[[852,13,852,17,[2,[],"Just"]],[852,18,852,23,[2,[],"False"]]]]]],[[854,9,854,24,[12,[[],"AlwaysCanonical"],[]]],[855,13,855,22,[0,[[855,13,855,17,[2,[],"Just"]],[855,18,855,22,[2,[],"True"]]]]]]]]]]]]]]],[858,1,874,22,[0,[[1,[858,1,860,3,"{-| Return whether or not subrecords should be considered canonical, for\ncreating the type of a field or argument.\n-}"]],[1,[861,1,861,64,[[861,1,861,28,"subrecordCanonicityForField"],[861,31,861,64,[6,[861,31,861,50,[1,[861,31,861,50,[[],"SubrecordCanonicity"]],[]]],[861,54,861,64,[1,[861,54,861,59,[[],"Maybe"]],[[861,60,861,64,[1,[861,60,861,64,[[],"Bool"]],[]]]]]]]]]]],[862,1,874,22,[[862,1,862,28,"subrecordCanonicityForField"],[[862,29,862,47,[11,"subrecordTreatment"]]],[863,5,874,22,[17,[[863,10,863,28,[2,[],"subrecordTreatment"]],[[[864,9,864,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[865,13,865,22,[0,[[865,13,865,17,[2,[],"Just"]],[865,18,865,22,[2,[],"True"]]]]]],[[867,9,867,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[868,13,868,22,[0,[[868,13,868,17,[2,[],"Just"]],[868,18,868,22,[2,[],"True"]]]]]],[[870,9,870,22,[12,[[],"AlwaysUnknown"],[]]],[871,13,871,20,[2,[],"Nothing"]]],[[873,9,873,24,[12,[[],"AlwaysCanonical"],[]]],[874,13,874,22,[0,[[874,13,874,17,[2,[],"Just"]],[874,18,874,22,[2,[],"True"]]]]]]]]]]]]]]],[877,1,1072,10,[0,[[1,[877,1,878,3,"{-| Visit all dependencies and store type order from them.\n-}"]],[1,[879,1,879,93,[[879,1,879,18,"dependencyVisitor"],[879,21,879,93,[6,[879,21,879,31,[1,[879,21,879,31,[[],"RuleConfig"]],[]]],[879,35,879,93,[6,[879,35,879,49,[1,[879,35,879,49,[[],"ProjectContext"]],[]]],[879,53,879,93,[6,[879,53,879,75,[1,[879,53,879,57,[[],"Dict"]],[[879,58,879,64,[1,[879,58,879,64,[[],"String"]],[]]],[879,65,879,75,[1,[879,65,879,75,[[],"Dependency"]],[]]]]]],[879,79,879,93,[1,[879,79,879,93,[[],"ProjectContext"]],[]]]]]]]]]]]],[880,1,1072,10,[[880,1,880,18,"dependencyVisitor"],[[880,19,880,54,[14,[880,20,880,53,[12,[[],"RuleConfig"],[[880,31,880,53,[8,[[880,33,880,51,"subrecordTreatment"]]]]]]]]]],[881,5,1072,10,[16,[[[882,9,1058,14,[0,[[0],[1,[882,9,882,67,[[882,9,882,13,"step"],[882,16,882,67,[6,[882,16,882,31,[1,[882,16,882,31,[["Elm","Docs"],"Module"]],[]]],[882,35,882,67,[6,[882,35,882,49,[1,[882,35,882,49,[[],"ProjectContext"]],[]]],[882,53,882,67,[1,[882,53,882,67,[[],"ProjectContext"]],[]]]]]]]]]],[883,9,1058,14,[[883,9,883,13,"step"],[[883,14,883,58,[14,[883,15,883,57,[13,[883,15,883,50,[8,[[883,17,883,24,"aliases"],[883,26,883,32,"binops"],[883,34,883,40,"unions"],[883,42,883,48,"values"]]]],[883,54,883,57,"mod"]]]]],[883,59,883,62,[11,"acc"]]],[884,13,1058,14,[16,[[[885,17,929,39,[0,[[0],[1,[885,17,885,173,[[885,17,885,36,"recordFromTypeAlias"],[885,39,885,173,[6,[885,39,885,53,[1,[885,39,885,53,[["Elm","Docs"],"Alias"]],[]]],[885,57,885,173,[3,[[885,59,885,87,[1,[885,59,885,63,[[],"List"]],[[885,64,885,87,[3,[[885,66,885,72,[1,[885,66,885,72,[[],"String"]],[]]],[885,74,885,85,[1,[885,74,885,85,[[],"KnownRecord"]],[]]]]]]]]],[885,89,885,171,[1,[885,89,885,93,[[],"List"]],[[885,94,885,171,[3,[[885,96,885,102,[1,[885,96,885,102,[[],"String"]],[]]],[885,104,885,169,[4,[[885,106,885,135,[[885,106,885,120,"customTypeName"],[885,123,885,135,[1,[885,123,885,128,[[],"Maybe"]],[[885,129,885,135,[1,[885,129,885,135,[[],"String"]],[]]]]]]]],[885,137,885,168,[[885,137,885,142,"type_"],[885,145,885,167,[1,[885,145,885,167,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]]]]]]]],[886,17,929,39,[[886,17,886,36,"recordFromTypeAlias"],[[886,37,886,57,[8,[[886,39,886,43,"name"],[886,45,886,49,"args"],[886,51,886,55,"tipe"]]]]],[887,21,929,39,[17,[[887,26,887,30,[2,[],"tipe"]],[[[888,25,888,55,[12,[["Elm","Type"],"Record"],[[888,41,888,47,[11,"fields"]],[888,48,888,55,[12,[[],"Nothing"],[]]]]]],[889,29,919,30,[6,[[889,31,890,79,[1,"|>",0,[889,31,889,101,[0,[[889,31,889,53,[2,[],"knownRecordFromDocType"]],[889,54,889,72,[2,[],"subrecordTreatment"]],[889,73,889,83,[2,[],"moduleName"]],[889,84,889,101,[6,[[889,86,889,92,[2,[],"fields"]],[889,94,889,99,[2,[],"False"]]]]]]]],[890,36,890,79,[0,[[890,36,890,44,[2,["List"],"map"]],[890,45,890,79,[7,[890,46,890,78,[0,[[890,46,890,60,[2,["Tuple"],"mapFirst"]],[890,61,890,78,[7,[890,62,890,77,[18,[[[890,63,890,64,[11,"s"]]],[890,68,890,77,[1,"++",1,[890,68,890,72,[2,[],"name"]],[890,76,890,77,[2,[],"s"]]]]]]]]]]]]]]]]]]],[891,31,918,32,[9,[[891,33,917,34,[6,[[891,35,891,39,[2,[],"name"]],[892,35,916,36,[8,[[892,37,892,61,[[892,37,892,51,"customTypeName"],[892,54,892,61,[2,[],"Nothing"]]]],[893,37,916,35,[[893,37,893,42,"type_"],[894,41,915,50,[1,"|>",0,[894,41,905,51,[0,[[894,41,894,49,[2,["List"],"map"]],[895,45,904,46,[7,[895,46,903,57,[1,">>",1,[895,46,895,58,[2,["Tuple"],"second"]],[896,52,903,57,[0,[[896,52,896,83,[2,[],"docTypeToTypeWithPositionalVars"]],[896,84,896,94,[2,[],"moduleName"]],[898,53,902,54,[8,[[898,55,898,93,[[898,55,898,86,"constrainedTypeVarsAreRespected"],[898,89,898,93,[2,[],"True"]]]],[901,55,902,53,[[901,55,901,79,"subrecordIsAlsoCanonical"],[901,82,901,128,[0,[[901,82,901,109,[2,[],"subrecordCanonicityForField"]],[901,110,901,128,[2,[],"subrecordTreatment"]]]]]]]]]],[903,53,903,57,[2,[],"args"]]]]]]]]],[905,45,905,51,[2,[],"fields"]]]]],[906,48,915,50,[0,[[906,48,906,82,[2,[],"makeFunctionTypeWithPositionalVars"]],[907,49,915,50,[7,[907,50,914,57,[0,[[907,50,907,81,[2,[],"docTypeToTypeWithPositionalVars"]],[907,82,907,92,[2,[],"moduleName"]],[908,53,912,54,[8,[[908,55,908,93,[[908,55,908,86,"constrainedTypeVarsAreRespected"],[908,89,908,93,[2,[],"True"]]]],[911,55,912,53,[[911,55,911,79,"subrecordIsAlsoCanonical"],[911,82,911,129,[0,[[911,82,911,110,[2,[],"subrecordCanonicityForRecord"]],[911,111,911,129,[2,[],"subrecordTreatment"]]]]]]]]]],[913,53,913,57,[2,[],"args"]],[914,53,914,57,[2,[],"tipe"]]]]]]]]]]]]]]]]]]]]]]]]]]],[[921,25,921,56,[12,[["Elm","Type"],"Record"],[[921,41,921,47,[11,"fields"]],[921,48,921,56,[14,[921,49,921,55,[12,[[],"Just"],[[921,54,921,55,[0]]]]]]]]]],[922,29,926,30,[6,[[922,31,923,79,[1,"|>",0,[922,31,922,100,[0,[[922,31,922,53,[2,[],"knownRecordFromDocType"]],[922,54,922,72,[2,[],"subrecordTreatment"]],[922,73,922,83,[2,[],"moduleName"]],[922,84,922,100,[6,[[922,86,922,92,[2,[],"fields"]],[922,94,922,98,[2,[],"True"]]]]]]]],[923,36,923,79,[0,[[923,36,923,44,[2,["List"],"map"]],[923,45,923,79,[7,[923,46,923,78,[0,[[923,46,923,60,[2,["Tuple"],"mapFirst"]],[923,61,923,78,[7,[923,62,923,77,[18,[[[923,63,923,64,[11,"s"]]],[923,68,923,77,[1,"++",1,[923,68,923,72,[2,[],"name"]],[923,76,923,77,[2,[],"s"]]]]]]]]]]]]]]]]]]],[925,31,925,33,[9,[]]]]]]],[[928,25,928,26,[0]],[929,29,929,39,[6,[[929,31,929,33,[9,[]]],[929,35,929,37,[9,[]]]]]]]]]]]]]]]],[931,17,941,22,[0,[[0],[1,[931,17,931,81,[[931,17,931,26,"makeAlias"],[931,29,931,81,[6,[931,29,931,43,[1,[931,29,931,43,[["Elm","Docs"],"Alias"]],[]]],[931,47,931,81,[3,[[931,49,931,55,[1,[931,49,931,55,[[],"String"]],[]]],[931,57,931,79,[1,[931,57,931,79,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[932,17,941,22,[[932,17,932,26,"makeAlias"],[[932,27,932,47,[8,[[932,29,932,33,"name"],[932,35,932,39,"args"],[932,41,932,45,"tipe"]]]]],[933,21,941,22,[6,[[933,23,933,27,[2,[],"name"]],[934,23,940,29,[0,[[934,23,934,54,[2,[],"docTypeToTypeWithPositionalVars"]],[934,55,934,65,[2,[],"moduleName"]],[936,25,938,26,[8,[[936,27,936,66,[[936,27,936,58,"constrainedTypeVarsAreRespected"],[936,61,936,66,[2,[],"False"]]]],[937,27,938,25,[[937,27,937,51,"subrecordIsAlsoCanonical"],[937,54,937,101,[0,[[937,54,937,82,[2,[],"subrecordCanonicityForRecord"]],[937,83,937,101,[2,[],"subrecordTreatment"]]]]]]]]]],[939,25,939,29,[2,[],"args"]],[940,25,940,29,[2,[],"tipe"]]]]]]]]]]]]],[943,17,961,29,[0,[[0],[1,[943,17,943,174,[[943,17,943,32,"makeConstructor"],[943,35,943,174,[6,[943,35,943,57,[1,[943,35,943,57,[[],"TypeWithPositionalVars"]],[]]],[943,61,943,174,[6,[943,61,943,72,[1,[943,61,943,65,[[],"List"]],[[943,66,943,72,[1,[943,66,943,72,[[],"String"]],[]]]]]],[943,76,943,174,[6,[943,76,943,106,[3,[[943,78,943,84,[1,[943,78,943,84,[[],"String"]],[]]],[943,86,943,104,[1,[943,86,943,90,[[],"List"]],[[943,91,943,104,[1,[943,91,943,104,[["Elm","Type"],"Type"]],[]]]]]]]]],[943,110,943,174,[3,[[943,112,943,118,[1,[943,112,943,118,[[],"String"]],[]]],[943,120,943,142,[1,[943,120,943,142,[[],"TypeWithPositionalVars"]],[]]],[943,144,943,172,[1,[943,144,943,148,[[],"List"]],[[943,149,943,172,[3,[[943,151,943,157,[1,[943,151,943,157,[[],"String"]],[]]],[943,159,943,170,[1,[943,159,943,170,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]]]]],[944,17,961,29,[[944,17,944,32,"makeConstructor"],[[944,33,944,39,[11,"return"]],[944,40,944,48,[11,"typeVars"]],[944,49,944,68,[7,[[944,51,944,55,[11,"name"]],[944,57,944,66,[11,"arguments"]]]]]],[945,21,961,29,[1,"|>",0,[945,21,955,34,[0,[[945,21,945,29,[2,["List"],"map"]],[946,25,954,26,[7,[946,26,953,37,[0,[[946,26,946,57,[2,[],"docTypeToTypeWithPositionalVars"]],[946,58,946,68,[2,[],"moduleName"]],[947,29,952,30,[8,[[947,31,947,69,[[947,31,947,62,"constrainedTypeVarsAreRespected"],[947,65,947,69,[2,[],"True"]]]],[950,31,952,29,[[950,31,950,55,"subrecordIsAlsoCanonical"],[951,33,951,79,[0,[[951,33,951,60,[2,[],"subrecordCanonicityForField"]],[951,61,951,79,[2,[],"subrecordTreatment"]]]]]]]]]],[953,29,953,37,[2,[],"typeVars"]]]]]]],[955,25,955,34,[2,[],"arguments"]]]]],[956,28,961,29,[7,[956,29,960,34,[18,[[[956,30,956,32,[11,"ts"]]],[957,33,960,34,[6,[[957,35,957,39,[2,[],"name"]],[958,35,958,79,[0,[[958,35,958,69,[2,[],"makeFunctionTypeWithPositionalVars"]],[958,70,958,76,[2,[],"return"]],[958,77,958,79,[2,[],"ts"]]]]],[959,35,959,86,[0,[[959,35,959,59,[2,[],"makeCustomTypeSubrecords"]],[959,60,959,78,[2,[],"subrecordTreatment"]],[959,79,959,83,[2,[],"name"]],[959,84,959,86,[2,[],"ts"]]]]]]]]]]]]]]]]]]]],[963,17,984,29,[0,[[0],[1,[963,17,963,177,[[963,17,963,40,"functionsFromCustomType"],[963,43,963,177,[6,[963,43,963,57,[1,[963,43,963,57,[["Elm","Docs"],"Union"]],[]]],[963,61,963,177,[3,[[963,63,963,145,[1,[963,63,963,67,[[],"List"]],[[963,68,963,145,[3,[[963,70,963,76,[1,[963,70,963,76,[[],"String"]],[]]],[963,78,963,143,[4,[[963,80,963,109,[[963,80,963,94,"customTypeName"],[963,97,963,109,[1,[963,97,963,102,[[],"Maybe"]],[[963,103,963,109,[1,[963,103,963,109,[[],"String"]],[]]]]]]]],[963,111,963,142,[[963,111,963,116,"type_"],[963,119,963,141,[1,[963,119,963,141,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[963,147,963,175,[1,[963,147,963,151,[[],"List"]],[[963,152,963,175,[3,[[963,154,963,160,[1,[963,154,963,160,[[],"String"]],[]]],[963,162,963,173,[1,[963,162,963,173,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]],[964,17,984,29,[[964,17,964,40,"functionsFromCustomType"],[[964,41,964,61,[8,[[964,43,964,47,"name"],[964,49,964,53,"args"],[964,55,964,59,"tags"]]]]],[965,21,984,29,[0,[[965,21,965,31,[2,["List"],"foldl"]],[966,25,982,26,[7,[966,26,981,37,[18,[[[966,27,966,28,[11,"t"]],[966,29,966,43,[7,[[966,31,966,35,[11,"fAcc"]],[966,37,966,41,[11,"rAcc"]]]]]],[967,29,981,37,[1,"|>",0,[967,29,976,34,[0,[[967,29,967,44,[2,[],"makeConstructor"]],[968,33,974,34,[7,[968,34,973,62,[1,"|>",0,[968,34,972,47,[1,"|>",0,[968,34,971,87,[1,"|>",0,[968,34,970,56,[1,"|>",0,[968,34,969,70,[1,"|>",0,[968,34,968,65,[0,[[968,34,968,42,[2,["List"],"map"]],[968,43,968,60,[7,[968,44,968,59,[0,[[968,44,968,51,[2,[],"TypeVar"]],[968,52,968,59,[2,[],"Nothing"]]]]]]],[968,61,968,65,[2,[],"args"]]]]],[969,40,969,70,[0,[[969,40,969,49,[2,[],"NamedType"]],[969,50,969,70,[6,[[969,52,969,62,[2,[],"moduleName"]],[969,64,969,68,[2,[],"name"]]]]]]]]]],[970,40,970,56,[2,[],"DereferencedType"]]]],[971,40,971,87,[0,[[971,40,971,54,[2,[],"assignTypeVars"]],[971,55,971,87,[7,[971,56,971,86,[0,[[971,56,971,81,[2,[],"makePositionalArgTypeVars"]],[971,82,971,86,[2,[],"args"]]]]]]]]]]]],[972,40,972,47,[2,[],"getType"]]]],[973,40,973,62,[2,[],"TypeWithPositionalVars"]]]]]],[975,33,975,37,[2,[],"args"]],[976,33,976,34,[2,[],"t"]]]]],[977,36,981,37,[7,[977,37,980,42,[18,[[[977,38,977,54,[7,[[977,40,977,41,[11,"n"]],[977,43,977,48,[11,"type_"]],[977,50,977,52,[11,"rs"]]]]]],[978,41,980,42,[6,[[978,43,978,103,[1,"::",1,[978,43,978,95,[6,[[978,45,978,46,[2,[],"n"]],[978,48,978,93,[8,[[978,50,978,76,[[978,50,978,64,"customTypeName"],[978,67,978,76,[0,[[978,67,978,71,[2,[],"Just"]],[978,72,978,76,[2,[],"name"]]]]]]],[978,78,978,92,[[978,78,978,83,"type_"],[978,86,978,91,[2,[],"type_"]]]]]]]]]],[978,99,978,103,[2,[],"fAcc"]]]],[979,43,979,53,[1,"++",1,[979,43,979,45,[2,[],"rs"]],[979,49,979,53,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[983,25,983,35,[6,[[983,27,983,29,[9,[]]],[983,31,983,33,[9,[]]]]]],[984,25,984,29,[2,[],"tags"]]]]]]]]]],[986,17,993,43,[0,[[0],[1,[986,17,986,71,[[986,17,986,34,"functionFromValue"],[986,37,986,71,[6,[986,37,986,51,[1,[986,37,986,51,[["Elm","Docs"],"Value"]],[]]],[986,55,986,71,[3,[[986,57,986,63,[1,[986,57,986,63,[[],"String"]],[]]],[986,65,986,69,[1,[986,65,986,69,[[],"Type"]],[]]]]]]]]]]],[987,17,993,43,[[987,17,987,34,"functionFromValue"],[[987,35,987,49,[8,[[987,37,987,41,"name"],[987,43,987,47,"tipe"]]]]],[988,21,993,43,[1,"|>",0,[988,21,992,29,[0,[[988,21,988,34,[2,[],"docTypeToType"]],[988,35,988,45,[2,[],"moduleName"]],[989,25,991,26,[8,[[989,27,989,65,[[989,27,989,58,"constrainedTypeVarsAreRespected"],[989,61,989,65,[2,[],"True"]]]],[990,27,991,25,[[990,27,990,51,"subrecordIsAlsoCanonical"],[990,54,990,61,[2,[],"Nothing"]]]]]]],[992,25,992,29,[2,[],"tipe"]]]]],[993,28,993,43,[0,[[993,28,993,38,[2,["Tuple"],"pair"]],[993,39,993,43,[2,[],"name"]]]]]]]]]]]],[995,17,1002,43,[0,[[0],[1,[995,17,995,74,[[995,17,995,37,"functionFromOperator"],[995,40,995,74,[6,[995,40,995,54,[1,[995,40,995,54,[["Elm","Docs"],"Binop"]],[]]],[995,58,995,74,[3,[[995,60,995,66,[1,[995,60,995,66,[[],"String"]],[]]],[995,68,995,72,[1,[995,68,995,72,[[],"Type"]],[]]]]]]]]]]],[996,17,1002,43,[[996,17,996,37,"functionFromOperator"],[[996,38,996,52,[8,[[996,40,996,44,"name"],[996,46,996,50,"tipe"]]]]],[997,21,1002,43,[1,"|>",0,[997,21,1001,29,[0,[[997,21,997,34,[2,[],"docTypeToType"]],[997,35,997,45,[2,[],"moduleName"]],[998,25,1000,26,[8,[[998,27,998,65,[[998,27,998,58,"constrainedTypeVarsAreRespected"],[998,61,998,65,[2,[],"True"]]]],[999,27,1000,25,[[999,27,999,51,"subrecordIsAlsoCanonical"],[999,54,999,61,[2,[],"Nothing"]]]]]]],[1001,25,1001,29,[2,[],"tipe"]]]]],[1002,28,1002,43,[0,[[1002,28,1002,38,[2,["Tuple"],"pair"]],[1002,39,1002,43,[2,[],"name"]]]]]]]]]]]],[1004,17,1006,46,[0,[[0],[1,[1004,17,1004,40,[[1004,17,1004,27,"moduleName"],[1004,30,1004,40,[1,[1004,30,1004,40,[[],"ModuleName"]],[]]]]]],[1005,17,1006,46,[[1005,17,1005,27,"moduleName"],[],[1006,21,1006,46,[0,[[1006,21,1006,33,[2,["String"],"split"]],[1006,34,1006,37,[5,"."]],[1006,38,1006,46,[19,[1006,38,1006,41,[2,[],"mod"]],[1006,42,1006,46,"name"]]]]]]]]]]],[1008,17,1013,61,[0,[[0],[1,[1008,17,1008,86,[[1008,17,1008,27,"newAliases"],[1008,30,1008,86,[1,[1008,30,1008,35,[[],"Maybe"]],[[1008,36,1008,86,[3,[[1008,38,1008,48,[1,[1008,38,1008,48,[[],"ModuleName"]],[]]],[1008,50,1008,84,[1,[1008,50,1008,54,[[],"Dict"]],[[1008,55,1008,61,[1,[1008,55,1008,61,[[],"String"]],[]]],[1008,62,1008,84,[1,[1008,62,1008,84,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]],[1009,17,1013,61,[[1009,17,1009,27,"newAliases"],[],[1010,21,1013,61,[1,"|>",0,[1010,21,1012,51,[1,"|>",0,[1010,21,1011,58,[1,"|>",0,[1010,21,1010,47,[0,[[1010,21,1010,29,[2,["List"],"map"]],[1010,30,1010,39,[2,[],"makeAlias"]],[1010,40,1010,47,[2,[],"aliases"]]]]],[1011,28,1011,58,[0,[[1011,28,1011,36,[2,[],"validate"]],[1011,37,1011,58,[7,[1011,38,1011,57,[1,"<<",0,[1011,38,1011,41,[2,[],"not"]],[1011,45,1011,57,[2,["List"],"isEmpty"]]]]]]]]]]],[1012,28,1012,51,[0,[[1012,28,1012,37,[2,["Maybe"],"map"]],[1012,38,1012,51,[2,["Dict"],"fromList"]]]]]]],[1013,28,1013,61,[0,[[1013,28,1013,37,[2,["Maybe"],"map"]],[1013,38,1013,61,[7,[1013,39,1013,60,[0,[[1013,39,1013,49,[2,["Tuple"],"pair"]],[1013,50,1013,60,[2,[],"moduleName"]]]]]]]]]]]]]]]]],[1015,17,1018,103,[1,[1015,17,1015,59,[7,[[1015,19,1015,34,[11,"newAliasRecords"]],[1015,36,1015,57,[11,"newRecordConstructors"]]]]],[1016,21,1018,103,[1,"|>",0,[1016,21,1017,38,[1,"|>",0,[1016,21,1016,57,[0,[[1016,21,1016,29,[2,["List"],"map"]],[1016,30,1016,49,[2,[],"recordFromTypeAlias"]],[1016,50,1016,57,[2,[],"aliases"]]]]],[1017,28,1017,38,[2,["List"],"unzip"]]]],[1018,28,1018,103,[0,[[1018,28,1018,41,[2,["Tuple"],"mapBoth"]],[1018,42,1018,72,[7,[1018,43,1018,71,[1,"<<",0,[1018,43,1018,56,[2,["Dict"],"fromList"]],[1018,60,1018,71,[2,["List"],"concat"]]]]]],[1018,73,1018,103,[7,[1018,74,1018,102,[1,"<<",0,[1018,74,1018,87,[2,["Dict"],"fromList"]],[1018,91,1018,102,[2,["List"],"concat"]]]]]]]]]]]]],[1020,17,1038,30,[1,[1020,17,1020,48,[7,[[1020,19,1020,34,[11,"newConstructors"]],[1020,36,1020,46,[11,"newRecords"]]]]],[1021,21,1038,30,[1,"|>",0,[1021,21,1027,31,[0,[[1021,21,1021,31,[2,["List"],"foldl"]],[1022,25,1025,26,[7,[1022,26,1024,79,[18,[[[1022,27,1022,28,[11,"u"]],[1022,29,1022,43,[7,[[1022,31,1022,35,[11,"fAcc"]],[1022,37,1022,41,[11,"rAcc"]]]]]],[1023,29,1024,79,[1,"|>",0,[1023,29,1023,54,[0,[[1023,29,1023,52,[2,[],"functionsFromCustomType"]],[1023,53,1023,54,[2,[],"u"]]]]],[1024,36,1024,79,[7,[1024,37,1024,78,[18,[[[1024,38,1024,48,[7,[[1024,40,1024,42,[11,"fs"]],[1024,44,1024,46,[11,"rs"]]]]]],[1024,52,1024,78,[6,[[1024,54,1024,64,[1,"++",1,[1024,54,1024,56,[2,[],"fs"]],[1024,60,1024,64,[2,[],"fAcc"]]]],[1024,66,1024,76,[1,"++",1,[1024,66,1024,68,[2,[],"rs"]],[1024,72,1024,76,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[1026,25,1026,35,[6,[[1026,27,1026,29,[9,[]]],[1026,31,1026,33,[9,[]]]]]],[1027,25,1027,31,[2,[],"unions"]]]]],[1028,28,1038,30,[0,[[1028,28,1028,41,[2,["Tuple"],"mapBoth"]],[1029,29,1033,30,[7,[1029,30,1032,69,[1,">>",1,[1029,30,1029,43,[2,["Dict"],"fromList"]],[1030,36,1032,69,[1,">>",1,[1030,36,1030,68,[0,[[1030,36,1030,46,[2,["Dict"],"union"]],[1030,47,1030,68,[2,[],"newRecordConstructors"]]]]],[1031,36,1032,69,[1,">>",1,[1031,36,1031,66,[0,[[1031,36,1031,44,[2,[],"validate"]],[1031,45,1031,66,[7,[1031,46,1031,65,[1,"<<",0,[1031,46,1031,49,[2,[],"not"]],[1031,53,1031,65,[2,["Dict"],"isEmpty"]]]]]]]]],[1032,36,1032,69,[0,[[1032,36,1032,45,[2,["Maybe"],"map"]],[1032,46,1032,69,[7,[1032,47,1032,68,[0,[[1032,47,1032,57,[2,["Tuple"],"pair"]],[1032,58,1032,68,[2,[],"moduleName"]]]]]]]]]]]]]]]]]],[1034,29,1038,30,[7,[1034,30,1037,69,[1,">>",1,[1034,30,1034,43,[2,["Dict"],"fromList"]],[1035,36,1037,69,[1,">>",1,[1035,36,1035,62,[0,[[1035,36,1035,46,[2,["Dict"],"union"]],[1035,47,1035,62,[2,[],"newAliasRecords"]]]]],[1036,36,1037,69,[1,">>",1,[1036,36,1036,66,[0,[[1036,36,1036,44,[2,[],"validate"]],[1036,45,1036,66,[7,[1036,46,1036,65,[1,"<<",0,[1036,46,1036,49,[2,[],"not"]],[1036,53,1036,65,[2,["Dict"],"isEmpty"]]]]]]]]],[1037,36,1037,69,[0,[[1037,36,1037,45,[2,["Maybe"],"map"]],[1037,46,1037,69,[7,[1037,47,1037,68,[0,[[1037,47,1037,57,[2,["Tuple"],"pair"]],[1037,58,1037,68,[2,[],"moduleName"]]]]]]]]]]]]]]]]]]]]]]]]],[1040,17,1043,41,[0,[[0],[1,[1040,17,1040,48,[[1040,17,1040,29,"newOperators"],[1040,32,1040,48,[1,[1040,32,1040,36,[[],"Dict"]],[[1040,37,1040,43,[1,[1040,37,1040,43,[[],"String"]],[]]],[1040,44,1040,48,[1,[1040,44,1040,48,[[],"Type"]],[]]]]]]]]],[1041,17,1043,41,[[1041,17,1041,29,"newOperators"],[],[1042,21,1043,41,[1,"|>",0,[1042,21,1042,57,[0,[[1042,21,1042,29,[2,["List"],"map"]],[1042,30,1042,50,[2,[],"functionFromOperator"]],[1042,51,1042,57,[2,[],"binops"]]]]],[1043,28,1043,41,[2,["Dict"],"fromList"]]]]]]]]],[1045,17,1051,61,[0,[[0],[1,[1045,17,1045,70,[[1045,17,1045,29,"newFunctions"],[1045,32,1045,70,[1,[1045,32,1045,37,[[],"Maybe"]],[[1045,38,1045,70,[3,[[1045,40,1045,50,[1,[1045,40,1045,50,[[],"ModuleName"]],[]]],[1045,52,1045,68,[1,[1045,52,1045,56,[[],"Dict"]],[[1045,57,1045,63,[1,[1045,57,1045,63,[[],"String"]],[]]],[1045,64,1045,68,[1,[1045,64,1045,68,[[],"Type"]],[]]]]]]]]]]]]]]],[1046,17,1051,61,[[1046,17,1046,29,"newFunctions"],[],[1047,21,1051,61,[1,"|>",0,[1047,21,1050,58,[1,"|>",0,[1047,21,1049,51,[1,"|>",0,[1047,21,1048,41,[1,"|>",0,[1047,21,1047,54,[0,[[1047,21,1047,29,[2,["List"],"map"]],[1047,30,1047,47,[2,[],"functionFromValue"]],[1047,48,1047,54,[2,[],"values"]]]]],[1048,28,1048,41,[2,["Dict"],"fromList"]]]],[1049,28,1049,51,[0,[[1049,28,1049,38,[2,["Dict"],"union"]],[1049,39,1049,51,[2,[],"newOperators"]]]]]]],[1050,28,1050,58,[0,[[1050,28,1050,36,[2,[],"validate"]],[1050,37,1050,58,[7,[1050,38,1050,57,[1,"<<",0,[1050,38,1050,41,[2,[],"not"]],[1050,45,1050,57,[2,["Dict"],"isEmpty"]]]]]]]]]]],[1051,28,1051,61,[0,[[1051,28,1051,37,[2,["Maybe"],"map"]],[1051,38,1051,61,[7,[1051,39,1051,60,[0,[[1051,39,1051,49,[2,["Tuple"],"pair"]],[1051,50,1051,60,[2,[],"moduleName"]]]]]]]]]]]]]]]]]],[1053,13,1058,14,[21,[1053,15,1053,18,"acc"],[[1054,19,1055,17,[[1054,19,1054,26,"aliases"],[1054,29,1054,108,[0,[[1054,29,1054,42,[2,["MaybeX"],"unwrap"]],[1054,43,1054,54,[19,[1054,43,1054,46,[2,[],"acc"]],[1054,47,1054,54,"aliases"]]],[1054,55,1054,97,[7,[1054,56,1054,96,[18,[[[1054,57,1054,65,[7,[[1054,59,1054,60,[11,"k"]],[1054,62,1054,63,[11,"v"]]]]]],[1054,69,1054,96,[0,[[1054,69,1054,80,[2,["Dict"],"insert"]],[1054,81,1054,82,[2,[],"k"]],[1054,83,1054,84,[2,[],"v"]],[1054,85,1054,96,[19,[1054,85,1054,88,[2,[],"acc"]],[1054,89,1054,96,"aliases"]]]]]]]]]]],[1054,98,1054,108,[2,[],"newAliases"]]]]]]],[1055,19,1056,17,[[1055,19,1055,35,"canonicalRecords"],[1055,38,1055,135,[0,[[1055,38,1055,51,[2,["MaybeX"],"unwrap"]],[1055,52,1055,72,[19,[1055,52,1055,55,[2,[],"acc"]],[1055,56,1055,72,"canonicalRecords"]]],[1055,73,1055,124,[7,[1055,74,1055,123,[18,[[[1055,75,1055,83,[7,[[1055,77,1055,78,[11,"k"]],[1055,80,1055,81,[11,"v"]]]]]],[1055,87,1055,123,[0,[[1055,87,1055,98,[2,["Dict"],"insert"]],[1055,99,1055,100,[2,[],"k"]],[1055,101,1055,102,[2,[],"v"]],[1055,103,1055,123,[19,[1055,103,1055,106,[2,[],"acc"]],[1055,107,1055,123,"canonicalRecords"]]]]]]]]]]],[1055,125,1055,135,[2,[],"newRecords"]]]]]]],[1056,19,1057,17,[[1056,19,1056,31,"constructors"],[1056,34,1056,128,[0,[[1056,34,1056,47,[2,["MaybeX"],"unwrap"]],[1056,48,1056,64,[19,[1056,48,1056,51,[2,[],"acc"]],[1056,52,1056,64,"constructors"]]],[1056,65,1056,112,[7,[1056,66,1056,111,[18,[[[1056,67,1056,75,[7,[[1056,69,1056,70,[11,"k"]],[1056,72,1056,73,[11,"v"]]]]]],[1056,79,1056,111,[0,[[1056,79,1056,90,[2,["Dict"],"insert"]],[1056,91,1056,92,[2,[],"k"]],[1056,93,1056,94,[2,[],"v"]],[1056,95,1056,111,[19,[1056,95,1056,98,[2,[],"acc"]],[1056,99,1056,111,"constructors"]]]]]]]]]]],[1056,113,1056,128,[2,[],"newConstructors"]]]]]]],[1057,19,1058,13,[[1057,19,1057,32,"functionTypes"],[1057,35,1057,128,[0,[[1057,35,1057,48,[2,["MaybeX"],"unwrap"]],[1057,49,1057,66,[19,[1057,49,1057,52,[2,[],"acc"]],[1057,53,1057,66,"functionTypes"]]],[1057,67,1057,115,[7,[1057,68,1057,114,[18,[[[1057,69,1057,77,[7,[[1057,71,1057,72,[11,"k"]],[1057,74,1057,75,[11,"v"]]]]]],[1057,81,1057,114,[0,[[1057,81,1057,92,[2,["Dict"],"insert"]],[1057,93,1057,94,[2,[],"k"]],[1057,95,1057,96,[2,[],"v"]],[1057,97,1057,114,[19,[1057,97,1057,100,[2,[],"acc"]],[1057,101,1057,114,"functionTypes"]]]]]]]]]]],[1057,116,1057,128,[2,[],"newFunctions"]]]]]]]]]]]]]]]]]]],[1060,5,1072,10,[0,[[1060,5,1060,15,[2,["Dict"],"foldl"]],[1061,9,1072,10,[7,[1061,10,1071,21,[18,[[[1061,11,1061,12,[0]],[1061,13,1061,16,[11,"dep"]],[1061,17,1061,20,[11,"acc"]]],[1062,13,1071,21,[1,"|>",0,[1062,13,1063,57,[1,"|>",0,[1062,13,1062,35,[0,[[1062,13,1062,31,[2,["Dependency"],"modules"]],[1062,32,1062,35,[2,[],"dep"]]]]],[1063,20,1063,57,[0,[[1063,20,1063,30,[2,["List"],"foldl"]],[1063,31,1063,35,[2,[],"step"]],[1063,36,1063,57,[2,[],"initialProjectContext"]]]]]]],[1064,20,1071,21,[7,[1064,21,1070,26,[18,[[[1064,22,1064,80,[8,[[1064,24,1064,31,"aliases"],[1064,33,1064,49,"canonicalRecords"],[1064,51,1064,63,"constructors"],[1064,65,1064,78,"functionTypes"]]]]],[1065,25,1070,26,[21,[1065,27,1065,30,"acc"],[[1066,31,1067,29,[[1066,31,1066,38,"aliases"],[1066,41,1066,71,[0,[[1066,41,1066,51,[2,["Dict"],"union"]],[1066,52,1066,59,[2,[],"aliases"]],[1066,60,1066,71,[19,[1066,60,1066,63,[2,[],"acc"]],[1066,64,1066,71,"aliases"]]]]]]]],[1067,31,1068,29,[[1067,31,1067,47,"canonicalRecords"],[1067,50,1067,98,[0,[[1067,50,1067,60,[2,["Dict"],"union"]],[1067,61,1067,77,[2,[],"canonicalRecords"]],[1067,78,1067,98,[19,[1067,78,1067,81,[2,[],"acc"]],[1067,82,1067,98,"canonicalRecords"]]]]]]]],[1068,31,1069,29,[[1068,31,1068,43,"constructors"],[1068,46,1068,86,[0,[[1068,46,1068,56,[2,["Dict"],"union"]],[1068,57,1068,69,[2,[],"constructors"]],[1068,70,1068,86,[19,[1068,70,1068,73,[2,[],"acc"]],[1068,74,1068,86,"constructors"]]]]]]]],[1069,31,1070,25,[[1069,31,1069,44,"functionTypes"],[1069,47,1069,89,[0,[[1069,47,1069,57,[2,["Dict"],"union"]],[1069,58,1069,71,[2,[],"functionTypes"]],[1069,72,1069,89,[19,[1069,72,1069,75,[2,[],"acc"]],[1069,76,1069,89,"functionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1075,1,1086,34,[0,[[1,[1075,1,1079,3,"{-| Given the current module name, whether or not a top-level record type (if\n`Just`) and subrecords (if `Just True`) found are in canonical order, and a dict\nof positional type vars, convert an `Elm.Type.Type` to a\n`TypeWithPositionalVars`.\n-}"]],[1,[1080,1,1080,188,[[1080,1,1080,32,"docTypeToTypeWithPositionalVars"],[1080,35,1080,188,[6,[1080,35,1080,45,[1,[1080,35,1080,45,[[],"ModuleName"]],[]]],[1080,49,1080,188,[6,[1080,49,1080,130,[4,[[1080,51,1080,89,[[1080,51,1080,82,"constrainedTypeVarsAreRespected"],[1080,85,1080,89,[1,[1080,85,1080,89,[[],"Bool"]],[]]]]],[1080,91,1080,129,[[1080,91,1080,115,"subrecordIsAlsoCanonical"],[1080,118,1080,128,[1,[1080,118,1080,123,[[],"Maybe"]],[[1080,124,1080,128,[1,[1080,124,1080,128,[[],"Bool"]],[]]]]]]]]]]],[1080,134,1080,188,[6,[1080,134,1080,145,[1,[1080,134,1080,138,[[],"List"]],[[1080,139,1080,145,[1,[1080,139,1080,145,[[],"String"]],[]]]]]],[1080,149,1080,188,[6,[1080,149,1080,162,[1,[1080,149,1080,162,[["Elm","Type"],"Type"]],[]]],[1080,166,1080,188,[1,[1080,166,1080,188,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[1081,1,1086,34,[[1081,1,1081,32,"docTypeToTypeWithPositionalVars"],[[1081,33,1081,43,[11,"moduleName"]],[1081,44,1081,52,[11,"settings"]],[1081,53,1081,61,[11,"typeArgs"]]],[1082,5,1086,34,[1,">>",1,[1082,5,1082,38,[0,[[1082,5,1082,18,[2,[],"docTypeToType"]],[1082,19,1082,29,[2,[],"moduleName"]],[1082,30,1082,38,[2,[],"settings"]]]]],[1083,12,1086,34,[1,">>",1,[1083,12,1083,28,[2,[],"DereferencedType"]],[1084,12,1086,34,[1,">>",1,[1084,12,1084,63,[0,[[1084,12,1084,26,[2,[],"assignTypeVars"]],[1084,27,1084,63,[7,[1084,28,1084,62,[0,[[1084,28,1084,53,[2,[],"makePositionalArgTypeVars"]],[1084,54,1084,62,[2,[],"typeArgs"]]]]]]]]]],[1085,12,1086,34,[1,">>",1,[1085,12,1085,19,[2,[],"getType"]],[1086,12,1086,34,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]]]],[1089,1,1125,13,[0,[[1,[1089,1,1092,3,"{-| Given how to treat subrecords, the current module names, and a list of\nfields/whether the record is generic, generate all `KnownRecord`s from a\n`Elm.Type.Type`.\n-}"]],[1,[1093,1,1093,135,[[1093,1,1093,23,"knownRecordFromDocType"],[1093,26,1093,135,[6,[1093,26,1093,45,[1,[1093,26,1093,45,[[],"SubrecordCanonicity"]],[]]],[1093,49,1093,135,[6,[1093,49,1093,59,[1,[1093,49,1093,59,[[],"ModuleName"]],[]]],[1093,63,1093,135,[6,[1093,63,1093,103,[3,[[1093,65,1093,95,[1,[1093,65,1093,69,[[],"List"]],[[1093,70,1093,95,[3,[[1093,72,1093,78,[1,[1093,72,1093,78,[[],"String"]],[]]],[1093,80,1093,93,[1,[1093,80,1093,93,[["Elm","Type"],"Type"]],[]]]]]]]]],[1093,97,1093,101,[1,[1093,97,1093,101,[[],"Bool"]],[]]]]]],[1093,107,1093,135,[1,[1093,107,1093,111,[[],"List"]],[[1093,112,1093,135,[3,[[1093,114,1093,120,[1,[1093,114,1093,120,[[],"String"]],[]]],[1093,122,1093,133,[1,[1093,122,1093,133,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1094,1,1125,13,[[1094,1,1094,23,"knownRecordFromDocType"],[[1094,24,1094,42,[11,"subrecordTreatment"]],[1094,43,1094,53,[11,"moduleName"]],[1094,54,1094,75,[7,[[1094,56,1094,62,[11,"fields"]],[1094,64,1094,73,[11,"isGeneric"]]]]]],[1095,5,1125,13,[1,"|>",0,[1095,5,1116,13,[1,"|>",0,[1095,5,1110,15,[0,[[1095,5,1095,23,[2,["ListX"],"indexedFoldl"]],[1096,9,1108,10,[7,[1096,10,1107,18,[18,[[[1096,11,1096,12,[11,"i"]],[1096,13,1096,21,[7,[[1096,15,1096,16,[11,"f"]],[1096,18,1096,19,[11,"t"]]]]]],[1097,13,1107,18,[0,[[1097,13,1097,24,[2,["Dict"],"insert"]],[1097,25,1097,26,[2,[],"f"]],[1098,17,1107,18,[6,[[1098,19,1098,20,[2,[],"i"]],[1099,19,1106,22,[0,[[1099,19,1099,32,[2,[],"docTypeToType"]],[1099,33,1099,43,[2,[],"moduleName"]],[1100,21,1105,22,[8,[[1101,23,1101,62,[[1101,23,1101,54,"constrainedTypeVarsAreRespected"],[1101,57,1101,62,[2,[],"False"]]]],[1104,23,1105,21,[[1104,23,1104,47,"subrecordIsAlsoCanonical"],[1104,50,1104,96,[0,[[1104,50,1104,77,[2,[],"subrecordCanonicityForField"]],[1104,78,1104,96,[2,[],"subrecordTreatment"]]]]]]]]]],[1106,21,1106,22,[2,[],"t"]]]]]]]]]]]]]]]],[1109,9,1109,19,[2,["Dict"],"empty"]],[1110,9,1110,15,[2,[],"fields"]]]]],[1111,12,1116,13,[7,[1111,13,1115,18,[18,[[[1111,14,1111,19,[11,"order"]]],[1112,17,1115,18,[8,[[1112,19,1112,32,[[1112,19,1112,24,"order"],[1112,27,1112,32,[2,[],"order"]]]],[1113,19,1114,17,[[1113,19,1113,28,"isGeneric"],[1113,31,1113,40,[2,[],"isGeneric"]]]],[1114,19,1115,17,[[1114,19,1114,30,"isSubrecord"],[1114,33,1114,38,[2,[],"False"]]]]]]]]]]]]]],[1117,12,1125,13,[7,[1117,13,1124,34,[18,[[[1117,14,1117,15,[11,"k"]]],[1118,17,1124,34,[11,[1118,20,1118,57,[1,"==",2,[1118,20,1118,38,[2,[],"subrecordTreatment"]],[1118,42,1118,57,[2,[],"AlwaysCanonical"]]]],[1119,21,1120,127,[1,"::",1,[1119,21,1119,30,[6,[[1119,23,1119,25,[5,""]],[1119,27,1119,28,[2,[],"k"]]]]],[1120,28,1120,127,[0,[[1120,28,1120,42,[2,["List"],"concatMap"]],[1120,43,1120,105,[7,[1120,44,1120,104,[18,[[[1120,45,1120,60,[7,[[1120,47,1120,48,[11,"f"]],[1120,50,1120,58,[7,[[1120,52,1120,53,[0]],[1120,55,1120,56,[11,"t"]]]]]]]]],[1120,64,1120,104,[0,[[1120,64,1120,86,[2,[],"makeSubrecordsFromType"]],[1120,87,1120,91,[2,[],"True"]],[1120,92,1120,102,[7,[1120,93,1120,101,[1,"++",1,[1120,93,1120,96,[5,"."]],[1120,100,1120,101,[2,[],"f"]]]]]],[1120,103,1120,104,[2,[],"t"]]]]]]]]]],[1120,106,1120,127,[7,[1120,107,1120,126,[0,[[1120,107,1120,118,[2,["Dict"],"toList"]],[1120,119,1120,126,[19,[1120,119,1120,120,[2,[],"k"]],[1120,121,1120,126,"order"]]]]]]]]]]]]],[1124,21,1124,34,[9,[[1124,23,1124,32,[6,[[1124,25,1124,27,[5,""]],[1124,29,1124,30,[2,[],"k"]]]]]]]]]]]]]]]]]]]]]],[1128,1,1174,15,[0,[[1,[1128,1,1130,3,"{-| Given whether or not to descend beyond the initial type, a name prefix and a\ntype, generate `KnownRecord`s for records in that type.\n-}"]],[1,[1131,1,1131,80,[[1131,1,1131,23,"makeSubrecordsFromType"],[1131,26,1131,80,[6,[1131,26,1131,30,[1,[1131,26,1131,30,[[],"Bool"]],[]]],[1131,34,1131,80,[6,[1131,34,1131,40,[1,[1131,34,1131,40,[[],"String"]],[]]],[1131,44,1131,80,[6,[1131,44,1131,48,[1,[1131,44,1131,48,[[],"Type"]],[]]],[1131,52,1131,80,[1,[1131,52,1131,56,[[],"List"]],[[1131,57,1131,80,[3,[[1131,59,1131,65,[1,[1131,59,1131,65,[[],"String"]],[]]],[1131,67,1131,78,[1,[1131,67,1131,78,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1132,1,1174,15,[[1132,1,1132,23,"makeSubrecordsFromType"],[[1132,24,1132,31,[11,"recurse"]],[1132,32,1132,42,[11,"namePrefix"]],[1132,43,1132,48,[11,"type_"]]],[1133,5,1174,15,[16,[[[1134,9,1140,26,[0,[[0],[1,[1134,9,1134,66,[[1134,9,1134,11,"go"],[1134,14,1134,66,[6,[1134,14,1134,26,[1,[1134,14,1134,19,[[],"Maybe"]],[[1134,20,1134,26,[1,[1134,20,1134,26,[[],"String"]],[]]]]]],[1134,30,1134,66,[6,[1134,30,1134,34,[1,[1134,30,1134,34,[[],"Type"]],[]]],[1134,38,1134,66,[1,[1134,38,1134,42,[[],"List"]],[[1134,43,1134,66,[3,[[1134,45,1134,51,[1,[1134,45,1134,51,[[],"String"]],[]]],[1134,53,1134,64,[1,[1134,53,1134,64,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]],[1135,9,1140,26,[[1135,9,1135,11,"go"],[[1135,12,1135,13,[11,"s"]]],[1136,13,1140,26,[11,[1136,16,1136,23,[2,[],"recurse"]],[1137,17,1137,110,[0,[[1137,17,1137,39,[2,[],"makeSubrecordsFromType"]],[1137,40,1137,47,[2,[],"recurse"]],[1137,48,1137,110,[7,[1137,49,1137,109,[0,[[1137,49,1137,62,[2,["MaybeX"],"unwrap"]],[1137,63,1137,73,[2,[],"namePrefix"]],[1137,74,1137,107,[7,[1137,75,1137,106,[18,[[[1137,76,1137,82,[11,"subRec"]]],[1137,86,1137,106,[1,"++",1,[1137,86,1137,96,[2,[],"namePrefix"]],[1137,100,1137,106,[2,[],"subRec"]]]]]]]]],[1137,108,1137,109,[2,[],"s"]]]]]]]]]],[1140,17,1140,26,[0,[[1140,17,1140,23,[2,[],"always"]],[1140,24,1140,26,[9,[]]]]]]]]]]]]]],[1142,5,1174,15,[17,[[1142,10,1142,15,[2,[],"type_"]],[[[1143,9,1143,34,[12,[[],"FunctionType"],[[1143,22,1143,34,[8,[[1143,24,1143,28,"from"],[1143,30,1143,32,"to"]]]]]]],[1144,13,1144,45,[1,"++",1,[1144,13,1144,28,[0,[[1144,13,1144,15,[2,[],"go"]],[1144,16,1144,23,[2,[],"Nothing"]],[1144,24,1144,28,[2,[],"from"]]]]],[1144,32,1144,45,[0,[[1144,32,1144,34,[2,[],"go"]],[1144,35,1144,42,[2,[],"Nothing"]],[1144,43,1144,45,[2,[],"to"]]]]]]]],[[1146,9,1146,21,[12,[[],"TupleType"],[[1146,19,1146,21,[11,"ts"]]]]],[1147,13,1147,43,[0,[[1147,13,1147,27,[2,["List"],"concatMap"]],[1147,28,1147,40,[7,[1147,29,1147,39,[0,[[1147,29,1147,31,[2,[],"go"]],[1147,32,1147,39,[2,[],"Nothing"]]]]]]],[1147,41,1147,43,[2,[],"ts"]]]]]],[[1149,9,1149,20,[12,[[],"ListType"],[[1149,18,1149,20,[11,"t_"]]]]],[1150,13,1150,26,[0,[[1150,13,1150,15,[2,[],"go"]],[1150,16,1150,23,[2,[],"Nothing"]],[1150,24,1150,26,[2,[],"t_"]]]]]],[[1152,9,1152,39,[12,[[],"RecordType"],[[1152,20,1152,39,[8,[[1152,22,1152,28,"fields"],[1152,30,1152,37,"generic"]]]]]]],[1153,13,1168,80,[1,"::",1,[1153,13,1167,14,[6,[[1153,15,1153,25,[2,[],"namePrefix"]],[1154,15,1166,16,[8,[[1154,17,1163,31,[[1154,17,1154,22,"order"],[1155,21,1163,31,[0,[[1155,21,1155,39,[2,["ListX"],"indexedFoldl"]],[1156,25,1161,26,[7,[1156,26,1160,34,[18,[[[1156,27,1156,28,[11,"i"]],[1156,29,1156,37,[7,[[1156,31,1156,32,[11,"f"]],[1156,34,1156,35,[11,"t"]]]]]],[1157,29,1160,34,[0,[[1157,29,1157,40,[2,["Dict"],"insert"]],[1157,41,1157,42,[2,[],"f"]],[1158,33,1160,34,[6,[[1158,35,1158,36,[2,[],"i"]],[1159,35,1159,36,[2,[],"t"]]]]]]]]]]]]],[1162,25,1162,35,[2,["Dict"],"empty"]],[1163,25,1163,31,[2,[],"fields"]]]]]]],[1164,17,1165,15,[[1164,17,1164,26,"isGeneric"],[1164,29,1164,47,[1,"/=",2,[1164,29,1164,36,[2,[],"generic"]],[1164,40,1164,47,[2,[],"Nothing"]]]]]],[1165,17,1166,15,[[1165,17,1165,28,"isSubrecord"],[1165,31,1165,35,[2,[],"True"]]]]]]]]]],[1168,20,1168,80,[0,[[1168,20,1168,34,[2,["List"],"concatMap"]],[1168,35,1168,73,[7,[1168,36,1168,72,[18,[[[1168,37,1168,45,[7,[[1168,39,1168,40,[11,"f"]],[1168,42,1168,43,[11,"t"]]]]]],[1168,49,1168,72,[0,[[1168,49,1168,51,[2,[],"go"]],[1168,52,1168,70,[7,[1168,53,1168,69,[1,"<|",1,[1168,53,1168,57,[2,[],"Just"]],[1168,61,1168,69,[1,"++",1,[1168,61,1168,64,[5,"."]],[1168,68,1168,69,[2,[],"f"]]]]]]]],[1168,71,1168,72,[2,[],"t"]]]]]]]]]],[1168,74,1168,80,[2,[],"fields"]]]]]]]],[[1170,9,1170,10,[0]],[1174,13,1174,15,[9,[]]]]]]]]]]]]]]]],[1177,1,1237,58,[0,[[1,[1177,1,1180,3,"{-| Given the current module name and whether or not a top-level record type (if\n`Just`) and subrecords (if `Just True`) found are in canonical order, convert an\n`Elm.Type.Type` to a `Type`.\n-}"]],[1,[1181,1,1181,137,[[1181,1,1181,14,"docTypeToType"],[1181,17,1181,137,[6,[1181,17,1181,27,[1,[1181,17,1181,27,[[],"ModuleName"]],[]]],[1181,31,1181,137,[6,[1181,31,1181,112,[4,[[1181,33,1181,71,[[1181,33,1181,64,"constrainedTypeVarsAreRespected"],[1181,67,1181,71,[1,[1181,67,1181,71,[[],"Bool"]],[]]]]],[1181,73,1181,111,[[1181,73,1181,97,"subrecordIsAlsoCanonical"],[1181,100,1181,110,[1,[1181,100,1181,105,[[],"Maybe"]],[[1181,106,1181,110,[1,[1181,106,1181,110,[[],"Bool"]],[]]]]]]]]]]],[1181,116,1181,137,[6,[1181,116,1181,129,[1,[1181,116,1181,129,[["Elm","Type"],"Type"]],[]]],[1181,133,1181,137,[1,[1181,133,1181,137,[[],"Type"]],[]]]]]]]]]]]],[1182,1,1237,58,[[1182,1,1182,14,"docTypeToType"],[[1182,15,1182,25,[11,"moduleName"]],[1182,26,1182,101,[14,[1182,27,1182,100,[13,[1182,27,1182,88,[8,[[1182,29,1182,60,"constrainedTypeVarsAreRespected"],[1182,62,1182,86,"subrecordIsAlsoCanonical"]]]],[1182,92,1182,100,"settings"]]]]],[1182,102,1182,107,[11,"type_"]]],[1183,5,1237,58,[16,[[[1184,9,1189,21,[0,[[0],[1,[1184,9,1184,35,[[1184,9,1184,11,"go"],[1184,14,1184,35,[6,[1184,14,1184,27,[1,[1184,14,1184,27,[["Elm","Type"],"Type"]],[]]],[1184,31,1184,35,[1,[1184,31,1184,35,[[],"Type"]],[]]]]]]]],[1185,9,1189,21,[[1185,9,1185,11,"go"],[],[1186,13,1189,21,[1,"|>",0,[1186,13,1186,60,[0,[[1186,13,1186,26,[2,["MaybeX"],"filter"]],[1186,27,1186,35,[2,[],"identity"]],[1186,36,1186,60,[2,[],"subrecordIsAlsoCanonical"]]]]],[1187,20,1189,21,[7,[1187,21,1188,111,[18,[[[1187,22,1187,41,[11,"subrecordStillCanon"]]],[1188,25,1188,111,[0,[[1188,25,1188,38,[2,[],"docTypeToType"]],[1188,39,1188,49,[2,[],"moduleName"]],[1188,50,1188,111,[21,[1188,52,1188,60,"settings"],[[1188,63,1188,110,[[1188,63,1188,87,"subrecordIsAlsoCanonical"],[1188,90,1188,109,[2,[],"subrecordStillCanon"]]]]]]]]]]]]]]]]]]]]]],[1191,9,1198,28,[0,[[0],[1,[1191,9,1191,76,[[1191,9,1191,17,"makeList"],[1191,20,1191,76,[6,[1191,20,1191,30,[1,[1191,20,1191,30,[[],"ModuleName"]],[]]],[1191,34,1191,76,[6,[1191,34,1191,40,[1,[1191,34,1191,40,[[],"String"]],[]]],[1191,44,1191,76,[6,[1191,44,1191,62,[1,[1191,44,1191,48,[[],"List"]],[[1191,49,1191,62,[1,[1191,49,1191,62,[["Elm","Type"],"Type"]],[]]]]]],[1191,66,1191,76,[1,[1191,66,1191,71,[[],"Maybe"]],[[1191,72,1191,76,[1,[1191,72,1191,76,[[],"Type"]],[]]]]]]]]]]]]]]],[1192,9,1198,28,[[1192,9,1192,17,"makeList"],[[1192,18,1192,21,[11,"mod"]],[1192,22,1192,26,[11,"name"]],[1192,27,1192,31,[11,"args"]]],[1193,13,1198,28,[17,[[1193,18,1193,37,[6,[[1193,20,1193,23,[2,[],"mod"]],[1193,25,1193,29,[2,[],"name"]],[1193,31,1193,35,[2,[],"args"]]]]],[[[1194,17,1194,53,[7,[[1194,19,1194,29,[10,[[1194,21,1194,27,[3,"List"]]]]],[1194,31,1194,37,[3,"List"]],[1194,39,1194,51,[10,[[1194,41,1194,49,[11,"listType"]]]]]]]],[1195,21,1195,52,[1,"<|",1,[1195,21,1195,25,[2,[],"Just"]],[1195,29,1195,52,[1,"<|",1,[1195,29,1195,37,[2,[],"ListType"]],[1195,41,1195,52,[0,[[1195,41,1195,43,[2,[],"go"]],[1195,44,1195,52,[2,[],"listType"]]]]]]]]]],[[1197,17,1197,18,[0]],[1198,21,1198,28,[2,[],"Nothing"]]]]]]]]]]]]],[1200,5,1237,58,[17,[[1200,10,1200,15,[2,[],"type_"]],[[[1201,9,1201,32,[12,[["Elm","Type"],"Lambda"],[[1201,25,1201,29,[11,"from"]],[1201,30,1201,32,[11,"to"]]]]],[1202,13,1202,56,[0,[[1202,13,1202,25,[2,[],"FunctionType"]],[1202,26,1202,56,[8,[[1202,28,1202,42,[[1202,28,1202,32,"from"],[1202,35,1202,42,[0,[[1202,35,1202,37,[2,[],"go"]],[1202,38,1202,42,[2,[],"from"]]]]]]],[1202,44,1202,55,[[1202,44,1202,46,"to"],[1202,49,1202,54,[0,[[1202,49,1202,51,[2,[],"go"]],[1202,52,1202,54,[2,[],"to"]]]]]]]]]]]]]],[[1204,9,1204,26,[12,[["Elm","Type"],"Tuple"],[[1204,24,1204,26,[11,"ts"]]]]],[1205,13,1205,40,[1,"<|",1,[1205,13,1205,22,[2,[],"TupleType"]],[1205,26,1205,40,[0,[[1205,26,1205,34,[2,["List"],"map"]],[1205,35,1205,37,[2,[],"go"]],[1205,38,1205,40,[2,[],"ts"]]]]]]]],[[1207,9,1207,37,[12,[["Elm","Type"],"Type"],[[1207,23,1207,32,[11,"qualified"]],[1207,33,1207,37,[11,"args"]]]]],[1209,13,1223,21,[1,"|>",0,[1209,13,1219,63,[1,"|>",0,[1209,13,1218,22,[1,"|>",0,[1209,13,1210,36,[1,"|>",0,[1209,13,1209,39,[0,[[1209,13,1209,25,[2,["String"],"split"]],[1209,26,1209,29,[5,"."]],[1209,30,1209,39,[2,[],"qualified"]]]]],[1210,20,1210,36,[2,["ListX"],"unconsLast"]]]],[1211,20,1218,22,[0,[[1211,20,1211,29,[2,["Maybe"],"map"]],[1212,21,1218,22,[7,[1212,22,1217,37,[18,[[[1212,23,1212,31,[7,[[1212,25,1212,26,[11,"n"]],[1212,28,1212,29,[11,"m"]]]]]],[1213,25,1217,37,[11,[1213,28,1213,35,[1,"==",2,[1213,28,1213,29,[2,[],"m"]],[1213,33,1213,35,[9,[]]]]],[1214,29,1214,46,[6,[[1214,31,1214,41,[2,[],"moduleName"]],[1214,43,1214,44,[2,[],"n"]]]]],[1217,29,1217,37,[6,[[1217,31,1217,32,[2,[],"m"]],[1217,34,1217,35,[2,[],"n"]]]]]]]]]]]]]]]]],[1219,20,1219,63,[0,[[1219,20,1219,37,[2,["Maybe"],"withDefault"]],[1219,38,1219,63,[6,[[1219,40,1219,50,[2,[],"moduleName"]],[1219,52,1219,61,[2,[],"qualified"]]]]]]]]]],[1220,20,1223,21,[7,[1220,21,1222,107,[18,[[[1220,22,1220,35,[7,[[1220,24,1220,27,[11,"mod"]],[1220,29,1220,33,[11,"name"]]]]]],[1221,25,1222,107,[1,"|>",0,[1221,25,1221,47,[0,[[1221,25,1221,33,[2,[],"makeList"]],[1221,34,1221,37,[2,[],"mod"]],[1221,38,1221,42,[2,[],"name"]],[1221,43,1221,47,[2,[],"args"]]]]],[1222,32,1222,107,[0,[[1222,32,1222,54,[2,["MaybeX"],"withDefaultLazy"]],[1222,55,1222,107,[7,[1222,56,1222,106,[18,[[[1222,57,1222,59,[1]]],[1222,63,1222,106,[1,"<|",1,[1222,63,1222,86,[0,[[1222,63,1222,72,[2,[],"NamedType"]],[1222,73,1222,86,[6,[[1222,75,1222,78,[2,[],"mod"]],[1222,80,1222,84,[2,[],"name"]]]]]]]],[1222,90,1222,106,[0,[[1222,90,1222,98,[2,["List"],"map"]],[1222,99,1222,101,[2,[],"go"]],[1222,102,1222,106,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]],[[1225,9,1225,39,[12,[["Elm","Type"],"Record"],[[1225,25,1225,31,[11,"fields"]],[1225,32,1225,39,[11,"generic"]]]]],[1226,13,1234,18,[0,[[1226,13,1226,23,[2,[],"RecordType"]],[1227,17,1234,18,[8,[[1227,19,1231,56,[[1227,19,1227,26,"generic"],[1231,21,1231,56,[0,[[1231,21,1231,30,[2,["Maybe"],"map"]],[1231,31,1231,48,[7,[1231,32,1231,47,[0,[[1231,32,1231,39,[2,[],"TypeVar"]],[1231,40,1231,47,[2,[],"Nothing"]]]]]]],[1231,49,1231,56,[2,[],"generic"]]]]]]],[1232,19,1233,17,[[1232,19,1232,28,"canonical"],[1232,31,1232,66,[1,"/=",2,[1232,31,1232,55,[2,[],"subrecordIsAlsoCanonical"]],[1232,59,1232,66,[2,[],"Nothing"]]]]]],[1233,19,1234,17,[[1233,19,1233,25,"fields"],[1233,28,1233,64,[0,[[1233,28,1233,36,[2,["List"],"map"]],[1233,37,1233,57,[7,[1233,38,1233,56,[0,[[1233,38,1233,53,[2,["Tuple"],"mapSecond"]],[1233,54,1233,56,[2,[],"go"]]]]]]],[1233,58,1233,64,[2,[],"fields"]]]]]]]]]]]]]],[[1236,9,1236,23,[12,[["Elm","Type"],"Var"],[[1236,22,1236,23,[11,"s"]]]]],[1237,13,1237,58,[0,[[1237,13,1237,24,[2,[],"makeTypeVar"]],[1237,25,1237,56,[2,[],"constrainedTypeVarsAreRespected"]],[1237,57,1237,58,[2,[],"s"]]]]]]]]]]]]]]]]]],[1240,1,1261,31,[0,[[1,[1240,1,1241,3,"{-| Make a `TypeVar` from a string.\n-}"]],[1,[1242,1,1242,37,[[1242,1,1242,12,"makeTypeVar"],[1242,15,1242,37,[6,[1242,15,1242,19,[1,[1242,15,1242,19,[[],"Bool"]],[]]],[1242,23,1242,37,[6,[1242,23,1242,29,[1,[1242,23,1242,29,[[],"String"]],[]]],[1242,33,1242,37,[1,[1242,33,1242,37,[[],"Type"]],[]]]]]]]]]],[1243,1,1261,31,[[1243,1,1243,12,"makeTypeVar"],[[1243,13,1243,44,[11,"constrainedTypeVarsAreRespected"]],[1243,45,1243,46,[11,"s"]]],[1244,5,1261,31,[1,"|>",0,[1244,5,1260,69,[1,"|>",0,[1244,5,1258,6,[7,[1244,6,1257,16,[11,[1244,9,1244,37,[0,[[1244,9,1244,26,[2,["String"],"startsWith"]],[1244,27,1244,35,[5,"number"]],[1244,36,1244,37,[2,[],"s"]]]]],[1245,9,1245,20,[0,[[1245,9,1245,13,[2,[],"Just"]],[1245,14,1245,20,[2,[],"Number"]]]]],[1247,11,1257,16,[11,[1247,14,1247,46,[0,[[1247,14,1247,31,[2,["String"],"startsWith"]],[1247,32,1247,44,[5,"appendable"]],[1247,45,1247,46,[2,[],"s"]]]]],[1248,9,1248,24,[0,[[1248,9,1248,13,[2,[],"Just"]],[1248,14,1248,24,[2,[],"Appendable"]]]]],[1250,11,1257,16,[11,[1250,14,1250,46,[0,[[1250,14,1250,31,[2,["String"],"startsWith"]],[1250,32,1250,44,[5,"comparable"]],[1250,45,1250,46,[2,[],"s"]]]]],[1251,9,1251,24,[0,[[1251,9,1251,13,[2,[],"Just"]],[1251,14,1251,24,[2,[],"Comparable"]]]]],[1253,11,1257,16,[11,[1253,14,1253,46,[0,[[1253,14,1253,31,[2,["String"],"startsWith"]],[1253,32,1253,44,[5,"compappend"]],[1253,45,1253,46,[2,[],"s"]]]]],[1254,9,1254,24,[0,[[1254,9,1254,13,[2,[],"Just"]],[1254,14,1254,24,[2,[],"CompAppend"]]]]],[1257,9,1257,16,[2,[],"Nothing"]]]]]]]]]]]],[1260,12,1260,69,[0,[[1260,12,1260,25,[2,["MaybeX"],"filter"]],[1260,26,1260,69,[7,[1260,27,1260,68,[1,"<|",1,[1260,27,1260,33,[2,[],"always"]],[1260,37,1260,68,[2,[],"constrainedTypeVarsAreRespected"]]]]]]]]]]],[1261,12,1261,31,[7,[1261,13,1261,30,[18,[[[1261,14,1261,15,[11,"t"]]],[1261,19,1261,30,[0,[[1261,19,1261,26,[2,[],"TypeVar"]],[1261,27,1261,28,[2,[],"t"]],[1261,29,1261,30,[2,[],"s"]]]]]]]]]]]]]]]]],[1264,1,1277,20,[0,[[1,[1264,1,1266,3,"{-| Convert a type annotation into a record definition (and whether or not the\nrecord is generic) if it is one.\n-}"]],[1,[1267,1,1267,72,[[1267,1,1267,14,"annotToFields"],[1267,17,1267,72,[6,[1267,17,1267,36,[1,[1267,17,1267,21,[[],"Node"]],[[1267,22,1267,36,[1,[1267,22,1267,36,[[],"TypeAnnotation"]],[]]]]]],[1267,40,1267,72,[1,[1267,40,1267,45,[[],"Maybe"]],[[1267,46,1267,72,[3,[[1267,48,1267,64,[1,[1267,48,1267,64,[[],"RecordDefinition"]],[]]],[1267,66,1267,70,[1,[1267,66,1267,70,[[],"Bool"]],[]]]]]]]]]]]]]],[1268,1,1277,20,[[1268,1,1268,14,"annotToFields"],[[1268,15,1268,20,[11,"annot"]]],[1269,5,1277,20,[17,[[1269,10,1269,26,[0,[[1269,10,1269,20,[2,["Node"],"value"]],[1269,21,1269,26,[2,[],"annot"]]]]],[[[1270,9,1270,37,[12,[["TypeAnnotation"],"Record"],[[1270,31,1270,37,[11,"fields"]]]]],[1271,13,1271,35,[0,[[1271,13,1271,17,[2,[],"Just"]],[1271,18,1271,35,[6,[[1271,20,1271,26,[2,[],"fields"]],[1271,28,1271,33,[2,[],"False"]]]]]]]]],[[1273,9,1273,31,[12,[[],"GenericRecord"],[[1273,23,1273,24,[0]],[1273,25,1273,31,[11,"fields"]]]]],[1274,13,1274,45,[0,[[1274,13,1274,17,[2,[],"Just"]],[1274,18,1274,45,[6,[[1274,20,1274,37,[0,[[1274,20,1274,30,[2,["Node"],"value"]],[1274,31,1274,37,[2,[],"fields"]]]]],[1274,39,1274,43,[2,[],"True"]]]]]]]]],[[1276,9,1276,10,[0]],[1277,13,1277,20,[2,[],"Nothing"]]]]]]]]]]]],[1280,1,1306,14,[0,[[1,[1280,1,1281,3,"{-| Make subrecords for custom types, if appropriate.\n-}"]],[1,[1282,1,1282,120,[[1282,1,1282,25,"makeCustomTypeSubrecords"],[1282,28,1282,120,[6,[1282,28,1282,47,[1,[1282,28,1282,47,[[],"SubrecordCanonicity"]],[]]],[1282,51,1282,120,[6,[1282,51,1282,57,[1,[1282,51,1282,57,[[],"String"]],[]]],[1282,61,1282,120,[6,[1282,61,1282,88,[1,[1282,61,1282,65,[[],"List"]],[[1282,66,1282,88,[1,[1282,66,1282,88,[[],"TypeWithPositionalVars"]],[]]]]]],[1282,92,1282,120,[1,[1282,92,1282,96,[[],"List"]],[[1282,97,1282,120,[3,[[1282,99,1282,105,[1,[1282,99,1282,105,[[],"String"]],[]]],[1282,107,1282,118,[1,[1282,107,1282,118,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1283,1,1306,14,[[1283,1,1283,25,"makeCustomTypeSubrecords"],[[1283,26,1283,44,[11,"subrecordTreatment"]],[1283,45,1283,46,[11,"n"]],[1283,47,1283,49,[11,"ts"]]],[1284,5,1306,14,[1,"|>",0,[1284,5,1296,6,[7,[1284,6,1295,22,[17,[[1284,11,1284,29,[2,[],"subrecordTreatment"]],[[[1285,9,1285,22,[12,[[],"AlwaysUnknown"],[]]],[1286,13,1286,20,[2,[],"Nothing"]]],[[1288,9,1288,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[1289,13,1289,20,[2,[],"Nothing"]]],[[1291,9,1291,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[1292,13,1292,23,[0,[[1292,13,1292,17,[2,[],"Just"]],[1292,18,1292,23,[2,[],"False"]]]]]],[[1294,9,1294,24,[12,[[],"AlwaysCanonical"],[]]],[1295,13,1295,22,[0,[[1295,13,1295,17,[2,[],"Just"]],[1295,18,1295,22,[2,[],"True"]]]]]]]]]]]],[1297,12,1306,14,[0,[[1297,12,1297,25,[2,["MaybeX"],"unwrap"]],[1297,26,1297,28,[9,[]]],[1298,13,1306,14,[7,[1298,14,1305,35,[18,[[[1298,15,1298,22,[11,"recurse"]]],[1299,17,1305,35,[1,"|>",0,[1299,17,1304,23,[0,[[1299,17,1299,32,[2,["List"],"indexedMap"]],[1300,21,1303,22,[7,[1300,22,1302,96,[18,[[[1300,23,1300,24,[11,"i"]],[1300,25,1300,26,[11,"t"]]],[1301,25,1302,96,[1,"|>",0,[1301,25,1301,52,[0,[[1301,25,1301,50,[2,[],"getTypeWithPositionalVars"]],[1301,51,1301,52,[2,[],"t"]]]]],[1302,32,1302,96,[0,[[1302,32,1302,54,[2,[],"makeSubrecordsFromType"]],[1302,55,1302,62,[2,[],"recurse"]],[1302,63,1302,96,[7,[1302,64,1302,95,[1,"++",1,[1302,64,1302,65,[2,[],"n"]],[1302,69,1302,95,[1,"++",1,[1302,69,1302,75,[5," arg"]],[1302,79,1302,95,[0,[[1302,79,1302,93,[2,["String"],"fromInt"]],[1302,94,1302,95,[2,[],"i"]]]]]]]]]]]]]]]]]]]]],[1304,21,1304,23,[2,[],"ts"]]]]],[1305,24,1305,35,[2,["List"],"concat"]]]]]]]]]]]]]]]]]]],[1309,1,1315,6,[1,[[1,[1309,1,1310,3,"{-| Information on what functions, types/aliases, and fully-exposed types with constructors are exposed by the module.\n-}"]],[1311,12,1311,24,"ExposedNames"],[],[1312,5,1315,6,[4,[[1312,7,1312,29,[[1312,7,1312,16,"functions"],[1312,19,1312,29,[1,[1312,19,1312,22,[[],"Set"]],[[1312,23,1312,29,[1,[1312,23,1312,29,[[],"String"]],[]]]]]]]],[1313,7,1314,5,[[1313,7,1313,12,"types"],[1313,15,1313,25,[1,[1313,15,1313,18,[[],"Set"]],[[1313,19,1313,25,[1,[1313,19,1313,25,[[],"String"]],[]]]]]]]],[1314,7,1315,5,[[1314,7,1314,16,"openTypes"],[1314,19,1314,29,[1,[1314,19,1314,22,[[],"Set"]],[[1314,23,1314,29,[1,[1314,23,1314,29,[[],"String"]],[]]]]]]]]]]]]]],[1318,1,1350,13,[0,[[1,[1318,1,1320,3,"{-| Get a set of all names exposed by the modules or `Nothing` if everything is\nexposed.\n-}"]],[1,[1321,1,1321,47,[[1321,1,1321,16,"getExposedNames"],[1321,19,1321,47,[6,[1321,19,1321,25,[1,[1321,19,1321,25,[[],"Module"]],[]]],[1321,29,1321,47,[1,[1321,29,1321,34,[[],"Maybe"]],[[1321,35,1321,47,[1,[1321,35,1321,47,[[],"ExposedNames"]],[]]]]]]]]]]],[1322,1,1350,13,[[1322,1,1322,16,"getExposedNames"],[],[1323,5,1350,13,[16,[[[1324,9,1337,64,[0,[[0],[1,[1324,9,1324,67,[[1324,9,1324,13,"step"],[1324,16,1324,67,[6,[1324,16,1324,35,[1,[1324,16,1324,20,[[],"Node"]],[[1324,21,1324,35,[1,[1324,21,1324,35,[[],"TopLevelExpose"]],[]]]]]],[1324,39,1324,67,[6,[1324,39,1324,51,[1,[1324,39,1324,51,[[],"ExposedNames"]],[]]],[1324,55,1324,67,[1,[1324,55,1324,67,[[],"ExposedNames"]],[]]]]]]]]]],[1325,9,1337,64,[[1325,9,1325,13,"step"],[[1325,14,1325,15,[11,"e"]],[1325,16,1325,19,[11,"acc"]]],[1326,13,1337,64,[17,[[1326,18,1326,30,[0,[[1326,18,1326,28,[2,["Node"],"value"]],[1326,29,1326,30,[2,[],"e"]]]]],[[[1327,17,1327,36,[12,[[],"FunctionExpose"],[[1327,32,1327,36,[11,"name"]]]]],[1328,21,1328,72,[21,[1328,23,1328,26,"acc"],[[1328,29,1328,71,[[1328,29,1328,38,"functions"],[1328,41,1328,70,[0,[[1328,41,1328,51,[2,["Set"],"insert"]],[1328,52,1328,56,[2,[],"name"]],[1328,57,1328,70,[19,[1328,57,1328,60,[2,[],"acc"]],[1328,61,1328,70,"functions"]]]]]]]]]]]],[[1330,17,1330,36,[12,[[],"TypeExpose"],[[1330,28,1330,36,[8,[[1330,30,1330,34,"name"]]]]]]],[1331,21,1331,72,[21,[1331,23,1331,26,"acc"],[[1331,29,1331,71,[[1331,29,1331,38,"openTypes"],[1331,41,1331,70,[0,[[1331,41,1331,51,[2,["Set"],"insert"]],[1331,52,1331,56,[2,[],"name"]],[1331,57,1331,70,[19,[1331,57,1331,60,[2,[],"acc"]],[1331,61,1331,70,"openTypes"]]]]]]]]]]]],[[1333,17,1333,33,[12,[[],"InfixExpose"],[[1333,29,1333,33,[11,"name"]]]]],[1334,21,1334,72,[21,[1334,23,1334,26,"acc"],[[1334,29,1334,71,[[1334,29,1334,38,"functions"],[1334,41,1334,70,[0,[[1334,41,1334,51,[2,["Set"],"insert"]],[1334,52,1334,56,[2,[],"name"]],[1334,57,1334,70,[19,[1334,57,1334,60,[2,[],"acc"]],[1334,61,1334,70,"functions"]]]]]]]]]]]],[[1336,17,1336,39,[12,[[],"TypeOrAliasExpose"],[[1336,35,1336,39,[11,"name"]]]]],[1337,21,1337,64,[21,[1337,23,1337,26,"acc"],[[1337,29,1337,63,[[1337,29,1337,34,"types"],[1337,37,1337,62,[0,[[1337,37,1337,47,[2,["Set"],"insert"]],[1337,48,1337,52,[2,[],"name"]],[1337,53,1337,62,[19,[1337,53,1337,56,[2,[],"acc"]],[1337,57,1337,62,"types"]]]]]]]]]]]]]]]]]]]]]],[1339,5,1350,13,[1,">>",1,[1339,5,1339,24,[2,["Module"],"exposingList"]],[1340,12,1350,13,[7,[1340,13,1349,36,[18,[[[1340,14,1340,15,[11,"l"]]],[1341,17,1349,36,[17,[[1341,22,1341,23,[2,[],"l"]],[[[1342,21,1342,26,[12,[[],"All"],[[1342,25,1342,26,[0]]]]],[1343,25,1343,32,[2,[],"Nothing"]]],[[1345,21,1345,32,[12,[[],"Explicit"],[[1345,30,1345,32,[11,"es"]]]]],[1346,25,1349,36,[1,"|>",0,[1346,25,1348,31,[0,[[1346,25,1346,35,[2,["List"],"foldl"]],[1346,36,1346,40,[2,[],"step"]],[1347,29,1347,96,[8,[[1347,31,1347,52,[[1347,31,1347,40,"functions"],[1347,43,1347,52,[2,["Set"],"empty"]]]],[1347,54,1347,71,[[1347,54,1347,59,"types"],[1347,62,1347,71,[2,["Set"],"empty"]]]],[1347,73,1347,95,[[1347,73,1347,82,"openTypes"],[1347,85,1347,94,[2,["Set"],"empty"]]]]]]],[1348,29,1348,31,[2,[],"es"]]]]],[1349,32,1349,36,[2,[],"Just"]]]]]]]]]]]]]]]]]]]]]]]],[1353,1,1439,13,[0,[[1,[1353,1,1354,3,"{-| Visit declarations, storing record field orders.\n-}"]],[1,[1355,1,1379,10,[[1355,1,1355,23,"declarationListVisitor"],[1356,5,1379,10,[6,[1356,5,1356,15,[1,[1356,5,1356,15,[[],"RuleConfig"]],[]]],[1358,9,1379,10,[6,[1358,9,1366,10,[4,[[1358,11,1358,34,[[1358,11,1358,21,"moduleName"],[1358,24,1358,34,[1,[1358,24,1358,34,[[],"ModuleName"]],[]]]]],[1359,11,1360,9,[[1359,11,1359,22,"lookupTable"],[1359,25,1359,46,[1,[1359,25,1359,46,[[],"ModuleNameLookupTable"]],[]]]]],[1360,11,1361,9,[[1360,11,1360,18,"aliases"],[1360,21,1360,73,[1,[1360,21,1360,25,[[],"Dict"]],[[1360,26,1360,36,[1,[1360,26,1360,36,[[],"ModuleName"]],[]]],[1360,37,1360,73,[1,[1360,38,1360,42,[[],"Dict"]],[[1360,43,1360,49,[1,[1360,43,1360,49,[[],"String"]],[]]],[1360,50,1360,72,[1,[1360,50,1360,72,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1361,11,1362,9,[[1361,11,1361,27,"canonicalRecords"],[1361,30,1361,71,[1,[1361,30,1361,34,[[],"Dict"]],[[1361,35,1361,45,[1,[1361,35,1361,45,[[],"ModuleName"]],[]]],[1361,46,1361,71,[1,[1361,47,1361,51,[[],"Dict"]],[[1361,52,1361,58,[1,[1361,52,1361,58,[[],"String"]],[]]],[1361,59,1361,70,[1,[1361,59,1361,70,[[],"KnownRecord"]],[]]]]]]]]]]],[1362,11,1363,9,[[1362,11,1362,23,"constructors"],[1362,26,1362,121,[1,[1362,26,1362,30,[[],"Dict"]],[[1362,31,1362,41,[1,[1362,31,1362,41,[[],"ModuleName"]],[]]],[1362,42,1362,121,[1,[1362,43,1362,47,[[],"Dict"]],[[1362,48,1362,54,[1,[1362,48,1362,54,[[],"String"]],[]]],[1362,55,1362,120,[4,[[1362,57,1362,86,[[1362,57,1362,71,"customTypeName"],[1362,74,1362,86,[1,[1362,74,1362,79,[[],"Maybe"]],[[1362,80,1362,86,[1,[1362,80,1362,86,[[],"String"]],[]]]]]]]],[1362,88,1362,119,[[1362,88,1362,93,"type_"],[1362,96,1362,118,[1,[1362,96,1362,118,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1363,11,1364,9,[[1363,11,1363,24,"functionTypes"],[1363,27,1363,61,[1,[1363,27,1363,31,[[],"Dict"]],[[1363,32,1363,42,[1,[1363,32,1363,42,[[],"ModuleName"]],[]]],[1363,43,1363,61,[1,[1363,44,1363,48,[[],"Dict"]],[[1363,49,1363,55,[1,[1363,49,1363,55,[[],"String"]],[]]],[1363,56,1363,60,[1,[1363,56,1363,60,[[],"Type"]],[]]]]]]]]]]],[1364,11,1365,9,[[1364,11,1364,23,"exposingList"],[1364,26,1364,44,[1,[1364,26,1364,31,[[],"Maybe"]],[[1364,32,1364,44,[1,[1364,32,1364,44,[[],"ExposedNames"]],[]]]]]]]],[1365,11,1366,9,[[1365,11,1365,24,"fileIsIgnored"],[1365,27,1365,31,[1,[1365,27,1365,31,[[],"Bool"]],[]]]]]]]],[1367,8,1379,10,[6,[1367,8,1367,31,[1,[1367,8,1367,12,[[],"List"]],[[1367,13,1367,31,[1,[1367,14,1367,18,[[],"Node"]],[[1367,19,1367,30,[1,[1367,19,1367,30,[[],"Declaration"]],[]]]]]]]]],[1369,9,1379,10,[4,[[1369,11,1369,73,[[1369,11,1369,18,"aliases"],[1369,21,1369,73,[1,[1369,21,1369,25,[[],"Dict"]],[[1369,26,1369,36,[1,[1369,26,1369,36,[[],"ModuleName"]],[]]],[1369,37,1369,73,[1,[1369,38,1369,42,[[],"Dict"]],[[1369,43,1369,49,[1,[1369,43,1369,49,[[],"String"]],[]]],[1369,50,1369,72,[1,[1369,50,1369,72,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1370,11,1371,9,[[1370,11,1370,27,"canonicalRecords"],[1370,30,1370,71,[1,[1370,30,1370,34,[[],"Dict"]],[[1370,35,1370,45,[1,[1370,35,1370,45,[[],"ModuleName"]],[]]],[1370,46,1370,71,[1,[1370,47,1370,51,[[],"Dict"]],[[1370,52,1370,58,[1,[1370,52,1370,58,[[],"String"]],[]]],[1370,59,1370,70,[1,[1370,59,1370,70,[[],"KnownRecord"]],[]]]]]]]]]]],[1371,11,1372,9,[[1371,11,1371,23,"constructors"],[1371,26,1371,121,[1,[1371,26,1371,30,[[],"Dict"]],[[1371,31,1371,41,[1,[1371,31,1371,41,[[],"ModuleName"]],[]]],[1371,42,1371,121,[1,[1371,43,1371,47,[[],"Dict"]],[[1371,48,1371,54,[1,[1371,48,1371,54,[[],"String"]],[]]],[1371,55,1371,120,[4,[[1371,57,1371,86,[[1371,57,1371,71,"customTypeName"],[1371,74,1371,86,[1,[1371,74,1371,79,[[],"Maybe"]],[[1371,80,1371,86,[1,[1371,80,1371,86,[[],"String"]],[]]]]]]]],[1371,88,1371,119,[[1371,88,1371,93,"type_"],[1371,96,1371,118,[1,[1371,96,1371,118,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1372,11,1373,9,[[1372,11,1372,24,"functionTypes"],[1372,27,1372,61,[1,[1372,27,1372,31,[[],"Dict"]],[[1372,32,1372,42,[1,[1372,32,1372,42,[[],"ModuleName"]],[]]],[1372,43,1372,61,[1,[1372,44,1372,48,[[],"Dict"]],[[1372,49,1372,55,[1,[1372,49,1372,55,[[],"String"]],[]]],[1372,56,1372,60,[1,[1372,56,1372,60,[[],"Type"]],[]]]]]]]]]]],[1373,11,1379,9,[[1373,11,1373,18,"exposed"],[1374,13,1378,14,[4,[[1374,15,1374,59,[[1374,15,1374,22,"aliases"],[1374,25,1374,59,[1,[1374,25,1374,29,[[],"Dict"]],[[1374,30,1374,36,[1,[1374,30,1374,36,[[],"String"]],[]]],[1374,37,1374,59,[1,[1374,37,1374,59,[[],"TypeWithPositionalVars"]],[]]]]]]]],[1375,15,1376,13,[[1375,15,1375,31,"canonicalRecords"],[1375,34,1375,57,[1,[1375,34,1375,38,[[],"Dict"]],[[1375,39,1375,45,[1,[1375,39,1375,45,[[],"String"]],[]]],[1375,46,1375,57,[1,[1375,46,1375,57,[[],"KnownRecord"]],[]]]]]]]],[1376,15,1377,13,[[1376,15,1376,27,"constructors"],[1376,30,1376,107,[1,[1376,30,1376,34,[[],"Dict"]],[[1376,35,1376,41,[1,[1376,35,1376,41,[[],"String"]],[]]],[1376,42,1376,107,[4,[[1376,44,1376,73,[[1376,44,1376,58,"customTypeName"],[1376,61,1376,73,[1,[1376,61,1376,66,[[],"Maybe"]],[[1376,67,1376,73,[1,[1376,67,1376,73,[[],"String"]],[]]]]]]]],[1376,75,1376,106,[[1376,75,1376,80,"type_"],[1376,83,1376,105,[1,[1376,83,1376,105,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]],[1377,15,1378,13,[[1377,15,1377,28,"functionTypes"],[1377,31,1377,47,[1,[1377,31,1377,35,[[],"Dict"]],[[1377,36,1377,42,[1,[1377,36,1377,42,[[],"String"]],[]]],[1377,43,1377,47,[1,[1377,43,1377,47,[[],"Type"]],[]]]]]]]]]]]]]]]]]]]]]]]]],[1380,1,1439,13,[[1380,1,1380,23,"declarationListVisitor"],[[1380,24,1380,59,[14,[1380,25,1380,58,[12,[[],"RuleConfig"],[[1380,36,1380,58,[8,[[1380,38,1380,56,"subrecordTreatment"]]]]]]]]],[1380,60,1380,67,[11,"context"]],[1380,68,1380,80,[11,"declarations"]]],[1382,5,1439,13,[1,"|>",0,[1382,5,1392,21,[0,[[1382,5,1382,15,[2,["List"],"foldl"]],[1382,16,1382,75,[7,[1382,17,1382,74,[0,[[1382,17,1382,47,[2,[],"foo123456789123456789123456789"]],[1382,48,1382,66,[2,[],"subrecordTreatment"]],[1382,67,1382,74,[2,[],"context"]]]]]]],[1383,9,1391,10,[8,[[1383,11,1383,23,[[1383,11,1383,18,"aliases"],[1383,21,1383,23,[9,[]]]]],[1384,11,1385,9,[[1384,11,1384,27,"canonicalRecords"],[1384,30,1384,32,[9,[]]]]],[1385,11,1386,9,[[1385,11,1385,23,"constructors"],[1385,26,1385,28,[9,[]]]]],[1386,11,1387,9,[[1386,11,1386,24,"functionTypes"],[1386,27,1386,29,[9,[]]]]],[1387,11,1388,9,[[1387,11,1387,25,"exposedAliases"],[1387,28,1387,30,[9,[]]]]],[1388,11,1389,9,[[1388,11,1388,34,"exposedCanonicalRecords"],[1388,37,1388,39,[9,[]]]]],[1389,11,1390,9,[[1389,11,1389,30,"exposedConstructors"],[1389,33,1389,35,[9,[]]]]],[1390,11,1391,9,[[1390,11,1390,31,"exposedFunctionTypes"],[1390,34,1390,36,[9,[]]]]]]]],[1392,9,1392,21,[2,[],"declarations"]]]]],[1393,12,1439,13,[7,[1393,13,1438,22,[18,[[[1393,14,1393,15,[11,"r"]]],[1394,17,1438,22,[11,[1394,20,1394,41,[19,[1394,20,1394,27,[2,[],"context"]],[1394,28,1394,41,"fileIsIgnored"]]],[1395,21,1409,22,[8,[[1395,23,1395,43,[[1395,23,1395,30,"aliases"],[1395,33,1395,43,[2,["Dict"],"empty"]]]],[1396,23,1397,21,[[1396,23,1396,39,"canonicalRecords"],[1396,42,1396,52,[2,["Dict"],"empty"]]]],[1397,23,1398,21,[[1397,23,1397,35,"constructors"],[1397,38,1397,48,[2,["Dict"],"empty"]]]],[1398,23,1399,21,[[1398,23,1398,36,"functionTypes"],[1398,39,1398,49,[2,["Dict"],"empty"]]]],[1399,23,1409,21,[[1399,23,1399,30,"exposed"],[1400,25,1408,26,[8,[[1400,27,1401,59,[[1400,27,1400,34,"aliases"],[1401,29,1401,59,[0,[[1401,29,1401,42,[2,["Dict"],"fromList"]],[1401,43,1401,59,[19,[1401,43,1401,44,[2,[],"r"]],[1401,45,1401,59,"exposedAliases"]]]]]]]],[1402,27,1404,25,[[1402,27,1402,43,"canonicalRecords"],[1403,29,1403,68,[0,[[1403,29,1403,42,[2,["Dict"],"fromList"]],[1403,43,1403,68,[19,[1403,43,1403,44,[2,[],"r"]],[1403,45,1403,68,"exposedCanonicalRecords"]]]]]]]],[1404,27,1406,25,[[1404,27,1404,39,"constructors"],[1405,29,1405,64,[0,[[1405,29,1405,42,[2,["Dict"],"fromList"]],[1405,43,1405,64,[19,[1405,43,1405,44,[2,[],"r"]],[1405,45,1405,64,"exposedConstructors"]]]]]]]],[1406,27,1408,25,[[1406,27,1406,40,"functionTypes"],[1407,29,1407,65,[0,[[1407,29,1407,42,[2,["Dict"],"fromList"]],[1407,43,1407,65,[19,[1407,43,1407,44,[2,[],"r"]],[1407,45,1407,65,"exposedFunctionTypes"]]]]]]]]]]]]]]]],[1412,21,1438,22,[8,[[1412,23,1415,118,[[1412,23,1412,30,"aliases"],[1413,25,1415,118,[1,"|>",0,[1413,25,1414,55,[1,"|>",0,[1413,25,1413,65,[0,[[1413,25,1413,33,[2,[],"validate"]],[1413,34,1413,55,[7,[1413,35,1413,54,[1,"<<",0,[1413,35,1413,38,[2,[],"not"]],[1413,42,1413,54,[2,["List"],"isEmpty"]]]]]],[1413,56,1413,65,[19,[1413,56,1413,57,[2,[],"r"]],[1413,58,1413,65,"aliases"]]]]]],[1414,32,1414,55,[0,[[1414,32,1414,41,[2,["Maybe"],"map"]],[1414,42,1414,55,[2,["Dict"],"fromList"]]]]]]],[1415,32,1415,118,[0,[[1415,32,1415,45,[2,["MaybeX"],"unwrap"]],[1415,46,1415,61,[19,[1415,46,1415,53,[2,[],"context"]],[1415,54,1415,61,"aliases"]]],[1415,62,1415,118,[7,[1415,63,1415,117,[18,[[[1415,64,1415,65,[11,"v"]]],[1415,69,1415,117,[0,[[1415,69,1415,80,[2,["Dict"],"insert"]],[1415,81,1415,99,[19,[1415,81,1415,88,[2,[],"context"]],[1415,89,1415,99,"moduleName"]]],[1415,100,1415,101,[2,[],"v"]],[1415,102,1415,117,[19,[1415,102,1415,109,[2,[],"context"]],[1415,110,1415,117,"aliases"]]]]]]]]]]]]]]]]]],[1416,23,1420,21,[[1416,23,1416,39,"canonicalRecords"],[1417,25,1419,136,[1,"|>",0,[1417,25,1418,55,[1,"|>",0,[1417,25,1417,74,[0,[[1417,25,1417,33,[2,[],"validate"]],[1417,34,1417,55,[7,[1417,35,1417,54,[1,"<<",0,[1417,35,1417,38,[2,[],"not"]],[1417,42,1417,54,[2,["List"],"isEmpty"]]]]]],[1417,56,1417,74,[19,[1417,56,1417,57,[2,[],"r"]],[1417,58,1417,74,"canonicalRecords"]]]]]],[1418,32,1418,55,[0,[[1418,32,1418,41,[2,["Maybe"],"map"]],[1418,42,1418,55,[2,["Dict"],"fromList"]]]]]]],[1419,32,1419,136,[0,[[1419,32,1419,45,[2,["MaybeX"],"unwrap"]],[1419,46,1419,70,[19,[1419,46,1419,53,[2,[],"context"]],[1419,54,1419,70,"canonicalRecords"]]],[1419,71,1419,136,[7,[1419,72,1419,135,[18,[[[1419,73,1419,74,[11,"v"]]],[1419,78,1419,135,[0,[[1419,78,1419,89,[2,["Dict"],"insert"]],[1419,90,1419,108,[19,[1419,90,1419,97,[2,[],"context"]],[1419,98,1419,108,"moduleName"]]],[1419,109,1419,110,[2,[],"v"]],[1419,111,1419,135,[19,[1419,111,1419,118,[2,[],"context"]],[1419,119,1419,135,"canonicalRecords"]]]]]]]]]]]]]]]]]],[1420,23,1424,21,[[1420,23,1420,35,"constructors"],[1421,25,1423,128,[1,"|>",0,[1421,25,1422,55,[1,"|>",0,[1421,25,1421,70,[0,[[1421,25,1421,33,[2,[],"validate"]],[1421,34,1421,55,[7,[1421,35,1421,54,[1,"<<",0,[1421,35,1421,38,[2,[],"not"]],[1421,42,1421,54,[2,["List"],"isEmpty"]]]]]],[1421,56,1421,70,[19,[1421,56,1421,57,[2,[],"r"]],[1421,58,1421,70,"constructors"]]]]]],[1422,32,1422,55,[0,[[1422,32,1422,41,[2,["Maybe"],"map"]],[1422,42,1422,55,[2,["Dict"],"fromList"]]]]]]],[1423,32,1423,128,[0,[[1423,32,1423,45,[2,["MaybeX"],"unwrap"]],[1423,46,1423,66,[19,[1423,46,1423,53,[2,[],"context"]],[1423,54,1423,66,"constructors"]]],[1423,67,1423,128,[7,[1423,68,1423,127,[18,[[[1423,69,1423,70,[11,"v"]]],[1423,74,1423,127,[0,[[1423,74,1423,85,[2,["Dict"],"insert"]],[1423,86,1423,104,[19,[1423,86,1423,93,[2,[],"context"]],[1423,94,1423,104,"moduleName"]]],[1423,105,1423,106,[2,[],"v"]],[1423,107,1423,127,[19,[1423,107,1423,114,[2,[],"context"]],[1423,115,1423,127,"constructors"]]]]]]]]]]]]]]]]]],[1424,23,1428,21,[[1424,23,1424,36,"functionTypes"],[1425,25,1427,130,[1,"|>",0,[1425,25,1426,55,[1,"|>",0,[1425,25,1425,71,[0,[[1425,25,1425,33,[2,[],"validate"]],[1425,34,1425,55,[7,[1425,35,1425,54,[1,"<<",0,[1425,35,1425,38,[2,[],"not"]],[1425,42,1425,54,[2,["List"],"isEmpty"]]]]]],[1425,56,1425,71,[19,[1425,56,1425,57,[2,[],"r"]],[1425,58,1425,71,"functionTypes"]]]]]],[1426,32,1426,55,[0,[[1426,32,1426,41,[2,["Maybe"],"map"]],[1426,42,1426,55,[2,["Dict"],"fromList"]]]]]]],[1427,32,1427,130,[0,[[1427,32,1427,45,[2,["MaybeX"],"unwrap"]],[1427,46,1427,67,[19,[1427,46,1427,53,[2,[],"context"]],[1427,54,1427,67,"functionTypes"]]],[1427,68,1427,130,[7,[1427,69,1427,129,[18,[[[1427,70,1427,71,[11,"v"]]],[1427,75,1427,129,[0,[[1427,75,1427,86,[2,["Dict"],"insert"]],[1427,87,1427,105,[19,[1427,87,1427,94,[2,[],"context"]],[1427,95,1427,105,"moduleName"]]],[1427,106,1427,107,[2,[],"v"]],[1427,108,1427,129,[19,[1427,108,1427,115,[2,[],"context"]],[1427,116,1427,129,"functionTypes"]]]]]]]]]]]]]]]]]],[1428,23,1438,21,[[1428,23,1428,30,"exposed"],[1429,25,1437,26,[8,[[1429,27,1430,59,[[1429,27,1429,34,"aliases"],[1430,29,1430,59,[0,[[1430,29,1430,42,[2,["Dict"],"fromList"]],[1430,43,1430,59,[19,[1430,43,1430,44,[2,[],"r"]],[1430,45,1430,59,"exposedAliases"]]]]]]]],[1431,27,1433,25,[[1431,27,1431,43,"canonicalRecords"],[1432,29,1432,68,[0,[[1432,29,1432,42,[2,["Dict"],"fromList"]],[1432,43,1432,68,[19,[1432,43,1432,44,[2,[],"r"]],[1432,45,1432,68,"exposedCanonicalRecords"]]]]]]]],[1433,27,1435,25,[[1433,27,1433,39,"constructors"],[1434,29,1434,64,[0,[[1434,29,1434,42,[2,["Dict"],"fromList"]],[1434,43,1434,64,[19,[1434,43,1434,44,[2,[],"r"]],[1434,45,1434,64,"exposedConstructors"]]]]]]]],[1435,27,1437,25,[[1435,27,1435,40,"functionTypes"],[1436,29,1436,65,[0,[[1436,29,1436,42,[2,["Dict"],"fromList"]],[1436,43,1436,65,[19,[1436,43,1436,44,[2,[],"r"]],[1436,45,1436,65,"exposedFunctionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1442,1,1670,16,[0,[[1,[1442,1,1444,3,"{-| Given a top-level declaration, accumulate information from it for storing in\nmodule context, determining what to expose or not.\n-}"]],[1,[1445,1,1474,10,[[1445,1,1445,31,"foo123456789123456789123456789"],[1446,5,1474,10,[6,[1446,5,1446,24,[1,[1446,5,1446,24,[[],"SubrecordCanonicity"]],[]]],[1448,9,1474,10,[6,[1448,9,1453,10,[5,[1448,11,1448,18,"context"],[1449,14,1453,9,[[1449,15,1450,13,[[1449,15,1449,25,"moduleName"],[1449,28,1449,38,[1,[1449,28,1449,38,[[],"ModuleName"]],[]]]]],[1450,15,1451,13,[[1450,15,1450,26,"lookupTable"],[1450,29,1450,50,[1,[1450,29,1450,50,[[],"ModuleNameLookupTable"]],[]]]]],[1451,15,1452,13,[[1451,15,1451,27,"exposingList"],[1451,30,1451,48,[1,[1451,30,1451,35,[[],"Maybe"]],[[1451,36,1451,48,[1,[1451,36,1451,48,[[],"ExposedNames"]],[]]]]]]]],[1452,15,1453,9,[[1452,15,1452,28,"fileIsIgnored"],[1452,31,1452,35,[1,[1452,31,1452,35,[[],"Bool"]],[]]]]]]]]],[1454,8,1474,10,[6,[1454,8,1454,24,[1,[1454,8,1454,12,[[],"Node"]],[[1454,13,1454,24,[1,[1454,13,1454,24,[[],"Declaration"]],[]]]]]],[1456,9,1474,10,[6,[1456,9,1464,10,[4,[[1456,11,1456,60,[[1456,11,1456,18,"aliases"],[1456,21,1456,60,[1,[1456,21,1456,25,[[],"List"]],[[1456,26,1456,60,[3,[[1456,28,1456,34,[1,[1456,28,1456,34,[[],"String"]],[]]],[1456,36,1456,58,[1,[1456,36,1456,58,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1457,11,1458,9,[[1457,11,1457,27,"canonicalRecords"],[1457,30,1457,58,[1,[1457,30,1457,34,[[],"List"]],[[1457,35,1457,58,[3,[[1457,37,1457,43,[1,[1457,37,1457,43,[[],"String"]],[]]],[1457,45,1457,56,[1,[1457,45,1457,56,[[],"KnownRecord"]],[]]]]]]]]]]],[1458,11,1459,9,[[1458,11,1458,23,"constructors"],[1458,26,1458,108,[1,[1458,26,1458,30,[[],"List"]],[[1458,31,1458,108,[3,[[1458,33,1458,39,[1,[1458,33,1458,39,[[],"String"]],[]]],[1458,41,1458,106,[4,[[1458,43,1458,72,[[1458,43,1458,57,"customTypeName"],[1458,60,1458,72,[1,[1458,60,1458,65,[[],"Maybe"]],[[1458,66,1458,72,[1,[1458,66,1458,72,[[],"String"]],[]]]]]]]],[1458,74,1458,105,[[1458,74,1458,79,"type_"],[1458,82,1458,104,[1,[1458,82,1458,104,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1459,11,1460,9,[[1459,11,1459,24,"functionTypes"],[1459,27,1459,48,[1,[1459,27,1459,31,[[],"List"]],[[1459,32,1459,48,[3,[[1459,34,1459,40,[1,[1459,34,1459,40,[[],"String"]],[]]],[1459,42,1459,46,[1,[1459,42,1459,46,[[],"Type"]],[]]]]]]]]]]],[1460,11,1461,9,[[1460,11,1460,25,"exposedAliases"],[1460,28,1460,67,[1,[1460,28,1460,32,[[],"List"]],[[1460,33,1460,67,[3,[[1460,35,1460,41,[1,[1460,35,1460,41,[[],"String"]],[]]],[1460,43,1460,65,[1,[1460,43,1460,65,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1461,11,1462,9,[[1461,11,1461,34,"exposedCanonicalRecords"],[1461,37,1461,65,[1,[1461,37,1461,41,[[],"List"]],[[1461,42,1461,65,[3,[[1461,44,1461,50,[1,[1461,44,1461,50,[[],"String"]],[]]],[1461,52,1461,63,[1,[1461,52,1461,63,[[],"KnownRecord"]],[]]]]]]]]]]],[1462,11,1463,9,[[1462,11,1462,30,"exposedConstructors"],[1462,33,1462,115,[1,[1462,33,1462,37,[[],"List"]],[[1462,38,1462,115,[3,[[1462,40,1462,46,[1,[1462,40,1462,46,[[],"String"]],[]]],[1462,48,1462,113,[4,[[1462,50,1462,79,[[1462,50,1462,64,"customTypeName"],[1462,67,1462,79,[1,[1462,67,1462,72,[[],"Maybe"]],[[1462,73,1462,79,[1,[1462,73,1462,79,[[],"String"]],[]]]]]]]],[1462,81,1462,112,[[1462,81,1462,86,"type_"],[1462,89,1462,111,[1,[1462,89,1462,111,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1463,11,1464,9,[[1463,11,1463,31,"exposedFunctionTypes"],[1463,34,1463,55,[1,[1463,34,1463,38,[[],"List"]],[[1463,39,1463,55,[3,[[1463,41,1463,47,[1,[1463,41,1463,47,[[],"String"]],[]]],[1463,49,1463,53,[1,[1463,49,1463,53,[[],"Type"]],[]]]]]]]]]]]]]],[1466,9,1474,10,[4,[[1466,11,1466,60,[[1466,11,1466,18,"aliases"],[1466,21,1466,60,[1,[1466,21,1466,25,[[],"List"]],[[1466,26,1466,60,[3,[[1466,28,1466,34,[1,[1466,28,1466,34,[[],"String"]],[]]],[1466,36,1466,58,[1,[1466,36,1466,58,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1467,11,1468,9,[[1467,11,1467,27,"canonicalRecords"],[1467,30,1467,58,[1,[1467,30,1467,34,[[],"List"]],[[1467,35,1467,58,[3,[[1467,37,1467,43,[1,[1467,37,1467,43,[[],"String"]],[]]],[1467,45,1467,56,[1,[1467,45,1467,56,[[],"KnownRecord"]],[]]]]]]]]]]],[1468,11,1469,9,[[1468,11,1468,23,"constructors"],[1468,26,1468,108,[1,[1468,26,1468,30,[[],"List"]],[[1468,31,1468,108,[3,[[1468,33,1468,39,[1,[1468,33,1468,39,[[],"String"]],[]]],[1468,41,1468,106,[4,[[1468,43,1468,72,[[1468,43,1468,57,"customTypeName"],[1468,60,1468,72,[1,[1468,60,1468,65,[[],"Maybe"]],[[1468,66,1468,72,[1,[1468,66,1468,72,[[],"String"]],[]]]]]]]],[1468,74,1468,105,[[1468,74,1468,79,"type_"],[1468,82,1468,104,[1,[1468,82,1468,104,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1469,11,1470,9,[[1469,11,1469,24,"functionTypes"],[1469,27,1469,48,[1,[1469,27,1469,31,[[],"List"]],[[1469,32,1469,48,[3,[[1469,34,1469,40,[1,[1469,34,1469,40,[[],"String"]],[]]],[1469,42,1469,46,[1,[1469,42,1469,46,[[],"Type"]],[]]]]]]]]]]],[1470,11,1471,9,[[1470,11,1470,25,"exposedAliases"],[1470,28,1470,67,[1,[1470,28,1470,32,[[],"List"]],[[1470,33,1470,67,[3,[[1470,35,1470,41,[1,[1470,35,1470,41,[[],"String"]],[]]],[1470,43,1470,65,[1,[1470,43,1470,65,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1471,11,1472,9,[[1471,11,1471,34,"exposedCanonicalRecords"],[1471,37,1471,65,[1,[1471,37,1471,41,[[],"List"]],[[1471,42,1471,65,[3,[[1471,44,1471,50,[1,[1471,44,1471,50,[[],"String"]],[]]],[1471,52,1471,63,[1,[1471,52,1471,63,[[],"KnownRecord"]],[]]]]]]]]]]],[1472,11,1473,9,[[1472,11,1472,30,"exposedConstructors"],[1472,33,1472,115,[1,[1472,33,1472,37,[[],"List"]],[[1472,38,1472,115,[3,[[1472,40,1472,46,[1,[1472,40,1472,46,[[],"String"]],[]]],[1472,48,1472,113,[4,[[1472,50,1472,79,[[1472,50,1472,64,"customTypeName"],[1472,67,1472,79,[1,[1472,67,1472,72,[[],"Maybe"]],[[1472,73,1472,79,[1,[1472,73,1472,79,[[],"String"]],[]]]]]]]],[1472,81,1472,112,[[1472,81,1472,86,"type_"],[1472,89,1472,111,[1,[1472,89,1472,111,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1473,11,1474,9,[[1473,11,1473,31,"exposedFunctionTypes"],[1473,34,1473,55,[1,[1473,34,1473,38,[[],"List"]],[[1473,39,1473,55,[3,[[1473,41,1473,47,[1,[1473,41,1473,47,[[],"String"]],[]]],[1473,49,1473,53,[1,[1473,49,1473,53,[[],"Type"]],[]]]]]]]]]]]]]]]]]]]]]]]]],[1475,1,1670,16,[[1475,1,1475,31,"foo123456789123456789123456789"],[[1475,32,1475,50,[11,"subrecordTreatment"]],[1475,51,1475,58,[11,"context"]],[1475,59,1475,63,[11,"node"]],[1475,64,1475,67,[11,"acc"]]],[1476,5,1670,16,[16,[[[1477,9,1497,21,[0,[[0],[1,[1477,9,1477,172,[[1477,9,1477,37,"makeConstructorAndSubrecords"],[1477,40,1477,172,[6,[1477,40,1477,62,[1,[1477,40,1477,62,[[],"TypeWithPositionalVars"]],[]]],[1477,66,1477,172,[6,[1477,66,1477,84,[1,[1477,66,1477,70,[[],"List"]],[[1477,71,1477,84,[1,[1477,72,1477,76,[[],"Node"]],[[1477,77,1477,83,[1,[1477,77,1477,83,[[],"String"]],[]]]]]]]]],[1477,88,1477,172,[6,[1477,88,1477,104,[1,[1477,88,1477,104,[[],"ValueConstructor"]],[]]],[1477,108,1477,172,[3,[[1477,110,1477,116,[1,[1477,110,1477,116,[[],"String"]],[]]],[1477,118,1477,140,[1,[1477,118,1477,140,[[],"TypeWithPositionalVars"]],[]]],[1477,142,1477,170,[1,[1477,142,1477,146,[[],"List"]],[[1477,147,1477,170,[3,[[1477,149,1477,155,[1,[1477,149,1477,155,[[],"String"]],[]]],[1477,157,1477,168,[1,[1477,157,1477,168,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]]]]],[1478,9,1497,21,[[1478,9,1478,37,"makeConstructorAndSubrecords"],[[1478,38,1478,44,[11,"return"]],[1478,45,1478,53,[11,"typeVars"]],[1478,54,1478,73,[8,[[1478,56,1478,60,"name"],[1478,62,1478,71,"arguments"]]]]],[1479,13,1497,21,[1,"|>",0,[1479,13,1486,26,[0,[[1479,13,1479,21,[2,["List"],"map"]],[1480,17,1485,18,[7,[1480,18,1484,51,[0,[[1480,18,1480,51,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1480,52,1480,59,[2,[],"context"]],[1481,21,1483,22,[8,[[1481,23,1481,61,[[1481,23,1481,54,"constrainedTypeVarsAreRespected"],[1481,57,1481,61,[2,[],"True"]]]],[1482,23,1483,21,[[1482,23,1482,47,"subrecordIsAlsoCanonical"],[1482,50,1482,96,[0,[[1482,50,1482,77,[2,[],"subrecordCanonicityForField"]],[1482,78,1482,96,[2,[],"subrecordTreatment"]]]]]]]]]],[1484,21,1484,51,[7,[1484,22,1484,50,[0,[[1484,22,1484,30,[2,["List"],"map"]],[1484,31,1484,41,[2,["Node"],"value"]],[1484,42,1484,50,[2,[],"typeVars"]]]]]]]]]]]],[1486,17,1486,26,[2,[],"arguments"]]]]],[1487,20,1497,21,[7,[1487,21,1496,26,[18,[[[1487,22,1487,24,[11,"ts"]]],[1488,25,1496,26,[16,[[[1489,29,1491,48,[0,[[0],[1,[1489,29,1489,39,[[1489,29,1489,30,"n"],[1489,33,1489,39,[1,[1489,33,1489,39,[[],"String"]],[]]]]]],[1490,29,1491,48,[[1490,29,1490,30,"n"],[],[1491,33,1491,48,[0,[[1491,33,1491,43,[2,["Node"],"value"]],[1491,44,1491,48,[2,[],"name"]]]]]]]]]]],[1493,25,1496,26,[6,[[1493,27,1493,28,[2,[],"n"]],[1494,27,1494,71,[0,[[1494,27,1494,61,[2,[],"makeFunctionTypeWithPositionalVars"]],[1494,62,1494,68,[2,[],"return"]],[1494,69,1494,71,[2,[],"ts"]]]]],[1495,27,1495,75,[0,[[1495,27,1495,51,[2,[],"makeCustomTypeSubrecords"]],[1495,52,1495,70,[2,[],"subrecordTreatment"]],[1495,71,1495,72,[2,[],"n"]],[1495,73,1495,75,[2,[],"ts"]]]]]]]]]]]]]]]]]]]]]]],[1499,9,1519,39,[0,[[0],[1,[1499,9,1499,113,[[1499,9,1499,22,"skipIfIgnored"],[1499,25,1499,113,[6,[1499,25,1499,47,[6,[1499,26,1499,38,[1,[1499,26,1499,38,[[],"ExposedNames"]],[]]],[1499,42,1499,46,[1,[1499,42,1499,46,[[],"Bool"]],[]]]]],[1499,51,1499,113,[6,[1499,51,1499,52,[0,"r"]],[1499,56,1499,113,[6,[1499,56,1499,68,[6,[1499,57,1499,59,[2]],[1499,63,1499,67,[0,"info"]]]],[1499,72,1499,113,[6,[1499,72,1499,88,[6,[1499,73,1499,77,[0,"info"]],[1499,81,1499,87,[6,[1499,81,1499,82,[0,"r"]],[1499,86,1499,87,[0,"r"]]]]]],[1499,92,1499,113,[6,[1499,92,1499,108,[6,[1499,93,1499,97,[0,"info"]],[1499,101,1499,107,[6,[1499,101,1499,102,[0,"r"]],[1499,106,1499,107,[0,"r"]]]]]],[1499,112,1499,113,[0,"r"]]]]]]]]]]]]]]],[1500,9,1519,39,[[1500,9,1500,22,"skipIfIgnored"],[[1500,23,1500,37,[11,"checkIfExposed"]],[1500,38,1500,42,[11,"acc_"]],[1500,43,1500,51,[11,"makeInfo"]],[1500,52,1500,60,[11,"addLocal"]],[1500,61,1500,71,[11,"addExposed"]]],[1501,13,1519,39,[16,[[[1502,17,1504,75,[0,[[0],[1,[1502,17,1502,33,[[1502,17,1502,26,"isExposed"],[1502,29,1502,33,[1,[1502,29,1502,33,[[],"Bool"]],[]]]]]],[1503,17,1504,75,[[1503,17,1503,26,"isExposed"],[],[1504,21,1504,75,[0,[[1504,21,1504,34,[2,["MaybeX"],"unwrap"]],[1504,35,1504,39,[2,[],"True"]],[1504,40,1504,54,[2,[],"checkIfExposed"]],[1504,55,1504,75,[19,[1504,55,1504,62,[2,[],"context"]],[1504,63,1504,75,"exposingList"]]]]]]]]]]]],[1506,13,1519,39,[11,[1506,16,1506,54,[1,"&&",1,[1506,16,1506,37,[19,[1506,16,1506,23,[2,[],"context"]],[1506,24,1506,37,"fileIsIgnored"]]],[1506,41,1506,54,[0,[[1506,41,1506,44,[2,[],"not"]],[1506,45,1506,54,[2,[],"isExposed"]]]]]]],[1507,17,1507,21,[2,[],"acc_"]],[1510,17,1519,39,[16,[[[1511,21,1513,36,[0,[[0],[1,[1511,21,1511,32,[[1511,21,1511,25,"info"],[1511,28,1511,32,[0,"info"]]]]],[1512,21,1513,36,[[1512,21,1512,25,"info"],[],[1513,25,1513,36,[0,[[1513,25,1513,33,[2,[],"makeInfo"]],[1513,34,1513,36,[10]]]]]]]]]]],[1515,17,1519,39,[11,[1515,20,1515,29,[2,[],"isExposed"]],[1516,21,1516,58,[1,"<|",1,[1516,21,1516,36,[0,[[1516,21,1516,31,[2,[],"addExposed"]],[1516,32,1516,36,[2,[],"info"]]]]],[1516,40,1516,58,[0,[[1516,40,1516,48,[2,[],"addLocal"]],[1516,49,1516,53,[2,[],"info"]],[1516,54,1516,58,[2,[],"acc_"]]]]]]],[1519,21,1519,39,[0,[[1519,21,1519,29,[2,[],"addLocal"]],[1519,30,1519,34,[2,[],"info"]],[1519,35,1519,39,[2,[],"acc_"]]]]]]]]]]]]]]]]]]]]],[1521,5,1670,16,[17,[[1521,10,1521,25,[0,[[1521,10,1521,20,[2,["Node"],"value"]],[1521,21,1521,25,[2,[],"node"]]]]],[[[1522,9,1522,42,[12,[[],"FunctionDeclaration"],[[1522,29,1522,42,[8,[[1522,31,1522,40,"signature"]]]]]]],[1523,13,1537,22,[1,"|>",0,[1523,13,1523,43,[0,[[1523,13,1523,22,[2,["Maybe"],"map"]],[1523,23,1523,33,[2,["Node"],"value"]],[1523,34,1523,43,[2,[],"signature"]]]]],[1524,20,1537,22,[0,[[1524,20,1524,33,[2,["MaybeX"],"unwrap"]],[1524,34,1524,37,[2,[],"acc"]],[1525,21,1537,22,[7,[1525,22,1536,111,[18,[[[1525,23,1525,47,[8,[[1525,25,1525,29,"name"],[1525,31,1525,45,"typeAnnotation"]]]]],[1526,25,1536,111,[16,[[[1527,29,1529,48,[0,[[0],[1,[1527,29,1527,39,[[1527,29,1527,30,"n"],[1527,33,1527,39,[1,[1527,33,1527,39,[[],"String"]],[]]]]]],[1528,29,1529,48,[[1528,29,1528,30,"n"],[],[1529,33,1529,48,[0,[[1529,33,1529,43,[2,["Node"],"value"]],[1529,44,1529,48,[2,[],"name"]]]]]]]]]]],[1531,25,1536,111,[0,[[1531,25,1531,38,[2,[],"skipIfIgnored"]],[1531,39,1531,67,[7,[1531,40,1531,66,[1,"<<",0,[1531,40,1531,52,[0,[[1531,40,1531,50,[2,["Set"],"member"]],[1531,51,1531,52,[2,[],"n"]]]]],[1531,56,1531,66,[20,".functions"]]]]]],[1532,29,1532,32,[2,[],"acc"]],[1534,29,1534,95,[7,[1534,30,1534,94,[18,[[[1534,31,1534,33,[1]]],[1534,37,1534,94,[6,[[1534,39,1534,40,[2,[],"n"]],[1534,42,1534,92,[0,[[1534,42,1534,69,[2,[],"typeAnnotToNoncanonicalType"]],[1534,70,1534,77,[2,[],"context"]],[1534,78,1534,92,[2,[],"typeAnnotation"]]]]]]]]]]]]],[1535,29,1535,97,[7,[1535,30,1535,96,[18,[[[1535,31,1535,35,[11,"info"]],[1535,36,1535,40,[11,"acc_"]]],[1535,44,1535,96,[21,[1535,46,1535,50,"acc_"],[[1535,53,1535,95,[[1535,53,1535,66,"functionTypes"],[1535,69,1535,94,[1,"::",1,[1535,69,1535,73,[2,[],"info"]],[1535,77,1535,94,[19,[1535,77,1535,80,[2,[],"acc"]],[1535,81,1535,94,"functionTypes"]]]]]]]]]]]]]]],[1536,29,1536,111,[7,[1536,30,1536,110,[18,[[[1536,31,1536,35,[11,"info"]],[1536,36,1536,40,[11,"acc_"]]],[1536,44,1536,110,[21,[1536,46,1536,50,"acc_"],[[1536,53,1536,109,[[1536,53,1536,73,"exposedFunctionTypes"],[1536,76,1536,108,[1,"::",1,[1536,76,1536,80,[2,[],"info"]],[1536,84,1536,108,[19,[1536,84,1536,87,[2,[],"acc"]],[1536,88,1536,108,"exposedFunctionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[[1539,9,1539,63,[12,[[],"CustomTypeDeclaration"],[[1539,31,1539,63,[8,[[1539,33,1539,37,"name"],[1539,39,1539,47,"generics"],[1539,49,1539,61,"constructors"]]]]]]],[1540,13,1588,18,[16,[[[1541,17,1543,36,[0,[[0],[1,[1541,17,1541,27,[[1541,17,1541,18,"n"],[1541,21,1541,27,[1,[1541,21,1541,27,[[],"String"]],[]]]]]],[1542,17,1543,36,[[1542,17,1542,18,"n"],[],[1543,21,1543,36,[0,[[1543,21,1543,31,[2,["Node"],"value"]],[1543,32,1543,36,[2,[],"name"]]]]]]]]]]],[1545,13,1588,18,[0,[[1545,13,1545,26,[2,[],"skipIfIgnored"]],[1545,27,1545,55,[7,[1545,28,1545,54,[1,"<<",0,[1545,28,1545,40,[0,[[1545,28,1545,38,[2,["Set"],"member"]],[1545,39,1545,40,[2,[],"n"]]]]],[1545,44,1545,54,[20,".openTypes"]]]]]],[1546,17,1546,20,[2,[],"acc"]],[1547,17,1576,18,[7,[1547,18,1575,37,[18,[[[1547,19,1547,21,[1]]],[1548,21,1575,37,[0,[[1548,21,1548,31,[2,["List"],"foldl"]],[1549,25,1573,26,[7,[1549,26,1572,37,[18,[[[1549,27,1549,28,[11,"c"]],[1549,29,1549,43,[7,[[1549,31,1549,35,[11,"fAcc"]],[1549,37,1549,41,[11,"rAcc"]]]]]],[1550,29,1572,37,[1,"|>",0,[1550,29,1562,45,[1,"|>",0,[1550,29,1550,41,[0,[[1550,29,1550,39,[2,["Node"],"value"]],[1550,40,1550,41,[2,[],"c"]]]]],[1551,36,1562,45,[0,[[1551,36,1551,64,[2,[],"makeConstructorAndSubrecords"]],[1552,37,1561,38,[7,[1552,38,1560,45,[1,"|>",0,[1552,38,1552,66,[0,[[1552,38,1552,46,[2,["List"],"map"]],[1552,47,1552,57,[2,["Node"],"value"]],[1552,58,1552,66,[2,[],"generics"]]]]],[1553,44,1560,45,[7,[1553,45,1559,78,[18,[[[1553,46,1553,48,[11,"gs"]]],[1554,49,1559,78,[1,"|>",0,[1554,49,1558,63,[1,"|>",0,[1554,49,1557,101,[1,"|>",0,[1554,49,1556,72,[1,"|>",0,[1554,49,1555,75,[1,"|>",0,[1554,49,1554,78,[0,[[1554,49,1554,57,[2,["List"],"map"]],[1554,58,1554,75,[7,[1554,59,1554,74,[0,[[1554,59,1554,66,[2,[],"TypeVar"]],[1554,67,1554,74,[2,[],"Nothing"]]]]]]],[1554,76,1554,78,[2,[],"gs"]]]]],[1555,56,1555,75,[0,[[1555,56,1555,65,[2,[],"NamedType"]],[1555,66,1555,75,[6,[[1555,68,1555,70,[9,[]]],[1555,72,1555,73,[2,[],"n"]]]]]]]]]],[1556,56,1556,72,[2,[],"DereferencedType"]]]],[1557,56,1557,101,[0,[[1557,56,1557,70,[2,[],"assignTypeVars"]],[1557,71,1557,101,[7,[1557,72,1557,100,[0,[[1557,72,1557,97,[2,[],"makePositionalArgTypeVars"]],[1557,98,1557,100,[2,[],"gs"]]]]]]]]]]]],[1558,56,1558,63,[2,[],"getType"]]]],[1559,56,1559,78,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]],[1562,37,1562,45,[2,[],"generics"]]]]]]],[1563,36,1572,37,[7,[1563,37,1571,42,[18,[[[1563,38,1563,55,[7,[[1563,40,1563,42,[11,"n_"]],[1563,44,1563,49,[11,"type_"]],[1563,51,1563,53,[11,"rs"]]]]]],[1564,41,1571,42,[6,[[1564,43,1569,52,[1,"::",1,[1564,43,1568,44,[6,[[1564,45,1564,47,[2,[],"n_"]],[1565,45,1567,46,[8,[[1565,47,1565,70,[[1565,47,1565,61,"customTypeName"],[1565,64,1565,70,[0,[[1565,64,1565,68,[2,[],"Just"]],[1565,69,1565,70,[2,[],"n"]]]]]]],[1566,47,1567,45,[[1566,47,1566,52,"type_"],[1566,55,1566,60,[2,[],"type_"]]]]]]]]]],[1569,48,1569,52,[2,[],"fAcc"]]]],[1570,43,1570,53,[1,"++",1,[1570,43,1570,45,[2,[],"rs"]],[1570,49,1570,53,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[1574,25,1574,35,[6,[[1574,27,1574,29,[9,[]]],[1574,31,1574,33,[9,[]]]]]],[1575,25,1575,37,[2,[],"constructors"]]]]]]]]]],[1577,17,1582,18,[7,[1577,18,1581,22,[18,[[[1577,19,1577,50,[7,[[1577,21,1577,36,[11,"newConstructors"]],[1577,38,1577,48,[11,"newRecords"]]]]],[1577,51,1577,55,[11,"acc_"]]],[1578,21,1581,22,[21,[1578,23,1578,27,"acc_"],[[1579,27,1580,25,[[1579,27,1579,39,"constructors"],[1579,42,1579,77,[1,"++",1,[1579,42,1579,57,[2,[],"newConstructors"]],[1579,61,1579,77,[19,[1579,61,1579,64,[2,[],"acc"]],[1579,65,1579,77,"constructors"]]]]]]],[1580,27,1581,21,[[1580,27,1580,43,"canonicalRecords"],[1580,46,1580,80,[1,"++",1,[1580,46,1580,56,[2,[],"newRecords"]],[1580,60,1580,80,[19,[1580,60,1580,63,[2,[],"acc"]],[1580,64,1580,80,"canonicalRecords"]]]]]]]]]]]]]]],[1583,17,1588,18,[7,[1583,18,1587,22,[18,[[[1583,19,1583,50,[7,[[1583,21,1583,36,[11,"newConstructors"]],[1583,38,1583,48,[11,"newRecords"]]]]],[1583,51,1583,55,[11,"acc_"]]],[1584,21,1587,22,[21,[1584,23,1584,27,"acc_"],[[1585,27,1586,25,[[1585,27,1585,46,"exposedConstructors"],[1585,49,1585,91,[1,"++",1,[1585,49,1585,64,[2,[],"newConstructors"]],[1585,68,1585,91,[19,[1585,68,1585,71,[2,[],"acc"]],[1585,72,1585,91,"exposedConstructors"]]]]]]],[1586,27,1587,21,[[1586,27,1586,50,"exposedCanonicalRecords"],[1586,53,1586,94,[1,"++",1,[1586,53,1586,63,[2,[],"newRecords"]],[1586,67,1586,94,[19,[1586,67,1586,70,[2,[],"acc"]],[1586,71,1586,94,"exposedCanonicalRecords"]]]]]]]]]]]]]]]]]]]]]],[[1590,9,1590,60,[12,[[],"AliasDeclaration"],[[1590,26,1590,60,[8,[[1590,28,1590,32,"name"],[1590,34,1590,42,"generics"],[1590,44,1590,58,"typeAnnotation"]]]]]]],[1591,13,1663,18,[16,[[[1592,17,1594,36,[0,[[0],[1,[1592,17,1592,27,[[1592,17,1592,18,"n"],[1592,21,1592,27,[1,[1592,21,1592,27,[[],"String"]],[]]]]]],[1593,17,1594,36,[[1593,17,1593,18,"n"],[],[1594,21,1594,36,[0,[[1594,21,1594,31,[2,["Node"],"value"]],[1594,32,1594,36,[2,[],"name"]]]]]]]]]],[1596,17,1606,22,[0,[[0],[1,[1596,17,1596,63,[[1596,17,1596,26,"aliasInfo"],[1596,29,1596,63,[3,[[1596,31,1596,37,[1,[1596,31,1596,37,[[],"String"]],[]]],[1596,39,1596,61,[1,[1596,39,1596,61,[[],"TypeWithPositionalVars"]],[]]]]]]]]],[1597,17,1606,22,[[1597,17,1597,26,"aliasInfo"],[],[1598,21,1606,22,[6,[[1598,23,1598,24,[2,[],"n"]],[1599,23,1605,39,[0,[[1599,23,1599,56,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1599,57,1599,64,[2,[],"context"]],[1601,25,1603,26,[8,[[1601,27,1601,66,[[1601,27,1601,58,"constrainedTypeVarsAreRespected"],[1601,61,1601,66,[2,[],"False"]]]],[1602,27,1603,25,[[1602,27,1602,51,"subrecordIsAlsoCanonical"],[1602,54,1602,101,[0,[[1602,54,1602,82,[2,[],"subrecordCanonicityForRecord"]],[1602,83,1602,101,[2,[],"subrecordTreatment"]]]]]]]]]],[1604,25,1604,55,[7,[1604,26,1604,54,[0,[[1604,26,1604,34,[2,["List"],"map"]],[1604,35,1604,45,[2,["Node"],"value"]],[1604,46,1604,54,[2,[],"generics"]]]]]]],[1605,25,1605,39,[2,[],"typeAnnotation"]]]]]]]]]]]]]],[1608,13,1663,18,[0,[[1608,13,1608,26,[2,[],"skipIfIgnored"]],[1608,27,1608,51,[7,[1608,28,1608,50,[1,"<<",0,[1608,28,1608,40,[0,[[1608,28,1608,38,[2,["Set"],"member"]],[1608,39,1608,40,[2,[],"n"]]]]],[1608,44,1608,50,[20,".types"]]]]]],[1609,17,1609,75,[21,[1609,19,1609,22,"acc"],[[1609,25,1609,74,[[1609,25,1609,39,"exposedAliases"],[1609,42,1609,73,[1,"::",1,[1609,42,1609,51,[2,[],"aliasInfo"]],[1609,55,1609,73,[19,[1609,55,1609,58,[2,[],"acc"]],[1609,59,1609,73,"exposedAliases"]]]]]]]]]],[1610,17,1650,18,[7,[1610,18,1649,30,[18,[[[1610,19,1610,21,[1]]],[1611,21,1649,30,[1,"|>",0,[1611,21,1611,49,[0,[[1611,21,1611,34,[2,[],"annotToFields"]],[1611,35,1611,49,[2,[],"typeAnnotation"]]]]],[1612,28,1649,30,[0,[[1612,28,1612,41,[2,["MaybeX"],"unwrap"]],[1612,42,1612,52,[6,[[1612,44,1612,46,[9,[]]],[1612,48,1612,50,[9,[]]]]]],[1613,29,1649,30,[7,[1613,30,1648,34,[18,[[[1613,31,1613,52,[7,[[1613,33,1613,39,[11,"fields"]],[1613,41,1613,50,[11,"isGeneric"]]]]]],[1614,33,1648,34,[6,[[1615,35,1645,38,[11,[1615,38,1615,47,[2,[],"isGeneric"]],[1616,37,1616,39,[9,[]]],[1619,37,1645,38,[9,[[1619,39,1644,40,[6,[[1619,41,1619,42,[2,[],"n"]],[1620,41,1643,42,[8,[[1620,43,1620,67,[[1620,43,1620,57,"customTypeName"],[1620,60,1620,67,[2,[],"Nothing"]]]],[1621,43,1643,41,[[1621,43,1621,48,"type_"],[1622,45,1642,53,[1,"|>",0,[1622,45,1622,73,[0,[[1622,45,1622,53,[2,["List"],"map"]],[1622,54,1622,64,[2,["Node"],"value"]],[1622,65,1622,73,[2,[],"generics"]]]]],[1623,52,1642,53,[7,[1623,53,1641,66,[18,[[[1623,54,1623,58,[11,"vars"]]],[1624,57,1641,66,[1,"|>",0,[1624,57,1633,67,[0,[[1624,57,1624,65,[2,["List"],"map"]],[1625,61,1632,62,[7,[1625,62,1631,73,[1,">>",1,[1625,62,1625,72,[2,["Node"],"value"]],[1626,68,1631,73,[1,">>",1,[1626,68,1626,80,[2,["Tuple"],"second"]],[1627,68,1631,73,[0,[[1627,68,1627,101,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1627,102,1627,109,[2,[],"context"]],[1628,69,1630,70,[8,[[1628,71,1628,109,[[1628,71,1628,102,"constrainedTypeVarsAreRespected"],[1628,105,1628,109,[2,[],"True"]]]],[1629,71,1630,69,[[1629,71,1629,95,"subrecordIsAlsoCanonical"],[1629,98,1629,144,[0,[[1629,98,1629,125,[2,[],"subrecordCanonicityForField"]],[1629,126,1629,144,[2,[],"subrecordTreatment"]]]]]]]]]],[1631,69,1631,73,[2,[],"vars"]]]]]]]]]]],[1633,61,1633,67,[2,[],"fields"]]]]],[1634,64,1641,66,[0,[[1634,64,1634,98,[2,[],"makeFunctionTypeWithPositionalVars"]],[1635,65,1641,66,[7,[1635,66,1640,83,[0,[[1635,66,1635,99,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1635,100,1635,107,[2,[],"context"]],[1636,69,1638,70,[8,[[1636,71,1636,109,[[1636,71,1636,102,"constrainedTypeVarsAreRespected"],[1636,105,1636,109,[2,[],"True"]]]],[1637,71,1638,69,[[1637,71,1637,95,"subrecordIsAlsoCanonical"],[1637,98,1637,145,[0,[[1637,98,1637,126,[2,[],"subrecordCanonicityForRecord"]],[1637,127,1637,145,[2,[],"subrecordTreatment"]]]]]]]]]],[1639,69,1639,73,[2,[],"vars"]],[1640,69,1640,83,[2,[],"typeAnnotation"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1646,35,1647,80,[1,"|>",0,[1646,35,1646,108,[0,[[1646,35,1646,59,[2,[],"knownRecordFromTypeAnnot"]],[1646,60,1646,78,[2,[],"subrecordTreatment"]],[1646,79,1646,86,[2,[],"context"]],[1646,87,1646,108,[6,[[1646,89,1646,95,[2,[],"fields"]],[1646,97,1646,106,[2,[],"isGeneric"]]]]]]]],[1647,40,1647,80,[0,[[1647,40,1647,48,[2,["List"],"map"]],[1647,49,1647,80,[7,[1647,50,1647,79,[0,[[1647,50,1647,64,[2,["Tuple"],"mapFirst"]],[1647,65,1647,79,[7,[1647,66,1647,78,[18,[[[1647,67,1647,68,[11,"s"]]],[1647,72,1647,78,[1,"++",1,[1647,72,1647,73,[2,[],"n"]],[1647,77,1647,78,[2,[],"s"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1651,17,1657,18,[7,[1651,18,1656,22,[18,[[[1651,19,1651,50,[7,[[1651,21,1651,36,[11,"newConstructors"]],[1651,38,1651,48,[11,"newRecords"]]]]],[1651,51,1651,55,[11,"acc_"]]],[1652,21,1656,22,[21,[1652,23,1652,27,"acc_"],[[1653,27,1654,25,[[1653,27,1653,34,"aliases"],[1653,37,1653,68,[1,"::",1,[1653,37,1653,46,[2,[],"aliasInfo"]],[1653,50,1653,68,[19,[1653,50,1653,53,[2,[],"acc"]],[1653,54,1653,68,"exposedAliases"]]]]]]],[1654,27,1655,25,[[1654,27,1654,39,"constructors"],[1654,42,1654,77,[1,"++",1,[1654,42,1654,57,[2,[],"newConstructors"]],[1654,61,1654,77,[19,[1654,61,1654,64,[2,[],"acc"]],[1654,65,1654,77,"constructors"]]]]]]],[1655,27,1656,21,[[1655,27,1655,43,"canonicalRecords"],[1655,46,1655,80,[1,"++",1,[1655,46,1655,56,[2,[],"newRecords"]],[1655,60,1655,80,[19,[1655,60,1655,63,[2,[],"acc"]],[1655,64,1655,80,"canonicalRecords"]]]]]]]]]]]]]]],[1658,17,1663,18,[7,[1658,18,1662,22,[18,[[[1658,19,1658,50,[7,[[1658,21,1658,36,[11,"newConstructors"]],[1658,38,1658,48,[11,"newRecords"]]]]],[1658,51,1658,55,[11,"acc_"]]],[1659,21,1662,22,[21,[1659,23,1659,27,"acc_"],[[1660,27,1661,25,[[1660,27,1660,46,"exposedConstructors"],[1660,49,1660,91,[1,"++",1,[1660,49,1660,64,[2,[],"newConstructors"]],[1660,68,1660,91,[19,[1660,68,1660,71,[2,[],"acc"]],[1660,72,1660,91,"exposedConstructors"]]]]]]],[1661,27,1662,21,[[1661,27,1661,50,"exposedCanonicalRecords"],[1661,53,1661,94,[1,"++",1,[1661,53,1661,63,[2,[],"newRecords"]],[1661,67,1661,94,[19,[1661,67,1661,70,[2,[],"acc"]],[1661,71,1661,94,"exposedCanonicalRecords"]]]]]]]]]]]]]]]]]]]]]],[[1665,9,1665,10,[0]],[1670,13,1670,16,[2,[],"acc"]]]]]]]]]]]]]]],[1673,1,1682,15,[0,[[1,[1673,1,1674,3,"{-| Visit each TLD and check it in turn.\n-}"]],[1,[1675,1,1675,93,[[1675,1,1675,24,"declarationEnterVisitor"],[1675,27,1675,93,[6,[1675,27,1675,37,[1,[1675,27,1675,37,[[],"RuleConfig"]],[]]],[1675,41,1675,93,[6,[1675,41,1675,54,[1,[1675,41,1675,54,[[],"ModuleContext"]],[]]],[1675,58,1675,93,[6,[1675,58,1675,74,[1,[1675,58,1675,62,[[],"Node"]],[[1675,63,1675,74,[1,[1675,63,1675,74,[[],"Declaration"]],[]]]]]],[1675,78,1675,93,[1,[1675,78,1675,82,[[],"List"]],[[1675,83,1675,93,[1,[1675,84,1675,89,[[],"Error"]],[[1675,90,1675,92,[4,[]]]]]]]]]]]]]]]]]],[1676,1,1682,15,[[1676,1,1676,24,"declarationEnterVisitor"],[[1676,25,1676,31,[11,"config"]],[1676,32,1676,39,[11,"context"]],[1676,40,1676,44,[11,"node"]]],[1677,5,1682,15,[17,[[1677,10,1677,25,[0,[[1677,10,1677,20,[2,["Node"],"value"]],[1677,21,1677,25,[2,[],"node"]]]]],[[[1678,9,1678,30,[12,[[],"FunctionDeclaration"],[[1678,29,1678,30,[11,"f"]]]]],[1679,13,1679,97,[0,[[1679,13,1679,37,[2,[],"checkFunctionDeclaration"]],[1679,38,1679,44,[2,[],"config"]],[1679,45,1679,95,[8,[[1679,47,1679,64,[[1679,47,1679,54,"context"],[1679,57,1679,64,[2,[],"context"]]]],[1679,66,1679,94,[[1679,66,1679,80,"localFunctions"],[1679,83,1679,93,[2,["Dict"],"empty"]]]]]]],[1679,96,1679,97,[2,[],"f"]]]]]],[[1681,9,1681,10,[0]],[1682,13,1682,15,[9,[]]]]]]]]]]]]],[1685,1,1701,111,[0,[[1,[1685,1,1687,3,"{-| Check a function declaration for unsorted record signatures, patterns, or\nexpressions.\n-}"]],[1,[1688,1,1688,85,[[1688,1,1688,25,"checkFunctionDeclaration"],[1688,28,1688,85,[6,[1688,28,1688,38,[1,[1688,28,1688,38,[[],"RuleConfig"]],[]]],[1688,42,1688,85,[6,[1688,42,1688,54,[1,[1688,42,1688,54,[[],"LocalContext"]],[]]],[1688,58,1688,85,[6,[1688,58,1688,66,[1,[1688,58,1688,66,[[],"Function"]],[]]],[1688,70,1688,85,[1,[1688,70,1688,74,[[],"List"]],[[1688,75,1688,85,[1,[1688,76,1688,81,[[],"Error"]],[[1688,82,1688,84,[4,[]]]]]]]]]]]]]]]]]],[1689,1,1701,111,[[1689,1,1689,25,"checkFunctionDeclaration"],[[1689,26,1689,32,[11,"config"]],[1689,33,1689,38,[11,"local"]],[1689,39,1689,43,[11,"func"]]],[1690,5,1701,111,[16,[[[1691,9,1692,40,[1,[1691,9,1691,34,[8,[[1691,11,1691,20,"arguments"],[1691,22,1691,32,"expression"]]]],[1692,13,1692,40,[0,[[1692,13,1692,23,[2,["Node"],"value"]],[1692,24,1692,40,[19,[1692,24,1692,28,[2,[],"func"]],[1692,29,1692,40,"declaration"]]]]]]]],[1694,9,1697,42,[0,[[0],[1,[1694,9,1694,41,[[1694,9,1694,16,"hasType"],[1694,19,1694,41,[1,[1694,19,1694,24,[[],"Maybe"]],[[1694,25,1694,41,[1,[1694,25,1694,41,[[],"DereferencedType"]],[]]]]]]]]],[1695,9,1697,42,[[1695,9,1695,16,"hasType"],[],[1696,13,1697,42,[1,"|>",0,[1696,13,1696,50,[0,[[1696,13,1696,31,[2,[],"getFunctionBinding"]],[1696,32,1696,45,[19,[1696,32,1696,37,[2,[],"local"]],[1696,38,1696,45,"context"]]],[1696,46,1696,50,[2,[],"func"]]]]],[1697,20,1697,42,[0,[[1697,20,1697,29,[2,["Maybe"],"map"]],[1697,30,1697,42,[2,["Tuple"],"second"]]]]]]]]]]]]],[1699,5,1701,111,[1,"|>",0,[1699,5,1700,32,[1,"|>",0,[1699,5,1699,113,[0,[[1699,5,1699,14,[2,["Maybe"],"map"]],[1699,15,1699,98,[7,[1699,16,1699,97,[1,"<<",0,[1699,16,1699,83,[1,"<<",0,[1699,16,1699,64,[0,[[1699,16,1699,35,[2,[],"checkTypeAnnotation"]],[1699,36,1699,42,[2,[],"config"]],[1699,43,1699,56,[19,[1699,43,1699,48,[2,[],"local"]],[1699,49,1699,56,"context"]]],[1699,57,1699,64,[2,[],"Nothing"]]]]],[1699,68,1699,83,[20,".typeAnnotation"]]]],[1699,87,1699,97,[2,["Node"],"value"]]]]]],[1699,99,1699,113,[19,[1699,99,1699,103,[2,[],"func"]],[1699,104,1699,113,"signature"]]]]]],[1700,12,1700,32,[0,[[1700,12,1700,29,[2,["Maybe"],"withDefault"]],[1700,30,1700,32,[9,[]]]]]]]],[1701,12,1701,111,[7,[1701,13,1701,110,[18,[[[1701,14,1701,25,[11,"errsInAnnot"]]],[1701,29,1701,110,[1,"++",1,[1701,29,1701,40,[2,[],"errsInAnnot"]],[1701,44,1701,110,[0,[[1701,44,1701,68,[2,[],"checkFunctionArgsAndExpr"]],[1701,69,1701,75,[2,[],"config"]],[1701,76,1701,81,[2,[],"local"]],[1701,82,1701,89,[2,[],"hasType"]],[1701,90,1701,99,[2,[],"arguments"]],[1701,100,1701,110,[2,[],"expression"]]]]]]]]]]]]]]]]]]]]]],[1704,1,1715,14,[0,[[1,[1704,1,1705,3,"{-| Get the name and type of a function, if possible.\n-}"]],[1,[1706,1,1706,85,[[1706,1,1706,19,"getFunctionBinding"],[1706,22,1706,85,[6,[1706,22,1706,35,[1,[1706,22,1706,35,[[],"ModuleContext"]],[]]],[1706,39,1706,85,[6,[1706,39,1706,47,[1,[1706,39,1706,47,[[],"Function"]],[]]],[1706,51,1706,85,[1,[1706,51,1706,56,[[],"Maybe"]],[[1706,57,1706,85,[3,[[1706,59,1706,65,[1,[1706,59,1706,65,[[],"String"]],[]]],[1706,67,1706,83,[1,[1706,67,1706,83,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[1707,1,1715,14,[[1707,1,1707,19,"getFunctionBinding"],[[1707,20,1707,27,[11,"context"]],[1707,28,1707,41,[8,[[1707,30,1707,39,"signature"]]]]],[1708,5,1715,14,[1,"|>",0,[1708,5,1708,35,[0,[[1708,5,1708,14,[2,["Maybe"],"map"]],[1708,15,1708,25,[2,["Node"],"value"]],[1708,26,1708,35,[2,[],"signature"]]]]],[1709,12,1715,14,[0,[[1709,12,1709,21,[2,["Maybe"],"map"]],[1710,13,1715,14,[7,[1710,14,1714,18,[18,[[[1710,15,1710,39,[8,[[1710,17,1710,21,"name"],[1710,23,1710,37,"typeAnnotation"]]]]],[1711,17,1714,18,[6,[[1711,19,1711,34,[0,[[1711,19,1711,29,[2,["Node"],"value"]],[1711,30,1711,34,[2,[],"name"]]]]],[1712,19,1713,47,[1,"|>",0,[1712,19,1712,69,[0,[[1712,19,1712,46,[2,[],"typeAnnotToNoncanonicalType"]],[1712,47,1712,54,[2,[],"context"]],[1712,55,1712,69,[2,[],"typeAnnotation"]]]]],[1713,24,1713,47,[0,[[1713,24,1713,39,[2,[],"dereferenceType"]],[1713,40,1713,47,[2,[],"context"]]]]]]]]]]]]]]]]]]]]]]]]],[1718,1,1728,72,[0,[[1,[1718,1,1720,3,"{-| Given a return type and a successive list of argument types, create a\nfunction with that type.\n-}"]],[1,[1721,1,1721,45,[[1721,1,1721,17,"makeFunctionType"],[1721,20,1721,45,[6,[1721,20,1721,24,[1,[1721,20,1721,24,[[],"Type"]],[]]],[1721,28,1721,45,[6,[1721,28,1721,37,[1,[1721,28,1721,32,[[],"List"]],[[1721,33,1721,37,[1,[1721,33,1721,37,[[],"Type"]],[]]]]]],[1721,41,1721,45,[1,[1721,41,1721,45,[[],"Type"]],[]]]]]]]]]],[1722,1,1728,72,[[1722,1,1722,17,"makeFunctionType"],[[1722,18,1722,24,[11,"return"]],[1722,25,1722,27,[11,"ts"]]],[1723,5,1728,72,[17,[[1723,10,1723,12,[2,[],"ts"]],[[[1724,9,1724,11,[10,[]]],[1725,13,1725,19,[2,[],"return"]]],[[1727,9,1727,17,[9,[1727,9,1727,10,[11,"t"]],[1727,14,1727,17,[11,"ts_"]]]],[1728,13,1728,72,[0,[[1728,13,1728,25,[2,[],"FunctionType"]],[1728,26,1728,72,[8,[[1728,28,1728,36,[[1728,28,1728,32,"from"],[1728,35,1728,36,[2,[],"t"]]]],[1728,38,1728,71,[[1728,38,1728,40,"to"],[1728,43,1728,70,[0,[[1728,43,1728,59,[2,[],"makeFunctionType"]],[1728,60,1728,66,[2,[],"return"]],[1728,67,1728,70,[2,[],"ts_"]]]]]]]]]]]]]]]]]]]]]]],[1731,1,1737,34,[0,[[1,[1731,1,1733,3,"{-| Given a return type and a successive list of argument types, create a\nfunction with that type, all types having positional vars.\n-}"]],[1,[1734,1,1734,117,[[1734,1,1734,35,"makeFunctionTypeWithPositionalVars"],[1734,38,1734,117,[6,[1734,38,1734,60,[1,[1734,38,1734,60,[[],"TypeWithPositionalVars"]],[]]],[1734,64,1734,117,[6,[1734,64,1734,91,[1,[1734,64,1734,68,[[],"List"]],[[1734,69,1734,91,[1,[1734,69,1734,91,[[],"TypeWithPositionalVars"]],[]]]]]],[1734,95,1734,117,[1,[1734,95,1734,117,[[],"TypeWithPositionalVars"]],[]]]]]]]]]],[1735,1,1737,34,[[1735,1,1735,35,"makeFunctionTypeWithPositionalVars"],[[1735,36,1735,42,[11,"return"]],[1735,43,1735,45,[11,"ts"]]],[1736,5,1737,34,[1,"|>",0,[1736,5,1736,96,[0,[[1736,5,1736,21,[2,[],"makeFunctionType"]],[1736,22,1736,56,[7,[1736,23,1736,55,[0,[[1736,23,1736,48,[2,[],"getTypeWithPositionalVars"]],[1736,49,1736,55,[2,[],"return"]]]]]]],[1736,57,1736,96,[7,[1736,58,1736,95,[0,[[1736,58,1736,66,[2,["List"],"map"]],[1736,67,1736,92,[2,[],"getTypeWithPositionalVars"]],[1736,93,1736,95,[2,[],"ts"]]]]]]]]]],[1737,12,1737,34,[2,[],"TypeWithPositionalVars"]]]]]]]]],[1740,1,1751,34,[0,[[1,[1740,1,1744,3,"{-| Given context, whether or not a top-level record type (if `Just`) and\nsubrecords (if `Just True`) found are in canonical order, and a `Dict` of\npositional type variables, convert a `TypeAnnotation` into a\n`TypeWithPositionalVars`.\n-}"]],[1,[1745,1,1745,260,[[1745,1,1745,34,"typeAnnotToTypeWithPositionalVars"],[1745,37,1745,260,[6,[1745,37,1745,111,[5,[1745,39,1745,46,"context"],[1745,48,1745,110,[[1745,49,1745,72,[[1745,49,1745,59,"moduleName"],[1745,62,1745,72,[1,[1745,62,1745,72,[[],"ModuleName"]],[]]]]],[1745,74,1745,110,[[1745,74,1745,85,"lookupTable"],[1745,88,1745,109,[1,[1745,88,1745,109,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1745,115,1745,260,[6,[1745,115,1745,196,[4,[[1745,117,1745,155,[[1745,117,1745,148,"constrainedTypeVarsAreRespected"],[1745,151,1745,155,[1,[1745,151,1745,155,[[],"Bool"]],[]]]]],[1745,157,1745,195,[[1745,157,1745,181,"subrecordIsAlsoCanonical"],[1745,184,1745,194,[1,[1745,184,1745,189,[[],"Maybe"]],[[1745,190,1745,194,[1,[1745,190,1745,194,[[],"Bool"]],[]]]]]]]]]]],[1745,200,1745,260,[6,[1745,200,1745,211,[1,[1745,200,1745,204,[[],"List"]],[[1745,205,1745,211,[1,[1745,205,1745,211,[[],"String"]],[]]]]]],[1745,215,1745,260,[6,[1745,215,1745,234,[1,[1745,215,1745,219,[[],"Node"]],[[1745,220,1745,234,[1,[1745,220,1745,234,[[],"TypeAnnotation"]],[]]]]]],[1745,238,1745,260,[1,[1745,238,1745,260,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[1746,1,1751,34,[[1746,1,1746,34,"typeAnnotToTypeWithPositionalVars"],[[1746,35,1746,42,[11,"context"]],[1746,43,1746,51,[11,"settings"]],[1746,52,1746,60,[11,"typeArgs"]]],[1747,5,1751,34,[1,">>",1,[1747,5,1747,37,[0,[[1747,5,1747,20,[2,[],"typeAnnotToType"]],[1747,21,1747,28,[2,[],"context"]],[1747,29,1747,37,[2,[],"settings"]]]]],[1748,12,1751,34,[1,">>",1,[1748,12,1748,28,[2,[],"DereferencedType"]],[1749,12,1751,34,[1,">>",1,[1749,12,1749,63,[0,[[1749,12,1749,26,[2,[],"assignTypeVars"]],[1749,27,1749,63,[7,[1749,28,1749,62,[0,[[1749,28,1749,53,[2,[],"makePositionalArgTypeVars"]],[1749,54,1749,62,[2,[],"typeArgs"]]]]]]]]]],[1750,12,1751,34,[1,">>",1,[1750,12,1750,19,[2,[],"getType"]],[1751,12,1751,34,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]]]],[1754,1,1791,13,[0,[[1,[1754,1,1757,3,"{-| Given how to treat subrecords, the current module names, and a\n`RecordDefinition`/whether the record is generic, generate all `KnownRecord`s\nfrom a type annotation.\n-}"]],[1,[1758,1,1758,187,[[1758,1,1758,25,"knownRecordFromTypeAnnot"],[1758,28,1758,187,[6,[1758,28,1758,47,[1,[1758,28,1758,47,[[],"SubrecordCanonicity"]],[]]],[1758,51,1758,187,[6,[1758,51,1758,125,[5,[1758,53,1758,60,"context"],[1758,62,1758,124,[[1758,63,1758,86,[[1758,63,1758,73,"moduleName"],[1758,76,1758,86,[1,[1758,76,1758,86,[[],"ModuleName"]],[]]]]],[1758,88,1758,124,[[1758,88,1758,99,"lookupTable"],[1758,102,1758,123,[1,[1758,102,1758,123,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1758,129,1758,187,[6,[1758,129,1758,155,[3,[[1758,131,1758,147,[1,[1758,131,1758,147,[[],"RecordDefinition"]],[]]],[1758,149,1758,153,[1,[1758,149,1758,153,[[],"Bool"]],[]]]]]],[1758,159,1758,187,[1,[1758,159,1758,163,[[],"List"]],[[1758,164,1758,187,[3,[[1758,166,1758,172,[1,[1758,166,1758,172,[[],"String"]],[]]],[1758,174,1758,185,[1,[1758,174,1758,185,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1759,1,1791,13,[[1759,1,1759,25,"knownRecordFromTypeAnnot"],[[1759,26,1759,44,[11,"subrecordTreatment"]],[1759,45,1759,52,[11,"context"]],[1759,53,1759,74,[7,[[1759,55,1759,61,[11,"fields"]],[1759,63,1759,72,[11,"isGeneric"]]]]]],[1760,5,1791,13,[1,"|>",0,[1760,5,1782,85,[1,"|>",0,[1760,5,1781,15,[0,[[1760,5,1760,23,[2,["ListX"],"indexedFoldl"]],[1761,9,1779,10,[7,[1761,10,1778,18,[18,[[[1761,11,1761,12,[11,"i"]],[1761,13,1761,18,[11,"field"]]],[1762,13,1778,18,[16,[[[1763,17,1764,37,[1,[1763,17,1763,25,[7,[[1763,19,1763,20,[11,"f"]],[1763,22,1763,23,[11,"t"]]]]],[1764,21,1764,37,[0,[[1764,21,1764,31,[2,["Node"],"value"]],[1764,32,1764,37,[2,[],"field"]]]]]]]],[1766,13,1778,18,[0,[[1766,13,1766,24,[2,["Dict"],"insert"]],[1767,17,1767,31,[7,[1767,18,1767,30,[0,[[1767,18,1767,28,[2,["Node"],"value"]],[1767,29,1767,30,[2,[],"f"]]]]]]],[1768,17,1778,18,[6,[[1768,19,1768,20,[2,[],"i"]],[1769,19,1777,22,[0,[[1769,19,1769,34,[2,[],"typeAnnotToType"]],[1769,35,1769,42,[2,[],"context"]],[1771,21,1776,22,[8,[[1771,23,1771,62,[[1771,23,1771,54,"constrainedTypeVarsAreRespected"],[1771,57,1771,62,[2,[],"False"]]]],[1774,23,1776,21,[[1774,23,1774,47,"subrecordIsAlsoCanonical"],[1775,25,1775,71,[0,[[1775,25,1775,52,[2,[],"subrecordCanonicityForField"]],[1775,53,1775,71,[2,[],"subrecordTreatment"]]]]]]]]]],[1777,21,1777,22,[2,[],"t"]]]]]]]]]]]]]]]]]]],[1780,9,1780,19,[2,["Dict"],"empty"]],[1781,9,1781,15,[2,[],"fields"]]]]],[1782,12,1782,85,[7,[1782,13,1782,84,[18,[[[1782,14,1782,19,[11,"order"]]],[1782,23,1782,84,[8,[[1782,25,1782,38,[[1782,25,1782,30,"order"],[1782,33,1782,38,[2,[],"order"]]]],[1782,40,1782,61,[[1782,40,1782,49,"isGeneric"],[1782,52,1782,61,[2,[],"isGeneric"]]]],[1782,63,1782,83,[[1782,63,1782,74,"isSubrecord"],[1782,77,1782,82,[2,[],"False"]]]]]]]]]]]]]],[1783,12,1791,13,[7,[1783,13,1790,34,[18,[[[1783,14,1783,15,[11,"k"]]],[1784,17,1790,34,[11,[1784,20,1784,57,[1,"==",2,[1784,20,1784,38,[2,[],"subrecordTreatment"]],[1784,42,1784,57,[2,[],"AlwaysCanonical"]]]],[1785,21,1786,127,[1,"::",1,[1785,21,1785,30,[6,[[1785,23,1785,25,[5,""]],[1785,27,1785,28,[2,[],"k"]]]]],[1786,28,1786,127,[0,[[1786,28,1786,42,[2,["List"],"concatMap"]],[1786,43,1786,105,[7,[1786,44,1786,104,[18,[[[1786,45,1786,60,[7,[[1786,47,1786,48,[11,"f"]],[1786,50,1786,58,[7,[[1786,52,1786,53,[0]],[1786,55,1786,56,[11,"t"]]]]]]]]],[1786,64,1786,104,[0,[[1786,64,1786,86,[2,[],"makeSubrecordsFromType"]],[1786,87,1786,91,[2,[],"True"]],[1786,92,1786,102,[7,[1786,93,1786,101,[1,"++",1,[1786,93,1786,96,[5,"."]],[1786,100,1786,101,[2,[],"f"]]]]]],[1786,103,1786,104,[2,[],"t"]]]]]]]]]],[1786,106,1786,127,[7,[1786,107,1786,126,[0,[[1786,107,1786,118,[2,["Dict"],"toList"]],[1786,119,1786,126,[19,[1786,119,1786,120,[2,[],"k"]],[1786,121,1786,126,"order"]]]]]]]]]]]]],[1790,21,1790,34,[9,[[1790,23,1790,32,[6,[[1790,25,1790,27,[5,""]],[1790,29,1790,30,[2,[],"k"]]]]]]]]]]]]]]]]]]]]]],[1794,1,1801,10,[0,[[1,[1794,1,1795,3,"{-| Wrapper for `typeAnnotToType` when not dealing with aliases.\n-}"]],[1,[1796,1,1796,136,[[1796,1,1796,28,"typeAnnotToNoncanonicalType"],[1796,31,1796,136,[6,[1796,31,1796,105,[5,[1796,33,1796,40,"context"],[1796,42,1796,104,[[1796,43,1796,66,[[1796,43,1796,53,"moduleName"],[1796,56,1796,66,[1,[1796,56,1796,66,[[],"ModuleName"]],[]]]]],[1796,68,1796,104,[[1796,68,1796,79,"lookupTable"],[1796,82,1796,103,[1,[1796,82,1796,103,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1796,109,1796,136,[6,[1796,109,1796,128,[1,[1796,109,1796,113,[[],"Node"]],[[1796,114,1796,128,[1,[1796,114,1796,128,[[],"TypeAnnotation"]],[]]]]]],[1796,132,1796,136,[1,[1796,132,1796,136,[[],"Type"]],[]]]]]]]]]],[1797,1,1801,10,[[1797,1,1797,28,"typeAnnotToNoncanonicalType"],[[1797,29,1797,36,[11,"context"]]],[1798,5,1801,10,[0,[[1798,5,1798,20,[2,[],"typeAnnotToType"]],[1798,21,1798,28,[2,[],"context"]],[1799,9,1801,10,[8,[[1799,11,1799,49,[[1799,11,1799,42,"constrainedTypeVarsAreRespected"],[1799,45,1799,49,[2,[],"True"]]]],[1800,11,1801,9,[[1800,11,1800,35,"subrecordIsAlsoCanonical"],[1800,38,1800,45,[2,[],"Nothing"]]]]]]]]]]]]]]],[1804,1,1873,58,[0,[[1,[1804,1,1807,3,"{-| Given context and whether or not a top-level record type (if `Just`) and\nsubrecords (if `Just True`) found are in canonical order, convert a\n`TypeAnnotation` into a `Type`.\n-}"]],[1,[1808,1,1808,209,[[1808,1,1808,16,"typeAnnotToType"],[1808,19,1808,209,[6,[1808,19,1808,93,[5,[1808,21,1808,28,"context"],[1808,30,1808,92,[[1808,31,1808,54,[[1808,31,1808,41,"moduleName"],[1808,44,1808,54,[1,[1808,44,1808,54,[[],"ModuleName"]],[]]]]],[1808,56,1808,92,[[1808,56,1808,67,"lookupTable"],[1808,70,1808,91,[1,[1808,70,1808,91,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1808,97,1808,209,[6,[1808,97,1808,178,[4,[[1808,99,1808,137,[[1808,99,1808,130,"constrainedTypeVarsAreRespected"],[1808,133,1808,137,[1,[1808,133,1808,137,[[],"Bool"]],[]]]]],[1808,139,1808,177,[[1808,139,1808,163,"subrecordIsAlsoCanonical"],[1808,166,1808,176,[1,[1808,166,1808,171,[[],"Maybe"]],[[1808,172,1808,176,[1,[1808,172,1808,176,[[],"Bool"]],[]]]]]]]]]]],[1808,182,1808,209,[6,[1808,182,1808,201,[1,[1808,182,1808,186,[[],"Node"]],[[1808,187,1808,201,[1,[1808,187,1808,201,[[],"TypeAnnotation"]],[]]]]]],[1808,205,1808,209,[1,[1808,205,1808,209,[[],"Type"]],[]]]]]]]]]]]],[1809,1,1873,58,[[1809,1,1809,16,"typeAnnotToType"],[[1809,17,1809,24,[11,"context"]],[1809,25,1809,100,[14,[1809,26,1809,99,[13,[1809,26,1809,87,[8,[[1809,28,1809,59,"constrainedTypeVarsAreRespected"],[1809,61,1809,85,"subrecordIsAlsoCanonical"]]]],[1809,91,1809,99,"settings"]]]]],[1809,101,1809,106,[11,"annot"]]],[1810,5,1873,58,[16,[[[1811,9,1816,21,[0,[[0],[1,[1811,9,1811,41,[[1811,9,1811,11,"go"],[1811,14,1811,41,[6,[1811,14,1811,33,[1,[1811,14,1811,18,[[],"Node"]],[[1811,19,1811,33,[1,[1811,19,1811,33,[[],"TypeAnnotation"]],[]]]]]],[1811,37,1811,41,[1,[1811,37,1811,41,[[],"Type"]],[]]]]]]]],[1812,9,1816,21,[[1812,9,1812,11,"go"],[],[1813,13,1816,21,[1,"|>",0,[1813,13,1813,60,[0,[[1813,13,1813,26,[2,["MaybeX"],"filter"]],[1813,27,1813,35,[2,[],"identity"]],[1813,36,1813,60,[2,[],"subrecordIsAlsoCanonical"]]]]],[1814,20,1816,21,[7,[1814,21,1815,110,[18,[[[1814,22,1814,41,[11,"subrecordStillCanon"]]],[1815,25,1815,110,[0,[[1815,25,1815,40,[2,[],"typeAnnotToType"]],[1815,41,1815,48,[2,[],"context"]],[1815,49,1815,110,[21,[1815,51,1815,59,"settings"],[[1815,62,1815,109,[[1815,62,1815,86,"subrecordIsAlsoCanonical"],[1815,89,1815,108,[2,[],"subrecordStillCanon"]]]]]]]]]]]]]]]]]]]]]],[1818,9,1825,28,[0,[[0],[1,[1818,9,1818,84,[[1818,9,1818,17,"makeList"],[1818,20,1818,84,[6,[1818,20,1818,30,[1,[1818,20,1818,30,[[],"ModuleName"]],[]]],[1818,34,1818,84,[6,[1818,34,1818,40,[1,[1818,34,1818,40,[[],"String"]],[]]],[1818,44,1818,84,[6,[1818,44,1818,70,[1,[1818,44,1818,48,[[],"List"]],[[1818,49,1818,70,[1,[1818,50,1818,54,[[],"Node"]],[[1818,55,1818,69,[1,[1818,55,1818,69,[[],"TypeAnnotation"]],[]]]]]]]]],[1818,74,1818,84,[1,[1818,74,1818,79,[[],"Maybe"]],[[1818,80,1818,84,[1,[1818,80,1818,84,[[],"Type"]],[]]]]]]]]]]]]]]],[1819,9,1825,28,[[1819,9,1819,17,"makeList"],[[1819,18,1819,28,[11,"moduleName"]],[1819,29,1819,33,[11,"name"]],[1819,34,1819,38,[11,"args"]]],[1820,13,1825,28,[17,[[1820,18,1820,44,[6,[[1820,20,1820,30,[2,[],"moduleName"]],[1820,32,1820,36,[2,[],"name"]],[1820,38,1820,42,[2,[],"args"]]]]],[[[1821,17,1821,53,[7,[[1821,19,1821,29,[10,[[1821,21,1821,27,[3,"List"]]]]],[1821,31,1821,37,[3,"List"]],[1821,39,1821,51,[10,[[1821,41,1821,49,[11,"listType"]]]]]]]],[1822,21,1822,52,[1,"<|",1,[1822,21,1822,25,[2,[],"Just"]],[1822,29,1822,52,[1,"<|",1,[1822,29,1822,37,[2,[],"ListType"]],[1822,41,1822,52,[0,[[1822,41,1822,43,[2,[],"go"]],[1822,44,1822,52,[2,[],"listType"]]]]]]]]]],[[1824,17,1824,18,[0]],[1825,21,1825,28,[2,[],"Nothing"]]]]]]]]]]]]],[1827,5,1873,58,[17,[[1827,10,1827,26,[0,[[1827,10,1827,20,[2,["Node"],"value"]],[1827,21,1827,26,[2,[],"annot"]]]]],[[[1828,9,1828,24,[12,[[],"Typed"],[[1828,15,1828,19,[11,"name"]],[1828,20,1828,24,[11,"args"]]]]],[1829,13,1843,21,[1,"|>",0,[1829,13,1839,64,[1,"|>",0,[1829,13,1838,21,[1,"|>",0,[1829,13,1830,70,[1,"|>",0,[1829,13,1829,51,[0,[[1829,13,1829,26,[2,[],"moduleNameFor"]],[1829,27,1829,46,[19,[1829,27,1829,34,[2,[],"context"]],[1829,35,1829,46,"lookupTable"]]],[1829,47,1829,51,[2,[],"name"]]]]],[1830,20,1830,70,[0,[[1830,20,1830,37,[2,["Maybe"],"withDefault"]],[1830,38,1830,70,[7,[1830,39,1830,69,[1,"<|",1,[1830,39,1830,50,[2,["Tuple"],"first"]],[1830,54,1830,69,[0,[[1830,54,1830,64,[2,["Node"],"value"]],[1830,65,1830,69,[2,[],"name"]]]]]]]]]]]]]],[1831,20,1838,21,[7,[1831,21,1837,39,[18,[[[1831,22,1831,32,[11,"moduleName"]]],[1832,25,1837,39,[11,[1832,28,1832,44,[1,"==",2,[1832,28,1832,38,[2,[],"moduleName"]],[1832,42,1832,44,[9,[]]]]],[1834,29,1834,47,[19,[1834,29,1834,36,[2,[],"context"]],[1834,37,1834,47,"moduleName"]]],[1837,29,1837,39,[2,[],"moduleName"]]]]]]]]]]],[1839,20,1839,64,[0,[[1839,20,1839,30,[2,["Tuple"],"pair"]],[1839,31,1839,64,[7,[1839,32,1839,63,[1,"<|",1,[1839,32,1839,44,[2,["Tuple"],"second"]],[1839,48,1839,63,[0,[[1839,48,1839,58,[2,["Node"],"value"]],[1839,59,1839,63,[2,[],"name"]]]]]]]]]]]]]],[1840,20,1843,21,[7,[1840,21,1842,111,[18,[[[1840,22,1840,39,[7,[[1840,24,1840,25,[11,"n"]],[1840,27,1840,37,[11,"moduleName"]]]]]],[1841,25,1842,111,[1,"|>",0,[1841,25,1841,51,[0,[[1841,25,1841,33,[2,[],"makeList"]],[1841,34,1841,44,[2,[],"moduleName"]],[1841,45,1841,46,[2,[],"n"]],[1841,47,1841,51,[2,[],"args"]]]]],[1842,32,1842,111,[0,[[1842,32,1842,54,[2,["MaybeX"],"withDefaultLazy"]],[1842,55,1842,111,[7,[1842,56,1842,110,[18,[[[1842,57,1842,59,[1]]],[1842,63,1842,110,[1,"<|",1,[1842,63,1842,90,[0,[[1842,63,1842,72,[2,[],"NamedType"]],[1842,73,1842,90,[6,[[1842,75,1842,85,[2,[],"moduleName"]],[1842,87,1842,88,[2,[],"n"]]]]]]]],[1842,94,1842,110,[0,[[1842,94,1842,102,[2,["List"],"map"]],[1842,103,1842,105,[2,[],"go"]],[1842,106,1842,110,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]],[[1845,9,1845,13,[12,[[],"Unit"],[]]],[1846,13,1846,21,[2,[],"UnitType"]]],[[1848,9,1848,18,[12,[[],"Tupled"],[[1848,16,1848,18,[11,"ts"]]]]],[1849,13,1849,40,[1,"<|",1,[1849,13,1849,22,[2,[],"TupleType"]],[1849,26,1849,40,[0,[[1849,26,1849,34,[2,["List"],"map"]],[1849,35,1849,37,[2,[],"go"]],[1849,38,1849,40,[2,[],"ts"]]]]]]]],[[1851,9,1851,18,[12,[[],"Record"],[[1851,16,1851,18,[11,"fs"]]]]],[1852,13,1856,18,[0,[[1852,13,1852,23,[2,[],"RecordType"]],[1853,17,1856,18,[8,[[1853,19,1853,36,[[1853,19,1853,26,"generic"],[1853,29,1853,36,[2,[],"Nothing"]]]],[1854,19,1855,17,[[1854,19,1854,28,"canonical"],[1854,31,1854,66,[1,"/=",2,[1854,31,1854,55,[2,[],"subrecordIsAlsoCanonical"]],[1854,59,1854,66,[2,[],"Nothing"]]]]]],[1855,19,1856,17,[[1855,19,1855,25,"fields"],[1855,28,1855,83,[0,[[1855,28,1855,36,[2,["List"],"map"]],[1855,37,1855,80,[7,[1855,38,1855,79,[1,"<<",0,[1855,38,1855,65,[0,[[1855,38,1855,51,[2,["Tuple"],"mapBoth"]],[1855,52,1855,62,[2,["Node"],"value"]],[1855,63,1855,65,[2,[],"go"]]]]],[1855,69,1855,79,[2,["Node"],"value"]]]]]],[1855,81,1855,83,[2,[],"fs"]]]]]]]]]]]]]],[[1858,9,1858,33,[12,[[],"GenericRecord"],[[1858,23,1858,30,[11,"generic"]],[1858,31,1858,33,[11,"fs"]]]]],[1859,13,1867,18,[0,[[1859,13,1859,23,[2,[],"RecordType"]],[1860,17,1867,18,[8,[[1860,19,1864,66,[[1860,19,1860,26,"generic"],[1864,21,1864,66,[1,"<|",1,[1864,21,1864,25,[2,[],"Just"]],[1864,29,1864,66,[1,"<|",1,[1864,29,1864,44,[0,[[1864,29,1864,36,[2,[],"TypeVar"]],[1864,37,1864,44,[2,[],"Nothing"]]]]],[1864,48,1864,66,[0,[[1864,48,1864,58,[2,["Node"],"value"]],[1864,59,1864,66,[2,[],"generic"]]]]]]]]]]],[1865,19,1866,17,[[1865,19,1865,28,"canonical"],[1865,31,1865,66,[1,"/=",2,[1865,31,1865,55,[2,[],"subrecordIsAlsoCanonical"]],[1865,59,1865,66,[2,[],"Nothing"]]]]]],[1866,19,1867,17,[[1866,19,1866,25,"fields"],[1866,28,1866,97,[1,"<|",1,[1866,28,1866,80,[0,[[1866,28,1866,36,[2,["List"],"map"]],[1866,37,1866,80,[7,[1866,38,1866,79,[1,"<<",0,[1866,38,1866,65,[0,[[1866,38,1866,51,[2,["Tuple"],"mapBoth"]],[1866,52,1866,62,[2,["Node"],"value"]],[1866,63,1866,65,[2,[],"go"]]]]],[1866,69,1866,79,[2,["Node"],"value"]]]]]]]]],[1866,84,1866,97,[0,[[1866,84,1866,94,[2,["Node"],"value"]],[1866,95,1866,97,[2,[],"fs"]]]]]]]]]]]]]]]],[[1869,9,1869,39,[12,[[],"FunctionTypeAnnotation"],[[1869,32,1869,36,[11,"from"]],[1869,37,1869,39,[11,"to"]]]]],[1870,13,1870,56,[0,[[1870,13,1870,25,[2,[],"FunctionType"]],[1870,26,1870,56,[8,[[1870,28,1870,42,[[1870,28,1870,32,"from"],[1870,35,1870,42,[0,[[1870,35,1870,37,[2,[],"go"]],[1870,38,1870,42,[2,[],"from"]]]]]]],[1870,44,1870,55,[[1870,44,1870,46,"to"],[1870,49,1870,54,[0,[[1870,49,1870,51,[2,[],"go"]],[1870,52,1870,54,[2,[],"to"]]]]]]]]]]]]]],[[1872,9,1872,22,[12,[[],"GenericType"],[[1872,21,1872,22,[11,"s"]]]]],[1873,13,1873,58,[0,[[1873,13,1873,24,[2,[],"makeTypeVar"]],[1873,25,1873,56,[2,[],"constrainedTypeVarsAreRespected"]],[1873,57,1873,58,[2,[],"s"]]]]]]]]]]]]]]]]]],[1876,1,1939,33,[0,[[1,[1876,1,1877,3,"{-| Canonicalize a type, dereferencing all aliases.\n-}"]],[1,[1878,1,1878,60,[[1878,1,1878,16,"dereferenceType"],[1878,19,1878,60,[6,[1878,19,1878,32,[1,[1878,19,1878,32,[[],"ModuleContext"]],[]]],[1878,36,1878,60,[6,[1878,36,1878,40,[1,[1878,36,1878,40,[[],"Type"]],[]]],[1878,44,1878,60,[1,[1878,44,1878,60,[[],"DereferencedType"]],[]]]]]]]]]],[1879,1,1939,33,[[1879,1,1879,16,"dereferenceType"],[[1879,17,1879,24,[11,"context"]],[1879,25,1879,30,[11,"type_"]]],[1880,5,1939,33,[16,[[[1881,9,1892,31,[0,[[0],[1,[1881,9,1881,48,[[1881,9,1881,19,"dropFields"],[1881,22,1881,48,[6,[1881,22,1881,32,[1,[1881,22,1881,25,[[],"Set"]],[[1881,26,1881,32,[1,[1881,26,1881,32,[[],"String"]],[]]]]]],[1881,36,1881,48,[6,[1881,36,1881,40,[1,[1881,36,1881,40,[[],"Type"]],[]]],[1881,44,1881,48,[1,[1881,44,1881,48,[[],"Type"]],[]]]]]]]]]],[1882,9,1892,31,[[1882,9,1882,19,"dropFields"],[[1882,20,1882,26,[11,"toDrop"]],[1882,27,1882,28,[11,"t"]]],[1883,13,1892,31,[17,[[1883,18,1883,19,[2,[],"t"]],[[[1884,17,1884,29,[12,[[],"RecordType"],[[1884,28,1884,29,[11,"r"]]]]],[1885,21,1889,26,[0,[[1885,21,1885,31,[2,[],"RecordType"]],[1886,25,1889,26,[21,[1886,27,1886,28,"r"],[[1887,31,1888,29,[[1887,31,1887,37,"fields"],[1887,40,1887,102,[0,[[1887,40,1887,51,[2,["List"],"filter"]],[1887,52,1887,93,[7,[1887,53,1887,92,[18,[[[1887,54,1887,62,[7,[[1887,56,1887,57,[11,"f"]],[1887,59,1887,60,[0]]]]]],[1887,66,1887,92,[1,"<|",1,[1887,66,1887,69,[2,[],"not"]],[1887,73,1887,92,[0,[[1887,73,1887,83,[2,["Set"],"member"]],[1887,84,1887,85,[2,[],"f"]],[1887,86,1887,92,[2,[],"toDrop"]]]]]]]]]]]],[1887,94,1887,102,[19,[1887,94,1887,95,[2,[],"r"]],[1887,96,1887,102,"fields"]]]]]]]],[1888,31,1889,25,[[1888,31,1888,38,"generic"],[1888,41,1888,80,[0,[[1888,41,1888,50,[2,["Maybe"],"map"]],[1888,51,1888,70,[7,[1888,52,1888,69,[0,[[1888,52,1888,62,[2,[],"dropFields"]],[1888,63,1888,69,[2,[],"toDrop"]]]]]]],[1888,71,1888,80,[19,[1888,71,1888,72,[2,[],"r"]],[1888,73,1888,80,"generic"]]]]]]]]]]]]]]],[[1891,17,1891,27,[11,"notARecord"]],[1892,21,1892,31,[2,[],"notARecord"]]]]]]]]]]]],[1894,9,1937,22,[0,[[0],[1,[1894,9,1894,26,[[1894,9,1894,11,"go"],[1894,14,1894,26,[6,[1894,14,1894,18,[1,[1894,14,1894,18,[[],"Type"]],[]]],[1894,22,1894,26,[1,[1894,22,1894,26,[[],"Type"]],[]]]]]]]],[1895,9,1937,22,[[1895,9,1895,11,"go"],[[1895,12,1895,13,[11,"t"]]],[1896,13,1937,22,[17,[[1896,18,1896,19,[2,[],"t"]],[[[1897,17,1897,42,[12,[[],"FunctionType"],[[1897,30,1897,42,[8,[[1897,32,1897,36,"from"],[1897,38,1897,40,"to"]]]]]]],[1898,21,1898,64,[0,[[1898,21,1898,33,[2,[],"FunctionType"]],[1898,34,1898,64,[8,[[1898,36,1898,50,[[1898,36,1898,40,"from"],[1898,43,1898,50,[0,[[1898,43,1898,45,[2,[],"go"]],[1898,46,1898,50,[2,[],"from"]]]]]]],[1898,52,1898,63,[[1898,52,1898,54,"to"],[1898,57,1898,62,[0,[[1898,57,1898,59,[2,[],"go"]],[1898,60,1898,62,[2,[],"to"]]]]]]]]]]]]]],[[1900,17,1900,29,[12,[[],"TupleType"],[[1900,27,1900,29,[11,"ts"]]]]],[1901,21,1901,48,[1,"<|",1,[1901,21,1901,30,[2,[],"TupleType"]],[1901,34,1901,48,[0,[[1901,34,1901,42,[2,["List"],"map"]],[1901,43,1901,45,[2,[],"go"]],[1901,46,1901,48,[2,[],"ts"]]]]]]]],[[1903,17,1903,28,[12,[[],"ListType"],[[1903,26,1903,28,[11,"t_"]]]]],[1904,21,1904,38,[1,"<|",1,[1904,21,1904,29,[2,[],"ListType"]],[1904,33,1904,38,[0,[[1904,33,1904,35,[2,[],"go"]],[1904,36,1904,38,[2,[],"t_"]]]]]]]],[[1906,17,1906,50,[12,[[],"NamedType"],[[1906,27,1906,47,[7,[[1906,29,1906,39,[11,"moduleName"]],[1906,41,1906,45,[11,"name"]]]]],[1906,48,1906,50,[11,"ts"]]]]],[1907,21,1917,82,[16,[[[1908,25,1910,43,[0,[[0],[1,[1908,25,1908,40,[[1908,25,1908,28,"ts_"],[1908,31,1908,40,[1,[1908,31,1908,35,[[],"List"]],[[1908,36,1908,40,[1,[1908,36,1908,40,[[],"Type"]],[]]]]]]]]],[1909,25,1910,43,[[1909,25,1909,28,"ts_"],[],[1910,29,1910,43,[0,[[1910,29,1910,37,[2,["List"],"map"]],[1910,38,1910,40,[2,[],"go"]],[1910,41,1910,43,[2,[],"ts"]]]]]]]]]]],[1912,21,1917,82,[1,"|>",0,[1912,21,1915,74,[1,"|>",0,[1912,21,1913,57,[1,"|>",0,[1912,21,1912,56,[0,[[1912,21,1912,29,[2,["Dict"],"get"]],[1912,30,1912,40,[2,[],"moduleName"]],[1912,41,1912,56,[19,[1912,41,1912,48,[2,[],"context"]],[1912,49,1912,56,"aliases"]]]]]],[1913,28,1913,57,[0,[[1913,28,1913,41,[2,["Maybe"],"andThen"]],[1913,42,1913,57,[7,[1913,43,1913,56,[0,[[1913,43,1913,51,[2,["Dict"],"get"]],[1913,52,1913,56,[2,[],"name"]]]]]]]]]]]],[1915,28,1915,74,[0,[[1915,28,1915,37,[2,["Maybe"],"map"]],[1915,38,1915,74,[7,[1915,39,1915,73,[1,"<<",0,[1915,39,1915,41,[2,[],"go"]],[1915,45,1915,73,[0,[[1915,45,1915,69,[2,[],"assignPositionalTypeVars"]],[1915,70,1915,73,[2,[],"ts_"]]]]]]]]]]]]]],[1917,28,1917,82,[0,[[1917,28,1917,45,[2,["Maybe"],"withDefault"]],[1917,46,1917,82,[7,[1917,47,1917,81,[0,[[1917,47,1917,56,[2,[],"NamedType"]],[1917,57,1917,77,[6,[[1917,59,1917,69,[2,[],"moduleName"]],[1917,71,1917,75,[2,[],"name"]]]]],[1917,78,1917,81,[2,[],"ts_"]]]]]]]]]]]]]]]],[[1919,17,1919,29,[12,[[],"RecordType"],[[1919,28,1919,29,[11,"r"]]]]],[1920,21,1932,26,[16,[[[1921,25,1923,67,[0,[[0],[1,[1921,25,1921,55,[[1921,25,1921,31,"fields"],[1921,34,1921,55,[1,[1921,34,1921,38,[[],"List"]],[[1921,39,1921,55,[3,[[1921,41,1921,47,[1,[1921,41,1921,47,[[],"String"]],[]]],[1921,49,1921,53,[1,[1921,49,1921,53,[[],"Type"]],[]]]]]]]]]]]],[1922,25,1923,67,[[1922,25,1922,31,"fields"],[],[1923,29,1923,67,[0,[[1923,29,1923,37,[2,["List"],"map"]],[1923,38,1923,58,[7,[1923,39,1923,57,[0,[[1923,39,1923,54,[2,["Tuple"],"mapSecond"]],[1923,55,1923,57,[2,[],"go"]]]]]]],[1923,59,1923,67,[19,[1923,59,1923,60,[2,[],"r"]],[1923,61,1923,67,"fields"]]]]]]]]]]]],[1925,21,1932,26,[0,[[1925,21,1925,31,[2,[],"RecordType"]],[1926,25,1932,26,[21,[1926,27,1926,28,"r"],[[1927,31,1928,29,[[1927,31,1927,37,"fields"],[1927,40,1927,46,[2,[],"fields"]]]],[1928,31,1932,25,[[1928,31,1928,38,"generic"],[1929,33,1931,108,[1,"|>",0,[1929,33,1929,55,[0,[[1929,33,1929,42,[2,["Maybe"],"map"]],[1929,43,1929,45,[2,[],"go"]],[1929,46,1929,55,[19,[1929,46,1929,47,[2,[],"r"]],[1929,48,1929,55,"generic"]]]]]],[1931,40,1931,108,[0,[[1931,40,1931,49,[2,["Maybe"],"map"]],[1931,50,1931,108,[7,[1931,51,1931,107,[0,[[1931,51,1931,61,[2,[],"dropFields"]],[1931,62,1931,107,[7,[1931,63,1931,106,[1,"<|",1,[1931,63,1931,75,[2,["Set"],"fromList"]],[1931,79,1931,106,[0,[[1931,79,1931,87,[2,["List"],"map"]],[1931,88,1931,99,[2,["Tuple"],"first"]],[1931,100,1931,106,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[[1934,17,1934,18,[0]],[1937,21,1937,22,[2,[],"t"]]]]]]]]]]]]],[1939,5,1939,33,[1,"<|",1,[1939,5,1939,21,[2,[],"DereferencedType"]],[1939,25,1939,33,[0,[[1939,25,1939,27,[2,[],"go"]],[1939,28,1939,33,[2,[],"type_"]]]]]]]]]]]]]]],[1942,1,1949,19,[0,[[1,[1942,1,1943,3,"{-| Assign a list of positional type vars.\n-}"]],[1,[1944,1,1944,71,[[1944,1,1944,25,"assignPositionalTypeVars"],[1944,28,1944,71,[6,[1944,28,1944,37,[1,[1944,28,1944,32,[[],"List"]],[[1944,33,1944,37,[1,[1944,33,1944,37,[[],"Type"]],[]]]]]],[1944,41,1944,71,[6,[1944,41,1944,63,[1,[1944,41,1944,63,[[],"TypeWithPositionalVars"]],[]]],[1944,67,1944,71,[1,[1944,67,1944,71,[[],"Type"]],[]]]]]]]]]],[1945,1,1949,19,[[1945,1,1945,25,"assignPositionalTypeVars"],[[1945,26,1945,28,[11,"ts"]],[1945,29,1945,30,[11,"t"]]],[1946,5,1949,19,[1,"|>",0,[1946,5,1948,92,[1,"|>",0,[1946,5,1947,25,[1,"|>",0,[1946,5,1946,82,[0,[[1946,5,1946,20,[2,["List"],"indexedMap"]],[1946,21,1946,79,[7,[1946,22,1946,78,[18,[[[1946,23,1946,24,[11,"i"]]],[1946,28,1946,78,[0,[[1946,28,1946,38,[2,["Tuple"],"pair"]],[1946,39,1946,78,[7,[1946,40,1946,77,[1,"++",1,[1946,40,1946,57,[5,"positional arg "]],[1946,61,1946,77,[0,[[1946,61,1946,75,[2,["String"],"fromInt"]],[1946,76,1946,77,[2,[],"i"]]]]]]]]]]]]]]]]],[1946,80,1946,82,[2,[],"ts"]]]]],[1947,12,1947,25,[2,["Dict"],"fromList"]]]],[1948,12,1948,92,[7,[1948,13,1948,91,[18,[[[1948,14,1948,18,[11,"vars"]]],[1948,22,1948,91,[0,[[1948,22,1948,36,[2,[],"assignTypeVars"]],[1948,37,1948,41,[2,[],"vars"]],[1948,42,1948,91,[7,[1948,43,1948,90,[1,"<|",1,[1948,43,1948,59,[2,[],"DereferencedType"]],[1948,63,1948,90,[0,[[1948,63,1948,88,[2,[],"getTypeWithPositionalVars"]],[1948,89,1948,90,[2,[],"t"]]]]]]]]]]]]]]]]]]],[1949,12,1949,19,[2,[],"getType"]]]]]]]]],[1952,1,1958,25,[0,[[1,[1952,1,1954,3,"{-| Given a list of type vars (as string), create positional type vars from\nthem.\n-}"]],[1,[1955,1,1955,60,[[1955,1,1955,26,"makePositionalArgTypeVars"],[1955,29,1955,60,[6,[1955,29,1955,40,[1,[1955,29,1955,33,[[],"List"]],[[1955,34,1955,40,[1,[1955,34,1955,40,[[],"String"]],[]]]]]],[1955,44,1955,60,[1,[1955,44,1955,48,[[],"Dict"]],[[1955,49,1955,55,[1,[1955,49,1955,55,[[],"String"]],[]]],[1955,56,1955,60,[1,[1955,56,1955,60,[[],"Type"]],[]]]]]]]]]]],[1956,1,1958,25,[[1956,1,1956,26,"makePositionalArgTypeVars"],[],[1957,5,1958,25,[1,">>",1,[1957,5,1957,94,[0,[[1957,5,1957,20,[2,["List"],"indexedMap"]],[1957,21,1957,94,[7,[1957,22,1957,93,[18,[[[1957,23,1957,24,[11,"i"]],[1957,25,1957,26,[11,"s"]]],[1957,30,1957,93,[6,[[1957,32,1957,33,[2,[],"s"]],[1957,35,1957,91,[1,"<|",1,[1957,35,1957,50,[0,[[1957,35,1957,42,[2,[],"TypeVar"]],[1957,43,1957,50,[2,[],"Nothing"]]]]],[1957,54,1957,91,[1,"++",1,[1957,54,1957,71,[5,"positional arg "]],[1957,75,1957,91,[0,[[1957,75,1957,89,[2,["String"],"fromInt"]],[1957,90,1957,91,[2,[],"i"]]]]]]]]]]]]]]]]]]]],[1958,12,1958,25,[2,["Dict"],"fromList"]]]]]]]]],[1961,1,1996,44,[0,[[1,[1961,1,1962,3,"{-| Assign type vars to a type.\n-}"]],[1,[1963,1,1963,74,[[1963,1,1963,15,"assignTypeVars"],[1963,18,1963,74,[6,[1963,18,1963,34,[1,[1963,18,1963,22,[[],"Dict"]],[[1963,23,1963,29,[1,[1963,23,1963,29,[[],"String"]],[]]],[1963,30,1963,34,[1,[1963,30,1963,34,[[],"Type"]],[]]]]]],[1963,38,1963,74,[6,[1963,38,1963,54,[1,[1963,38,1963,54,[[],"DereferencedType"]],[]]],[1963,58,1963,74,[1,[1963,58,1963,74,[[],"DereferencedType"]],[]]]]]]]]]],[1964,1,1996,44,[[1964,1,1964,15,"assignTypeVars"],[[1964,16,1964,24,[11,"typeVars"]],[1964,25,1964,30,[11,"type_"]]],[1965,5,1996,44,[16,[[[1966,9,1994,29,[0,[[0],[1,[1966,9,1966,26,[[1966,9,1966,11,"go"],[1966,14,1966,26,[6,[1966,14,1966,18,[1,[1966,14,1966,18,[[],"Type"]],[]]],[1966,22,1966,26,[1,[1966,22,1966,26,[[],"Type"]],[]]]]]]]],[1967,9,1994,29,[[1967,9,1967,11,"go"],[[1967,12,1967,13,[11,"t"]]],[1968,13,1994,29,[17,[[1968,18,1968,19,[2,[],"t"]],[[[1969,17,1969,42,[12,[[],"FunctionType"],[[1969,30,1969,42,[8,[[1969,32,1969,36,"from"],[1969,38,1969,40,"to"]]]]]]],[1970,21,1970,64,[0,[[1970,21,1970,33,[2,[],"FunctionType"]],[1970,34,1970,64,[8,[[1970,36,1970,50,[[1970,36,1970,40,"from"],[1970,43,1970,50,[0,[[1970,43,1970,45,[2,[],"go"]],[1970,46,1970,50,[2,[],"from"]]]]]]],[1970,52,1970,63,[[1970,52,1970,54,"to"],[1970,57,1970,62,[0,[[1970,57,1970,59,[2,[],"go"]],[1970,60,1970,62,[2,[],"to"]]]]]]]]]]]]]],[[1972,17,1972,29,[12,[[],"TupleType"],[[1972,27,1972,29,[11,"ts"]]]]],[1973,21,1973,48,[1,"<|",1,[1973,21,1973,30,[2,[],"TupleType"]],[1973,34,1973,48,[0,[[1973,34,1973,42,[2,["List"],"map"]],[1973,43,1973,45,[2,[],"go"]],[1973,46,1973,48,[2,[],"ts"]]]]]]]],[[1975,17,1975,28,[12,[[],"ListType"],[[1975,26,1975,28,[11,"t_"]]]]],[1976,21,1976,38,[1,"<|",1,[1976,21,1976,29,[2,[],"ListType"]],[1976,33,1976,38,[0,[[1976,33,1976,35,[2,[],"go"]],[1976,36,1976,38,[2,[],"t_"]]]]]]]],[[1978,17,1978,50,[12,[[],"NamedType"],[[1978,27,1978,47,[7,[[1978,29,1978,39,[11,"moduleName"]],[1978,41,1978,45,[11,"name"]]]]],[1978,48,1978,50,[11,"ts"]]]]],[1979,21,1980,58,[1,"|>",0,[1979,21,1979,35,[0,[[1979,21,1979,29,[2,["List"],"map"]],[1979,30,1979,32,[2,[],"go"]],[1979,33,1979,35,[2,[],"ts"]]]]],[1980,28,1980,58,[0,[[1980,28,1980,37,[2,[],"NamedType"]],[1980,38,1980,58,[6,[[1980,40,1980,50,[2,[],"moduleName"]],[1980,52,1980,56,[2,[],"name"]]]]]]]]]]],[[1982,17,1982,29,[12,[[],"RecordType"],[[1982,28,1982,29,[11,"r"]]]]],[1983,21,1987,26,[0,[[1983,21,1983,31,[2,[],"RecordType"]],[1984,25,1987,26,[21,[1984,27,1984,28,"r"],[[1985,31,1986,29,[[1985,31,1985,37,"fields"],[1985,40,1985,78,[0,[[1985,40,1985,48,[2,["List"],"map"]],[1985,49,1985,69,[7,[1985,50,1985,68,[0,[[1985,50,1985,65,[2,["Tuple"],"mapSecond"]],[1985,66,1985,68,[2,[],"go"]]]]]]],[1985,70,1985,78,[19,[1985,70,1985,71,[2,[],"r"]],[1985,72,1985,78,"fields"]]]]]]]],[1986,31,1987,25,[[1986,31,1986,38,"generic"],[1986,41,1986,63,[0,[[1986,41,1986,50,[2,["Maybe"],"map"]],[1986,51,1986,53,[2,[],"go"]],[1986,54,1986,63,[19,[1986,54,1986,55,[2,[],"r"]],[1986,56,1986,63,"generic"]]]]]]]]]]]]]]],[[1989,17,1989,30,[12,[[],"TypeVar"],[[1989,25,1989,26,[0]],[1989,27,1989,30,[11,"var"]]]]],[1990,21,1991,47,[1,"|>",0,[1990,21,1990,42,[0,[[1990,21,1990,29,[2,["Dict"],"get"]],[1990,30,1990,33,[2,[],"var"]],[1990,34,1990,42,[2,[],"typeVars"]]]]],[1991,28,1991,47,[0,[[1991,28,1991,45,[2,["Maybe"],"withDefault"]],[1991,46,1991,47,[2,[],"t"]]]]]]]],[[1993,17,1993,25,[12,[[],"UnitType"],[]]],[1994,21,1994,29,[2,[],"UnitType"]]]]]]]]]]]]],[1996,5,1996,44,[1,"<|",1,[1996,5,1996,21,[2,[],"DereferencedType"]],[1996,25,1996,44,[1,"<|",1,[1996,25,1996,27,[2,[],"go"]],[1996,31,1996,44,[0,[[1996,31,1996,38,[2,[],"getType"]],[1996,39,1996,44,[2,[],"type_"]]]]]]]]]]]]]]]]],[1999,1,2034,44,[0,[[1,[1999,1,2001,3,"{-| Prefix a string before type variables so as to disambiguate them for type\nmatching.\n-}"]],[1,[2002,1,2002,64,[[2002,1,2002,15,"prefixTypeVars"],[2002,18,2002,64,[6,[2002,18,2002,24,[1,[2002,18,2002,24,[[],"String"]],[]]],[2002,28,2002,64,[6,[2002,28,2002,44,[1,[2002,28,2002,44,[[],"DereferencedType"]],[]]],[2002,48,2002,64,[1,[2002,48,2002,64,[[],"DereferencedType"]],[]]]]]]]]]],[2003,1,2034,44,[[2003,1,2003,15,"prefixTypeVars"],[[2003,16,2003,22,[11,"prefix"]],[2003,23,2003,28,[11,"type_"]]],[2004,5,2034,44,[16,[[[2005,9,2032,29,[0,[[0],[1,[2005,9,2005,26,[[2005,9,2005,11,"go"],[2005,14,2005,26,[6,[2005,14,2005,18,[1,[2005,14,2005,18,[[],"Type"]],[]]],[2005,22,2005,26,[1,[2005,22,2005,26,[[],"Type"]],[]]]]]]]],[2006,9,2032,29,[[2006,9,2006,11,"go"],[[2006,12,2006,13,[11,"t"]]],[2007,13,2032,29,[17,[[2007,18,2007,19,[2,[],"t"]],[[[2008,17,2008,42,[12,[[],"FunctionType"],[[2008,30,2008,42,[8,[[2008,32,2008,36,"from"],[2008,38,2008,40,"to"]]]]]]],[2009,21,2009,64,[0,[[2009,21,2009,33,[2,[],"FunctionType"]],[2009,34,2009,64,[8,[[2009,36,2009,50,[[2009,36,2009,40,"from"],[2009,43,2009,50,[0,[[2009,43,2009,45,[2,[],"go"]],[2009,46,2009,50,[2,[],"from"]]]]]]],[2009,52,2009,63,[[2009,52,2009,54,"to"],[2009,57,2009,62,[0,[[2009,57,2009,59,[2,[],"go"]],[2009,60,2009,62,[2,[],"to"]]]]]]]]]]]]]],[[2011,17,2011,29,[12,[[],"TupleType"],[[2011,27,2011,29,[11,"ts"]]]]],[2012,21,2012,48,[1,"<|",1,[2012,21,2012,30,[2,[],"TupleType"]],[2012,34,2012,48,[0,[[2012,34,2012,42,[2,["List"],"map"]],[2012,43,2012,45,[2,[],"go"]],[2012,46,2012,48,[2,[],"ts"]]]]]]]],[[2014,17,2014,28,[12,[[],"ListType"],[[2014,26,2014,28,[11,"t_"]]]]],[2015,21,2015,38,[1,"<|",1,[2015,21,2015,29,[2,[],"ListType"]],[2015,33,2015,38,[0,[[2015,33,2015,35,[2,[],"go"]],[2015,36,2015,38,[2,[],"t_"]]]]]]]],[[2017,17,2017,50,[12,[[],"NamedType"],[[2017,27,2017,47,[7,[[2017,29,2017,39,[11,"moduleName"]],[2017,41,2017,45,[11,"name"]]]]],[2017,48,2017,50,[11,"ts"]]]]],[2018,21,2019,58,[1,"|>",0,[2018,21,2018,35,[0,[[2018,21,2018,29,[2,["List"],"map"]],[2018,30,2018,32,[2,[],"go"]],[2018,33,2018,35,[2,[],"ts"]]]]],[2019,28,2019,58,[0,[[2019,28,2019,37,[2,[],"NamedType"]],[2019,38,2019,58,[6,[[2019,40,2019,50,[2,[],"moduleName"]],[2019,52,2019,56,[2,[],"name"]]]]]]]]]]],[[2021,17,2021,29,[12,[[],"RecordType"],[[2021,28,2021,29,[11,"r"]]]]],[2022,21,2026,26,[0,[[2022,21,2022,31,[2,[],"RecordType"]],[2023,25,2026,26,[21,[2023,27,2023,28,"r"],[[2024,31,2025,29,[[2024,31,2024,37,"fields"],[2024,40,2024,78,[0,[[2024,40,2024,48,[2,["List"],"map"]],[2024,49,2024,69,[7,[2024,50,2024,68,[0,[[2024,50,2024,65,[2,["Tuple"],"mapSecond"]],[2024,66,2024,68,[2,[],"go"]]]]]]],[2024,70,2024,78,[19,[2024,70,2024,71,[2,[],"r"]],[2024,72,2024,78,"fields"]]]]]]]],[2025,31,2026,25,[[2025,31,2025,38,"generic"],[2025,41,2025,63,[0,[[2025,41,2025,50,[2,["Maybe"],"map"]],[2025,51,2025,53,[2,[],"go"]],[2025,54,2025,63,[19,[2025,54,2025,55,[2,[],"r"]],[2025,56,2025,63,"generic"]]]]]]]]]]]]]]],[[2028,17,2028,34,[12,[[],"TypeVar"],[[2028,25,2028,30,[11,"class"]],[2028,31,2028,34,[11,"var"]]]]],[2029,21,2029,50,[0,[[2029,21,2029,28,[2,[],"TypeVar"]],[2029,29,2029,34,[2,[],"class"]],[2029,35,2029,50,[7,[2029,36,2029,49,[1,"++",1,[2029,36,2029,42,[2,[],"prefix"]],[2029,46,2029,49,[2,[],"var"]]]]]]]]]],[[2031,17,2031,25,[12,[[],"UnitType"],[]]],[2032,21,2032,29,[2,[],"UnitType"]]]]]]]]]]]]],[2034,5,2034,44,[1,"<|",1,[2034,5,2034,21,[2,[],"DereferencedType"]],[2034,25,2034,44,[1,"<|",1,[2034,25,2034,27,[2,[],"go"]],[2034,31,2034,44,[0,[[2034,31,2034,38,[2,[],"getType"]],[2034,39,2034,44,[2,[],"type_"]]]]]]]]]]]]]]]]],[2037,1,2041,6,[0,[[1,[2037,1,2038,3,"{-| Unwrap a `DereferencedType`.\n-}"]],[1,[2039,1,2039,35,[[2039,1,2039,8,"getType"],[2039,11,2039,35,[6,[2039,11,2039,27,[1,[2039,11,2039,27,[[],"DereferencedType"]],[]]],[2039,31,2039,35,[1,[2039,31,2039,35,[[],"Type"]],[]]]]]]]],[2040,1,2041,6,[[2040,1,2040,8,"getType"],[[2040,9,2040,29,[14,[2040,10,2040,28,[12,[[],"DereferencedType"],[[2040,27,2040,28,[11,"t"]]]]]]]],[2041,5,2041,6,[2,[],"t"]]]]]]],[2044,1,2048,6,[0,[[1,[2044,1,2045,3,"{-| Unwrap a `TypeWithPositionalVars`.\n-}"]],[1,[2046,1,2046,59,[[2046,1,2046,26,"getTypeWithPositionalVars"],[2046,29,2046,59,[6,[2046,29,2046,51,[1,[2046,29,2046,51,[[],"TypeWithPositionalVars"]],[]]],[2046,55,2046,59,[1,[2046,55,2046,59,[[],"Type"]],[]]]]]]]],[2047,1,2048,6,[[2047,1,2047,26,"getTypeWithPositionalVars"],[[2047,27,2047,53,[14,[2047,28,2047,52,[12,[[],"TypeWithPositionalVars"],[[2047,51,2047,52,[11,"t"]]]]]]]],[2048,5,2048,6,[2,[],"t"]]]]]]],[2051,1,2070,85,[0,[[1,[2051,1,2053,3,"{-| Check the arguments to a function (for unsorted patterns) and its\nexpression, possibly having been given a type annotation.\n-}"]],[1,[2054,1,2054,141,[[2054,1,2054,25,"checkFunctionArgsAndExpr"],[2054,28,2054,141,[6,[2054,28,2054,38,[1,[2054,28,2054,38,[[],"RuleConfig"]],[]]],[2054,42,2054,141,[6,[2054,42,2054,54,[1,[2054,42,2054,54,[[],"LocalContext"]],[]]],[2054,58,2054,141,[6,[2054,58,2054,80,[1,[2054,58,2054,63,[[],"Maybe"]],[[2054,64,2054,80,[1,[2054,64,2054,80,[[],"DereferencedType"]],[]]]]]],[2054,84,2054,141,[6,[2054,84,2054,103,[1,[2054,84,2054,88,[[],"List"]],[[2054,89,2054,103,[1,[2054,90,2054,94,[[],"Node"]],[[2054,95,2054,102,[1,[2054,95,2054,102,[[],"Pattern"]],[]]]]]]]]],[2054,107,2054,141,[6,[2054,107,2054,122,[1,[2054,107,2054,111,[[],"Node"]],[[2054,112,2054,122,[1,[2054,112,2054,122,[[],"Expression"]],[]]]]]],[2054,126,2054,141,[1,[2054,126,2054,130,[[],"List"]],[[2054,131,2054,141,[1,[2054,132,2054,137,[[],"Error"]],[[2054,138,2054,140,[4,[]]]]]]]]]]]]]]]]]]]]]],[2055,1,2070,85,[[2055,1,2055,25,"checkFunctionArgsAndExpr"],[[2055,26,2055,32,[11,"config"]],[2055,33,2055,38,[11,"local"]],[2055,39,2055,46,[11,"hasType"]],[2055,47,2055,51,[11,"args"]],[2055,52,2055,56,[11,"expr"]]],[2056,5,2070,85,[16,[[[2057,9,2061,95,[1,[2057,9,2057,31,[7,[[2057,11,2057,19,[11,"argTypes"]],[2057,21,2057,29,[11,"exprType"]]]]],[2058,13,2061,95,[1,"|>",0,[2058,13,2060,66,[1,"|>",0,[2058,13,2059,67,[1,"|>",0,[2058,13,2058,50,[0,[[2058,13,2058,22,[2,["Maybe"],"map"]],[2058,23,2058,42,[2,[],"flattenFunctionType"]],[2058,43,2058,50,[2,[],"hasType"]]]]],[2059,20,2059,67,[0,[[2059,20,2059,33,[2,["Maybe"],"andThen"]],[2059,34,2059,67,[7,[2059,35,2059,66,[0,[[2059,35,2059,61,[2,[],"partiallyApplyArgsAndTypes"]],[2059,62,2059,66,[2,[],"args"]]]]]]]]]]]],[2060,20,2060,66,[0,[[2060,20,2060,29,[2,["Maybe"],"map"]],[2060,30,2060,66,[7,[2060,31,2060,65,[0,[[2060,31,2060,44,[2,["Tuple"],"mapBoth"]],[2060,45,2060,60,[7,[2060,46,2060,59,[0,[[2060,46,2060,54,[2,["List"],"map"]],[2060,55,2060,59,[2,[],"Just"]]]]]]],[2060,61,2060,65,[2,[],"Just"]]]]]]]]]]]],[2061,20,2061,95,[0,[[2061,20,2061,42,[2,["MaybeX"],"withDefaultLazy"]],[2061,43,2061,95,[7,[2061,44,2061,94,[18,[[[2061,45,2061,47,[1]]],[2061,51,2061,94,[6,[[2061,53,2061,83,[0,[[2061,53,2061,61,[2,["List"],"map"]],[2061,62,2061,78,[7,[2061,63,2061,77,[0,[[2061,63,2061,69,[2,[],"always"]],[2061,70,2061,77,[2,[],"Nothing"]]]]]]],[2061,79,2061,83,[2,[],"args"]]]]],[2061,85,2061,92,[2,[],"Nothing"]]]]]]]]]]]]]]]]],[2063,9,2067,33,[0,[[0],[1,[2063,9,2063,39,[[2063,9,2063,20,"newBindings"],[2063,23,2063,39,[1,[2063,23,2063,27,[[],"Dict"]],[[2063,28,2063,34,[1,[2063,28,2063,34,[[],"String"]],[]]],[2063,35,2063,39,[1,[2063,35,2063,39,[[],"Type"]],[]]]]]]]]],[2064,9,2067,33,[[2064,9,2064,20,"newBindings"],[],[2065,13,2067,33,[1,"|>",0,[2065,13,2066,31,[1,"|>",0,[2065,13,2065,78,[0,[[2065,13,2065,22,[2,["List"],"map2"]],[2065,23,2065,64,[7,[2065,24,2065,63,[0,[[2065,24,2065,49,[2,[],"bindingsInPatternWithType"]],[2065,50,2065,63,[19,[2065,50,2065,55,[2,[],"local"]],[2065,56,2065,63,"context"]]]]]]]],[2065,65,2065,69,[2,[],"args"]],[2065,70,2065,78,[2,[],"argTypes"]]]]],[2066,20,2066,31,[2,["List"],"concat"]]]],[2067,20,2067,33,[2,["Dict"],"fromList"]]]]]]]]]],[2069,5,2070,85,[1,"++",1,[2069,5,2069,114,[0,[[2069,5,2069,20,[2,[],"checkExpression"]],[2069,21,2069,27,[2,[],"config"]],[2069,28,2069,100,[21,[2069,30,2069,35,"local"],[[2069,38,2069,99,[[2069,38,2069,52,"localFunctions"],[2069,55,2069,98,[0,[[2069,55,2069,65,[2,["Dict"],"union"]],[2069,66,2069,86,[19,[2069,66,2069,71,[2,[],"local"]],[2069,72,2069,86,"localFunctions"]]],[2069,87,2069,98,[2,[],"newBindings"]]]]]]]]]],[2069,101,2069,109,[2,[],"exprType"]],[2069,110,2069,114,[2,[],"expr"]]]]],[2070,12,2070,85,[0,[[2070,12,2070,23,[2,["List"],"concat"]],[2070,24,2070,85,[7,[2070,25,2070,84,[0,[[2070,25,2070,34,[2,["List"],"map2"]],[2070,35,2070,70,[7,[2070,36,2070,69,[0,[[2070,36,2070,48,[2,[],"checkPattern"]],[2070,49,2070,55,[2,[],"config"]],[2070,56,2070,69,[19,[2070,56,2070,61,[2,[],"local"]],[2070,62,2070,69,"context"]]]]]]]],[2070,71,2070,79,[2,[],"argTypes"]],[2070,80,2070,84,[2,[],"args"]]]]]]]]]]]]]]]]]]]],[2073,1,2088,13,[0,[[1,[2073,1,2075,3,"{-| Given a list of arguments and a flattened function type, return a list of\nargument types and the final function type.\n-}"]],[1,[2076,1,2076,114,[[2076,1,2076,27,"partiallyApplyArgsAndTypes"],[2076,30,2076,114,[6,[2076,30,2076,36,[1,[2076,30,2076,34,[[],"List"]],[[2076,35,2076,36,[0,"a"]]]]],[2076,40,2076,114,[6,[2076,40,2076,61,[1,[2076,40,2076,44,[[],"List"]],[[2076,45,2076,61,[1,[2076,45,2076,61,[[],"DereferencedType"]],[]]]]]],[2076,65,2076,114,[1,[2076,65,2076,70,[[],"Maybe"]],[[2076,71,2076,114,[3,[[2076,73,2076,94,[1,[2076,73,2076,77,[[],"List"]],[[2076,78,2076,94,[1,[2076,78,2076,94,[[],"DereferencedType"]],[]]]]]],[2076,96,2076,112,[1,[2076,96,2076,112,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2077,1,2088,13,[[2077,1,2077,27,"partiallyApplyArgsAndTypes"],[[2077,28,2077,32,[11,"args"]],[2077,33,2077,38,[11,"types"]]],[2078,5,2088,13,[1,"|>",0,[2078,5,2079,41,[1,"|>",0,[2078,5,2078,21,[0,[[2078,5,2078,16,[2,["List"],"length"]],[2078,17,2078,21,[2,[],"args"]]]]],[2079,12,2079,41,[7,[2079,13,2079,40,[18,[[[2079,14,2079,15,[11,"i"]]],[2079,19,2079,40,[0,[[2079,19,2079,32,[2,["ListX"],"splitAt"]],[2079,33,2079,34,[2,[],"i"]],[2079,35,2079,40,[2,[],"types"]]]]]]]]]]]],[2080,12,2088,13,[7,[2080,13,2087,55,[18,[[[2080,14,2080,34,[7,[[2080,16,2080,24,[11,"argTypes"]],[2080,26,2080,32,[11,"return"]]]]]],[2081,17,2087,55,[1,"|>",0,[2081,17,2086,26,[1,"|>",0,[2081,17,2081,40,[0,[[2081,17,2081,33,[2,["ListX"],"unconsLast"]],[2081,34,2081,40,[2,[],"return"]]]]],[2082,24,2086,26,[0,[[2082,24,2082,33,[2,["Maybe"],"map"]],[2083,25,2086,26,[7,[2083,26,2085,48,[1,">>",1,[2083,26,2083,66,[0,[[2083,26,2083,39,[2,["Tuple"],"mapBoth"]],[2083,40,2083,47,[2,[],"getType"]],[2083,48,2083,66,[7,[2083,49,2083,65,[0,[[2083,49,2083,57,[2,["List"],"map"]],[2083,58,2083,65,[2,[],"getType"]]]]]]]]]],[2084,32,2085,48,[1,">>",1,[2084,32,2084,69,[7,[2084,33,2084,68,[18,[[[2084,34,2084,43,[7,[[2084,36,2084,37,[11,"r"]],[2084,39,2084,41,[11,"ts"]]]]]],[2084,47,2084,68,[0,[[2084,47,2084,63,[2,[],"makeFunctionType"]],[2084,64,2084,65,[2,[],"r"]],[2084,66,2084,68,[2,[],"ts"]]]]]]]]]],[2085,32,2085,48,[2,[],"DereferencedType"]]]]]]]]]]]]],[2087,24,2087,55,[0,[[2087,24,2087,33,[2,["Maybe"],"map"]],[2087,34,2087,55,[7,[2087,35,2087,54,[0,[[2087,35,2087,45,[2,["Tuple"],"pair"]],[2087,46,2087,54,[2,[],"argTypes"]]]]]]]]]]]]]]]]]]]]]]]],[2091,1,2164,15,[0,[[1,[2091,1,2092,3,"{-| Get all new bindings and their types from a pattern.\n-}"]],[1,[2093,1,2093,109,[[2093,1,2093,26,"bindingsInPatternWithType"],[2093,29,2093,109,[6,[2093,29,2093,42,[1,[2093,29,2093,42,[[],"ModuleContext"]],[]]],[2093,46,2093,109,[6,[2093,46,2093,58,[1,[2093,46,2093,50,[[],"Node"]],[[2093,51,2093,58,[1,[2093,51,2093,58,[[],"Pattern"]],[]]]]]],[2093,62,2093,109,[6,[2093,62,2093,84,[1,[2093,62,2093,67,[[],"Maybe"]],[[2093,68,2093,84,[1,[2093,68,2093,84,[[],"DereferencedType"]],[]]]]]],[2093,88,2093,109,[1,[2093,88,2093,92,[[],"List"]],[[2093,93,2093,109,[3,[[2093,95,2093,101,[1,[2093,95,2093,101,[[],"String"]],[]]],[2093,103,2093,107,[1,[2093,103,2093,107,[[],"Type"]],[]]]]]]]]]]]]]]]]]],[2094,1,2164,15,[[2094,1,2094,26,"bindingsInPatternWithType"],[[2094,27,2094,34,[11,"context"]],[2094,35,2094,42,[11,"pattern"]],[2094,43,2094,48,[11,"type_"]]],[2095,5,2164,15,[16,[[[2096,9,2098,46,[0,[[0],[1,[2096,9,2096,77,[[2096,9,2096,11,"go"],[2096,14,2096,77,[6,[2096,14,2096,26,[1,[2096,14,2096,18,[[],"Node"]],[[2096,19,2096,26,[1,[2096,19,2096,26,[[],"Pattern"]],[]]]]]],[2096,30,2096,77,[6,[2096,30,2096,52,[1,[2096,30,2096,35,[[],"Maybe"]],[[2096,36,2096,52,[1,[2096,36,2096,52,[[],"DereferencedType"]],[]]]]]],[2096,56,2096,77,[1,[2096,56,2096,60,[[],"List"]],[[2096,61,2096,77,[3,[[2096,63,2096,69,[1,[2096,63,2096,69,[[],"String"]],[]]],[2096,71,2096,75,[1,[2096,71,2096,75,[[],"Type"]],[]]]]]]]]]]]]]]]],[2097,9,2098,46,[[2097,9,2097,11,"go"],[],[2098,13,2098,46,[0,[[2098,13,2098,38,[2,[],"bindingsInPatternWithType"]],[2098,39,2098,46,[2,[],"context"]]]]]]]]]],[2100,9,2104,40,[0,[[0],[1,[2100,9,2100,77,[[2100,9,2100,17,"makeType"],[2100,20,2100,77,[6,[2100,20,2100,26,[1,[2100,20,2100,26,[[],"String"]],[]]],[2100,30,2100,77,[6,[2100,30,2100,52,[1,[2100,30,2100,35,[[],"Maybe"]],[[2100,36,2100,52,[1,[2100,36,2100,52,[[],"DereferencedType"]],[]]]]]],[2100,56,2100,77,[1,[2100,56,2100,60,[[],"List"]],[[2100,61,2100,77,[3,[[2100,63,2100,69,[1,[2100,63,2100,69,[[],"String"]],[]]],[2100,71,2100,75,[1,[2100,71,2100,75,[[],"Type"]],[]]]]]]]]]]]]]]]],[2101,9,2104,40,[[2101,9,2101,17,"makeType"],[[2101,18,2101,19,[11,"n"]],[2101,20,2101,21,[11,"t"]]],[2102,13,2104,40,[1,"|>",0,[2102,13,2103,62,[1,"|>",0,[2102,13,2102,32,[0,[[2102,13,2102,22,[2,["Maybe"],"map"]],[2102,23,2102,30,[2,[],"getType"]],[2102,31,2102,32,[2,[],"t"]]]]],[2103,20,2103,62,[0,[[2103,20,2103,29,[2,["Maybe"],"map"]],[2103,30,2103,62,[7,[2103,31,2103,61,[1,"<<",0,[2103,31,2103,45,[2,["List"],"singleton"]],[2103,49,2103,61,[0,[[2103,49,2103,59,[2,["Tuple"],"pair"]],[2103,60,2103,61,[2,[],"n"]]]]]]]]]]]]]],[2104,20,2104,40,[0,[[2104,20,2104,37,[2,["Maybe"],"withDefault"]],[2104,38,2104,40,[9,[]]]]]]]]]]]]]],[2106,5,2164,15,[17,[[2106,10,2106,28,[0,[[2106,10,2106,20,[2,["Node"],"value"]],[2106,21,2106,28,[2,[],"pattern"]]]]],[[[2107,9,2107,23,[12,[[],"ListPattern"],[[2107,21,2107,23,[11,"ps"]]]]],[2108,13,2109,60,[1,"|>",0,[2108,13,2108,30,[0,[[2108,13,2108,24,[2,[],"getListType"]],[2108,25,2108,30,[2,[],"type_"]]]]],[2109,20,2109,60,[7,[2109,21,2109,59,[18,[[[2109,22,2109,23,[11,"t"]]],[2109,27,2109,59,[0,[[2109,27,2109,41,[2,["List"],"concatMap"]],[2109,42,2109,56,[7,[2109,43,2109,55,[18,[[[2109,44,2109,45,[11,"p"]]],[2109,49,2109,55,[0,[[2109,49,2109,51,[2,[],"go"]],[2109,52,2109,53,[2,[],"p"]],[2109,54,2109,55,[2,[],"t"]]]]]]]]]],[2109,57,2109,59,[2,[],"ps"]]]]]]]]]]]]],[[2111,9,2111,24,[12,[[],"TuplePattern"],[[2111,22,2111,24,[11,"ps"]]]]],[2112,13,2114,31,[1,"|>",0,[2112,13,2113,35,[1,"|>",0,[2112,13,2112,35,[0,[[2112,13,2112,26,[2,[],"getTupleTypes"]],[2112,27,2112,29,[2,[],"ps"]],[2112,30,2112,35,[2,[],"type_"]]]]],[2113,20,2113,35,[0,[[2113,20,2113,29,[2,["List"],"map2"]],[2113,30,2113,32,[2,[],"go"]],[2113,33,2113,35,[2,[],"ps"]]]]]]],[2114,20,2114,31,[2,["List"],"concat"]]]]],[[2116,9,2116,25,[12,[[],"RecordPattern"],[[2116,23,2116,25,[11,"ps"]]]]],[2117,13,2126,31,[1,"|>",0,[2117,13,2125,21,[1,"|>",0,[2117,13,2117,38,[0,[[2117,13,2117,32,[2,[],"getRecordFieldTypes"]],[2117,33,2117,38,[2,[],"type_"]]]]],[2118,20,2125,21,[7,[2118,21,2124,31,[18,[[[2118,22,2118,24,[11,"ts"]]],[2119,25,2124,31,[0,[[2119,25,2119,33,[2,["List"],"map"]],[2120,29,2123,30,[7,[2120,30,2122,63,[18,[[[2120,31,2120,32,[11,"p"]]],[2121,33,2122,63,[1,"|>",0,[2121,33,2121,59,[0,[[2121,33,2121,41,[2,["Dict"],"get"]],[2121,42,2121,56,[7,[2121,43,2121,55,[0,[[2121,43,2121,53,[2,["Node"],"value"]],[2121,54,2121,55,[2,[],"p"]]]]]]],[2121,57,2121,59,[2,[],"ts"]]]]],[2122,40,2122,63,[0,[[2122,40,2122,48,[2,[],"makeType"]],[2122,49,2122,63,[7,[2122,50,2122,62,[0,[[2122,50,2122,60,[2,["Node"],"value"]],[2122,61,2122,62,[2,[],"p"]]]]]]]]]]]]]]]]],[2124,29,2124,31,[2,[],"ps"]]]]]]]]]]]],[2126,20,2126,31,[2,["List"],"concat"]]]]],[[2128,9,2128,33,[12,[[],"NamedPattern"],[[2128,22,2128,30,[8,[[2128,24,2128,28,"name"]]]],[2128,31,2128,33,[11,"ps"]]]]],[2132,13,2136,90,[1,"|>",0,[2132,13,2134,41,[1,"|>",0,[2132,13,2133,68,[1,"|>",0,[2132,13,2132,99,[0,[[2132,13,2132,29,[2,[],"findFunctionType"]],[2132,30,2132,80,[8,[[2132,32,2132,49,[[2132,32,2132,39,"context"],[2132,42,2132,49,[2,[],"context"]]]],[2132,51,2132,79,[[2132,51,2132,65,"localFunctions"],[2132,68,2132,78,[2,["Dict"],"empty"]]]]]]],[2132,81,2132,86,[2,[],"type_"]],[2132,87,2132,94,[2,[],"pattern"]],[2132,95,2132,99,[2,[],"name"]]]]],[2133,20,2133,68,[0,[[2133,20,2133,29,[2,["Maybe"],"map"]],[2133,30,2133,68,[7,[2133,31,2133,67,[0,[[2133,31,2133,40,[2,["List"],"map2"]],[2133,41,2133,64,[7,[2133,42,2133,63,[18,[[[2133,43,2133,44,[11,"p"]],[2133,45,2133,46,[11,"t"]]],[2133,50,2133,63,[0,[[2133,50,2133,52,[2,[],"go"]],[2133,53,2133,54,[2,[],"p"]],[2133,55,2133,63,[7,[2133,56,2133,62,[0,[[2133,56,2133,60,[2,[],"Just"]],[2133,61,2133,62,[2,[],"t"]]]]]]]]]]]]]]],[2133,65,2133,67,[2,[],"ps"]]]]]]]]]]]],[2134,20,2134,41,[0,[[2134,20,2134,29,[2,["Maybe"],"map"]],[2134,30,2134,41,[2,["List"],"concat"]]]]]]],[2136,20,2136,90,[0,[[2136,20,2136,42,[2,["MaybeX"],"withDefaultLazy"]],[2136,43,2136,90,[7,[2136,44,2136,89,[18,[[[2136,45,2136,47,[1]]],[2136,51,2136,89,[0,[[2136,51,2136,65,[2,["List"],"concatMap"]],[2136,66,2136,86,[7,[2136,67,2136,85,[18,[[[2136,68,2136,69,[11,"p"]]],[2136,73,2136,85,[0,[[2136,73,2136,75,[2,[],"go"]],[2136,76,2136,77,[2,[],"p"]],[2136,78,2136,85,[2,[],"Nothing"]]]]]]]]]],[2136,87,2136,89,[2,[],"ps"]]]]]]]]]]]]]]]],[[2138,9,2138,27,[12,[[],"UnConsPattern"],[[2138,23,2138,24,[11,"p"]],[2138,25,2138,27,[11,"ps"]]]]],[2140,13,2141,49,[1,"|>",0,[2140,13,2140,30,[0,[[2140,13,2140,24,[2,[],"getListType"]],[2140,25,2140,30,[2,[],"type_"]]]]],[2141,20,2141,49,[7,[2141,21,2141,48,[18,[[[2141,22,2141,23,[11,"t"]]],[2141,27,2141,48,[1,"++",1,[2141,27,2141,33,[0,[[2141,27,2141,29,[2,[],"go"]],[2141,30,2141,31,[2,[],"p"]],[2141,32,2141,33,[2,[],"t"]]]]],[2141,37,2141,48,[0,[[2141,37,2141,39,[2,[],"go"]],[2141,40,2141,42,[2,[],"ps"]],[2141,43,2141,48,[2,[],"type_"]]]]]]]]]]]]]]],[[2143,9,2143,24,[12,[[],"VarPattern"],[[2143,20,2143,24,[11,"name"]]]]],[2145,13,2145,32,[0,[[2145,13,2145,21,[2,[],"makeType"]],[2145,22,2145,26,[2,[],"name"]],[2145,27,2145,32,[2,[],"type_"]]]]]],[[2147,9,2147,25,[12,[[],"AsPattern"],[[2147,19,2147,20,[11,"p"]],[2147,21,2147,25,[11,"name"]]]]],[2149,13,2149,59,[1,"++",1,[2149,13,2149,45,[0,[[2149,13,2149,21,[2,[],"makeType"]],[2149,22,2149,39,[7,[2149,23,2149,38,[0,[[2149,23,2149,33,[2,["Node"],"value"]],[2149,34,2149,38,[2,[],"name"]]]]]]],[2149,40,2149,45,[2,[],"type_"]]]]],[2149,49,2149,59,[0,[[2149,49,2149,51,[2,[],"go"]],[2149,52,2149,53,[2,[],"p"]],[2149,54,2149,59,[2,[],"type_"]]]]]]]],[[2151,9,2151,31,[12,[[],"ParenthesizedPattern"],[[2151,30,2151,31,[11,"p"]]]]],[2153,13,2153,23,[0,[[2153,13,2153,15,[2,[],"go"]],[2153,16,2153,17,[2,[],"p"]],[2153,18,2153,23,[2,[],"type_"]]]]]],[[2155,9,2155,10,[0]],[2164,13,2164,15,[9,[]]]]]]]]]]]]]]]],[2167,1,2243,15,[0,[[1,[2167,1,2168,3,"{-| Descend into type annotations, checking for unsorted records.\n-}"]],[1,[2169,1,2169,118,[[2169,1,2169,20,"checkTypeAnnotation"],[2169,23,2169,118,[6,[2169,23,2169,33,[1,[2169,23,2169,33,[[],"RuleConfig"]],[]]],[2169,37,2169,118,[6,[2169,37,2169,50,[1,[2169,37,2169,50,[[],"ModuleContext"]],[]]],[2169,54,2169,118,[6,[2169,54,2169,76,[1,[2169,54,2169,59,[[],"Maybe"]],[[2169,60,2169,76,[1,[2169,60,2169,76,[[],"DereferencedType"]],[]]]]]],[2169,80,2169,118,[6,[2169,80,2169,99,[1,[2169,80,2169,84,[[],"Node"]],[[2169,85,2169,99,[1,[2169,85,2169,99,[[],"TypeAnnotation"]],[]]]]]],[2169,103,2169,118,[1,[2169,103,2169,107,[[],"List"]],[[2169,108,2169,118,[1,[2169,109,2169,114,[[],"Error"]],[[2169,115,2169,117,[4,[]]]]]]]]]]]]]]]]]]]],[2170,1,2243,15,[[2170,1,2170,20,"checkTypeAnnotation"],[[2170,21,2170,27,[11,"config"]],[2170,28,2170,35,[11,"context"]],[2170,36,2170,53,[11,"hasTypeFromParent"]],[2170,54,2170,59,[11,"type_"]]],[2171,5,2243,15,[16,[[[2172,9,2174,47,[0,[[0],[1,[2172,9,2172,78,[[2172,9,2172,11,"go"],[2172,14,2172,78,[6,[2172,14,2172,36,[1,[2172,14,2172,19,[[],"Maybe"]],[[2172,20,2172,36,[1,[2172,20,2172,36,[[],"DereferencedType"]],[]]]]]],[2172,40,2172,78,[6,[2172,40,2172,59,[1,[2172,40,2172,44,[[],"Node"]],[[2172,45,2172,59,[1,[2172,45,2172,59,[[],"TypeAnnotation"]],[]]]]]],[2172,63,2172,78,[1,[2172,63,2172,67,[[],"List"]],[[2172,68,2172,78,[1,[2172,69,2172,74,[[],"Error"]],[[2172,75,2172,77,[4,[]]]]]]]]]]]]]]]],[2173,9,2174,47,[[2173,9,2173,11,"go"],[],[2174,13,2174,47,[0,[[2174,13,2174,32,[2,[],"checkTypeAnnotation"]],[2174,33,2174,39,[2,[],"config"]],[2174,40,2174,47,[2,[],"context"]]]]]]]]]],[2176,9,2185,27,[0,[[0],[1,[2176,9,2176,124,[[2176,9,2176,20,"checkFields"],[2176,23,2176,124,[6,[2176,23,2176,64,[1,[2176,23,2176,27,[[],"List"]],[[2176,28,2176,64,[3,[[2176,30,2176,41,[1,[2176,30,2176,34,[[],"Node"]],[[2176,35,2176,41,[1,[2176,35,2176,41,[[],"String"]],[]]]]]],[2176,43,2176,62,[1,[2176,43,2176,47,[[],"Node"]],[[2176,48,2176,62,[1,[2176,48,2176,62,[[],"TypeAnnotation"]],[]]]]]]]]]]]],[2176,68,2176,124,[6,[2176,68,2176,105,[3,[[2176,70,2176,85,[1,[2176,70,2176,74,[[],"List"]],[[2176,75,2176,85,[1,[2176,76,2176,81,[[],"Error"]],[[2176,82,2176,84,[4,[]]]]]]]]],[2176,87,2176,103,[1,[2176,87,2176,91,[[],"Dict"]],[[2176,92,2176,98,[1,[2176,92,2176,98,[[],"String"]],[]]],[2176,99,2176,103,[1,[2176,99,2176,103,[[],"Type"]],[]]]]]]]]],[2176,109,2176,124,[1,[2176,109,2176,113,[[],"List"]],[[2176,114,2176,124,[1,[2176,115,2176,120,[[],"Error"]],[[2176,121,2176,123,[4,[]]]]]]]]]]]]]]]],[2177,9,2185,27,[[2177,9,2177,20,"checkFields"],[[2177,21,2177,27,[11,"fields"]],[2177,28,2177,72,[7,[[2177,30,2177,41,[11,"parentError"]],[2177,43,2177,70,[11,"canonicalTypeInfoFromParent"]]]]]],[2178,13,2185,27,[1,"++",1,[2178,13,2178,24,[2,[],"parentError"]],[2179,20,2185,27,[0,[[2179,20,2179,34,[2,["List"],"concatMap"]],[2180,21,2184,22,[7,[2180,22,2183,78,[18,[[[2180,23,2180,35,[7,[[2180,25,2180,30,[11,"field"]],[2180,32,2180,33,[11,"a"]]]]]],[2181,25,2183,78,[1,"|>",0,[2181,25,2182,67,[1,"|>",0,[2181,25,2181,80,[0,[[2181,25,2181,33,[2,["Dict"],"get"]],[2181,34,2181,52,[7,[2181,35,2181,51,[0,[[2181,35,2181,45,[2,["Node"],"value"]],[2181,46,2181,51,[2,[],"field"]]]]]]],[2181,53,2181,80,[2,[],"canonicalTypeInfoFromParent"]]]]],[2182,32,2182,67,[0,[[2182,32,2182,41,[2,["Maybe"],"map"]],[2182,42,2182,67,[7,[2182,43,2182,66,[0,[[2182,43,2182,58,[2,[],"dereferenceType"]],[2182,59,2182,66,[2,[],"context"]]]]]]]]]]]],[2183,32,2183,78,[7,[2183,33,2183,77,[18,[[[2183,34,2183,35,[11,"t"]]],[2183,39,2183,77,[0,[[2183,39,2183,58,[2,[],"checkTypeAnnotation"]],[2183,59,2183,65,[2,[],"config"]],[2183,66,2183,73,[2,[],"context"]],[2183,74,2183,75,[2,[],"t"]],[2183,76,2183,77,[2,[],"a"]]]]]]]]]]]]]]]]],[2185,21,2185,27,[2,[],"fields"]]]]]]]]]]]]],[2187,5,2243,15,[17,[[2187,10,2187,26,[0,[[2187,10,2187,20,[2,["Node"],"value"]],[2187,21,2187,26,[2,[],"type_"]]]]],[[[2189,9,2189,19,[12,[[],"Record"],[[2189,16,2189,19,[11,"def"]]]]],[2190,13,2194,57,[1,"|>",0,[2190,13,2192,14,[7,[2190,14,2191,46,[1,"|>",0,[2190,14,2190,88,[0,[[2190,14,2190,34,[2,[],"recordDefToCheckable"]],[2190,35,2190,42,[2,[],"context"]],[2190,43,2190,61,[7,[2190,44,2190,60,[0,[[2190,44,2190,54,[2,["Node"],"range"]],[2190,55,2190,60,[2,[],"type_"]]]]]]],[2190,62,2190,66,[2,[],"True"]],[2190,67,2190,84,[2,[],"hasTypeFromParent"]],[2190,85,2190,88,[2,[],"def"]]]]],[2191,20,2191,46,[0,[[2191,20,2191,31,[2,[],"checkRecord"]],[2191,32,2191,38,[2,[],"config"]],[2191,39,2191,46,[2,[],"context"]]]]]]]]],[2194,20,2194,57,[0,[[2194,20,2194,31,[2,[],"checkFields"]],[2194,32,2194,57,[7,[2194,33,2194,56,[0,[[2194,33,2194,41,[2,["List"],"map"]],[2194,42,2194,52,[2,["Node"],"value"]],[2194,53,2194,56,[2,[],"def"]]]]]]]]]]]]],[[2196,9,2196,28,[12,[[],"GenericRecord"],[[2196,23,2196,24,[0]],[2196,25,2196,28,[11,"def"]]]]],[2197,13,2201,71,[1,"|>",0,[2197,13,2199,14,[7,[2197,14,2198,46,[1,"|>",0,[2197,14,2197,102,[0,[[2197,14,2197,34,[2,[],"recordDefToCheckable"]],[2197,35,2197,42,[2,[],"context"]],[2197,43,2197,61,[7,[2197,44,2197,60,[0,[[2197,44,2197,54,[2,["Node"],"range"]],[2197,55,2197,60,[2,[],"type_"]]]]]]],[2197,62,2197,67,[2,[],"False"]],[2197,68,2197,85,[2,[],"hasTypeFromParent"]],[2197,86,2197,102,[7,[2197,87,2197,101,[0,[[2197,87,2197,97,[2,["Node"],"value"]],[2197,98,2197,101,[2,[],"def"]]]]]]]]]],[2198,20,2198,46,[0,[[2198,20,2198,31,[2,[],"checkRecord"]],[2198,32,2198,38,[2,[],"config"]],[2198,39,2198,46,[2,[],"context"]]]]]]]]],[2201,20,2201,71,[0,[[2201,20,2201,31,[2,[],"checkFields"]],[2201,32,2201,71,[7,[2201,33,2201,70,[1,"<|",1,[2201,33,2201,52,[0,[[2201,33,2201,41,[2,["List"],"map"]],[2201,42,2201,52,[2,["Node"],"value"]]]]],[2201,56,2201,70,[0,[[2201,56,2201,66,[2,["Node"],"value"]],[2201,67,2201,70,[2,[],"def"]]]]]]]]]]]]]]],[[2204,9,2204,41,[12,[[],"FunctionTypeAnnotation"],[[2204,32,2204,37,[11,"fromA"]],[2204,38,2204,41,[11,"toA"]]]]],[2205,13,2214,47,[16,[[[2206,17,2212,49,[1,[2206,17,2206,37,[7,[[2206,19,2206,27,[11,"fromType"]],[2206,29,2206,35,[11,"toType"]]]]],[2207,21,2212,49,[17,[[2207,26,2207,61,[0,[[2207,26,2207,35,[2,["Maybe"],"map"]],[2207,36,2207,43,[2,[],"getType"]],[2207,44,2207,61,[2,[],"hasTypeFromParent"]]]]],[[[2208,25,2208,57,[12,[[],"Just"],[[2208,30,2208,57,[14,[2208,31,2208,56,[12,[[],"FunctionType"],[[2208,44,2208,56,[8,[[2208,46,2208,50,"from"],[2208,52,2208,54,"to"]]]]]]]]]]]],[2209,29,2209,91,[6,[[2209,31,2209,60,[1,"<|",1,[2209,31,2209,35,[2,[],"Just"]],[2209,39,2209,60,[0,[[2209,39,2209,55,[2,[],"DereferencedType"]],[2209,56,2209,60,[2,[],"from"]]]]]]],[2209,62,2209,89,[1,"<|",1,[2209,62,2209,66,[2,[],"Just"]],[2209,70,2209,89,[0,[[2209,70,2209,86,[2,[],"DereferencedType"]],[2209,87,2209,89,[2,[],"to"]]]]]]]]]]],[[2211,25,2211,26,[0]],[2212,29,2212,49,[6,[[2212,31,2212,38,[2,[],"Nothing"]],[2212,40,2212,47,[2,[],"Nothing"]]]]]]]]]]]]],[2214,13,2214,47,[1,"++",1,[2214,13,2214,30,[0,[[2214,13,2214,15,[2,[],"go"]],[2214,16,2214,24,[2,[],"fromType"]],[2214,25,2214,30,[2,[],"fromA"]]]]],[2214,34,2214,47,[0,[[2214,34,2214,36,[2,[],"go"]],[2214,37,2214,43,[2,[],"toType"]],[2214,44,2214,47,[2,[],"toA"]]]]]]]]]]],[[2216,9,2216,22,[12,[[],"Tupled"],[[2216,16,2216,22,[11,"types_"]]]]],[2218,13,2219,31,[1,"|>",0,[2218,13,2218,73,[0,[[2218,13,2218,22,[2,["List"],"map2"]],[2218,23,2218,25,[2,[],"go"]],[2218,26,2218,66,[7,[2218,27,2218,65,[0,[[2218,27,2218,40,[2,[],"getTupleTypes"]],[2218,41,2218,47,[2,[],"types_"]],[2218,48,2218,65,[2,[],"hasTypeFromParent"]]]]]]],[2218,67,2218,73,[2,[],"types_"]]]]],[2219,20,2219,31,[2,["List"],"concat"]]]]],[[2221,9,2221,23,[12,[[],"Typed"],[[2221,15,2221,16,[0]],[2221,17,2221,23,[11,"types_"]]]]],[2222,13,2236,31,[16,[[[2223,17,2233,61,[0,[[0],[1,[2223,17,2223,57,[[2223,17,2223,25,"typeVars"],[2223,28,2223,57,[1,[2223,28,2223,32,[[],"List"]],[[2223,33,2223,57,[1,[2223,34,2223,39,[[],"Maybe"]],[[2223,40,2223,56,[1,[2223,40,2223,56,[[],"DereferencedType"]],[]]]]]]]]]]]],[2224,17,2233,61,[[2224,17,2224,25,"typeVars"],[],[2225,21,2233,61,[17,[[2225,26,2225,61,[0,[[2225,26,2225,35,[2,["Maybe"],"map"]],[2225,36,2225,43,[2,[],"getType"]],[2225,44,2225,61,[2,[],"hasTypeFromParent"]]]]],[[[2226,25,2226,46,[12,[[],"Just"],[[2226,30,2226,46,[14,[2226,31,2226,45,[12,[[],"NamedType"],[[2226,41,2226,42,[0]],[2226,43,2226,45,[11,"ts"]]]]]]]]]],[2227,29,2227,67,[0,[[2227,29,2227,37,[2,["List"],"map"]],[2227,38,2227,64,[7,[2227,39,2227,63,[1,"<<",0,[2227,39,2227,43,[2,[],"Just"]],[2227,47,2227,63,[2,[],"DereferencedType"]]]]]],[2227,65,2227,67,[2,[],"ts"]]]]]],[[2229,25,2229,42,[12,[[],"Just"],[[2229,30,2229,42,[14,[2229,31,2229,41,[12,[[],"ListType"],[[2229,40,2229,41,[11,"t"]]]]]]]]]],[2230,29,2230,59,[9,[[2230,31,2230,57,[1,"<|",1,[2230,31,2230,35,[2,[],"Just"]],[2230,39,2230,57,[0,[[2230,39,2230,55,[2,[],"DereferencedType"]],[2230,56,2230,57,[2,[],"t"]]]]]]]]]]],[[2232,25,2232,26,[0]],[2233,29,2233,61,[0,[[2233,29,2233,37,[2,["List"],"map"]],[2233,38,2233,54,[7,[2233,39,2233,53,[0,[[2233,39,2233,45,[2,[],"always"]],[2233,46,2233,53,[2,[],"Nothing"]]]]]]],[2233,55,2233,61,[2,[],"types_"]]]]]]]]]]]]]]]],[2235,13,2236,31,[1,"|>",0,[2235,13,2235,41,[0,[[2235,13,2235,22,[2,["List"],"map2"]],[2235,23,2235,25,[2,[],"go"]],[2235,26,2235,34,[2,[],"typeVars"]],[2235,35,2235,41,[2,[],"types_"]]]]],[2236,20,2236,31,[2,["List"],"concat"]]]]]]]],[[2239,9,2239,22,[12,[[],"GenericType"],[[2239,21,2239,22,[0]]]]],[2240,13,2240,15,[9,[]]]],[[2242,9,2242,13,[12,[[],"Unit"],[]]],[2243,13,2243,15,[9,[]]]]]]]]]]]]]]]],[2246,1,2394,15,[0,[[1,[2246,1,2247,3,"{-| Descend into subexpressions, keeping as much type information as possible.\n-}"]],[1,[2248,1,2248,109,[[2248,1,2248,16,"checkExpression"],[2248,19,2248,109,[6,[2248,19,2248,29,[1,[2248,19,2248,29,[[],"RuleConfig"]],[]]],[2248,33,2248,109,[6,[2248,33,2248,45,[1,[2248,33,2248,45,[[],"LocalContext"]],[]]],[2248,49,2248,109,[6,[2248,49,2248,71,[1,[2248,49,2248,54,[[],"Maybe"]],[[2248,55,2248,71,[1,[2248,55,2248,71,[[],"DereferencedType"]],[]]]]]],[2248,75,2248,109,[6,[2248,75,2248,90,[1,[2248,75,2248,79,[[],"Node"]],[[2248,80,2248,90,[1,[2248,80,2248,90,[[],"Expression"]],[]]]]]],[2248,94,2248,109,[1,[2248,94,2248,98,[[],"List"]],[[2248,99,2248,109,[1,[2248,100,2248,105,[[],"Error"]],[[2248,106,2248,108,[4,[]]]]]]]]]]]]]]]]]]]],[2249,1,2394,15,[[2249,1,2249,16,"checkExpression"],[[2249,17,2249,23,[11,"config"]],[2249,24,2249,29,[11,"local"]],[2249,30,2249,37,[11,"hasType"]],[2249,38,2249,42,[11,"node"]]],[2250,5,2394,15,[16,[[[2251,9,2253,41,[0,[[0],[1,[2251,9,2251,74,[[2251,9,2251,11,"go"],[2251,14,2251,74,[6,[2251,14,2251,36,[1,[2251,14,2251,19,[[],"Maybe"]],[[2251,20,2251,36,[1,[2251,20,2251,36,[[],"DereferencedType"]],[]]]]]],[2251,40,2251,74,[6,[2251,40,2251,55,[1,[2251,40,2251,44,[[],"Node"]],[[2251,45,2251,55,[1,[2251,45,2251,55,[[],"Expression"]],[]]]]]],[2251,59,2251,74,[1,[2251,59,2251,63,[[],"List"]],[[2251,64,2251,74,[1,[2251,65,2251,70,[[],"Error"]],[[2251,71,2251,73,[4,[]]]]]]]]]]]]]]]],[2252,9,2253,41,[[2252,9,2252,11,"go"],[],[2253,13,2253,41,[0,[[2253,13,2253,28,[2,[],"checkExpression"]],[2253,29,2253,35,[2,[],"config"]],[2253,36,2253,41,[2,[],"local"]]]]]]]]]],[2255,9,2270,27,[0,[[0],[1,[2255,9,2255,152,[[2255,9,2255,20,"checkFields"],[2255,23,2255,152,[6,[2255,23,2255,51,[1,[2255,23,2255,27,[[],"Dict"]],[[2255,28,2255,34,[1,[2255,28,2255,34,[[],"String"]],[]]],[2255,35,2255,51,[1,[2255,35,2255,51,[[],"DereferencedType"]],[]]]]]],[2255,55,2255,152,[6,[2255,55,2255,92,[1,[2255,55,2255,59,[[],"List"]],[[2255,60,2255,92,[3,[[2255,62,2255,73,[1,[2255,62,2255,66,[[],"Node"]],[[2255,67,2255,73,[1,[2255,67,2255,73,[[],"String"]],[]]]]]],[2255,75,2255,90,[1,[2255,75,2255,79,[[],"Node"]],[[2255,80,2255,90,[1,[2255,80,2255,90,[[],"Expression"]],[]]]]]]]]]]]],[2255,96,2255,152,[6,[2255,96,2255,133,[3,[[2255,98,2255,113,[1,[2255,98,2255,102,[[],"List"]],[[2255,103,2255,113,[1,[2255,104,2255,109,[[],"Error"]],[[2255,110,2255,112,[4,[]]]]]]]]],[2255,115,2255,131,[1,[2255,115,2255,119,[[],"Dict"]],[[2255,120,2255,126,[1,[2255,120,2255,126,[[],"String"]],[]]],[2255,127,2255,131,[1,[2255,127,2255,131,[[],"Type"]],[]]]]]]]]],[2255,137,2255,152,[1,[2255,137,2255,141,[[],"List"]],[[2255,142,2255,152,[1,[2255,143,2255,148,[[],"Error"]],[[2255,149,2255,151,[4,[]]]]]]]]]]]]]]]]]],[2256,9,2270,27,[[2256,9,2256,20,"checkFields"],[[2256,21,2256,29,[11,"typeInfo"]],[2256,30,2256,36,[11,"fields"]],[2256,37,2256,81,[7,[[2256,39,2256,50,[11,"parentError"]],[2256,52,2256,79,[11,"canonicalTypeInfoFromParent"]]]]]],[2257,13,2270,27,[1,"++",1,[2257,13,2257,24,[2,[],"parentError"]],[2258,20,2270,27,[0,[[2258,20,2258,34,[2,["List"],"concatMap"]],[2259,21,2269,22,[7,[2259,22,2268,46,[18,[[[2259,23,2259,35,[7,[[2259,25,2259,30,[11,"field"]],[2259,32,2259,33,[11,"e"]]]]]],[2260,25,2268,46,[16,[[[2261,29,2263,49,[0,[[0],[1,[2261,29,2261,39,[[2261,29,2261,30,"f"],[2261,33,2261,39,[1,[2261,33,2261,39,[[],"String"]],[]]]]]],[2262,29,2263,49,[[2262,29,2262,30,"f"],[],[2263,33,2263,49,[0,[[2263,33,2263,43,[2,["Node"],"value"]],[2263,44,2263,49,[2,[],"field"]]]]]]]]]]],[2265,25,2268,46,[1,"|>",0,[2265,25,2267,78,[1,"|>",0,[2265,25,2266,73,[1,"|>",0,[2265,25,2265,63,[0,[[2265,25,2265,33,[2,["Dict"],"get"]],[2265,34,2265,35,[2,[],"f"]],[2265,36,2265,63,[2,[],"canonicalTypeInfoFromParent"]]]]],[2266,32,2266,73,[0,[[2266,32,2266,41,[2,["Maybe"],"map"]],[2266,42,2266,73,[7,[2266,43,2266,72,[0,[[2266,43,2266,58,[2,[],"dereferenceType"]],[2266,59,2266,72,[19,[2266,59,2266,64,[2,[],"local"]],[2266,65,2266,72,"context"]]]]]]]]]]]]],[2267,32,2267,78,[0,[[2267,32,2267,49,[2,["MaybeX"],"orElseLazy"]],[2267,50,2267,78,[7,[2267,51,2267,77,[18,[[[2267,52,2267,54,[1]]],[2267,58,2267,77,[0,[[2267,58,2267,66,[2,["Dict"],"get"]],[2267,67,2267,68,[2,[],"f"]],[2267,69,2267,77,[2,[],"typeInfo"]]]]]]]]]]]]]]],[2268,32,2268,46,[7,[2268,33,2268,45,[18,[[[2268,34,2268,35,[11,"t"]]],[2268,39,2268,45,[0,[[2268,39,2268,41,[2,[],"go"]],[2268,42,2268,43,[2,[],"t"]],[2268,44,2268,45,[2,[],"e"]]]]]]]]]]]]]]]]]]]],[2270,21,2270,27,[2,[],"fields"]]]]]]]]]]]]],[2272,5,2394,15,[17,[[2272,10,2272,25,[0,[[2272,10,2272,20,[2,["Node"],"value"]],[2272,21,2272,25,[2,[],"node"]]]]],[[[2274,9,2274,19,[12,[[],"Negation"],[[2274,18,2274,19,[11,"e"]]]]],[2276,13,2276,25,[0,[[2276,13,2276,15,[2,[],"go"]],[2276,16,2276,23,[2,[],"hasType"]],[2276,24,2276,25,[2,[],"e"]]]]]],[[2278,9,2278,34,[12,[[],"ParenthesizedExpression"],[[2278,33,2278,34,[11,"e"]]]]],[2280,13,2280,25,[0,[[2280,13,2280,15,[2,[],"go"]],[2280,16,2280,23,[2,[],"hasType"]],[2280,24,2280,25,[2,[],"e"]]]]]],[[2282,9,2282,20,[12,[[],"ListExpr"],[[2282,18,2282,20,[11,"es"]]]]],[2283,13,2289,41,[16,[[[2285,17,2287,40,[0,[[0],[1,[2285,17,2285,47,[[2285,17,2285,22,"type_"],[2285,25,2285,47,[1,[2285,25,2285,30,[[],"Maybe"]],[[2285,31,2285,47,[1,[2285,31,2285,47,[[],"DereferencedType"]],[]]]]]]]]],[2286,17,2287,40,[[2286,17,2286,22,"type_"],[],[2287,21,2287,40,[0,[[2287,21,2287,32,[2,[],"getListType"]],[2287,33,2287,40,[2,[],"hasType"]]]]]]]]]]],[2289,13,2289,41,[0,[[2289,13,2289,27,[2,["List"],"concatMap"]],[2289,28,2289,38,[7,[2289,29,2289,37,[0,[[2289,29,2289,31,[2,[],"go"]],[2289,32,2289,37,[2,[],"type_"]]]]]]],[2289,39,2289,41,[2,[],"es"]]]]]]]]],[[2291,9,2291,23,[12,[[],"Application"],[[2291,21,2291,23,[11,"es"]]]]],[2293,13,2293,58,[0,[[2293,13,2293,34,[2,[],"checkApplicationChain"]],[2293,35,2293,41,[2,[],"config"]],[2293,42,2293,47,[2,[],"local"]],[2293,48,2293,55,[2,[],"hasType"]],[2293,56,2293,58,[2,[],"es"]]]]]],[[2295,9,2295,39,[12,[[],"OperatorApplication"],[[2295,29,2295,31,[11,"op"]],[2295,32,2295,33,[0]],[2295,34,2295,36,[11,"e1"]],[2295,37,2295,39,[11,"e2"]]]]],[2297,13,2297,91,[0,[[2297,13,2297,37,[2,[],"checkOperatorApplication"]],[2297,38,2297,82,[7,[2297,39,2297,81,[0,[[2297,39,2297,60,[2,[],"checkApplicationChain"]],[2297,61,2297,67,[2,[],"config"]],[2297,68,2297,73,[2,[],"local"]],[2297,74,2297,81,[2,[],"hasType"]]]]]]],[2297,83,2297,85,[2,[],"op"]],[2297,86,2297,88,[2,[],"e1"]],[2297,89,2297,91,[2,[],"e2"]]]]]],[[2299,9,2299,33,[12,[[],"IfBlock"],[[2299,17,2299,21,[11,"pred"]],[2299,22,2299,27,[11,"thenE"]],[2299,28,2299,33,[11,"elseE"]]]]],[2301,13,2301,128,[1,"++",1,[2301,13,2301,88,[0,[[2301,13,2301,15,[2,[],"go"]],[2301,16,2301,83,[7,[2301,17,2301,82,[1,"<|",1,[2301,17,2301,21,[2,[],"Just"]],[2301,25,2301,82,[1,"<|",1,[2301,25,2301,41,[2,[],"DereferencedType"]],[2301,45,2301,82,[0,[[2301,45,2301,54,[2,[],"NamedType"]],[2301,55,2301,79,[6,[[2301,57,2301,69,[9,[[2301,59,2301,67,[5,"Basics"]]]]],[2301,71,2301,77,[5,"Bool"]]]]],[2301,80,2301,82,[9,[]]]]]]]]]]]],[2301,84,2301,88,[2,[],"pred"]]]]],[2301,92,2301,128,[1,"++",1,[2301,92,2301,108,[0,[[2301,92,2301,94,[2,[],"go"]],[2301,95,2301,102,[2,[],"hasType"]],[2301,103,2301,108,[2,[],"thenE"]]]]],[2301,112,2301,128,[0,[[2301,112,2301,114,[2,[],"go"]],[2301,115,2301,122,[2,[],"hasType"]],[2301,123,2301,128,[2,[],"elseE"]]]]]]]]]],[[2303,9,2303,28,[12,[[],"TupledExpression"],[[2303,26,2303,28,[11,"es"]]]]],[2305,13,2306,31,[1,"|>",0,[2305,13,2305,55,[0,[[2305,13,2305,22,[2,["List"],"map2"]],[2305,23,2305,25,[2,[],"go"]],[2305,26,2305,52,[7,[2305,27,2305,51,[0,[[2305,27,2305,40,[2,[],"getTupleTypes"]],[2305,41,2305,43,[2,[],"es"]],[2305,44,2305,51,[2,[],"hasType"]]]]]]],[2305,53,2305,55,[2,[],"es"]]]]],[2306,20,2306,31,[2,["List"],"concat"]]]]],[[2308,9,2308,45,[12,[[],"CaseExpression"],[[2308,24,2308,45,[8,[[2308,26,2308,36,"expression"],[2308,38,2308,43,"cases"]]]]]]],[2311,13,2326,100,[16,[[[2312,17,2314,51,[0,[[0],[1,[2312,17,2312,50,[[2312,17,2312,25,"caseType"],[2312,28,2312,50,[1,[2312,28,2312,33,[[],"Maybe"]],[[2312,34,2312,50,[1,[2312,34,2312,50,[[],"DereferencedType"]],[]]]]]]]]],[2313,17,2314,51,[[2313,17,2313,25,"caseType"],[],[2314,21,2314,51,[0,[[2314,21,2314,34,[2,[],"inferExprType"]],[2314,35,2314,40,[2,[],"local"]],[2314,41,2314,51,[2,[],"expression"]]]]]]]]]]],[2316,13,2326,100,[1,"++",1,[2316,13,2316,34,[0,[[2316,13,2316,15,[2,[],"go"]],[2316,16,2316,23,[2,[],"Nothing"]],[2316,24,2316,34,[2,[],"expression"]]]]],[2317,20,2326,100,[1,"++",1,[2317,20,2325,26,[0,[[2317,20,2317,34,[2,["List"],"concatMap"]],[2318,21,2324,22,[7,[2318,22,2323,33,[18,[[[2318,23,2318,31,[7,[[2318,25,2318,26,[11,"p"]],[2318,28,2318,29,[11,"e"]]]]]],[2319,25,2323,33,[1,"|>",0,[2319,25,2320,45,[1,"|>",0,[2319,25,2319,75,[0,[[2319,25,2319,50,[2,[],"bindingsInPatternWithType"]],[2319,51,2319,64,[19,[2319,51,2319,56,[2,[],"local"]],[2319,57,2319,64,"context"]]],[2319,65,2319,66,[2,[],"p"]],[2319,67,2319,75,[2,[],"caseType"]]]]],[2320,32,2320,45,[2,["Dict"],"fromList"]]]],[2321,32,2323,33,[7,[2321,33,2322,142,[18,[[[2321,34,2321,45,[11,"newBindings"]]],[2322,37,2322,142,[0,[[2322,37,2322,52,[2,[],"checkExpression"]],[2322,53,2322,59,[2,[],"config"]],[2322,60,2322,132,[21,[2322,62,2322,67,"local"],[[2322,70,2322,131,[[2322,70,2322,84,"localFunctions"],[2322,87,2322,130,[0,[[2322,87,2322,97,[2,["Dict"],"union"]],[2322,98,2322,118,[19,[2322,98,2322,103,[2,[],"local"]],[2322,104,2322,118,"localFunctions"]]],[2322,119,2322,130,[2,[],"newBindings"]]]]]]]]]],[2322,133,2322,140,[2,[],"hasType"]],[2322,141,2322,142,[2,[],"e"]]]]]]]]]]]]]]]]],[2325,21,2325,26,[2,[],"cases"]]]]],[2326,20,2326,100,[0,[[2326,20,2326,34,[2,["List"],"concatMap"]],[2326,35,2326,94,[7,[2326,36,2326,93,[1,"<<",0,[2326,36,2326,78,[0,[[2326,36,2326,48,[2,[],"checkPattern"]],[2326,49,2326,55,[2,[],"config"]],[2326,56,2326,69,[19,[2326,56,2326,61,[2,[],"local"]],[2326,62,2326,69,"context"]]],[2326,70,2326,78,[2,[],"caseType"]]]]],[2326,82,2326,93,[2,["Tuple"],"first"]]]]]],[2326,95,2326,100,[2,[],"cases"]]]]]]]]]]]]],[[2328,9,2328,46,[12,[[],"LambdaExpression"],[[2328,26,2328,46,[8,[[2328,28,2328,32,"args"],[2328,34,2328,44,"expression"]]]]]]],[2330,13,2330,74,[0,[[2330,13,2330,37,[2,[],"checkFunctionArgsAndExpr"]],[2330,38,2330,44,[2,[],"config"]],[2330,45,2330,50,[2,[],"local"]],[2330,51,2330,58,[2,[],"hasType"]],[2330,59,2330,63,[2,[],"args"]],[2330,64,2330,74,[2,[],"expression"]]]]]],[[2332,9,2332,51,[12,[[],"LetExpression"],[[2332,23,2332,51,[8,[[2332,25,2332,37,"declarations"],[2332,39,2332,49,"expression"]]]]]]],[2334,13,2345,67,[16,[[[2335,17,2338,73,[1,[2335,17,2335,45,[7,[[2335,19,2335,30,[11,"newBindings"]],[2335,32,2335,43,[11,"decsToCheck"]]]]],[2336,21,2338,73,[1,"|>",0,[2336,21,2337,38,[1,"|>",0,[2336,21,2336,91,[0,[[2336,21,2336,29,[2,["List"],"map"]],[2336,30,2336,78,[7,[2336,31,2336,77,[1,"<<",0,[2336,31,2336,63,[0,[[2336,31,2336,50,[2,[],"checkLetDeclaration"]],[2336,51,2336,57,[2,[],"config"]],[2336,58,2336,63,[2,[],"local"]]]]],[2336,67,2336,77,[2,["Node"],"value"]]]]]],[2336,79,2336,91,[2,[],"declarations"]]]]],[2337,28,2337,38,[2,["List"],"unzip"]]]],[2338,28,2338,73,[0,[[2338,28,2338,42,[2,["Tuple"],"mapFirst"]],[2338,43,2338,73,[7,[2338,44,2338,72,[1,"<<",0,[2338,44,2338,57,[2,["Dict"],"fromList"]],[2338,61,2338,72,[2,["List"],"concat"]]]]]]]]]]]]],[2340,17,2342,93,[0,[[0],[1,[2340,17,2340,42,[[2340,17,2340,27,"newContext"],[2340,30,2340,42,[1,[2340,30,2340,42,[[],"LocalContext"]],[]]]]]],[2341,17,2342,93,[[2341,17,2341,27,"newContext"],[],[2342,21,2342,93,[21,[2342,23,2342,28,"local"],[[2342,31,2342,92,[[2342,31,2342,45,"localFunctions"],[2342,48,2342,91,[0,[[2342,48,2342,58,[2,["Dict"],"union"]],[2342,59,2342,79,[19,[2342,59,2342,64,[2,[],"local"]],[2342,65,2342,79,"localFunctions"]]],[2342,80,2342,91,[2,[],"newBindings"]]]]]]]]]]]]]]]],[2344,13,2345,67,[1,"++",1,[2344,13,2344,65,[0,[[2344,13,2344,28,[2,[],"checkExpression"]],[2344,29,2344,35,[2,[],"config"]],[2344,36,2344,46,[2,[],"newContext"]],[2344,47,2344,54,[2,[],"hasType"]],[2344,55,2344,65,[2,[],"expression"]]]]],[2345,20,2345,67,[0,[[2345,20,2345,34,[2,["List"],"concatMap"]],[2345,35,2345,55,[7,[2345,36,2345,54,[18,[[[2345,37,2345,38,[11,"f"]]],[2345,42,2345,54,[0,[[2345,42,2345,43,[2,[],"f"]],[2345,44,2345,54,[2,[],"newContext"]]]]]]]]]],[2345,56,2345,67,[2,[],"decsToCheck"]]]]]]]]]]],[[2347,9,2347,33,[12,[[],"RecordExpr"],[[2347,20,2347,33,[11,"recordSetters"]]]]],[2349,13,2357,70,[16,[[[2350,17,2352,48,[0,[[0],[1,[2350,17,2350,50,[[2350,17,2350,19,"ts"],[2350,22,2350,50,[1,[2350,22,2350,26,[[],"Dict"]],[[2350,27,2350,33,[1,[2350,27,2350,33,[[],"String"]],[]]],[2350,34,2350,50,[1,[2350,34,2350,50,[[],"DereferencedType"]],[]]]]]]]]],[2351,17,2352,48,[[2351,17,2351,19,"ts"],[],[2352,21,2352,48,[0,[[2352,21,2352,40,[2,[],"getRecordFieldTypes"]],[2352,41,2352,48,[2,[],"hasType"]]]]]]]]]]],[2354,13,2357,70,[1,"|>",0,[2354,13,2355,52,[1,"|>",0,[2354,13,2354,88,[0,[[2354,13,2354,37,[2,[],"recordSettersToCheckable"]],[2354,38,2354,43,[2,[],"local"]],[2354,44,2354,61,[7,[2354,45,2354,60,[0,[[2354,45,2354,55,[2,["Node"],"range"]],[2354,56,2354,60,[2,[],"node"]]]]]]],[2354,62,2354,66,[2,[],"True"]],[2354,67,2354,74,[2,[],"hasType"]],[2354,75,2354,88,[2,[],"recordSetters"]]]]],[2355,20,2355,52,[0,[[2355,20,2355,31,[2,[],"checkRecord"]],[2355,32,2355,38,[2,[],"config"]],[2355,39,2355,52,[19,[2355,39,2355,44,[2,[],"local"]],[2355,45,2355,52,"context"]]]]]]]],[2357,20,2357,70,[0,[[2357,20,2357,31,[2,[],"checkFields"]],[2357,32,2357,34,[2,[],"ts"]],[2357,35,2357,70,[7,[2357,36,2357,69,[0,[[2357,36,2357,44,[2,["List"],"map"]],[2357,45,2357,55,[2,["Node"],"value"]],[2357,56,2357,69,[2,[],"recordSetters"]]]]]]]]]]]]]]]],[[2359,9,2359,47,[12,[[],"RecordUpdateExpression"],[[2359,32,2359,33,[0]],[2359,34,2359,47,[11,"recordSetters"]]]]],[2362,13,2376,70,[16,[[[2363,17,2367,79,[0,[[0],[1,[2363,17,2363,52,[[2363,17,2363,27,"updateType"],[2363,30,2363,52,[1,[2363,30,2363,35,[[],"Maybe"]],[[2363,36,2363,52,[1,[2363,36,2363,52,[[],"DereferencedType"]],[]]]]]]]]],[2364,17,2367,79,[[2364,17,2364,27,"updateType"],[],[2366,21,2367,79,[1,"|>",0,[2366,21,2366,28,[2,[],"hasType"]],[2367,28,2367,79,[0,[[2367,28,2367,45,[2,["MaybeX"],"orElseLazy"]],[2367,46,2367,79,[7,[2367,47,2367,78,[18,[[[2367,48,2367,50,[1]]],[2367,54,2367,78,[0,[[2367,54,2367,67,[2,[],"inferExprType"]],[2367,68,2367,73,[2,[],"local"]],[2367,74,2367,78,[2,[],"node"]]]]]]]]]]]]]]]]]]]],[2369,17,2371,51,[0,[[0],[1,[2369,17,2369,50,[[2369,17,2369,19,"ts"],[2369,22,2369,50,[1,[2369,22,2369,26,[[],"Dict"]],[[2369,27,2369,33,[1,[2369,27,2369,33,[[],"String"]],[]]],[2369,34,2369,50,[1,[2369,34,2369,50,[[],"DereferencedType"]],[]]]]]]]]],[2370,17,2371,51,[[2370,17,2370,19,"ts"],[],[2371,21,2371,51,[0,[[2371,21,2371,40,[2,[],"getRecordFieldTypes"]],[2371,41,2371,51,[2,[],"updateType"]]]]]]]]]]],[2373,13,2376,70,[1,"|>",0,[2373,13,2374,52,[1,"|>",0,[2373,13,2373,92,[0,[[2373,13,2373,37,[2,[],"recordSettersToCheckable"]],[2373,38,2373,43,[2,[],"local"]],[2373,44,2373,61,[7,[2373,45,2373,60,[0,[[2373,45,2373,55,[2,["Node"],"range"]],[2373,56,2373,60,[2,[],"node"]]]]]]],[2373,62,2373,67,[2,[],"False"]],[2373,68,2373,78,[2,[],"updateType"]],[2373,79,2373,92,[2,[],"recordSetters"]]]]],[2374,20,2374,52,[0,[[2374,20,2374,31,[2,[],"checkRecord"]],[2374,32,2374,38,[2,[],"config"]],[2374,39,2374,52,[19,[2374,39,2374,44,[2,[],"local"]],[2374,45,2374,52,"context"]]]]]]]],[2376,20,2376,70,[0,[[2376,20,2376,31,[2,[],"checkFields"]],[2376,32,2376,34,[2,[],"ts"]],[2376,35,2376,70,[7,[2376,36,2376,69,[0,[[2376,36,2376,44,[2,["List"],"map"]],[2376,45,2376,55,[2,["Node"],"value"]],[2376,56,2376,69,[2,[],"recordSetters"]]]]]]]]]]]]]]]],[[2378,9,2378,34,[12,[[],"RecordAccess"],[[2378,22,2378,23,[11,"e"]],[2378,24,2378,34,[11,"accessFunc"]]]]],[2379,13,2379,73,[0,[[2379,13,2379,15,[2,[],"go"]],[2379,16,2379,71,[7,[2379,17,2379,70,[1,"<|",1,[2379,17,2379,45,[0,[[2379,17,2379,37,[2,[],"makeRecordAccessType"]],[2379,38,2379,45,[2,[],"hasType"]]]]],[2379,49,2379,70,[0,[[2379,49,2379,59,[2,["Node"],"value"]],[2379,60,2379,70,[2,[],"accessFunc"]]]]]]]]],[2379,72,2379,73,[2,[],"e"]]]]]],[[2381,9,2381,10,[0]],[2394,13,2394,15,[9,[]]]]]]]]]]]]]]]],[2397,1,2411,59,[0,[[1,[2397,1,2400,3,"{-| Generate a list of bindings from a `let` declaration as well as check them\nfor errors (when provided with the new context that includes all new `let`\nbindings. Note that type inference isn't performed with new bindings.\n-}"]],[1,[2401,1,2401,129,[[2401,1,2401,20,"checkLetDeclaration"],[2401,23,2401,129,[6,[2401,23,2401,33,[1,[2401,23,2401,33,[[],"RuleConfig"]],[]]],[2401,37,2401,129,[6,[2401,37,2401,49,[1,[2401,37,2401,49,[[],"LocalContext"]],[]]],[2401,53,2401,129,[6,[2401,53,2401,67,[1,[2401,53,2401,67,[[],"LetDeclaration"]],[]]],[2401,71,2401,129,[3,[[2401,73,2401,94,[1,[2401,73,2401,77,[[],"List"]],[[2401,78,2401,94,[3,[[2401,80,2401,86,[1,[2401,80,2401,86,[[],"String"]],[]]],[2401,88,2401,92,[1,[2401,88,2401,92,[[],"Type"]],[]]]]]]]]],[2401,96,2401,127,[6,[2401,96,2401,108,[1,[2401,96,2401,108,[[],"LocalContext"]],[]]],[2401,112,2401,127,[1,[2401,112,2401,116,[[],"List"]],[[2401,117,2401,127,[1,[2401,118,2401,123,[[],"Error"]],[[2401,124,2401,126,[4,[]]]]]]]]]]]]]]]]]]]]]]],[2402,1,2411,59,[[2402,1,2402,20,"checkLetDeclaration"],[[2402,21,2402,27,[11,"config"]],[2402,28,2402,33,[11,"local"]],[2402,34,2402,35,[11,"d"]]],[2403,5,2411,59,[1,"|>",0,[2403,5,2410,6,[7,[2403,6,2409,127,[17,[[2403,11,2403,12,[2,[],"d"]],[[[2404,9,2404,22,[12,[[],"LetFunction"],[[2404,21,2404,22,[11,"f"]]]]],[2405,13,2405,64,[18,[[[2405,14,2405,20,[11,"local_"]]],[2405,24,2405,64,[0,[[2405,24,2405,48,[2,[],"checkFunctionDeclaration"]],[2405,49,2405,55,[2,[],"config"]],[2405,56,2405,62,[2,[],"local_"]],[2405,63,2405,64,[2,[],"f"]]]]]]]]],[[2407,9,2407,29,[12,[[],"LetDestructuring"],[[2407,26,2407,27,[11,"p"]],[2407,28,2407,29,[11,"e"]]]]],[2409,13,2409,127,[18,[[[2409,14,2409,20,[11,"local_"]]],[2409,24,2409,127,[1,"++",1,[2409,24,2409,63,[0,[[2409,24,2409,39,[2,[],"checkExpression"]],[2409,40,2409,46,[2,[],"config"]],[2409,47,2409,53,[2,[],"local_"]],[2409,54,2409,61,[2,[],"Nothing"]],[2409,62,2409,63,[2,[],"e"]]]]],[2409,67,2409,127,[0,[[2409,67,2409,79,[2,[],"checkPattern"]],[2409,80,2409,86,[2,[],"config"]],[2409,87,2409,100,[19,[2409,87,2409,92,[2,[],"local"]],[2409,93,2409,100,"context"]]],[2409,101,2409,125,[7,[2409,102,2409,124,[0,[[2409,102,2409,115,[2,[],"inferExprType"]],[2409,116,2409,122,[2,[],"local_"]],[2409,123,2409,124,[2,[],"e"]]]]]]],[2409,126,2409,127,[2,[],"p"]]]]]]]]]]]]]]]]],[2411,12,2411,59,[0,[[2411,12,2411,22,[2,["Tuple"],"pair"]],[2411,23,2411,59,[7,[2411,24,2411,58,[0,[[2411,24,2411,50,[2,[],"bindingsFromLetDeclaration"]],[2411,51,2411,56,[2,[],"local"]],[2411,57,2411,58,[2,[],"d"]]]]]]]]]]]]]]]]],[2414,1,2437,61,[0,[[1,[2414,1,2415,3,"{-| Get (a best guess) at the bindings from a let declaration.\n-}"]],[1,[2416,1,2416,85,[[2416,1,2416,27,"bindingsFromLetDeclaration"],[2416,30,2416,85,[6,[2416,30,2416,42,[1,[2416,30,2416,42,[[],"LocalContext"]],[]]],[2416,46,2416,85,[6,[2416,46,2416,60,[1,[2416,46,2416,60,[[],"LetDeclaration"]],[]]],[2416,64,2416,85,[1,[2416,64,2416,68,[[],"List"]],[[2416,69,2416,85,[3,[[2416,71,2416,77,[1,[2416,71,2416,77,[[],"String"]],[]]],[2416,79,2416,83,[1,[2416,79,2416,83,[[],"Type"]],[]]]]]]]]]]]]]]]],[2417,1,2437,61,[[2417,1,2417,27,"bindingsFromLetDeclaration"],[[2417,28,2417,33,[11,"local"]],[2417,34,2417,35,[11,"d"]]],[2418,5,2437,61,[17,[[2418,10,2418,11,[2,[],"d"]],[[[2419,9,2419,22,[12,[[],"LetFunction"],[[2419,21,2419,22,[11,"f"]]]]],[2420,13,2432,40,[1,"|>",0,[2420,13,2431,44,[1,"|>",0,[2420,13,2430,22,[1,"|>",0,[2420,13,2421,55,[1,"|>",0,[2420,13,2420,47,[0,[[2420,13,2420,31,[2,[],"getFunctionBinding"]],[2420,32,2420,45,[19,[2420,32,2420,37,[2,[],"local"]],[2420,38,2420,45,"context"]]],[2420,46,2420,47,[2,[],"f"]]]]],[2421,20,2421,55,[0,[[2421,20,2421,29,[2,["Maybe"],"map"]],[2421,30,2421,55,[7,[2421,31,2421,54,[0,[[2421,31,2421,46,[2,["Tuple"],"mapSecond"]],[2421,47,2421,54,[2,[],"getType"]]]]]]]]]]]],[2422,20,2430,22,[0,[[2422,20,2422,37,[2,["MaybeX"],"orElseLazy"]],[2423,21,2430,22,[7,[2423,22,2429,33,[18,[[[2423,23,2423,25,[1]]],[2424,25,2429,33,[1,"|>",0,[2424,25,2424,49,[0,[[2424,25,2424,35,[2,["Node"],"value"]],[2424,36,2424,49,[19,[2424,36,2424,37,[2,[],"f"]],[2424,38,2424,49,"declaration"]]]]]],[2425,32,2429,33,[7,[2425,33,2428,84,[18,[[[2425,34,2425,54,[8,[[2425,36,2425,40,"name"],[2425,42,2425,52,"expression"]]]]],[2426,37,2428,84,[1,"|>",0,[2426,37,2427,61,[1,"|>",0,[2426,37,2426,67,[0,[[2426,37,2426,50,[2,[],"inferExprType"]],[2426,51,2426,56,[2,[],"local"]],[2426,57,2426,67,[2,[],"expression"]]]]],[2427,44,2427,61,[0,[[2427,44,2427,53,[2,["Maybe"],"map"]],[2427,54,2427,61,[2,[],"getType"]]]]]]],[2428,44,2428,84,[0,[[2428,44,2428,53,[2,["Maybe"],"map"]],[2428,54,2428,84,[7,[2428,55,2428,83,[0,[[2428,55,2428,65,[2,["Tuple"],"pair"]],[2428,66,2428,83,[7,[2428,67,2428,82,[0,[[2428,67,2428,77,[2,["Node"],"value"]],[2428,78,2428,82,[2,[],"name"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2431,20,2431,44,[0,[[2431,20,2431,29,[2,["Maybe"],"map"]],[2431,30,2431,44,[2,["List"],"singleton"]]]]]]],[2432,20,2432,40,[0,[[2432,20,2432,37,[2,["Maybe"],"withDefault"]],[2432,38,2432,40,[9,[]]]]]]]]],[[2434,9,2434,29,[12,[[],"LetDestructuring"],[[2434,26,2434,27,[11,"p"]],[2434,28,2434,29,[11,"e"]]]]],[2436,13,2437,61,[1,"|>",0,[2436,13,2436,34,[0,[[2436,13,2436,26,[2,[],"inferExprType"]],[2436,27,2436,32,[2,[],"local"]],[2436,33,2436,34,[2,[],"e"]]]]],[2437,20,2437,61,[0,[[2437,20,2437,45,[2,[],"bindingsInPatternWithType"]],[2437,46,2437,59,[19,[2437,46,2437,51,[2,[],"local"]],[2437,52,2437,59,"context"]]],[2437,60,2437,61,[2,[],"p"]]]]]]]]]]]]]]]]],[2440,1,2453,76,[0,[[1,[2440,1,2441,3,"{-| Handle the few common operators we expect to see records passed through.\n-}"]],[1,[2442,1,2442,110,[[2442,1,2442,25,"checkOperatorApplication"],[2442,28,2442,110,[6,[2442,28,2442,57,[6,[2442,29,2442,51,[1,[2442,29,2442,33,[[],"List"]],[[2442,34,2442,51,[1,[2442,35,2442,39,[[],"Node"]],[[2442,40,2442,50,[1,[2442,40,2442,50,[[],"Expression"]],[]]]]]]]]],[2442,55,2442,56,[0,"a"]]]],[2442,61,2442,110,[6,[2442,61,2442,67,[1,[2442,61,2442,67,[[],"String"]],[]]],[2442,71,2442,110,[6,[2442,71,2442,86,[1,[2442,71,2442,75,[[],"Node"]],[[2442,76,2442,86,[1,[2442,76,2442,86,[[],"Expression"]],[]]]]]],[2442,90,2442,110,[6,[2442,90,2442,105,[1,[2442,90,2442,94,[[],"Node"]],[[2442,95,2442,105,[1,[2442,95,2442,105,[[],"Expression"]],[]]]]]],[2442,109,2442,110,[0,"a"]]]]]]]]]]]]],[2443,1,2453,76,[[2443,1,2443,25,"checkOperatorApplication"],[[2443,26,2443,34,[11,"checkApp"]],[2443,35,2443,37,[11,"op"]],[2443,38,2443,40,[11,"e1"]],[2443,41,2443,43,[11,"e2"]]],[2444,5,2453,76,[17,[[2444,10,2444,12,[2,[],"op"]],[[[2445,9,2445,13,[3,"|>"]],[2446,13,2446,32,[0,[[2446,13,2446,21,[2,[],"checkApp"]],[2446,22,2446,32,[9,[[2446,24,2446,26,[2,[],"e2"]],[2446,28,2446,30,[2,[],"e1"]]]]]]]]],[[2448,9,2448,13,[3,"<|"]],[2449,13,2449,32,[0,[[2449,13,2449,21,[2,[],"checkApp"]],[2449,22,2449,32,[9,[[2449,24,2449,26,[2,[],"e1"]],[2449,28,2449,30,[2,[],"e2"]]]]]]]]],[[2451,9,2451,10,[0]],[2453,13,2453,76,[0,[[2453,13,2453,21,[2,[],"checkApp"]],[2453,22,2453,76,[9,[[2453,24,2453,66,[1,"<|",1,[2453,24,2453,45,[0,[[2453,24,2453,28,[2,[],"Node"]],[2453,29,2453,45,[2,["Range"],"emptyRange"]]]]],[2453,49,2453,66,[0,[[2453,49,2453,63,[2,[],"PrefixOperator"]],[2453,64,2453,66,[2,[],"op"]]]]]]],[2453,68,2453,70,[2,[],"e1"]],[2453,72,2453,74,[2,[],"e2"]]]]]]]]]]]]]]]]]],[2456,1,2545,58,[0,[[1,[2456,1,2458,3,"{-| Check a chain of expressions being applied to the first one, as we can glean\nadditional info from any stored function types we have.\n-}"]],[1,[2459,1,2459,122,[[2459,1,2459,22,"checkApplicationChain"],[2459,25,2459,122,[6,[2459,25,2459,35,[1,[2459,25,2459,35,[[],"RuleConfig"]],[]]],[2459,39,2459,122,[6,[2459,39,2459,51,[1,[2459,39,2459,51,[[],"LocalContext"]],[]]],[2459,55,2459,122,[6,[2459,55,2459,77,[1,[2459,55,2459,60,[[],"Maybe"]],[[2459,61,2459,77,[1,[2459,61,2459,77,[[],"DereferencedType"]],[]]]]]],[2459,81,2459,122,[6,[2459,81,2459,103,[1,[2459,81,2459,85,[[],"List"]],[[2459,86,2459,103,[1,[2459,87,2459,91,[[],"Node"]],[[2459,92,2459,102,[1,[2459,92,2459,102,[[],"Expression"]],[]]]]]]]]],[2459,107,2459,122,[1,[2459,107,2459,111,[[],"List"]],[[2459,112,2459,122,[1,[2459,113,2459,118,[[],"Error"]],[[2459,119,2459,121,[4,[]]]]]]]]]]]]]]]]]]]],[2460,1,2545,58,[[2460,1,2460,22,"checkApplicationChain"],[[2460,23,2460,29,[11,"config"]],[2460,30,2460,35,[11,"local"]],[2460,36,2460,43,[11,"hasType"]],[2460,44,2460,46,[11,"es"]]],[2461,5,2545,58,[16,[[[2462,9,2464,41,[0,[[0],[1,[2462,9,2462,81,[[2462,9,2462,18,"checkExpr"],[2462,21,2462,81,[6,[2462,21,2462,43,[1,[2462,21,2462,26,[[],"Maybe"]],[[2462,27,2462,43,[1,[2462,27,2462,43,[[],"DereferencedType"]],[]]]]]],[2462,47,2462,81,[6,[2462,47,2462,62,[1,[2462,47,2462,51,[[],"Node"]],[[2462,52,2462,62,[1,[2462,52,2462,62,[[],"Expression"]],[]]]]]],[2462,66,2462,81,[1,[2462,66,2462,70,[[],"List"]],[[2462,71,2462,81,[1,[2462,72,2462,77,[[],"Error"]],[[2462,78,2462,80,[4,[]]]]]]]]]]]]]]]],[2463,9,2464,41,[[2463,9,2463,18,"checkExpr"],[],[2464,13,2464,41,[0,[[2464,13,2464,28,[2,[],"checkExpression"]],[2464,29,2464,35,[2,[],"config"]],[2464,36,2464,41,[2,[],"local"]]]]]]]]]]],[2466,5,2545,58,[17,[[2466,10,2466,12,[2,[],"es"]],[[[2467,9,2467,11,[10,[]]],[2468,13,2468,15,[9,[]]]],[[2470,9,2470,14,[10,[[2470,11,2470,12,[11,"e"]]]]],[2471,13,2471,32,[0,[[2471,13,2471,22,[2,[],"checkExpr"]],[2471,23,2471,30,[2,[],"hasType"]],[2471,31,2471,32,[2,[],"e"]]]]]],[[2473,9,2473,21,[9,[2473,9,2473,13,[11,"func"]],[2473,17,2473,21,[11,"args"]]]],[2474,13,2545,58,[17,[[2474,18,2474,33,[0,[[2474,18,2474,28,[2,["Node"],"value"]],[2474,29,2474,33,[2,[],"func"]]]]],[[[2475,17,2475,39,[12,[[],"FunctionOrValue"],[[2475,33,2475,34,[0]],[2475,35,2475,39,[11,"name"]]]]],[2476,21,2491,97,[1,"|>",0,[2476,21,2489,49,[1,"|>",0,[2476,21,2488,85,[1,"|>",0,[2476,21,2487,30,[1,"|>",0,[2476,21,2477,75,[1,"|>",0,[2476,21,2476,61,[0,[[2476,21,2476,37,[2,[],"findFunctionType"]],[2476,38,2476,43,[2,[],"local"]],[2476,44,2476,51,[2,[],"hasType"]],[2476,52,2476,56,[2,[],"func"]],[2476,57,2476,61,[2,[],"name"]]]]],[2477,28,2477,75,[0,[[2477,28,2477,41,[2,["Maybe"],"andThen"]],[2477,42,2477,75,[7,[2477,43,2477,74,[0,[[2477,43,2477,69,[2,[],"partiallyApplyArgsAndTypes"]],[2477,70,2477,74,[2,[],"args"]]]]]]]]]]]],[2478,28,2487,30,[0,[[2478,28,2478,37,[2,["Maybe"],"map"]],[2479,29,2487,30,[7,[2479,30,2486,66,[18,[[[2479,31,2479,51,[7,[[2479,33,2479,41,[11,"argTypes"]],[2479,43,2479,49,[11,"return"]]]]]],[2481,33,2486,66,[1,"|>",0,[2481,33,2485,108,[1,"|>",0,[2481,33,2484,78,[1,"|>",0,[2481,33,2483,87,[1,"|>",0,[2481,33,2482,61,[1,"|>",0,[2481,33,2481,81,[0,[[2481,33,2481,42,[2,["Maybe"],"map"]],[2481,43,2481,73,[7,[2481,44,2481,72,[0,[[2481,44,2481,54,[2,[],"typesMatch"]],[2481,55,2481,65,[2,["Dict"],"empty"]],[2481,66,2481,72,[2,[],"return"]]]]]]],[2481,74,2481,81,[2,[],"hasType"]]]]],[2482,40,2482,61,[0,[[2482,40,2482,49,[2,["Maybe"],"map"]],[2482,50,2482,61,[2,["Tuple"],"first"]]]]]]],[2483,40,2483,87,[0,[[2483,40,2483,49,[2,["Maybe"],"map"]],[2483,50,2483,87,[7,[2483,51,2483,86,[0,[[2483,51,2483,62,[2,["Dict"],"filter"]],[2483,63,2483,86,[7,[2483,64,2483,85,[18,[[[2483,65,2483,73,[7,[[2483,67,2483,68,[11,"i"]],[2483,70,2483,71,[0]]]]],[2483,74,2483,75,[0]]],[2483,79,2483,85,[1,"==",2,[2483,79,2483,80,[2,[],"i"]],[2483,84,2483,85,[3,1]]]]]]]]]]]]]]]]]]],[2484,40,2484,78,[0,[[2484,40,2484,49,[2,["Maybe"],"map"]],[2484,50,2484,78,[7,[2484,51,2484,77,[0,[[2484,51,2484,64,[2,["DictX"],"mapKeys"]],[2484,65,2484,77,[2,["Tuple"],"second"]]]]]]]]]]]],[2485,40,2485,108,[0,[[2485,40,2485,49,[2,["Maybe"],"map"]],[2485,50,2485,108,[7,[2485,51,2485,107,[18,[[[2485,52,2485,60,[11,"typeVars"]]],[2485,64,2485,107,[0,[[2485,64,2485,72,[2,["List"],"map"]],[2485,73,2485,98,[7,[2485,74,2485,97,[0,[[2485,74,2485,88,[2,[],"assignTypeVars"]],[2485,89,2485,97,[2,[],"typeVars"]]]]]]],[2485,99,2485,107,[2,[],"argTypes"]]]]]]]]]]]]]]],[2486,40,2486,66,[0,[[2486,40,2486,57,[2,["Maybe"],"withDefault"]],[2486,58,2486,66,[2,[],"argTypes"]]]]]]]]]]]]]]]]],[2488,28,2488,85,[0,[[2488,28,2488,37,[2,["Maybe"],"map"]],[2488,38,2488,85,[7,[2488,39,2488,84,[0,[[2488,39,2488,48,[2,["List"],"map2"]],[2488,49,2488,79,[7,[2488,50,2488,78,[18,[[[2488,51,2488,52,[11,"e"]],[2488,53,2488,54,[11,"t"]]],[2488,58,2488,78,[0,[[2488,58,2488,67,[2,[],"checkExpr"]],[2488,68,2488,76,[7,[2488,69,2488,75,[0,[[2488,69,2488,73,[2,[],"Just"]],[2488,74,2488,75,[2,[],"t"]]]]]]],[2488,77,2488,78,[2,[],"e"]]]]]]]]]],[2488,80,2488,84,[2,[],"args"]]]]]]]]]]]],[2489,28,2489,49,[0,[[2489,28,2489,37,[2,["Maybe"],"map"]],[2489,38,2489,49,[2,["List"],"concat"]]]]]]],[2491,28,2491,97,[0,[[2491,28,2491,50,[2,["MaybeX"],"withDefaultLazy"]],[2491,51,2491,97,[7,[2491,52,2491,96,[18,[[[2491,53,2491,55,[1]]],[2491,59,2491,96,[0,[[2491,59,2491,73,[2,["List"],"concatMap"]],[2491,74,2491,93,[7,[2491,75,2491,92,[0,[[2491,75,2491,84,[2,[],"checkExpr"]],[2491,85,2491,92,[2,[],"Nothing"]]]]]]],[2491,94,2491,96,[2,[],"es"]]]]]]]]]]]]]]]],[[2493,17,2493,34,[12,[[],"PrefixOperator"],[[2493,32,2493,34,[11,"op"]]]]],[2494,21,2509,97,[1,"|>",0,[2494,21,2507,49,[1,"|>",0,[2494,21,2506,85,[1,"|>",0,[2494,21,2505,30,[1,"|>",0,[2494,21,2495,75,[1,"|>",0,[2494,21,2494,54,[0,[[2494,21,2494,37,[2,[],"findOperatorType"]],[2494,38,2494,51,[19,[2494,38,2494,43,[2,[],"local"]],[2494,44,2494,51,"context"]]],[2494,52,2494,54,[2,[],"op"]]]]],[2495,28,2495,75,[0,[[2495,28,2495,41,[2,["Maybe"],"andThen"]],[2495,42,2495,75,[7,[2495,43,2495,74,[0,[[2495,43,2495,69,[2,[],"partiallyApplyArgsAndTypes"]],[2495,70,2495,74,[2,[],"args"]]]]]]]]]]]],[2496,28,2505,30,[0,[[2496,28,2496,37,[2,["Maybe"],"map"]],[2497,29,2505,30,[7,[2497,30,2504,66,[18,[[[2497,31,2497,51,[7,[[2497,33,2497,41,[11,"argTypes"]],[2497,43,2497,49,[11,"return"]]]]]],[2499,33,2504,66,[1,"|>",0,[2499,33,2503,108,[1,"|>",0,[2499,33,2502,78,[1,"|>",0,[2499,33,2501,87,[1,"|>",0,[2499,33,2500,61,[1,"|>",0,[2499,33,2499,81,[0,[[2499,33,2499,42,[2,["Maybe"],"map"]],[2499,43,2499,73,[7,[2499,44,2499,72,[0,[[2499,44,2499,54,[2,[],"typesMatch"]],[2499,55,2499,65,[2,["Dict"],"empty"]],[2499,66,2499,72,[2,[],"return"]]]]]]],[2499,74,2499,81,[2,[],"hasType"]]]]],[2500,40,2500,61,[0,[[2500,40,2500,49,[2,["Maybe"],"map"]],[2500,50,2500,61,[2,["Tuple"],"first"]]]]]]],[2501,40,2501,87,[0,[[2501,40,2501,49,[2,["Maybe"],"map"]],[2501,50,2501,87,[7,[2501,51,2501,86,[0,[[2501,51,2501,62,[2,["Dict"],"filter"]],[2501,63,2501,86,[7,[2501,64,2501,85,[18,[[[2501,65,2501,73,[7,[[2501,67,2501,68,[11,"i"]],[2501,70,2501,71,[0]]]]],[2501,74,2501,75,[0]]],[2501,79,2501,85,[1,"==",2,[2501,79,2501,80,[2,[],"i"]],[2501,84,2501,85,[3,1]]]]]]]]]]]]]]]]]]],[2502,40,2502,78,[0,[[2502,40,2502,49,[2,["Maybe"],"map"]],[2502,50,2502,78,[7,[2502,51,2502,77,[0,[[2502,51,2502,64,[2,["DictX"],"mapKeys"]],[2502,65,2502,77,[2,["Tuple"],"second"]]]]]]]]]]]],[2503,40,2503,108,[0,[[2503,40,2503,49,[2,["Maybe"],"map"]],[2503,50,2503,108,[7,[2503,51,2503,107,[18,[[[2503,52,2503,60,[11,"typeVars"]]],[2503,64,2503,107,[0,[[2503,64,2503,72,[2,["List"],"map"]],[2503,73,2503,98,[7,[2503,74,2503,97,[0,[[2503,74,2503,88,[2,[],"assignTypeVars"]],[2503,89,2503,97,[2,[],"typeVars"]]]]]]],[2503,99,2503,107,[2,[],"argTypes"]]]]]]]]]]]]]]],[2504,40,2504,66,[0,[[2504,40,2504,57,[2,["Maybe"],"withDefault"]],[2504,58,2504,66,[2,[],"argTypes"]]]]]]]]]]]]]]]]],[2506,28,2506,85,[0,[[2506,28,2506,37,[2,["Maybe"],"map"]],[2506,38,2506,85,[7,[2506,39,2506,84,[0,[[2506,39,2506,48,[2,["List"],"map2"]],[2506,49,2506,79,[7,[2506,50,2506,78,[18,[[[2506,51,2506,52,[11,"e"]],[2506,53,2506,54,[11,"t"]]],[2506,58,2506,78,[0,[[2506,58,2506,67,[2,[],"checkExpr"]],[2506,68,2506,76,[7,[2506,69,2506,75,[0,[[2506,69,2506,73,[2,[],"Just"]],[2506,74,2506,75,[2,[],"t"]]]]]]],[2506,77,2506,78,[2,[],"e"]]]]]]]]]],[2506,80,2506,84,[2,[],"args"]]]]]]]]]]]],[2507,28,2507,49,[0,[[2507,28,2507,37,[2,["Maybe"],"map"]],[2507,38,2507,49,[2,["List"],"concat"]]]]]]],[2509,28,2509,97,[0,[[2509,28,2509,50,[2,["MaybeX"],"withDefaultLazy"]],[2509,51,2509,97,[7,[2509,52,2509,96,[18,[[[2509,53,2509,55,[1]]],[2509,59,2509,96,[0,[[2509,59,2509,73,[2,["List"],"concatMap"]],[2509,74,2509,93,[7,[2509,75,2509,92,[0,[[2509,75,2509,84,[2,[],"checkExpr"]],[2509,85,2509,92,[2,[],"Nothing"]]]]]]],[2509,94,2509,96,[2,[],"es"]]]]]]]]]]]]]]]],[[2511,17,2511,46,[12,[[],"ParenthesizedExpression"],[[2511,41,2511,46,[11,"func_"]]]]],[2513,21,2513,79,[0,[[2513,21,2513,42,[2,[],"checkApplicationChain"]],[2513,43,2513,49,[2,[],"config"]],[2513,50,2513,55,[2,[],"local"]],[2513,56,2513,63,[2,[],"hasType"]],[2513,64,2513,79,[7,[2513,65,2513,78,[1,"::",1,[2513,65,2513,70,[2,[],"func_"]],[2513,74,2513,78,[2,[],"args"]]]]]]]]]],[[2515,17,2515,48,[12,[[],"RecordAccessFunction"],[[2515,38,2515,48,[11,"accessFunc"]]]]],[2516,21,2518,57,[1,"|>",0,[2516,21,2516,72,[0,[[2516,21,2516,30,[2,[],"checkExpr"]],[2516,31,2516,72,[7,[2516,32,2516,71,[0,[[2516,32,2516,52,[2,[],"makeRecordAccessType"]],[2516,53,2516,60,[2,[],"hasType"]],[2516,61,2516,71,[2,[],"accessFunc"]]]]]]]]]],[2518,28,2518,57,[7,[2518,29,2518,56,[18,[[[2518,30,2518,31,[11,"f"]]],[2518,35,2518,56,[0,[[2518,35,2518,49,[2,["List"],"concatMap"]],[2518,50,2518,51,[2,[],"f"]],[2518,52,2518,56,[2,[],"args"]]]]]]]]]]]]],[[2520,17,2520,18,[0]],[2545,21,2545,58,[0,[[2545,21,2545,35,[2,["List"],"concatMap"]],[2545,36,2545,55,[7,[2545,37,2545,54,[0,[[2545,37,2545,46,[2,[],"checkExpr"]],[2545,47,2545,54,[2,[],"Nothing"]]]]]]],[2545,56,2545,58,[2,[],"es"]]]]]]]]]]]]]]]]]]]]]]],[2548,1,2566,13,[0,[[1,[2548,1,2549,3,"{-| Make a type for a record being accessed\n-}"]],[1,[2550,1,2550,82,[[2550,1,2550,21,"makeRecordAccessType"],[2550,24,2550,82,[6,[2550,24,2550,46,[1,[2550,24,2550,29,[[],"Maybe"]],[[2550,30,2550,46,[1,[2550,30,2550,46,[[],"DereferencedType"]],[]]]]]],[2550,50,2550,82,[6,[2550,50,2550,56,[1,[2550,50,2550,56,[[],"String"]],[]]],[2550,60,2550,82,[1,[2550,60,2550,65,[[],"Maybe"]],[[2550,66,2550,82,[1,[2550,66,2550,82,[[],"DereferencedType"]],[]]]]]]]]]]]]],[2551,1,2566,13,[[2551,1,2551,21,"makeRecordAccessType"],[[2551,22,2551,29,[11,"hasType"]],[2551,30,2551,40,[11,"accessFunc"]]],[2553,5,2566,13,[1,"|>",0,[2553,5,2553,30,[0,[[2553,5,2553,19,[2,[],"makeAccessFunc"]],[2553,20,2553,30,[2,[],"accessFunc"]]]]],[2554,12,2566,13,[7,[2554,13,2565,28,[18,[[[2554,14,2554,15,[11,"f"]]],[2555,17,2565,28,[0,[[2555,17,2555,26,[2,["Maybe"],"map"]],[2556,21,2564,22,[7,[2556,22,2563,34,[18,[[[2556,23,2556,24,[11,"t"]]],[2557,25,2563,34,[1,"<|",1,[2557,25,2557,41,[2,[],"DereferencedType"]],[2558,29,2563,34,[0,[[2558,29,2558,39,[2,[],"RecordType"]],[2560,33,2563,34,[8,[[2560,35,2560,99,[[2560,35,2560,42,"generic"],[2560,45,2560,99,[1,"<|",1,[2560,45,2560,49,[2,[],"Just"]],[2560,53,2560,99,[1,"<|",1,[2560,53,2560,68,[0,[[2560,53,2560,60,[2,[],"TypeVar"]],[2560,61,2560,68,[2,[],"Nothing"]]]]],[2560,72,2560,99,[1,"++",1,[2560,72,2560,94,[5,"record access field "]],[2560,98,2560,99,[2,[],"f"]]]]]]]]]],[2561,35,2562,33,[[2561,35,2561,44,"canonical"],[2561,47,2561,52,[2,[],"False"]]]],[2562,35,2563,33,[[2562,35,2562,41,"fields"],[2562,44,2562,64,[9,[[2562,46,2562,62,[6,[[2562,48,2562,49,[2,[],"f"]],[2562,51,2562,60,[0,[[2562,51,2562,58,[2,[],"getType"]],[2562,59,2562,60,[2,[],"t"]]]]]]]]]]]]]]]]]]]]]]]]]],[2565,21,2565,28,[2,[],"hasType"]]]]]]]]]]]]]]]]],[2569,1,2608,70,[0,[[1,[2569,1,2572,3,"{-| Given context, its return type, its module lookup node, and its name, find\nany type info stored for a function, canonicalizing the result and returning a\nlist of arg types (and finally the return type).\n-}"]],[1,[2573,1,2573,111,[[2573,1,2573,17,"findFunctionType"],[2573,20,2573,111,[6,[2573,20,2573,32,[1,[2573,20,2573,32,[[],"LocalContext"]],[]]],[2573,36,2573,111,[6,[2573,36,2573,58,[1,[2573,36,2573,41,[[],"Maybe"]],[[2573,42,2573,58,[1,[2573,42,2573,58,[[],"DereferencedType"]],[]]]]]],[2573,62,2573,111,[6,[2573,62,2573,68,[1,[2573,62,2573,66,[[],"Node"]],[[2573,67,2573,68,[0,"a"]]]]],[2573,72,2573,111,[6,[2573,72,2573,78,[1,[2573,72,2573,78,[[],"String"]],[]]],[2573,82,2573,111,[1,[2573,82,2573,87,[[],"Maybe"]],[[2573,88,2573,111,[1,[2573,89,2573,93,[[],"List"]],[[2573,94,2573,110,[1,[2573,94,2573,110,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]]]]]],[2574,1,2608,70,[[2574,1,2574,17,"findFunctionType"],[[2574,18,2574,45,[8,[[2574,20,2574,27,"context"],[2574,29,2574,43,"localFunctions"]]]],[2574,46,2574,51,[11,"type_"]],[2574,52,2574,62,[11,"moduleNode"]],[2574,63,2574,67,[11,"name"]]],[2575,5,2608,70,[16,[[[2576,9,2583,23,[0,[[0],[1,[2576,9,2576,58,[[2576,9,2576,20,"getTypeVars"],[2576,23,2576,58,[6,[2576,23,2576,45,[1,[2576,23,2576,28,[[],"Maybe"]],[[2576,29,2576,45,[1,[2576,29,2576,45,[[],"DereferencedType"]],[]]]]]],[2576,49,2576,58,[1,[2576,49,2576,53,[[],"List"]],[[2576,54,2576,58,[1,[2576,54,2576,58,[[],"Type"]],[]]]]]]]]]]],[2577,9,2583,23,[[2577,9,2577,20,"getTypeVars"],[[2577,21,2577,22,[11,"t"]]],[2578,13,2583,23,[17,[[2578,18,2578,37,[0,[[2578,18,2578,27,[2,["Maybe"],"map"]],[2578,28,2578,35,[2,[],"getType"]],[2578,36,2578,37,[2,[],"t"]]]]],[[[2579,17,2579,38,[12,[[],"Just"],[[2579,22,2579,38,[14,[2579,23,2579,37,[12,[[],"NamedType"],[[2579,33,2579,34,[0]],[2579,35,2579,37,[11,"ts"]]]]]]]]]],[2580,21,2580,23,[2,[],"ts"]]],[[2582,17,2582,18,[0]],[2583,21,2583,23,[9,[]]]]]]]]]]]]]],[2585,5,2608,70,[1,"|>",0,[2585,5,2607,14,[1,"|>",0,[2585,5,2593,14,[1,"|>",0,[2585,5,2585,49,[0,[[2585,5,2585,18,[2,[],"moduleNameFor"]],[2585,19,2585,38,[19,[2585,19,2585,26,[2,[],"context"]],[2585,27,2585,38,"lookupTable"]]],[2585,39,2585,49,[2,[],"moduleNode"]]]]],[2586,12,2593,14,[0,[[2586,12,2586,21,[2,["Maybe"],"map"]],[2587,13,2593,14,[7,[2587,14,2592,31,[18,[[[2587,15,2587,25,[11,"moduleName"]]],[2588,17,2592,31,[11,[2588,20,2588,36,[1,"==",2,[2588,20,2588,30,[2,[],"moduleName"]],[2588,34,2588,36,[9,[]]]]],[2589,21,2589,39,[19,[2589,21,2589,28,[2,[],"context"]],[2589,29,2589,39,"moduleName"]]],[2592,21,2592,31,[2,[],"moduleName"]]]]]]]]]]]]]],[2594,12,2607,14,[0,[[2594,12,2594,25,[2,["Maybe"],"andThen"]],[2595,13,2607,14,[7,[2595,14,2606,83,[18,[[[2595,15,2595,25,[11,"moduleName"]]],[2596,17,2606,83,[11,[2596,20,2596,91,[1,"<|",1,[2596,20,2596,69,[0,[[2596,20,2596,33,[2,["MaybeX"],"unwrap"]],[2596,34,2596,39,[2,[],"False"]],[2596,40,2596,69,[7,[2596,41,2596,68,[1,"<<",0,[2596,41,2596,53,[2,["Char"],"isUpper"]],[2596,57,2596,68,[2,["Tuple"],"first"]]]]]]]]],[2596,73,2596,91,[0,[[2596,73,2596,86,[2,["String"],"uncons"]],[2596,87,2596,91,[2,[],"name"]]]]]]],[2598,21,2601,84,[1,"|>",0,[2598,21,2600,44,[1,"|>",0,[2598,21,2599,57,[1,"|>",0,[2598,21,2598,61,[0,[[2598,21,2598,29,[2,["Dict"],"get"]],[2598,30,2598,40,[2,[],"moduleName"]],[2598,41,2598,61,[19,[2598,41,2598,48,[2,[],"context"]],[2598,49,2598,61,"constructors"]]]]]],[2599,28,2599,57,[0,[[2599,28,2599,41,[2,["Maybe"],"andThen"]],[2599,42,2599,57,[7,[2599,43,2599,56,[0,[[2599,43,2599,51,[2,["Dict"],"get"]],[2599,52,2599,56,[2,[],"name"]]]]]]]]]]]],[2600,28,2600,44,[0,[[2600,28,2600,37,[2,["Maybe"],"map"]],[2600,38,2600,44,[20,".type_"]]]]]]],[2601,28,2601,84,[0,[[2601,28,2601,37,[2,["Maybe"],"map"]],[2601,38,2601,84,[7,[2601,39,2601,83,[0,[[2601,39,2601,63,[2,[],"assignPositionalTypeVars"]],[2601,64,2601,83,[7,[2601,65,2601,82,[0,[[2601,65,2601,76,[2,[],"getTypeVars"]],[2601,77,2601,82,[2,[],"type_"]]]]]]]]]]]]]]]]],[2604,21,2606,83,[1,"|>",0,[2604,21,2605,57,[1,"|>",0,[2604,21,2604,62,[0,[[2604,21,2604,29,[2,["Dict"],"get"]],[2604,30,2604,40,[2,[],"moduleName"]],[2604,41,2604,62,[19,[2604,41,2604,48,[2,[],"context"]],[2604,49,2604,62,"functionTypes"]]]]]],[2605,28,2605,57,[0,[[2605,28,2605,41,[2,["Maybe"],"andThen"]],[2605,42,2605,57,[7,[2605,43,2605,56,[0,[[2605,43,2605,51,[2,["Dict"],"get"]],[2605,52,2605,56,[2,[],"name"]]]]]]]]]]]],[2606,28,2606,83,[0,[[2606,28,2606,45,[2,["MaybeX"],"orElseLazy"]],[2606,46,2606,83,[7,[2606,47,2606,82,[18,[[[2606,48,2606,50,[1]]],[2606,54,2606,82,[0,[[2606,54,2606,62,[2,["Dict"],"get"]],[2606,63,2606,67,[2,[],"name"]],[2606,68,2606,82,[2,[],"localFunctions"]]]]]]]]]]]]]]]]]]]]]]]]]]],[2608,12,2608,70,[0,[[2608,12,2608,21,[2,["Maybe"],"map"]],[2608,22,2608,70,[7,[2608,23,2608,69,[1,"<<",0,[2608,23,2608,42,[2,[],"flattenFunctionType"]],[2608,46,2608,69,[0,[[2608,46,2608,61,[2,[],"dereferenceType"]],[2608,62,2608,69,[2,[],"context"]]]]]]]]]]]]]]]]]]]]]],[2611,1,2625,14,[0,[[1,[2611,1,2613,3,"{-| Given context and an operator, find any type info stored for an operator,\ncanonicalizing the result.\n-}"]],[1,[2614,1,2614,76,[[2614,1,2614,17,"findOperatorType"],[2614,20,2614,76,[6,[2614,20,2614,33,[1,[2614,20,2614,33,[[],"ModuleContext"]],[]]],[2614,37,2614,76,[6,[2614,37,2614,43,[1,[2614,37,2614,43,[[],"String"]],[]]],[2614,47,2614,76,[1,[2614,47,2614,52,[[],"Maybe"]],[[2614,53,2614,76,[1,[2614,54,2614,58,[[],"List"]],[[2614,59,2614,75,[1,[2614,59,2614,75,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2615,1,2625,14,[[2615,1,2615,17,"findOperatorType"],[[2615,18,2615,25,[11,"context"]],[2615,26,2615,28,[11,"op"]]],[2616,5,2625,14,[1,"|>",0,[2616,5,2619,21,[1,"|>",0,[2616,5,2617,23,[1,"|>",0,[2616,5,2616,105,[0,[[2616,5,2616,20,[2,["DictX"],"filterMap"]],[2616,21,2616,83,[7,[2616,22,2616,82,[18,[[[2616,23,2616,24,[0]],[2616,25,2616,30,[11,"funcs"]]],[2616,34,2616,82,[0,[[2616,34,2616,44,[2,["DictX"],"find"]],[2616,45,2616,76,[7,[2616,46,2616,75,[18,[[[2616,47,2616,55,[11,"funcName"]],[2616,56,2616,57,[0]]],[2616,61,2616,75,[1,"==",2,[2616,61,2616,63,[2,[],"op"]],[2616,67,2616,75,[2,[],"funcName"]]]]]]]]],[2616,77,2616,82,[2,[],"funcs"]]]]]]]]]],[2616,84,2616,105,[19,[2616,84,2616,91,[2,[],"context"]],[2616,92,2616,105,"functionTypes"]]]]]],[2617,12,2617,23,[2,["Dict"],"toList"]]]],[2619,12,2619,21,[2,["List"],"head"]]]],[2620,12,2625,14,[0,[[2620,12,2620,21,[2,["Maybe"],"map"]],[2621,13,2625,14,[7,[2621,14,2624,39,[1,">>",1,[2621,14,2621,26,[2,["Tuple"],"second"]],[2622,20,2624,39,[1,">>",1,[2622,20,2622,32,[2,["Tuple"],"second"]],[2623,20,2624,39,[1,">>",1,[2623,20,2623,43,[0,[[2623,20,2623,35,[2,[],"dereferenceType"]],[2623,36,2623,43,[2,[],"context"]]]]],[2624,20,2624,39,[2,[],"flattenFunctionType"]]]]]]]]]]]]]]]]]]]],[2628,1,2644,37,[0,[[1,[2628,1,2629,3,"{-| Turn a function into a list of argument types and a return type.\n-}"]],[1,[2630,1,2630,64,[[2630,1,2630,20,"flattenFunctionType"],[2630,23,2630,64,[6,[2630,23,2630,39,[1,[2630,23,2630,39,[[],"DereferencedType"]],[]]],[2630,43,2630,64,[1,[2630,43,2630,47,[[],"List"]],[[2630,48,2630,64,[1,[2630,48,2630,64,[[],"DereferencedType"]],[]]]]]]]]]]],[2631,1,2644,37,[[2631,1,2631,20,"flattenFunctionType"],[],[2632,5,2644,37,[16,[[[2633,9,2640,34,[0,[[0],[1,[2633,9,2633,31,[[2633,9,2633,11,"go"],[2633,14,2633,31,[6,[2633,14,2633,18,[1,[2633,14,2633,18,[[],"Type"]],[]]],[2633,22,2633,31,[1,[2633,22,2633,26,[[],"List"]],[[2633,27,2633,31,[1,[2633,27,2633,31,[[],"Type"]],[]]]]]]]]]]],[2634,9,2640,34,[[2634,9,2634,11,"go"],[[2634,12,2634,13,[11,"t"]]],[2635,13,2640,34,[17,[[2635,18,2635,19,[2,[],"t"]],[[[2636,17,2636,42,[12,[[],"FunctionType"],[[2636,30,2636,42,[8,[[2636,32,2636,36,"from"],[2636,38,2636,40,"to"]]]]]]],[2637,21,2637,34,[1,"::",1,[2637,21,2637,25,[2,[],"from"]],[2637,29,2637,34,[0,[[2637,29,2637,31,[2,[],"go"]],[2637,32,2637,34,[2,[],"to"]]]]]]]],[[2639,17,2639,26,[11,"otherType"]],[2640,21,2640,34,[9,[[2640,23,2640,32,[2,[],"otherType"]]]]]]]]]]]]]]]],[2642,5,2644,37,[1,">>",1,[2642,5,2642,12,[2,[],"getType"]],[2643,12,2644,37,[1,">>",1,[2643,12,2643,14,[2,[],"go"]],[2644,12,2644,37,[0,[[2644,12,2644,20,[2,["List"],"map"]],[2644,21,2644,37,[2,[],"DereferencedType"]]]]]]]]]]]]]]]]],[2647,1,2656,20,[0,[[1,[2647,1,2648,3,"{-| Get the type a `List` is full of if possible.\n-}"]],[1,[2649,1,2649,63,[[2649,1,2649,12,"getListType"],[2649,15,2649,63,[6,[2649,15,2649,37,[1,[2649,15,2649,20,[[],"Maybe"]],[[2649,21,2649,37,[1,[2649,21,2649,37,[[],"DereferencedType"]],[]]]]]],[2649,41,2649,63,[1,[2649,41,2649,46,[[],"Maybe"]],[[2649,47,2649,63,[1,[2649,47,2649,63,[[],"DereferencedType"]],[]]]]]]]]]]],[2650,1,2656,20,[[2650,1,2650,12,"getListType"],[[2650,13,2650,22,[11,"assocType"]]],[2651,5,2656,20,[17,[[2651,10,2651,37,[0,[[2651,10,2651,19,[2,["Maybe"],"map"]],[2651,20,2651,27,[2,[],"getType"]],[2651,28,2651,37,[2,[],"assocType"]]]]],[[[2652,9,2652,26,[12,[[],"Just"],[[2652,14,2652,26,[14,[2652,15,2652,25,[12,[[],"ListType"],[[2652,24,2652,25,[11,"t"]]]]]]]]]],[2653,13,2653,39,[1,"<|",1,[2653,13,2653,17,[2,[],"Just"]],[2653,21,2653,39,[0,[[2653,21,2653,37,[2,[],"DereferencedType"]],[2653,38,2653,39,[2,[],"t"]]]]]]]],[[2655,9,2655,10,[0]],[2656,13,2656,20,[2,[],"Nothing"]]]]]]]]]]]],[2659,1,2668,48,[0,[[1,[2659,1,2660,3,"{-| Get all types for a tuple's subexpressions.\n-}"]],[1,[2661,1,2661,82,[[2661,1,2661,14,"getTupleTypes"],[2661,17,2661,82,[6,[2661,17,2661,23,[1,[2661,17,2661,21,[[],"List"]],[[2661,22,2661,23,[0,"a"]]]]],[2661,27,2661,82,[6,[2661,27,2661,49,[1,[2661,27,2661,32,[[],"Maybe"]],[[2661,33,2661,49,[1,[2661,33,2661,49,[[],"DereferencedType"]],[]]]]]],[2661,53,2661,82,[1,[2661,53,2661,57,[[],"List"]],[[2661,58,2661,82,[1,[2661,59,2661,64,[[],"Maybe"]],[[2661,65,2661,81,[1,[2661,65,2661,81,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2662,1,2668,48,[[2662,1,2662,14,"getTupleTypes"],[[2662,15,2662,24,[11,"emptyList"]],[2662,25,2662,34,[11,"assocType"]]],[2663,5,2668,48,[17,[[2663,10,2663,37,[0,[[2663,10,2663,19,[2,["Maybe"],"map"]],[2663,20,2663,27,[2,[],"getType"]],[2663,28,2663,37,[2,[],"assocType"]]]]],[[[2664,9,2664,28,[12,[[],"Just"],[[2664,14,2664,28,[14,[2664,15,2664,27,[12,[[],"TupleType"],[[2664,25,2664,27,[11,"ts"]]]]]]]]]],[2665,13,2665,51,[0,[[2665,13,2665,21,[2,["List"],"map"]],[2665,22,2665,48,[7,[2665,23,2665,47,[1,"<<",0,[2665,23,2665,27,[2,[],"Just"]],[2665,31,2665,47,[2,[],"DereferencedType"]]]]]],[2665,49,2665,51,[2,[],"ts"]]]]]],[[2667,9,2667,10,[0]],[2668,13,2668,48,[0,[[2668,13,2668,21,[2,["List"],"map"]],[2668,22,2668,38,[7,[2668,23,2668,37,[0,[[2668,23,2668,29,[2,[],"always"]],[2668,30,2668,37,[2,[],"Nothing"]]]]]]],[2668,39,2668,48,[2,[],"emptyList"]]]]]]]]]]]]]]],[2671,1,2680,23,[0,[[1,[2671,1,2672,3,"{-| Get all types for a record's fields.\n-}"]],[1,[2673,1,2673,77,[[2673,1,2673,20,"getRecordFieldTypes"],[2673,23,2673,77,[6,[2673,23,2673,45,[1,[2673,23,2673,28,[[],"Maybe"]],[[2673,29,2673,45,[1,[2673,29,2673,45,[[],"DereferencedType"]],[]]]]]],[2673,49,2673,77,[1,[2673,49,2673,53,[[],"Dict"]],[[2673,54,2673,60,[1,[2673,54,2673,60,[[],"String"]],[]]],[2673,61,2673,77,[1,[2673,61,2673,77,[[],"DereferencedType"]],[]]]]]]]]]]],[2674,1,2680,23,[[2674,1,2674,20,"getRecordFieldTypes"],[[2674,21,2674,26,[11,"type_"]]],[2675,5,2680,23,[17,[[2675,10,2675,33,[0,[[2675,10,2675,19,[2,["Maybe"],"map"]],[2675,20,2675,27,[2,[],"getType"]],[2675,28,2675,33,[2,[],"type_"]]]]],[[[2676,9,2676,37,[12,[[],"Just"],[[2676,14,2676,37,[14,[2676,15,2676,36,[12,[[],"RecordType"],[[2676,26,2676,36,[8,[[2676,28,2676,34,"fields"]]]]]]]]]]]],[2677,13,2677,80,[1,"<|",1,[2677,13,2677,26,[2,["Dict"],"fromList"]],[2677,30,2677,80,[0,[[2677,30,2677,38,[2,["List"],"map"]],[2677,39,2677,73,[7,[2677,40,2677,72,[0,[[2677,40,2677,55,[2,["Tuple"],"mapSecond"]],[2677,56,2677,72,[2,[],"DereferencedType"]]]]]]],[2677,74,2677,80,[2,[],"fields"]]]]]]]],[[2679,9,2679,10,[0]],[2680,13,2680,23,[2,["Dict"],"empty"]]]]]]]]]]]],[2683,1,2749,15,[0,[[1,[2683,1,2684,3,"{-| Descend into pattern, keeping as much type information as possible.\n-}"]],[1,[2685,1,2685,104,[[2685,1,2685,13,"checkPattern"],[2685,16,2685,104,[6,[2685,16,2685,26,[1,[2685,16,2685,26,[[],"RuleConfig"]],[]]],[2685,30,2685,104,[6,[2685,30,2685,43,[1,[2685,30,2685,43,[[],"ModuleContext"]],[]]],[2685,47,2685,104,[6,[2685,47,2685,69,[1,[2685,47,2685,52,[[],"Maybe"]],[[2685,53,2685,69,[1,[2685,53,2685,69,[[],"DereferencedType"]],[]]]]]],[2685,73,2685,104,[6,[2685,73,2685,85,[1,[2685,73,2685,77,[[],"Node"]],[[2685,78,2685,85,[1,[2685,78,2685,85,[[],"Pattern"]],[]]]]]],[2685,89,2685,104,[1,[2685,89,2685,93,[[],"List"]],[[2685,94,2685,104,[1,[2685,95,2685,100,[[],"Error"]],[[2685,101,2685,103,[4,[]]]]]]]]]]]]]]]]]]]],[2686,1,2749,15,[[2686,1,2686,13,"checkPattern"],[[2686,14,2686,20,[11,"config"]],[2686,21,2686,28,[11,"context"]],[2686,29,2686,36,[11,"hasType"]],[2686,37,2686,41,[11,"node"]]],[2687,5,2749,15,[16,[[[2688,9,2690,40,[0,[[0],[1,[2688,9,2688,71,[[2688,9,2688,11,"go"],[2688,14,2688,71,[6,[2688,14,2688,36,[1,[2688,14,2688,19,[[],"Maybe"]],[[2688,20,2688,36,[1,[2688,20,2688,36,[[],"DereferencedType"]],[]]]]]],[2688,40,2688,71,[6,[2688,40,2688,52,[1,[2688,40,2688,44,[[],"Node"]],[[2688,45,2688,52,[1,[2688,45,2688,52,[[],"Pattern"]],[]]]]]],[2688,56,2688,71,[1,[2688,56,2688,60,[[],"List"]],[[2688,61,2688,71,[1,[2688,62,2688,67,[[],"Error"]],[[2688,68,2688,70,[4,[]]]]]]]]]]]]]]]],[2689,9,2690,40,[[2689,9,2689,11,"go"],[],[2690,13,2690,40,[0,[[2690,13,2690,25,[2,[],"checkPattern"]],[2690,26,2690,32,[2,[],"config"]],[2690,33,2690,40,[2,[],"context"]]]]]]]]]]],[2692,5,2749,15,[17,[[2692,10,2692,25,[0,[[2692,10,2692,20,[2,["Node"],"value"]],[2692,21,2692,25,[2,[],"node"]]]]],[[[2693,9,2693,24,[12,[[],"TuplePattern"],[[2693,22,2693,24,[11,"ps"]]]]],[2695,13,2696,31,[1,"|>",0,[2695,13,2695,55,[0,[[2695,13,2695,22,[2,["List"],"map2"]],[2695,23,2695,25,[2,[],"go"]],[2695,26,2695,52,[7,[2695,27,2695,51,[0,[[2695,27,2695,40,[2,[],"getTupleTypes"]],[2695,41,2695,43,[2,[],"ps"]],[2695,44,2695,51,[2,[],"hasType"]]]]]]],[2695,53,2695,55,[2,[],"ps"]]]]],[2696,20,2696,31,[2,["List"],"concat"]]]]],[[2698,9,2698,27,[12,[[],"UnConsPattern"],[[2698,23,2698,24,[11,"p"]],[2698,25,2698,27,[11,"ps"]]]]],[2699,13,2705,38,[16,[[[2701,17,2703,40,[0,[[0],[1,[2701,17,2701,47,[[2701,17,2701,22,"type_"],[2701,25,2701,47,[1,[2701,25,2701,30,[[],"Maybe"]],[[2701,31,2701,47,[1,[2701,31,2701,47,[[],"DereferencedType"]],[]]]]]]]]],[2702,17,2703,40,[[2702,17,2702,22,"type_"],[],[2703,21,2703,40,[0,[[2703,21,2703,32,[2,[],"getListType"]],[2703,33,2703,40,[2,[],"hasType"]]]]]]]]]]],[2705,13,2705,38,[1,"++",1,[2705,13,2705,23,[0,[[2705,13,2705,15,[2,[],"go"]],[2705,16,2705,21,[2,[],"type_"]],[2705,22,2705,23,[2,[],"p"]]]]],[2705,27,2705,38,[0,[[2705,27,2705,29,[2,[],"go"]],[2705,30,2705,35,[2,[],"type_"]],[2705,36,2705,38,[2,[],"ps"]]]]]]]]]]],[[2707,9,2707,23,[12,[[],"ListPattern"],[[2707,21,2707,23,[11,"ps"]]]]],[2708,13,2714,41,[16,[[[2710,17,2712,40,[0,[[0],[1,[2710,17,2710,47,[[2710,17,2710,22,"type_"],[2710,25,2710,47,[1,[2710,25,2710,30,[[],"Maybe"]],[[2710,31,2710,47,[1,[2710,31,2710,47,[[],"DereferencedType"]],[]]]]]]]]],[2711,17,2712,40,[[2711,17,2711,22,"type_"],[],[2712,21,2712,40,[0,[[2712,21,2712,32,[2,[],"getListType"]],[2712,33,2712,40,[2,[],"hasType"]]]]]]]]]]],[2714,13,2714,41,[0,[[2714,13,2714,27,[2,["List"],"concatMap"]],[2714,28,2714,38,[7,[2714,29,2714,37,[0,[[2714,29,2714,31,[2,[],"go"]],[2714,32,2714,37,[2,[],"type_"]]]]]]],[2714,39,2714,41,[2,[],"ps"]]]]]]]]],[[2716,9,2716,22,[12,[[],"AsPattern"],[[2716,19,2716,20,[11,"p"]],[2716,21,2716,22,[0]]]]],[2718,13,2718,25,[0,[[2718,13,2718,15,[2,[],"go"]],[2718,16,2718,23,[2,[],"hasType"]],[2718,24,2718,25,[2,[],"p"]]]]]],[[2720,9,2720,31,[12,[[],"ParenthesizedPattern"],[[2720,30,2720,31,[11,"p"]]]]],[2722,13,2722,25,[0,[[2722,13,2722,15,[2,[],"go"]],[2722,16,2722,23,[2,[],"hasType"]],[2722,24,2722,25,[2,[],"p"]]]]]],[[2724,9,2724,35,[12,[[],"NamedPattern"],[[2724,22,2724,30,[8,[[2724,24,2724,28,"name"]]]],[2724,31,2724,35,[11,"pats"]]]]],[2728,13,2731,84,[1,"|>",0,[2728,13,2730,41,[1,"|>",0,[2728,13,2729,70,[1,"|>",0,[2728,13,2728,98,[0,[[2728,13,2728,29,[2,[],"findFunctionType"]],[2728,30,2728,80,[8,[[2728,32,2728,49,[[2728,32,2728,39,"context"],[2728,42,2728,49,[2,[],"context"]]]],[2728,51,2728,79,[[2728,51,2728,65,"localFunctions"],[2728,68,2728,78,[2,["Dict"],"empty"]]]]]]],[2728,81,2728,88,[2,[],"hasType"]],[2728,89,2728,93,[2,[],"node"]],[2728,94,2728,98,[2,[],"name"]]]]],[2729,20,2729,70,[0,[[2729,20,2729,29,[2,["Maybe"],"map"]],[2729,30,2729,70,[7,[2729,31,2729,69,[0,[[2729,31,2729,40,[2,["List"],"map2"]],[2729,41,2729,64,[7,[2729,42,2729,63,[18,[[[2729,43,2729,44,[11,"p"]],[2729,45,2729,46,[11,"t"]]],[2729,50,2729,63,[0,[[2729,50,2729,52,[2,[],"go"]],[2729,53,2729,61,[7,[2729,54,2729,60,[0,[[2729,54,2729,58,[2,[],"Just"]],[2729,59,2729,60,[2,[],"t"]]]]]]],[2729,62,2729,63,[2,[],"p"]]]]]]]]]],[2729,65,2729,69,[2,[],"pats"]]]]]]]]]]]],[2730,20,2730,41,[0,[[2730,20,2730,29,[2,["Maybe"],"map"]],[2730,30,2730,41,[2,["List"],"concat"]]]]]]],[2731,20,2731,84,[0,[[2731,20,2731,42,[2,["MaybeX"],"withDefaultLazy"]],[2731,43,2731,84,[7,[2731,44,2731,83,[18,[[[2731,45,2731,47,[1]]],[2731,51,2731,83,[0,[[2731,51,2731,65,[2,["List"],"concatMap"]],[2731,66,2731,78,[7,[2731,67,2731,77,[0,[[2731,67,2731,69,[2,[],"go"]],[2731,70,2731,77,[2,[],"Nothing"]]]]]]],[2731,79,2731,83,[2,[],"pats"]]]]]]]]]]]]]]]],[[2733,9,2733,29,[12,[[],"RecordPattern"],[[2733,23,2733,29,[11,"fields"]]]]],[2734,13,2737,31,[1,"|>",0,[2734,13,2735,46,[1,"|>",0,[2734,13,2734,70,[0,[[2734,13,2734,37,[2,[],"recordPatternToCheckable"]],[2734,38,2734,55,[7,[2734,39,2734,54,[0,[[2734,39,2734,49,[2,["Node"],"range"]],[2734,50,2734,54,[2,[],"node"]]]]]]],[2734,56,2734,63,[2,[],"hasType"]],[2734,64,2734,70,[2,[],"fields"]]]]],[2735,20,2735,46,[0,[[2735,20,2735,31,[2,[],"checkRecord"]],[2735,32,2735,38,[2,[],"config"]],[2735,39,2735,46,[2,[],"context"]]]]]]],[2737,20,2737,31,[2,["Tuple"],"first"]]]]],[[2739,9,2739,10,[0]],[2749,13,2749,15,[9,[]]]]]]]]]]]]]]]],[2752,1,2790,13,[0,[[1,[2752,1,2754,3,"{-| Given an error range and whether or not a record has all fields of the known\ntype, convert a `RecordDefinition` into a checkable record.\n-}"]],[1,[2755,1,2755,117,[[2755,1,2755,21,"recordDefToCheckable"],[2755,24,2755,117,[6,[2755,24,2755,37,[1,[2755,24,2755,37,[[],"ModuleContext"]],[]]],[2755,41,2755,117,[6,[2755,41,2755,46,[1,[2755,41,2755,46,[[],"Range"]],[]]],[2755,50,2755,117,[6,[2755,50,2755,54,[1,[2755,50,2755,54,[[],"Bool"]],[]]],[2755,58,2755,117,[6,[2755,58,2755,80,[1,[2755,58,2755,63,[[],"Maybe"]],[[2755,64,2755,80,[1,[2755,64,2755,80,[[],"DereferencedType"]],[]]]]]],[2755,84,2755,117,[6,[2755,84,2755,100,[1,[2755,84,2755,100,[[],"RecordDefinition"]],[]]],[2755,104,2755,117,[1,[2755,104,2755,117,[[],"RecordToCheck"]],[]]]]]]]]]]]]]]]],[2756,1,2790,13,[[2756,1,2756,21,"recordDefToCheckable"],[[2756,22,2756,29,[11,"context"]],[2756,30,2756,39,[11,"fullRange"]],[2756,40,2756,52,[11,"hasAllFields"]],[2756,53,2756,70,[11,"hasTypeFromParent"]],[2756,71,2756,77,[11,"fields"]]],[2757,5,2790,13,[16,[[[2758,9,2762,24,[0,[[0],[1,[2758,9,2758,65,[[2758,9,2758,17,"makeType"],[2758,20,2758,65,[6,[2758,20,2758,39,[1,[2758,20,2758,24,[[],"Node"]],[[2758,25,2758,39,[1,[2758,25,2758,39,[[],"TypeAnnotation"]],[]]]]]],[2758,43,2758,65,[1,[2758,43,2758,48,[[],"Maybe"]],[[2758,49,2758,65,[1,[2758,49,2758,65,[[],"DereferencedType"]],[]]]]]]]]]]],[2759,9,2762,24,[[2759,9,2759,17,"makeType"],[],[2760,13,2762,24,[1,">>",1,[2760,13,2760,48,[0,[[2760,13,2760,40,[2,[],"typeAnnotToNoncanonicalType"]],[2760,41,2760,48,[2,[],"context"]]]]],[2761,20,2762,24,[1,">>",1,[2761,20,2761,43,[0,[[2761,20,2761,35,[2,[],"dereferenceType"]],[2761,36,2761,43,[2,[],"context"]]]]],[2762,20,2762,24,[2,[],"Just"]]]]]]]]]]],[2764,9,2774,22,[0,[[0],[1,[2764,9,2764,36,[[2764,9,2764,18,"orderInfo"],[2764,21,2764,36,[1,[2764,21,2764,26,[[],"Maybe"]],[[2764,27,2764,36,[1,[2764,27,2764,36,[[],"OrderInfo"]],[]]]]]]]]],[2765,9,2774,22,[[2765,9,2765,18,"orderInfo"],[],[2766,13,2774,22,[1,"|>",0,[2766,13,2767,43,[1,"|>",0,[2766,13,2766,79,[0,[[2766,13,2766,26,[2,["Maybe"],"andThen"]],[2766,27,2766,61,[7,[2766,28,2766,60,[1,"<<",0,[2766,28,2766,42,[2,["Result"],"toMaybe"]],[2766,46,2766,60,[2,[],"makeFieldOrder"]]]]]],[2766,62,2766,79,[2,[],"hasTypeFromParent"]]]]],[2767,20,2767,43,[0,[[2767,20,2767,29,[2,["Maybe"],"map"]],[2767,30,2767,43,[2,[],"HasFieldOrder"]]]]]]],[2768,20,2774,22,[0,[[2768,20,2768,33,[2,["MaybeX"],"orElse"]],[2769,21,2774,22,[7,[2769,22,2773,32,[11,[2769,25,2769,37,[2,[],"hasAllFields"]],[2770,25,2770,42,[0,[[2770,25,2770,29,[2,[],"Just"]],[2770,30,2770,42,[2,[],"HasAllFields"]]]]],[2773,25,2773,32,[2,[],"Nothing"]]]]]]]]]]]]]]]]],[2776,5,2790,13,[1,"|>",0,[2776,5,2784,15,[0,[[2776,5,2776,13,[2,["List"],"map"]],[2777,9,2783,10,[7,[2777,10,2782,87,[18,[[[2777,11,2777,12,[11,"f"]]],[2778,13,2782,87,[16,[[[2779,17,2780,33,[1,[2779,17,2779,33,[7,[[2779,19,2779,24,[11,"field"]],[2779,26,2779,31,[11,"type_"]]]]],[2780,21,2780,33,[0,[[2780,21,2780,31,[2,["Node"],"value"]],[2780,32,2780,33,[2,[],"f"]]]]]]]],[2782,13,2782,87,[8,[[2782,15,2782,39,[[2782,15,2782,20,"field"],[2782,23,2782,39,[0,[[2782,23,2782,33,[2,["Node"],"value"]],[2782,34,2782,39,[2,[],"field"]]]]]]],[2782,41,2782,63,[[2782,41,2782,46,"type_"],[2782,49,2782,63,[0,[[2782,49,2782,57,[2,[],"makeType"]],[2782,58,2782,63,[2,[],"type_"]]]]]]],[2782,65,2782,86,[[2782,65,2782,70,"range"],[2782,73,2782,85,[0,[[2782,73,2782,83,[2,["Node"],"range"]],[2782,84,2782,85,[2,[],"f"]]]]]]]]]]]]]]]]]],[2784,9,2784,15,[2,[],"fields"]]]]],[2785,12,2790,13,[7,[2785,13,2789,18,[18,[[[2785,14,2785,16,[11,"fs"]]],[2786,17,2789,18,[8,[[2786,19,2786,40,[[2786,19,2786,28,"fullRange"],[2786,31,2786,40,[2,[],"fullRange"]]]],[2787,19,2788,17,[[2787,19,2787,28,"orderInfo"],[2787,31,2787,40,[2,[],"orderInfo"]]]],[2788,19,2789,17,[[2788,19,2788,25,"fields"],[2788,28,2788,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[2793,1,2834,18,[0,[[1,[2793,1,2796,3,"{-| Convert a record type into a field order, assuming no fields are missing\n(since that would be a type error). Returns a list of non-canonical fields\nencountered\n-}"]],[1,[2797,1,2797,79,[[2797,1,2797,15,"makeFieldOrder"],[2797,18,2797,79,[6,[2797,18,2797,34,[1,[2797,18,2797,34,[[],"DereferencedType"]],[]]],[2797,38,2797,79,[1,[2797,38,2797,44,[[],"Result"]],[[2797,45,2797,68,[1,[2797,46,2797,50,[[],"List"]],[[2797,51,2797,67,[3,[[2797,53,2797,59,[1,[2797,53,2797,59,[[],"String"]],[]]],[2797,61,2797,65,[1,[2797,61,2797,65,[[],"Type"]],[]]]]]]]]],[2797,69,2797,79,[1,[2797,69,2797,79,[[],"FieldOrder"]],[]]]]]]]]]]],[2798,1,2834,18,[[2798,1,2798,15,"makeFieldOrder"],[],[2799,5,2834,18,[16,[[[2800,9,2832,27,[0,[[0],[1,[2800,9,2800,63,[[2800,9,2800,11,"go"],[2800,14,2800,63,[6,[2800,14,2800,18,[1,[2800,14,2800,18,[[],"Type"]],[]]],[2800,22,2800,63,[1,[2800,22,2800,28,[[],"Result"]],[[2800,29,2800,52,[1,[2800,30,2800,34,[[],"List"]],[[2800,35,2800,51,[3,[[2800,37,2800,43,[1,[2800,37,2800,43,[[],"String"]],[]]],[2800,45,2800,49,[1,[2800,45,2800,49,[[],"Type"]],[]]]]]]]]],[2800,53,2800,63,[1,[2800,53,2800,63,[[],"FieldOrder"]],[]]]]]]]]]]],[2801,9,2832,27,[[2801,9,2801,11,"go"],[[2801,12,2801,17,[11,"type_"]]],[2802,13,2832,27,[17,[[2802,18,2802,23,[2,[],"type_"]],[[[2803,17,2803,58,[12,[[],"RecordType"],[[2803,28,2803,58,[8,[[2803,30,2803,39,"canonical"],[2803,41,2803,48,"generic"],[2803,50,2803,56,"fields"]]]]]]],[2804,21,2829,35,[11,[2804,24,2804,33,[2,[],"canonical"]],[2805,25,2826,34,[1,"<|",1,[2805,25,2805,27,[2,[],"Ok"]],[2806,29,2826,34,[0,[[2806,29,2806,39,[2,[],"FieldOrder"]],[2807,33,2826,34,[8,[[2807,35,2809,57,[[2807,35,2807,44,"canonical"],[2808,37,2809,57,[1,"|>",0,[2808,37,2808,92,[0,[[2808,37,2808,52,[2,["List"],"indexedMap"]],[2808,53,2808,85,[7,[2808,54,2808,84,[18,[[[2808,55,2808,56,[11,"i"]],[2808,57,2808,65,[7,[[2808,59,2808,60,[11,"n"]],[2808,62,2808,63,[11,"t"]]]]]],[2808,69,2808,84,[6,[[2808,71,2808,72,[2,[],"n"]],[2808,74,2808,82,[6,[[2808,76,2808,77,[2,[],"i"]],[2808,79,2808,80,[2,[],"t"]]]]]]]]]]]]],[2808,86,2808,92,[2,[],"fields"]]]]],[2809,44,2809,57,[2,["Dict"],"fromList"]]]]]],[2810,35,2826,33,[[2810,35,2810,42,"generic"],[2811,37,2825,48,[0,[[2811,37,2811,46,[2,["Maybe"],"map"]],[2812,41,2824,42,[7,[2812,42,2823,73,[18,[[[2812,43,2812,44,[11,"g"]]],[2813,45,2823,73,[17,[[2813,50,2813,54,[0,[[2813,50,2813,52,[2,[],"go"]],[2813,53,2813,54,[2,[],"g"]]]]],[[[2814,49,2814,53,[12,[[],"Ok"],[[2814,52,2814,53,[11,"o"]]]]],[2815,53,2815,68,[0,[[2815,53,2815,66,[2,[],"OrderedFields"]],[2815,67,2815,68,[2,[],"o"]]]]]],[[2817,49,2817,55,[12,[[],"Err"],[[2817,53,2817,55,[10,[]]]]]],[2819,53,2819,126,[1,"<|",1,[2819,53,2819,66,[2,[],"OrderedFields"]],[2819,70,2819,126,[0,[[2819,70,2819,80,[2,[],"FieldOrder"]],[2819,81,2819,126,[8,[[2819,83,2819,105,[[2819,83,2819,92,"canonical"],[2819,95,2819,105,[2,["Dict"],"empty"]]]],[2819,107,2819,125,[[2819,107,2819,114,"generic"],[2819,117,2819,124,[2,[],"Nothing"]]]]]]]]]]]]],[[2821,49,2821,55,[12,[[],"Err"],[[2821,53,2821,55,[11,"fs"]]]]],[2822,53,2823,73,[1,"|>",0,[2822,53,2822,76,[0,[[2822,53,2822,61,[2,["List"],"map"]],[2822,62,2822,73,[2,["Tuple"],"first"]],[2822,74,2822,76,[2,[],"fs"]]]]],[2823,60,2823,73,[2,[],"UnknownFields"]]]]]]]]]]]]]],[2825,41,2825,48,[2,[],"generic"]]]]]]]]]]]]]]],[2829,25,2829,35,[0,[[2829,25,2829,28,[2,[],"Err"]],[2829,29,2829,35,[2,[],"fields"]]]]]]]],[[2831,17,2831,18,[0]],[2832,21,2832,27,[0,[[2832,21,2832,24,[2,[],"Err"]],[2832,25,2832,27,[9,[]]]]]]]]]]]]]]]]],[2834,5,2834,18,[1,"<<",0,[2834,5,2834,7,[2,[],"go"]],[2834,11,2834,18,[2,[],"getType"]]]]]]]]]]]],[2837,1,2864,13,[0,[[1,[2837,1,2839,3,"{-| Given an error range and maybe a type, convert a record pattern to a\ncheckable record.\n-}"]],[1,[2840,1,2840,98,[[2840,1,2840,25,"recordPatternToCheckable"],[2840,28,2840,98,[6,[2840,28,2840,33,[1,[2840,28,2840,33,[[],"Range"]],[]]],[2840,37,2840,98,[6,[2840,37,2840,59,[1,[2840,37,2840,42,[[],"Maybe"]],[[2840,43,2840,59,[1,[2840,43,2840,59,[[],"DereferencedType"]],[]]]]]],[2840,63,2840,98,[6,[2840,63,2840,81,[1,[2840,63,2840,67,[[],"List"]],[[2840,68,2840,81,[1,[2840,69,2840,73,[[],"Node"]],[[2840,74,2840,80,[1,[2840,74,2840,80,[[],"String"]],[]]]]]]]]],[2840,85,2840,98,[1,[2840,85,2840,98,[[],"RecordToCheck"]],[]]]]]]]]]]]],[2841,1,2864,13,[[2841,1,2841,25,"recordPatternToCheckable"],[[2841,26,2841,35,[11,"fullRange"]],[2841,36,2841,43,[11,"hasType"]]],[2842,5,2864,13,[16,[[[2843,9,2845,40,[0,[[0],[1,[2843,9,2843,45,[[2843,9,2843,14,"types"],[2843,17,2843,45,[1,[2843,17,2843,21,[[],"Dict"]],[[2843,22,2843,28,[1,[2843,22,2843,28,[[],"String"]],[]]],[2843,29,2843,45,[1,[2843,29,2843,45,[[],"DereferencedType"]],[]]]]]]]]],[2844,9,2845,40,[[2844,9,2844,14,"types"],[],[2845,13,2845,40,[0,[[2845,13,2845,32,[2,[],"getRecordFieldTypes"]],[2845,33,2845,40,[2,[],"hasType"]]]]]]]]]],[2847,9,2850,43,[0,[[0],[1,[2847,9,2847,36,[[2847,9,2847,18,"orderInfo"],[2847,21,2847,36,[1,[2847,21,2847,26,[[],"Maybe"]],[[2847,27,2847,36,[1,[2847,27,2847,36,[[],"OrderInfo"]],[]]]]]]]]],[2848,9,2850,43,[[2848,9,2848,18,"orderInfo"],[],[2849,13,2850,43,[1,"|>",0,[2849,13,2849,69,[0,[[2849,13,2849,26,[2,["Maybe"],"andThen"]],[2849,27,2849,61,[7,[2849,28,2849,60,[1,"<<",0,[2849,28,2849,42,[2,["Result"],"toMaybe"]],[2849,46,2849,60,[2,[],"makeFieldOrder"]]]]]],[2849,62,2849,69,[2,[],"hasType"]]]]],[2850,20,2850,43,[0,[[2850,20,2850,29,[2,["Maybe"],"map"]],[2850,30,2850,43,[2,[],"HasFieldOrder"]]]]]]]]]]]]],[2852,5,2864,13,[1,">>",1,[2852,5,2858,10,[0,[[2852,5,2852,13,[2,["List"],"map"]],[2853,9,2858,10,[7,[2853,10,2857,14,[18,[[[2853,11,2853,12,[11,"r"]]],[2854,13,2857,14,[8,[[2854,15,2854,35,[[2854,15,2854,20,"field"],[2854,23,2854,35,[0,[[2854,23,2854,33,[2,["Node"],"value"]],[2854,34,2854,35,[2,[],"r"]]]]]]],[2855,15,2856,13,[[2855,15,2855,20,"type_"],[2855,23,2855,52,[0,[[2855,23,2855,31,[2,["Dict"],"get"]],[2855,32,2855,46,[7,[2855,33,2855,45,[0,[[2855,33,2855,43,[2,["Node"],"value"]],[2855,44,2855,45,[2,[],"r"]]]]]]],[2855,47,2855,52,[2,[],"types"]]]]]]],[2856,15,2857,13,[[2856,15,2856,20,"range"],[2856,23,2856,35,[0,[[2856,23,2856,33,[2,["Node"],"range"]],[2856,34,2856,35,[2,[],"r"]]]]]]]]]]]]]]]]]],[2859,12,2864,13,[7,[2859,13,2863,18,[18,[[[2859,14,2859,16,[11,"fs"]]],[2860,17,2863,18,[8,[[2860,19,2860,40,[[2860,19,2860,28,"fullRange"],[2860,31,2860,40,[2,[],"fullRange"]]]],[2861,19,2862,17,[[2861,19,2861,28,"orderInfo"],[2861,31,2861,40,[2,[],"orderInfo"]]]],[2862,19,2863,17,[[2862,19,2862,25,"fields"],[2862,28,2862,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[2867,1,2910,13,[0,[[1,[2867,1,2869,3,"{-| Given an error range, whether or not a record has all fields of the known\ntype, and maybe a type, convert a list of record setters to a checkable record.\n-}"]],[1,[2870,1,2870,128,[[2870,1,2870,25,"recordSettersToCheckable"],[2870,28,2870,128,[6,[2870,28,2870,40,[1,[2870,28,2870,40,[[],"LocalContext"]],[]]],[2870,44,2870,128,[6,[2870,44,2870,49,[1,[2870,44,2870,49,[[],"Range"]],[]]],[2870,53,2870,128,[6,[2870,53,2870,57,[1,[2870,53,2870,57,[[],"Bool"]],[]]],[2870,61,2870,128,[6,[2870,61,2870,83,[1,[2870,61,2870,66,[[],"Maybe"]],[[2870,67,2870,83,[1,[2870,67,2870,83,[[],"DereferencedType"]],[]]]]]],[2870,87,2870,128,[6,[2870,87,2870,111,[1,[2870,87,2870,91,[[],"List"]],[[2870,92,2870,111,[1,[2870,93,2870,97,[[],"Node"]],[[2870,98,2870,110,[1,[2870,98,2870,110,[[],"RecordSetter"]],[]]]]]]]]],[2870,115,2870,128,[1,[2870,115,2870,128,[[],"RecordToCheck"]],[]]]]]]]]]]]]]]]],[2871,1,2910,13,[[2871,1,2871,25,"recordSettersToCheckable"],[[2871,26,2871,33,[11,"context"]],[2871,34,2871,43,[11,"fullRange"]],[2871,44,2871,56,[11,"hasAllFields"]],[2871,57,2871,64,[11,"hasType"]]],[2872,5,2910,13,[16,[[[2873,9,2879,24,[0,[[0],[1,[2873,9,2873,35,[[2873,9,2873,17,"fallback"],[2873,20,2873,35,[1,[2873,20,2873,25,[[],"Maybe"]],[[2873,26,2873,35,[1,[2873,26,2873,35,[[],"OrderInfo"]],[]]]]]]]]],[2874,9,2879,24,[[2874,9,2874,17,"fallback"],[],[2875,13,2879,24,[11,[2875,16,2875,28,[2,[],"hasAllFields"]],[2876,17,2876,34,[0,[[2876,17,2876,21,[2,[],"Just"]],[2876,22,2876,34,[2,[],"HasAllFields"]]]]],[2879,17,2879,24,[2,[],"Nothing"]]]]]]]]],[2881,9,2883,40,[0,[[0],[1,[2881,9,2881,45,[[2881,9,2881,14,"types"],[2881,17,2881,45,[1,[2881,17,2881,21,[[],"Dict"]],[[2881,22,2881,28,[1,[2881,22,2881,28,[[],"String"]],[]]],[2881,29,2881,45,[1,[2881,29,2881,45,[[],"DereferencedType"]],[]]]]]]]]],[2882,9,2883,40,[[2882,9,2882,14,"types"],[],[2883,13,2883,40,[0,[[2883,13,2883,32,[2,[],"getRecordFieldTypes"]],[2883,33,2883,40,[2,[],"hasType"]]]]]]]]]],[2885,9,2889,42,[0,[[0],[1,[2885,9,2885,36,[[2885,9,2885,18,"orderInfo"],[2885,21,2885,36,[1,[2885,21,2885,26,[[],"Maybe"]],[[2885,27,2885,36,[1,[2885,27,2885,36,[[],"OrderInfo"]],[]]]]]]]]],[2886,9,2889,42,[[2886,9,2886,18,"orderInfo"],[],[2887,13,2889,42,[1,"|>",0,[2887,13,2888,43,[1,"|>",0,[2887,13,2887,69,[0,[[2887,13,2887,26,[2,["Maybe"],"andThen"]],[2887,27,2887,61,[7,[2887,28,2887,60,[1,"<<",0,[2887,28,2887,42,[2,["Result"],"toMaybe"]],[2887,46,2887,60,[2,[],"makeFieldOrder"]]]]]],[2887,62,2887,69,[2,[],"hasType"]]]]],[2888,20,2888,43,[0,[[2888,20,2888,29,[2,["Maybe"],"map"]],[2888,30,2888,43,[2,[],"HasFieldOrder"]]]]]]],[2889,20,2889,42,[0,[[2889,20,2889,33,[2,["MaybeX"],"orElse"]],[2889,34,2889,42,[2,[],"fallback"]]]]]]]]]]]]],[2891,5,2910,13,[1,">>",1,[2891,5,2904,10,[0,[[2891,5,2891,13,[2,["List"],"map"]],[2892,9,2904,10,[7,[2892,10,2903,14,[18,[[[2892,11,2892,12,[11,"r"]]],[2893,13,2903,14,[16,[[[2894,17,2896,62,[0,[[0],[1,[2894,17,2894,27,[[2894,17,2894,18,"f"],[2894,21,2894,27,[1,[2894,21,2894,27,[[],"String"]],[]]]]]],[2895,17,2896,62,[[2895,17,2895,18,"f"],[],[2896,21,2896,62,[1,"<|",1,[2896,21,2896,31,[2,["Node"],"value"]],[2896,35,2896,62,[1,"<|",1,[2896,35,2896,46,[2,["Tuple"],"first"]],[2896,50,2896,62,[0,[[2896,50,2896,60,[2,["Node"],"value"]],[2896,61,2896,62,[2,[],"r"]]]]]]]]]]]]]]],[2898,13,2903,14,[8,[[2898,15,2898,24,[[2898,15,2898,20,"field"],[2898,23,2898,24,[2,[],"f"]]]],[2899,15,2902,13,[[2899,15,2899,20,"type_"],[2900,17,2901,104,[1,"|>",0,[2900,17,2900,33,[0,[[2900,17,2900,25,[2,["Dict"],"get"]],[2900,26,2900,27,[2,[],"f"]],[2900,28,2900,33,[2,[],"types"]]]]],[2901,24,2901,104,[0,[[2901,24,2901,41,[2,["MaybeX"],"orElseLazy"]],[2901,42,2901,104,[7,[2901,43,2901,103,[18,[[[2901,44,2901,46,[1]]],[2901,50,2901,103,[1,"<|",1,[2901,50,2901,71,[0,[[2901,50,2901,63,[2,[],"inferExprType"]],[2901,64,2901,71,[2,[],"context"]]]]],[2901,75,2901,103,[1,"<|",1,[2901,75,2901,87,[2,["Tuple"],"second"]],[2901,91,2901,103,[0,[[2901,91,2901,101,[2,["Node"],"value"]],[2901,102,2901,103,[2,[],"r"]]]]]]]]]]]]]]]]]]]]],[2902,15,2903,13,[[2902,15,2902,20,"range"],[2902,23,2902,35,[0,[[2902,23,2902,33,[2,["Node"],"range"]],[2902,34,2902,35,[2,[],"r"]]]]]]]]]]]]]]]]]]]]],[2905,12,2910,13,[7,[2905,13,2909,18,[18,[[[2905,14,2905,16,[11,"fs"]]],[2906,17,2909,18,[8,[[2906,19,2906,40,[[2906,19,2906,28,"fullRange"],[2906,31,2906,40,[2,[],"fullRange"]]]],[2907,19,2908,17,[[2907,19,2907,28,"orderInfo"],[2907,31,2907,40,[2,[],"orderInfo"]]]],[2908,19,2909,17,[[2908,19,2908,25,"fields"],[2908,28,2908,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[2913,1,2929,19,[0,[[1,[2913,1,2915,3,"{-| Given two dicts of field types, keep only fields that have identical types\nbetween the two.\n-}"]],[1,[2916,1,2916,86,[[2916,1,2916,27,"keepOnlyMatchingFieldTypes"],[2916,30,2916,86,[6,[2916,30,2916,46,[1,[2916,30,2916,34,[[],"Dict"]],[[2916,35,2916,41,[1,[2916,35,2916,41,[[],"String"]],[]]],[2916,42,2916,46,[1,[2916,42,2916,46,[[],"Type"]],[]]]]]],[2916,50,2916,86,[6,[2916,50,2916,66,[1,[2916,50,2916,54,[[],"Dict"]],[[2916,55,2916,61,[1,[2916,55,2916,61,[[],"String"]],[]]],[2916,62,2916,66,[1,[2916,62,2916,66,[[],"Type"]],[]]]]]],[2916,70,2916,86,[1,[2916,70,2916,74,[[],"Dict"]],[[2916,75,2916,81,[1,[2916,75,2916,81,[[],"String"]],[]]],[2916,82,2916,86,[1,[2916,82,2916,86,[[],"Type"]],[]]]]]]]]]]]]],[2917,1,2929,19,[[2917,1,2917,27,"keepOnlyMatchingFieldTypes"],[[2917,28,2917,30,[11,"d1"]],[2917,31,2917,33,[11,"d2"]]],[2918,5,2929,19,[0,[[2918,5,2918,15,[2,["Dict"],"merge"]],[2918,16,2918,33,[7,[2918,17,2918,32,[18,[[[2918,18,2918,19,[0]],[2918,20,2918,21,[0]],[2918,22,2918,25,[11,"acc"]]],[2918,29,2918,32,[2,[],"acc"]]]]]]],[2919,9,2925,10,[7,[2919,10,2924,20,[18,[[[2919,11,2919,16,[11,"field"]],[2919,17,2919,19,[11,"t1"]],[2919,20,2919,22,[11,"t2"]],[2919,23,2919,26,[11,"acc"]]],[2920,13,2924,20,[11,[2920,16,2920,24,[1,"==",2,[2920,16,2920,18,[2,[],"t1"]],[2920,22,2920,24,[2,[],"t2"]]]],[2921,17,2921,41,[0,[[2921,17,2921,28,[2,["Dict"],"insert"]],[2921,29,2921,34,[2,[],"field"]],[2921,35,2921,37,[2,[],"t1"]],[2921,38,2921,41,[2,[],"acc"]]]]],[2924,17,2924,20,[2,[],"acc"]]]]]]]]],[2926,9,2926,26,[7,[2926,10,2926,25,[18,[[[2926,11,2926,12,[0]],[2926,13,2926,14,[0]],[2926,15,2926,18,[11,"acc"]]],[2926,22,2926,25,[2,[],"acc"]]]]]]],[2927,9,2927,11,[2,[],"d1"]],[2928,9,2928,11,[2,[],"d2"]],[2929,9,2929,19,[2,["Dict"],"empty"]]]]]]]]]],[2932,1,3078,50,[0,[[1,[2932,1,2934,3,"{-| Once a record has been reduced to a standard format, check its sorting,\nreturning a list of canonical field types, if any were found.\n-}"]],[1,[2935,1,2935,100,[[2935,1,2935,12,"checkRecord"],[2935,15,2935,100,[6,[2935,15,2935,25,[1,[2935,15,2935,25,[[],"RuleConfig"]],[]]],[2935,29,2935,100,[6,[2935,29,2935,42,[1,[2935,29,2935,42,[[],"ModuleContext"]],[]]],[2935,46,2935,100,[6,[2935,46,2935,59,[1,[2935,46,2935,59,[[],"RecordToCheck"]],[]]],[2935,63,2935,100,[3,[[2935,65,2935,80,[1,[2935,65,2935,69,[[],"List"]],[[2935,70,2935,80,[1,[2935,71,2935,76,[[],"Error"]],[[2935,77,2935,79,[4,[]]]]]]]]],[2935,82,2935,98,[1,[2935,82,2935,86,[[],"Dict"]],[[2935,87,2935,93,[1,[2935,87,2935,93,[[],"String"]],[]]],[2935,94,2935,98,[1,[2935,94,2935,98,[[],"Type"]],[]]]]]]]]]]]]]]]]]],[2936,1,3078,50,[[2936,1,2936,12,"checkRecord"],[[2936,13,2936,82,[14,[2936,14,2936,81,[13,[2936,14,2936,71,[14,[2936,15,2936,70,[12,[[],"RuleConfig"],[[2936,26,2936,70,[8,[[2936,28,2936,39,"sortUnknown"],[2936,41,2936,54,"sortAmbiguous"],[2936,56,2936,68,"sortGenerics"]]]]]]]]],[2936,75,2936,81,"config"]]]]],[2936,83,2936,90,[11,"context"]],[2936,91,2936,135,[14,[2936,92,2936,134,[13,[2936,92,2936,124,[8,[[2936,94,2936,103,"fullRange"],[2936,105,2936,114,"orderInfo"],[2936,116,2936,122,"fields"]]]],[2936,128,2936,134,"record"]]]]]],[2937,5,3078,50,[16,[[[2938,9,2946,63,[0,[[0],[1,[2938,9,2938,27,[[2938,9,2938,19,"errorRange"],[2938,22,2938,27,[1,[2938,22,2938,27,[[],"Range"]],[]]]]]],[2939,9,2946,63,[[2939,9,2939,19,"errorRange"],[],[2940,13,2946,63,[16,[[[2941,17,2943,36,[0,[[0],[1,[2941,17,2941,29,[[2941,17,2941,18,"s"],[2941,21,2941,29,[1,[2941,21,2941,29,[[],"Location"]],[]]]]]],[2942,17,2943,36,[[2942,17,2942,18,"s"],[],[2943,21,2943,36,[19,[2943,21,2943,30,[2,[],"fullRange"]],[2943,31,2943,36,"start"]]]]]]]]],[2946,13,2946,63,[8,[[2946,15,2946,24,[[2946,15,2946,20,"start"],[2946,23,2946,24,[2,[],"s"]]]],[2946,26,2946,62,[[2946,26,2946,29,"end"],[2946,32,2946,61,[21,[2946,34,2946,35,"s"],[[2946,38,2946,60,[[2946,38,2946,44,"column"],[2946,47,2946,59,[1,"+",0,[2946,47,2946,55,[19,[2946,47,2946,48,[2,[],"s"]],[2946,49,2946,55,"column"]]],[2946,58,2946,59,[3,1]]]]]]]]]]]]]]]]]]]]]],[2948,9,3006,21,[0,[[0],[1,[2948,9,2957,14,[[2948,9,2948,23,"matchingOrders"],[2949,13,2957,14,[3,[[2949,15,2955,18,[1,[2949,15,2949,19,[[],"List"]],[[2950,17,2955,18,[4,[[2950,19,2950,57,[[2950,19,2950,27,"typeName"],[2950,30,2950,57,[1,[2950,30,2950,34,[[],"List"]],[[2950,35,2950,57,[3,[[2950,37,2950,47,[1,[2950,37,2950,47,[[],"ModuleName"]],[]]],[2950,49,2950,55,[1,[2950,49,2950,55,[[],"String"]],[]]]]]]]]]]],[2951,19,2952,17,[[2951,19,2951,29,"fieldOrder"],[2951,32,2951,47,[1,[2951,32,2951,36,[[],"Dict"]],[[2951,37,2951,43,[1,[2951,37,2951,43,[[],"String"]],[]]],[2951,44,2951,47,[1,[2951,44,2951,47,[[],"Int"]],[]]]]]]]],[2952,19,2953,17,[[2952,19,2952,35,"hasUnknownFields"],[2952,38,2952,42,[1,[2952,38,2952,42,[[],"Bool"]],[]]]]],[2953,19,2954,17,[[2953,19,2953,38,"canonicalFieldTypes"],[2953,41,2953,57,[1,[2953,41,2953,45,[[],"Dict"]],[[2953,46,2953,52,[1,[2953,46,2953,52,[[],"String"]],[]]],[2953,53,2953,57,[1,[2953,53,2953,57,[[],"Type"]],[]]]]]]]],[2954,19,2955,17,[[2954,19,2954,30,"isSubrecord"],[2954,33,2954,37,[1,[2954,33,2954,37,[[],"Bool"]],[]]]]]]]]]]],[2956,15,2956,19,[1,[2956,15,2956,19,[[],"Bool"]],[]]]]]]]]],[2958,9,3006,21,[[2958,9,2958,23,"matchingOrders"],[],[2959,13,3006,21,[1,"|>",0,[2959,13,2991,93,[1,"|>",0,[2959,13,2990,52,[1,"|>",0,[2959,13,2989,31,[1,"|>",0,[2959,13,2988,22,[1,"|>",0,[2959,13,2973,22,[1,"|>",0,[2959,13,2959,62,[0,[[2959,13,2959,30,[2,[],"findMatchingTypes"]],[2959,31,2959,37,[2,[],"config"]],[2959,38,2959,45,[2,[],"context"]],[2959,46,2959,55,[2,[],"orderInfo"]],[2959,56,2959,62,[2,[],"fields"]]]]],[2960,20,2973,22,[0,[[2960,20,2960,28,[2,["List"],"map"]],[2961,21,2973,22,[7,[2961,22,2972,33,[18,[[[2961,23,2961,60,[8,[[2961,25,2961,33,"typeName"],[2961,35,2961,45,"fieldOrder"],[2961,47,2961,58,"isSubrecord"]]]]],[2962,25,2972,33,[1,"|>",0,[2962,25,2962,65,[0,[[2962,25,2962,34,[2,[],"makeOrder"]],[2962,35,2962,47,[2,[],"sortGenerics"]],[2962,48,2962,54,[2,[],"fields"]],[2962,55,2962,65,[2,[],"fieldOrder"]]]]],[2963,32,2972,33,[7,[2963,33,2971,38,[18,[[[2963,34,2963,35,[11,"o"]]],[2964,37,2971,38,[6,[[2964,39,2964,63,[0,[[2964,39,2964,50,[2,["Dict"],"toList"]],[2964,51,2964,63,[19,[2964,51,2964,52,[2,[],"o"]],[2964,53,2964,63,"fieldOrder"]]]]]],[2965,39,2970,40,[8,[[2965,41,2965,60,[[2965,41,2965,49,"typeName"],[2965,52,2965,60,[2,[],"typeName"]]]],[2966,41,2967,39,[[2966,41,2966,51,"fieldOrder"],[2966,54,2966,66,[19,[2966,54,2966,55,[2,[],"o"]],[2966,56,2966,66,"fieldOrder"]]]]],[2967,41,2968,39,[[2967,41,2967,57,"hasUnknownFields"],[2967,60,2967,78,[19,[2967,60,2967,61,[2,[],"o"]],[2967,62,2967,78,"hasUnknownFields"]]]]],[2968,41,2969,39,[[2968,41,2968,60,"canonicalFieldTypes"],[2968,63,2968,84,[19,[2968,63,2968,64,[2,[],"o"]],[2968,65,2968,84,"canonicalFieldTypes"]]]]],[2969,41,2970,39,[[2969,41,2969,52,"isSubrecord"],[2969,55,2969,66,[2,[],"isSubrecord"]]]]]]]]]]]]]]]]]]]]]]]]]]],[2975,20,2988,22,[0,[[2975,20,2975,40,[2,["DictX"],"fromListDedupe"]],[2976,21,2988,22,[7,[2976,22,2987,33,[18,[[[2976,23,2976,25,[11,"o1"]],[2976,26,2976,28,[11,"o2"]]],[2977,25,2987,33,[1,"|>",0,[2977,25,2983,26,[7,[2977,26,2982,31,[11,[2977,29,2977,48,[19,[2977,29,2977,31,[2,[],"o1"]],[2977,32,2977,48,"hasUnknownFields"]]],[2979,29,2979,31,[2,[],"o2"]],[2982,29,2982,31,[2,[],"o1"]]]]]],[2984,32,2987,33,[7,[2984,33,2986,138,[18,[[[2984,34,2984,35,[11,"o"]]],[2986,37,2986,138,[21,[2986,39,2986,40,"o"],[[2986,43,2986,137,[[2986,43,2986,62,"canonicalFieldTypes"],[2986,65,2986,136,[0,[[2986,65,2986,91,[2,[],"keepOnlyMatchingFieldTypes"]],[2986,92,2986,113,[19,[2986,92,2986,93,[2,[],"o"]],[2986,94,2986,113,"canonicalFieldTypes"]]],[2986,114,2986,136,[19,[2986,114,2986,116,[2,[],"o2"]],[2986,117,2986,136,"canonicalFieldTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2989,20,2989,31,[2,["Dict"],"values"]]]],[2990,20,2990,52,[0,[[2990,20,2990,34,[2,["List"],"partition"]],[2990,35,2990,52,[20,".hasUnknownFields"]]]]]]],[2991,20,2991,93,[0,[[2991,20,2991,33,[2,["Tuple"],"mapBoth"]],[2991,34,2991,63,[7,[2991,35,2991,62,[0,[[2991,35,2991,49,[2,["List"],"partition"]],[2991,50,2991,62,[20,".isSubrecord"]]]]]]],[2991,64,2991,93,[7,[2991,65,2991,92,[0,[[2991,65,2991,79,[2,["List"],"partition"]],[2991,80,2991,92,[20,".isSubrecord"]]]]]]]]]]]],[2992,20,3006,21,[7,[2992,21,3005,65,[18,[[[2992,22,2992,24,[11,"os"]]],[2993,25,3005,65,[17,[[2993,30,2993,32,[2,[],"os"]],[[[2995,29,2995,71,[7,[[2995,31,2995,57,[7,[[2995,33,2995,51,[11,"unknownIsSubrecord"]],[2995,53,2995,55,[10,[]]]]]],[2995,59,2995,69,[7,[[2995,61,2995,63,[10,[]]],[2995,65,2995,67,[10,[]]]]]]]]],[2996,33,2996,61,[6,[[2996,35,2996,53,[2,[],"unknownIsSubrecord"]],[2996,55,2996,59,[2,[],"True"]]]]]],[[2998,29,2998,71,[7,[[2998,31,2998,57,[7,[[2998,33,2998,34,[0]],[2998,36,2998,55,[11,"unknownNotSubrecord"]]]]],[2998,59,2998,69,[7,[[2998,61,2998,63,[10,[]]],[2998,65,2998,67,[10,[]]]]]]]]],[2999,33,2999,62,[6,[[2999,35,2999,54,[2,[],"unknownNotSubrecord"]],[2999,56,2999,60,[2,[],"True"]]]]]],[[3001,29,3001,64,[7,[[3001,31,3001,32,[0]],[3001,34,3001,62,[7,[[3001,36,3001,56,[11,"noUnknownIsSubrecord"]],[3001,58,3001,60,[10,[]]]]]]]]],[3002,33,3002,64,[6,[[3002,35,3002,55,[2,[],"noUnknownIsSubrecord"]],[3002,57,3002,62,[2,[],"False"]]]]]],[[3004,29,3004,64,[7,[[3004,31,3004,32,[0]],[3004,34,3004,62,[7,[[3004,36,3004,37,[0]],[3004,39,3004,60,[11,"noUnknownNotSubrecord"]]]]]]]],[3005,33,3005,65,[6,[[3005,35,3005,56,[2,[],"noUnknownNotSubrecord"]],[3005,58,3005,63,[2,[],"False"]]]]]]]]]]]]]]]]]]]]]],[3008,9,3010,38,[0,[[0],[1,[3008,9,3008,47,[[3008,9,3008,21,"alphabetical"],[3008,24,3008,47,[6,[3008,24,3008,29,[1,[3008,24,3008,29,[[],"Field"]],[]]],[3008,33,3008,47,[6,[3008,33,3008,38,[1,[3008,33,3008,38,[[],"Field"]],[]]],[3008,42,3008,47,[1,[3008,42,3008,47,[[],"Order"]],[]]]]]]]]]],[3009,9,3010,38,[[3009,9,3009,21,"alphabetical"],[[3009,22,3009,24,[11,"f1"]],[3009,25,3009,27,[11,"f2"]]],[3010,13,3010,38,[0,[[3010,13,3010,20,[2,[],"compare"]],[3010,21,3010,29,[19,[3010,21,3010,23,[2,[],"f1"]],[3010,24,3010,29,"field"]]],[3010,30,3010,38,[19,[3010,30,3010,32,[2,[],"f2"]],[3010,33,3010,38,"field"]]]]]]]]]]],[3012,9,3020,46,[0,[[0],[1,[3012,9,3012,66,[[3012,9,3012,21,"byFieldOrder"],[3012,24,3012,66,[6,[3012,24,3012,39,[1,[3012,24,3012,28,[[],"Dict"]],[[3012,29,3012,35,[1,[3012,29,3012,35,[[],"String"]],[]]],[3012,36,3012,39,[1,[3012,36,3012,39,[[],"Int"]],[]]]]]],[3012,43,3012,66,[6,[3012,43,3012,48,[1,[3012,43,3012,48,[[],"Field"]],[]]],[3012,52,3012,66,[6,[3012,52,3012,57,[1,[3012,52,3012,57,[[],"Field"]],[]]],[3012,61,3012,66,[1,[3012,61,3012,66,[[],"Order"]],[]]]]]]]]]]]],[3013,9,3020,46,[[3013,9,3013,21,"byFieldOrder"],[[3013,22,3013,25,[11,"ord"]],[3013,26,3013,28,[11,"f1"]],[3013,29,3013,31,[11,"f2"]]],[3014,13,3020,46,[16,[[[3015,17,3018,48,[0,[[0],[1,[3015,17,3015,34,[[3015,17,3015,18,"o"],[3015,21,3015,34,[6,[3015,21,3015,27,[1,[3015,21,3015,27,[[],"String"]],[]]],[3015,31,3015,34,[1,[3015,31,3015,34,[[],"Int"]],[]]]]]]]],[3016,17,3018,48,[[3016,17,3016,18,"o"],[[3016,19,3016,20,[11,"f"]]],[3017,21,3018,48,[1,"|>",0,[3017,21,3017,35,[0,[[3017,21,3017,29,[2,["Dict"],"get"]],[3017,30,3017,31,[2,[],"f"]],[3017,32,3017,35,[2,[],"ord"]]]]],[3018,28,3018,48,[0,[[3018,28,3018,45,[2,["Maybe"],"withDefault"]],[3018,46,3018,48,[14,[3018,47,3018,48,[3,1]]]]]]]]]]]]]]],[3020,13,3020,46,[0,[[3020,13,3020,20,[2,[],"compare"]],[3020,21,3020,33,[7,[3020,22,3020,32,[0,[[3020,22,3020,23,[2,[],"o"]],[3020,24,3020,32,[19,[3020,24,3020,26,[2,[],"f1"]],[3020,27,3020,32,"field"]]]]]]]],[3020,34,3020,46,[7,[3020,35,3020,45,[0,[[3020,35,3020,36,[2,[],"o"]],[3020,37,3020,45,[19,[3020,37,3020,39,[2,[],"f2"]],[3020,40,3020,45,"field"]]]]]]]]]]]]]]]]]]],[3022,9,3024,87,[0,[[0],[1,[3022,9,3022,70,[[3022,9,3022,23,"checkSortingBy"],[3022,26,3022,70,[6,[3022,26,3022,51,[6,[3022,27,3022,32,[1,[3022,27,3022,32,[[],"Field"]],[]]],[3022,36,3022,50,[6,[3022,36,3022,41,[1,[3022,36,3022,41,[[],"Field"]],[]]],[3022,45,3022,50,[1,[3022,45,3022,50,[[],"Order"]],[]]]]]]],[3022,55,3022,70,[1,[3022,55,3022,59,[[],"List"]],[[3022,60,3022,70,[1,[3022,61,3022,66,[[],"Error"]],[[3022,67,3022,69,[4,[]]]]]]]]]]]]]],[3023,9,3024,87,[[3023,9,3023,23,"checkSortingBy"],[[3023,24,3023,25,[11,"o"]]],[3024,13,3024,87,[0,[[3024,13,3024,25,[2,[],"checkSorting"]],[3024,26,3024,47,[19,[3024,26,3024,33,[2,[],"context"]],[3024,34,3024,47,"extractSource"]]],[3024,48,3024,63,[5,"Record fields"]],[3024,64,3024,69,[9,[[3024,66,3024,67,[2,[],"o"]]]]],[3024,70,3024,80,[2,[],"errorRange"]],[3024,81,3024,87,[2,[],"fields"]]]]]]]]]],[3026,9,3039,23,[0,[[0],[1,[3026,9,3026,69,[[3026,9,3026,22,"handleUnknown"],[3026,25,3026,69,[6,[3026,25,3026,50,[6,[3026,26,3026,31,[1,[3026,26,3026,31,[[],"Field"]],[]]],[3026,35,3026,49,[6,[3026,35,3026,40,[1,[3026,35,3026,40,[[],"Field"]],[]]],[3026,44,3026,49,[1,[3026,44,3026,49,[[],"Order"]],[]]]]]]],[3026,54,3026,69,[1,[3026,54,3026,58,[[],"List"]],[[3026,59,3026,69,[1,[3026,60,3026,65,[[],"Error"]],[[3026,66,3026,68,[4,[]]]]]]]]]]]]]],[3027,9,3039,23,[[3027,9,3027,22,"handleUnknown"],[[3027,23,3027,39,[11,"whenAlphabetical"]]],[3028,13,3039,23,[17,[[3028,18,3028,29,[2,[],"sortUnknown"]],[[[3029,17,3029,31,[12,[[],"Alphabetically"],[]]],[3031,21,3031,52,[0,[[3031,21,3031,35,[2,[],"checkSortingBy"]],[3031,36,3031,52,[2,[],"whenAlphabetical"]]]]]],[[3033,17,3033,27,[12,[[],"ReportOnly"],[]]],[3035,21,3035,56,[0,[[3035,21,3035,39,[2,[],"unknownRecordError"]],[3035,40,3035,46,[2,[],"record"]],[3035,47,3035,56,[2,[],"fullRange"]]]]]],[[3037,17,3037,26,[12,[[],"DoNotSort"],[]]],[3039,21,3039,23,[9,[]]]]]]]]]]]]]],[3041,5,3078,50,[17,[[3041,10,3041,24,[2,[],"matchingOrders"]],[[[3042,9,3042,18,[7,[[3042,11,3042,13,[10,[]]],[3042,15,3042,16,[0]]]]],[3045,13,3045,55,[6,[[3045,15,3045,41,[0,[[3045,15,3045,28,[2,[],"handleUnknown"]],[3045,29,3045,41,[2,[],"alphabetical"]]]]],[3045,43,3045,53,[2,["Dict"],"empty"]]]]]],[[3047,9,3047,58,[7,[[3047,11,3047,50,[10,[[3047,13,3047,48,[8,[[3047,15,3047,25,"fieldOrder"],[3047,27,3047,46,"canonicalFieldTypes"]]]]]]],[3047,52,3047,56,[12,[[],"True"],[]]]]]],[3049,13,3049,77,[6,[[3049,15,3049,54,[0,[[3049,15,3049,28,[2,[],"handleUnknown"]],[3049,29,3049,54,[7,[3049,30,3049,53,[0,[[3049,30,3049,42,[2,[],"byFieldOrder"]],[3049,43,3049,53,[2,[],"fieldOrder"]]]]]]]]]],[3049,56,3049,75,[2,[],"canonicalFieldTypes"]]]]]],[[3051,9,3051,59,[7,[[3051,11,3051,50,[10,[[3051,13,3051,48,[8,[[3051,15,3051,25,"fieldOrder"],[3051,27,3051,46,"canonicalFieldTypes"]]]]]]],[3051,52,3051,57,[12,[[],"False"],[]]]]]],[3053,13,3053,79,[6,[[3053,15,3053,56,[1,"<|",1,[3053,15,3053,29,[2,[],"checkSortingBy"]],[3053,33,3053,56,[0,[[3053,33,3053,45,[2,[],"byFieldOrder"]],[3053,46,3053,56,[2,[],"fieldOrder"]]]]]]],[3053,58,3053,77,[2,[],"canonicalFieldTypes"]]]]]],[[3055,9,3055,25,[7,[[3055,11,3055,20,[11,"ambiguous"]],[3055,22,3055,23,[0]]]]],[3057,13,3078,50,[16,[[[3058,17,3063,34,[0,[[0],[1,[3058,17,3058,57,[[3058,17,3058,38,"unambiguousFieldTypes"],[3058,41,3058,57,[1,[3058,41,3058,45,[[],"Dict"]],[[3058,46,3058,52,[1,[3058,46,3058,52,[[],"String"]],[]]],[3058,53,3058,57,[1,[3058,53,3058,57,[[],"Type"]],[]]]]]]]]],[3059,17,3063,34,[[3059,17,3059,38,"unambiguousFieldTypes"],[],[3061,21,3063,34,[0,[[3061,21,3061,31,[2,["List"],"foldl"]],[3061,32,3061,116,[7,[3061,33,3061,115,[18,[[[3061,34,3061,57,[8,[[3061,36,3061,55,"canonicalFieldTypes"]]]],[3061,58,3061,61,[11,"acc"]]],[3061,65,3061,115,[0,[[3061,65,3061,91,[2,[],"keepOnlyMatchingFieldTypes"]],[3061,92,3061,111,[2,[],"canonicalFieldTypes"]],[3061,112,3061,115,[2,[],"acc"]]]]]]]]]],[3062,25,3062,35,[2,["Dict"],"empty"]],[3063,25,3063,34,[2,[],"ambiguous"]]]]]]]]]]],[3065,13,3078,50,[17,[[3065,18,3065,31,[2,[],"sortAmbiguous"]],[[[3066,17,3066,31,[12,[[],"Alphabetically"],[]]],[3068,21,3068,75,[6,[[3068,23,3068,50,[0,[[3068,23,3068,37,[2,[],"checkSortingBy"]],[3068,38,3068,50,[2,[],"alphabetical"]]]]],[3068,52,3068,73,[2,[],"unambiguousFieldTypes"]]]]]],[[3070,17,3070,27,[12,[[],"ReportOnly"],[]]],[3072,21,3074,22,[6,[[3072,23,3072,150,[0,[[3072,23,3072,43,[2,[],"ambiguousRecordError"]],[3072,44,3072,50,[2,[],"record"]],[3072,51,3072,140,[7,[3072,52,3072,139,[0,[[3072,52,3072,60,[2,["List"],"map"]],[3072,61,3072,129,[7,[3072,62,3072,128,[1,"<<",0,[3072,62,3072,115,[0,[[3072,62,3072,70,[2,["List"],"map"]],[3072,71,3072,115,[7,[3072,72,3072,114,[18,[[[3072,73,3072,81,[7,[[3072,75,3072,76,[11,"m"]],[3072,78,3072,79,[11,"n"]]]]]],[3072,85,3072,114,[1,"<|",1,[3072,85,3072,100,[0,[[3072,85,3072,96,[2,["String"],"join"]],[3072,97,3072,100,[5,"."]]]]],[3072,104,3072,114,[1,"++",1,[3072,104,3072,105,[2,[],"m"]],[3072,109,3072,114,[9,[[3072,111,3072,112,[2,[],"n"]]]]]]]]]]]]]]]]],[3072,119,3072,128,[20,".typeName"]]]]]],[3072,130,3072,139,[2,[],"ambiguous"]]]]]]],[3072,141,3072,150,[2,[],"fullRange"]]]]],[3073,23,3073,44,[2,[],"unambiguousFieldTypes"]]]]]],[[3076,17,3076,26,[12,[[],"DoNotSort"],[]]],[3078,21,3078,50,[6,[[3078,23,3078,25,[9,[]]],[3078,27,3078,48,[2,[],"unambiguousFieldTypes"]]]]]]]]]]]]]]]]]]]]]]]]]],[3081,1,3150,13,[0,[[1,[3081,1,3084,3,"{-| Given how to sort generics, a list of fields to sort, and a `FieldOrder`,\nreturn an ordering of fields, whether or not any of them were an unknown record\n(via generics), and any canonical field types.\n-}"]],[1,[3085,1,3085,154,[[3085,1,3085,10,"makeOrder"],[3085,13,3085,154,[6,[3085,13,3085,25,[1,[3085,13,3085,25,[[],"SortGenerics"]],[]]],[3085,29,3085,154,[6,[3085,29,3085,39,[1,[3085,29,3085,33,[[],"List"]],[[3085,34,3085,39,[1,[3085,34,3085,39,[[],"Field"]],[]]]]]],[3085,43,3085,154,[6,[3085,43,3085,53,[1,[3085,43,3085,53,[[],"FieldOrder"]],[]]],[3085,57,3085,154,[4,[[3085,59,3085,87,[[3085,59,3085,69,"fieldOrder"],[3085,72,3085,87,[1,[3085,72,3085,76,[[],"Dict"]],[[3085,77,3085,83,[1,[3085,77,3085,83,[[],"String"]],[]]],[3085,84,3085,87,[1,[3085,84,3085,87,[[],"Int"]],[]]]]]]]],[3085,89,3085,112,[[3085,89,3085,105,"hasUnknownFields"],[3085,108,3085,112,[1,[3085,108,3085,112,[[],"Bool"]],[]]]]],[3085,114,3085,153,[[3085,114,3085,133,"canonicalFieldTypes"],[3085,136,3085,152,[1,[3085,136,3085,140,[[],"Dict"]],[[3085,141,3085,147,[1,[3085,141,3085,147,[[],"String"]],[]]],[3085,148,3085,152,[1,[3085,148,3085,152,[[],"Type"]],[]]]]]]]]]]]]]]]]]]]],[3086,1,3150,13,[[3086,1,3086,10,"makeOrder"],[[3086,11,3086,23,[11,"sortGenerics"]],[3086,24,3086,32,[11,"inFields"]],[3086,33,3086,53,[14,[3086,34,3086,52,[12,[[],"FieldOrder"],[[3086,45,3086,52,[11,"inOrder"]]]]]]]],[3087,5,3150,13,[16,[[[3088,9,3097,28,[0,[[0],[1,[3088,9,3088,28,[[3088,9,3088,22,"genericOffset"],[3088,25,3088,28,[1,[3088,25,3088,28,[[],"Int"]],[]]]]]],[3089,9,3097,28,[[3089,9,3089,22,"genericOffset"],[],[3092,13,3097,28,[17,[[3092,18,3092,30,[2,[],"sortGenerics"]],[[[3093,17,3093,35,[12,[[],"GenericFieldsFirst"],[]]],[3094,21,3094,29,[14,[3094,22,3094,29,[3,1000000]]]]],[[3096,17,3096,34,[12,[[],"GenericFieldsLast"],[]]],[3097,21,3097,28,[3,1000000]]]]]]]]]]]],[3099,9,3145,83,[0,[[0],[1,[3099,9,3099,74,[[3099,9,3099,11,"go"],[3099,14,3099,74,[6,[3099,14,3099,17,[1,[3099,14,3099,17,[[],"Int"]],[]]],[3099,21,3099,74,[6,[3099,21,3099,31,[1,[3099,21,3099,25,[[],"List"]],[[3099,26,3099,31,[1,[3099,26,3099,31,[[],"Field"]],[]]]]]],[3099,35,3099,74,[6,[3099,35,3099,45,[1,[3099,35,3099,45,[[],"FieldOrder"]],[]]],[3099,49,3099,74,[3,[[3099,51,3099,66,[1,[3099,51,3099,55,[[],"Dict"]],[[3099,56,3099,62,[1,[3099,56,3099,62,[[],"String"]],[]]],[3099,63,3099,66,[1,[3099,63,3099,66,[[],"Int"]],[]]]]]],[3099,68,3099,72,[1,[3099,68,3099,72,[[],"Bool"]],[]]]]]]]]]]]]]]],[3100,9,3145,83,[[3100,9,3100,11,"go"],[[3100,12,3100,22,[11,"offsetMult"]],[3100,23,3100,35,[11,"fieldsToMake"]],[3100,36,3100,71,[14,[3100,37,3100,70,[12,[[],"FieldOrder"],[[3100,48,3100,70,[8,[[3100,50,3100,59,"canonical"],[3100,61,3100,68,"generic"]]]]]]]]]],[3101,13,3145,83,[16,[[[3102,17,3114,52,[0,[[0],[1,[3102,17,3102,109,[[3102,17,3102,21,"step"],[3102,24,3102,109,[6,[3102,24,3102,29,[1,[3102,24,3102,29,[[],"Field"]],[]]],[3102,33,3102,109,[6,[3102,33,3102,69,[3,[[3102,35,3102,55,[1,[3102,35,3102,39,[[],"List"]],[[3102,40,3102,55,[3,[[3102,42,3102,48,[1,[3102,42,3102,48,[[],"String"]],[]]],[3102,50,3102,53,[1,[3102,50,3102,53,[[],"Int"]],[]]]]]]]]],[3102,57,3102,67,[1,[3102,57,3102,61,[[],"List"]],[[3102,62,3102,67,[1,[3102,62,3102,67,[[],"Field"]],[]]]]]]]]],[3102,73,3102,109,[3,[[3102,75,3102,95,[1,[3102,75,3102,79,[[],"List"]],[[3102,80,3102,95,[3,[[3102,82,3102,88,[1,[3102,82,3102,88,[[],"String"]],[]]],[3102,90,3102,93,[1,[3102,90,3102,93,[[],"Int"]],[]]]]]]]]],[3102,97,3102,107,[1,[3102,97,3102,101,[[],"List"]],[[3102,102,3102,107,[1,[3102,102,3102,107,[[],"Field"]],[]]]]]]]]]]]]]]]],[3103,17,3114,52,[[3103,17,3103,21,"step"],[[3103,22,3103,23,[11,"f"]],[3103,24,3103,42,[7,[[3103,26,3103,32,[11,"canAcc"]],[3103,34,3103,40,[11,"genAcc"]]]]]],[3104,21,3114,52,[17,[[3104,26,3104,52,[0,[[3104,26,3104,34,[2,["Dict"],"get"]],[3104,35,3104,42,[19,[3104,35,3104,36,[2,[],"f"]],[3104,37,3104,42,"field"]]],[3104,43,3104,52,[2,[],"canonical"]]]]],[[[3105,25,3105,38,[12,[[],"Just"],[[3105,30,3105,38,[7,[[3105,32,3105,33,[11,"i"]],[3105,35,3105,36,[0]]]]]]]],[3106,29,3111,30,[6,[[3106,31,3109,42,[1,"::",1,[3106,31,3108,32,[6,[[3106,33,3106,40,[19,[3106,33,3106,34,[2,[],"f"]],[3106,35,3106,40,"field"]]],[3107,33,3107,63,[1,"+",0,[3107,33,3107,34,[2,[],"i"]],[3107,37,3107,63,[1,"*",0,[3107,37,3107,47,[2,[],"offsetMult"]],[3107,50,3107,63,[2,[],"genericOffset"]]]]]]]]],[3109,36,3109,42,[2,[],"canAcc"]]]],[3110,31,3110,37,[2,[],"genAcc"]]]]]],[[3113,25,3113,32,[12,[[],"Nothing"],[]]],[3114,29,3114,52,[6,[[3114,31,3114,37,[2,[],"canAcc"]],[3114,39,3114,50,[1,"::",1,[3114,39,3114,40,[2,[],"f"]],[3114,44,3114,50,[2,[],"genAcc"]]]]]]]]]]]]]]]]]],[3116,13,3145,83,[1,"|>",0,[3116,13,3144,22,[1,"|>",0,[3116,13,3116,52,[0,[[3116,13,3116,23,[2,["List"],"foldl"]],[3116,24,3116,28,[2,[],"step"]],[3116,29,3116,39,[6,[[3116,31,3116,33,[9,[]]],[3116,35,3116,37,[9,[]]]]]],[3116,40,3116,52,[2,[],"fieldsToMake"]]]]],[3117,20,3144,22,[0,[[3117,20,3117,33,[2,["Tuple"],"mapBoth"]],[3117,34,3117,47,[2,["Dict"],"fromList"]],[3118,21,3144,22,[7,[3118,22,3143,54,[18,[[[3118,23,3118,25,[11,"fs"]]],[3119,25,3143,54,[17,[[3119,30,3119,37,[2,[],"generic"]],[[[3120,29,3120,55,[12,[[],"Just"],[[3120,34,3120,55,[14,[3120,35,3120,54,[12,[[],"OrderedFields"],[[3120,49,3120,54,[11,"order"]]]]]]]]]],[3121,33,3121,61,[0,[[3121,33,3121,35,[2,[],"go"]],[3121,36,3121,52,[7,[3121,37,3121,51,[1,"+",0,[3121,37,3121,47,[2,[],"offsetMult"]],[3121,50,3121,51,[3,1]]]]]],[3121,53,3121,55,[2,[],"fs"]],[3121,56,3121,61,[2,[],"order"]]]]]],[[3123,29,3123,53,[12,[[],"Just"],[[3123,34,3123,53,[14,[3123,35,3123,52,[12,[[],"UnknownFields"],[[3123,49,3123,52,[11,"fs_"]]]]]]]]]],[3124,33,3140,34,[16,[[[3125,37,3127,54,[0,[[0],[1,[3125,37,3125,55,[[3125,37,3125,41,"alph"],[3125,44,3125,55,[1,[3125,44,3125,48,[[],"List"]],[[3125,49,3125,55,[1,[3125,49,3125,55,[[],"String"]],[]]]]]]]]],[3126,37,3127,54,[[3126,37,3126,41,"alph"],[],[3127,41,3127,54,[0,[[3127,41,3127,50,[2,["List"],"sort"]],[3127,51,3127,54,[2,[],"fs_"]]]]]]]]]]],[3129,33,3140,34,[6,[[3129,35,3138,53,[1,"|>",0,[3129,35,3137,39,[0,[[3129,35,3129,43,[2,["List"],"map"]],[3130,37,3136,38,[7,[3130,38,3135,42,[18,[[[3130,39,3130,40,[11,"f"]]],[3131,41,3135,42,[6,[[3131,43,3131,50,[19,[3131,43,3131,44,[2,[],"f"]],[3131,45,3131,50,"field"]]],[3132,43,3134,86,[1,"|>",0,[3132,43,3133,68,[1,"|>",0,[3132,43,3132,71,[0,[[3132,43,3132,58,[2,["ListX"],"elemIndex"]],[3132,59,3132,66,[19,[3132,59,3132,60,[2,[],"f"]],[3132,61,3132,66,"field"]]],[3132,67,3132,71,[2,[],"alph"]]]]],[3133,48,3133,68,[0,[[3133,48,3133,65,[2,["Maybe"],"withDefault"]],[3133,66,3133,68,[14,[3133,67,3133,68,[3,1]]]]]]]]],[3134,48,3134,86,[0,[[3134,48,3134,51,[12,"+"]],[3134,52,3134,86,[7,[3134,53,3134,85,[1,"*",0,[3134,53,3134,69,[7,[3134,54,3134,68,[1,"+",0,[3134,54,3134,64,[2,[],"offsetMult"]],[3134,67,3134,68,[3,1]]]]]],[3134,72,3134,85,[2,[],"genericOffset"]]]]]]]]]]]]]]]]]]],[3137,37,3137,39,[2,[],"fs"]]]]],[3138,40,3138,53,[2,["Dict"],"fromList"]]]],[3139,35,3139,39,[2,[],"True"]]]]]]]]],[[3142,29,3142,36,[12,[[],"Nothing"],[]]],[3143,33,3143,54,[6,[[3143,35,3143,45,[2,["Dict"],"empty"]],[3143,47,3143,52,[2,[],"False"]]]]]]]]]]]]]]]]]]]],[3145,20,3145,83,[7,[3145,21,3145,82,[18,[[[3145,22,3145,47,[7,[[3145,24,3145,27,[11,"f1s"]],[3145,29,3145,45,[7,[[3145,31,3145,34,[11,"f2s"]],[3145,36,3145,43,[11,"unknown"]]]]]]]]],[3145,51,3145,82,[6,[[3145,53,3145,71,[0,[[3145,53,3145,63,[2,["Dict"],"union"]],[3145,64,3145,67,[2,[],"f1s"]],[3145,68,3145,71,[2,[],"f2s"]]]]],[3145,73,3145,80,[2,[],"unknown"]]]]]]]]]]]]]]]]]]]]],[3147,5,3150,13,[1,"|>",0,[3147,5,3147,39,[0,[[3147,5,3147,7,[2,[],"go"]],[3147,8,3147,9,[3,0]],[3147,10,3147,18,[2,[],"inFields"]],[3147,19,3147,39,[7,[3147,20,3147,38,[0,[[3147,20,3147,30,[2,[],"FieldOrder"]],[3147,31,3147,38,[2,[],"inOrder"]]]]]]]]]],[3148,12,3150,13,[7,[3148,13,3149,156,[18,[[[3148,14,3148,46,[7,[[3148,16,3148,26,[11,"fieldOrder"]],[3148,28,3148,44,[11,"hasUnknownFields"]]]]]],[3149,17,3149,156,[8,[[3149,19,3149,42,[[3149,19,3149,29,"fieldOrder"],[3149,32,3149,42,[2,[],"fieldOrder"]]]],[3149,44,3149,79,[[3149,44,3149,60,"hasUnknownFields"],[3149,63,3149,79,[2,[],"hasUnknownFields"]]]],[3149,81,3149,155,[[3149,81,3149,100,"canonicalFieldTypes"],[3149,103,3149,154,[0,[[3149,103,3149,111,[2,["Dict"],"map"]],[3149,112,3149,136,[7,[3149,113,3149,135,[18,[[[3149,114,3149,115,[0]],[3149,116,3149,117,[11,"v"]]],[3149,121,3149,135,[0,[[3149,121,3149,133,[2,["Tuple"],"second"]],[3149,134,3149,135,[2,[],"v"]]]]]]]]]],[3149,137,3149,154,[19,[3149,137,3149,144,[2,[],"inOrder"]],[3149,145,3149,154,"canonical"]]]]]]]]]]]]]]]]]]]]]]]]]],[3153,1,3233,35,[0,[[1,[3153,1,3156,3,"{-| Given context of known types, any information that would help find the\nappropriate canonical ordering, and a list of fields, return all matching field\norders.\n-}"]],[1,[3157,1,3157,177,[[3157,1,3157,18,"findMatchingTypes"],[3157,21,3157,177,[6,[3157,21,3157,31,[1,[3157,21,3157,31,[[],"RuleConfig"]],[]]],[3157,35,3157,177,[6,[3157,35,3157,48,[1,[3157,35,3157,48,[[],"ModuleContext"]],[]]],[3157,52,3157,177,[6,[3157,52,3157,67,[1,[3157,52,3157,57,[[],"Maybe"]],[[3157,58,3157,67,[1,[3157,58,3157,67,[[],"OrderInfo"]],[]]]]]],[3157,71,3157,177,[6,[3157,71,3157,81,[1,[3157,71,3157,75,[[],"List"]],[[3157,76,3157,81,[1,[3157,76,3157,81,[[],"Field"]],[]]]]]],[3157,85,3157,177,[1,[3157,85,3157,89,[[],"List"]],[[3157,90,3157,177,[4,[[3157,92,3157,130,[[3157,92,3157,100,"typeName"],[3157,103,3157,130,[1,[3157,103,3157,107,[[],"List"]],[[3157,108,3157,130,[3,[[3157,110,3157,120,[1,[3157,110,3157,120,[[],"ModuleName"]],[]]],[3157,122,3157,128,[1,[3157,122,3157,128,[[],"String"]],[]]]]]]]]]]],[3157,132,3157,155,[[3157,132,3157,142,"fieldOrder"],[3157,145,3157,155,[1,[3157,145,3157,155,[[],"FieldOrder"]],[]]]]],[3157,157,3157,176,[[3157,157,3157,168,"isSubrecord"],[3157,171,3157,175,[1,[3157,171,3157,175,[[],"Bool"]],[]]]]]]]]]]]]]]]]]]]]]],[3158,1,3233,35,[[3158,1,3158,18,"findMatchingTypes"],[[3158,19,3158,25,[11,"config"]],[3158,26,3158,33,[11,"context"]],[3158,34,3158,38,[11,"info"]],[3158,39,3158,50,[11,"matchFields"]]],[3159,5,3233,35,[16,[[[3160,9,3178,61,[0,[[0],[1,[3160,9,3160,128,[[3160,9,3160,19,"getMatches"],[3160,22,3160,128,[6,[3160,22,3160,32,[1,[3160,22,3160,26,[[],"List"]],[[3160,27,3160,32,[1,[3160,27,3160,32,[[],"Field"]],[]]]]]],[3160,36,3160,128,[1,[3160,36,3160,40,[[],"List"]],[[3160,41,3160,128,[4,[[3160,43,3160,81,[[3160,43,3160,51,"typeName"],[3160,54,3160,81,[1,[3160,54,3160,58,[[],"List"]],[[3160,59,3160,81,[3,[[3160,61,3160,71,[1,[3160,61,3160,71,[[],"ModuleName"]],[]]],[3160,73,3160,79,[1,[3160,73,3160,79,[[],"String"]],[]]]]]]]]]]],[3160,83,3160,106,[[3160,83,3160,93,"fieldOrder"],[3160,96,3160,106,[1,[3160,96,3160,106,[[],"FieldOrder"]],[]]]]],[3160,108,3160,127,[[3160,108,3160,119,"isSubrecord"],[3160,122,3160,126,[1,[3160,122,3160,126,[[],"Bool"]],[]]]]]]]]]]]]]]]],[3161,9,3178,61,[[3161,9,3161,19,"getMatches"],[[3161,20,3161,22,[11,"fs"]]],[3162,13,3178,61,[16,[[[3163,17,3168,68,[1,[3163,17,3163,53,[8,[[3163,19,3163,35,"canonicalMatches"],[3163,37,3163,51,"genericMatches"]]]],[3164,21,3168,68,[11,[3164,24,3164,39,[0,[[3164,24,3164,36,[2,["List"],"isEmpty"]],[3164,37,3164,39,[2,[],"fs"]]]]],[3165,25,3165,71,[8,[[3165,27,3165,48,[[3165,27,3165,43,"canonicalMatches"],[3165,46,3165,48,[9,[]]]]],[3165,50,3165,70,[[3165,50,3165,64,"genericMatches"],[3165,67,3165,69,[9,[]]]]]]]],[3168,25,3168,68,[0,[[3168,25,3168,37,[2,[],"searchOrders"]],[3168,38,3168,44,[2,[],"config"]],[3168,45,3168,52,[2,[],"context"]],[3168,53,3168,65,[2,[],"hasAllFields"]],[3168,66,3168,68,[2,[],"fs"]]]]]]]]]],[3170,13,3178,61,[1,"++",1,[3170,13,3177,33,[0,[[3170,13,3170,21,[2,["List"],"map"]],[3171,17,3176,18,[7,[3171,18,3175,22,[18,[[[3171,19,3171,30,[7,[[3171,21,3171,25,[11,"name"]],[3171,27,3171,28,[11,"k"]]]]]],[3172,21,3175,22,[8,[[3172,23,3172,42,[[3172,23,3172,31,"typeName"],[3172,34,3172,42,[9,[[3172,36,3172,40,[2,[],"name"]]]]]]],[3173,23,3174,21,[[3173,23,3173,33,"fieldOrder"],[3173,36,3173,58,[0,[[3173,36,3173,48,[2,[],"toFieldOrder"]],[3173,49,3173,56,[2,[],"Nothing"]],[3173,57,3173,58,[2,[],"k"]]]]]]],[3174,23,3175,21,[[3174,23,3174,34,"isSubrecord"],[3174,37,3174,50,[19,[3174,37,3174,38,[2,[],"k"]],[3174,39,3174,50,"isSubrecord"]]]]]]]]]]]]],[3177,17,3177,33,[2,[],"canonicalMatches"]]]]],[3178,20,3178,61,[0,[[3178,20,3178,34,[2,["List"],"concatMap"]],[3178,35,3178,46,[2,[],"makeGeneric"]],[3178,47,3178,61,[2,[],"genericMatches"]]]]]]]]]]]]]]],[3180,9,3185,18,[0,[[0],[1,[3180,9,3180,66,[[3180,9,3180,21,"toFieldOrder"],[3180,24,3180,66,[6,[3180,24,3180,37,[1,[3180,24,3180,29,[[],"Maybe"]],[[3180,30,3180,37,[1,[3180,30,3180,37,[[],"Generic"]],[]]]]]],[3180,41,3180,66,[6,[3180,41,3180,52,[1,[3180,41,3180,52,[[],"KnownRecord"]],[]]],[3180,56,3180,66,[1,[3180,56,3180,66,[[],"FieldOrder"]],[]]]]]]]]]],[3181,9,3185,18,[[3181,9,3181,21,"toFieldOrder"],[[3181,22,3181,29,[11,"generic"]],[3181,30,3181,39,[8,[[3181,32,3181,37,"order"]]]]],[3182,13,3185,18,[0,[[3182,13,3182,23,[2,[],"FieldOrder"]],[3183,17,3185,18,[8,[[3183,19,3183,36,[[3183,19,3183,28,"canonical"],[3183,31,3183,36,[2,[],"order"]]]],[3184,19,3185,17,[[3184,19,3184,26,"generic"],[3184,29,3184,36,[2,[],"generic"]]]]]]]]]]]]]]],[3187,9,3212,21,[0,[[0],[1,[3187,9,3187,192,[[3187,9,3187,20,"makeGeneric"],[3187,23,3187,192,[6,[3187,23,3187,96,[4,[[3187,25,3187,72,[[3187,25,3187,30,"type_"],[3187,33,3187,72,[3,[[3187,35,3187,57,[3,[[3187,37,3187,47,[1,[3187,37,3187,47,[[],"ModuleName"]],[]]],[3187,49,3187,55,[1,[3187,49,3187,55,[[],"String"]],[]]]]]],[3187,59,3187,70,[1,[3187,59,3187,70,[[],"KnownRecord"]],[]]]]]]]],[3187,74,3187,95,[[3187,74,3187,81,"missing"],[3187,84,3187,94,[1,[3187,84,3187,88,[[],"List"]],[[3187,89,3187,94,[1,[3187,89,3187,94,[[],"Field"]],[]]]]]]]]]]],[3187,100,3187,192,[1,[3187,100,3187,104,[[],"List"]],[[3187,105,3187,192,[4,[[3187,107,3187,145,[[3187,107,3187,115,"typeName"],[3187,118,3187,145,[1,[3187,118,3187,122,[[],"List"]],[[3187,123,3187,145,[3,[[3187,125,3187,135,[1,[3187,125,3187,135,[[],"ModuleName"]],[]]],[3187,137,3187,143,[1,[3187,137,3187,143,[[],"String"]],[]]]]]]]]]]],[3187,147,3187,170,[[3187,147,3187,157,"fieldOrder"],[3187,160,3187,170,[1,[3187,160,3187,170,[[],"FieldOrder"]],[]]]]],[3187,172,3187,191,[[3187,172,3187,183,"isSubrecord"],[3187,186,3187,190,[1,[3187,186,3187,190,[[],"Bool"]],[]]]]]]]]]]]]]]]],[3188,9,3212,21,[[3188,9,3188,20,"makeGeneric"],[[3188,21,3188,39,[8,[[3188,23,3188,28,"type_"],[3188,30,3188,37,"missing"]]]]],[3189,13,3212,21,[16,[[[3190,17,3191,26,[1,[3190,17,3190,27,[7,[[3190,19,3190,20,[11,"n"]],[3190,22,3190,25,[11,"rec"]]]]],[3191,21,3191,26,[2,[],"type_"]]]]],[3193,13,3212,21,[1,"|>",0,[3193,13,3200,22,[1,"|>",0,[3193,13,3193,31,[0,[[3193,13,3193,23,[2,[],"getMatches"]],[3193,24,3193,31,[2,[],"missing"]]]]],[3194,20,3200,22,[0,[[3194,20,3194,28,[2,["List"],"map"]],[3195,21,3200,22,[7,[3195,22,3199,26,[18,[[[3195,23,3195,60,[8,[[3195,25,3195,33,"typeName"],[3195,35,3195,45,"fieldOrder"],[3195,47,3195,58,"isSubrecord"]]]]],[3196,25,3199,26,[8,[[3196,27,3196,51,[[3196,27,3196,35,"typeName"],[3196,38,3196,51,[1,"::",1,[3196,38,3196,39,[2,[],"n"]],[3196,43,3196,51,[2,[],"typeName"]]]]]],[3197,27,3198,25,[[3197,27,3197,37,"fieldOrder"],[3197,40,3197,91,[0,[[3197,40,3197,52,[2,[],"toFieldOrder"]],[3197,53,3197,87,[7,[3197,54,3197,86,[1,"<|",1,[3197,54,3197,58,[2,[],"Just"]],[3197,62,3197,86,[0,[[3197,62,3197,75,[2,[],"OrderedFields"]],[3197,76,3197,86,[2,[],"fieldOrder"]]]]]]]]],[3197,88,3197,91,[2,[],"rec"]]]]]]],[3198,27,3199,25,[[3198,27,3198,38,"isSubrecord"],[3198,41,3198,71,[1,"||",1,[3198,41,3198,56,[19,[3198,41,3198,44,[2,[],"rec"]],[3198,45,3198,56,"isSubrecord"]]],[3198,60,3198,71,[2,[],"isSubrecord"]]]]]]]]]]]]]]]]]]],[3201,20,3212,21,[7,[3201,21,3211,31,[18,[[[3201,22,3201,24,[11,"ls"]]],[3202,25,3211,31,[11,[3202,28,3202,43,[0,[[3202,28,3202,40,[2,["List"],"isEmpty"]],[3202,41,3202,43,[2,[],"ls"]]]]],[3204,29,3208,30,[9,[[3204,31,3207,32,[8,[[3204,33,3204,49,[[3204,33,3204,41,"typeName"],[3204,44,3204,49,[9,[[3204,46,3204,47,[2,[],"n"]]]]]]],[3205,33,3206,31,[[3205,33,3205,43,"fieldOrder"],[3205,46,3205,113,[0,[[3205,46,3205,58,[2,[],"toFieldOrder"]],[3205,59,3205,109,[7,[3205,60,3205,108,[1,"<|",1,[3205,60,3205,64,[2,[],"Just"]],[3205,68,3205,108,[1,"<|",1,[3205,68,3205,81,[2,[],"UnknownFields"]],[3205,85,3205,108,[0,[[3205,85,3205,93,[2,["List"],"map"]],[3205,94,3205,100,[20,".field"]],[3205,101,3205,108,[2,[],"missing"]]]]]]]]]]],[3205,110,3205,113,[2,[],"rec"]]]]]]],[3206,33,3207,31,[[3206,33,3206,44,"isSubrecord"],[3206,47,3206,62,[19,[3206,47,3206,50,[2,[],"rec"]],[3206,51,3206,62,"isSubrecord"]]]]]]]]]]],[3211,29,3211,31,[2,[],"ls"]]]]]]]]]]]]]]]]]]],[3214,9,3221,26,[0,[[0],[1,[3214,9,3214,28,[[3214,9,3214,21,"hasAllFields"],[3214,24,3214,28,[1,[3214,24,3214,28,[[],"Bool"]],[]]]]]],[3215,9,3221,26,[[3215,9,3215,21,"hasAllFields"],[],[3216,13,3221,26,[17,[[3216,18,3216,22,[2,[],"info"]],[[[3217,17,3217,34,[12,[[],"Just"],[[3217,22,3217,34,[12,[[],"HasAllFields"],[]]]]]],[3218,21,3218,25,[2,[],"True"]]],[[3220,17,3220,18,[0]],[3221,21,3221,26,[2,[],"False"]]]]]]]]]]]]],[3223,5,3233,35,[17,[[3223,10,3223,14,[2,[],"info"]],[[[3224,9,3224,31,[12,[[],"Just"],[[3224,14,3224,31,[14,[3224,15,3224,30,[12,[[],"HasFieldOrder"],[[3224,29,3224,30,[11,"f"]]]]]]]]]],[3226,13,3230,14,[9,[[3226,15,3229,16,[8,[[3226,17,3226,30,[[3226,17,3226,25,"typeName"],[3226,28,3226,30,[9,[]]]]],[3227,17,3228,15,[[3227,17,3227,27,"fieldOrder"],[3227,30,3227,31,[2,[],"f"]]]],[3228,17,3229,15,[[3228,17,3228,28,"isSubrecord"],[3228,31,3228,36,[2,[],"False"]]]]]]]]]]],[[3232,9,3232,10,[0]],[3233,13,3233,35,[0,[[3233,13,3233,23,[2,[],"getMatches"]],[3233,24,3233,35,[2,[],"matchFields"]]]]]]]]]]]]]]]]]],[3236,1,3249,6,[1,[[1,[3236,1,3238,3,"{-| A list of orders that match a list of fields, including both full matches\nand generic matches (with fields not present in the generic).\n-}"]],[3239,12,3239,24,"OrderMatches"],[],[3240,5,3249,6,[4,[[3240,7,3240,70,[[3240,7,3240,23,"canonicalMatches"],[3240,26,3240,70,[1,[3240,26,3240,30,[[],"List"]],[[3240,31,3240,70,[3,[[3240,33,3240,55,[3,[[3240,35,3240,45,[1,[3240,35,3240,45,[[],"ModuleName"]],[]]],[3240,47,3240,53,[1,[3240,47,3240,53,[[],"String"]],[]]]]]],[3240,57,3240,68,[1,[3240,57,3240,68,[[],"KnownRecord"]],[]]]]]]]]]]],[3241,7,3249,5,[[3241,7,3241,21,"genericMatches"],[3242,9,3248,14,[1,[3242,9,3242,13,[[],"List"]],[[3243,13,3248,14,[4,[[3243,15,3246,18,[[3243,15,3243,20,"type_"],[3244,17,3246,18,[3,[[3244,19,3244,41,[3,[[3244,21,3244,31,[1,[3244,21,3244,31,[[],"ModuleName"]],[]]],[3244,33,3244,39,[1,[3244,33,3244,39,[[],"String"]],[]]]]]],[3245,19,3245,30,[1,[3245,19,3245,30,[[],"KnownRecord"]],[]]]]]]]],[3247,15,3248,13,[[3247,15,3247,22,"missing"],[3247,25,3247,35,[1,[3247,25,3247,29,[[],"List"]],[[3247,30,3247,35,[1,[3247,30,3247,35,[[],"Field"]],[]]]]]]]]]]]]]]]]]]]]]],[3252,1,3335,13,[0,[[1,[3252,1,3254,3,"{-| Given context and a predicate to filter valid records, find a list of\nrecords that match a list of fields.\n-}"]],[1,[3255,1,3255,81,[[3255,1,3255,13,"searchOrders"],[3255,16,3255,81,[6,[3255,16,3255,26,[1,[3255,16,3255,26,[[],"RuleConfig"]],[]]],[3255,30,3255,81,[6,[3255,30,3255,43,[1,[3255,30,3255,43,[[],"ModuleContext"]],[]]],[3255,47,3255,81,[6,[3255,47,3255,51,[1,[3255,47,3255,51,[[],"Bool"]],[]]],[3255,55,3255,81,[6,[3255,55,3255,65,[1,[3255,55,3255,59,[[],"List"]],[[3255,60,3255,65,[1,[3255,60,3255,65,[[],"Field"]],[]]]]]],[3255,69,3255,81,[1,[3255,69,3255,81,[[],"OrderMatches"]],[]]]]]]]]]]]]]],[3256,1,3335,13,[[3256,1,3256,13,"searchOrders"],[[3256,14,3256,58,[14,[3256,15,3256,57,[12,[[],"RuleConfig"],[[3256,26,3256,57,[8,[[3256,28,3256,55,"typecheckUnambiguousRecords"]]]]]]]]],[3256,59,3256,66,[11,"context"]],[3256,67,3256,79,[11,"hasAllFields"]],[3256,80,3256,86,[11,"fields"]]],[3257,5,3335,13,[16,[[[3258,9,3261,33,[0,[[0],[1,[3258,9,3258,40,[[3258,9,3258,20,"matchFields"],[3258,23,3258,40,[1,[3258,23,3258,27,[[],"Dict"]],[[3258,28,3258,34,[1,[3258,28,3258,34,[[],"String"]],[]]],[3258,35,3258,40,[1,[3258,35,3258,40,[[],"Field"]],[]]]]]]]]],[3259,9,3261,33,[[3259,9,3259,20,"matchFields"],[],[3260,13,3261,33,[1,"|>",0,[3260,13,3260,51,[0,[[3260,13,3260,21,[2,["List"],"map"]],[3260,22,3260,44,[7,[3260,23,3260,43,[18,[[[3260,24,3260,25,[11,"f"]]],[3260,29,3260,43,[6,[[3260,31,3260,38,[19,[3260,31,3260,32,[2,[],"f"]],[3260,33,3260,38,"field"]]],[3260,40,3260,41,[2,[],"f"]]]]]]]]]],[3260,45,3260,51,[2,[],"fields"]]]]],[3261,20,3261,33,[2,["Dict"],"fromList"]]]]]]]]],[3263,9,3284,32,[0,[[0],[1,[3263,9,3263,41,[[3263,9,3263,19,"checkTypes"],[3263,22,3263,41,[6,[3263,22,3263,33,[1,[3263,22,3263,33,[[],"KnownRecord"]],[]]],[3263,37,3263,41,[1,[3263,37,3263,41,[[],"Bool"]],[]]]]]]]],[3264,9,3284,32,[[3264,9,3264,19,"checkTypes"],[[3264,20,3264,29,[8,[[3264,22,3264,27,"order"]]]]],[3265,13,3284,32,[1,"|>",0,[3265,13,3283,23,[0,[[3265,13,3265,23,[2,["List"],"foldl"]],[3266,17,3281,18,[7,[3266,18,3280,59,[18,[[[3266,19,3266,35,[8,[[3266,21,3266,26,"field"],[3266,28,3266,33,"type_"]]]],[3266,36,3266,56,[7,[[3266,38,3266,44,[11,"varAcc"]],[3266,46,3266,54,[11,"matchAcc"]]]]]],[3267,21,3280,59,[16,[[[3268,25,3273,71,[0,[[0],[1,[3268,25,3268,65,[[3268,25,3268,37,"assignedVars"],[3268,40,3268,65,[1,[3268,40,3268,44,[[],"Dict"]],[[3268,45,3268,60,[3,[[3268,47,3268,50,[1,[3268,47,3268,50,[[],"Int"]],[]]],[3268,52,3268,58,[1,[3268,52,3268,58,[[],"String"]],[]]]]]],[3268,61,3268,65,[1,[3268,61,3268,65,[[],"Type"]],[]]]]]]]]],[3269,25,3273,71,[[3269,25,3269,37,"assignedVars"],[],[3273,29,3273,71,[0,[[3273,29,3273,40,[2,["Dict"],"filter"]],[3273,41,3273,64,[7,[3273,42,3273,63,[18,[[[3273,43,3273,51,[7,[[3273,45,3273,46,[11,"i"]],[3273,48,3273,49,[0]]]]],[3273,52,3273,53,[0]]],[3273,57,3273,63,[1,"==",2,[3273,57,3273,58,[2,[],"i"]],[3273,62,3273,63,[3,2]]]]]]]]],[3273,65,3273,71,[2,[],"varAcc"]]]]]]]]]]],[3275,21,3280,59,[1,"|>",0,[3275,21,3279,68,[1,"|>",0,[3275,21,3277,70,[1,"|>",0,[3275,21,3276,79,[1,"|>",0,[3275,21,3275,41,[0,[[3275,21,3275,29,[2,["Dict"],"get"]],[3275,30,3275,35,[2,[],"field"]],[3275,36,3275,41,[2,[],"order"]]]]],[3276,28,3276,79,[0,[[3276,28,3276,37,[2,["Maybe"],"map"]],[3276,38,3276,79,[7,[3276,39,3276,78,[1,"<<",0,[3276,39,3276,62,[0,[[3276,39,3276,54,[2,[],"dereferenceType"]],[3276,55,3276,62,[2,[],"context"]]]]],[3276,66,3276,78,[2,["Tuple"],"second"]]]]]]]]]]],[3277,28,3277,70,[0,[[3277,28,3277,38,[2,["Maybe"],"map2"]],[3277,39,3277,64,[7,[3277,40,3277,63,[0,[[3277,40,3277,50,[2,[],"typesMatch"]],[3277,51,3277,63,[2,[],"assignedVars"]]]]]]],[3277,65,3277,70,[2,[],"type_"]]]]]]],[3279,28,3279,68,[0,[[3279,28,3279,45,[2,["Maybe"],"withDefault"]],[3279,46,3279,68,[6,[[3279,48,3279,60,[2,[],"assignedVars"]],[3279,62,3279,66,[2,[],"True"]]]]]]]]]],[3280,28,3280,59,[0,[[3280,28,3280,43,[2,["Tuple"],"mapSecond"]],[3280,44,3280,59,[7,[3280,45,3280,58,[0,[[3280,45,3280,49,[12,"&&"]],[3280,50,3280,58,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]]],[3282,17,3282,37,[6,[[3282,19,3282,29,[2,["Dict"],"empty"]],[3282,31,3282,35,[2,[],"True"]]]]],[3283,17,3283,23,[2,[],"fields"]]]]],[3284,20,3284,32,[2,["Tuple"],"second"]]]]]]]]],[3286,9,3292,36,[0,[[0],[1,[3286,9,3286,47,[[3286,9,3286,26,"missingFieldLimit"],[3286,29,3286,47,[6,[3286,29,3286,40,[1,[3286,29,3286,40,[[],"KnownRecord"]],[]]],[3286,44,3286,47,[1,[3286,44,3286,47,[[],"Int"]],[]]]]]]]],[3287,9,3292,36,[[3287,9,3287,26,"missingFieldLimit"],[],[3288,13,3292,36,[11,[3288,16,3288,28,[2,[],"hasAllFields"]],[3289,17,3289,25,[0,[[3289,17,3289,23,[2,[],"always"]],[3289,24,3289,25,[3,1]]]]],[3292,17,3292,36,[1,"<<",0,[3292,17,3292,26,[2,["Dict"],"size"]],[3292,30,3292,36,[20,".order"]]]]]]]]]]],[3294,9,3315,20,[0,[[0],[1,[3294,9,3294,83,[[3294,9,3294,13,"step"],[3294,16,3294,83,[6,[3294,16,3294,26,[1,[3294,16,3294,26,[[],"ModuleName"]],[]]],[3294,30,3294,83,[6,[3294,30,3294,36,[1,[3294,30,3294,36,[[],"String"]],[]]],[3294,40,3294,83,[6,[3294,40,3294,51,[1,[3294,40,3294,51,[[],"KnownRecord"]],[]]],[3294,55,3294,83,[6,[3294,55,3294,67,[1,[3294,55,3294,67,[[],"OrderMatches"]],[]]],[3294,71,3294,83,[1,[3294,71,3294,83,[[],"OrderMatches"]],[]]]]]]]]]]]]]],[3295,9,3315,20,[[3295,9,3295,13,"step"],[[3295,14,3295,24,[11,"moduleName"]],[3295,25,3295,29,[11,"name"]],[3295,30,3295,31,[11,"o"]],[3295,32,3295,35,[11,"acc"]]],[3296,13,3315,20,[11,[3296,16,3296,80,[1,">=",2,[3296,16,3296,57,[0,[[3296,16,3296,25,[2,["Dict"],"size"]],[3296,26,3296,57,[7,[3296,27,3296,56,[0,[[3296,27,3296,36,[2,["Dict"],"diff"]],[3296,37,3296,44,[19,[3296,37,3296,38,[2,[],"o"]],[3296,39,3296,44,"order"]]],[3296,45,3296,56,[2,[],"matchFields"]]]]]]]]]],[3296,61,3296,80,[0,[[3296,61,3296,78,[2,[],"missingFieldLimit"]],[3296,79,3296,80,[2,[],"o"]]]]]]],[3298,17,3298,20,[2,[],"acc"]],[3300,18,3315,20,[11,[3300,21,3300,32,[19,[3300,21,3300,22,[2,[],"o"]],[3300,23,3300,32,"isGeneric"]]],[3301,17,3307,18,[21,[3301,19,3301,22,"acc"],[[3302,23,3307,17,[[3302,23,3302,37,"genericMatches"],[3303,25,3306,50,[1,"::",1,[3303,25,3305,26,[8,[[3303,27,3303,62,[[3303,27,3303,32,"type_"],[3303,35,3303,62,[6,[[3303,37,3303,57,[6,[[3303,39,3303,49,[2,[],"moduleName"]],[3303,51,3303,55,[2,[],"name"]]]]],[3303,59,3303,60,[2,[],"o"]]]]]]],[3304,27,3305,25,[[3304,27,3304,34,"missing"],[3304,37,3304,81,[1,"<|",1,[3304,37,3304,48,[2,["Dict"],"values"]],[3304,52,3304,81,[0,[[3304,52,3304,61,[2,["Dict"],"diff"]],[3304,62,3304,73,[2,[],"matchFields"]],[3304,74,3304,81,[19,[3304,74,3304,75,[2,[],"o"]],[3304,76,3304,81,"order"]]]]]]]]]]]]],[3306,32,3306,50,[19,[3306,32,3306,35,[2,[],"acc"]],[3306,36,3306,50,"genericMatches"]]]]]]]]]],[3309,18,3315,20,[11,[3309,21,3309,66,[1,"<|",1,[3309,21,3309,33,[2,["Dict"],"isEmpty"]],[3309,37,3309,66,[0,[[3309,37,3309,46,[2,["Dict"],"diff"]],[3309,47,3309,58,[2,[],"matchFields"]],[3309,59,3309,66,[19,[3309,59,3309,60,[2,[],"o"]],[3309,61,3309,66,"order"]]]]]]]],[3311,17,3311,97,[21,[3311,19,3311,22,"acc"],[[3311,25,3311,96,[[3311,25,3311,41,"canonicalMatches"],[3311,44,3311,95,[1,"::",1,[3311,44,3311,71,[6,[[3311,46,3311,66,[6,[[3311,48,3311,58,[2,[],"moduleName"]],[3311,60,3311,64,[2,[],"name"]]]]],[3311,68,3311,69,[2,[],"o"]]]]],[3311,75,3311,95,[19,[3311,75,3311,78,[2,[],"acc"]],[3311,79,3311,95,"canonicalMatches"]]]]]]]]]],[3315,17,3315,20,[2,[],"acc"]]]]]]]]]]]]]],[3317,5,3335,13,[1,"|>",0,[3317,5,3325,33,[0,[[3317,5,3317,15,[2,["Dict"],"foldl"]],[3318,9,3323,10,[7,[3318,10,3322,28,[18,[[[3318,11,3318,21,[11,"moduleName"]],[3318,22,3318,33,[11,"moduleTypes"]],[3318,34,3318,42,[11,"outerAcc"]]],[3319,13,3322,28,[0,[[3319,13,3319,23,[2,["Dict"],"foldl"]],[3320,17,3320,34,[7,[3320,18,3320,33,[0,[[3320,18,3320,22,[2,[],"step"]],[3320,23,3320,33,[2,[],"moduleName"]]]]]]],[3321,17,3321,25,[2,[],"outerAcc"]],[3322,17,3322,28,[2,[],"moduleTypes"]]]]]]]]]],[3324,9,3324,55,[8,[[3324,11,3324,32,[[3324,11,3324,27,"canonicalMatches"],[3324,30,3324,32,[9,[]]]]],[3324,34,3324,54,[[3324,34,3324,48,"genericMatches"],[3324,51,3324,53,[9,[]]]]]]]],[3325,9,3325,33,[19,[3325,9,3325,16,[2,[],"context"]],[3325,17,3325,33,"canonicalRecords"]]]]]],[3326,12,3335,13,[7,[3326,13,3334,24,[18,[[[3326,14,3326,59,[14,[3326,15,3326,58,[13,[3326,15,3326,51,[8,[[3326,17,3326,33,"canonicalMatches"],[3326,35,3326,49,"genericMatches"]]]],[3326,55,3326,58,"res"]]]]]],[3327,17,3334,24,[11,[3327,20,3327,112,[1,"||",1,[3327,20,3327,47,[2,[],"typecheckUnambiguousRecords"]],[3327,51,3327,112,[1,">",2,[3327,51,3327,108,[1,"+",0,[3327,51,3327,79,[0,[[3327,51,3327,62,[2,["List"],"length"]],[3327,63,3327,79,[2,[],"canonicalMatches"]]]]],[3327,82,3327,108,[0,[[3327,82,3327,93,[2,["List"],"length"]],[3327,94,3327,108,[2,[],"genericMatches"]]]]]]],[3327,111,3327,112,[3,1]]]]]],[3329,21,3331,22,[8,[[3329,23,3329,99,[[3329,23,3329,39,"canonicalMatches"],[3329,42,3329,99,[0,[[3329,42,3329,53,[2,["List"],"filter"]],[3329,54,3329,82,[7,[3329,55,3329,81,[1,"<<",0,[3329,55,3329,65,[2,[],"checkTypes"]],[3329,69,3329,81,[2,["Tuple"],"second"]]]]]],[3329,83,3329,99,[2,[],"canonicalMatches"]]]]]]],[3330,23,3331,21,[[3330,23,3330,37,"genericMatches"],[3330,40,3330,105,[0,[[3330,40,3330,51,[2,["List"],"filter"]],[3330,52,3330,90,[7,[3330,53,3330,89,[1,"<<",0,[3330,53,3330,79,[1,"<<",0,[3330,53,3330,63,[2,[],"checkTypes"]],[3330,67,3330,79,[2,["Tuple"],"second"]]]],[3330,83,3330,89,[20,".type_"]]]]]],[3330,91,3330,105,[2,[],"genericMatches"]]]]]]]]]],[3334,21,3334,24,[2,[],"res"]]]]]]]]]]]]]]]]]]],[3338,1,3439,36,[0,[[1,[3338,1,3340,3,"{-| Check two `Type`s and see if they are theoretically equivalent (e.g. type\nvars can match anything.\n-}"]],[1,[3341,1,3341,118,[[3341,1,3341,11,"typesMatch"],[3341,14,3341,118,[6,[3341,14,3341,39,[1,[3341,14,3341,18,[[],"Dict"]],[[3341,19,3341,34,[3,[[3341,21,3341,24,[1,[3341,21,3341,24,[[],"Int"]],[]]],[3341,26,3341,32,[1,[3341,26,3341,32,[[],"String"]],[]]]]]],[3341,35,3341,39,[1,[3341,35,3341,39,[[],"Type"]],[]]]]]],[3341,43,3341,118,[6,[3341,43,3341,59,[1,[3341,43,3341,59,[[],"DereferencedType"]],[]]],[3341,63,3341,118,[6,[3341,63,3341,79,[1,[3341,63,3341,79,[[],"DereferencedType"]],[]]],[3341,83,3341,118,[3,[[3341,85,3341,110,[1,[3341,85,3341,89,[[],"Dict"]],[[3341,90,3341,105,[3,[[3341,92,3341,95,[1,[3341,92,3341,95,[[],"Int"]],[]]],[3341,97,3341,103,[1,[3341,97,3341,103,[[],"String"]],[]]]]]],[3341,106,3341,110,[1,[3341,106,3341,110,[[],"Type"]],[]]]]]],[3341,112,3341,116,[1,[3341,112,3341,116,[[],"Bool"]],[]]]]]]]]]]]]]]],[3342,1,3439,36,[[3342,1,3342,11,"typesMatch"],[[3342,12,3342,18,[11,"inVars"]],[3342,19,3342,48,[14,[3342,20,3342,47,[12,[[],"DereferencedType"],[[3342,37,3342,47,[11,"derefType1"]]]]]]],[3342,49,3342,78,[14,[3342,50,3342,77,[12,[[],"DereferencedType"],[[3342,67,3342,77,[11,"derefType2"]]]]]]]],[3343,5,3439,36,[16,[[[3344,9,3365,44,[0,[[0],[1,[3344,9,3344,133,[[3344,9,3344,22,"matchTypeVars"],[3344,25,3344,133,[6,[3344,25,3344,28,[1,[3344,25,3344,28,[[],"Int"]],[]]],[3344,32,3344,133,[6,[3344,32,3344,57,[1,[3344,32,3344,36,[[],"Dict"]],[[3344,37,3344,52,[3,[[3344,39,3344,42,[1,[3344,39,3344,42,[[],"Int"]],[]]],[3344,44,3344,50,[1,[3344,44,3344,50,[[],"String"]],[]]]]]],[3344,53,3344,57,[1,[3344,53,3344,57,[[],"Type"]],[]]]]]],[3344,61,3344,133,[6,[3344,61,3344,76,[1,[3344,61,3344,66,[[],"Maybe"]],[[3344,67,3344,76,[1,[3344,67,3344,76,[[],"Typeclass"]],[]]]]]],[3344,80,3344,133,[6,[3344,80,3344,86,[1,[3344,80,3344,86,[[],"String"]],[]]],[3344,90,3344,133,[6,[3344,90,3344,94,[1,[3344,90,3344,94,[[],"Type"]],[]]],[3344,98,3344,133,[3,[[3344,100,3344,125,[1,[3344,100,3344,104,[[],"Dict"]],[[3344,105,3344,120,[3,[[3344,107,3344,110,[1,[3344,107,3344,110,[[],"Int"]],[]]],[3344,112,3344,118,[1,[3344,112,3344,118,[[],"String"]],[]]]]]],[3344,121,3344,125,[1,[3344,121,3344,125,[[],"Type"]],[]]]]]],[3344,127,3344,131,[1,[3344,127,3344,131,[[],"Bool"]],[]]]]]]]]]]]]]]]]]]],[3345,9,3365,44,[[3345,9,3345,22,"matchTypeVars"],[[3345,23,3345,27,[11,"side"]],[3345,28,3345,36,[11,"typeVars"]],[3345,37,3345,46,[11,"typeclass"]],[3345,47,3345,51,[11,"name"]],[3345,52,3345,57,[11,"type_"]]],[3346,13,3365,44,[17,[[3346,18,3346,61,[6,[[3346,20,3346,52,[0,[[3346,20,3346,28,[2,["Dict"],"get"]],[3346,29,3346,43,[6,[[3346,31,3346,35,[2,[],"side"]],[3346,37,3346,41,[2,[],"name"]]]]],[3346,44,3346,52,[2,[],"typeVars"]]]]],[3346,54,3346,59,[2,[],"type_"]]]]],[[[3347,17,3347,30,[7,[[3347,19,3347,25,[12,[[],"Just"],[[3347,24,3347,25,[11,"t"]]]]],[3347,27,3347,28,[0]]]]],[3350,21,3351,73,[1,"|>",0,[3350,21,3350,69,[0,[[3350,21,3350,23,[2,[],"go"]],[3350,24,3350,61,[7,[3350,25,3350,60,[0,[[3350,25,3350,36,[2,["Dict"],"remove"]],[3350,37,3350,51,[6,[[3350,39,3350,43,[2,[],"side"]],[3350,45,3350,49,[2,[],"name"]]]]],[3350,52,3350,60,[2,[],"typeVars"]]]]]]],[3350,62,3350,63,[2,[],"t"]],[3350,64,3350,69,[2,[],"type_"]]]]],[3351,28,3351,73,[0,[[3351,28,3351,42,[2,["Tuple"],"mapFirst"]],[3351,43,3351,73,[7,[3351,44,3351,72,[0,[[3351,44,3351,55,[2,["Dict"],"insert"]],[3351,56,3351,70,[6,[[3351,58,3351,62,[2,[],"side"]],[3351,64,3351,68,[2,[],"name"]]]]],[3351,71,3351,72,[2,[],"t"]]]]]]]]]]]]],[[3353,17,3353,41,[7,[[3353,19,3353,26,[12,[[],"Nothing"],[]]],[3353,28,3353,39,[12,[[],"TypeVar"],[[3353,36,3353,37,[0]],[3353,38,3353,39,[0]]]]]]]],[3355,21,3355,39,[6,[[3355,23,3355,31,[2,[],"typeVars"]],[3355,33,3355,37,[2,[],"True"]]]]]],[[3357,17,3357,31,[7,[[3357,19,3357,26,[12,[[],"Nothing"],[]]],[3357,28,3357,29,[0]]]]],[3358,21,3365,44,[11,[3359,25,3360,54,[1,"|>",0,[3359,25,3359,69,[0,[[3359,25,3359,34,[2,["Maybe"],"map"]],[3359,35,3359,59,[7,[3359,36,3359,58,[0,[[3359,36,3359,52,[2,[],"matchesTypeClass"]],[3359,53,3359,58,[2,[],"type_"]]]]]]],[3359,60,3359,69,[2,[],"typeclass"]]]]],[3360,32,3360,54,[0,[[3360,32,3360,49,[2,["Maybe"],"withDefault"]],[3360,50,3360,54,[2,[],"True"]]]]]]],[3362,25,3362,76,[6,[[3362,27,3362,68,[0,[[3362,27,3362,38,[2,["Dict"],"insert"]],[3362,39,3362,53,[6,[[3362,41,3362,45,[2,[],"side"]],[3362,47,3362,51,[2,[],"name"]]]]],[3362,54,3362,59,[2,[],"type_"]],[3362,60,3362,68,[2,[],"typeVars"]]]]],[3362,70,3362,74,[2,[],"True"]]]]],[3365,25,3365,44,[6,[[3365,27,3365,35,[2,[],"typeVars"]],[3365,37,3365,42,[2,[],"False"]]]]]]]]]]]]]]]]],[3367,9,3379,43,[0,[[0],[1,[3367,9,3367,118,[[3367,9,3367,25,"checkListOfTypes"],[3367,28,3367,118,[6,[3367,28,3367,53,[1,[3367,28,3367,32,[[],"Dict"]],[[3367,33,3367,48,[3,[[3367,35,3367,38,[1,[3367,35,3367,38,[[],"Int"]],[]]],[3367,40,3367,46,[1,[3367,40,3367,46,[[],"String"]],[]]]]]],[3367,49,3367,53,[1,[3367,49,3367,53,[[],"Type"]],[]]]]]],[3367,57,3367,118,[6,[3367,57,3367,66,[1,[3367,57,3367,61,[[],"List"]],[[3367,62,3367,66,[1,[3367,62,3367,66,[[],"Type"]],[]]]]]],[3367,70,3367,118,[6,[3367,70,3367,79,[1,[3367,70,3367,74,[[],"List"]],[[3367,75,3367,79,[1,[3367,75,3367,79,[[],"Type"]],[]]]]]],[3367,83,3367,118,[3,[[3367,85,3367,110,[1,[3367,85,3367,89,[[],"Dict"]],[[3367,90,3367,105,[3,[[3367,92,3367,95,[1,[3367,92,3367,95,[[],"Int"]],[]]],[3367,97,3367,103,[1,[3367,97,3367,103,[[],"String"]],[]]]]]],[3367,106,3367,110,[1,[3367,106,3367,110,[[],"Type"]],[]]]]]],[3367,112,3367,116,[1,[3367,112,3367,116,[[],"Bool"]],[]]]]]]]]]]]]]]],[3368,9,3379,43,[[3368,9,3368,25,"checkListOfTypes"],[[3368,26,3368,34,[11,"typeVars"]],[3368,35,3368,38,[11,"t1s"]],[3368,39,3368,42,[11,"t2s"]]],[3369,13,3379,43,[11,[3369,16,3369,50,[1,"/=",2,[3369,16,3369,31,[0,[[3369,16,3369,27,[2,["List"],"length"]],[3369,28,3369,31,[2,[],"t1s"]]]]],[3369,35,3369,50,[0,[[3369,35,3369,46,[2,["List"],"length"]],[3369,47,3369,50,[2,[],"t2s"]]]]]]],[3370,17,3370,36,[6,[[3370,19,3370,27,[2,[],"typeVars"]],[3370,29,3370,34,[2,[],"False"]]]]],[3373,17,3379,43,[1,"|>",0,[3373,17,3373,34,[0,[[3373,17,3373,26,[2,["ListX"],"zip"]],[3373,27,3373,30,[2,[],"t1s"]],[3373,31,3373,34,[2,[],"t2s"]]]]],[3374,24,3379,43,[0,[[3374,24,3374,34,[2,["List"],"foldl"]],[3375,25,3378,26,[7,[3375,26,3377,67,[18,[[[3375,27,3375,39,[7,[[3375,29,3375,32,[11,"t1_"]],[3375,34,3375,37,[11,"t2_"]]]]],[3375,40,3375,60,[7,[[3375,42,3375,48,[11,"varAcc"]],[3375,50,3375,58,[11,"matchAcc"]]]]]],[3376,29,3377,67,[1,"|>",0,[3376,29,3376,46,[0,[[3376,29,3376,31,[2,[],"go"]],[3376,32,3376,38,[2,[],"varAcc"]],[3376,39,3376,42,[2,[],"t1_"]],[3376,43,3376,46,[2,[],"t2_"]]]]],[3377,36,3377,67,[0,[[3377,36,3377,51,[2,["Tuple"],"mapSecond"]],[3377,52,3377,67,[7,[3377,53,3377,66,[0,[[3377,53,3377,57,[12,"&&"]],[3377,58,3377,66,[2,[],"matchAcc"]]]]]]]]]]]]]]]]],[3379,25,3379,43,[6,[[3379,27,3379,35,[2,[],"typeVars"]],[3379,37,3379,41,[2,[],"True"]]]]]]]]]]]]]]]]],[3381,9,3397,21,[0,[[0],[1,[3381,9,3381,219,[[3381,9,3381,28,"validateRecordMatch"],[3381,31,3381,219,[6,[3381,31,3381,56,[1,[3381,31,3381,35,[[],"Dict"]],[[3381,36,3381,51,[3,[[3381,38,3381,41,[1,[3381,38,3381,41,[[],"Int"]],[]]],[3381,43,3381,49,[1,[3381,43,3381,49,[[],"String"]],[]]]]]],[3381,52,3381,56,[1,[3381,52,3381,56,[[],"Type"]],[]]]]]],[3381,60,3381,219,[6,[3381,60,3381,70,[1,[3381,60,3381,65,[[],"Maybe"]],[[3381,66,3381,70,[1,[3381,66,3381,70,[[],"Type"]],[]]]]]],[3381,74,3381,219,[6,[3381,74,3381,84,[1,[3381,74,3381,79,[[],"Maybe"]],[[3381,80,3381,84,[1,[3381,80,3381,84,[[],"Type"]],[]]]]]],[3381,88,3381,219,[6,[3381,88,3381,180,[4,[[3381,90,3381,119,[[3381,90,3381,95,"only1"],[3381,98,3381,119,[1,[3381,98,3381,102,[[],"List"]],[[3381,103,3381,119,[3,[[3381,105,3381,111,[1,[3381,105,3381,111,[[],"String"]],[]]],[3381,113,3381,117,[1,[3381,113,3381,117,[[],"Type"]],[]]]]]]]]]]],[3381,121,3381,147,[[3381,121,3381,125,"both"],[3381,128,3381,147,[1,[3381,128,3381,132,[[],"List"]],[[3381,133,3381,147,[3,[[3381,135,3381,139,[1,[3381,135,3381,139,[[],"Type"]],[]]],[3381,141,3381,145,[1,[3381,141,3381,145,[[],"Type"]],[]]]]]]]]]]],[3381,149,3381,179,[[3381,149,3381,154,"only2"],[3381,157,3381,178,[1,[3381,157,3381,161,[[],"List"]],[[3381,162,3381,178,[3,[[3381,164,3381,170,[1,[3381,164,3381,170,[[],"String"]],[]]],[3381,172,3381,176,[1,[3381,172,3381,176,[[],"Type"]],[]]]]]]]]]]]]]],[3381,184,3381,219,[3,[[3381,186,3381,211,[1,[3381,186,3381,190,[[],"Dict"]],[[3381,191,3381,206,[3,[[3381,193,3381,196,[1,[3381,193,3381,196,[[],"Int"]],[]]],[3381,198,3381,204,[1,[3381,198,3381,204,[[],"String"]],[]]]]]],[3381,207,3381,211,[1,[3381,207,3381,211,[[],"Type"]],[]]]]]],[3381,213,3381,217,[1,[3381,213,3381,217,[[],"Bool"]],[]]]]]]]]]]]]]]]]],[3382,9,3397,21,[[3382,9,3382,28,"validateRecordMatch"],[[3382,29,3382,37,[11,"typeVars"]],[3382,38,3382,46,[11,"generic1"]],[3382,47,3382,55,[11,"generic2"]],[3382,56,3382,78,[8,[[3382,58,3382,63,"only1"],[3382,65,3382,70,"only2"],[3382,72,3382,76,"both"]]]]],[3384,13,3397,21,[1,"|>",0,[3384,13,3391,21,[1,"|>",0,[3384,13,3385,72,[1,"|>",0,[3384,13,3384,28,[0,[[3384,13,3384,23,[2,["List"],"unzip"]],[3384,24,3384,28,[2,[],"both"]]]]],[3385,20,3385,72,[7,[3385,21,3385,71,[18,[[[3385,22,3385,34,[7,[[3385,24,3385,27,[11,"l1s"]],[3385,29,3385,32,[11,"l2s"]]]]]],[3385,38,3385,71,[0,[[3385,38,3385,54,[2,[],"checkListOfTypes"]],[3385,55,3385,63,[2,[],"typeVars"]],[3385,64,3385,67,[2,[],"l1s"]],[3385,68,3385,71,[2,[],"l2s"]]]]]]]]]]]],[3386,20,3391,21,[7,[3386,21,3390,63,[18,[[[3386,22,3386,40,[7,[[3386,24,3386,28,[11,"vars"]],[3386,30,3386,38,[11,"matchAcc"]]]]]],[3387,25,3390,63,[1,"|>",0,[3387,25,3389,78,[1,"|>",0,[3387,25,3388,139,[1,"|>",0,[3387,25,3387,61,[0,[[3387,25,3387,33,[2,[],"validate"]],[3387,34,3387,55,[7,[3387,35,3387,54,[1,"<<",0,[3387,35,3387,38,[2,[],"not"]],[3387,42,3387,54,[2,["List"],"isEmpty"]]]]]],[3387,56,3387,61,[2,[],"only1"]]]]],[3388,32,3388,139,[0,[[3388,32,3388,42,[2,["Maybe"],"map2"]],[3388,43,3388,130,[7,[3388,44,3388,129,[18,[[[3388,45,3388,46,[11,"g"]],[3388,47,3388,49,[11,"fs"]]],[3388,53,3388,129,[0,[[3388,53,3388,55,[2,[],"go"]],[3388,56,3388,60,[2,[],"vars"]],[3388,61,3388,127,[7,[3388,62,3388,126,[0,[[3388,62,3388,72,[2,[],"RecordType"]],[3388,73,3388,126,[8,[[3388,75,3388,92,[[3388,75,3388,84,"canonical"],[3388,87,3388,92,[2,[],"False"]]]],[3388,94,3388,111,[[3388,94,3388,101,"generic"],[3388,104,3388,111,[2,[],"Nothing"]]]],[3388,113,3388,125,[[3388,113,3388,119,"fields"],[3388,122,3388,124,[2,[],"fs"]]]]]]]]]]]],[3388,128,3388,129,[2,[],"g"]]]]]]]]]],[3388,131,3388,139,[2,[],"generic2"]]]]]]],[3389,32,3389,78,[0,[[3389,32,3389,49,[2,["Maybe"],"withDefault"]],[3389,50,3389,78,[6,[[3389,52,3389,56,[2,[],"vars"]],[3389,58,3389,76,[0,[[3389,58,3389,70,[2,["List"],"isEmpty"]],[3389,71,3389,76,[2,[],"only1"]]]]]]]]]]]]],[3390,32,3390,63,[0,[[3390,32,3390,47,[2,["Tuple"],"mapSecond"]],[3390,48,3390,63,[7,[3390,49,3390,62,[0,[[3390,49,3390,53,[12,"&&"]],[3390,54,3390,62,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]],[3392,20,3397,21,[7,[3392,21,3396,63,[18,[[[3392,22,3392,40,[7,[[3392,24,3392,28,[11,"vars"]],[3392,30,3392,38,[11,"matchAcc"]]]]]],[3393,25,3396,63,[1,"|>",0,[3393,25,3395,78,[1,"|>",0,[3393,25,3394,139,[1,"|>",0,[3393,25,3393,61,[0,[[3393,25,3393,33,[2,[],"validate"]],[3393,34,3393,55,[7,[3393,35,3393,54,[1,"<<",0,[3393,35,3393,38,[2,[],"not"]],[3393,42,3393,54,[2,["List"],"isEmpty"]]]]]],[3393,56,3393,61,[2,[],"only2"]]]]],[3394,32,3394,139,[0,[[3394,32,3394,42,[2,["Maybe"],"map2"]],[3394,43,3394,130,[7,[3394,44,3394,129,[18,[[[3394,45,3394,46,[11,"g"]],[3394,47,3394,49,[11,"fs"]]],[3394,53,3394,129,[0,[[3394,53,3394,55,[2,[],"go"]],[3394,56,3394,60,[2,[],"vars"]],[3394,61,3394,127,[7,[3394,62,3394,126,[0,[[3394,62,3394,72,[2,[],"RecordType"]],[3394,73,3394,126,[8,[[3394,75,3394,92,[[3394,75,3394,84,"canonical"],[3394,87,3394,92,[2,[],"False"]]]],[3394,94,3394,111,[[3394,94,3394,101,"generic"],[3394,104,3394,111,[2,[],"Nothing"]]]],[3394,113,3394,125,[[3394,113,3394,119,"fields"],[3394,122,3394,124,[2,[],"fs"]]]]]]]]]]]],[3394,128,3394,129,[2,[],"g"]]]]]]]]]],[3394,131,3394,139,[2,[],"generic1"]]]]]]],[3395,32,3395,78,[0,[[3395,32,3395,49,[2,["Maybe"],"withDefault"]],[3395,50,3395,78,[6,[[3395,52,3395,56,[2,[],"vars"]],[3395,58,3395,76,[0,[[3395,58,3395,70,[2,["List"],"isEmpty"]],[3395,71,3395,76,[2,[],"only2"]]]]]]]]]]]]],[3396,32,3396,63,[0,[[3396,32,3396,47,[2,["Tuple"],"mapSecond"]],[3396,48,3396,63,[7,[3396,49,3396,62,[0,[[3396,49,3396,53,[12,"&&"]],[3396,54,3396,62,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]]]]]]],[3399,9,3437,40,[0,[[0],[1,[3399,9,3399,94,[[3399,9,3399,11,"go"],[3399,14,3399,94,[6,[3399,14,3399,39,[1,[3399,14,3399,18,[[],"Dict"]],[[3399,19,3399,34,[3,[[3399,21,3399,24,[1,[3399,21,3399,24,[[],"Int"]],[]]],[3399,26,3399,32,[1,[3399,26,3399,32,[[],"String"]],[]]]]]],[3399,35,3399,39,[1,[3399,35,3399,39,[[],"Type"]],[]]]]]],[3399,43,3399,94,[6,[3399,43,3399,47,[1,[3399,43,3399,47,[[],"Type"]],[]]],[3399,51,3399,94,[6,[3399,51,3399,55,[1,[3399,51,3399,55,[[],"Type"]],[]]],[3399,59,3399,94,[3,[[3399,61,3399,86,[1,[3399,61,3399,65,[[],"Dict"]],[[3399,66,3399,81,[3,[[3399,68,3399,71,[1,[3399,68,3399,71,[[],"Int"]],[]]],[3399,73,3399,79,[1,[3399,73,3399,79,[[],"String"]],[]]]]]],[3399,82,3399,86,[1,[3399,82,3399,86,[[],"Type"]],[]]]]]],[3399,88,3399,92,[1,[3399,88,3399,92,[[],"Bool"]],[]]]]]]]]]]]]]]],[3400,9,3437,40,[[3400,9,3400,11,"go"],[[3400,12,3400,20,[11,"typeVars"]],[3400,21,3400,26,[11,"type1"]],[3400,27,3400,32,[11,"type2"]]],[3401,13,3437,40,[17,[[3401,18,3401,34,[6,[[3401,20,3401,25,[2,[],"type1"]],[3401,27,3401,32,[2,[],"type2"]]]]],[[[3402,17,3402,35,[7,[[3402,19,3402,30,[12,[[],"TypeVar"],[[3402,27,3402,28,[11,"c"]],[3402,29,3402,30,[11,"n"]]]]],[3402,32,3402,33,[11,"t"]]]]],[3403,21,3403,51,[0,[[3403,21,3403,34,[2,[],"matchTypeVars"]],[3403,35,3403,36,[3,1]],[3403,37,3403,45,[2,[],"typeVars"]],[3403,46,3403,47,[2,[],"c"]],[3403,48,3403,49,[2,[],"n"]],[3403,50,3403,51,[2,[],"t"]]]]]],[[3405,17,3405,35,[7,[[3405,19,3405,20,[11,"t"]],[3405,22,3405,33,[12,[[],"TypeVar"],[[3405,30,3405,31,[11,"c"]],[3405,32,3405,33,[11,"n"]]]]]]]],[3406,21,3406,51,[0,[[3406,21,3406,34,[2,[],"matchTypeVars"]],[3406,35,3406,36,[3,2]],[3406,37,3406,45,[2,[],"typeVars"]],[3406,46,3406,47,[2,[],"c"]],[3406,48,3406,49,[2,[],"n"]],[3406,50,3406,51,[2,[],"t"]]]]]],[[3408,17,3408,45,[7,[[3408,19,3408,30,[12,[[],"ListType"],[[3408,28,3408,30,[11,"t1"]]]]],[3408,32,3408,43,[12,[[],"ListType"],[[3408,41,3408,43,[11,"t2"]]]]]]]],[3409,21,3409,38,[0,[[3409,21,3409,23,[2,[],"go"]],[3409,24,3409,32,[2,[],"typeVars"]],[3409,33,3409,35,[2,[],"t1"]],[3409,36,3409,38,[2,[],"t2"]]]]]],[[3411,17,3411,49,[7,[[3411,19,3411,32,[12,[[],"TupleType"],[[3411,29,3411,32,[11,"t1s"]]]]],[3411,34,3411,47,[12,[[],"TupleType"],[[3411,44,3411,47,[11,"t2s"]]]]]]]],[3413,21,3413,54,[0,[[3413,21,3413,37,[2,[],"checkListOfTypes"]],[3413,38,3413,46,[2,[],"typeVars"]],[3413,47,3413,50,[2,[],"t1s"]],[3413,51,3413,54,[2,[],"t2s"]]]]]],[[3415,17,3415,53,[7,[[3415,19,3415,34,[12,[[],"FunctionType"],[[3415,32,3415,34,[11,"f1"]]]]],[3415,36,3415,51,[12,[[],"FunctionType"],[[3415,49,3415,51,[11,"f2"]]]]]]]],[3416,21,3416,84,[0,[[3416,21,3416,37,[2,[],"checkListOfTypes"]],[3416,38,3416,46,[2,[],"typeVars"]],[3416,47,3416,65,[9,[[3416,49,3416,56,[19,[3416,49,3416,51,[2,[],"f1"]],[3416,52,3416,56,"from"]]],[3416,58,3416,63,[19,[3416,58,3416,60,[2,[],"f1"]],[3416,61,3416,63,"to"]]]]]],[3416,66,3416,84,[9,[[3416,68,3416,75,[19,[3416,68,3416,70,[2,[],"f1"]],[3416,71,3416,75,"from"]]],[3416,77,3416,82,[19,[3416,77,3416,79,[2,[],"f2"]],[3416,80,3416,82,"to"]]]]]]]]]],[[3418,17,3418,39,[7,[[3418,19,3418,27,[12,[[],"UnitType"],[]]],[3418,29,3418,37,[12,[[],"UnitType"],[]]]]]],[3419,21,3419,39,[6,[[3419,23,3419,31,[2,[],"typeVars"]],[3419,33,3419,37,[2,[],"True"]]]]]],[[3421,17,3421,59,[7,[[3421,19,3421,37,[12,[[],"NamedType"],[[3421,29,3421,31,[11,"n1"]],[3421,32,3421,37,[11,"args1"]]]]],[3421,39,3421,57,[12,[[],"NamedType"],[[3421,49,3421,51,[11,"n2"]],[3421,52,3421,57,[11,"args2"]]]]]]]],[3422,21,3423,61,[1,"|>",0,[3422,21,3422,58,[0,[[3422,21,3422,37,[2,[],"checkListOfTypes"]],[3422,38,3422,46,[2,[],"typeVars"]],[3422,47,3422,52,[2,[],"args1"]],[3422,53,3422,58,[2,[],"args2"]]]]],[3423,28,3423,61,[0,[[3423,28,3423,43,[2,["Tuple"],"mapSecond"]],[3423,44,3423,61,[7,[3423,45,3423,60,[0,[[3423,45,3423,49,[12,"&&"]],[3423,50,3423,60,[7,[3423,51,3423,59,[1,"==",2,[3423,51,3423,53,[2,[],"n1"]],[3423,57,3423,59,[2,[],"n2"]]]]]]]]]]]]]]]]],[[3425,17,3425,49,[7,[[3425,19,3425,32,[12,[[],"RecordType"],[[3425,30,3425,32,[11,"r1"]]]]],[3425,34,3425,47,[12,[[],"RecordType"],[[3425,45,3425,47,[11,"r2"]]]]]]]],[3427,21,3434,78,[1,"|>",0,[3427,21,3433,62,[0,[[3427,21,3427,31,[2,["Dict"],"merge"]],[3428,25,3428,80,[7,[3428,26,3428,79,[18,[[[3428,27,3428,28,[11,"f"]],[3428,29,3428,31,[11,"t1"]],[3428,32,3428,35,[11,"acc"]]],[3428,39,3428,79,[21,[3428,41,3428,44,"acc"],[[3428,47,3428,78,[[3428,47,3428,52,"only1"],[3428,55,3428,77,[1,"::",1,[3428,55,3428,64,[6,[[3428,57,3428,58,[2,[],"f"]],[3428,60,3428,62,[2,[],"t1"]]]]],[3428,68,3428,77,[19,[3428,68,3428,71,[2,[],"acc"]],[3428,72,3428,77,"only1"]]]]]]]]]]]]]]],[3429,25,3429,82,[7,[3429,26,3429,81,[18,[[[3429,27,3429,28,[0]],[3429,29,3429,31,[11,"t1"]],[3429,32,3429,34,[11,"t2"]],[3429,35,3429,38,[11,"acc"]]],[3429,42,3429,81,[21,[3429,44,3429,47,"acc"],[[3429,50,3429,80,[[3429,50,3429,54,"both"],[3429,57,3429,79,[1,"::",1,[3429,57,3429,67,[6,[[3429,59,3429,61,[2,[],"t1"]],[3429,63,3429,65,[2,[],"t2"]]]]],[3429,71,3429,79,[19,[3429,71,3429,74,[2,[],"acc"]],[3429,75,3429,79,"both"]]]]]]]]]]]]]]],[3430,25,3430,80,[7,[3430,26,3430,79,[18,[[[3430,27,3430,28,[11,"f"]],[3430,29,3430,31,[11,"t2"]],[3430,32,3430,35,[11,"acc"]]],[3430,39,3430,79,[21,[3430,41,3430,44,"acc"],[[3430,47,3430,78,[[3430,47,3430,52,"only2"],[3430,55,3430,77,[1,"::",1,[3430,55,3430,64,[6,[[3430,57,3430,58,[2,[],"f"]],[3430,60,3430,62,[2,[],"t2"]]]]],[3430,68,3430,77,[19,[3430,68,3430,71,[2,[],"acc"]],[3430,72,3430,77,"only2"]]]]]]]]]]]]]]],[3431,25,3431,50,[7,[3431,26,3431,49,[0,[[3431,26,3431,39,[2,["Dict"],"fromList"]],[3431,40,3431,49,[19,[3431,40,3431,42,[2,[],"r1"]],[3431,43,3431,49,"fields"]]]]]]]],[3432,25,3432,50,[7,[3432,26,3432,49,[0,[[3432,26,3432,39,[2,["Dict"],"fromList"]],[3432,40,3432,49,[19,[3432,40,3432,42,[2,[],"r2"]],[3432,43,3432,49,"fields"]]]]]]]],[3433,25,3433,62,[8,[[3433,27,3433,37,[[3433,27,3433,32,"only1"],[3433,35,3433,37,[9,[]]]]],[3433,39,3433,48,[[3433,39,3433,43,"both"],[3433,46,3433,48,[9,[]]]]],[3433,50,3433,61,[[3433,50,3433,55,"only2"],[3433,58,3433,60,[9,[]]]]]]]]]]],[3434,28,3434,78,[0,[[3434,28,3434,47,[2,[],"validateRecordMatch"]],[3434,48,3434,56,[2,[],"typeVars"]],[3434,57,3434,67,[19,[3434,57,3434,59,[2,[],"r1"]],[3434,60,3434,67,"generic"]]],[3434,68,3434,78,[19,[3434,68,3434,70,[2,[],"r2"]],[3434,71,3434,78,"generic"]]]]]]]]],[[3436,17,3436,18,[0]],[3437,21,3437,40,[6,[[3437,23,3437,31,[2,[],"typeVars"]],[3437,33,3437,38,[2,[],"False"]]]]]]]]]]]]]]]],[3439,5,3439,36,[0,[[3439,5,3439,7,[2,[],"go"]],[3439,8,3439,14,[2,[],"inVars"]],[3439,15,3439,25,[2,[],"derefType1"]],[3439,26,3439,36,[2,[],"derefType2"]]]]]]]]]]]]],[3442,1,3509,31,[0,[[1,[3442,1,3443,3,"{-| Check if a type matches a constrained type variable.\n-}"]],[1,[3444,1,3444,45,[[3444,1,3444,17,"matchesTypeClass"],[3444,20,3444,45,[6,[3444,20,3444,24,[1,[3444,20,3444,24,[[],"Type"]],[]]],[3444,28,3444,45,[6,[3444,28,3444,37,[1,[3444,28,3444,37,[[],"Typeclass"]],[]]],[3444,41,3444,45,[1,[3444,41,3444,45,[[],"Bool"]],[]]]]]]]]]],[3445,1,3509,31,[[3445,1,3445,17,"matchesTypeClass"],[[3445,18,3445,23,[11,"type_"]],[3445,24,3445,29,[11,"class"]]],[3446,5,3509,31,[16,[[[3447,9,3470,26,[0,[[0],[1,[3447,9,3447,40,[[3447,9,3447,25,"typeIsComparable"],[3447,28,3447,40,[6,[3447,28,3447,32,[1,[3447,28,3447,32,[[],"Type"]],[]]],[3447,36,3447,40,[1,[3447,36,3447,40,[[],"Bool"]],[]]]]]]]],[3448,9,3470,26,[[3448,9,3448,25,"typeIsComparable"],[[3448,26,3448,27,[11,"t"]]],[3449,13,3470,26,[17,[[3449,18,3449,19,[2,[],"t"]],[[[3450,17,3450,56,[12,[[],"NamedType"],[[3450,27,3450,53,[7,[[3450,29,3450,41,[10,[[3450,31,3450,39,[3,"String"]]]]],[3450,43,3450,51,[3,"String"]]]]],[3450,54,3450,56,[10,[]]]]]],[3451,21,3451,25,[2,[],"True"]]],[[3453,17,3453,52,[12,[[],"NamedType"],[[3453,27,3453,49,[7,[[3453,29,3453,39,[10,[[3453,31,3453,37,[3,"Char"]]]]],[3453,41,3453,47,[3,"Char"]]]]],[3453,50,3453,52,[10,[]]]]]],[3454,21,3454,25,[2,[],"True"]]],[[3456,17,3456,53,[12,[[],"NamedType"],[[3456,27,3456,50,[7,[[3456,29,3456,41,[10,[[3456,31,3456,39,[3,"Basics"]]]]],[3456,43,3456,48,[3,"Int"]]]]],[3456,51,3456,53,[10,[]]]]]],[3457,21,3457,25,[2,[],"True"]]],[[3459,17,3459,55,[12,[[],"NamedType"],[[3459,27,3459,52,[7,[[3459,29,3459,41,[10,[[3459,31,3459,39,[3,"Basics"]]]]],[3459,43,3459,50,[3,"Float"]]]]],[3459,53,3459,55,[10,[]]]]]],[3460,21,3460,25,[2,[],"True"]]],[[3462,17,3462,28,[12,[[],"ListType"],[[3462,26,3462,28,[11,"t_"]]]]],[3463,21,3463,40,[0,[[3463,21,3463,37,[2,[],"typeIsComparable"]],[3463,38,3463,40,[2,[],"t_"]]]]]],[[3465,17,3465,29,[12,[[],"TupleType"],[[3465,27,3465,29,[11,"ts"]]]]],[3466,21,3466,49,[0,[[3466,21,3466,29,[2,["List"],"all"]],[3466,30,3466,46,[2,[],"typeIsComparable"]],[3466,47,3466,49,[2,[],"ts"]]]]]],[[3468,17,3468,18,[0]],[3470,21,3470,26,[2,[],"False"]]]]]]]]]]]],[3472,9,3483,26,[0,[[0],[1,[3472,9,3472,40,[[3472,9,3472,25,"typeIsAppendable"],[3472,28,3472,40,[6,[3472,28,3472,32,[1,[3472,28,3472,32,[[],"Type"]],[]]],[3472,36,3472,40,[1,[3472,36,3472,40,[[],"Bool"]],[]]]]]]]],[3473,9,3483,26,[[3473,9,3473,25,"typeIsAppendable"],[[3473,26,3473,27,[11,"t"]]],[3474,13,3483,26,[17,[[3474,18,3474,19,[2,[],"t"]],[[[3475,17,3475,56,[12,[[],"NamedType"],[[3475,27,3475,53,[7,[[3475,29,3475,41,[10,[[3475,31,3475,39,[3,"String"]]]]],[3475,43,3475,51,[3,"String"]]]]],[3475,54,3475,56,[10,[]]]]]],[3476,21,3476,25,[2,[],"True"]]],[[3478,17,3478,27,[12,[[],"ListType"],[[3478,26,3478,27,[0]]]]],[3479,21,3479,25,[2,[],"True"]]],[[3481,17,3481,18,[0]],[3483,21,3483,26,[2,[],"False"]]]]]]]]]]]],[3485,9,3496,26,[0,[[0],[1,[3485,9,3485,36,[[3485,9,3485,21,"typeIsNumber"],[3485,24,3485,36,[6,[3485,24,3485,28,[1,[3485,24,3485,28,[[],"Type"]],[]]],[3485,32,3485,36,[1,[3485,32,3485,36,[[],"Bool"]],[]]]]]]]],[3486,9,3496,26,[[3486,9,3486,21,"typeIsNumber"],[[3486,22,3486,23,[11,"t"]]],[3487,13,3496,26,[17,[[3487,18,3487,19,[2,[],"t"]],[[[3488,17,3488,53,[12,[[],"NamedType"],[[3488,27,3488,50,[7,[[3488,29,3488,41,[10,[[3488,31,3488,39,[3,"Basics"]]]]],[3488,43,3488,48,[3,"Int"]]]]],[3488,51,3488,53,[10,[]]]]]],[3489,21,3489,25,[2,[],"True"]]],[[3491,17,3491,55,[12,[[],"NamedType"],[[3491,27,3491,52,[7,[[3491,29,3491,41,[10,[[3491,31,3491,39,[3,"Basics"]]]]],[3491,43,3491,50,[3,"Float"]]]]],[3491,53,3491,55,[10,[]]]]]],[3492,21,3492,25,[2,[],"True"]]],[[3494,17,3494,18,[0]],[3496,21,3496,26,[2,[],"False"]]]]]]]]]]]]],[3498,5,3509,31,[17,[[3498,10,3498,15,[2,[],"class"]],[[[3499,9,3499,19,[12,[[],"Appendable"],[]]],[3500,13,3500,35,[0,[[3500,13,3500,29,[2,[],"typeIsAppendable"]],[3500,30,3500,35,[2,[],"type_"]]]]]],[[3502,9,3502,19,[12,[[],"Comparable"],[]]],[3503,13,3503,35,[0,[[3503,13,3503,29,[2,[],"typeIsComparable"]],[3503,30,3503,35,[2,[],"type_"]]]]]],[[3505,9,3505,19,[12,[[],"CompAppend"],[]]],[3506,13,3506,61,[1,"&&",1,[3506,13,3506,35,[0,[[3506,13,3506,29,[2,[],"typeIsAppendable"]],[3506,30,3506,35,[2,[],"type_"]]]]],[3506,39,3506,61,[0,[[3506,39,3506,55,[2,[],"typeIsComparable"]],[3506,56,3506,61,[2,[],"type_"]]]]]]]],[[3508,9,3508,15,[12,[[],"Number"],[]]],[3509,13,3509,31,[0,[[3509,13,3509,25,[2,[],"typeIsNumber"]],[3509,26,3509,31,[2,[],"type_"]]]]]]]]]]]]]]]]]],[3512,1,3691,38,[0,[[1,[3512,1,3513,3,"{-| Do some half-hearted type inference to help differentiate records.\n-}"]],[1,[3514,1,3514,74,[[3514,1,3514,14,"inferExprType"],[3514,17,3514,74,[6,[3514,17,3514,29,[1,[3514,17,3514,29,[[],"LocalContext"]],[]]],[3514,33,3514,74,[6,[3514,33,3514,48,[1,[3514,33,3514,37,[[],"Node"]],[[3514,38,3514,48,[1,[3514,38,3514,48,[[],"Expression"]],[]]]]]],[3514,52,3514,74,[1,[3514,52,3514,57,[[],"Maybe"]],[[3514,58,3514,74,[1,[3514,58,3514,74,[[],"DereferencedType"]],[]]]]]]]]]]]]],[3515,1,3691,38,[[3515,1,3515,14,"inferExprType"],[[3515,15,3515,20,[11,"local"]]],[3516,5,3691,38,[16,[[[3517,9,3524,22,[0,[[0],[1,[3517,9,3517,73,[[3517,9,3517,17,"makeFunc"],[3517,20,3517,73,[6,[3517,20,3517,26,[1,[3517,20,3517,26,[[],"String"]],[]]],[3517,30,3517,73,[6,[3517,30,3517,59,[1,[3517,30,3517,35,[[],"Maybe"]],[[3517,36,3517,59,[1,[3517,37,3517,41,[[],"List"]],[[3517,42,3517,58,[1,[3517,42,3517,58,[[],"DereferencedType"]],[]]]]]]]]],[3517,63,3517,73,[1,[3517,63,3517,68,[[],"Maybe"]],[[3517,69,3517,73,[1,[3517,69,3517,73,[[],"Type"]],[]]]]]]]]]]]]],[3518,9,3524,22,[[3518,9,3518,17,"makeFunc"],[[3518,18,3518,31,[11,"typeVarPrefix"]]],[3519,13,3524,22,[1,">>",1,[3519,13,3519,64,[0,[[3519,13,3519,22,[2,["Maybe"],"map"]],[3519,23,3519,64,[7,[3519,24,3519,63,[0,[[3519,24,3519,32,[2,["List"],"map"]],[3519,33,3519,63,[7,[3519,34,3519,62,[0,[[3519,34,3519,48,[2,[],"prefixTypeVars"]],[3519,49,3519,62,[2,[],"typeVarPrefix"]]]]]]]]]]]]]]],[3520,20,3524,22,[1,">>",1,[3520,20,3520,50,[0,[[3520,20,3520,33,[2,["Maybe"],"andThen"]],[3520,34,3520,50,[2,["ListX"],"unconsLast"]]]]],[3521,20,3524,22,[0,[[3521,20,3521,29,[2,["Maybe"],"map"]],[3522,21,3524,22,[7,[3522,22,3523,65,[1,">>",1,[3522,22,3522,62,[0,[[3522,22,3522,35,[2,["Tuple"],"mapBoth"]],[3522,36,3522,43,[2,[],"getType"]],[3522,44,3522,62,[7,[3522,45,3522,61,[0,[[3522,45,3522,53,[2,["List"],"map"]],[3522,54,3522,61,[2,[],"getType"]]]]]]]]]],[3523,28,3523,65,[7,[3523,29,3523,64,[18,[[[3523,30,3523,39,[7,[[3523,32,3523,33,[11,"r"]],[3523,35,3523,37,[11,"ts"]]]]]],[3523,43,3523,64,[0,[[3523,43,3523,59,[2,[],"makeFunctionType"]],[3523,60,3523,61,[2,[],"r"]],[3523,62,3523,64,[2,[],"ts"]]]]]]]]]]]]]]]]]]]]]]]]]],[3526,9,3688,30,[0,[[0],[1,[3526,9,3526,53,[[3526,9,3526,11,"go"],[3526,14,3526,53,[6,[3526,14,3526,20,[1,[3526,14,3526,20,[[],"String"]],[]]],[3526,24,3526,53,[6,[3526,24,3526,39,[1,[3526,24,3526,28,[[],"Node"]],[[3526,29,3526,39,[1,[3526,29,3526,39,[[],"Expression"]],[]]]]]],[3526,43,3526,53,[1,[3526,43,3526,48,[[],"Maybe"]],[[3526,49,3526,53,[1,[3526,49,3526,53,[[],"Type"]],[]]]]]]]]]]]]],[3527,9,3688,30,[[3527,9,3527,11,"go"],[[3527,12,3527,25,[11,"typeVarPrefix"]],[3527,26,3527,30,[11,"node"]]],[3528,13,3688,30,[17,[[3528,18,3528,33,[0,[[3528,18,3528,28,[2,["Node"],"value"]],[3528,29,3528,33,[2,[],"node"]]]]],[[[3529,17,3529,25,[12,[[],"UnitExpr"],[]]],[3531,21,3531,34,[0,[[3531,21,3531,25,[2,[],"Just"]],[3531,26,3531,34,[2,[],"UnitType"]]]]]],[[3533,17,3533,26,[12,[[],"Integer"],[[3533,25,3533,26,[0]]]]],[3534,21,3534,65,[1,"<|",1,[3534,21,3534,25,[2,[],"Just"]],[3534,29,3534,65,[0,[[3534,29,3534,38,[2,[],"NamedType"]],[3534,39,3534,62,[6,[[3534,41,3534,53,[9,[[3534,43,3534,51,[5,"Basics"]]]]],[3534,55,3534,60,[5,"Int"]]]]],[3534,63,3534,65,[9,[]]]]]]]]],[[3536,17,3536,22,[12,[[],"Hex"],[[3536,21,3536,22,[0]]]]],[3537,21,3537,65,[1,"<|",1,[3537,21,3537,25,[2,[],"Just"]],[3537,29,3537,65,[0,[[3537,29,3537,38,[2,[],"NamedType"]],[3537,39,3537,62,[6,[[3537,41,3537,53,[9,[[3537,43,3537,51,[5,"Basics"]]]]],[3537,55,3537,60,[5,"Int"]]]]],[3537,63,3537,65,[9,[]]]]]]]]],[[3539,17,3539,28,[12,[[],"Floatable"],[[3539,27,3539,28,[0]]]]],[3540,21,3540,67,[1,"<|",1,[3540,21,3540,25,[2,[],"Just"]],[3540,29,3540,67,[0,[[3540,29,3540,38,[2,[],"NamedType"]],[3540,39,3540,64,[6,[[3540,41,3540,53,[9,[[3540,43,3540,51,[5,"Basics"]]]]],[3540,55,3540,62,[5,"Float"]]]]],[3540,65,3540,67,[9,[]]]]]]]]],[[3542,17,3542,26,[12,[[],"Literal"],[[3542,25,3542,26,[0]]]]],[3543,21,3543,68,[1,"<|",1,[3543,21,3543,25,[2,[],"Just"]],[3543,29,3543,68,[0,[[3543,29,3543,38,[2,[],"NamedType"]],[3543,39,3543,65,[6,[[3543,41,3543,53,[9,[[3543,43,3543,51,[5,"String"]]]]],[3543,55,3543,63,[5,"String"]]]]],[3543,66,3543,68,[9,[]]]]]]]]],[[3545,17,3545,30,[12,[[],"CharLiteral"],[[3545,29,3545,30,[0]]]]],[3546,21,3546,64,[1,"<|",1,[3546,21,3546,25,[2,[],"Just"]],[3546,29,3546,64,[0,[[3546,29,3546,38,[2,[],"NamedType"]],[3546,39,3546,61,[6,[[3546,41,3546,51,[9,[[3546,43,3546,49,[5,"Char"]]]]],[3546,53,3546,59,[5,"Char"]]]]],[3546,62,3546,64,[9,[]]]]]]]]],[[3548,17,3548,36,[12,[[],"TupledExpression"],[[3548,34,3548,36,[11,"es"]]]]],[3549,21,3551,47,[1,"|>",0,[3549,21,3550,42,[1,"|>",0,[3549,21,3549,113,[0,[[3549,21,3549,36,[2,["List"],"indexedMap"]],[3549,37,3549,110,[7,[3549,38,3549,109,[18,[[[3549,39,3549,40,[11,"i"]],[3549,41,3549,42,[11,"e"]]],[3549,46,3549,109,[0,[[3549,46,3549,48,[2,[],"go"]],[3549,49,3549,107,[7,[3549,50,3549,106,[1,"++",1,[3549,50,3549,63,[2,[],"typeVarPrefix"]],[3549,67,3549,106,[1,"++",1,[3549,67,3549,86,[5,"Tuple Expression "]],[3549,90,3549,106,[0,[[3549,90,3549,104,[2,["String"],"fromInt"]],[3549,105,3549,106,[2,[],"i"]]]]]]]]]]],[3549,108,3549,109,[2,[],"e"]]]]]]]]]],[3549,111,3549,113,[2,[],"es"]]]]],[3550,28,3550,42,[2,["MaybeX"],"combine"]]]],[3551,28,3551,47,[0,[[3551,28,3551,37,[2,["Maybe"],"map"]],[3551,38,3551,47,[2,[],"TupleType"]]]]]]]],[[3553,17,3553,28,[12,[[],"ListExpr"],[[3553,26,3553,28,[11,"es"]]]]],[3554,21,3563,50,[11,[3554,24,3554,39,[0,[[3554,24,3554,36,[2,["List"],"isEmpty"]],[3554,37,3554,39,[2,[],"es"]]]]],[3556,25,3556,108,[0,[[3556,25,3556,29,[2,[],"Just"]],[3556,30,3556,108,[7,[3556,31,3556,107,[0,[[3556,31,3556,39,[2,[],"ListType"]],[3556,40,3556,107,[7,[3556,41,3556,106,[1,"<|",1,[3556,41,3556,56,[0,[[3556,41,3556,48,[2,[],"TypeVar"]],[3556,49,3556,56,[2,[],"Nothing"]]]]],[3556,60,3556,106,[1,"++",1,[3556,60,3556,73,[2,[],"typeVarPrefix"]],[3556,77,3556,106,[5,"inferred empty list typevar"]]]]]]]]]]]]]]]],[3560,25,3563,50,[1,"|>",0,[3560,25,3562,42,[1,"|>",0,[3560,25,3561,45,[1,"|>",0,[3560,25,3560,113,[0,[[3560,25,3560,40,[2,["List"],"indexedMap"]],[3560,41,3560,110,[7,[3560,42,3560,109,[18,[[[3560,43,3560,44,[11,"i"]],[3560,45,3560,46,[11,"e"]]],[3560,50,3560,109,[0,[[3560,50,3560,52,[2,[],"go"]],[3560,53,3560,107,[7,[3560,54,3560,106,[1,"++",1,[3560,54,3560,67,[2,[],"typeVarPrefix"]],[3560,71,3560,106,[1,"++",1,[3560,71,3560,86,[5,"List Element "]],[3560,90,3560,106,[0,[[3560,90,3560,104,[2,["String"],"fromInt"]],[3560,105,3560,106,[2,[],"i"]]]]]]]]]]],[3560,108,3560,109,[2,[],"e"]]]]]]]]]],[3560,111,3560,113,[2,[],"es"]]]]],[3561,32,3561,45,[2,["MaybeX"],"values"]]]],[3562,32,3562,42,[2,[],"unifyTypes"]]]],[3563,32,3563,50,[0,[[3563,32,3563,41,[2,["Maybe"],"map"]],[3563,42,3563,50,[2,[],"ListType"]]]]]]]]]],[[3565,17,3565,30,[12,[[],"RecordExpr"],[[3565,28,3565,30,[11,"rs"]]]]],[3566,21,3577,119,[1,"|>",0,[3566,21,3576,42,[1,"|>",0,[3566,21,3575,30,[1,"|>",0,[3566,21,3566,23,[2,[],"rs"]],[3567,28,3575,30,[0,[[3567,28,3567,36,[2,["List"],"map"]],[3568,29,3575,30,[7,[3568,30,3574,77,[18,[[[3568,31,3568,32,[11,"n"]]],[3569,33,3574,77,[16,[[[3570,37,3571,53,[1,[3570,37,3570,45,[7,[[3570,39,3570,40,[11,"f"]],[3570,42,3570,43,[11,"e"]]]]],[3571,41,3571,53,[0,[[3571,41,3571,51,[2,["Node"],"value"]],[3571,52,3571,53,[2,[],"n"]]]]]]]],[3573,33,3574,77,[1,"|>",0,[3573,33,3573,88,[0,[[3573,33,3573,35,[2,[],"go"]],[3573,36,3573,86,[7,[3573,37,3573,85,[1,"++",1,[3573,37,3573,50,[2,[],"typeVarPrefix"]],[3573,54,3573,85,[1,"++",1,[3573,54,3573,69,[5,"Record Field "]],[3573,73,3573,85,[0,[[3573,73,3573,83,[2,["Node"],"value"]],[3573,84,3573,85,[2,[],"f"]]]]]]]]]]],[3573,87,3573,88,[2,[],"e"]]]]],[3574,40,3574,77,[0,[[3574,40,3574,49,[2,["Maybe"],"map"]],[3574,50,3574,77,[7,[3574,51,3574,76,[0,[[3574,51,3574,61,[2,["Tuple"],"pair"]],[3574,62,3574,76,[7,[3574,63,3574,75,[0,[[3574,63,3574,73,[2,["Node"],"value"]],[3574,74,3574,75,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3576,28,3576,42,[2,["MaybeX"],"combine"]]]],[3577,28,3577,119,[0,[[3577,28,3577,37,[2,["Maybe"],"map"]],[3577,38,3577,119,[7,[3577,39,3577,118,[18,[[[3577,40,3577,46,[11,"fields"]]],[3577,50,3577,118,[0,[[3577,50,3577,60,[2,[],"RecordType"]],[3577,61,3577,118,[8,[[3577,63,3577,80,[[3577,63,3577,70,"generic"],[3577,73,3577,80,[2,[],"Nothing"]]]],[3577,82,3577,97,[[3577,82,3577,88,"fields"],[3577,91,3577,97,[2,[],"fields"]]]],[3577,99,3577,117,[[3577,99,3577,108,"canonical"],[3577,111,3577,116,[2,[],"False"]]]]]]]]]]]]]]]]]]]]],[[3579,17,3579,39,[12,[[],"FunctionOrValue"],[[3579,33,3579,34,[0]],[3579,35,3579,39,[11,"name"]]]]],[3580,21,3581,50,[1,"|>",0,[3580,21,3580,61,[0,[[3580,21,3580,37,[2,[],"findFunctionType"]],[3580,38,3580,43,[2,[],"local"]],[3580,44,3580,51,[2,[],"Nothing"]],[3580,52,3580,56,[2,[],"node"]],[3580,57,3580,61,[2,[],"name"]]]]],[3581,28,3581,50,[0,[[3581,28,3581,36,[2,[],"makeFunc"]],[3581,37,3581,50,[2,[],"typeVarPrefix"]]]]]]]],[[3583,17,3583,42,[12,[[],"ParenthesizedExpression"],[[3583,41,3583,42,[11,"e"]]]]],[3585,21,3585,39,[0,[[3585,21,3585,23,[2,[],"go"]],[3585,24,3585,37,[2,[],"typeVarPrefix"]],[3585,38,3585,39,[2,[],"e"]]]]]],[[3587,17,3587,27,[12,[[],"Negation"],[[3587,26,3587,27,[11,"e"]]]]],[3588,21,3588,39,[0,[[3588,21,3588,23,[2,[],"go"]],[3588,24,3588,37,[2,[],"typeVarPrefix"]],[3588,38,3588,39,[2,[],"e"]]]]]],[[3590,17,3590,32,[12,[[],"IfBlock"],[[3590,25,3590,26,[0]],[3590,27,3590,29,[11,"e1"]],[3590,30,3590,32,[11,"e2"]]]]],[3592,21,3594,38,[1,"|>",0,[3592,21,3593,41,[1,"|>",0,[3592,21,3592,108,[9,[[3592,23,3592,63,[0,[[3592,23,3592,25,[2,[],"go"]],[3592,26,3592,60,[7,[3592,27,3592,59,[1,"++",1,[3592,27,3592,40,[2,[],"typeVarPrefix"]],[3592,44,3592,59,[5,"If Block True"]]]]]],[3592,61,3592,63,[2,[],"e1"]]]]],[3592,65,3592,106,[0,[[3592,65,3592,67,[2,[],"go"]],[3592,68,3592,103,[7,[3592,69,3592,102,[1,"++",1,[3592,69,3592,82,[2,[],"typeVarPrefix"]],[3592,86,3592,102,[5,"If Block False"]]]]]],[3592,104,3592,106,[2,[],"e2"]]]]]]]],[3593,28,3593,41,[2,["MaybeX"],"values"]]]],[3594,28,3594,38,[2,[],"unifyTypes"]]]]],[[3596,17,3596,33,[12,[[],"PrefixOperator"],[[3596,32,3596,33,[11,"p"]]]]],[3597,21,3598,50,[1,"|>",0,[3597,21,3597,53,[0,[[3597,21,3597,37,[2,[],"findOperatorType"]],[3597,38,3597,51,[19,[3597,38,3597,43,[2,[],"local"]],[3597,44,3597,51,"context"]]],[3597,52,3597,53,[2,[],"p"]]]]],[3598,28,3598,50,[0,[[3598,28,3598,36,[2,[],"makeFunc"]],[3598,37,3598,50,[2,[],"typeVarPrefix"]]]]]]]],[[3600,17,3600,41,[12,[[],"CaseExpression"],[[3600,32,3600,41,[8,[[3600,34,3600,39,"cases"]]]]]]],[3602,21,3604,38,[1,"|>",0,[3602,21,3603,41,[1,"|>",0,[3602,21,3602,122,[0,[[3602,21,3602,36,[2,["List"],"indexedMap"]],[3602,37,3602,116,[7,[3602,38,3602,115,[18,[[[3602,39,3602,40,[11,"i"]],[3602,41,3602,49,[7,[[3602,43,3602,44,[0]],[3602,46,3602,47,[11,"e"]]]]]],[3602,53,3602,115,[0,[[3602,53,3602,55,[2,[],"go"]],[3602,56,3602,113,[7,[3602,57,3602,112,[1,"++",1,[3602,57,3602,70,[2,[],"typeVarPrefix"]],[3602,74,3602,112,[1,"++",1,[3602,74,3602,92,[5,"Case Expression "]],[3602,96,3602,112,[0,[[3602,96,3602,110,[2,["String"],"fromInt"]],[3602,111,3602,112,[2,[],"i"]]]]]]]]]]],[3602,114,3602,115,[2,[],"e"]]]]]]]]]],[3602,117,3602,122,[2,[],"cases"]]]]],[3603,28,3603,41,[2,["MaybeX"],"values"]]]],[3604,28,3604,38,[2,[],"unifyTypes"]]]]],[[3606,17,3606,31,[12,[[],"Application"],[[3606,29,3606,31,[11,"es"]]]]],[3607,21,3608,45,[1,"|>",0,[3607,21,3607,51,[0,[[3607,21,3607,42,[2,[],"inferApplicationChain"]],[3607,43,3607,48,[2,[],"local"]],[3607,49,3607,51,[2,[],"es"]]]]],[3608,28,3608,45,[0,[[3608,28,3608,37,[2,["Maybe"],"map"]],[3608,38,3608,45,[2,[],"getType"]]]]]]]],[[3610,17,3610,54,[12,[[],"LambdaExpression"],[[3610,34,3610,54,[8,[[3610,36,3610,40,"args"],[3610,42,3610,52,"expression"]]]]]]],[3611,21,3622,38,[16,[[[3612,25,3619,38,[0,[[0],[1,[3612,25,3612,63,[[3612,25,3612,35,"unwrapArgs"],[3612,38,3612,63,[6,[3612,38,3612,49,[1,[3612,38,3612,42,[[],"List"]],[[3612,43,3612,49,[1,[3612,43,3612,49,[[],"String"]],[]]]]]],[3612,53,3612,63,[1,[3612,53,3612,58,[[],"Maybe"]],[[3612,59,3612,63,[1,[3612,59,3612,63,[[],"Type"]],[]]]]]]]]]]],[3613,25,3619,38,[[3613,25,3613,35,"unwrapArgs"],[[3613,36,3613,38,[11,"xs"]]],[3614,29,3619,38,[1,"|>",0,[3614,29,3614,44,[0,[[3614,29,3614,41,[2,["ListX"],"uncons"]],[3614,42,3614,44,[2,[],"xs"]]]]],[3615,36,3619,38,[0,[[3615,36,3615,49,[2,["MaybeX"],"unpack"]],[3615,50,3615,86,[7,[3615,51,3615,85,[18,[[[3615,52,3615,54,[1]]],[3615,58,3615,85,[0,[[3615,58,3615,60,[2,[],"go"]],[3615,61,3615,74,[2,[],"typeVarPrefix"]],[3615,75,3615,85,[2,[],"expression"]]]]]]]]]],[3616,37,3619,38,[7,[3616,38,3618,135,[18,[[[3616,39,3616,49,[7,[[3616,41,3616,42,[11,"x"]],[3616,44,3616,47,[11,"xs_"]]]]]],[3617,41,3618,135,[1,"|>",0,[3617,41,3617,55,[0,[[3617,41,3617,51,[2,[],"unwrapArgs"]],[3617,52,3617,55,[2,[],"xs_"]]]]],[3618,48,3618,135,[0,[[3618,48,3618,57,[2,["Maybe"],"map"]],[3618,58,3618,135,[7,[3618,59,3618,134,[18,[[[3618,60,3618,61,[11,"t"]]],[3618,65,3618,134,[0,[[3618,65,3618,77,[2,[],"FunctionType"]],[3618,78,3618,134,[8,[[3618,80,3618,124,[[3618,80,3618,84,"from"],[3618,87,3618,124,[1,"<|",1,[3618,87,3618,102,[0,[[3618,87,3618,94,[2,[],"TypeVar"]],[3618,95,3618,102,[2,[],"Nothing"]]]]],[3618,106,3618,124,[1,"++",1,[3618,106,3618,119,[2,[],"typeVarPrefix"]],[3618,123,3618,124,[2,[],"x"]]]]]]]],[3618,126,3618,133,[[3618,126,3618,128,"to"],[3618,131,3618,132,[2,[],"t"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3621,21,3622,38,[1,"|>",0,[3621,21,3621,84,[0,[[3621,21,3621,36,[2,["List"],"indexedMap"]],[3621,37,3621,79,[7,[3621,38,3621,78,[18,[[[3621,39,3621,40,[11,"i"]],[3621,41,3621,42,[0]]],[3621,46,3621,78,[1,"++",1,[3621,46,3621,58,[5,"lambda arg"]],[3621,62,3621,78,[0,[[3621,62,3621,76,[2,["String"],"fromInt"]],[3621,77,3621,78,[2,[],"i"]]]]]]]]]]]],[3621,80,3621,84,[2,[],"args"]]]]],[3622,28,3622,38,[2,[],"unwrapArgs"]]]]]]]],[[3624,17,3624,42,[12,[[],"RecordAccess"],[[3624,30,3624,31,[11,"e"]],[3624,32,3624,42,[11,"accessFunc"]]]]],[3625,21,3633,45,[1,"|>",0,[3625,21,3632,29,[1,"|>",0,[3625,21,3627,47,[1,"|>",0,[3625,21,3626,54,[1,"|>",0,[3625,21,3625,39,[0,[[3625,21,3625,23,[2,[],"go"]],[3625,24,3625,37,[2,[],"typeVarPrefix"]],[3625,38,3625,39,[2,[],"e"]]]]],[3626,28,3626,54,[0,[[3626,28,3626,37,[2,["Maybe"],"map"]],[3626,38,3626,54,[2,[],"DereferencedType"]]]]]]],[3627,28,3627,47,[2,[],"getRecordFieldTypes"]]]],[3628,28,3632,29,[7,[3628,29,3631,61,[18,[[[3628,30,3628,32,[11,"ts"]]],[3629,33,3631,61,[1,"|>",0,[3629,33,3630,54,[1,"|>",0,[3629,33,3629,54,[0,[[3629,33,3629,43,[2,["Node"],"value"]],[3629,44,3629,54,[2,[],"accessFunc"]]]]],[3630,40,3630,54,[2,[],"makeAccessFunc"]]]],[3631,40,3631,61,[7,[3631,41,3631,60,[18,[[[3631,42,3631,43,[11,"f"]]],[3631,47,3631,60,[0,[[3631,47,3631,55,[2,["Dict"],"get"]],[3631,56,3631,57,[2,[],"f"]],[3631,58,3631,60,[2,[],"ts"]]]]]]]]]]]]]]]]]]],[3633,28,3633,45,[0,[[3633,28,3633,37,[2,["Maybe"],"map"]],[3633,38,3633,45,[2,[],"getType"]]]]]]]],[[3635,17,3635,33,[12,[[],"GLSLExpression"],[[3635,32,3635,33,[0]]]]],[3636,21,3636,28,[2,[],"Nothing"]]],[[3638,17,3638,48,[12,[[],"RecordAccessFunction"],[[3638,38,3638,48,[11,"accessFunc"]]]]],[3640,21,3653,29,[1,"|>",0,[3640,21,3640,46,[0,[[3640,21,3640,35,[2,[],"makeAccessFunc"]],[3640,36,3640,46,[2,[],"accessFunc"]]]]],[3641,28,3653,29,[7,[3641,29,3652,42,[18,[[[3641,30,3641,31,[11,"f"]]],[3642,33,3652,42,[1,"<|",1,[3642,33,3642,37,[2,[],"Just"]],[3643,37,3652,42,[0,[[3643,37,3643,49,[2,[],"FunctionType"]],[3644,41,3652,42,[8,[[3644,43,3650,50,[[3644,43,3644,47,"from"],[3645,45,3650,50,[0,[[3645,45,3645,55,[2,[],"RecordType"]],[3647,49,3650,50,[8,[[3647,51,3647,139,[[3647,51,3647,58,"generic"],[3647,61,3647,139,[1,"<|",1,[3647,61,3647,65,[2,[],"Just"]],[3647,69,3647,139,[1,"<|",1,[3647,69,3647,84,[0,[[3647,69,3647,76,[2,[],"TypeVar"]],[3647,77,3647,84,[2,[],"Nothing"]]]]],[3647,88,3647,139,[1,"++",1,[3647,88,3647,101,[2,[],"typeVarPrefix"]],[3647,105,3647,139,[1,"++",1,[3647,105,3647,134,[5,"record access inferred for "]],[3647,138,3647,139,[2,[],"f"]]]]]]]]]]]],[3648,51,3649,49,[[3648,51,3648,60,"canonical"],[3648,63,3648,68,[2,[],"False"]]]],[3649,51,3650,49,[[3649,51,3649,57,"fields"],[3649,60,3649,147,[9,[[3649,62,3649,145,[6,[[3649,64,3649,65,[2,[],"f"]],[3649,67,3649,143,[1,"<|",1,[3649,67,3649,82,[0,[[3649,67,3649,74,[2,[],"TypeVar"]],[3649,75,3649,82,[2,[],"Nothing"]]]]],[3649,86,3649,143,[1,"++",1,[3649,86,3649,99,[2,[],"typeVarPrefix"]],[3649,103,3649,143,[1,"++",1,[3649,103,3649,138,[5,"record access inferred field for "]],[3649,142,3649,143,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]],[3651,43,3652,41,[[3651,43,3651,45,"to"],[3651,48,3651,124,[1,"<|",1,[3651,48,3651,63,[0,[[3651,48,3651,55,[2,[],"TypeVar"]],[3651,56,3651,63,[2,[],"Nothing"]]]]],[3651,67,3651,124,[1,"++",1,[3651,67,3651,80,[2,[],"typeVarPrefix"]],[3651,84,3651,124,[1,"++",1,[3651,84,3651,119,[5,"record access inferred field for "]],[3651,123,3651,124,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]]]],[[3655,17,3655,27,[12,[[],"Operator"],[[3655,26,3655,27,[0]]]]],[3656,21,3656,28,[2,[],"Nothing"]]],[[3658,17,3658,47,[12,[[],"OperatorApplication"],[[3658,37,3658,39,[11,"op"]],[3658,40,3658,41,[0]],[3658,42,3658,44,[11,"e1"]],[3658,45,3658,47,[11,"e2"]]]]],[3660,21,3661,45,[1,"|>",0,[3660,21,3660,84,[0,[[3660,21,3660,45,[2,[],"checkOperatorApplication"]],[3660,46,3660,75,[7,[3660,47,3660,74,[0,[[3660,47,3660,68,[2,[],"inferApplicationChain"]],[3660,69,3660,74,[2,[],"local"]]]]]]],[3660,76,3660,78,[2,[],"op"]],[3660,79,3660,81,[2,[],"e1"]],[3660,82,3660,84,[2,[],"e2"]]]]],[3661,28,3661,45,[0,[[3661,28,3661,37,[2,["Maybe"],"map"]],[3661,38,3661,45,[2,[],"getType"]]]]]]]],[[3663,17,3663,59,[12,[[],"LetExpression"],[[3663,31,3663,59,[8,[[3663,33,3663,45,"declarations"],[3663,47,3663,57,"expression"]]]]]]],[3664,21,3672,45,[16,[[[3665,25,3668,49,[0,[[0],[1,[3665,25,3665,55,[[3665,25,3665,36,"newBindings"],[3665,39,3665,55,[1,[3665,39,3665,43,[[],"Dict"]],[[3665,44,3665,50,[1,[3665,44,3665,50,[[],"String"]],[]]],[3665,51,3665,55,[1,[3665,51,3665,55,[[],"Type"]],[]]]]]]]]],[3666,25,3668,49,[[3666,25,3666,36,"newBindings"],[],[3667,29,3668,49,[1,"|>",0,[3667,29,3667,105,[0,[[3667,29,3667,43,[2,["List"],"concatMap"]],[3667,44,3667,92,[7,[3667,45,3667,91,[1,"<<",0,[3667,45,3667,77,[0,[[3667,45,3667,71,[2,[],"bindingsFromLetDeclaration"]],[3667,72,3667,77,[2,[],"local"]]]]],[3667,81,3667,91,[2,["Node"],"value"]]]]]],[3667,93,3667,105,[2,[],"declarations"]]]]],[3668,36,3668,49,[2,["Dict"],"fromList"]]]]]]]]]],[3670,21,3672,45,[1,"|>",0,[3670,21,3671,68,[1,"|>",0,[3670,21,3670,118,[0,[[3670,21,3670,34,[2,[],"inferExprType"]],[3670,35,3670,107,[21,[3670,37,3670,42,"local"],[[3670,45,3670,106,[[3670,45,3670,59,"localFunctions"],[3670,62,3670,105,[0,[[3670,62,3670,72,[2,["Dict"],"union"]],[3670,73,3670,93,[19,[3670,73,3670,78,[2,[],"local"]],[3670,79,3670,93,"localFunctions"]]],[3670,94,3670,105,[2,[],"newBindings"]]]]]]]]]],[3670,108,3670,118,[2,[],"expression"]]]]],[3671,28,3671,68,[0,[[3671,28,3671,37,[2,["Maybe"],"map"]],[3671,38,3671,68,[7,[3671,39,3671,67,[0,[[3671,39,3671,53,[2,[],"prefixTypeVars"]],[3671,54,3671,67,[2,[],"typeVarPrefix"]]]]]]]]]]]],[3672,28,3672,45,[0,[[3672,28,3672,37,[2,["Maybe"],"map"]],[3672,38,3672,45,[2,[],"getType"]]]]]]]]]]],[[3674,17,3674,46,[12,[[],"RecordUpdateExpression"],[[3674,40,3674,43,[11,"var"]],[3674,44,3674,46,[11,"fs"]]]]],[3675,21,3688,30,[1,"|>",0,[3675,21,3676,50,[1,"|>",0,[3675,21,3675,72,[0,[[3675,21,3675,37,[2,[],"findFunctionType"]],[3675,38,3675,43,[2,[],"local"]],[3675,44,3675,51,[2,[],"Nothing"]],[3675,52,3675,55,[2,[],"var"]],[3675,56,3675,72,[7,[3675,57,3675,71,[0,[[3675,57,3675,67,[2,["Node"],"value"]],[3675,68,3675,71,[2,[],"var"]]]]]]]]]],[3676,28,3676,50,[0,[[3676,28,3676,36,[2,[],"makeFunc"]],[3676,37,3676,50,[2,[],"typeVarPrefix"]]]]]]],[3677,28,3688,30,[0,[[3677,28,3677,45,[2,["MaybeX"],"orElseLazy"]],[3678,29,3688,30,[7,[3678,30,3687,42,[18,[[[3678,31,3678,33,[1]]],[3679,33,3687,42,[1,"|>",0,[3679,33,3679,186,[0,[[3679,33,3679,48,[2,["MaybeX"],"traverse"]],[3679,49,3679,183,[7,[3679,50,3679,182,[1,"<<",0,[3679,50,3679,168,[7,[3679,51,3679,167,[18,[[[3679,52,3679,60,[7,[[3679,54,3679,55,[11,"f"]],[3679,57,3679,58,[11,"e"]]]]]],[3679,64,3679,167,[1,"|>",0,[3679,64,3679,126,[0,[[3679,64,3679,66,[2,[],"go"]],[3679,67,3679,124,[7,[3679,68,3679,123,[1,"++",1,[3679,68,3679,81,[2,[],"typeVarPrefix"]],[3679,85,3679,123,[1,"++",1,[3679,85,3679,107,[5,"Record Update Field "]],[3679,111,3679,123,[0,[[3679,111,3679,121,[2,["Node"],"value"]],[3679,122,3679,123,[2,[],"f"]]]]]]]]]]],[3679,125,3679,126,[2,[],"e"]]]]],[3679,130,3679,167,[0,[[3679,130,3679,139,[2,["Maybe"],"map"]],[3679,140,3679,167,[7,[3679,141,3679,166,[0,[[3679,141,3679,151,[2,["Tuple"],"pair"]],[3679,152,3679,166,[7,[3679,153,3679,165,[0,[[3679,153,3679,163,[2,["Node"],"value"]],[3679,164,3679,165,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]],[3679,172,3679,182,[2,["Node"],"value"]]]]]],[3679,184,3679,186,[2,[],"fs"]]]]],[3680,40,3687,42,[0,[[3680,40,3680,49,[2,["Maybe"],"map"]],[3681,41,3687,42,[7,[3681,42,3686,50,[18,[[[3681,43,3681,49,[11,"fields"]]],[3682,45,3686,50,[0,[[3682,45,3682,55,[2,[],"RecordType"]],[3683,49,3686,50,[8,[[3683,51,3683,130,[[3683,51,3683,58,"generic"],[3683,61,3683,130,[1,"<|",1,[3683,61,3683,65,[2,[],"Just"]],[3683,69,3683,130,[1,"<|",1,[3683,69,3683,84,[0,[[3683,69,3683,76,[2,[],"TypeVar"]],[3683,77,3683,84,[2,[],"Nothing"]]]]],[3683,88,3683,130,[1,"++",1,[3683,88,3683,101,[2,[],"typeVarPrefix"]],[3683,105,3683,130,[5,"inferred update generic"]]]]]]]]]],[3684,51,3685,49,[[3684,51,3684,60,"canonical"],[3684,63,3684,68,[2,[],"False"]]]],[3685,51,3686,49,[[3685,51,3685,57,"fields"],[3685,60,3685,66,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3690,5,3691,38,[1,">>",1,[3690,5,3690,10,[0,[[3690,5,3690,7,[2,[],"go"]],[3690,8,3690,10,[5,""]]]]],[3691,12,3691,38,[0,[[3691,12,3691,21,[2,["Maybe"],"map"]],[3691,22,3691,38,[2,[],"DereferencedType"]]]]]]]]]]]]]]],[3694,1,3759,58,[0,[[1,[3694,1,3695,3,"{-| Infer type for a chain of expressions being applied to the first one.\n-}"]],[1,[3696,1,3696,89,[[3696,1,3696,22,"inferApplicationChain"],[3696,25,3696,89,[6,[3696,25,3696,37,[1,[3696,25,3696,37,[[],"LocalContext"]],[]]],[3696,41,3696,89,[6,[3696,41,3696,63,[1,[3696,41,3696,45,[[],"List"]],[[3696,46,3696,63,[1,[3696,47,3696,51,[[],"Node"]],[[3696,52,3696,62,[1,[3696,52,3696,62,[[],"Expression"]],[]]]]]]]]],[3696,67,3696,89,[1,[3696,67,3696,72,[[],"Maybe"]],[[3696,73,3696,89,[1,[3696,73,3696,89,[[],"DereferencedType"]],[]]]]]]]]]]]]],[3697,1,3759,58,[[3697,1,3697,22,"inferApplicationChain"],[[3697,23,3697,28,[11,"local"]],[3697,29,3697,31,[11,"es"]]],[3698,5,3759,58,[16,[[[3699,9,3701,32,[0,[[0],[1,[3699,9,3699,62,[[3699,9,3699,18,"inferExpr"],[3699,21,3699,62,[6,[3699,21,3699,36,[1,[3699,21,3699,25,[[],"Node"]],[[3699,26,3699,36,[1,[3699,26,3699,36,[[],"Expression"]],[]]]]]],[3699,40,3699,62,[1,[3699,40,3699,45,[[],"Maybe"]],[[3699,46,3699,62,[1,[3699,46,3699,62,[[],"DereferencedType"]],[]]]]]]]]]]],[3700,9,3701,32,[[3700,9,3700,18,"inferExpr"],[],[3701,13,3701,32,[0,[[3701,13,3701,26,[2,[],"inferExprType"]],[3701,27,3701,32,[2,[],"local"]]]]]]]]]],[3703,9,3716,69,[0,[[0],[1,[3703,9,3703,114,[[3703,9,3703,22,"getReturnType"],[3703,25,3703,114,[6,[3703,25,3703,47,[1,[3703,25,3703,29,[[],"List"]],[[3703,30,3703,47,[1,[3703,31,3703,35,[[],"Node"]],[[3703,36,3703,46,[1,[3703,36,3703,46,[[],"Expression"]],[]]]]]]]]],[3703,51,3703,114,[6,[3703,51,3703,94,[3,[[3703,53,3703,74,[1,[3703,53,3703,57,[[],"List"]],[[3703,58,3703,74,[1,[3703,58,3703,74,[[],"DereferencedType"]],[]]]]]],[3703,76,3703,92,[1,[3703,76,3703,92,[[],"DereferencedType"]],[]]]]]],[3703,98,3703,114,[1,[3703,98,3703,114,[[],"DereferencedType"]],[]]]]]]]]]],[3704,9,3716,69,[[3704,9,3704,22,"getReturnType"],[[3704,23,3704,27,[11,"args"]],[3704,28,3704,52,[7,[[3704,30,3704,38,[11,"argTypes"]],[3704,40,3704,50,[11,"returnType"]]]]]],[3705,13,3716,69,[1,"|>",0,[3705,13,3715,46,[1,"|>",0,[3705,13,3714,55,[1,"|>",0,[3705,13,3713,31,[1,"|>",0,[3705,13,3706,38,[1,"|>",0,[3705,13,3705,36,[0,[[3705,13,3705,21,[2,["List"],"map"]],[3705,22,3705,31,[2,[],"inferExpr"]],[3705,32,3705,36,[2,[],"args"]]]]],[3706,20,3706,38,[0,[[3706,20,3706,29,[2,["ListX"],"zip"]],[3706,30,3706,38,[2,[],"argTypes"]]]]]]],[3707,20,3713,31,[0,[[3707,20,3707,30,[2,["List"],"foldl"]],[3708,21,3712,22,[7,[3708,22,3711,58,[18,[[[3708,23,3708,33,[7,[[3708,25,3708,27,[11,"t1"]],[3708,29,3708,31,[11,"t2"]]]]],[3708,34,3708,42,[11,"typeVars"]]],[3709,25,3711,58,[1,"|>",0,[3709,25,3710,53,[1,"|>",0,[3709,25,3709,62,[0,[[3709,25,3709,34,[2,["Maybe"],"map"]],[3709,35,3709,59,[7,[3709,36,3709,58,[0,[[3709,36,3709,46,[2,[],"typesMatch"]],[3709,47,3709,55,[2,[],"typeVars"]],[3709,56,3709,58,[2,[],"t1"]]]]]]],[3709,60,3709,62,[2,[],"t2"]]]]],[3710,32,3710,53,[0,[[3710,32,3710,41,[2,["Maybe"],"map"]],[3710,42,3710,53,[2,["Tuple"],"first"]]]]]]],[3711,32,3711,58,[0,[[3711,32,3711,49,[2,["Maybe"],"withDefault"]],[3711,50,3711,58,[2,[],"typeVars"]]]]]]]]]]]],[3713,21,3713,31,[2,["Dict"],"empty"]]]]]]],[3714,20,3714,55,[0,[[3714,20,3714,31,[2,["Dict"],"filter"]],[3714,32,3714,55,[7,[3714,33,3714,54,[18,[[[3714,34,3714,42,[7,[[3714,36,3714,37,[11,"i"]],[3714,39,3714,40,[0]]]]],[3714,43,3714,44,[0]]],[3714,48,3714,54,[1,"==",2,[3714,48,3714,49,[2,[],"i"]],[3714,53,3714,54,[3,1]]]]]]]]]]]]]],[3715,20,3715,46,[0,[[3715,20,3715,33,[2,["DictX"],"mapKeys"]],[3715,34,3715,46,[2,["Tuple"],"second"]]]]]]],[3716,20,3716,69,[7,[3716,21,3716,68,[18,[[[3716,22,3716,30,[11,"typeVars"]]],[3716,34,3716,68,[0,[[3716,34,3716,48,[2,[],"assignTypeVars"]],[3716,49,3716,57,[2,[],"typeVars"]],[3716,58,3716,68,[2,[],"returnType"]]]]]]]]]]]]]]]]]],[3718,5,3759,58,[17,[[3718,10,3718,12,[2,[],"es"]],[[[3719,9,3719,11,[10,[]]],[3720,13,3720,20,[2,[],"Nothing"]]],[[3722,9,3722,14,[10,[[3722,11,3722,12,[11,"e"]]]]],[3723,13,3723,24,[0,[[3723,13,3723,22,[2,[],"inferExpr"]],[3723,23,3723,24,[2,[],"e"]]]]]],[[3725,9,3725,21,[9,[3725,9,3725,13,[11,"func"]],[3725,17,3725,21,[11,"args"]]]],[3726,13,3759,58,[17,[[3726,18,3726,33,[0,[[3726,18,3726,28,[2,["Node"],"value"]],[3726,29,3726,33,[2,[],"func"]]]]],[[[3727,17,3727,39,[12,[[],"FunctionOrValue"],[[3727,33,3727,34,[0]],[3727,35,3727,39,[11,"name"]]]]],[3728,21,3732,58,[1,"|>",0,[3728,21,3730,75,[1,"|>",0,[3728,21,3729,102,[1,"|>",0,[3728,21,3728,61,[0,[[3728,21,3728,37,[2,[],"findFunctionType"]],[3728,38,3728,43,[2,[],"local"]],[3728,44,3728,51,[2,[],"Nothing"]],[3728,52,3728,56,[2,[],"func"]],[3728,57,3728,61,[2,[],"name"]]]]],[3729,28,3729,102,[0,[[3729,28,3729,45,[2,["MaybeX"],"orElseLazy"]],[3729,46,3729,102,[7,[3729,47,3729,101,[18,[[[3729,48,3729,50,[1]]],[3729,54,3729,101,[1,"<|",1,[3729,54,3729,83,[0,[[3729,54,3729,63,[2,["Maybe"],"map"]],[3729,64,3729,83,[2,[],"flattenFunctionType"]]]]],[3729,87,3729,101,[0,[[3729,87,3729,96,[2,[],"inferExpr"]],[3729,97,3729,101,[2,[],"func"]]]]]]]]]]]]]]]]],[3730,28,3730,75,[0,[[3730,28,3730,41,[2,["Maybe"],"andThen"]],[3730,42,3730,75,[7,[3730,43,3730,74,[0,[[3730,43,3730,69,[2,[],"partiallyApplyArgsAndTypes"]],[3730,70,3730,74,[2,[],"args"]]]]]]]]]]]],[3732,28,3732,58,[0,[[3732,28,3732,37,[2,["Maybe"],"map"]],[3732,38,3732,58,[7,[3732,39,3732,57,[0,[[3732,39,3732,52,[2,[],"getReturnType"]],[3732,53,3732,57,[2,[],"args"]]]]]]]]]]]]],[[3734,17,3734,34,[12,[[],"PrefixOperator"],[[3734,32,3734,34,[11,"op"]]]]],[3735,21,3738,58,[1,"|>",0,[3735,21,3737,75,[1,"|>",0,[3735,21,3735,54,[0,[[3735,21,3735,37,[2,[],"findOperatorType"]],[3735,38,3735,51,[19,[3735,38,3735,43,[2,[],"local"]],[3735,44,3735,51,"context"]]],[3735,52,3735,54,[2,[],"op"]]]]],[3737,28,3737,75,[0,[[3737,28,3737,41,[2,["Maybe"],"andThen"]],[3737,42,3737,75,[7,[3737,43,3737,74,[0,[[3737,43,3737,69,[2,[],"partiallyApplyArgsAndTypes"]],[3737,70,3737,74,[2,[],"args"]]]]]]]]]]]],[3738,28,3738,58,[0,[[3738,28,3738,37,[2,["Maybe"],"map"]],[3738,38,3738,58,[7,[3738,39,3738,57,[0,[[3738,39,3738,52,[2,[],"getReturnType"]],[3738,53,3738,57,[2,[],"args"]]]]]]]]]]]]],[[3740,17,3740,46,[12,[[],"ParenthesizedExpression"],[[3740,41,3740,46,[11,"func_"]]]]],[3742,21,3742,64,[0,[[3742,21,3742,42,[2,[],"inferApplicationChain"]],[3742,43,3742,48,[2,[],"local"]],[3742,49,3742,64,[7,[3742,50,3742,63,[1,"::",1,[3742,50,3742,55,[2,[],"func_"]],[3742,59,3742,63,[2,[],"args"]]]]]]]]]],[[3744,17,3744,48,[12,[[],"RecordAccessFunction"],[[3744,38,3744,48,[11,"accessFunc"]]]]],[3746,21,3752,29,[1,"|>",0,[3746,21,3748,47,[1,"|>",0,[3746,21,3747,51,[1,"|>",0,[3746,21,3746,35,[0,[[3746,21,3746,30,[2,["List"],"head"]],[3746,31,3746,35,[2,[],"args"]]]]],[3747,28,3747,51,[0,[[3747,28,3747,41,[2,["Maybe"],"andThen"]],[3747,42,3747,51,[2,[],"inferExpr"]]]]]]],[3748,28,3748,47,[2,[],"getRecordFieldTypes"]]]],[3749,28,3752,29,[7,[3749,29,3751,61,[18,[[[3749,30,3749,32,[11,"ts"]]],[3750,33,3751,61,[1,"|>",0,[3750,33,3750,58,[0,[[3750,33,3750,47,[2,[],"makeAccessFunc"]],[3750,48,3750,58,[2,[],"accessFunc"]]]]],[3751,40,3751,61,[7,[3751,41,3751,60,[18,[[[3751,42,3751,43,[11,"f"]]],[3751,47,3751,60,[0,[[3751,47,3751,55,[2,["Dict"],"get"]],[3751,56,3751,57,[2,[],"f"]],[3751,58,3751,60,[2,[],"ts"]]]]]]]]]]]]]]]]]]]],[[3754,17,3754,18,[0]],[3756,21,3759,58,[1,"|>",0,[3756,21,3758,75,[1,"|>",0,[3756,21,3757,57,[1,"|>",0,[3756,21,3756,35,[0,[[3756,21,3756,30,[2,[],"inferExpr"]],[3756,31,3756,35,[2,[],"func"]]]]],[3757,28,3757,57,[0,[[3757,28,3757,37,[2,["Maybe"],"map"]],[3757,38,3757,57,[2,[],"flattenFunctionType"]]]]]]],[3758,28,3758,75,[0,[[3758,28,3758,41,[2,["Maybe"],"andThen"]],[3758,42,3758,75,[7,[3758,43,3758,74,[0,[[3758,43,3758,69,[2,[],"partiallyApplyArgsAndTypes"]],[3758,70,3758,74,[2,[],"args"]]]]]]]]]]]],[3759,28,3759,58,[0,[[3759,28,3759,37,[2,["Maybe"],"map"]],[3759,38,3759,58,[7,[3759,39,3759,57,[0,[[3759,39,3759,52,[2,[],"getReturnType"]],[3759,53,3759,57,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3762,1,3789,13,[0,[[1,[3762,1,3763,3,"{-| Given a list of types, try to reduce them to a single type.\n-}"]],[1,[3764,1,3764,37,[[3764,1,3764,11,"unifyTypes"],[3764,14,3764,37,[6,[3764,14,3764,23,[1,[3764,14,3764,18,[[],"List"]],[[3764,19,3764,23,[1,[3764,19,3764,23,[[],"Type"]],[]]]]]],[3764,27,3764,37,[1,[3764,27,3764,32,[[],"Maybe"]],[[3764,33,3764,37,[1,[3764,33,3764,37,[[],"Type"]],[]]]]]]]]]]],[3765,1,3789,13,[[3765,1,3765,11,"unifyTypes"],[],[3766,5,3789,13,[1,">>",1,[3766,5,3775,11,[0,[[3766,5,3766,15,[2,["List"],"foldl"]],[3767,9,3774,10,[7,[3767,10,3773,25,[18,[[[3767,11,3767,12,[11,"t"]],[3767,13,3767,16,[11,"acc"]]],[3769,13,3773,25,[11,[3769,16,3769,33,[0,[[3769,16,3769,27,[2,["List"],"member"]],[3769,28,3769,29,[2,[],"t"]],[3769,30,3769,33,[2,[],"acc"]]]]],[3770,17,3770,20,[2,[],"acc"]],[3773,17,3773,25,[1,"::",1,[3773,17,3773,18,[2,[],"t"]],[3773,22,3773,25,[2,[],"acc"]]]]]]]]]]],[3775,9,3775,11,[9,[]]]]]],[3776,12,3789,13,[7,[3776,13,3788,98,[18,[[[3776,14,3776,16,[11,"ts"]]],[3777,17,3788,98,[17,[[3777,22,3777,99,[6,[[3777,24,3777,26,[2,[],"ts"]],[3777,28,3777,97,[0,[[3777,28,3777,39,[2,["List"],"filter"]],[3777,40,3777,94,[7,[3777,41,3777,93,[0,[[3777,41,3777,45,[12,"/="]],[3777,46,3777,93,[7,[3777,47,3777,92,[0,[[3777,47,3777,54,[2,[],"TypeVar"]],[3777,55,3777,62,[2,[],"Nothing"]],[3777,63,3777,92,[5,"inferred empty list typevar"]]]]]]]]]]]],[3777,95,3777,97,[2,[],"ts"]]]]]]]],[[[3778,21,3778,33,[7,[[3778,23,3778,28,[10,[[3778,25,3778,26,[11,"t"]]]]],[3778,30,3778,31,[0]]]]],[3779,25,3779,31,[0,[[3779,25,3779,29,[2,[],"Just"]],[3779,30,3779,31,[2,[],"t"]]]]]],[[3781,21,3781,30,[7,[[3781,23,3781,24,[0]],[3781,26,3781,28,[10,[]]]]]],[3782,25,3782,32,[2,[],"Nothing"]]],[[3784,21,3784,33,[7,[[3784,23,3784,24,[0]],[3784,26,3784,31,[10,[[3784,28,3784,29,[11,"t"]]]]]]]],[3785,25,3785,31,[0,[[3785,25,3785,29,[2,[],"Just"]],[3785,30,3785,31,[2,[],"t"]]]]]],[[3787,21,3787,36,[7,[[3787,23,3787,24,[0]],[3787,26,3787,34,[9,[3787,26,3787,27,[11,"t"]],[3787,31,3787,34,[11,"ts_"]]]]]]],[3788,25,3788,98,[0,[[3788,25,3788,35,[2,["List"],"foldl"]],[3788,36,3788,85,[7,[3788,37,3788,84,[18,[[[3788,38,3788,40,[11,"t_"]],[3788,41,3788,44,[11,"acc"]]],[3788,48,3788,84,[0,[[3788,48,3788,61,[2,["Maybe"],"andThen"]],[3788,62,3788,80,[7,[3788,63,3788,79,[0,[[3788,63,3788,76,[2,[],"unifyTwoTypes"]],[3788,77,3788,79,[2,[],"t_"]]]]]]],[3788,81,3788,84,[2,[],"acc"]]]]]]]]]],[3788,86,3788,94,[7,[3788,87,3788,93,[0,[[3788,87,3788,91,[2,[],"Just"]],[3788,92,3788,93,[2,[],"t"]]]]]]],[3788,95,3788,98,[2,[],"ts_"]]]]]]]]]]]]]]]]]]]]]],[3792,1,3864,20,[0,[[1,[3792,1,3793,3,"{-| Given two types that are not the same, try to find a compatible type.\n-}"]],[1,[3794,1,3794,43,[[3794,1,3794,14,"unifyTwoTypes"],[3794,17,3794,43,[6,[3794,17,3794,21,[1,[3794,17,3794,21,[[],"Type"]],[]]],[3794,25,3794,43,[6,[3794,25,3794,29,[1,[3794,25,3794,29,[[],"Type"]],[]]],[3794,33,3794,43,[1,[3794,33,3794,38,[[],"Maybe"]],[[3794,39,3794,43,[1,[3794,39,3794,43,[[],"Type"]],[]]]]]]]]]]]]],[3795,1,3864,20,[[3795,1,3795,14,"unifyTwoTypes"],[[3795,15,3795,20,[11,"type1"]],[3795,21,3795,26,[11,"type2"]]],[3796,5,3864,20,[17,[[3796,10,3796,26,[6,[[3796,12,3796,17,[2,[],"type1"]],[3796,19,3796,24,[2,[],"type2"]]]]],[[[3797,9,3797,33,[7,[[3797,11,3797,28,[12,[[],"TypeVar"],[[3797,19,3797,26,[12,[[],"Nothing"],[]]],[3797,27,3797,28,[0]]]]],[3797,30,3797,31,[0]]]]],[3798,13,3798,23,[0,[[3798,13,3798,17,[2,[],"Just"]],[3798,18,3798,23,[2,[],"type2"]]]]]],[[3800,9,3800,33,[7,[[3800,11,3800,12,[0]],[3800,14,3800,31,[12,[[],"TypeVar"],[[3800,22,3800,29,[12,[[],"Nothing"],[]]],[3800,30,3800,31,[0]]]]]]]],[3801,13,3801,23,[0,[[3801,13,3801,17,[2,[],"Just"]],[3801,18,3801,23,[2,[],"type1"]]]]]],[[3803,9,3803,35,[7,[[3803,11,3803,30,[12,[[],"TypeVar"],[[3803,19,3803,28,[14,[3803,20,3803,27,[12,[[],"Just"],[[3803,25,3803,27,[11,"tc"]]]]]]],[3803,29,3803,30,[0]]]]],[3803,32,3803,33,[0]]]]],[3804,13,3804,57,[0,[[3804,13,3804,21,[2,[],"validate"]],[3804,22,3804,51,[7,[3804,23,3804,50,[18,[[[3804,24,3804,25,[11,"t"]]],[3804,29,3804,50,[0,[[3804,29,3804,45,[2,[],"matchesTypeClass"]],[3804,46,3804,47,[2,[],"t"]],[3804,48,3804,50,[2,[],"tc"]]]]]]]]]],[3804,52,3804,57,[2,[],"type2"]]]]]],[[3806,9,3806,35,[7,[[3806,11,3806,12,[0]],[3806,14,3806,33,[12,[[],"TypeVar"],[[3806,22,3806,31,[14,[3806,23,3806,30,[12,[[],"Just"],[[3806,28,3806,30,[11,"tc"]]]]]]],[3806,32,3806,33,[0]]]]]]]],[3807,13,3807,57,[0,[[3807,13,3807,21,[2,[],"validate"]],[3807,22,3807,51,[7,[3807,23,3807,50,[18,[[[3807,24,3807,25,[11,"t"]]],[3807,29,3807,50,[0,[[3807,29,3807,45,[2,[],"matchesTypeClass"]],[3807,46,3807,47,[2,[],"t"]],[3807,48,3807,50,[2,[],"tc"]]]]]]]]]],[3807,52,3807,57,[2,[],"type1"]]]]]],[[3809,9,3809,45,[7,[[3809,11,3809,26,[12,[[],"FunctionType"],[[3809,24,3809,26,[11,"f1"]]]]],[3809,28,3809,43,[12,[[],"FunctionType"],[[3809,41,3809,43,[11,"f2"]]]]]]]],[3810,13,3812,46,[0,[[3810,13,3810,23,[2,["Maybe"],"map2"]],[3810,24,3810,75,[7,[3810,25,3810,74,[18,[[[3810,26,3810,30,[11,"from"]],[3810,31,3810,33,[11,"to"]]],[3810,37,3810,74,[0,[[3810,37,3810,49,[2,[],"FunctionType"]],[3810,50,3810,74,[8,[[3810,52,3810,63,[[3810,52,3810,56,"from"],[3810,59,3810,63,[2,[],"from"]]]],[3810,65,3810,73,[[3810,65,3810,67,"to"],[3810,70,3810,72,[2,[],"to"]]]]]]]]]]]]]]],[3811,17,3811,50,[7,[3811,18,3811,49,[0,[[3811,18,3811,28,[2,[],"unifyTypes"]],[3811,29,3811,49,[9,[[3811,31,3811,38,[19,[3811,31,3811,33,[2,[],"f1"]],[3811,34,3811,38,"from"]]],[3811,40,3811,47,[19,[3811,40,3811,42,[2,[],"f2"]],[3811,43,3811,47,"from"]]]]]]]]]]],[3812,17,3812,46,[7,[3812,18,3812,45,[0,[[3812,18,3812,28,[2,[],"unifyTypes"]],[3812,29,3812,45,[9,[[3812,31,3812,36,[19,[3812,31,3812,33,[2,[],"f1"]],[3812,34,3812,36,"to"]]],[3812,38,3812,43,[19,[3812,38,3812,40,[2,[],"f2"]],[3812,41,3812,43,"to"]]]]]]]]]]]]]]],[[3814,9,3814,37,[7,[[3814,11,3814,22,[12,[[],"ListType"],[[3814,20,3814,22,[11,"t1"]]]]],[3814,24,3814,35,[12,[[],"ListType"],[[3814,33,3814,35,[11,"t2"]]]]]]]],[3815,13,3816,38,[1,"|>",0,[3815,13,3815,34,[0,[[3815,13,3815,23,[2,[],"unifyTypes"]],[3815,24,3815,34,[9,[[3815,26,3815,28,[2,[],"t1"]],[3815,30,3815,32,[2,[],"t2"]]]]]]]],[3816,20,3816,38,[0,[[3816,20,3816,29,[2,["Maybe"],"map"]],[3816,30,3816,38,[2,[],"ListType"]]]]]]]],[[3818,9,3818,41,[7,[[3818,11,3818,24,[12,[[],"TupleType"],[[3818,21,3818,24,[11,"t1s"]]]]],[3818,26,3818,39,[12,[[],"TupleType"],[[3818,36,3818,39,[11,"t2s"]]]]]]]],[3819,13,3821,39,[1,"|>",0,[3819,13,3820,74,[1,"|>",0,[3819,13,3819,30,[0,[[3819,13,3819,22,[2,["ListX"],"zip"]],[3819,23,3819,26,[2,[],"t1s"]],[3819,27,3819,30,[2,[],"t2s"]]]]],[3820,20,3820,74,[0,[[3820,20,3820,35,[2,["MaybeX"],"traverse"]],[3820,36,3820,74,[7,[3820,37,3820,73,[18,[[[3820,38,3820,48,[7,[[3820,40,3820,42,[11,"t1"]],[3820,44,3820,46,[11,"t2"]]]]]],[3820,52,3820,73,[0,[[3820,52,3820,62,[2,[],"unifyTypes"]],[3820,63,3820,73,[9,[[3820,65,3820,67,[2,[],"t1"]],[3820,69,3820,71,[2,[],"t2"]]]]]]]]]]]]]]]]]],[3821,20,3821,39,[0,[[3821,20,3821,29,[2,["Maybe"],"map"]],[3821,30,3821,39,[2,[],"TupleType"]]]]]]]],[[3823,9,3823,41,[7,[[3823,11,3823,24,[12,[[],"RecordType"],[[3823,22,3823,24,[11,"r1"]]]]],[3823,26,3823,39,[12,[[],"RecordType"],[[3823,37,3823,39,[11,"r2"]]]]]]]],[3825,13,3859,21,[1,"|>",0,[3825,13,3838,54,[0,[[3825,13,3825,23,[2,["Dict"],"merge"]],[3826,17,3826,72,[7,[3826,18,3826,71,[18,[[[3826,19,3826,20,[11,"f"]],[3826,21,3826,23,[11,"t1"]],[3826,24,3826,27,[11,"acc"]]],[3826,31,3826,71,[21,[3826,33,3826,36,"acc"],[[3826,39,3826,70,[[3826,39,3826,44,"only1"],[3826,47,3826,69,[1,"::",1,[3826,47,3826,56,[6,[[3826,49,3826,50,[2,[],"f"]],[3826,52,3826,54,[2,[],"t1"]]]]],[3826,60,3826,69,[19,[3826,60,3826,63,[2,[],"acc"]],[3826,64,3826,69,"only1"]]]]]]]]]]]]]]],[3827,17,3834,18,[7,[3827,18,3833,22,[18,[[[3827,19,3827,20,[11,"f"]],[3827,21,3827,23,[11,"t1"]],[3827,24,3827,26,[11,"t2"]],[3827,27,3827,30,[11,"acc"]]],[3828,21,3833,22,[21,[3828,23,3828,26,"acc"],[[3829,27,3833,21,[[3829,27,3829,31,"both"],[3830,29,3832,57,[1,"|>",0,[3830,29,3831,60,[1,"|>",0,[3830,29,3830,50,[0,[[3830,29,3830,39,[2,[],"unifyTypes"]],[3830,40,3830,50,[9,[[3830,42,3830,44,[2,[],"t1"]],[3830,46,3830,48,[2,[],"t2"]]]]]]]],[3831,36,3831,60,[0,[[3831,36,3831,45,[2,["Maybe"],"map"]],[3831,46,3831,60,[7,[3831,47,3831,59,[0,[[3831,47,3831,57,[2,["Tuple"],"pair"]],[3831,58,3831,59,[2,[],"f"]]]]]]]]]]]],[3832,36,3832,57,[7,[3832,37,3832,56,[18,[[[3832,38,3832,39,[11,"x"]]],[3832,43,3832,56,[1,"::",1,[3832,43,3832,44,[2,[],"x"]],[3832,48,3832,56,[19,[3832,48,3832,51,[2,[],"acc"]],[3832,52,3832,56,"both"]]]]]]]]]]]]]]]]]]]]]],[3835,17,3835,72,[7,[3835,18,3835,71,[18,[[[3835,19,3835,20,[11,"f"]],[3835,21,3835,23,[11,"t2"]],[3835,24,3835,27,[11,"acc"]]],[3835,31,3835,71,[21,[3835,33,3835,36,"acc"],[[3835,39,3835,70,[[3835,39,3835,44,"only2"],[3835,47,3835,69,[1,"::",1,[3835,47,3835,56,[6,[[3835,49,3835,50,[2,[],"f"]],[3835,52,3835,54,[2,[],"t2"]]]]],[3835,60,3835,69,[19,[3835,60,3835,63,[2,[],"acc"]],[3835,64,3835,69,"only2"]]]]]]]]]]]]]]],[3836,17,3836,42,[7,[3836,18,3836,41,[0,[[3836,18,3836,31,[2,["Dict"],"fromList"]],[3836,32,3836,41,[19,[3836,32,3836,34,[2,[],"r1"]],[3836,35,3836,41,"fields"]]]]]]]],[3837,17,3837,42,[7,[3837,18,3837,41,[0,[[3837,18,3837,31,[2,["Dict"],"fromList"]],[3837,32,3837,41,[19,[3837,32,3837,34,[2,[],"r2"]],[3837,35,3837,41,"fields"]]]]]]]],[3838,17,3838,54,[8,[[3838,19,3838,29,[[3838,19,3838,24,"only1"],[3838,27,3838,29,[9,[]]]]],[3838,31,3838,40,[[3838,31,3838,35,"both"],[3838,38,3838,40,[9,[]]]]],[3838,42,3838,53,[[3838,42,3838,47,"only2"],[3838,50,3838,52,[9,[]]]]]]]]]]],[3839,20,3859,21,[7,[3839,21,3858,34,[18,[[[3839,22,3839,44,[8,[[3839,24,3839,29,"only1"],[3839,31,3839,35,"both"],[3839,37,3839,42,"only2"]]]]],[3840,25,3858,34,[1,"|>",0,[3840,25,3840,44,[0,[[3840,25,3840,39,[2,["MaybeX"],"combine"]],[3840,40,3840,44,[2,[],"both"]]]]],[3841,32,3858,34,[0,[[3841,32,3841,45,[2,["Maybe"],"andThen"]],[3842,33,3858,34,[7,[3842,34,3857,52,[18,[[[3842,35,3842,40,[11,"both_"]]],[3843,37,3857,52,[17,[[3843,42,3843,90,[6,[[3843,44,3843,65,[6,[[3843,46,3843,56,[19,[3843,46,3843,48,[2,[],"r1"]],[3843,49,3843,56,"generic"]]],[3843,58,3843,63,[2,[],"only2"]]]]],[3843,67,3843,88,[6,[[3843,69,3843,79,[19,[3843,69,3843,71,[2,[],"r2"]],[3843,72,3843,79,"generic"]]],[3843,81,3843,86,[2,[],"only1"]]]]]]]],[[[3844,41,3844,97,[7,[[3844,43,3844,68,[7,[[3844,45,3844,63,[12,[[],"Just"],[[3844,50,3844,63,[14,[3844,51,3844,62,[12,[[],"TypeVar"],[[3844,59,3844,60,[0]],[3844,61,3844,62,[0]]]]]]]]]],[3844,65,3844,66,[0]]]]],[3844,70,3844,95,[7,[[3844,72,3844,90,[12,[[],"Just"],[[3844,77,3844,90,[14,[3844,78,3844,89,[12,[[],"TypeVar"],[[3844,86,3844,87,[0]],[3844,88,3844,89,[0]]]]]]]]]],[3844,92,3844,93,[0]]]]]]]],[3845,45,3845,105,[1,"<|",1,[3845,45,3845,49,[2,[],"Just"]],[3845,53,3845,105,[0,[[3845,53,3845,63,[2,[],"RecordType"]],[3845,64,3845,105,[21,[3845,66,3845,68,"r1"],[[3845,71,3845,104,[[3845,71,3845,77,"fields"],[3845,80,3845,103,[1,"++",1,[3845,80,3845,85,[2,[],"only1"]],[3845,89,3845,103,[1,"++",1,[3845,89,3845,94,[2,[],"both_"]],[3845,98,3845,103,[2,[],"only2"]]]]]]]]]]]]]]]]],[[3847,41,3847,77,[7,[[3847,43,3847,58,[7,[[3847,45,3847,52,[12,[[],"Nothing"],[]]],[3847,54,3847,56,[10,[]]]]]],[3847,60,3847,75,[7,[[3847,62,3847,69,[12,[[],"Nothing"],[]]],[3847,71,3847,73,[10,[]]]]]]]]],[3848,45,3848,87,[1,"<|",1,[3848,45,3848,49,[2,[],"Just"]],[3848,53,3848,87,[0,[[3848,53,3848,63,[2,[],"RecordType"]],[3848,64,3848,87,[21,[3848,66,3848,68,"r1"],[[3848,71,3848,86,[[3848,71,3848,77,"fields"],[3848,80,3848,85,[2,[],"both_"]]]]]]]]]]]]],[[3850,41,3850,87,[7,[[3850,43,3850,68,[7,[[3850,45,3850,63,[12,[[],"Just"],[[3850,50,3850,63,[14,[3850,51,3850,62,[12,[[],"TypeVar"],[[3850,59,3850,60,[0]],[3850,61,3850,62,[0]]]]]]]]]],[3850,65,3850,66,[0]]]]],[3850,70,3850,85,[7,[[3850,72,3850,79,[12,[[],"Nothing"],[]]],[3850,81,3850,83,[10,[]]]]]]]]],[3851,45,3851,96,[1,"<|",1,[3851,45,3851,49,[2,[],"Just"]],[3851,53,3851,96,[0,[[3851,53,3851,63,[2,[],"RecordType"]],[3851,64,3851,96,[21,[3851,66,3851,68,"r1"],[[3851,71,3851,95,[[3851,71,3851,77,"fields"],[3851,80,3851,94,[1,"++",1,[3851,80,3851,85,[2,[],"both_"]],[3851,89,3851,94,[2,[],"only2"]]]]]]]]]]]]]]],[[3853,41,3853,87,[7,[[3853,43,3853,58,[7,[[3853,45,3853,52,[12,[[],"Nothing"],[]]],[3853,54,3853,56,[10,[]]]]]],[3853,60,3853,85,[7,[[3853,62,3853,80,[12,[[],"Just"],[[3853,67,3853,80,[14,[3853,68,3853,79,[12,[[],"TypeVar"],[[3853,76,3853,77,[0]],[3853,78,3853,79,[0]]]]]]]]]],[3853,82,3853,83,[0]]]]]]]],[3854,45,3854,96,[1,"<|",1,[3854,45,3854,49,[2,[],"Just"]],[3854,53,3854,96,[0,[[3854,53,3854,63,[2,[],"RecordType"]],[3854,64,3854,96,[21,[3854,66,3854,68,"r1"],[[3854,71,3854,95,[[3854,71,3854,77,"fields"],[3854,80,3854,94,[1,"++",1,[3854,80,3854,85,[2,[],"both_"]],[3854,89,3854,94,[2,[],"only1"]]]]]]]]]]]]]]],[[3856,41,3856,42,[0]],[3857,45,3857,52,[2,[],"Nothing"]]]]]]]]]]]]]]]]]]]]]]]]],[[3861,9,3861,10,[0]],[3864,13,3864,20,[2,[],"Nothing"]]]]]]]]]]]],[3867,1,3885,15,[0,[[1,[3867,1,3868,3,"{-| Report that an unknown record was encountered without fixes.\n-}"]],[1,[3869,1,3869,63,[[3869,1,3869,19,"unknownRecordError"],[3869,22,3869,63,[6,[3869,22,3869,35,[1,[3869,22,3869,35,[[],"RecordToCheck"]],[]]],[3869,39,3869,63,[6,[3869,39,3869,44,[1,[3869,39,3869,44,[[],"Range"]],[]]],[3869,48,3869,63,[1,[3869,48,3869,52,[[],"List"]],[[3869,53,3869,63,[1,[3869,54,3869,59,[[],"Error"]],[[3869,60,3869,62,[4,[]]]]]]]]]]]]]]]],[3870,1,3885,15,[[3870,1,3870,19,"unknownRecordError"],[[3870,20,3870,30,[8,[[3870,22,3870,28,"fields"]]]],[3870,31,3870,36,[11,"range"]]],[3871,5,3885,15,[17,[[3871,10,3871,16,[2,[],"fields"]],[[[3872,9,3872,20,[9,[3872,9,3872,10,[0]],[3872,14,3872,20,[9,[3872,14,3872,15,[0]],[3872,19,3872,20,[0]]]]]],[3873,13,3881,14,[9,[[3873,15,3880,22,[0,[[3873,15,3873,25,[2,["Rule"],"error"]],[3874,17,3879,18,[8,[[3874,19,3874,58,[[3874,19,3874,26,"message"],[3874,29,3874,58,[5,"Unknown record encountered."]]]],[3875,19,3879,17,[[3875,19,3875,26,"details"],[3876,21,3878,22,[9,[[3876,23,3876,173,[5,"This record did not correspond with any known alias or custom type argument record, so whether or not its fields are sorted could not be determined!"]],[3877,23,3877,137,[5,"Create a type alias for this record type, or remove reportUnknownRecordsWithoutFix from your rule configuration."]]]]]]]]]],[3880,17,3880,22,[2,[],"range"]]]]]]]]],[[3883,9,3883,10,[0]],[3885,13,3885,15,[9,[]]]]]]]]]]]]],[3888,1,3921,15,[0,[[1,[3888,1,3890,3,"{-| Report that an ambiguous record was encountered, along with a list of\nmatching type aliases.\n-}"]],[1,[3891,1,3891,87,[[3891,1,3891,21,"ambiguousRecordError"],[3891,24,3891,87,[6,[3891,24,3891,37,[1,[3891,24,3891,37,[[],"RecordToCheck"]],[]]],[3891,41,3891,87,[6,[3891,41,3891,59,[1,[3891,41,3891,45,[[],"List"]],[[3891,46,3891,59,[1,[3891,47,3891,51,[[],"List"]],[[3891,52,3891,58,[1,[3891,52,3891,58,[[],"String"]],[]]]]]]]]],[3891,63,3891,87,[6,[3891,63,3891,68,[1,[3891,63,3891,68,[[],"Range"]],[]]],[3891,72,3891,87,[1,[3891,72,3891,76,[[],"List"]],[[3891,77,3891,87,[1,[3891,78,3891,83,[[],"Error"]],[[3891,84,3891,86,[4,[]]]]]]]]]]]]]]]]]],[3892,1,3921,15,[[3892,1,3892,21,"ambiguousRecordError"],[[3892,22,3892,32,[8,[[3892,24,3892,30,"fields"]]]],[3892,33,3892,41,[11,"matching"]],[3892,42,3892,47,[11,"range"]]],[3893,5,3921,15,[16,[[[3894,9,3904,57,[0,[[0],[1,[3894,9,3894,46,[[3894,9,3894,22,"prettyGeneric"],[3894,25,3894,46,[6,[3894,25,3894,36,[1,[3894,25,3894,29,[[],"List"]],[[3894,30,3894,36,[1,[3894,30,3894,36,[[],"String"]],[]]]]]],[3894,40,3894,46,[1,[3894,40,3894,46,[[],"String"]],[]]]]]]]],[3895,9,3904,57,[[3895,9,3895,22,"prettyGeneric"],[[3895,23,3895,24,[11,"s"]]],[3896,13,3904,57,[17,[[3896,18,3896,19,[2,[],"s"]],[[[3897,17,3897,19,[10,[]]],[3898,21,3898,23,[5,""]]],[[3900,17,3900,22,[10,[[3900,19,3900,20,[11,"x"]]]]],[3901,21,3901,22,[2,[],"x"]]],[[3903,17,3903,24,[9,[3903,17,3903,18,[11,"x"]],[3903,22,3903,24,[11,"xs"]]]],[3904,21,3904,57,[1,"++",1,[3904,21,3904,22,[2,[],"x"]],[3904,26,3904,57,[1,"++",1,[3904,26,3904,30,[5," ("]],[3904,34,3904,57,[1,"++",1,[3904,34,3904,50,[0,[[3904,34,3904,47,[2,[],"prettyGeneric"]],[3904,48,3904,50,[2,[],"xs"]]]]],[3904,54,3904,57,[5,")"]]]]]]]]]]]]]]]]]]],[3906,5,3921,15,[17,[[3906,10,3906,16,[2,[],"fields"]],[[[3907,9,3907,20,[9,[3907,9,3907,10,[0]],[3907,14,3907,20,[9,[3907,14,3907,15,[0]],[3907,19,3907,20,[0]]]]]],[3908,13,3917,14,[9,[[3908,15,3916,22,[0,[[3908,15,3908,25,[2,["Rule"],"error"]],[3909,17,3915,18,[8,[[3909,19,3909,60,[[3909,19,3909,26,"message"],[3909,29,3909,60,[5,"Ambiguous record encountered."]]]],[3910,19,3915,17,[[3910,19,3910,26,"details"],[3911,21,3914,22,[9,[[3911,23,3911,150,[5,"This record could be one of several possible record aliases, so whether or not its fields are sorted could not be determined!"]],[3912,23,3912,127,[5,"Try adding a type annotation, or remove reportAmbiguousRecordsWithoutFix from your rule configuration."]],[3913,23,3913,142,[1,"++",1,[3913,23,3913,76,[5,"The record matched the following possible aliases: "]],[3913,80,3913,142,[0,[[3913,80,3913,91,[2,["String"],"join"]],[3913,92,3913,96,[5,", "]],[3913,97,3913,142,[7,[3913,98,3913,141,[0,[[3913,98,3913,106,[2,["List"],"map"]],[3913,107,3913,120,[2,[],"prettyGeneric"]],[3913,121,3913,141,[7,[3913,122,3913,140,[0,[[3913,122,3913,131,[2,["List"],"sort"]],[3913,132,3913,140,[2,[],"matching"]]]]]]]]]]]]]]]]]]]]]]]]],[3916,17,3916,22,[2,[],"range"]]]]]]]]],[[3919,9,3919,10,[0]],[3921,13,3921,15,[9,[]]]]]]]]]]]]]]]]],[[11,1,56,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, defaults\n\n\n### Sorting\n\n@docs sortGenericFieldsLast\n\n\n### Ambiguous Records\n\nAn ambiguous record is a record that matches more than one known \"canonical\"\nrecord.\n\n@docs doNotSortAmbiguousRecords, reportAmbiguousRecordsWithoutFix\n\n\n### Unknown Records\n\nAn unknown record is a record that does not match any known \"canonical\" records.\n\n@docs doNotSortUnknownRecords, reportUnknownRecordsWithoutFix\n\n\n### Subrecords\n\nSubrecords are records that are either within the fields of a type alias or are\narguments of a custom type.\n\n@docs treatSubrecordsAsUnknown, treatAllSubrecordsAsCanonical, treatCustomTypeRecordsAsCanonical\n\n\n### Other Settings\n\n@docs typecheckAllRecords\n\n-}"],[949,29,949,75,"-- Arguments only have order if config says so"],[935,25,935,83,"-- Constrained type vars aren't respected for type aliases"],[924,31,924,69,"-- No constructors for generic records"],[910,53,910,85,"-- Return type *does* have order"],[900,53,900,99,"-- Arguments only have order if config says so"],[897,53,897,109,"-- Constrained type vars do apply to record constructors"],[1123,21,1123,56,"-- Only create the top level record"],[1103,21,1103,62,"-- Subrecords canonical if config says so"],[1100,23,1100,75,"-- Constrained type vars don't apply to type aliases"],[1173,13,1173,25,"-- NamedType"],[1172,13,1172,23,"-- TypeVar"],[1171,13,1171,24,"-- UnitType"],[1230,21,1230,56,"-- is just a normal generic record."],[1229,21,1229,76,"-- `type alias G comparable = { comparable | x : Int }`"],[1228,21,1228,75,"-- Generic records completely ignore typeclasses, i.e."],[1208,13,1208,81,"-- Can't use module name lookup, so just have to hope this is right."],[1259,9,1259,88,"-- Sometimes constrained type variables are not respected, like in type aliases"],[1381,5,1381,74,"-- Find aliases, canonical records, and function types and store them"],[1669,13,1669,29,"-- Destructuring"],[1668,13,1668,32,"-- InfixDeclaration"],[1667,13,1667,31,"-- PortDeclaration"],[1666,13,1666,34,"-- Nothing to do for:"],[1614,35,1614,79,"-- Generic records do not have constructors."],[1600,25,1600,79,"-- Constrained type vars are not respected for aliases"],[1533,29,1533,151,"-- Function declarations do not have canonical record orders nor do they have type variables (that might be made concrete)"],[1789,21,1789,56,"-- Only create the top level record"],[1773,21,1773,62,"-- Subrecords canonical if config says so"],[1770,21,1770,75,"-- Constrained type vars are not respected for aliases"],[1863,21,1863,56,"-- is just a normal generic record."],[1862,21,1862,76,"-- `type alias G comparable = { comparable | x : Int }`"],[1861,21,1861,75,"-- Generic records completely ignore typeclasses, i.e."],[1833,29,1833,95,"-- If the module name is empty, then update to current module name"],[1936,21,1936,31,"-- TypeVar"],[1935,21,1935,32,"-- UnitType"],[1930,37,1930,107,"-- Generic records overwrite more \"inner\" fields with their outer ones"],[1916,25,1916,73,"-- If no aliases match, it must be a custom type"],[1914,25,1914,43,"-- Apply type vars"],[2163,13,2163,28,"-- FloatPattern"],[2162,13,2162,26,"-- HexPattern"],[2161,13,2161,26,"-- IntPattern"],[2160,13,2160,29,"-- StringPattern"],[2159,13,2159,27,"-- CharPattern"],[2158,13,2158,27,"-- UnitPattern"],[2157,13,2157,26,"-- AllPattern"],[2156,13,2156,31,"-- No bindings in:"],[2152,13,2152,45,"-- Parentheses don't affect type"],[2148,13,2148,60,"-- Bind `name` to overall type and then descend"],[2144,13,2144,47,"-- Bind `name` to the overall type"],[2139,13,2139,67,"-- `p` has type in list, and `ps` is overall list type"],[2135,17,2135,32,"-- No type info"],[2131,13,2131,89,"-- which cannot be local, so we can just create an empty local context here."],[2130,13,2130,111,"-- Note that while `findFunctionType` requires local context, a pattern can only be a constructor,"],[2129,13,2129,62,"-- Get type info we've stored and use it to check"],[2238,9,2238,48,"-- Generic and unit types are dead ends"],[2217,13,2217,45,"-- Tuples must have a tuple type"],[2203,9,2203,60,"-- Descend into functions, tuples, and custom types"],[2200,17,2200,73,"-- Used any found record information to check subrecords"],[2193,17,2193,73,"-- Used any found record information to check subrecords"],[2188,9,2188,38,"-- Records are simply records"],[2393,13,2393,49,"-- FunctionOrValue ModuleName String"],[2392,13,2392,32,"-- CharLiteral Char"],[2391,13,2391,30,"-- Literal String"],[2390,13,2390,43,"-- RecordAccessFunction String"],[2389,13,2389,37,"-- GLSLExpression String"],[2388,13,2388,31,"-- Floatable Float"],[2387,13,2387,23,"-- Hex Int"],[2386,13,2386,27,"-- Integer Int"],[2385,13,2385,31,"-- Operator String"],[2384,13,2384,37,"-- PrefixOperator String"],[2383,13,2383,24,"-- UnitExpr"],[2382,13,2382,95,"-- The following neither have subexpressions nor are a record and so are dead ends"],[2375,17,2375,73,"-- Used any found record information to check subrecords"],[2365,21,2365,84,"-- Get type from updated var if we don't have a good annotation"],[2361,13,2361,95,"-- A record update expression does not have to have all fields of the known record"],[2360,13,2360,88,"-- A record update must have the same type as the record, so type is useful"],[2356,17,2356,73,"-- Used any found record information to check subrecords"],[2348,13,2348,78,"-- A record expression has to have all fields of the known record"],[2333,13,2333,64,"-- Create new bindings from any that have type info"],[2329,13,2329,35,"-- Check as a function"],[2310,13,2310,50,"-- Branches have same type as overall"],[2309,13,2309,65,"-- Try to infer type of case expression for patterns"],[2304,13,2304,45,"-- Tuples must have a tuple type"],[2300,13,2300,89,"-- List predicate must have type Bool and branches have same type as overall"],[2296,13,2296,44,"-- Handle a few known operators"],[2292,13,2292,58,"-- Try to pull type info from known functions"],[2284,17,2284,47,"-- Lists must have a list type"],[2279,13,2279,47,"-- Parentheses don't change a type"],[2275,13,2275,46,"-- Negation doesn't change a type"],[2273,9,2273,96,"-- Simple patterns simply descend into sub expressions of, unwrapping type if necessary"],[2408,13,2408,101,"-- Try to infer type of e for type info, since destructuring can't have type annotations"],[2435,13,2435,101,"-- Try to infer type of e for type info, since destructuring can't have type annotations"],[2452,13,2452,111,"-- Other operators, we don't know (or rather care) what they do, so just treat them like functions"],[2544,21,2544,50,"-- Negation (Node Expression)"],[2543,21,2543,39,"-- Operator String"],[2542,21,2542,39,"-- Floatable Float"],[2541,21,2541,31,"-- Hex Int"],[2540,21,2540,35,"-- Integer Int"],[2539,21,2539,65,"-- TupledExpression (List (Node Expression))"],[2538,21,2538,40,"-- CharLiteral Char"],[2537,21,2537,38,"-- Literal String"],[2536,21,2536,61,"-- RecordExpr (List (Node RecordSetter))"],[2535,21,2535,57,"-- ListExpr (List (Node Expression))"],[2534,21,2534,87,"-- RecordUpdateExpression (Node String) (List (Node RecordSetter))"],[2533,21,2533,61,"-- List.concatMap (checkExpr Nothing) es"],[2532,21,2532,45,"-- GLSLExpression String"],[2531,21,2531,32,"-- UnitExpr"],[2530,21,2530,60,"-- * Cannot apply args to non-functions"],[2529,21,2529,68,"-- RecordAccess (Node Expression) (Node String)"],[2528,21,2528,101,"-- OperatorApplication String InfixDirection (Node Expression) (Node Expression)"],[2527,21,2527,85,"-- IfBlock (Node Expression) (Node Expression) (Node Expression)"],[2526,21,2526,48,"-- CaseExpression CaseBlock"],[2525,21,2525,46,"-- LetExpression LetBlock"],[2524,21,2524,60,"-- Application (List (Node Expression))"],[2523,21,2523,98,"-- * These are possibly valid, but can't infer the \"return\" type of the block"],[2522,21,2522,47,"-- LambdaExpression Lambda"],[2521,21,2521,80,"-- * This is valid application, but we can't infer the type"],[2517,25,2517,96,"-- Assume there is only one argument, because if not, it's a type error"],[2512,21,2512,46,"-- Unwrap the parentheses"],[2508,25,2508,85,"-- Couldn't find the function type, so type info is gone now"],[2498,33,2498,52,"-- Assign type vars"],[2490,25,2490,85,"-- Couldn't find the function type, so type info is gone now"],[2480,33,2480,52,"-- Assign type vars"],[2559,33,2559,88,"-- This is, in essence, a generic record with one field"],[2552,5,2552,106,"-- We know the expression being accessed is a record with a field of the type of the total expression"],[2597,21,2597,93,"-- Constructor, not a function, which cannot be defined in local context"],[2618,9,2618,48,"-- There aren't any duplicate operators"],[2748,13,2748,33,"-- VarPattern String"],[2747,13,2747,34,"-- FloatPattern Float"],[2746,13,2746,30,"-- HexPattern Int"],[2745,13,2745,30,"-- IntPattern Int"],[2744,13,2744,36,"-- StringPattern String"],[2743,13,2743,32,"-- CharPattern Char"],[2742,13,2742,27,"-- UnitPattern"],[2741,13,2741,26,"-- AllPattern"],[2740,13,2740,51,"-- Neither can descend into nor check:"],[2736,17,2736,94,"-- No such thing as subrecords for patterns, so we can just return the errors"],[2727,13,2727,89,"-- which cannot be local, so we can just create an empty local context here."],[2726,13,2726,111,"-- Note that while `findFunctionType` requires local context, a pattern can only be a constructor,"],[2725,13,2725,62,"-- Get type info we've stored and use it to check"],[2721,13,2721,46,"-- Parentheses do not change type"],[2717,13,2717,47,"-- As pattern does not change type"],[2709,17,2709,49,"-- List pattern has to be a list"],[2700,17,2700,43,"-- Uncons has to be a list"],[2694,13,2694,45,"-- Tuples must have a tuple type"],[2818,53,2818,139,"-- Unit record is always canonical, or else it's a type error, in which case who knows"],[3077,21,3077,57,"-- Do not sort if config says not to"],[3071,21,3071,62,"-- Report without fixes if config says to"],[3067,21,3067,61,"-- Sort alphabetically if config says to"],[3060,21,3060,87,"-- Keep any fields that have identical types despite the ambiguity"],[3056,13,3056,31,"--Ambiguous record"],[3052,13,3052,34,"-- Unambiguous record"],[3048,13,3048,95,"-- Generic with unknown fields, so sort accordingly and use what type info we have"],[3044,13,3044,53,"-- Sort alphabetically if config says to"],[3043,13,3043,58,"-- Completely unknown record, so no type data"],[3038,21,3038,53,"-- Unknown record; don't sort it"],[3034,21,3034,63,"-- Unknown record, so report without fixes"],[3030,21,3030,80,"-- Unknown record, so sort alphabetically if config says to"],[2994,29,2994,97,"-- Prefer matches without unknown fields and that are not subrecords"],[2985,37,2985,95,"-- Keep only matching field types between duplicate orders"],[2978,29,2978,69,"-- Prefer matches without unknown fields"],[2974,17,2974,41,"-- Dedupe by field order"],[2945,13,2945,76,"-- Assume opening `{` is just the first character of the range."],[3091,13,3091,101,"-- but it works as long as a record doesn't have over 1,000,000 fields, which seems safe"],[3090,13,3090,70,"-- This is an ugly hack to put generic fields first/last,"],[3225,13,3225,83,"-- Don't worry about module name, because this will never be ambiguous"],[3203,29,3203,124,"-- Either it's an empty generic or nothing matched; either way just say what fields are missing"],[3328,21,3328,82,"-- If there are multiple matches, try to disambiguate by type"],[3314,17,3314,94,"-- Record was not generic but extra fields were present, so it wasn't a match"],[3310,17,3310,88,"-- Record is not generic and has no extra fields, so it is a good match"],[3297,17,3297,47,"-- Too many fields are missing"],[3278,25,3278,87,"-- If any `Nothing`s were encountered, we're missing type info"],[3272,29,3272,114,"-- same type variable (but it does for the known record if they are both `Maybe var`)"],[3271,29,3271,116,"-- For example, { a = Nothing, b = Nothing } should not require `a` and `b` to have the"],[3270,29,3270,115,"-- Only keep type variables assigned on the known record, since fields are independent"],[3426,21,3426,100,"-- Divide fields into those that are present in both and those that are missing"],[3412,21,3412,48,"-- Tuples must be same size"],[3383,13,3383,41,"-- Fields in both must match"],[3354,21,3354,131,"-- Handle base case.  This isn't right, but not worth going to the effort of matching typeclasses and the like"],[3349,21,3349,116,"-- Remove the matched typevar, because if the same exists within it refers to a different value"],[3348,21,3348,85,"-- If the type var has been assigned, check if that type matches"],[3495,21,3495,48,"-- Nothing else is a number"],[3482,21,3482,50,"-- Nothing else is appendable"],[3469,21,3469,50,"-- Nothing else is comparable"],[3659,21,3659,52,"-- Handle a few known operators"],[3646,49,3646,104,"-- This is, in essence, a generic record with one field"],[3639,21,3639,122,"-- We know the expression being accessed is a record with a field of the type of the total expression"],[3601,21,3601,56,"-- Try to infer all cases and unify"],[3591,21,3591,58,"-- Try to infer either side and unify"],[3584,21,3584,63,"-- Type is just whatever is in parentheses"],[3559,25,3559,55,"-- Have to check all and unify"],[3555,25,3555,57,"-- An empty list can be anything"],[3530,21,3530,57,"-- Mr. Incredible says UNIT IS UNIT."],[3755,21,3755,45,"-- Try to infer the type"],[3745,21,3745,83,"-- Assume there's only one arg, since it's a type error if not"],[3741,21,3741,46,"-- Unwrap the parentheses"],[3736,25,3736,67,"-- Definitely can't infer an operator type"],[3731,25,3731,44,"-- Assign type vars"],[3768,13,3768,99,"-- Dedupe the slow way because custom types aren't comparable and order doesn't matter"],[3863,13,3863,57,"-- NamedType unifies with nothing but itself"],[3862,13,3862,56,"-- UnitType unifies with nothing but itself"],[3824,13,3824,92,"-- Divide fields into those that are present in both and those that are missing"],[3884,13,3884,50,"-- Do not report 0 or 1 field records"],[3920,13,3920,50,"-- Do not report 0 or 1 field records"]]]]
