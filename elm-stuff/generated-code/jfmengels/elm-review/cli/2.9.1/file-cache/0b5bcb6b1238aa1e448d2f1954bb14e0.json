[1,[[1,1,9,6,[0,[[1,8,1,25,["NoUnsortedRecords"]],[1,26,9,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,27,[1,"defaults"]],[4,7,4,28,[1,"sortGenericFieldsLast"]],[5,7,5,32,[1,"doNotSortAmbiguousRecords"]],[5,34,5,66,[1,"reportAmbiguousRecordsWithoutFix"]],[6,7,6,30,[1,"doNotSortUnknownRecords"]],[6,32,6,62,[1,"reportUnknownRecordsWithoutFix"]],[7,7,7,31,[1,"treatSubrecordsAsUnknown"]],[7,33,7,62,[1,"treatAllSubrecordsAsCanonical"]],[7,64,7,97,[1,"treatCustomTypeRecordsAsCanonical"]],[8,7,8,26,[1,"typecheckAllRecords"]]]]]]]],[[58,1,58,28,[[58,8,58,12,["Dict"]],[0],[1,[58,13,58,28,[1,[[58,23,58,27,[2,"Dict"]]]]]]]],[59,1,59,27,[[59,8,59,18,["Dict","Extra"]],[1,[59,22,59,27,["DictX"]]],[0]]],[60,1,60,16,[[60,8,60,16,["Elm","Docs"]],[0],[0]]],[61,1,61,57,[[61,8,61,30,["Elm","Syntax","Declaration"]],[0],[1,[61,31,61,57,[1,[[61,41,61,56,[3,["Declaration",[1,[61,52,61,56]]]]]]]]]]],[62,1,62,71,[[62,8,62,27,["Elm","Syntax","Exposing"]],[0],[1,[62,28,62,71,[1,[[62,38,62,50,[3,["Exposing",[1,[62,46,62,50]]]]],[62,52,62,70,[3,["TopLevelExpose",[1,[62,66,62,70]]]]]]]]]]],[63,1,63,99,[[63,8,63,29,["Elm","Syntax","Expression"]],[0],[1,[63,30,63,99,[1,[[63,40,63,54,[3,["Expression",[1,[63,50,63,54]]]]],[63,56,63,64,[2,"Function"]],[63,66,63,84,[3,["LetDeclaration",[1,[63,80,63,84]]]]],[63,86,63,98,[2,"RecordSetter"]]]]]]]],[64,1,64,53,[[64,8,64,25,["Elm","Syntax","Module"]],[1,[64,29,64,35,["Module"]]],[1,[64,36,64,53,[1,[[64,46,64,52,[2,"Module"]]]]]]]],[65,1,65,51,[[65,8,65,29,["Elm","Syntax","ModuleName"]],[0],[1,[65,30,65,51,[1,[[65,40,65,50,[2,"ModuleName"]]]]]]]],[66,1,66,51,[[66,8,66,23,["Elm","Syntax","Node"]],[1,[66,27,66,31,["Node"]]],[1,[66,32,66,51,[1,[[66,42,66,50,[3,["Node",[1,[66,46,66,50]]]]]]]]]]],[67,1,67,49,[[67,8,67,26,["Elm","Syntax","Pattern"]],[0],[1,[67,27,67,49,[1,[[67,37,67,48,[3,["Pattern",[1,[67,44,67,48]]]]]]]]]]],[68,1,68,60,[[68,8,68,24,["Elm","Syntax","Range"]],[1,[68,28,68,33,["Range"]]],[1,[68,34,68,60,[1,[[68,44,68,52,[2,"Location"]],[68,54,68,59,[2,"Range"]]]]]]]],[69,1,69,51,[[69,8,69,23,["Elm","Syntax","Type"]],[0],[1,[69,24,69,51,[1,[[69,34,69,50,[2,"ValueConstructor"]]]]]]]],[70,1,70,99,[[70,8,70,33,["Elm","Syntax","TypeAnnotation"]],[1,[70,37,70,51,["TypeAnnotation"]]],[1,[70,52,70,99,[1,[[70,62,70,78,[2,"RecordDefinition"]],[70,80,70,98,[3,["TypeAnnotation",[1,[70,94,70,98]]]]]]]]]]],[71,1,71,16,[[71,8,71,16,["Elm","Type"]],[0],[0]]],[72,1,72,27,[[72,8,72,18,["List","Extra"]],[1,[72,22,72,27,["ListX"]]],[0]]],[73,1,73,29,[[73,8,73,19,["Maybe","Extra"]],[1,[73,23,73,29,["MaybeX"]]],[0]]],[74,1,74,84,[[74,8,74,36,["Review","ModuleNameLookupTable"]],[0],[1,[74,37,74,84,[1,[[74,47,74,68,[2,"ModuleNameLookupTable"]],[74,70,74,83,[1,"moduleNameFor"]]]]]]]],[75,1,75,69,[[75,8,75,33,["Review","Project","Dependency"]],[1,[75,37,75,47,["Dependency"]]],[1,[75,48,75,69,[1,[[75,58,75,68,[2,"Dependency"]]]]]]]],[76,1,76,50,[[76,8,76,19,["Review","Rule"]],[1,[76,23,76,27,["Rule"]]],[1,[76,28,76,50,[1,[[76,38,76,43,[2,"Error"]],[76,45,76,49,[2,"Rule"]]]]]]]],[77,1,77,26,[[77,8,77,11,["Set"]],[0],[1,[77,12,77,26,[1,[[77,22,77,25,[2,"Set"]]]]]]]],[78,1,78,62,[[78,8,78,12,["Util"]],[0],[1,[78,13,78,62,[1,[[78,23,78,35,[1,"checkSorting"]],[78,37,78,51,[1,"makeAccessFunc"]],[78,53,78,61,[1,"validate"]]]]]]]]],[[81,1,337,38,[0,[[1,[81,1,324,3,"{-| Reports record fields that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the fields.\n\nThe proper order of record fields is the order in which they are defined in the\ntype alias in your source files. See the \"Configuration\" section below for more\ninformation.\n\n    config =\n        [ NoUnsortedRecords.rule\n            (NoUnsortedRecords.defaults\n                |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n            )\n        ]\n\n\n## \"Proper\" Order\n\nProper order may be defined in several ways. Firstly, type aliases define order,\ne.g.\n\n    type alias MyRecord =\n        { foo : Int, bar : Int, baz : Int }\n\ncreates a record with name `MyRecord` and the known field order `foo`, `bar`,\n`baz`.\n\nSecondly, records without a defined type alias that are nevertheless either a\nsubrecord of a type alias or attached to a custom type are considered to be in\nthe order they are defined in the source:\n\n    type MyType\n        = A Int { foo : Int, bar : Int, baz : Int }\n        | B { b : Int, a : Int, c : Int } String\n\nwhen encountered in their larger context. By default, these are _not_ considered\ncanonical records when encountered alone, though this behavior may be turned on\nwith [`treatAllSubrecordsAsCanonical`](#treatAllSubrecordsAsCanonical) or\n[`treatCustomTypeRecordsAsCanonical`](#treatCustomTypeRecordsAsCanonical).\n\n\n## Inference/Disambiguation\n\nSince records are not associated with a unique name, it is necessary to infer\nwhat type alias a record matches. In the most ambiguous case, all type aliases\nare checked for matching fields. If none are found, then the rule can't match it\nto a specific order (though it may still optionally be sorted alphabetically).\n\nIf only one matching type alias is found, then the rule will sort by that order.\n\nIn the case of multiple matching field sets, several things may happen. If all\nof the field sets have the same order, then it isn't necessary to unambiguously\nidentify which is being matched, and that one order will be used. Otherwise, the\nrule is capable of using the following disambiguation rules:\n\n  - Disambiguation by the fact that all fields must be present:\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int, extra : Int }\n\n-- Must be type `A` because missing `extra`\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\n  - Disambiguation by type signature:\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int }\n\na : A\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\nIt should be noted that this works with relatively complex type signatures, e.g.\n\n    type alias A =\n        { foo : Int, bar : Int, baz : Int }\n\n    type alias B =\n        { bar : Int, foo : Int, baz : Int }\n\n    a : Int -> String -> ( Int, String, List A )\n    a i s =\n        ( i, s, [ { foo = 1, bar = 2, baz = 3 } ] )\n\nThis also works with patterns, e.g.\n\n    type alias A =\n        { foo : Int, bar : Int, baz : Int }\n\n    type alias B =\n        { bar : Int, foo : Int, baz : Int }\n\n    a : Int -> A -> Int -> Bool\n    a i1 { foo, bar, baz } i2 =\n        True\n\n  - Disambiguation by field type. Very rudimentary type inference is performed,\n    but it may frequently be useful to add annotations, as the inference is by\n    no means complete.\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : String, baz : Int }\n\n-- Must be type `A` because `foo` is `Int`\na : { foo : Int, bar : Int, baz : Int }\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\n  - Disambiguation by the fact that the it is associated with a custom type with\n    a known record argument:\n\n```\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na =\n    -- Must be `A`'s record\n    A { foo = 1, bar = 2, baz = 3 }\n\nb custom =\n    case custom of\n        -- Must be `A`'s record\n        A { foo, bar } ->\n            False\n\n        -- Must be `B`'s record\n        B { bar, foo } ->\n            True\n```\n\n  - Disambiguation by the fact that the it is associated with a specific index\n    of a custom type with a known record argument:\n\n```\ntype Custom\n    = A\n        Int\n        { foo : Int\n        , bar : Int\n        , baz : Int\n        }\n        String\n        { bar : Int\n        , foo : Int\n        , baz : Int\n        }\n\na custom =\n    case custom of\n        A _ { foo, bar } _ { bar, foo } ->\n            False\n```\n\n  - Disambiguation by the fact that the it is associated with a specific field\n    of a record alias:\n\n```\ntype alias A =\n    { a : { foo : Int, bar : Int, baz : Int }\n    , b : { bar : Int, foo : Int, baz : Int }\n    }\n\nfunc : A\nfunc =\n    { a = { foo = 2, bar = 1, baz = 3 }\n    , b = { bar = 2, foo = 1, baz = 3 }\n    }\n```\n\n  - Disambiguation by known function argument types (this includes local\n    bindings):\n\n```\nmodule A exposing (..)\n\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a =\n    True\n\nfunc : Bool\nfunc =\n    -- Must be `A`, because `foo` has type `A -> Bool`\n    foo { foo = 1, bar = 2, baz = 3 }\n```\n\n\n## Best Practices for Disambiguation\n\nType annotations are always useful! If all functions have type annotations (with\nthe appropriate aliases), then it's unlikely ambiguous records will ever be\nencountered. Beyond that, ambiguity can always be avoided by just making the\ncanonical order for possibly-ambiguous records identical.\n\nIf you want to ensure that this rule is not encountering ambiguous/unknown\nrecords, then you can use `reportAmbiguousRecordsWithoutFix` and/or\n`reportUnknownRecordsWithoutFix` to report them without automatically sorting\nthem alphabetically. Alternately, you can use `doNotSortAmbiguousRecords` and/or\n`doNotSortUnknownRecords` to disable all sorting/error reporting for them.\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that your record fields are in a\nconsistent, predictable order, that is consistent with the order in which they\nwere defined.\n\nThis rule is not useful when you want to be able to write records in different\norders throughout your codebase, e.g. if you want to emphasize what fields are\nmost important at any given point. It may also not be useful if you have many\nrecords with the same fields.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedRecords\n```\n\n-}"]],[1,[325,1,325,26,[[325,1,325,5,"rule"],[325,8,325,26,[6,[325,8,325,18,[1,[325,8,325,18,[[],"RuleConfig"]],[]]],[325,22,325,26,[1,[325,22,325,26,[[],"Rule"]],[]]]]]]]],[326,1,337,38,[[326,1,326,5,"rule"],[[326,6,326,12,[11,"config"]]],[327,5,337,38,[1,"|>",0,[327,5,336,44,[1,"|>",0,[327,5,335,47,[1,"|>",0,[327,5,334,14,[1,"|>",0,[327,5,329,57,[1,"|>",0,[327,5,328,94,[1,"|>",0,[327,5,327,72,[0,[[327,5,327,30,[2,["Rule"],"newProjectRuleSchema"]],[327,31,327,50,[5,"NoUnsortedRecords"]],[327,51,327,72,[2,[],"initialProjectContext"]]]]],[328,12,328,94,[0,[[328,12,328,47,[2,["Rule"],"withDependenciesProjectVisitor"]],[328,48,328,94,[7,[328,49,328,93,[18,[[[328,50,328,51,[11,"d"]],[328,52,328,53,[11,"c"]]],[328,57,328,93,[6,[[328,59,328,61,[9,[]]],[328,63,328,91,[0,[[328,63,328,80,[2,[],"dependencyVisitor"]],[328,81,328,87,[2,[],"config"]],[328,88,328,89,[2,[],"c"]],[328,90,328,91,[2,[],"d"]]]]]]]]]]]]]]]]]],[329,12,329,57,[0,[[329,12,329,34,[2,["Rule"],"withModuleVisitor"]],[329,35,329,57,[7,[329,36,329,56,[0,[[329,36,329,49,[2,[],"moduleVisitor"]],[329,50,329,56,[2,[],"config"]]]]]]]]]]]],[330,12,334,14,[0,[[330,12,330,53,[2,["Rule"],"withModuleContextUsingContextCreator"]],[331,13,334,14,[8,[[331,15,331,56,[[331,15,331,34,"foldProjectContexts"],[331,37,331,56,[2,[],"foldProjectContexts"]]]],[332,15,333,13,[[332,15,332,34,"fromModuleToProject"],[332,37,332,56,[2,[],"fromModuleToProject"]]]],[333,15,334,13,[[333,15,333,34,"fromProjectToModule"],[333,37,333,63,[0,[[333,37,333,56,[2,[],"fromProjectToModule"]],[333,57,333,63,[2,[],"config"]]]]]]]]]]]]]]],[335,12,335,47,[2,["Rule"],"withContextFromImportedModules"]]]],[336,12,336,44,[2,["Rule"],"providesFixesForProjectRule"]]]],[337,12,337,38,[2,["Rule"],"fromProjectRuleSchema"]]]]]]]]],[340,1,350,10,[2,[[1,[340,1,342,3,"{-| Configuration for this rule. Create a new one with `defaults` and use\n`reportAmbiguousRecordsWithoutFix`, `doNotSortUnknownRecords`, etc. to alter it.\n-}"]],[343,6,343,16,"RuleConfig"],[],[[344,7,350,10,[[344,7,344,17,"RuleConfig"],[[345,9,350,10,[4,[[345,11,345,50,[[345,11,345,22,"sortUnknown"],[345,25,345,50,[1,[345,25,345,50,[[],"SortWithoutCanonicalOrder"]],[]]]]],[346,11,347,9,[[346,11,346,24,"sortAmbiguous"],[346,27,346,52,[1,[346,27,346,52,[[],"SortWithoutCanonicalOrder"]],[]]]]],[347,11,348,9,[[347,11,347,23,"sortGenerics"],[347,26,347,38,[1,[347,26,347,38,[[],"SortGenerics"]],[]]]]],[348,11,349,9,[[348,11,348,29,"subrecordTreatment"],[348,32,348,51,[1,[348,32,348,51,[[],"SubrecordCanonicity"]],[]]]]],[349,11,350,9,[[349,11,349,38,"typecheckUnambiguousRecords"],[349,41,349,45,[1,[349,41,349,45,[[],"Bool"]],[]]]]]]]]]]]]]]],[353,1,370,22,[2,[[1,[353,1,365,3,"{-| Specify how to deal with subrecords.\n\n  - `CanonicalWhenSubrecord` -- Subrecords have canonical order only when they\n    are part of their larger record/constructor.\n  - `CustomTypeArgsAlwaysCanonical` -- Arguments of custom types are always\n    canonical, but other subrecords are only canonical in place. This was the\n    behavior prior to 1.1.0.\n  - `AlwaysUnknown` -- Always consider subrecords unknown records (unless of\n    course they match something else).\n  - `AlwaysCanonical` -- Check for standalone subrecords as a lower-priority\n    \"known\" record.\n\n-}"]],[366,6,366,25,"SubrecordCanonicity"],[],[[367,7,367,29,[[367,7,367,29,"CanonicalWhenSubrecord"],[]]],[368,7,368,36,[[368,7,368,36,"CustomTypeArgsAlwaysCanonical"],[]]],[369,7,369,20,[[369,7,369,20,"AlwaysUnknown"],[]]],[370,7,370,22,[[370,7,370,22,"AlwaysCanonical"],[]]]]]]],[373,1,377,24,[2,[[1,[373,1,374,3,"{-| Specify how to handle generic records.\n-}"]],[375,6,375,18,"SortGenerics"],[],[[376,7,376,25,[[376,7,376,25,"GenericFieldsFirst"],[]]],[377,7,377,24,[[377,7,377,24,"GenericFieldsLast"],[]]]]]]],[380,1,385,16,[2,[[1,[380,1,381,3,"{-| Specify how to handle records without a canonical order.\n-}"]],[382,6,382,31,"SortWithoutCanonicalOrder"],[],[[383,7,383,21,[[383,7,383,21,"Alphabetically"],[]]],[384,7,384,17,[[384,7,384,17,"ReportOnly"],[]]],[385,7,385,16,[[385,7,385,16,"DoNotSort"],[]]]]]]],[388,1,422,10,[0,[[1,[388,1,413,3,"{-| The default configuration, with the following behavior:\n\n  - Unknown records (those that match no known canonical order) are sorted\n    alphabetically\n  - Ambiguous records (those that match more than one canonical order) are\n    sorted alphabetically\n  - Generic fields of generic records are sorted before the canonical ones.\n  - Subrecords are treated as having canonical order only when associated with\n    their outer record/constructor.\n  - Typechecking is only used to disambiguate records, i.e. a record will not\n    _not_ match a canonical record just because the rule thinks it has the wrong\n    type. For instance, `{ foo = 1, bar = 2 }` will match\n    `{ foo : String, bar : String }` if no other records exist with the fields\n    `foo` and `bar`. This is to protect against incorrect type inference by this\n    rule.\n\nUse `reportUnknownRecordsWithoutFix`, etc. to alter this behavior, e.g.\n\n    config =\n        [ NoUnsortedRecords.rule\n            (NoUnsortedRecords.defaults\n                |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n            )\n        ]\n\n-}"]],[1,[414,1,414,22,[[414,1,414,9,"defaults"],[414,12,414,22,[1,[414,12,414,22,[[],"RuleConfig"]],[]]]]]],[415,1,422,10,[[415,1,415,9,"defaults"],[],[416,5,422,10,[0,[[416,5,416,15,[2,[],"RuleConfig"]],[417,9,422,10,[8,[[417,11,417,39,[[417,11,417,22,"sortUnknown"],[417,25,417,39,[2,[],"Alphabetically"]]]],[418,11,419,9,[[418,11,418,24,"sortAmbiguous"],[418,27,418,41,[2,[],"Alphabetically"]]]],[419,11,420,9,[[419,11,419,23,"sortGenerics"],[419,26,419,44,[2,[],"GenericFieldsFirst"]]]],[420,11,421,9,[[420,11,420,29,"subrecordTreatment"],[420,32,420,54,[2,[],"CanonicalWhenSubrecord"]]]],[421,11,422,9,[[421,11,421,38,"typecheckUnambiguousRecords"],[421,41,421,46,[2,[],"False"]]]]]]]]]]]]]]],[425,1,434,58,[0,[[1,[425,1,431,3,"{-| By default, typechecking is only used to disambiguate records. This alters\nthat behavior to typecheck _all_ records. For instance, this will force\n`{ foo = 1, bar = 2 }` to be an \"unknown\" record if\n`{ foo : String, bar : String }` is known. This should probably be left turned\noff, unless you wish to help find examples of incorrect type inference by this\nrule.\n-}"]],[1,[432,1,432,47,[[432,1,432,20,"typecheckAllRecords"],[432,23,432,47,[6,[432,23,432,33,[1,[432,23,432,33,[[],"RuleConfig"]],[]]],[432,37,432,47,[1,[432,37,432,47,[[],"RuleConfig"]],[]]]]]]]],[433,1,434,58,[[433,1,433,20,"typecheckAllRecords"],[[433,21,433,35,[14,[433,22,433,34,[12,[[],"RuleConfig"],[[433,33,433,34,[11,"r"]]]]]]]],[434,5,434,58,[0,[[434,5,434,15,[2,[],"RuleConfig"]],[434,16,434,58,[21,[434,18,434,19,"r"],[[434,22,434,57,[[434,22,434,49,"typecheckUnambiguousRecords"],[434,52,434,56,[2,[],"True"]]]]]]]]]]]]]]],[437,1,463,58,[0,[[1,[437,1,460,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This disables that behavior,\ntreating them the same as any other unknown record.\n\nFor example:\n\n    type A\n        = A { foo : Int, bar : Int, baz : Int }\n\n    type alias Rec =\n        { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\n    thisWillBeUnknown =\n        A { bar = 1, baz = 2, foo = 3 }\n\n    and =\n        { yi =\n            -- This will also be unknown\n            { bar = 1, baz = 2, foo = 3 }\n        , er = 1\n        }\n\n-}"]],[1,[461,1,461,52,[[461,1,461,25,"treatSubrecordsAsUnknown"],[461,28,461,52,[6,[461,28,461,38,[1,[461,28,461,38,[[],"RuleConfig"]],[]]],[461,42,461,52,[1,[461,42,461,52,[[],"RuleConfig"]],[]]]]]]]],[462,1,463,58,[[462,1,462,25,"treatSubrecordsAsUnknown"],[[462,26,462,40,[14,[462,27,462,39,[12,[[],"RuleConfig"],[[462,38,462,39,[11,"r"]]]]]]]],[463,5,463,58,[0,[[463,5,463,15,[2,[],"RuleConfig"]],[463,16,463,58,[21,[463,18,463,19,"r"],[[463,22,463,57,[[463,22,463,40,"subrecordTreatment"],[463,43,463,56,[2,[],"AlwaysUnknown"]]]]]]]]]]]]]]],[466,1,486,74,[0,[[1,[466,1,483,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This extends that behavior to sort\ncustom type args even when encountered alone (i.e. not in the context of their\nconstructor. This was the behavior prior to version `1.1.0` and thus this\nsetting is provided for compatibility. Note that canonical records will always\ntake priority, however.\n\nFor example:\n\n    type A\n        = A { foo : Int, bar : Int, baz : Int }\n\n    thisWillHaveCanonicalOrder =\n        -- Even though it does not appear in the context of `A`\n        { foo = 3, bar = 1, baz = 2 }\n\n-}"]],[1,[484,1,484,61,[[484,1,484,34,"treatCustomTypeRecordsAsCanonical"],[484,37,484,61,[6,[484,37,484,47,[1,[484,37,484,47,[[],"RuleConfig"]],[]]],[484,51,484,61,[1,[484,51,484,61,[[],"RuleConfig"]],[]]]]]]]],[485,1,486,74,[[485,1,485,34,"treatCustomTypeRecordsAsCanonical"],[[485,35,485,49,[14,[485,36,485,48,[12,[[],"RuleConfig"],[[485,47,485,48,[11,"r"]]]]]]]],[486,5,486,74,[0,[[486,5,486,15,[2,[],"RuleConfig"]],[486,16,486,74,[21,[486,18,486,19,"r"],[[486,22,486,73,[[486,22,486,40,"subrecordTreatment"],[486,43,486,72,[2,[],"CustomTypeArgsAlwaysCanonical"]]]]]]]]]]]]]]],[489,1,508,60,[0,[[1,[489,1,505,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This extends that behavior to sort\nthem even when encountered alone (i.e. not in the context of their parent\nrecord/constructor. Note that canonical records will always take priority,\nhowever.\n\nFor example:\n\n    type alias Rec =\n        { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\n    thisWillHaveCanonicalOrder =\n        -- Even though it does not appear in the context of `Rec`\n        { foo = 3, bar = 1, baz = 2 }\n\n-}"]],[1,[506,1,506,57,[[506,1,506,30,"treatAllSubrecordsAsCanonical"],[506,33,506,57,[6,[506,33,506,43,[1,[506,33,506,43,[[],"RuleConfig"]],[]]],[506,47,506,57,[1,[506,47,506,57,[[],"RuleConfig"]],[]]]]]]]],[507,1,508,60,[[507,1,507,30,"treatAllSubrecordsAsCanonical"],[[507,31,507,45,[14,[507,32,507,44,[12,[[],"RuleConfig"],[[507,43,507,44,[11,"r"]]]]]]]],[508,5,508,60,[0,[[508,5,508,15,[2,[],"RuleConfig"]],[508,16,508,60,[21,[508,18,508,19,"r"],[[508,22,508,59,[[508,22,508,40,"subrecordTreatment"],[508,43,508,58,[2,[],"AlwaysCanonical"]]]]]]]]]]]]]]],[511,1,517,47,[0,[[1,[511,1,514,3,"{-| By default, records that do not match any known aliases or custom types are\nsorted alphabetically. This disables that behavior, leaving them in their base\nsorting.\n-}"]],[1,[515,1,515,51,[[515,1,515,24,"doNotSortUnknownRecords"],[515,27,515,51,[6,[515,27,515,37,[1,[515,27,515,37,[[],"RuleConfig"]],[]]],[515,41,515,51,[1,[515,41,515,51,[[],"RuleConfig"]],[]]]]]]]],[516,1,517,47,[[516,1,516,24,"doNotSortUnknownRecords"],[[516,25,516,39,[14,[516,26,516,38,[12,[[],"RuleConfig"],[[516,37,516,38,[11,"r"]]]]]]]],[517,5,517,47,[0,[[517,5,517,15,[2,[],"RuleConfig"]],[517,16,517,47,[21,[517,18,517,19,"r"],[[517,22,517,46,[[517,22,517,33,"sortUnknown"],[517,36,517,45,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[520,1,527,49,[0,[[1,[520,1,524,3,"{-| By default, records that match multiple known aliases with different field\norders are sorted alphabetically. (If the field orders of the various matches\nare identical, then it is not ambiguous.) This disables that behavior, leaving\nthem in their base sorting instead.\n-}"]],[1,[525,1,525,53,[[525,1,525,26,"doNotSortAmbiguousRecords"],[525,29,525,53,[6,[525,29,525,39,[1,[525,29,525,39,[[],"RuleConfig"]],[]]],[525,43,525,53,[1,[525,43,525,53,[[],"RuleConfig"]],[]]]]]]]],[526,1,527,49,[[526,1,526,26,"doNotSortAmbiguousRecords"],[[526,27,526,41,[14,[526,28,526,40,[12,[[],"RuleConfig"],[[526,39,526,40,[11,"r"]]]]]]]],[527,5,527,49,[0,[[527,5,527,15,[2,[],"RuleConfig"]],[527,16,527,49,[21,[527,18,527,19,"r"],[[527,22,527,48,[[527,22,527,35,"sortAmbiguous"],[527,38,527,47,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[530,1,539,48,[0,[[1,[530,1,536,3,"{-| By default, records that do not match any known aliases or custom types are\nsorted alphabetically. This disables that behavior, reporting them as unknown\nwithout automatically fixing them.\n\nNote that this will effectively forbid the use of _ad hoc_/anonymous records!\n\n-}"]],[1,[537,1,537,58,[[537,1,537,31,"reportUnknownRecordsWithoutFix"],[537,34,537,58,[6,[537,34,537,44,[1,[537,34,537,44,[[],"RuleConfig"]],[]]],[537,48,537,58,[1,[537,48,537,58,[[],"RuleConfig"]],[]]]]]]]],[538,1,539,48,[[538,1,538,31,"reportUnknownRecordsWithoutFix"],[[538,32,538,46,[14,[538,33,538,45,[12,[[],"RuleConfig"],[[538,44,538,45,[11,"r"]]]]]]]],[539,5,539,48,[0,[[539,5,539,15,[2,[],"RuleConfig"]],[539,16,539,48,[21,[539,18,539,19,"r"],[[539,22,539,47,[[539,22,539,33,"sortUnknown"],[539,36,539,46,[2,[],"ReportOnly"]]]]]]]]]]]]]]],[542,1,551,50,[0,[[1,[542,1,548,3,"{-| By default, records that match multiple known aliases with different field\norders are sorted alphabetically. (If the field orders of the various matches\nare identical, then it is not ambiguous.) This disables that behavior, reporting\nthem as ambiguous without automatically fixing them. This is useful if you want\nto catch ambiguous records and e.g. provide type annotations to make them\nunambiguous.\n-}"]],[1,[549,1,549,60,[[549,1,549,33,"reportAmbiguousRecordsWithoutFix"],[549,36,549,60,[6,[549,36,549,46,[1,[549,36,549,46,[[],"RuleConfig"]],[]]],[549,50,549,60,[1,[549,50,549,60,[[],"RuleConfig"]],[]]]]]]]],[550,1,551,50,[[550,1,550,33,"reportAmbiguousRecordsWithoutFix"],[[550,34,550,48,[14,[550,35,550,47,[12,[[],"RuleConfig"],[[550,46,550,47,[11,"r"]]]]]]]],[551,5,551,50,[0,[[551,5,551,15,[2,[],"RuleConfig"]],[551,16,551,50,[21,[551,18,551,19,"r"],[[551,22,551,49,[[551,22,551,35,"sortAmbiguous"],[551,38,551,48,[2,[],"ReportOnly"]]]]]]]]]]]]]]],[554,1,570,56,[0,[[1,[554,1,567,3,"{-| By default, generic fields are placed before others; this alters that\nbehavior to place them at the end instead, e.g.\n\n    type alias A =\n        { z : Int, y : Int, x : Int }\n\n    type alias Generic record =\n        { record | foo : Int, bar : Int, baz : Int }\n\n    rec : Generic A\n    rec =\n        { foo = 1, bar = 2, baz = 3, z = 4, y = 5, x = 6 }\n\n-}"]],[1,[568,1,568,49,[[568,1,568,22,"sortGenericFieldsLast"],[568,25,568,49,[6,[568,25,568,35,[1,[568,25,568,35,[[],"RuleConfig"]],[]]],[568,39,568,49,[1,[568,39,568,49,[[],"RuleConfig"]],[]]]]]]]],[569,1,570,56,[[569,1,569,22,"sortGenericFieldsLast"],[[569,23,569,37,[14,[569,24,569,36,[12,[[],"RuleConfig"],[[569,35,569,36,[11,"r"]]]]]]]],[570,5,570,56,[0,[[570,5,570,15,[2,[],"RuleConfig"]],[570,16,570,56,[21,[570,18,570,19,"r"],[[570,22,570,55,[[570,22,570,34,"sortGenerics"],[570,37,570,54,[2,[],"GenericFieldsLast"]]]]]]]]]]]]]]],[573,1,579,6,[1,[[1,[573,1,574,3,"{-| A canonical ordering of fields in a record definition.\n-}"]],[575,12,575,23,"KnownRecord"],[],[576,5,579,6,[4,[[576,7,576,40,[[576,7,576,12,"order"],[576,15,576,40,[1,[576,15,576,19,[[],"Dict"]],[[576,20,576,26,[1,[576,20,576,26,[[],"String"]],[]]],[576,27,576,40,[3,[[576,29,576,32,[1,[576,29,576,32,[[],"Int"]],[]]],[576,34,576,38,[1,[576,34,576,38,[[],"Type"]],[]]]]]]]]]]],[577,7,578,5,[[577,7,577,16,"isGeneric"],[577,19,577,23,[1,[577,19,577,23,[[],"Bool"]],[]]]]],[578,7,579,5,[[578,7,578,18,"isSubrecord"],[578,21,578,25,[1,[578,21,578,25,[[],"Bool"]],[]]]]]]]]]]],[582,1,585,70,[1,[[1,[582,1,583,3,"{-| A single field of a record, to check for sorting.\n-}"]],[584,12,584,17,"Field"],[],[585,5,585,70,[4,[[585,7,585,21,[[585,7,585,12,"field"],[585,15,585,21,[1,[585,15,585,21,[[],"String"]],[]]]]],[585,23,585,53,[[585,23,585,28,"type_"],[585,31,585,53,[1,[585,31,585,36,[[],"Maybe"]],[[585,37,585,53,[1,[585,37,585,53,[[],"DereferencedType"]],[]]]]]]]],[585,55,585,69,[[585,55,585,60,"range"],[585,63,585,68,[1,[585,63,585,68,[[],"Range"]],[]]]]]]]]]]],[588,1,595,6,[1,[[1,[588,1,590,3,"{-| A record type, expression, or pattern, packaged in a standardized format for\nchecking.\n-}"]],[591,12,591,25,"RecordToCheck"],[],[592,5,595,6,[4,[[592,7,592,24,[[592,7,592,16,"fullRange"],[592,19,592,24,[1,[592,19,592,24,[[],"Range"]],[]]]]],[593,7,594,5,[[593,7,593,16,"orderInfo"],[593,19,593,34,[1,[593,19,593,24,[[],"Maybe"]],[[593,25,593,34,[1,[593,25,593,34,[[],"OrderInfo"]],[]]]]]]]],[594,7,595,5,[[594,7,594,13,"fields"],[594,16,594,26,[1,[594,16,594,20,[[],"List"]],[[594,21,594,26,[1,[594,21,594,26,[[],"Field"]],[]]]]]]]]]]]]]],[598,1,604,10,[2,[[1,[598,1,599,3,"{-| Define a canonical ordering (and type) for fields.\n-}"]],[600,6,600,16,"FieldOrder"],[],[[601,7,604,10,[[601,7,601,17,"FieldOrder"],[[602,9,604,10,[4,[[602,11,602,48,[[602,11,602,20,"canonical"],[602,23,602,48,[1,[602,23,602,27,[[],"Dict"]],[[602,28,602,34,[1,[602,28,602,34,[[],"String"]],[]]],[602,35,602,48,[3,[[602,37,602,40,[1,[602,37,602,40,[[],"Int"]],[]]],[602,42,602,46,[1,[602,42,602,46,[[],"Type"]],[]]]]]]]]]]],[603,11,604,9,[[603,11,603,18,"generic"],[603,21,603,34,[1,[603,21,603,26,[[],"Maybe"]],[[603,27,603,34,[1,[603,27,603,34,[[],"Generic"]],[]]]]]]]]]]]]]]]]]],[607,1,612,31,[2,[[1,[607,1,609,3,"{-| The type of generic fields in a field order, which may be unknown or have\ncanonical ordering.\n-}"]],[610,6,610,13,"Generic"],[],[[611,7,611,34,[[611,7,611,20,"UnknownFields"],[[611,21,611,34,[1,[611,22,611,26,[[],"List"]],[[611,27,611,33,[1,[611,27,611,33,[[],"String"]],[]]]]]]]]],[612,7,612,31,[[612,7,612,20,"OrderedFields"],[[612,21,612,31,[1,[612,21,612,31,[[],"FieldOrder"]],[]]]]]]]]]],[615,1,620,19,[2,[[1,[615,1,617,3,"{-| Any info we can glean about the record that might help us figure out what\nits field order should be.\n-}"]],[618,6,618,15,"OrderInfo"],[],[[619,7,619,31,[[619,7,619,20,"HasFieldOrder"],[[619,21,619,31,[1,[619,21,619,31,[[],"FieldOrder"]],[]]]]]],[620,7,620,19,[[620,7,620,19,"HasAllFields"],[]]]]]]],[623,1,638,39,[2,[[1,[623,1,630,3,"{-| A type that, after being dereferenced, will not contain aliases and stores\nwhether or not records have canonical field order.\n\nNote that `TypeVar` is never concrete, as a `Type` is always made with full info\nabout all type variables, so the only way `TypeVar` can exist is if it's not\nused.\n\n-}"]],[631,6,631,10,"Type"],[],[[632,7,632,46,[[632,7,632,19,"FunctionType"],[[632,20,632,46,[4,[[632,22,632,33,[[632,22,632,26,"from"],[632,29,632,33,[1,[632,29,632,33,[[],"Type"]],[]]]]],[632,35,632,45,[[632,35,632,37,"to"],[632,40,632,44,[1,[632,40,632,44,[[],"Type"]],[]]]]]]]]]]],[633,7,633,28,[[633,7,633,16,"TupleType"],[[633,17,633,28,[1,[633,18,633,22,[[],"List"]],[[633,23,633,27,[1,[633,23,633,27,[[],"Type"]],[]]]]]]]]],[634,7,634,20,[[634,7,634,15,"ListType"],[[634,16,634,20,[1,[634,16,634,20,[[],"Type"]],[]]]]]],[635,7,635,15,[[635,7,635,15,"UnitType"],[]]],[636,7,636,51,[[636,7,636,16,"NamedType"],[[636,17,636,39,[3,[[636,19,636,29,[1,[636,19,636,29,[[],"ModuleName"]],[]]],[636,31,636,37,[1,[636,31,636,37,[[],"String"]],[]]]]]],[636,40,636,51,[1,[636,41,636,45,[[],"List"]],[[636,46,636,50,[1,[636,46,636,50,[[],"Type"]],[]]]]]]]]],[637,7,637,92,[[637,7,637,17,"RecordType"],[[637,18,637,92,[4,[[637,20,637,40,[[637,20,637,27,"generic"],[637,30,637,40,[1,[637,30,637,35,[[],"Maybe"]],[[637,36,637,40,[1,[637,36,637,40,[[],"Type"]],[]]]]]]]],[637,42,637,58,[[637,42,637,51,"canonical"],[637,54,637,58,[1,[637,54,637,58,[[],"Bool"]],[]]]]],[637,60,637,91,[[637,60,637,66,"fields"],[637,69,637,90,[1,[637,69,637,73,[[],"List"]],[[637,74,637,90,[3,[[637,76,637,82,[1,[637,76,637,82,[[],"String"]],[]]],[637,84,637,88,[1,[637,84,637,88,[[],"Type"]],[]]]]]]]]]]]]]]]]],[638,7,638,39,[[638,7,638,14,"TypeVar"],[[638,15,638,32,[1,[638,16,638,21,[[],"Maybe"]],[[638,22,638,31,[1,[638,22,638,31,[[],"Typeclass"]],[]]]]]],[638,33,638,39,[1,[638,33,638,39,[[],"String"]],[]]]]]]]]]],[641,1,647,17,[2,[[1,[641,1,642,3,"{-| Represent an Elm \"typeclass\" (constrained type variable, like `number`).\n-}"]],[643,6,643,15,"Typeclass"],[],[[644,7,644,17,[[644,7,644,17,"Appendable"],[]]],[645,7,645,13,[[645,7,645,13,"Number"],[]]],[646,7,646,17,[[646,7,646,17,"Comparable"],[]]],[647,7,647,17,[[647,7,647,17,"CompAppend"],[]]]]]]],[650,1,653,28,[2,[[1,[650,1,651,3,"{-| A type with all aliases dereferenced.\n-}"]],[652,6,652,22,"DereferencedType"],[],[[653,7,653,28,[[653,7,653,23,"DereferencedType"],[[653,24,653,28,[1,[653,24,653,28,[[],"Type"]],[]]]]]]]]]],[656,1,660,34,[2,[[1,[656,1,658,3,"{-| A type with positional type variables, e.g. `Ok a` having been created from\n`Result a b`.\n-}"]],[659,6,659,28,"TypeWithPositionalVars"],[],[[660,7,660,34,[[660,7,660,29,"TypeWithPositionalVars"],[[660,30,660,34,[1,[660,30,660,34,[[],"Type"]],[]]]]]]]]]],[663,1,680,6,[1,[[1,[663,1,674,3,"{-| The project context.\n\n`aliases` stores all type aliases.\n\n`canonicalRecords` stores known aliased records.\n\n`constructors` are different than functions, as they (might) require type\nvars.\n\n`functionTypes` stores the types of all functions (for type inference).\n\n-}"]],[675,12,675,26,"ProjectContext"],[],[676,5,680,6,[4,[[676,7,676,69,[[676,7,676,14,"aliases"],[676,17,676,69,[1,[676,17,676,21,[[],"Dict"]],[[676,22,676,32,[1,[676,22,676,32,[[],"ModuleName"]],[]]],[676,33,676,69,[1,[676,34,676,38,[[],"Dict"]],[[676,39,676,45,[1,[676,39,676,45,[[],"String"]],[]]],[676,46,676,68,[1,[676,46,676,68,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[677,7,678,5,[[677,7,677,23,"canonicalRecords"],[677,26,677,67,[1,[677,26,677,30,[[],"Dict"]],[[677,31,677,41,[1,[677,31,677,41,[[],"ModuleName"]],[]]],[677,42,677,67,[1,[677,43,677,47,[[],"Dict"]],[[677,48,677,54,[1,[677,48,677,54,[[],"String"]],[]]],[677,55,677,66,[1,[677,55,677,66,[[],"KnownRecord"]],[]]]]]]]]]]],[678,7,679,5,[[678,7,678,19,"constructors"],[678,22,678,117,[1,[678,22,678,26,[[],"Dict"]],[[678,27,678,37,[1,[678,27,678,37,[[],"ModuleName"]],[]]],[678,38,678,117,[1,[678,39,678,43,[[],"Dict"]],[[678,44,678,50,[1,[678,44,678,50,[[],"String"]],[]]],[678,51,678,116,[4,[[678,53,678,82,[[678,53,678,67,"customTypeName"],[678,70,678,82,[1,[678,70,678,75,[[],"Maybe"]],[[678,76,678,82,[1,[678,76,678,82,[[],"String"]],[]]]]]]]],[678,84,678,115,[[678,84,678,89,"type_"],[678,92,678,114,[1,[678,92,678,114,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[679,7,680,5,[[679,7,679,20,"functionTypes"],[679,23,679,57,[1,[679,23,679,27,[[],"Dict"]],[[679,28,679,38,[1,[679,28,679,38,[[],"ModuleName"]],[]]],[679,39,679,57,[1,[679,40,679,44,[[],"Dict"]],[[679,45,679,51,[1,[679,45,679,51,[[],"String"]],[]]],[679,52,679,56,[1,[679,52,679,56,[[],"Type"]],[]]]]]]]]]]]]]]]]],[683,1,711,6,[1,[[1,[683,1,695,3,"{-| The module context.\n\n`aliases` stores all type aliases.\n\n`canonicalRecords` stores known aliased records.\n\n`constructors` are different than functions, as they (might) require type\nvars.\n\n`functionTypes` stores the types of all functions (for type inference), along\nwith any (anonymous) records associated with custom types (by index).\n\n-}"]],[696,12,696,25,"ModuleContext"],[],[697,5,711,6,[4,[[697,7,697,69,[[697,7,697,14,"aliases"],[697,17,697,69,[1,[697,17,697,21,[[],"Dict"]],[[697,22,697,32,[1,[697,22,697,32,[[],"ModuleName"]],[]]],[697,33,697,69,[1,[697,34,697,38,[[],"Dict"]],[[697,39,697,45,[1,[697,39,697,45,[[],"String"]],[]]],[697,46,697,68,[1,[697,46,697,68,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[698,7,699,5,[[698,7,698,23,"canonicalRecords"],[698,26,698,67,[1,[698,26,698,30,[[],"Dict"]],[[698,31,698,41,[1,[698,31,698,41,[[],"ModuleName"]],[]]],[698,42,698,67,[1,[698,43,698,47,[[],"Dict"]],[[698,48,698,54,[1,[698,48,698,54,[[],"String"]],[]]],[698,55,698,66,[1,[698,55,698,66,[[],"KnownRecord"]],[]]]]]]]]]]],[699,7,700,5,[[699,7,699,19,"constructors"],[699,22,699,117,[1,[699,22,699,26,[[],"Dict"]],[[699,27,699,37,[1,[699,27,699,37,[[],"ModuleName"]],[]]],[699,38,699,117,[1,[699,39,699,43,[[],"Dict"]],[[699,44,699,50,[1,[699,44,699,50,[[],"String"]],[]]],[699,51,699,116,[4,[[699,53,699,82,[[699,53,699,67,"customTypeName"],[699,70,699,82,[1,[699,70,699,75,[[],"Maybe"]],[[699,76,699,82,[1,[699,76,699,82,[[],"String"]],[]]]]]]]],[699,84,699,115,[[699,84,699,89,"type_"],[699,92,699,114,[1,[699,92,699,114,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[700,7,701,5,[[700,7,700,20,"functionTypes"],[700,23,700,57,[1,[700,23,700,27,[[],"Dict"]],[[700,28,700,38,[1,[700,28,700,38,[[],"ModuleName"]],[]]],[700,39,700,57,[1,[700,40,700,44,[[],"Dict"]],[[700,45,700,51,[1,[700,45,700,51,[[],"String"]],[]]],[700,52,700,56,[1,[700,52,700,56,[[],"Type"]],[]]]]]]]]]]],[701,7,707,5,[[701,7,701,14,"exposed"],[702,9,706,10,[4,[[702,11,702,55,[[702,11,702,18,"aliases"],[702,21,702,55,[1,[702,21,702,25,[[],"Dict"]],[[702,26,702,32,[1,[702,26,702,32,[[],"String"]],[]]],[702,33,702,55,[1,[702,33,702,55,[[],"TypeWithPositionalVars"]],[]]]]]]]],[703,11,704,9,[[703,11,703,27,"canonicalRecords"],[703,30,703,53,[1,[703,30,703,34,[[],"Dict"]],[[703,35,703,41,[1,[703,35,703,41,[[],"String"]],[]]],[703,42,703,53,[1,[703,42,703,53,[[],"KnownRecord"]],[]]]]]]]],[704,11,705,9,[[704,11,704,23,"constructors"],[704,26,704,103,[1,[704,26,704,30,[[],"Dict"]],[[704,31,704,37,[1,[704,31,704,37,[[],"String"]],[]]],[704,38,704,103,[4,[[704,40,704,69,[[704,40,704,54,"customTypeName"],[704,57,704,69,[1,[704,57,704,62,[[],"Maybe"]],[[704,63,704,69,[1,[704,63,704,69,[[],"String"]],[]]]]]]]],[704,71,704,102,[[704,71,704,76,"type_"],[704,79,704,101,[1,[704,79,704,101,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]],[705,11,706,9,[[705,11,705,24,"functionTypes"],[705,27,705,43,[1,[705,27,705,31,[[],"Dict"]],[[705,32,705,38,[1,[705,32,705,38,[[],"String"]],[]]],[705,39,705,43,[1,[705,39,705,43,[[],"Type"]],[]]]]]]]]]]]]],[707,7,708,5,[[707,7,707,17,"moduleName"],[707,20,707,30,[1,[707,20,707,30,[[],"ModuleName"]],[]]]]],[708,7,709,5,[[708,7,708,20,"fileIsIgnored"],[708,23,708,27,[1,[708,23,708,27,[[],"Bool"]],[]]]]],[709,7,710,5,[[709,7,709,18,"lookupTable"],[709,21,709,42,[1,[709,21,709,42,[[],"ModuleNameLookupTable"]],[]]]]],[710,7,711,5,[[710,7,710,20,"extractSource"],[710,23,710,38,[6,[710,23,710,28,[1,[710,23,710,28,[[],"Range"]],[]]],[710,32,710,38,[1,[710,32,710,38,[[],"String"]],[]]]]]]]]]]]]],[714,1,720,6,[1,[[1,[714,1,716,3,"{-| Context within an expression, which may have additional bindings from `let`\ndeclarations and patterns.\n-}"]],[717,12,717,24,"LocalContext"],[],[718,5,720,6,[4,[[718,7,718,30,[[718,7,718,14,"context"],[718,17,718,30,[1,[718,17,718,30,[[],"ModuleContext"]],[]]]]],[719,7,720,5,[[719,7,719,21,"localFunctions"],[719,24,719,40,[1,[719,24,719,28,[[],"Dict"]],[[719,29,719,35,[1,[719,29,719,35,[[],"String"]],[]]],[719,36,719,40,[1,[719,36,719,40,[[],"Type"]],[]]]]]]]]]]]]]],[723,1,736,14,[0,[[1,[723,1,725,3,"{-| Visit each module, first getting type aliases from all declarations and then\nchecking all expressions for records.\n-}"]],[1,[726,1,726,141,[[726,1,726,14,"moduleVisitor"],[726,17,726,141,[6,[726,17,726,27,[1,[726,17,726,27,[[],"RuleConfig"]],[]]],[726,31,726,141,[6,[726,31,726,68,[1,[726,31,726,52,[["Rule"],"ModuleRuleSchema"]],[[726,53,726,54,[0,"r"]],[726,55,726,68,[1,[726,55,726,68,[[],"ModuleContext"]],[]]]]]],[726,72,726,141,[1,[726,72,726,93,[["Rule"],"ModuleRuleSchema"]],[[726,94,726,127,[5,[726,96,726,97,"r"],[726,99,726,126,[[726,100,726,126,[[726,100,726,120,"hasAtLeastOneVisitor"],[726,123,726,125,[2]]]]]]]],[726,128,726,141,[1,[726,128,726,141,[[],"ModuleContext"]],[]]]]]]]]]]]]],[727,1,736,14,[[727,1,727,14,"moduleVisitor"],[[727,15,727,21,[11,"config"]],[727,22,727,28,[11,"schema"]]],[728,5,736,14,[1,"|>",0,[728,5,728,11,[2,[],"schema"]],[729,12,736,14,[0,[[729,12,729,44,[2,["Rule"],"withDeclarationEnterVisitor"]],[730,13,736,14,[7,[730,14,735,62,[18,[[[730,15,730,16,[11,"d"]],[730,17,730,18,[11,"c"]]],[731,17,735,62,[11,[731,20,731,35,[19,[731,20,731,21,[2,[],"c"]],[731,22,731,35,"fileIsIgnored"]]],[732,21,732,30,[6,[[732,23,732,25,[9,[]]],[732,27,732,28,[2,[],"c"]]]]],[735,21,735,62,[6,[[735,23,735,57,[0,[[735,23,735,46,[2,[],"declarationEnterVisitor"]],[735,47,735,53,[2,[],"config"]],[735,54,735,55,[2,[],"c"]],[735,56,735,57,[2,[],"d"]]]]],[735,59,735,60,[2,[],"c"]]]]]]]]]]]]]]]]]]]]]],[739,1,747,6,[0,[[1,[739,1,740,3,"{-| The initial project context knows of no types.\n-}"]],[1,[741,1,741,39,[[741,1,741,22,"initialProjectContext"],[741,25,741,39,[1,[741,25,741,39,[[],"ProjectContext"]],[]]]]]],[742,1,747,6,[[742,1,742,22,"initialProjectContext"],[],[743,5,747,6,[8,[[743,7,743,27,[[743,7,743,14,"aliases"],[743,17,743,27,[2,["Dict"],"empty"]]]],[744,7,745,5,[[744,7,744,23,"canonicalRecords"],[744,26,744,36,[2,["Dict"],"empty"]]]],[745,7,746,5,[[745,7,745,19,"constructors"],[745,22,745,32,[2,["Dict"],"empty"]]]],[746,7,747,5,[[746,7,746,20,"functionTypes"],[746,23,746,33,[2,["Dict"],"empty"]]]]]]]]]]]],[750,1,783,31,[0,[[1,[750,1,752,3,"{-| Create a `ProjectContext` from a `ModuleContext`, keeping only exposed\nfunctions (since unexposed won't be relevant out of the module).\n-}"]],[1,[753,1,753,71,[[753,1,753,20,"fromModuleToProject"],[753,23,753,71,[1,[753,23,753,42,[["Rule"],"ContextCreator"]],[[753,43,753,56,[1,[753,43,753,56,[[],"ModuleContext"]],[]]],[753,57,753,71,[1,[753,57,753,71,[[],"ProjectContext"]],[]]]]]]]]],[754,1,783,31,[[754,1,754,20,"fromModuleToProject"],[],[755,5,783,31,[1,"|>",0,[755,5,782,10,[0,[[755,5,755,28,[2,["Rule"],"initContextCreator"]],[756,9,782,10,[7,[756,10,781,14,[18,[[[756,11,756,21,[11,"moduleName"]],[756,22,756,33,[8,[[756,24,756,31,"exposed"]]]]],[757,13,781,14,[8,[[757,15,762,62,[[757,15,757,22,"aliases"],[758,17,762,62,[11,[758,20,758,48,[0,[[758,20,758,32,[2,["Dict"],"isEmpty"]],[758,33,758,48,[19,[758,33,758,40,[2,[],"exposed"]],[758,41,758,48,"aliases"]]]]]],[759,21,759,31,[2,["Dict"],"empty"]],[762,21,762,62,[0,[[762,21,762,35,[2,["Dict"],"singleton"]],[762,36,762,46,[2,[],"moduleName"]],[762,47,762,62,[19,[762,47,762,54,[2,[],"exposed"]],[762,55,762,62,"aliases"]]]]]]]]]],[763,15,769,13,[[763,15,763,31,"canonicalRecords"],[764,17,768,71,[11,[764,20,764,57,[0,[[764,20,764,32,[2,["Dict"],"isEmpty"]],[764,33,764,57,[19,[764,33,764,40,[2,[],"exposed"]],[764,41,764,57,"canonicalRecords"]]]]]],[765,21,765,31,[2,["Dict"],"empty"]],[768,21,768,71,[0,[[768,21,768,35,[2,["Dict"],"singleton"]],[768,36,768,46,[2,[],"moduleName"]],[768,47,768,71,[19,[768,47,768,54,[2,[],"exposed"]],[768,55,768,71,"canonicalRecords"]]]]]]]]]],[769,15,775,13,[[769,15,769,27,"constructors"],[770,17,774,67,[11,[770,20,770,53,[0,[[770,20,770,32,[2,["Dict"],"isEmpty"]],[770,33,770,53,[19,[770,33,770,40,[2,[],"exposed"]],[770,41,770,53,"constructors"]]]]]],[771,21,771,31,[2,["Dict"],"empty"]],[774,21,774,67,[0,[[774,21,774,35,[2,["Dict"],"singleton"]],[774,36,774,46,[2,[],"moduleName"]],[774,47,774,67,[19,[774,47,774,54,[2,[],"exposed"]],[774,55,774,67,"constructors"]]]]]]]]]],[775,15,781,13,[[775,15,775,28,"functionTypes"],[776,17,780,68,[11,[776,20,776,54,[0,[[776,20,776,32,[2,["Dict"],"isEmpty"]],[776,33,776,54,[19,[776,33,776,40,[2,[],"exposed"]],[776,41,776,54,"functionTypes"]]]]]],[777,21,777,31,[2,["Dict"],"empty"]],[780,21,780,68,[0,[[780,21,780,35,[2,["Dict"],"singleton"]],[780,36,780,46,[2,[],"moduleName"]],[780,47,780,68,[19,[780,47,780,54,[2,[],"exposed"]],[780,55,780,68,"functionTypes"]]]]]]]]]]]]]]]]]]]]],[783,12,783,31,[2,["Rule"],"withModuleName"]]]]]]]]],[786,1,821,28,[0,[[1,[786,1,787,3,"{-| Create a `ModuleContext` from a `ProjectContext`.\n-}"]],[1,[788,1,788,85,[[788,1,788,20,"fromProjectToModule"],[788,23,788,85,[6,[788,23,788,33,[1,[788,23,788,33,[[],"RuleConfig"]],[]]],[788,37,788,85,[1,[788,37,788,56,[["Rule"],"ContextCreator"]],[[788,57,788,71,[1,[788,57,788,71,[[],"ProjectContext"]],[]]],[788,72,788,85,[1,[788,72,788,85,[[],"ModuleContext"]],[]]]]]]]]]]],[789,1,821,28,[[789,1,789,20,"fromProjectToModule"],[[789,21,789,27,[11,"config"]]],[790,5,821,28,[1,"|>",0,[790,5,820,34,[1,"|>",0,[790,5,819,31,[1,"|>",0,[790,5,818,40,[1,"|>",0,[790,5,817,42,[1,"|>",0,[790,5,816,10,[0,[[790,5,790,28,[2,["Rule"],"initContextCreator"]],[791,9,816,10,[7,[791,10,815,14,[18,[[[791,11,791,22,[11,"lookupTable"]],[791,23,791,42,[11,"sourceCodeExtractor"]],[791,43,791,53,[11,"moduleName"]],[791,54,791,67,[11,"fileIsIgnored"]],[791,68,791,102,[8,[[791,70,791,86,"moduleDefinition"],[791,88,791,100,"declarations"]]]],[791,103,791,117,[11,"projectContext"]]],[792,13,815,14,[16,[[[793,17,804,37,[1,[793,17,793,84,[8,[[793,19,793,26,"aliases"],[793,28,793,44,"canonicalRecords"],[793,46,793,58,"constructors"],[793,60,793,73,"functionTypes"],[793,75,793,82,"exposed"]]]],[794,21,804,37,[0,[[794,21,794,43,[2,[],"declarationListVisitor"]],[794,44,794,50,[2,[],"config"]],[795,25,803,26,[8,[[795,27,795,59,[[795,27,795,34,"aliases"],[795,37,795,59,[19,[795,37,795,51,[2,[],"projectContext"]],[795,52,795,59,"aliases"]]]]],[796,27,797,25,[[796,27,796,43,"canonicalRecords"],[796,46,796,77,[19,[796,46,796,60,[2,[],"projectContext"]],[796,61,796,77,"canonicalRecords"]]]]],[797,27,798,25,[[797,27,797,39,"constructors"],[797,42,797,69,[19,[797,42,797,56,[2,[],"projectContext"]],[797,57,797,69,"constructors"]]]]],[798,27,799,25,[[798,27,798,39,"exposingList"],[798,42,798,88,[1,"<|",1,[798,42,798,57,[2,[],"getExposedNames"]],[798,61,798,88,[0,[[798,61,798,71,[2,["Node"],"value"]],[798,72,798,88,[2,[],"moduleDefinition"]]]]]]]]],[799,27,800,25,[[799,27,799,40,"fileIsIgnored"],[799,43,799,56,[2,[],"fileIsIgnored"]]]],[800,27,801,25,[[800,27,800,40,"functionTypes"],[800,43,800,71,[19,[800,43,800,57,[2,[],"projectContext"]],[800,58,800,71,"functionTypes"]]]]],[801,27,802,25,[[801,27,801,38,"lookupTable"],[801,41,801,52,[2,[],"lookupTable"]]]],[802,27,803,25,[[802,27,802,37,"moduleName"],[802,40,802,50,[2,[],"moduleName"]]]]]]],[804,25,804,37,[2,[],"declarations"]]]]]]]],[806,13,815,14,[8,[[806,15,806,32,[[806,15,806,22,"aliases"],[806,25,806,32,[2,[],"aliases"]]]],[807,15,808,13,[[807,15,807,31,"canonicalRecords"],[807,34,807,50,[2,[],"canonicalRecords"]]]],[808,15,809,13,[[808,15,808,27,"constructors"],[808,30,808,42,[2,[],"constructors"]]]],[809,15,810,13,[[809,15,809,28,"functionTypes"],[809,31,809,44,[2,[],"functionTypes"]]]],[810,15,811,13,[[810,15,810,22,"exposed"],[810,25,810,32,[2,[],"exposed"]]]],[811,15,812,13,[[811,15,811,25,"moduleName"],[811,28,811,38,[2,[],"moduleName"]]]],[812,15,813,13,[[812,15,812,28,"fileIsIgnored"],[812,31,812,44,[2,[],"fileIsIgnored"]]]],[813,15,814,13,[[813,15,813,26,"lookupTable"],[813,29,813,40,[2,[],"lookupTable"]]]],[814,15,815,13,[[814,15,814,28,"extractSource"],[814,31,814,50,[2,[],"sourceCodeExtractor"]]]]]]]]]]]]]]]]]],[817,12,817,42,[2,["Rule"],"withModuleNameLookupTable"]]]],[818,12,818,40,[2,["Rule"],"withSourceCodeExtractor"]]]],[819,12,819,31,[2,["Rule"],"withModuleName"]]]],[820,12,820,34,[2,["Rule"],"withIsFileIgnored"]]]],[821,12,821,28,[2,["Rule"],"withFullAst"]]]]]]]]],[824,1,836,6,[0,[[1,[824,1,825,3,"{-| Combine `ProjectContext`s by taking the union of known type info.\n-}"]],[1,[826,1,826,73,[[826,1,826,20,"foldProjectContexts"],[826,23,826,73,[6,[826,23,826,37,[1,[826,23,826,37,[[],"ProjectContext"]],[]]],[826,41,826,73,[6,[826,41,826,55,[1,[826,41,826,55,[[],"ProjectContext"]],[]]],[826,59,826,73,[1,[826,59,826,73,[[],"ProjectContext"]],[]]]]]]]]]],[827,1,836,6,[[827,1,827,20,"foldProjectContexts"],[[827,21,827,31,[11,"newContext"]],[827,32,827,43,[11,"prevContext"]]],[828,5,836,6,[8,[[828,7,829,58,[[828,7,828,14,"aliases"],[829,9,829,58,[0,[[829,9,829,19,[2,["Dict"],"union"]],[829,20,829,38,[19,[829,20,829,30,[2,[],"newContext"]],[829,31,829,38,"aliases"]]],[829,39,829,58,[19,[829,39,829,50,[2,[],"prevContext"]],[829,51,829,58,"aliases"]]]]]]]],[830,7,832,5,[[830,7,830,23,"canonicalRecords"],[831,9,831,76,[0,[[831,9,831,19,[2,["Dict"],"union"]],[831,20,831,47,[19,[831,20,831,30,[2,[],"newContext"]],[831,31,831,47,"canonicalRecords"]]],[831,48,831,76,[19,[831,48,831,59,[2,[],"prevContext"]],[831,60,831,76,"canonicalRecords"]]]]]]]],[832,7,834,5,[[832,7,832,19,"constructors"],[833,9,833,68,[0,[[833,9,833,19,[2,["Dict"],"union"]],[833,20,833,43,[19,[833,20,833,30,[2,[],"newContext"]],[833,31,833,43,"constructors"]]],[833,44,833,68,[19,[833,44,833,55,[2,[],"prevContext"]],[833,56,833,68,"constructors"]]]]]]]],[834,7,836,5,[[834,7,834,20,"functionTypes"],[835,9,835,70,[0,[[835,9,835,19,[2,["Dict"],"union"]],[835,20,835,44,[19,[835,20,835,30,[2,[],"newContext"]],[835,31,835,44,"functionTypes"]]],[835,45,835,70,[19,[835,45,835,56,[2,[],"prevContext"]],[835,57,835,70,"functionTypes"]]]]]]]]]]]]]]]],[839,1,855,22,[0,[[1,[839,1,841,3,"{-| Return whether or not subrecords should be considered canonical, for\ncreating the type of a full record.\n-}"]],[1,[842,1,842,65,[[842,1,842,29,"subrecordCanonicityForRecord"],[842,32,842,65,[6,[842,32,842,51,[1,[842,32,842,51,[[],"SubrecordCanonicity"]],[]]],[842,55,842,65,[1,[842,55,842,60,[[],"Maybe"]],[[842,61,842,65,[1,[842,61,842,65,[[],"Bool"]],[]]]]]]]]]]],[843,1,855,22,[[843,1,843,29,"subrecordCanonicityForRecord"],[[843,30,843,48,[11,"subrecordTreatment"]]],[844,5,855,22,[17,[[844,10,844,28,[2,[],"subrecordTreatment"]],[[[845,9,845,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[846,13,846,22,[0,[[846,13,846,17,[2,[],"Just"]],[846,18,846,22,[2,[],"True"]]]]]],[[848,9,848,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[849,13,849,22,[0,[[849,13,849,17,[2,[],"Just"]],[849,18,849,22,[2,[],"True"]]]]]],[[851,9,851,22,[12,[[],"AlwaysUnknown"],[]]],[852,13,852,23,[0,[[852,13,852,17,[2,[],"Just"]],[852,18,852,23,[2,[],"False"]]]]]],[[854,9,854,24,[12,[[],"AlwaysCanonical"],[]]],[855,13,855,22,[0,[[855,13,855,17,[2,[],"Just"]],[855,18,855,22,[2,[],"True"]]]]]]]]]]]]]]],[858,1,874,22,[0,[[1,[858,1,860,3,"{-| Return whether or not subrecords should be considered canonical, for\ncreating the type of a field or argument.\n-}"]],[1,[861,1,861,64,[[861,1,861,28,"subrecordCanonicityForField"],[861,31,861,64,[6,[861,31,861,50,[1,[861,31,861,50,[[],"SubrecordCanonicity"]],[]]],[861,54,861,64,[1,[861,54,861,59,[[],"Maybe"]],[[861,60,861,64,[1,[861,60,861,64,[[],"Bool"]],[]]]]]]]]]]],[862,1,874,22,[[862,1,862,28,"subrecordCanonicityForField"],[[862,29,862,47,[11,"subrecordTreatment"]]],[863,5,874,22,[17,[[863,10,863,28,[2,[],"subrecordTreatment"]],[[[864,9,864,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[865,13,865,22,[0,[[865,13,865,17,[2,[],"Just"]],[865,18,865,22,[2,[],"True"]]]]]],[[867,9,867,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[868,13,868,22,[0,[[868,13,868,17,[2,[],"Just"]],[868,18,868,22,[2,[],"True"]]]]]],[[870,9,870,22,[12,[[],"AlwaysUnknown"],[]]],[871,13,871,20,[2,[],"Nothing"]]],[[873,9,873,24,[12,[[],"AlwaysCanonical"],[]]],[874,13,874,22,[0,[[874,13,874,17,[2,[],"Just"]],[874,18,874,22,[2,[],"True"]]]]]]]]]]]]]]],[877,1,1072,10,[0,[[1,[877,1,878,3,"{-| Visit all dependencies and store type order from them.\n-}"]],[1,[879,1,879,93,[[879,1,879,18,"dependencyVisitor"],[879,21,879,93,[6,[879,21,879,31,[1,[879,21,879,31,[[],"RuleConfig"]],[]]],[879,35,879,93,[6,[879,35,879,49,[1,[879,35,879,49,[[],"ProjectContext"]],[]]],[879,53,879,93,[6,[879,53,879,75,[1,[879,53,879,57,[[],"Dict"]],[[879,58,879,64,[1,[879,58,879,64,[[],"String"]],[]]],[879,65,879,75,[1,[879,65,879,75,[[],"Dependency"]],[]]]]]],[879,79,879,93,[1,[879,79,879,93,[[],"ProjectContext"]],[]]]]]]]]]]]],[880,1,1072,10,[[880,1,880,18,"dependencyVisitor"],[[880,19,880,54,[14,[880,20,880,53,[12,[[],"RuleConfig"],[[880,31,880,53,[8,[[880,33,880,51,"subrecordTreatment"]]]]]]]]]],[881,5,1072,10,[16,[[[882,9,1058,14,[0,[[0],[1,[882,9,882,67,[[882,9,882,13,"step"],[882,16,882,67,[6,[882,16,882,31,[1,[882,16,882,31,[["Elm","Docs"],"Module"]],[]]],[882,35,882,67,[6,[882,35,882,49,[1,[882,35,882,49,[[],"ProjectContext"]],[]]],[882,53,882,67,[1,[882,53,882,67,[[],"ProjectContext"]],[]]]]]]]]]],[883,9,1058,14,[[883,9,883,13,"step"],[[883,14,883,58,[14,[883,15,883,57,[13,[883,15,883,50,[8,[[883,17,883,23,"unions"],[883,25,883,32,"aliases"],[883,34,883,40,"values"],[883,42,883,48,"binops"]]]],[883,54,883,57,"mod"]]]]],[883,59,883,62,[11,"acc"]]],[884,13,1058,14,[16,[[[885,17,929,39,[0,[[0],[1,[885,17,885,173,[[885,17,885,36,"recordFromTypeAlias"],[885,39,885,173,[6,[885,39,885,53,[1,[885,39,885,53,[["Elm","Docs"],"Alias"]],[]]],[885,57,885,173,[3,[[885,59,885,87,[1,[885,59,885,63,[[],"List"]],[[885,64,885,87,[3,[[885,66,885,72,[1,[885,66,885,72,[[],"String"]],[]]],[885,74,885,85,[1,[885,74,885,85,[[],"KnownRecord"]],[]]]]]]]]],[885,89,885,171,[1,[885,89,885,93,[[],"List"]],[[885,94,885,171,[3,[[885,96,885,102,[1,[885,96,885,102,[[],"String"]],[]]],[885,104,885,169,[4,[[885,106,885,135,[[885,106,885,120,"customTypeName"],[885,123,885,135,[1,[885,123,885,128,[[],"Maybe"]],[[885,129,885,135,[1,[885,129,885,135,[[],"String"]],[]]]]]]]],[885,137,885,168,[[885,137,885,142,"type_"],[885,145,885,167,[1,[885,145,885,167,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]]]]]]]],[886,17,929,39,[[886,17,886,36,"recordFromTypeAlias"],[[886,37,886,57,[8,[[886,39,886,43,"name"],[886,45,886,49,"args"],[886,51,886,55,"tipe"]]]]],[887,21,929,39,[17,[[887,26,887,30,[2,[],"tipe"]],[[[888,25,888,55,[12,[["Elm","Type"],"Record"],[[888,41,888,47,[11,"fields"]],[888,48,888,55,[12,[[],"Nothing"],[]]]]]],[889,29,919,30,[6,[[889,31,890,79,[1,"|>",0,[889,31,889,101,[0,[[889,31,889,53,[2,[],"knownRecordFromDocType"]],[889,54,889,72,[2,[],"subrecordTreatment"]],[889,73,889,83,[2,[],"moduleName"]],[889,84,889,101,[6,[[889,86,889,92,[2,[],"fields"]],[889,94,889,99,[2,[],"False"]]]]]]]],[890,36,890,79,[0,[[890,36,890,44,[2,["List"],"map"]],[890,45,890,79,[7,[890,46,890,78,[0,[[890,46,890,60,[2,["Tuple"],"mapFirst"]],[890,61,890,78,[7,[890,62,890,77,[18,[[[890,63,890,64,[11,"s"]]],[890,68,890,77,[1,"++",1,[890,68,890,72,[2,[],"name"]],[890,76,890,77,[2,[],"s"]]]]]]]]]]]]]]]]]]],[891,31,918,32,[9,[[891,33,917,34,[6,[[891,35,891,39,[2,[],"name"]],[892,35,916,36,[8,[[892,37,892,61,[[892,37,892,51,"customTypeName"],[892,54,892,61,[2,[],"Nothing"]]]],[893,37,916,35,[[893,37,893,42,"type_"],[894,41,915,50,[1,"|>",0,[894,41,905,51,[0,[[894,41,894,49,[2,["List"],"map"]],[895,45,904,46,[7,[895,46,903,57,[1,">>",1,[895,46,895,58,[2,["Tuple"],"second"]],[896,52,903,57,[0,[[896,52,896,83,[2,[],"docTypeToTypeWithPositionalVars"]],[896,84,896,94,[2,[],"moduleName"]],[898,53,902,54,[8,[[898,55,898,93,[[898,55,898,86,"constrainedTypeVarsAreRespected"],[898,89,898,93,[2,[],"True"]]]],[901,55,902,53,[[901,55,901,79,"subrecordIsAlsoCanonical"],[901,82,901,128,[0,[[901,82,901,109,[2,[],"subrecordCanonicityForField"]],[901,110,901,128,[2,[],"subrecordTreatment"]]]]]]]]]],[903,53,903,57,[2,[],"args"]]]]]]]]],[905,45,905,51,[2,[],"fields"]]]]],[906,48,915,50,[0,[[906,48,906,82,[2,[],"makeFunctionTypeWithPositionalVars"]],[907,49,915,50,[7,[907,50,914,57,[0,[[907,50,907,81,[2,[],"docTypeToTypeWithPositionalVars"]],[907,82,907,92,[2,[],"moduleName"]],[908,53,912,54,[8,[[908,55,908,93,[[908,55,908,86,"constrainedTypeVarsAreRespected"],[908,89,908,93,[2,[],"True"]]]],[911,55,912,53,[[911,55,911,79,"subrecordIsAlsoCanonical"],[911,82,911,129,[0,[[911,82,911,110,[2,[],"subrecordCanonicityForRecord"]],[911,111,911,129,[2,[],"subrecordTreatment"]]]]]]]]]],[913,53,913,57,[2,[],"args"]],[914,53,914,57,[2,[],"tipe"]]]]]]]]]]]]]]]]]]]]]]]]]]],[[921,25,921,56,[12,[["Elm","Type"],"Record"],[[921,41,921,47,[11,"fields"]],[921,48,921,56,[14,[921,49,921,55,[12,[[],"Just"],[[921,54,921,55,[0]]]]]]]]]],[922,29,926,30,[6,[[922,31,923,79,[1,"|>",0,[922,31,922,100,[0,[[922,31,922,53,[2,[],"knownRecordFromDocType"]],[922,54,922,72,[2,[],"subrecordTreatment"]],[922,73,922,83,[2,[],"moduleName"]],[922,84,922,100,[6,[[922,86,922,92,[2,[],"fields"]],[922,94,922,98,[2,[],"True"]]]]]]]],[923,36,923,79,[0,[[923,36,923,44,[2,["List"],"map"]],[923,45,923,79,[7,[923,46,923,78,[0,[[923,46,923,60,[2,["Tuple"],"mapFirst"]],[923,61,923,78,[7,[923,62,923,77,[18,[[[923,63,923,64,[11,"s"]]],[923,68,923,77,[1,"++",1,[923,68,923,72,[2,[],"name"]],[923,76,923,77,[2,[],"s"]]]]]]]]]]]]]]]]]]],[925,31,925,33,[9,[]]]]]]],[[928,25,928,26,[0]],[929,29,929,39,[6,[[929,31,929,33,[9,[]]],[929,35,929,37,[9,[]]]]]]]]]]]]]]]],[931,17,941,22,[0,[[0],[1,[931,17,931,81,[[931,17,931,26,"makeAlias"],[931,29,931,81,[6,[931,29,931,43,[1,[931,29,931,43,[["Elm","Docs"],"Alias"]],[]]],[931,47,931,81,[3,[[931,49,931,55,[1,[931,49,931,55,[[],"String"]],[]]],[931,57,931,79,[1,[931,57,931,79,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[932,17,941,22,[[932,17,932,26,"makeAlias"],[[932,27,932,47,[8,[[932,29,932,33,"name"],[932,35,932,39,"args"],[932,41,932,45,"tipe"]]]]],[933,21,941,22,[6,[[933,23,933,27,[2,[],"name"]],[934,23,940,29,[0,[[934,23,934,54,[2,[],"docTypeToTypeWithPositionalVars"]],[934,55,934,65,[2,[],"moduleName"]],[936,25,938,26,[8,[[936,27,936,66,[[936,27,936,58,"constrainedTypeVarsAreRespected"],[936,61,936,66,[2,[],"False"]]]],[937,27,938,25,[[937,27,937,51,"subrecordIsAlsoCanonical"],[937,54,937,101,[0,[[937,54,937,82,[2,[],"subrecordCanonicityForRecord"]],[937,83,937,101,[2,[],"subrecordTreatment"]]]]]]]]]],[939,25,939,29,[2,[],"args"]],[940,25,940,29,[2,[],"tipe"]]]]]]]]]]]]],[943,17,961,29,[0,[[0],[1,[943,17,943,174,[[943,17,943,32,"makeConstructor"],[943,35,943,174,[6,[943,35,943,57,[1,[943,35,943,57,[[],"TypeWithPositionalVars"]],[]]],[943,61,943,174,[6,[943,61,943,72,[1,[943,61,943,65,[[],"List"]],[[943,66,943,72,[1,[943,66,943,72,[[],"String"]],[]]]]]],[943,76,943,174,[6,[943,76,943,106,[3,[[943,78,943,84,[1,[943,78,943,84,[[],"String"]],[]]],[943,86,943,104,[1,[943,86,943,90,[[],"List"]],[[943,91,943,104,[1,[943,91,943,104,[["Elm","Type"],"Type"]],[]]]]]]]]],[943,110,943,174,[3,[[943,112,943,118,[1,[943,112,943,118,[[],"String"]],[]]],[943,120,943,142,[1,[943,120,943,142,[[],"TypeWithPositionalVars"]],[]]],[943,144,943,172,[1,[943,144,943,148,[[],"List"]],[[943,149,943,172,[3,[[943,151,943,157,[1,[943,151,943,157,[[],"String"]],[]]],[943,159,943,170,[1,[943,159,943,170,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]]]]],[944,17,961,29,[[944,17,944,32,"makeConstructor"],[[944,33,944,39,[11,"return"]],[944,40,944,48,[11,"typeVars"]],[944,49,944,68,[7,[[944,51,944,55,[11,"name"]],[944,57,944,66,[11,"arguments"]]]]]],[945,21,961,29,[1,"|>",0,[945,21,955,34,[0,[[945,21,945,29,[2,["List"],"map"]],[946,25,954,26,[7,[946,26,953,37,[0,[[946,26,946,57,[2,[],"docTypeToTypeWithPositionalVars"]],[946,58,946,68,[2,[],"moduleName"]],[947,29,952,30,[8,[[947,31,947,69,[[947,31,947,62,"constrainedTypeVarsAreRespected"],[947,65,947,69,[2,[],"True"]]]],[950,31,952,29,[[950,31,950,55,"subrecordIsAlsoCanonical"],[951,33,951,79,[0,[[951,33,951,60,[2,[],"subrecordCanonicityForField"]],[951,61,951,79,[2,[],"subrecordTreatment"]]]]]]]]]],[953,29,953,37,[2,[],"typeVars"]]]]]]],[955,25,955,34,[2,[],"arguments"]]]]],[956,28,961,29,[7,[956,29,960,34,[18,[[[956,30,956,32,[11,"ts"]]],[957,33,960,34,[6,[[957,35,957,39,[2,[],"name"]],[958,35,958,79,[0,[[958,35,958,69,[2,[],"makeFunctionTypeWithPositionalVars"]],[958,70,958,76,[2,[],"return"]],[958,77,958,79,[2,[],"ts"]]]]],[959,35,959,86,[0,[[959,35,959,59,[2,[],"makeCustomTypeSubrecords"]],[959,60,959,78,[2,[],"subrecordTreatment"]],[959,79,959,83,[2,[],"name"]],[959,84,959,86,[2,[],"ts"]]]]]]]]]]]]]]]]]]]],[963,17,984,29,[0,[[0],[1,[963,17,963,177,[[963,17,963,40,"functionsFromCustomType"],[963,43,963,177,[6,[963,43,963,57,[1,[963,43,963,57,[["Elm","Docs"],"Union"]],[]]],[963,61,963,177,[3,[[963,63,963,145,[1,[963,63,963,67,[[],"List"]],[[963,68,963,145,[3,[[963,70,963,76,[1,[963,70,963,76,[[],"String"]],[]]],[963,78,963,143,[4,[[963,80,963,109,[[963,80,963,94,"customTypeName"],[963,97,963,109,[1,[963,97,963,102,[[],"Maybe"]],[[963,103,963,109,[1,[963,103,963,109,[[],"String"]],[]]]]]]]],[963,111,963,142,[[963,111,963,116,"type_"],[963,119,963,141,[1,[963,119,963,141,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[963,147,963,175,[1,[963,147,963,151,[[],"List"]],[[963,152,963,175,[3,[[963,154,963,160,[1,[963,154,963,160,[[],"String"]],[]]],[963,162,963,173,[1,[963,162,963,173,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]],[964,17,984,29,[[964,17,964,40,"functionsFromCustomType"],[[964,41,964,61,[8,[[964,43,964,47,"name"],[964,49,964,53,"args"],[964,55,964,59,"tags"]]]]],[965,21,984,29,[0,[[965,21,965,31,[2,["List"],"foldl"]],[966,25,982,26,[7,[966,26,981,37,[18,[[[966,27,966,28,[11,"t"]],[966,29,966,43,[7,[[966,31,966,35,[11,"fAcc"]],[966,37,966,41,[11,"rAcc"]]]]]],[967,29,981,37,[1,"|>",0,[967,29,976,34,[0,[[967,29,967,44,[2,[],"makeConstructor"]],[968,33,974,34,[7,[968,34,973,62,[1,"|>",0,[968,34,972,47,[1,"|>",0,[968,34,971,87,[1,"|>",0,[968,34,970,56,[1,"|>",0,[968,34,969,70,[1,"|>",0,[968,34,968,65,[0,[[968,34,968,42,[2,["List"],"map"]],[968,43,968,60,[7,[968,44,968,59,[0,[[968,44,968,51,[2,[],"TypeVar"]],[968,52,968,59,[2,[],"Nothing"]]]]]]],[968,61,968,65,[2,[],"args"]]]]],[969,40,969,70,[0,[[969,40,969,49,[2,[],"NamedType"]],[969,50,969,70,[6,[[969,52,969,62,[2,[],"moduleName"]],[969,64,969,68,[2,[],"name"]]]]]]]]]],[970,40,970,56,[2,[],"DereferencedType"]]]],[971,40,971,87,[0,[[971,40,971,54,[2,[],"assignTypeVars"]],[971,55,971,87,[7,[971,56,971,86,[0,[[971,56,971,81,[2,[],"makePositionalArgTypeVars"]],[971,82,971,86,[2,[],"args"]]]]]]]]]]]],[972,40,972,47,[2,[],"getType"]]]],[973,40,973,62,[2,[],"TypeWithPositionalVars"]]]]]],[975,33,975,37,[2,[],"args"]],[976,33,976,34,[2,[],"t"]]]]],[977,36,981,37,[7,[977,37,980,42,[18,[[[977,38,977,54,[7,[[977,40,977,41,[11,"n"]],[977,43,977,48,[11,"type_"]],[977,50,977,52,[11,"rs"]]]]]],[978,41,980,42,[6,[[978,43,978,103,[1,"::",1,[978,43,978,95,[6,[[978,45,978,46,[2,[],"n"]],[978,48,978,93,[8,[[978,50,978,76,[[978,50,978,64,"customTypeName"],[978,67,978,76,[0,[[978,67,978,71,[2,[],"Just"]],[978,72,978,76,[2,[],"name"]]]]]]],[978,78,978,92,[[978,78,978,83,"type_"],[978,86,978,91,[2,[],"type_"]]]]]]]]]],[978,99,978,103,[2,[],"fAcc"]]]],[979,43,979,53,[1,"++",1,[979,43,979,45,[2,[],"rs"]],[979,49,979,53,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[983,25,983,35,[6,[[983,27,983,29,[9,[]]],[983,31,983,33,[9,[]]]]]],[984,25,984,29,[2,[],"tags"]]]]]]]]]],[986,17,993,43,[0,[[0],[1,[986,17,986,71,[[986,17,986,34,"functionFromValue"],[986,37,986,71,[6,[986,37,986,51,[1,[986,37,986,51,[["Elm","Docs"],"Value"]],[]]],[986,55,986,71,[3,[[986,57,986,63,[1,[986,57,986,63,[[],"String"]],[]]],[986,65,986,69,[1,[986,65,986,69,[[],"Type"]],[]]]]]]]]]]],[987,17,993,43,[[987,17,987,34,"functionFromValue"],[[987,35,987,49,[8,[[987,37,987,41,"name"],[987,43,987,47,"tipe"]]]]],[988,21,993,43,[1,"|>",0,[988,21,992,29,[0,[[988,21,988,34,[2,[],"docTypeToType"]],[988,35,988,45,[2,[],"moduleName"]],[989,25,991,26,[8,[[989,27,989,65,[[989,27,989,58,"constrainedTypeVarsAreRespected"],[989,61,989,65,[2,[],"True"]]]],[990,27,991,25,[[990,27,990,51,"subrecordIsAlsoCanonical"],[990,54,990,61,[2,[],"Nothing"]]]]]]],[992,25,992,29,[2,[],"tipe"]]]]],[993,28,993,43,[0,[[993,28,993,38,[2,["Tuple"],"pair"]],[993,39,993,43,[2,[],"name"]]]]]]]]]]]],[995,17,1002,43,[0,[[0],[1,[995,17,995,74,[[995,17,995,37,"functionFromOperator"],[995,40,995,74,[6,[995,40,995,54,[1,[995,40,995,54,[["Elm","Docs"],"Binop"]],[]]],[995,58,995,74,[3,[[995,60,995,66,[1,[995,60,995,66,[[],"String"]],[]]],[995,68,995,72,[1,[995,68,995,72,[[],"Type"]],[]]]]]]]]]]],[996,17,1002,43,[[996,17,996,37,"functionFromOperator"],[[996,38,996,52,[8,[[996,40,996,44,"name"],[996,46,996,50,"tipe"]]]]],[997,21,1002,43,[1,"|>",0,[997,21,1001,29,[0,[[997,21,997,34,[2,[],"docTypeToType"]],[997,35,997,45,[2,[],"moduleName"]],[998,25,1000,26,[8,[[998,27,998,65,[[998,27,998,58,"constrainedTypeVarsAreRespected"],[998,61,998,65,[2,[],"True"]]]],[999,27,1000,25,[[999,27,999,51,"subrecordIsAlsoCanonical"],[999,54,999,61,[2,[],"Nothing"]]]]]]],[1001,25,1001,29,[2,[],"tipe"]]]]],[1002,28,1002,43,[0,[[1002,28,1002,38,[2,["Tuple"],"pair"]],[1002,39,1002,43,[2,[],"name"]]]]]]]]]]]],[1004,17,1006,46,[0,[[0],[1,[1004,17,1004,40,[[1004,17,1004,27,"moduleName"],[1004,30,1004,40,[1,[1004,30,1004,40,[[],"ModuleName"]],[]]]]]],[1005,17,1006,46,[[1005,17,1005,27,"moduleName"],[],[1006,21,1006,46,[0,[[1006,21,1006,33,[2,["String"],"split"]],[1006,34,1006,37,[5,"."]],[1006,38,1006,46,[19,[1006,38,1006,41,[2,[],"mod"]],[1006,42,1006,46,"name"]]]]]]]]]]],[1008,17,1013,61,[0,[[0],[1,[1008,17,1008,86,[[1008,17,1008,27,"newAliases"],[1008,30,1008,86,[1,[1008,30,1008,35,[[],"Maybe"]],[[1008,36,1008,86,[3,[[1008,38,1008,48,[1,[1008,38,1008,48,[[],"ModuleName"]],[]]],[1008,50,1008,84,[1,[1008,50,1008,54,[[],"Dict"]],[[1008,55,1008,61,[1,[1008,55,1008,61,[[],"String"]],[]]],[1008,62,1008,84,[1,[1008,62,1008,84,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]],[1009,17,1013,61,[[1009,17,1009,27,"newAliases"],[],[1010,21,1013,61,[1,"|>",0,[1010,21,1012,51,[1,"|>",0,[1010,21,1011,58,[1,"|>",0,[1010,21,1010,47,[0,[[1010,21,1010,29,[2,["List"],"map"]],[1010,30,1010,39,[2,[],"makeAlias"]],[1010,40,1010,47,[2,[],"aliases"]]]]],[1011,28,1011,58,[0,[[1011,28,1011,36,[2,[],"validate"]],[1011,37,1011,58,[7,[1011,38,1011,57,[1,"<<",0,[1011,38,1011,41,[2,[],"not"]],[1011,45,1011,57,[2,["List"],"isEmpty"]]]]]]]]]]],[1012,28,1012,51,[0,[[1012,28,1012,37,[2,["Maybe"],"map"]],[1012,38,1012,51,[2,["Dict"],"fromList"]]]]]]],[1013,28,1013,61,[0,[[1013,28,1013,37,[2,["Maybe"],"map"]],[1013,38,1013,61,[7,[1013,39,1013,60,[0,[[1013,39,1013,49,[2,["Tuple"],"pair"]],[1013,50,1013,60,[2,[],"moduleName"]]]]]]]]]]]]]]]]],[1015,17,1018,103,[1,[1015,17,1015,59,[7,[[1015,19,1015,34,[11,"newAliasRecords"]],[1015,36,1015,57,[11,"newRecordConstructors"]]]]],[1016,21,1018,103,[1,"|>",0,[1016,21,1017,38,[1,"|>",0,[1016,21,1016,57,[0,[[1016,21,1016,29,[2,["List"],"map"]],[1016,30,1016,49,[2,[],"recordFromTypeAlias"]],[1016,50,1016,57,[2,[],"aliases"]]]]],[1017,28,1017,38,[2,["List"],"unzip"]]]],[1018,28,1018,103,[0,[[1018,28,1018,41,[2,["Tuple"],"mapBoth"]],[1018,42,1018,72,[7,[1018,43,1018,71,[1,"<<",0,[1018,43,1018,56,[2,["Dict"],"fromList"]],[1018,60,1018,71,[2,["List"],"concat"]]]]]],[1018,73,1018,103,[7,[1018,74,1018,102,[1,"<<",0,[1018,74,1018,87,[2,["Dict"],"fromList"]],[1018,91,1018,102,[2,["List"],"concat"]]]]]]]]]]]]],[1020,17,1038,30,[1,[1020,17,1020,48,[7,[[1020,19,1020,34,[11,"newConstructors"]],[1020,36,1020,46,[11,"newRecords"]]]]],[1021,21,1038,30,[1,"|>",0,[1021,21,1027,31,[0,[[1021,21,1021,31,[2,["List"],"foldl"]],[1022,25,1025,26,[7,[1022,26,1024,79,[18,[[[1022,27,1022,28,[11,"u"]],[1022,29,1022,43,[7,[[1022,31,1022,35,[11,"fAcc"]],[1022,37,1022,41,[11,"rAcc"]]]]]],[1023,29,1024,79,[1,"|>",0,[1023,29,1023,54,[0,[[1023,29,1023,52,[2,[],"functionsFromCustomType"]],[1023,53,1023,54,[2,[],"u"]]]]],[1024,36,1024,79,[7,[1024,37,1024,78,[18,[[[1024,38,1024,48,[7,[[1024,40,1024,42,[11,"fs"]],[1024,44,1024,46,[11,"rs"]]]]]],[1024,52,1024,78,[6,[[1024,54,1024,64,[1,"++",1,[1024,54,1024,56,[2,[],"fs"]],[1024,60,1024,64,[2,[],"fAcc"]]]],[1024,66,1024,76,[1,"++",1,[1024,66,1024,68,[2,[],"rs"]],[1024,72,1024,76,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[1026,25,1026,35,[6,[[1026,27,1026,29,[9,[]]],[1026,31,1026,33,[9,[]]]]]],[1027,25,1027,31,[2,[],"unions"]]]]],[1028,28,1038,30,[0,[[1028,28,1028,41,[2,["Tuple"],"mapBoth"]],[1029,29,1033,30,[7,[1029,30,1032,69,[1,">>",1,[1029,30,1029,43,[2,["Dict"],"fromList"]],[1030,36,1032,69,[1,">>",1,[1030,36,1030,68,[0,[[1030,36,1030,46,[2,["Dict"],"union"]],[1030,47,1030,68,[2,[],"newRecordConstructors"]]]]],[1031,36,1032,69,[1,">>",1,[1031,36,1031,66,[0,[[1031,36,1031,44,[2,[],"validate"]],[1031,45,1031,66,[7,[1031,46,1031,65,[1,"<<",0,[1031,46,1031,49,[2,[],"not"]],[1031,53,1031,65,[2,["Dict"],"isEmpty"]]]]]]]]],[1032,36,1032,69,[0,[[1032,36,1032,45,[2,["Maybe"],"map"]],[1032,46,1032,69,[7,[1032,47,1032,68,[0,[[1032,47,1032,57,[2,["Tuple"],"pair"]],[1032,58,1032,68,[2,[],"moduleName"]]]]]]]]]]]]]]]]]],[1034,29,1038,30,[7,[1034,30,1037,69,[1,">>",1,[1034,30,1034,43,[2,["Dict"],"fromList"]],[1035,36,1037,69,[1,">>",1,[1035,36,1035,62,[0,[[1035,36,1035,46,[2,["Dict"],"union"]],[1035,47,1035,62,[2,[],"newAliasRecords"]]]]],[1036,36,1037,69,[1,">>",1,[1036,36,1036,66,[0,[[1036,36,1036,44,[2,[],"validate"]],[1036,45,1036,66,[7,[1036,46,1036,65,[1,"<<",0,[1036,46,1036,49,[2,[],"not"]],[1036,53,1036,65,[2,["Dict"],"isEmpty"]]]]]]]]],[1037,36,1037,69,[0,[[1037,36,1037,45,[2,["Maybe"],"map"]],[1037,46,1037,69,[7,[1037,47,1037,68,[0,[[1037,47,1037,57,[2,["Tuple"],"pair"]],[1037,58,1037,68,[2,[],"moduleName"]]]]]]]]]]]]]]]]]]]]]]]]],[1040,17,1043,41,[0,[[0],[1,[1040,17,1040,48,[[1040,17,1040,29,"newOperators"],[1040,32,1040,48,[1,[1040,32,1040,36,[[],"Dict"]],[[1040,37,1040,43,[1,[1040,37,1040,43,[[],"String"]],[]]],[1040,44,1040,48,[1,[1040,44,1040,48,[[],"Type"]],[]]]]]]]]],[1041,17,1043,41,[[1041,17,1041,29,"newOperators"],[],[1042,21,1043,41,[1,"|>",0,[1042,21,1042,57,[0,[[1042,21,1042,29,[2,["List"],"map"]],[1042,30,1042,50,[2,[],"functionFromOperator"]],[1042,51,1042,57,[2,[],"binops"]]]]],[1043,28,1043,41,[2,["Dict"],"fromList"]]]]]]]]],[1045,17,1051,61,[0,[[0],[1,[1045,17,1045,70,[[1045,17,1045,29,"newFunctions"],[1045,32,1045,70,[1,[1045,32,1045,37,[[],"Maybe"]],[[1045,38,1045,70,[3,[[1045,40,1045,50,[1,[1045,40,1045,50,[[],"ModuleName"]],[]]],[1045,52,1045,68,[1,[1045,52,1045,56,[[],"Dict"]],[[1045,57,1045,63,[1,[1045,57,1045,63,[[],"String"]],[]]],[1045,64,1045,68,[1,[1045,64,1045,68,[[],"Type"]],[]]]]]]]]]]]]]]],[1046,17,1051,61,[[1046,17,1046,29,"newFunctions"],[],[1047,21,1051,61,[1,"|>",0,[1047,21,1050,58,[1,"|>",0,[1047,21,1049,51,[1,"|>",0,[1047,21,1048,41,[1,"|>",0,[1047,21,1047,54,[0,[[1047,21,1047,29,[2,["List"],"map"]],[1047,30,1047,47,[2,[],"functionFromValue"]],[1047,48,1047,54,[2,[],"values"]]]]],[1048,28,1048,41,[2,["Dict"],"fromList"]]]],[1049,28,1049,51,[0,[[1049,28,1049,38,[2,["Dict"],"union"]],[1049,39,1049,51,[2,[],"newOperators"]]]]]]],[1050,28,1050,58,[0,[[1050,28,1050,36,[2,[],"validate"]],[1050,37,1050,58,[7,[1050,38,1050,57,[1,"<<",0,[1050,38,1050,41,[2,[],"not"]],[1050,45,1050,57,[2,["Dict"],"isEmpty"]]]]]]]]]]],[1051,28,1051,61,[0,[[1051,28,1051,37,[2,["Maybe"],"map"]],[1051,38,1051,61,[7,[1051,39,1051,60,[0,[[1051,39,1051,49,[2,["Tuple"],"pair"]],[1051,50,1051,60,[2,[],"moduleName"]]]]]]]]]]]]]]]]]],[1053,13,1058,14,[21,[1053,15,1053,18,"acc"],[[1054,19,1055,17,[[1054,19,1054,26,"aliases"],[1054,29,1054,108,[0,[[1054,29,1054,42,[2,["MaybeX"],"unwrap"]],[1054,43,1054,54,[19,[1054,43,1054,46,[2,[],"acc"]],[1054,47,1054,54,"aliases"]]],[1054,55,1054,97,[7,[1054,56,1054,96,[18,[[[1054,57,1054,65,[7,[[1054,59,1054,60,[11,"k"]],[1054,62,1054,63,[11,"v"]]]]]],[1054,69,1054,96,[0,[[1054,69,1054,80,[2,["Dict"],"insert"]],[1054,81,1054,82,[2,[],"k"]],[1054,83,1054,84,[2,[],"v"]],[1054,85,1054,96,[19,[1054,85,1054,88,[2,[],"acc"]],[1054,89,1054,96,"aliases"]]]]]]]]]]],[1054,98,1054,108,[2,[],"newAliases"]]]]]]],[1055,19,1056,17,[[1055,19,1055,35,"canonicalRecords"],[1055,38,1055,135,[0,[[1055,38,1055,51,[2,["MaybeX"],"unwrap"]],[1055,52,1055,72,[19,[1055,52,1055,55,[2,[],"acc"]],[1055,56,1055,72,"canonicalRecords"]]],[1055,73,1055,124,[7,[1055,74,1055,123,[18,[[[1055,75,1055,83,[7,[[1055,77,1055,78,[11,"k"]],[1055,80,1055,81,[11,"v"]]]]]],[1055,87,1055,123,[0,[[1055,87,1055,98,[2,["Dict"],"insert"]],[1055,99,1055,100,[2,[],"k"]],[1055,101,1055,102,[2,[],"v"]],[1055,103,1055,123,[19,[1055,103,1055,106,[2,[],"acc"]],[1055,107,1055,123,"canonicalRecords"]]]]]]]]]]],[1055,125,1055,135,[2,[],"newRecords"]]]]]]],[1056,19,1057,17,[[1056,19,1056,31,"constructors"],[1056,34,1056,128,[0,[[1056,34,1056,47,[2,["MaybeX"],"unwrap"]],[1056,48,1056,64,[19,[1056,48,1056,51,[2,[],"acc"]],[1056,52,1056,64,"constructors"]]],[1056,65,1056,112,[7,[1056,66,1056,111,[18,[[[1056,67,1056,75,[7,[[1056,69,1056,70,[11,"k"]],[1056,72,1056,73,[11,"v"]]]]]],[1056,79,1056,111,[0,[[1056,79,1056,90,[2,["Dict"],"insert"]],[1056,91,1056,92,[2,[],"k"]],[1056,93,1056,94,[2,[],"v"]],[1056,95,1056,111,[19,[1056,95,1056,98,[2,[],"acc"]],[1056,99,1056,111,"constructors"]]]]]]]]]]],[1056,113,1056,128,[2,[],"newConstructors"]]]]]]],[1057,19,1058,13,[[1057,19,1057,32,"functionTypes"],[1057,35,1057,128,[0,[[1057,35,1057,48,[2,["MaybeX"],"unwrap"]],[1057,49,1057,66,[19,[1057,49,1057,52,[2,[],"acc"]],[1057,53,1057,66,"functionTypes"]]],[1057,67,1057,115,[7,[1057,68,1057,114,[18,[[[1057,69,1057,77,[7,[[1057,71,1057,72,[11,"k"]],[1057,74,1057,75,[11,"v"]]]]]],[1057,81,1057,114,[0,[[1057,81,1057,92,[2,["Dict"],"insert"]],[1057,93,1057,94,[2,[],"k"]],[1057,95,1057,96,[2,[],"v"]],[1057,97,1057,114,[19,[1057,97,1057,100,[2,[],"acc"]],[1057,101,1057,114,"functionTypes"]]]]]]]]]]],[1057,116,1057,128,[2,[],"newFunctions"]]]]]]]]]]]]]]]]]]],[1060,5,1072,10,[0,[[1060,5,1060,15,[2,["Dict"],"foldl"]],[1061,9,1072,10,[7,[1061,10,1071,21,[18,[[[1061,11,1061,12,[0]],[1061,13,1061,16,[11,"dep"]],[1061,17,1061,20,[11,"acc"]]],[1062,13,1071,21,[1,"|>",0,[1062,13,1063,57,[1,"|>",0,[1062,13,1062,35,[0,[[1062,13,1062,31,[2,["Dependency"],"modules"]],[1062,32,1062,35,[2,[],"dep"]]]]],[1063,20,1063,57,[0,[[1063,20,1063,30,[2,["List"],"foldl"]],[1063,31,1063,35,[2,[],"step"]],[1063,36,1063,57,[2,[],"initialProjectContext"]]]]]]],[1064,20,1071,21,[7,[1064,21,1070,26,[18,[[[1064,22,1064,80,[8,[[1064,24,1064,31,"aliases"],[1064,33,1064,49,"canonicalRecords"],[1064,51,1064,63,"constructors"],[1064,65,1064,78,"functionTypes"]]]]],[1065,25,1070,26,[21,[1065,27,1065,30,"acc"],[[1066,31,1067,29,[[1066,31,1066,38,"aliases"],[1066,41,1066,71,[0,[[1066,41,1066,51,[2,["Dict"],"union"]],[1066,52,1066,59,[2,[],"aliases"]],[1066,60,1066,71,[19,[1066,60,1066,63,[2,[],"acc"]],[1066,64,1066,71,"aliases"]]]]]]]],[1067,31,1068,29,[[1067,31,1067,47,"canonicalRecords"],[1067,50,1067,98,[0,[[1067,50,1067,60,[2,["Dict"],"union"]],[1067,61,1067,77,[2,[],"canonicalRecords"]],[1067,78,1067,98,[19,[1067,78,1067,81,[2,[],"acc"]],[1067,82,1067,98,"canonicalRecords"]]]]]]]],[1068,31,1069,29,[[1068,31,1068,43,"constructors"],[1068,46,1068,86,[0,[[1068,46,1068,56,[2,["Dict"],"union"]],[1068,57,1068,69,[2,[],"constructors"]],[1068,70,1068,86,[19,[1068,70,1068,73,[2,[],"acc"]],[1068,74,1068,86,"constructors"]]]]]]]],[1069,31,1070,25,[[1069,31,1069,44,"functionTypes"],[1069,47,1069,89,[0,[[1069,47,1069,57,[2,["Dict"],"union"]],[1069,58,1069,71,[2,[],"functionTypes"]],[1069,72,1069,89,[19,[1069,72,1069,75,[2,[],"acc"]],[1069,76,1069,89,"functionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1075,1,1086,34,[0,[[1,[1075,1,1079,3,"{-| Given the current module name, whether or not a top-level record type (if\n`Just`) and subrecords (if `Just True`) found are in canonical order, and a dict\nof positional type vars, convert an `Elm.Type.Type` to a\n`TypeWithPositionalVars`.\n-}"]],[1,[1080,1,1080,188,[[1080,1,1080,32,"docTypeToTypeWithPositionalVars"],[1080,35,1080,188,[6,[1080,35,1080,45,[1,[1080,35,1080,45,[[],"ModuleName"]],[]]],[1080,49,1080,188,[6,[1080,49,1080,130,[4,[[1080,51,1080,89,[[1080,51,1080,82,"constrainedTypeVarsAreRespected"],[1080,85,1080,89,[1,[1080,85,1080,89,[[],"Bool"]],[]]]]],[1080,91,1080,129,[[1080,91,1080,115,"subrecordIsAlsoCanonical"],[1080,118,1080,128,[1,[1080,118,1080,123,[[],"Maybe"]],[[1080,124,1080,128,[1,[1080,124,1080,128,[[],"Bool"]],[]]]]]]]]]]],[1080,134,1080,188,[6,[1080,134,1080,145,[1,[1080,134,1080,138,[[],"List"]],[[1080,139,1080,145,[1,[1080,139,1080,145,[[],"String"]],[]]]]]],[1080,149,1080,188,[6,[1080,149,1080,162,[1,[1080,149,1080,162,[["Elm","Type"],"Type"]],[]]],[1080,166,1080,188,[1,[1080,166,1080,188,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[1081,1,1086,34,[[1081,1,1081,32,"docTypeToTypeWithPositionalVars"],[[1081,33,1081,43,[11,"moduleName"]],[1081,44,1081,52,[11,"settings"]],[1081,53,1081,61,[11,"typeArgs"]]],[1082,5,1086,34,[1,">>",1,[1082,5,1082,38,[0,[[1082,5,1082,18,[2,[],"docTypeToType"]],[1082,19,1082,29,[2,[],"moduleName"]],[1082,30,1082,38,[2,[],"settings"]]]]],[1083,12,1086,34,[1,">>",1,[1083,12,1083,28,[2,[],"DereferencedType"]],[1084,12,1086,34,[1,">>",1,[1084,12,1084,63,[0,[[1084,12,1084,26,[2,[],"assignTypeVars"]],[1084,27,1084,63,[7,[1084,28,1084,62,[0,[[1084,28,1084,53,[2,[],"makePositionalArgTypeVars"]],[1084,54,1084,62,[2,[],"typeArgs"]]]]]]]]]],[1085,12,1086,34,[1,">>",1,[1085,12,1085,19,[2,[],"getType"]],[1086,12,1086,34,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]]]],[1089,1,1125,13,[0,[[1,[1089,1,1092,3,"{-| Given how to treat subrecords, the current module names, and a list of\nfields/whether the record is generic, generate all `KnownRecord`s from a\n`Elm.Type.Type`.\n-}"]],[1,[1093,1,1093,135,[[1093,1,1093,23,"knownRecordFromDocType"],[1093,26,1093,135,[6,[1093,26,1093,45,[1,[1093,26,1093,45,[[],"SubrecordCanonicity"]],[]]],[1093,49,1093,135,[6,[1093,49,1093,59,[1,[1093,49,1093,59,[[],"ModuleName"]],[]]],[1093,63,1093,135,[6,[1093,63,1093,103,[3,[[1093,65,1093,95,[1,[1093,65,1093,69,[[],"List"]],[[1093,70,1093,95,[3,[[1093,72,1093,78,[1,[1093,72,1093,78,[[],"String"]],[]]],[1093,80,1093,93,[1,[1093,80,1093,93,[["Elm","Type"],"Type"]],[]]]]]]]]],[1093,97,1093,101,[1,[1093,97,1093,101,[[],"Bool"]],[]]]]]],[1093,107,1093,135,[1,[1093,107,1093,111,[[],"List"]],[[1093,112,1093,135,[3,[[1093,114,1093,120,[1,[1093,114,1093,120,[[],"String"]],[]]],[1093,122,1093,133,[1,[1093,122,1093,133,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1094,1,1125,13,[[1094,1,1094,23,"knownRecordFromDocType"],[[1094,24,1094,42,[11,"subrecordTreatment"]],[1094,43,1094,53,[11,"moduleName"]],[1094,54,1094,75,[7,[[1094,56,1094,62,[11,"fields"]],[1094,64,1094,73,[11,"isGeneric"]]]]]],[1095,5,1125,13,[1,"|>",0,[1095,5,1116,13,[1,"|>",0,[1095,5,1110,15,[0,[[1095,5,1095,23,[2,["ListX"],"indexedFoldl"]],[1096,9,1108,10,[7,[1096,10,1107,18,[18,[[[1096,11,1096,12,[11,"i"]],[1096,13,1096,21,[7,[[1096,15,1096,16,[11,"f"]],[1096,18,1096,19,[11,"t"]]]]]],[1097,13,1107,18,[0,[[1097,13,1097,24,[2,["Dict"],"insert"]],[1097,25,1097,26,[2,[],"f"]],[1098,17,1107,18,[6,[[1098,19,1098,20,[2,[],"i"]],[1099,19,1106,22,[0,[[1099,19,1099,32,[2,[],"docTypeToType"]],[1099,33,1099,43,[2,[],"moduleName"]],[1100,21,1105,22,[8,[[1101,23,1101,62,[[1101,23,1101,54,"constrainedTypeVarsAreRespected"],[1101,57,1101,62,[2,[],"False"]]]],[1104,23,1105,21,[[1104,23,1104,47,"subrecordIsAlsoCanonical"],[1104,50,1104,96,[0,[[1104,50,1104,77,[2,[],"subrecordCanonicityForField"]],[1104,78,1104,96,[2,[],"subrecordTreatment"]]]]]]]]]],[1106,21,1106,22,[2,[],"t"]]]]]]]]]]]]]]]],[1109,9,1109,19,[2,["Dict"],"empty"]],[1110,9,1110,15,[2,[],"fields"]]]]],[1111,12,1116,13,[7,[1111,13,1115,18,[18,[[[1111,14,1111,19,[11,"order"]]],[1112,17,1115,18,[8,[[1112,19,1112,32,[[1112,19,1112,24,"order"],[1112,27,1112,32,[2,[],"order"]]]],[1113,19,1114,17,[[1113,19,1113,28,"isGeneric"],[1113,31,1113,40,[2,[],"isGeneric"]]]],[1114,19,1115,17,[[1114,19,1114,30,"isSubrecord"],[1114,33,1114,38,[2,[],"False"]]]]]]]]]]]]]],[1117,12,1125,13,[7,[1117,13,1124,34,[18,[[[1117,14,1117,15,[11,"k"]]],[1118,17,1124,34,[11,[1118,20,1118,57,[1,"==",2,[1118,20,1118,38,[2,[],"subrecordTreatment"]],[1118,42,1118,57,[2,[],"AlwaysCanonical"]]]],[1119,21,1120,127,[1,"::",1,[1119,21,1119,30,[6,[[1119,23,1119,25,[5,""]],[1119,27,1119,28,[2,[],"k"]]]]],[1120,28,1120,127,[0,[[1120,28,1120,42,[2,["List"],"concatMap"]],[1120,43,1120,105,[7,[1120,44,1120,104,[18,[[[1120,45,1120,60,[7,[[1120,47,1120,48,[11,"f"]],[1120,50,1120,58,[7,[[1120,52,1120,53,[0]],[1120,55,1120,56,[11,"t"]]]]]]]]],[1120,64,1120,104,[0,[[1120,64,1120,86,[2,[],"makeSubrecordsFromType"]],[1120,87,1120,91,[2,[],"True"]],[1120,92,1120,102,[7,[1120,93,1120,101,[1,"++",1,[1120,93,1120,96,[5,"."]],[1120,100,1120,101,[2,[],"f"]]]]]],[1120,103,1120,104,[2,[],"t"]]]]]]]]]],[1120,106,1120,127,[7,[1120,107,1120,126,[0,[[1120,107,1120,118,[2,["Dict"],"toList"]],[1120,119,1120,126,[19,[1120,119,1120,120,[2,[],"k"]],[1120,121,1120,126,"order"]]]]]]]]]]]]],[1124,21,1124,34,[9,[[1124,23,1124,32,[6,[[1124,25,1124,27,[5,""]],[1124,29,1124,30,[2,[],"k"]]]]]]]]]]]]]]]]]]]]]],[1128,1,1174,15,[0,[[1,[1128,1,1130,3,"{-| Given whether or not to descend beyond the initial type, a name prefix and a\ntype, generate `KnownRecord`s for records in that type.\n-}"]],[1,[1131,1,1131,80,[[1131,1,1131,23,"makeSubrecordsFromType"],[1131,26,1131,80,[6,[1131,26,1131,30,[1,[1131,26,1131,30,[[],"Bool"]],[]]],[1131,34,1131,80,[6,[1131,34,1131,40,[1,[1131,34,1131,40,[[],"String"]],[]]],[1131,44,1131,80,[6,[1131,44,1131,48,[1,[1131,44,1131,48,[[],"Type"]],[]]],[1131,52,1131,80,[1,[1131,52,1131,56,[[],"List"]],[[1131,57,1131,80,[3,[[1131,59,1131,65,[1,[1131,59,1131,65,[[],"String"]],[]]],[1131,67,1131,78,[1,[1131,67,1131,78,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1132,1,1174,15,[[1132,1,1132,23,"makeSubrecordsFromType"],[[1132,24,1132,31,[11,"recurse"]],[1132,32,1132,42,[11,"namePrefix"]],[1132,43,1132,48,[11,"type_"]]],[1133,5,1174,15,[16,[[[1134,9,1140,26,[0,[[0],[1,[1134,9,1134,66,[[1134,9,1134,11,"go"],[1134,14,1134,66,[6,[1134,14,1134,26,[1,[1134,14,1134,19,[[],"Maybe"]],[[1134,20,1134,26,[1,[1134,20,1134,26,[[],"String"]],[]]]]]],[1134,30,1134,66,[6,[1134,30,1134,34,[1,[1134,30,1134,34,[[],"Type"]],[]]],[1134,38,1134,66,[1,[1134,38,1134,42,[[],"List"]],[[1134,43,1134,66,[3,[[1134,45,1134,51,[1,[1134,45,1134,51,[[],"String"]],[]]],[1134,53,1134,64,[1,[1134,53,1134,64,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]],[1135,9,1140,26,[[1135,9,1135,11,"go"],[[1135,12,1135,13,[11,"s"]]],[1136,13,1140,26,[11,[1136,16,1136,23,[2,[],"recurse"]],[1137,17,1137,110,[0,[[1137,17,1137,39,[2,[],"makeSubrecordsFromType"]],[1137,40,1137,47,[2,[],"recurse"]],[1137,48,1137,110,[7,[1137,49,1137,109,[0,[[1137,49,1137,62,[2,["MaybeX"],"unwrap"]],[1137,63,1137,73,[2,[],"namePrefix"]],[1137,74,1137,107,[7,[1137,75,1137,106,[18,[[[1137,76,1137,82,[11,"subRec"]]],[1137,86,1137,106,[1,"++",1,[1137,86,1137,96,[2,[],"namePrefix"]],[1137,100,1137,106,[2,[],"subRec"]]]]]]]]],[1137,108,1137,109,[2,[],"s"]]]]]]]]]],[1140,17,1140,26,[0,[[1140,17,1140,23,[2,[],"always"]],[1140,24,1140,26,[9,[]]]]]]]]]]]]]],[1142,5,1174,15,[17,[[1142,10,1142,15,[2,[],"type_"]],[[[1143,9,1143,34,[12,[[],"FunctionType"],[[1143,22,1143,34,[8,[[1143,24,1143,28,"from"],[1143,30,1143,32,"to"]]]]]]],[1144,13,1144,45,[1,"++",1,[1144,13,1144,28,[0,[[1144,13,1144,15,[2,[],"go"]],[1144,16,1144,23,[2,[],"Nothing"]],[1144,24,1144,28,[2,[],"from"]]]]],[1144,32,1144,45,[0,[[1144,32,1144,34,[2,[],"go"]],[1144,35,1144,42,[2,[],"Nothing"]],[1144,43,1144,45,[2,[],"to"]]]]]]]],[[1146,9,1146,21,[12,[[],"TupleType"],[[1146,19,1146,21,[11,"ts"]]]]],[1147,13,1147,43,[0,[[1147,13,1147,27,[2,["List"],"concatMap"]],[1147,28,1147,40,[7,[1147,29,1147,39,[0,[[1147,29,1147,31,[2,[],"go"]],[1147,32,1147,39,[2,[],"Nothing"]]]]]]],[1147,41,1147,43,[2,[],"ts"]]]]]],[[1149,9,1149,20,[12,[[],"ListType"],[[1149,18,1149,20,[11,"t_"]]]]],[1150,13,1150,26,[0,[[1150,13,1150,15,[2,[],"go"]],[1150,16,1150,23,[2,[],"Nothing"]],[1150,24,1150,26,[2,[],"t_"]]]]]],[[1152,9,1152,39,[12,[[],"RecordType"],[[1152,20,1152,39,[8,[[1152,22,1152,29,"generic"],[1152,31,1152,37,"fields"]]]]]]],[1153,13,1168,80,[1,"::",1,[1153,13,1167,14,[6,[[1153,15,1153,25,[2,[],"namePrefix"]],[1154,15,1166,16,[8,[[1154,17,1163,31,[[1154,17,1154,22,"order"],[1155,21,1163,31,[0,[[1155,21,1155,39,[2,["ListX"],"indexedFoldl"]],[1156,25,1161,26,[7,[1156,26,1160,34,[18,[[[1156,27,1156,28,[11,"i"]],[1156,29,1156,37,[7,[[1156,31,1156,32,[11,"f"]],[1156,34,1156,35,[11,"t"]]]]]],[1157,29,1160,34,[0,[[1157,29,1157,40,[2,["Dict"],"insert"]],[1157,41,1157,42,[2,[],"f"]],[1158,33,1160,34,[6,[[1158,35,1158,36,[2,[],"i"]],[1159,35,1159,36,[2,[],"t"]]]]]]]]]]]]],[1162,25,1162,35,[2,["Dict"],"empty"]],[1163,25,1163,31,[2,[],"fields"]]]]]]],[1164,17,1165,15,[[1164,17,1164,26,"isGeneric"],[1164,29,1164,47,[1,"/=",2,[1164,29,1164,36,[2,[],"generic"]],[1164,40,1164,47,[2,[],"Nothing"]]]]]],[1165,17,1166,15,[[1165,17,1165,28,"isSubrecord"],[1165,31,1165,35,[2,[],"True"]]]]]]]]]],[1168,20,1168,80,[0,[[1168,20,1168,34,[2,["List"],"concatMap"]],[1168,35,1168,73,[7,[1168,36,1168,72,[18,[[[1168,37,1168,45,[7,[[1168,39,1168,40,[11,"f"]],[1168,42,1168,43,[11,"t"]]]]]],[1168,49,1168,72,[0,[[1168,49,1168,51,[2,[],"go"]],[1168,52,1168,70,[7,[1168,53,1168,69,[1,"<|",1,[1168,53,1168,57,[2,[],"Just"]],[1168,61,1168,69,[1,"++",1,[1168,61,1168,64,[5,"."]],[1168,68,1168,69,[2,[],"f"]]]]]]]],[1168,71,1168,72,[2,[],"t"]]]]]]]]]],[1168,74,1168,80,[2,[],"fields"]]]]]]]],[[1170,9,1170,10,[0]],[1174,13,1174,15,[9,[]]]]]]]]]]]]]]]],[1177,1,1237,58,[0,[[1,[1177,1,1180,3,"{-| Given the current module name and whether or not a top-level record type (if\n`Just`) and subrecords (if `Just True`) found are in canonical order, convert an\n`Elm.Type.Type` to a `Type`.\n-}"]],[1,[1181,1,1181,137,[[1181,1,1181,14,"docTypeToType"],[1181,17,1181,137,[6,[1181,17,1181,27,[1,[1181,17,1181,27,[[],"ModuleName"]],[]]],[1181,31,1181,137,[6,[1181,31,1181,112,[4,[[1181,33,1181,71,[[1181,33,1181,64,"constrainedTypeVarsAreRespected"],[1181,67,1181,71,[1,[1181,67,1181,71,[[],"Bool"]],[]]]]],[1181,73,1181,111,[[1181,73,1181,97,"subrecordIsAlsoCanonical"],[1181,100,1181,110,[1,[1181,100,1181,105,[[],"Maybe"]],[[1181,106,1181,110,[1,[1181,106,1181,110,[[],"Bool"]],[]]]]]]]]]]],[1181,116,1181,137,[6,[1181,116,1181,129,[1,[1181,116,1181,129,[["Elm","Type"],"Type"]],[]]],[1181,133,1181,137,[1,[1181,133,1181,137,[[],"Type"]],[]]]]]]]]]]]],[1182,1,1237,58,[[1182,1,1182,14,"docTypeToType"],[[1182,15,1182,25,[11,"moduleName"]],[1182,26,1182,101,[14,[1182,27,1182,100,[13,[1182,27,1182,88,[8,[[1182,29,1182,60,"constrainedTypeVarsAreRespected"],[1182,62,1182,86,"subrecordIsAlsoCanonical"]]]],[1182,92,1182,100,"settings"]]]]],[1182,102,1182,107,[11,"type_"]]],[1183,5,1237,58,[16,[[[1184,9,1189,21,[0,[[0],[1,[1184,9,1184,35,[[1184,9,1184,11,"go"],[1184,14,1184,35,[6,[1184,14,1184,27,[1,[1184,14,1184,27,[["Elm","Type"],"Type"]],[]]],[1184,31,1184,35,[1,[1184,31,1184,35,[[],"Type"]],[]]]]]]]],[1185,9,1189,21,[[1185,9,1185,11,"go"],[],[1186,13,1189,21,[1,"|>",0,[1186,13,1186,60,[0,[[1186,13,1186,26,[2,["MaybeX"],"filter"]],[1186,27,1186,35,[2,[],"identity"]],[1186,36,1186,60,[2,[],"subrecordIsAlsoCanonical"]]]]],[1187,20,1189,21,[7,[1187,21,1188,111,[18,[[[1187,22,1187,41,[11,"subrecordStillCanon"]]],[1188,25,1188,111,[0,[[1188,25,1188,38,[2,[],"docTypeToType"]],[1188,39,1188,49,[2,[],"moduleName"]],[1188,50,1188,111,[21,[1188,52,1188,60,"settings"],[[1188,63,1188,110,[[1188,63,1188,87,"subrecordIsAlsoCanonical"],[1188,90,1188,109,[2,[],"subrecordStillCanon"]]]]]]]]]]]]]]]]]]]]]],[1191,9,1198,28,[0,[[0],[1,[1191,9,1191,76,[[1191,9,1191,17,"makeList"],[1191,20,1191,76,[6,[1191,20,1191,30,[1,[1191,20,1191,30,[[],"ModuleName"]],[]]],[1191,34,1191,76,[6,[1191,34,1191,40,[1,[1191,34,1191,40,[[],"String"]],[]]],[1191,44,1191,76,[6,[1191,44,1191,62,[1,[1191,44,1191,48,[[],"List"]],[[1191,49,1191,62,[1,[1191,49,1191,62,[["Elm","Type"],"Type"]],[]]]]]],[1191,66,1191,76,[1,[1191,66,1191,71,[[],"Maybe"]],[[1191,72,1191,76,[1,[1191,72,1191,76,[[],"Type"]],[]]]]]]]]]]]]]]],[1192,9,1198,28,[[1192,9,1192,17,"makeList"],[[1192,18,1192,21,[11,"mod"]],[1192,22,1192,26,[11,"name"]],[1192,27,1192,31,[11,"args"]]],[1193,13,1198,28,[17,[[1193,18,1193,37,[6,[[1193,20,1193,23,[2,[],"mod"]],[1193,25,1193,29,[2,[],"name"]],[1193,31,1193,35,[2,[],"args"]]]]],[[[1194,17,1194,53,[7,[[1194,19,1194,29,[10,[[1194,21,1194,27,[3,"List"]]]]],[1194,31,1194,37,[3,"List"]],[1194,39,1194,51,[10,[[1194,41,1194,49,[11,"listType"]]]]]]]],[1195,21,1195,52,[1,"<|",1,[1195,21,1195,25,[2,[],"Just"]],[1195,29,1195,52,[1,"<|",1,[1195,29,1195,37,[2,[],"ListType"]],[1195,41,1195,52,[0,[[1195,41,1195,43,[2,[],"go"]],[1195,44,1195,52,[2,[],"listType"]]]]]]]]]],[[1197,17,1197,18,[0]],[1198,21,1198,28,[2,[],"Nothing"]]]]]]]]]]]]],[1200,5,1237,58,[17,[[1200,10,1200,15,[2,[],"type_"]],[[[1201,9,1201,32,[12,[["Elm","Type"],"Lambda"],[[1201,25,1201,29,[11,"from"]],[1201,30,1201,32,[11,"to"]]]]],[1202,13,1202,56,[0,[[1202,13,1202,25,[2,[],"FunctionType"]],[1202,26,1202,56,[8,[[1202,28,1202,42,[[1202,28,1202,32,"from"],[1202,35,1202,42,[0,[[1202,35,1202,37,[2,[],"go"]],[1202,38,1202,42,[2,[],"from"]]]]]]],[1202,44,1202,55,[[1202,44,1202,46,"to"],[1202,49,1202,54,[0,[[1202,49,1202,51,[2,[],"go"]],[1202,52,1202,54,[2,[],"to"]]]]]]]]]]]]]],[[1204,9,1204,26,[12,[["Elm","Type"],"Tuple"],[[1204,24,1204,26,[11,"ts"]]]]],[1205,13,1205,40,[1,"<|",1,[1205,13,1205,22,[2,[],"TupleType"]],[1205,26,1205,40,[0,[[1205,26,1205,34,[2,["List"],"map"]],[1205,35,1205,37,[2,[],"go"]],[1205,38,1205,40,[2,[],"ts"]]]]]]]],[[1207,9,1207,37,[12,[["Elm","Type"],"Type"],[[1207,23,1207,32,[11,"qualified"]],[1207,33,1207,37,[11,"args"]]]]],[1209,13,1223,21,[1,"|>",0,[1209,13,1219,63,[1,"|>",0,[1209,13,1218,22,[1,"|>",0,[1209,13,1210,36,[1,"|>",0,[1209,13,1209,39,[0,[[1209,13,1209,25,[2,["String"],"split"]],[1209,26,1209,29,[5,"."]],[1209,30,1209,39,[2,[],"qualified"]]]]],[1210,20,1210,36,[2,["ListX"],"unconsLast"]]]],[1211,20,1218,22,[0,[[1211,20,1211,29,[2,["Maybe"],"map"]],[1212,21,1218,22,[7,[1212,22,1217,37,[18,[[[1212,23,1212,31,[7,[[1212,25,1212,26,[11,"n"]],[1212,28,1212,29,[11,"m"]]]]]],[1213,25,1217,37,[11,[1213,28,1213,35,[1,"==",2,[1213,28,1213,29,[2,[],"m"]],[1213,33,1213,35,[9,[]]]]],[1214,29,1214,46,[6,[[1214,31,1214,41,[2,[],"moduleName"]],[1214,43,1214,44,[2,[],"n"]]]]],[1217,29,1217,37,[6,[[1217,31,1217,32,[2,[],"m"]],[1217,34,1217,35,[2,[],"n"]]]]]]]]]]]]]]]]],[1219,20,1219,63,[0,[[1219,20,1219,37,[2,["Maybe"],"withDefault"]],[1219,38,1219,63,[6,[[1219,40,1219,50,[2,[],"moduleName"]],[1219,52,1219,61,[2,[],"qualified"]]]]]]]]]],[1220,20,1223,21,[7,[1220,21,1222,107,[18,[[[1220,22,1220,35,[7,[[1220,24,1220,27,[11,"mod"]],[1220,29,1220,33,[11,"name"]]]]]],[1221,25,1222,107,[1,"|>",0,[1221,25,1221,47,[0,[[1221,25,1221,33,[2,[],"makeList"]],[1221,34,1221,37,[2,[],"mod"]],[1221,38,1221,42,[2,[],"name"]],[1221,43,1221,47,[2,[],"args"]]]]],[1222,32,1222,107,[0,[[1222,32,1222,54,[2,["MaybeX"],"withDefaultLazy"]],[1222,55,1222,107,[7,[1222,56,1222,106,[18,[[[1222,57,1222,59,[1]]],[1222,63,1222,106,[1,"<|",1,[1222,63,1222,86,[0,[[1222,63,1222,72,[2,[],"NamedType"]],[1222,73,1222,86,[6,[[1222,75,1222,78,[2,[],"mod"]],[1222,80,1222,84,[2,[],"name"]]]]]]]],[1222,90,1222,106,[0,[[1222,90,1222,98,[2,["List"],"map"]],[1222,99,1222,101,[2,[],"go"]],[1222,102,1222,106,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]],[[1225,9,1225,39,[12,[["Elm","Type"],"Record"],[[1225,25,1225,31,[11,"fields"]],[1225,32,1225,39,[11,"generic"]]]]],[1226,13,1234,18,[0,[[1226,13,1226,23,[2,[],"RecordType"]],[1227,17,1234,18,[8,[[1227,19,1231,56,[[1227,19,1227,26,"generic"],[1231,21,1231,56,[0,[[1231,21,1231,30,[2,["Maybe"],"map"]],[1231,31,1231,48,[7,[1231,32,1231,47,[0,[[1231,32,1231,39,[2,[],"TypeVar"]],[1231,40,1231,47,[2,[],"Nothing"]]]]]]],[1231,49,1231,56,[2,[],"generic"]]]]]]],[1232,19,1233,17,[[1232,19,1232,28,"canonical"],[1232,31,1232,66,[1,"/=",2,[1232,31,1232,55,[2,[],"subrecordIsAlsoCanonical"]],[1232,59,1232,66,[2,[],"Nothing"]]]]]],[1233,19,1234,17,[[1233,19,1233,25,"fields"],[1233,28,1233,64,[0,[[1233,28,1233,36,[2,["List"],"map"]],[1233,37,1233,57,[7,[1233,38,1233,56,[0,[[1233,38,1233,53,[2,["Tuple"],"mapSecond"]],[1233,54,1233,56,[2,[],"go"]]]]]]],[1233,58,1233,64,[2,[],"fields"]]]]]]]]]]]]]],[[1236,9,1236,23,[12,[["Elm","Type"],"Var"],[[1236,22,1236,23,[11,"s"]]]]],[1237,13,1237,58,[0,[[1237,13,1237,24,[2,[],"makeTypeVar"]],[1237,25,1237,56,[2,[],"constrainedTypeVarsAreRespected"]],[1237,57,1237,58,[2,[],"s"]]]]]]]]]]]]]]]]]],[1240,1,1261,31,[0,[[1,[1240,1,1241,3,"{-| Make a `TypeVar` from a string.\n-}"]],[1,[1242,1,1242,37,[[1242,1,1242,12,"makeTypeVar"],[1242,15,1242,37,[6,[1242,15,1242,19,[1,[1242,15,1242,19,[[],"Bool"]],[]]],[1242,23,1242,37,[6,[1242,23,1242,29,[1,[1242,23,1242,29,[[],"String"]],[]]],[1242,33,1242,37,[1,[1242,33,1242,37,[[],"Type"]],[]]]]]]]]]],[1243,1,1261,31,[[1243,1,1243,12,"makeTypeVar"],[[1243,13,1243,44,[11,"constrainedTypeVarsAreRespected"]],[1243,45,1243,46,[11,"s"]]],[1244,5,1261,31,[1,"|>",0,[1244,5,1260,69,[1,"|>",0,[1244,5,1258,6,[7,[1244,6,1257,16,[11,[1244,9,1244,37,[0,[[1244,9,1244,26,[2,["String"],"startsWith"]],[1244,27,1244,35,[5,"number"]],[1244,36,1244,37,[2,[],"s"]]]]],[1245,9,1245,20,[0,[[1245,9,1245,13,[2,[],"Just"]],[1245,14,1245,20,[2,[],"Number"]]]]],[1247,11,1257,16,[11,[1247,14,1247,46,[0,[[1247,14,1247,31,[2,["String"],"startsWith"]],[1247,32,1247,44,[5,"appendable"]],[1247,45,1247,46,[2,[],"s"]]]]],[1248,9,1248,24,[0,[[1248,9,1248,13,[2,[],"Just"]],[1248,14,1248,24,[2,[],"Appendable"]]]]],[1250,11,1257,16,[11,[1250,14,1250,46,[0,[[1250,14,1250,31,[2,["String"],"startsWith"]],[1250,32,1250,44,[5,"comparable"]],[1250,45,1250,46,[2,[],"s"]]]]],[1251,9,1251,24,[0,[[1251,9,1251,13,[2,[],"Just"]],[1251,14,1251,24,[2,[],"Comparable"]]]]],[1253,11,1257,16,[11,[1253,14,1253,46,[0,[[1253,14,1253,31,[2,["String"],"startsWith"]],[1253,32,1253,44,[5,"compappend"]],[1253,45,1253,46,[2,[],"s"]]]]],[1254,9,1254,24,[0,[[1254,9,1254,13,[2,[],"Just"]],[1254,14,1254,24,[2,[],"CompAppend"]]]]],[1257,9,1257,16,[2,[],"Nothing"]]]]]]]]]]]],[1260,12,1260,69,[0,[[1260,12,1260,25,[2,["MaybeX"],"filter"]],[1260,26,1260,69,[7,[1260,27,1260,68,[1,"<|",1,[1260,27,1260,33,[2,[],"always"]],[1260,37,1260,68,[2,[],"constrainedTypeVarsAreRespected"]]]]]]]]]]],[1261,12,1261,31,[7,[1261,13,1261,30,[18,[[[1261,14,1261,15,[11,"t"]]],[1261,19,1261,30,[0,[[1261,19,1261,26,[2,[],"TypeVar"]],[1261,27,1261,28,[2,[],"t"]],[1261,29,1261,30,[2,[],"s"]]]]]]]]]]]]]]]]],[1264,1,1277,20,[0,[[1,[1264,1,1266,3,"{-| Convert a type annotation into a record definition (and whether or not the\nrecord is generic) if it is one.\n-}"]],[1,[1267,1,1267,72,[[1267,1,1267,14,"annotToFields"],[1267,17,1267,72,[6,[1267,17,1267,36,[1,[1267,17,1267,21,[[],"Node"]],[[1267,22,1267,36,[1,[1267,22,1267,36,[[],"TypeAnnotation"]],[]]]]]],[1267,40,1267,72,[1,[1267,40,1267,45,[[],"Maybe"]],[[1267,46,1267,72,[3,[[1267,48,1267,64,[1,[1267,48,1267,64,[[],"RecordDefinition"]],[]]],[1267,66,1267,70,[1,[1267,66,1267,70,[[],"Bool"]],[]]]]]]]]]]]]]],[1268,1,1277,20,[[1268,1,1268,14,"annotToFields"],[[1268,15,1268,20,[11,"annot"]]],[1269,5,1277,20,[17,[[1269,10,1269,26,[0,[[1269,10,1269,20,[2,["Node"],"value"]],[1269,21,1269,26,[2,[],"annot"]]]]],[[[1270,9,1270,37,[12,[["TypeAnnotation"],"Record"],[[1270,31,1270,37,[11,"fields"]]]]],[1271,13,1271,35,[0,[[1271,13,1271,17,[2,[],"Just"]],[1271,18,1271,35,[6,[[1271,20,1271,26,[2,[],"fields"]],[1271,28,1271,33,[2,[],"False"]]]]]]]]],[[1273,9,1273,31,[12,[[],"GenericRecord"],[[1273,23,1273,24,[0]],[1273,25,1273,31,[11,"fields"]]]]],[1274,13,1274,45,[0,[[1274,13,1274,17,[2,[],"Just"]],[1274,18,1274,45,[6,[[1274,20,1274,37,[0,[[1274,20,1274,30,[2,["Node"],"value"]],[1274,31,1274,37,[2,[],"fields"]]]]],[1274,39,1274,43,[2,[],"True"]]]]]]]]],[[1276,9,1276,10,[0]],[1277,13,1277,20,[2,[],"Nothing"]]]]]]]]]]]],[1280,1,1306,14,[0,[[1,[1280,1,1281,3,"{-| Make subrecords for custom types, if appropriate.\n-}"]],[1,[1282,1,1282,120,[[1282,1,1282,25,"makeCustomTypeSubrecords"],[1282,28,1282,120,[6,[1282,28,1282,47,[1,[1282,28,1282,47,[[],"SubrecordCanonicity"]],[]]],[1282,51,1282,120,[6,[1282,51,1282,57,[1,[1282,51,1282,57,[[],"String"]],[]]],[1282,61,1282,120,[6,[1282,61,1282,88,[1,[1282,61,1282,65,[[],"List"]],[[1282,66,1282,88,[1,[1282,66,1282,88,[[],"TypeWithPositionalVars"]],[]]]]]],[1282,92,1282,120,[1,[1282,92,1282,96,[[],"List"]],[[1282,97,1282,120,[3,[[1282,99,1282,105,[1,[1282,99,1282,105,[[],"String"]],[]]],[1282,107,1282,118,[1,[1282,107,1282,118,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1283,1,1306,14,[[1283,1,1283,25,"makeCustomTypeSubrecords"],[[1283,26,1283,44,[11,"subrecordTreatment"]],[1283,45,1283,46,[11,"n"]],[1283,47,1283,49,[11,"ts"]]],[1284,5,1306,14,[1,"|>",0,[1284,5,1296,6,[7,[1284,6,1295,22,[17,[[1284,11,1284,29,[2,[],"subrecordTreatment"]],[[[1285,9,1285,22,[12,[[],"AlwaysUnknown"],[]]],[1286,13,1286,20,[2,[],"Nothing"]]],[[1288,9,1288,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[1289,13,1289,20,[2,[],"Nothing"]]],[[1291,9,1291,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[1292,13,1292,23,[0,[[1292,13,1292,17,[2,[],"Just"]],[1292,18,1292,23,[2,[],"False"]]]]]],[[1294,9,1294,24,[12,[[],"AlwaysCanonical"],[]]],[1295,13,1295,22,[0,[[1295,13,1295,17,[2,[],"Just"]],[1295,18,1295,22,[2,[],"True"]]]]]]]]]]]],[1297,12,1306,14,[0,[[1297,12,1297,25,[2,["MaybeX"],"unwrap"]],[1297,26,1297,28,[9,[]]],[1298,13,1306,14,[7,[1298,14,1305,35,[18,[[[1298,15,1298,22,[11,"recurse"]]],[1299,17,1305,35,[1,"|>",0,[1299,17,1304,23,[0,[[1299,17,1299,32,[2,["List"],"indexedMap"]],[1300,21,1303,22,[7,[1300,22,1302,96,[18,[[[1300,23,1300,24,[11,"i"]],[1300,25,1300,26,[11,"t"]]],[1301,25,1302,96,[1,"|>",0,[1301,25,1301,52,[0,[[1301,25,1301,50,[2,[],"getTypeWithPositionalVars"]],[1301,51,1301,52,[2,[],"t"]]]]],[1302,32,1302,96,[0,[[1302,32,1302,54,[2,[],"makeSubrecordsFromType"]],[1302,55,1302,62,[2,[],"recurse"]],[1302,63,1302,96,[7,[1302,64,1302,95,[1,"++",1,[1302,64,1302,65,[2,[],"n"]],[1302,69,1302,95,[1,"++",1,[1302,69,1302,75,[5," arg"]],[1302,79,1302,95,[0,[[1302,79,1302,93,[2,["String"],"fromInt"]],[1302,94,1302,95,[2,[],"i"]]]]]]]]]]]]]]]]]]]]],[1304,21,1304,23,[2,[],"ts"]]]]],[1305,24,1305,35,[2,["List"],"concat"]]]]]]]]]]]]]]]]]]],[1309,1,1315,6,[1,[[1,[1309,1,1310,3,"{-| Information on what functions, types/aliases, and fully-exposed types with constructors are exposed by the module.\n-}"]],[1311,12,1311,24,"ExposedNames"],[],[1312,5,1315,6,[4,[[1312,7,1312,29,[[1312,7,1312,16,"functions"],[1312,19,1312,29,[1,[1312,19,1312,22,[[],"Set"]],[[1312,23,1312,29,[1,[1312,23,1312,29,[[],"String"]],[]]]]]]]],[1313,7,1314,5,[[1313,7,1313,12,"types"],[1313,15,1313,25,[1,[1313,15,1313,18,[[],"Set"]],[[1313,19,1313,25,[1,[1313,19,1313,25,[[],"String"]],[]]]]]]]],[1314,7,1315,5,[[1314,7,1314,16,"openTypes"],[1314,19,1314,29,[1,[1314,19,1314,22,[[],"Set"]],[[1314,23,1314,29,[1,[1314,23,1314,29,[[],"String"]],[]]]]]]]]]]]]]],[1318,1,1350,13,[0,[[1,[1318,1,1320,3,"{-| Get a set of all names exposed by the modules or `Nothing` if everything is\nexposed.\n-}"]],[1,[1321,1,1321,47,[[1321,1,1321,16,"getExposedNames"],[1321,19,1321,47,[6,[1321,19,1321,25,[1,[1321,19,1321,25,[[],"Module"]],[]]],[1321,29,1321,47,[1,[1321,29,1321,34,[[],"Maybe"]],[[1321,35,1321,47,[1,[1321,35,1321,47,[[],"ExposedNames"]],[]]]]]]]]]]],[1322,1,1350,13,[[1322,1,1322,16,"getExposedNames"],[],[1323,5,1350,13,[16,[[[1324,9,1337,64,[0,[[0],[1,[1324,9,1324,67,[[1324,9,1324,13,"step"],[1324,16,1324,67,[6,[1324,16,1324,35,[1,[1324,16,1324,20,[[],"Node"]],[[1324,21,1324,35,[1,[1324,21,1324,35,[[],"TopLevelExpose"]],[]]]]]],[1324,39,1324,67,[6,[1324,39,1324,51,[1,[1324,39,1324,51,[[],"ExposedNames"]],[]]],[1324,55,1324,67,[1,[1324,55,1324,67,[[],"ExposedNames"]],[]]]]]]]]]],[1325,9,1337,64,[[1325,9,1325,13,"step"],[[1325,14,1325,15,[11,"e"]],[1325,16,1325,19,[11,"acc"]]],[1326,13,1337,64,[17,[[1326,18,1326,30,[0,[[1326,18,1326,28,[2,["Node"],"value"]],[1326,29,1326,30,[2,[],"e"]]]]],[[[1327,17,1327,36,[12,[[],"FunctionExpose"],[[1327,32,1327,36,[11,"name"]]]]],[1328,21,1328,72,[21,[1328,23,1328,26,"acc"],[[1328,29,1328,71,[[1328,29,1328,38,"functions"],[1328,41,1328,70,[0,[[1328,41,1328,51,[2,["Set"],"insert"]],[1328,52,1328,56,[2,[],"name"]],[1328,57,1328,70,[19,[1328,57,1328,60,[2,[],"acc"]],[1328,61,1328,70,"functions"]]]]]]]]]]]],[[1330,17,1330,36,[12,[[],"TypeExpose"],[[1330,28,1330,36,[8,[[1330,30,1330,34,"name"]]]]]]],[1331,21,1331,72,[21,[1331,23,1331,26,"acc"],[[1331,29,1331,71,[[1331,29,1331,38,"openTypes"],[1331,41,1331,70,[0,[[1331,41,1331,51,[2,["Set"],"insert"]],[1331,52,1331,56,[2,[],"name"]],[1331,57,1331,70,[19,[1331,57,1331,60,[2,[],"acc"]],[1331,61,1331,70,"openTypes"]]]]]]]]]]]],[[1333,17,1333,33,[12,[[],"InfixExpose"],[[1333,29,1333,33,[11,"name"]]]]],[1334,21,1334,72,[21,[1334,23,1334,26,"acc"],[[1334,29,1334,71,[[1334,29,1334,38,"functions"],[1334,41,1334,70,[0,[[1334,41,1334,51,[2,["Set"],"insert"]],[1334,52,1334,56,[2,[],"name"]],[1334,57,1334,70,[19,[1334,57,1334,60,[2,[],"acc"]],[1334,61,1334,70,"functions"]]]]]]]]]]]],[[1336,17,1336,39,[12,[[],"TypeOrAliasExpose"],[[1336,35,1336,39,[11,"name"]]]]],[1337,21,1337,64,[21,[1337,23,1337,26,"acc"],[[1337,29,1337,63,[[1337,29,1337,34,"types"],[1337,37,1337,62,[0,[[1337,37,1337,47,[2,["Set"],"insert"]],[1337,48,1337,52,[2,[],"name"]],[1337,53,1337,62,[19,[1337,53,1337,56,[2,[],"acc"]],[1337,57,1337,62,"types"]]]]]]]]]]]]]]]]]]]]]],[1339,5,1350,13,[1,">>",1,[1339,5,1339,24,[2,["Module"],"exposingList"]],[1340,12,1350,13,[7,[1340,13,1349,36,[18,[[[1340,14,1340,15,[11,"l"]]],[1341,17,1349,36,[17,[[1341,22,1341,23,[2,[],"l"]],[[[1342,21,1342,26,[12,[[],"All"],[[1342,25,1342,26,[0]]]]],[1343,25,1343,32,[2,[],"Nothing"]]],[[1345,21,1345,32,[12,[[],"Explicit"],[[1345,30,1345,32,[11,"es"]]]]],[1346,25,1349,36,[1,"|>",0,[1346,25,1348,31,[0,[[1346,25,1346,35,[2,["List"],"foldl"]],[1346,36,1346,40,[2,[],"step"]],[1347,29,1347,96,[8,[[1347,31,1347,52,[[1347,31,1347,40,"functions"],[1347,43,1347,52,[2,["Set"],"empty"]]]],[1347,54,1347,71,[[1347,54,1347,59,"types"],[1347,62,1347,71,[2,["Set"],"empty"]]]],[1347,73,1347,95,[[1347,73,1347,82,"openTypes"],[1347,85,1347,94,[2,["Set"],"empty"]]]]]]],[1348,29,1348,31,[2,[],"es"]]]]],[1349,32,1349,36,[2,[],"Just"]]]]]]]]]]]]]]]]]]]]]]]],[1353,1,1439,13,[0,[[1,[1353,1,1354,3,"{-| Visit declarations, storing record field orders.\n-}"]],[1,[1355,1,1379,10,[[1355,1,1355,23,"declarationListVisitor"],[1356,5,1379,10,[6,[1356,5,1356,15,[1,[1356,5,1356,15,[[],"RuleConfig"]],[]]],[1358,9,1379,10,[6,[1358,9,1366,10,[4,[[1358,11,1358,73,[[1358,11,1358,18,"aliases"],[1358,21,1358,73,[1,[1358,21,1358,25,[[],"Dict"]],[[1358,26,1358,36,[1,[1358,26,1358,36,[[],"ModuleName"]],[]]],[1358,37,1358,73,[1,[1358,38,1358,42,[[],"Dict"]],[[1358,43,1358,49,[1,[1358,43,1358,49,[[],"String"]],[]]],[1358,50,1358,72,[1,[1358,50,1358,72,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1359,11,1360,9,[[1359,11,1359,27,"canonicalRecords"],[1359,30,1359,71,[1,[1359,30,1359,34,[[],"Dict"]],[[1359,35,1359,45,[1,[1359,35,1359,45,[[],"ModuleName"]],[]]],[1359,46,1359,71,[1,[1359,47,1359,51,[[],"Dict"]],[[1359,52,1359,58,[1,[1359,52,1359,58,[[],"String"]],[]]],[1359,59,1359,70,[1,[1359,59,1359,70,[[],"KnownRecord"]],[]]]]]]]]]]],[1360,11,1361,9,[[1360,11,1360,23,"constructors"],[1360,26,1360,121,[1,[1360,26,1360,30,[[],"Dict"]],[[1360,31,1360,41,[1,[1360,31,1360,41,[[],"ModuleName"]],[]]],[1360,42,1360,121,[1,[1360,43,1360,47,[[],"Dict"]],[[1360,48,1360,54,[1,[1360,48,1360,54,[[],"String"]],[]]],[1360,55,1360,120,[4,[[1360,57,1360,86,[[1360,57,1360,71,"customTypeName"],[1360,74,1360,86,[1,[1360,74,1360,79,[[],"Maybe"]],[[1360,80,1360,86,[1,[1360,80,1360,86,[[],"String"]],[]]]]]]]],[1360,88,1360,119,[[1360,88,1360,93,"type_"],[1360,96,1360,118,[1,[1360,96,1360,118,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1361,11,1362,9,[[1361,11,1361,23,"exposingList"],[1361,26,1361,44,[1,[1361,26,1361,31,[[],"Maybe"]],[[1361,32,1361,44,[1,[1361,32,1361,44,[[],"ExposedNames"]],[]]]]]]]],[1362,11,1363,9,[[1362,11,1362,24,"fileIsIgnored"],[1362,27,1362,31,[1,[1362,27,1362,31,[[],"Bool"]],[]]]]],[1363,11,1364,9,[[1363,11,1363,24,"functionTypes"],[1363,27,1363,61,[1,[1363,27,1363,31,[[],"Dict"]],[[1363,32,1363,42,[1,[1363,32,1363,42,[[],"ModuleName"]],[]]],[1363,43,1363,61,[1,[1363,44,1363,48,[[],"Dict"]],[[1363,49,1363,55,[1,[1363,49,1363,55,[[],"String"]],[]]],[1363,56,1363,60,[1,[1363,56,1363,60,[[],"Type"]],[]]]]]]]]]]],[1364,11,1365,9,[[1364,11,1364,22,"lookupTable"],[1364,25,1364,46,[1,[1364,25,1364,46,[[],"ModuleNameLookupTable"]],[]]]]],[1365,11,1366,9,[[1365,11,1365,21,"moduleName"],[1365,24,1365,34,[1,[1365,24,1365,34,[[],"ModuleName"]],[]]]]]]]],[1367,8,1379,10,[6,[1367,8,1367,31,[1,[1367,8,1367,12,[[],"List"]],[[1367,13,1367,31,[1,[1367,14,1367,18,[[],"Node"]],[[1367,19,1367,30,[1,[1367,19,1367,30,[[],"Declaration"]],[]]]]]]]]],[1369,9,1379,10,[4,[[1369,11,1369,73,[[1369,11,1369,18,"aliases"],[1369,21,1369,73,[1,[1369,21,1369,25,[[],"Dict"]],[[1369,26,1369,36,[1,[1369,26,1369,36,[[],"ModuleName"]],[]]],[1369,37,1369,73,[1,[1369,38,1369,42,[[],"Dict"]],[[1369,43,1369,49,[1,[1369,43,1369,49,[[],"String"]],[]]],[1369,50,1369,72,[1,[1369,50,1369,72,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1370,11,1371,9,[[1370,11,1370,27,"canonicalRecords"],[1370,30,1370,71,[1,[1370,30,1370,34,[[],"Dict"]],[[1370,35,1370,45,[1,[1370,35,1370,45,[[],"ModuleName"]],[]]],[1370,46,1370,71,[1,[1370,47,1370,51,[[],"Dict"]],[[1370,52,1370,58,[1,[1370,52,1370,58,[[],"String"]],[]]],[1370,59,1370,70,[1,[1370,59,1370,70,[[],"KnownRecord"]],[]]]]]]]]]]],[1371,11,1372,9,[[1371,11,1371,23,"constructors"],[1371,26,1371,121,[1,[1371,26,1371,30,[[],"Dict"]],[[1371,31,1371,41,[1,[1371,31,1371,41,[[],"ModuleName"]],[]]],[1371,42,1371,121,[1,[1371,43,1371,47,[[],"Dict"]],[[1371,48,1371,54,[1,[1371,48,1371,54,[[],"String"]],[]]],[1371,55,1371,120,[4,[[1371,57,1371,86,[[1371,57,1371,71,"customTypeName"],[1371,74,1371,86,[1,[1371,74,1371,79,[[],"Maybe"]],[[1371,80,1371,86,[1,[1371,80,1371,86,[[],"String"]],[]]]]]]]],[1371,88,1371,119,[[1371,88,1371,93,"type_"],[1371,96,1371,118,[1,[1371,96,1371,118,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1372,11,1378,9,[[1372,11,1372,18,"exposed"],[1373,13,1377,14,[4,[[1373,15,1373,59,[[1373,15,1373,22,"aliases"],[1373,25,1373,59,[1,[1373,25,1373,29,[[],"Dict"]],[[1373,30,1373,36,[1,[1373,30,1373,36,[[],"String"]],[]]],[1373,37,1373,59,[1,[1373,37,1373,59,[[],"TypeWithPositionalVars"]],[]]]]]]]],[1374,15,1375,13,[[1374,15,1374,31,"canonicalRecords"],[1374,34,1374,57,[1,[1374,34,1374,38,[[],"Dict"]],[[1374,39,1374,45,[1,[1374,39,1374,45,[[],"String"]],[]]],[1374,46,1374,57,[1,[1374,46,1374,57,[[],"KnownRecord"]],[]]]]]]]],[1375,15,1376,13,[[1375,15,1375,27,"constructors"],[1375,30,1375,107,[1,[1375,30,1375,34,[[],"Dict"]],[[1375,35,1375,41,[1,[1375,35,1375,41,[[],"String"]],[]]],[1375,42,1375,107,[4,[[1375,44,1375,73,[[1375,44,1375,58,"customTypeName"],[1375,61,1375,73,[1,[1375,61,1375,66,[[],"Maybe"]],[[1375,67,1375,73,[1,[1375,67,1375,73,[[],"String"]],[]]]]]]]],[1375,75,1375,106,[[1375,75,1375,80,"type_"],[1375,83,1375,105,[1,[1375,83,1375,105,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]],[1376,15,1377,13,[[1376,15,1376,28,"functionTypes"],[1376,31,1376,47,[1,[1376,31,1376,35,[[],"Dict"]],[[1376,36,1376,42,[1,[1376,36,1376,42,[[],"String"]],[]]],[1376,43,1376,47,[1,[1376,43,1376,47,[[],"Type"]],[]]]]]]]]]]]]],[1378,11,1379,9,[[1378,11,1378,24,"functionTypes"],[1378,27,1378,61,[1,[1378,27,1378,31,[[],"Dict"]],[[1378,32,1378,42,[1,[1378,32,1378,42,[[],"ModuleName"]],[]]],[1378,43,1378,61,[1,[1378,44,1378,48,[[],"Dict"]],[[1378,49,1378,55,[1,[1378,49,1378,55,[[],"String"]],[]]],[1378,56,1378,60,[1,[1378,56,1378,60,[[],"Type"]],[]]]]]]]]]]]]]]]]]]]]]]],[1380,1,1439,13,[[1380,1,1380,23,"declarationListVisitor"],[[1380,24,1380,59,[14,[1380,25,1380,58,[12,[[],"RuleConfig"],[[1380,36,1380,58,[8,[[1380,38,1380,56,"subrecordTreatment"]]]]]]]]],[1380,60,1380,67,[11,"context"]],[1380,68,1380,80,[11,"declarations"]]],[1382,5,1439,13,[1,"|>",0,[1382,5,1392,21,[0,[[1382,5,1382,15,[2,["List"],"foldl"]],[1382,16,1382,70,[7,[1382,17,1382,69,[0,[[1382,17,1382,42,[2,[],"accumulateDeclarationInfo"]],[1382,43,1382,61,[2,[],"subrecordTreatment"]],[1382,62,1382,69,[2,[],"context"]]]]]]],[1383,9,1391,10,[8,[[1383,11,1383,23,[[1383,11,1383,18,"aliases"],[1383,21,1383,23,[9,[]]]]],[1384,11,1385,9,[[1384,11,1384,27,"canonicalRecords"],[1384,30,1384,32,[9,[]]]]],[1385,11,1386,9,[[1385,11,1385,23,"constructors"],[1385,26,1385,28,[9,[]]]]],[1386,11,1387,9,[[1386,11,1386,25,"exposedAliases"],[1386,28,1386,30,[9,[]]]]],[1387,11,1388,9,[[1387,11,1387,34,"exposedCanonicalRecords"],[1387,37,1387,39,[9,[]]]]],[1388,11,1389,9,[[1388,11,1388,30,"exposedConstructors"],[1388,33,1388,35,[9,[]]]]],[1389,11,1390,9,[[1389,11,1389,31,"exposedFunctionTypes"],[1389,34,1389,36,[9,[]]]]],[1390,11,1391,9,[[1390,11,1390,24,"functionTypes"],[1390,27,1390,29,[9,[]]]]]]]],[1392,9,1392,21,[2,[],"declarations"]]]]],[1393,12,1439,13,[7,[1393,13,1438,22,[18,[[[1393,14,1393,15,[11,"r"]]],[1394,17,1438,22,[11,[1394,20,1394,41,[19,[1394,20,1394,27,[2,[],"context"]],[1394,28,1394,41,"fileIsIgnored"]]],[1395,21,1409,22,[8,[[1395,23,1395,43,[[1395,23,1395,30,"aliases"],[1395,33,1395,43,[2,["Dict"],"empty"]]]],[1396,23,1397,21,[[1396,23,1396,39,"canonicalRecords"],[1396,42,1396,52,[2,["Dict"],"empty"]]]],[1397,23,1398,21,[[1397,23,1397,35,"constructors"],[1397,38,1397,48,[2,["Dict"],"empty"]]]],[1398,23,1408,21,[[1398,23,1398,30,"exposed"],[1399,25,1407,26,[8,[[1399,27,1400,59,[[1399,27,1399,34,"aliases"],[1400,29,1400,59,[0,[[1400,29,1400,42,[2,["Dict"],"fromList"]],[1400,43,1400,59,[19,[1400,43,1400,44,[2,[],"r"]],[1400,45,1400,59,"exposedAliases"]]]]]]]],[1401,27,1403,25,[[1401,27,1401,43,"canonicalRecords"],[1402,29,1402,68,[0,[[1402,29,1402,42,[2,["Dict"],"fromList"]],[1402,43,1402,68,[19,[1402,43,1402,44,[2,[],"r"]],[1402,45,1402,68,"exposedCanonicalRecords"]]]]]]]],[1403,27,1405,25,[[1403,27,1403,39,"constructors"],[1404,29,1404,64,[0,[[1404,29,1404,42,[2,["Dict"],"fromList"]],[1404,43,1404,64,[19,[1404,43,1404,44,[2,[],"r"]],[1404,45,1404,64,"exposedConstructors"]]]]]]]],[1405,27,1407,25,[[1405,27,1405,40,"functionTypes"],[1406,29,1406,65,[0,[[1406,29,1406,42,[2,["Dict"],"fromList"]],[1406,43,1406,65,[19,[1406,43,1406,44,[2,[],"r"]],[1406,45,1406,65,"exposedFunctionTypes"]]]]]]]]]]]]],[1408,23,1409,21,[[1408,23,1408,36,"functionTypes"],[1408,39,1408,49,[2,["Dict"],"empty"]]]]]]],[1412,21,1438,22,[8,[[1412,23,1415,118,[[1412,23,1412,30,"aliases"],[1413,25,1415,118,[1,"|>",0,[1413,25,1414,55,[1,"|>",0,[1413,25,1413,65,[0,[[1413,25,1413,33,[2,[],"validate"]],[1413,34,1413,55,[7,[1413,35,1413,54,[1,"<<",0,[1413,35,1413,38,[2,[],"not"]],[1413,42,1413,54,[2,["List"],"isEmpty"]]]]]],[1413,56,1413,65,[19,[1413,56,1413,57,[2,[],"r"]],[1413,58,1413,65,"aliases"]]]]]],[1414,32,1414,55,[0,[[1414,32,1414,41,[2,["Maybe"],"map"]],[1414,42,1414,55,[2,["Dict"],"fromList"]]]]]]],[1415,32,1415,118,[0,[[1415,32,1415,45,[2,["MaybeX"],"unwrap"]],[1415,46,1415,61,[19,[1415,46,1415,53,[2,[],"context"]],[1415,54,1415,61,"aliases"]]],[1415,62,1415,118,[7,[1415,63,1415,117,[18,[[[1415,64,1415,65,[11,"v"]]],[1415,69,1415,117,[0,[[1415,69,1415,80,[2,["Dict"],"insert"]],[1415,81,1415,99,[19,[1415,81,1415,88,[2,[],"context"]],[1415,89,1415,99,"moduleName"]]],[1415,100,1415,101,[2,[],"v"]],[1415,102,1415,117,[19,[1415,102,1415,109,[2,[],"context"]],[1415,110,1415,117,"aliases"]]]]]]]]]]]]]]]]]],[1416,23,1420,21,[[1416,23,1416,39,"canonicalRecords"],[1417,25,1419,136,[1,"|>",0,[1417,25,1418,55,[1,"|>",0,[1417,25,1417,74,[0,[[1417,25,1417,33,[2,[],"validate"]],[1417,34,1417,55,[7,[1417,35,1417,54,[1,"<<",0,[1417,35,1417,38,[2,[],"not"]],[1417,42,1417,54,[2,["List"],"isEmpty"]]]]]],[1417,56,1417,74,[19,[1417,56,1417,57,[2,[],"r"]],[1417,58,1417,74,"canonicalRecords"]]]]]],[1418,32,1418,55,[0,[[1418,32,1418,41,[2,["Maybe"],"map"]],[1418,42,1418,55,[2,["Dict"],"fromList"]]]]]]],[1419,32,1419,136,[0,[[1419,32,1419,45,[2,["MaybeX"],"unwrap"]],[1419,46,1419,70,[19,[1419,46,1419,53,[2,[],"context"]],[1419,54,1419,70,"canonicalRecords"]]],[1419,71,1419,136,[7,[1419,72,1419,135,[18,[[[1419,73,1419,74,[11,"v"]]],[1419,78,1419,135,[0,[[1419,78,1419,89,[2,["Dict"],"insert"]],[1419,90,1419,108,[19,[1419,90,1419,97,[2,[],"context"]],[1419,98,1419,108,"moduleName"]]],[1419,109,1419,110,[2,[],"v"]],[1419,111,1419,135,[19,[1419,111,1419,118,[2,[],"context"]],[1419,119,1419,135,"canonicalRecords"]]]]]]]]]]]]]]]]]],[1420,23,1424,21,[[1420,23,1420,35,"constructors"],[1421,25,1423,128,[1,"|>",0,[1421,25,1422,55,[1,"|>",0,[1421,25,1421,70,[0,[[1421,25,1421,33,[2,[],"validate"]],[1421,34,1421,55,[7,[1421,35,1421,54,[1,"<<",0,[1421,35,1421,38,[2,[],"not"]],[1421,42,1421,54,[2,["List"],"isEmpty"]]]]]],[1421,56,1421,70,[19,[1421,56,1421,57,[2,[],"r"]],[1421,58,1421,70,"constructors"]]]]]],[1422,32,1422,55,[0,[[1422,32,1422,41,[2,["Maybe"],"map"]],[1422,42,1422,55,[2,["Dict"],"fromList"]]]]]]],[1423,32,1423,128,[0,[[1423,32,1423,45,[2,["MaybeX"],"unwrap"]],[1423,46,1423,66,[19,[1423,46,1423,53,[2,[],"context"]],[1423,54,1423,66,"constructors"]]],[1423,67,1423,128,[7,[1423,68,1423,127,[18,[[[1423,69,1423,70,[11,"v"]]],[1423,74,1423,127,[0,[[1423,74,1423,85,[2,["Dict"],"insert"]],[1423,86,1423,104,[19,[1423,86,1423,93,[2,[],"context"]],[1423,94,1423,104,"moduleName"]]],[1423,105,1423,106,[2,[],"v"]],[1423,107,1423,127,[19,[1423,107,1423,114,[2,[],"context"]],[1423,115,1423,127,"constructors"]]]]]]]]]]]]]]]]]],[1424,23,1434,21,[[1424,23,1424,30,"exposed"],[1425,25,1433,26,[8,[[1425,27,1426,59,[[1425,27,1425,34,"aliases"],[1426,29,1426,59,[0,[[1426,29,1426,42,[2,["Dict"],"fromList"]],[1426,43,1426,59,[19,[1426,43,1426,44,[2,[],"r"]],[1426,45,1426,59,"exposedAliases"]]]]]]]],[1427,27,1429,25,[[1427,27,1427,43,"canonicalRecords"],[1428,29,1428,68,[0,[[1428,29,1428,42,[2,["Dict"],"fromList"]],[1428,43,1428,68,[19,[1428,43,1428,44,[2,[],"r"]],[1428,45,1428,68,"exposedCanonicalRecords"]]]]]]]],[1429,27,1431,25,[[1429,27,1429,39,"constructors"],[1430,29,1430,64,[0,[[1430,29,1430,42,[2,["Dict"],"fromList"]],[1430,43,1430,64,[19,[1430,43,1430,44,[2,[],"r"]],[1430,45,1430,64,"exposedConstructors"]]]]]]]],[1431,27,1433,25,[[1431,27,1431,40,"functionTypes"],[1432,29,1432,65,[0,[[1432,29,1432,42,[2,["Dict"],"fromList"]],[1432,43,1432,65,[19,[1432,43,1432,44,[2,[],"r"]],[1432,45,1432,65,"exposedFunctionTypes"]]]]]]]]]]]]],[1434,23,1438,21,[[1434,23,1434,36,"functionTypes"],[1435,25,1437,130,[1,"|>",0,[1435,25,1436,55,[1,"|>",0,[1435,25,1435,71,[0,[[1435,25,1435,33,[2,[],"validate"]],[1435,34,1435,55,[7,[1435,35,1435,54,[1,"<<",0,[1435,35,1435,38,[2,[],"not"]],[1435,42,1435,54,[2,["List"],"isEmpty"]]]]]],[1435,56,1435,71,[19,[1435,56,1435,57,[2,[],"r"]],[1435,58,1435,71,"functionTypes"]]]]]],[1436,32,1436,55,[0,[[1436,32,1436,41,[2,["Maybe"],"map"]],[1436,42,1436,55,[2,["Dict"],"fromList"]]]]]]],[1437,32,1437,130,[0,[[1437,32,1437,45,[2,["MaybeX"],"unwrap"]],[1437,46,1437,67,[19,[1437,46,1437,53,[2,[],"context"]],[1437,54,1437,67,"functionTypes"]]],[1437,68,1437,130,[7,[1437,69,1437,129,[18,[[[1437,70,1437,71,[11,"v"]]],[1437,75,1437,129,[0,[[1437,75,1437,86,[2,["Dict"],"insert"]],[1437,87,1437,105,[19,[1437,87,1437,94,[2,[],"context"]],[1437,95,1437,105,"moduleName"]]],[1437,106,1437,107,[2,[],"v"]],[1437,108,1437,129,[19,[1437,108,1437,115,[2,[],"context"]],[1437,116,1437,129,"functionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1442,1,1673,16,[0,[[1,[1442,1,1444,3,"{-| Given a top-level declaration, accumulate information from it for storing in\nmodule context, determining what to expose or not.\n-}"]],[1,[1445,1,1474,10,[[1445,1,1445,26,"accumulateDeclarationInfo"],[1446,5,1474,10,[6,[1446,5,1446,24,[1,[1446,5,1446,24,[[],"SubrecordCanonicity"]],[]]],[1448,9,1474,10,[6,[1448,9,1453,10,[5,[1448,11,1448,18,"context"],[1449,14,1453,9,[[1449,15,1450,13,[[1449,15,1449,27,"exposingList"],[1449,30,1449,48,[1,[1449,30,1449,35,[[],"Maybe"]],[[1449,36,1449,48,[1,[1449,36,1449,48,[[],"ExposedNames"]],[]]]]]]]],[1450,15,1451,13,[[1450,15,1450,28,"fileIsIgnored"],[1450,31,1450,35,[1,[1450,31,1450,35,[[],"Bool"]],[]]]]],[1451,15,1452,13,[[1451,15,1451,26,"lookupTable"],[1451,29,1451,50,[1,[1451,29,1451,50,[[],"ModuleNameLookupTable"]],[]]]]],[1452,15,1453,9,[[1452,15,1452,25,"moduleName"],[1452,28,1452,38,[1,[1452,28,1452,38,[[],"ModuleName"]],[]]]]]]]]],[1454,8,1474,10,[6,[1454,8,1454,24,[1,[1454,8,1454,12,[[],"Node"]],[[1454,13,1454,24,[1,[1454,13,1454,24,[[],"Declaration"]],[]]]]]],[1456,9,1474,10,[6,[1456,9,1464,10,[4,[[1456,11,1456,60,[[1456,11,1456,18,"aliases"],[1456,21,1456,60,[1,[1456,21,1456,25,[[],"List"]],[[1456,26,1456,60,[3,[[1456,28,1456,34,[1,[1456,28,1456,34,[[],"String"]],[]]],[1456,36,1456,58,[1,[1456,36,1456,58,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1457,11,1458,9,[[1457,11,1457,27,"canonicalRecords"],[1457,30,1457,58,[1,[1457,30,1457,34,[[],"List"]],[[1457,35,1457,58,[3,[[1457,37,1457,43,[1,[1457,37,1457,43,[[],"String"]],[]]],[1457,45,1457,56,[1,[1457,45,1457,56,[[],"KnownRecord"]],[]]]]]]]]]]],[1458,11,1459,9,[[1458,11,1458,23,"constructors"],[1458,26,1458,108,[1,[1458,26,1458,30,[[],"List"]],[[1458,31,1458,108,[3,[[1458,33,1458,39,[1,[1458,33,1458,39,[[],"String"]],[]]],[1458,41,1458,106,[4,[[1458,43,1458,72,[[1458,43,1458,57,"customTypeName"],[1458,60,1458,72,[1,[1458,60,1458,65,[[],"Maybe"]],[[1458,66,1458,72,[1,[1458,66,1458,72,[[],"String"]],[]]]]]]]],[1458,74,1458,105,[[1458,74,1458,79,"type_"],[1458,82,1458,104,[1,[1458,82,1458,104,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1459,11,1460,9,[[1459,11,1459,25,"exposedAliases"],[1459,28,1459,67,[1,[1459,28,1459,32,[[],"List"]],[[1459,33,1459,67,[3,[[1459,35,1459,41,[1,[1459,35,1459,41,[[],"String"]],[]]],[1459,43,1459,65,[1,[1459,43,1459,65,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1460,11,1461,9,[[1460,11,1460,34,"exposedCanonicalRecords"],[1460,37,1460,65,[1,[1460,37,1460,41,[[],"List"]],[[1460,42,1460,65,[3,[[1460,44,1460,50,[1,[1460,44,1460,50,[[],"String"]],[]]],[1460,52,1460,63,[1,[1460,52,1460,63,[[],"KnownRecord"]],[]]]]]]]]]]],[1461,11,1462,9,[[1461,11,1461,30,"exposedConstructors"],[1461,33,1461,115,[1,[1461,33,1461,37,[[],"List"]],[[1461,38,1461,115,[3,[[1461,40,1461,46,[1,[1461,40,1461,46,[[],"String"]],[]]],[1461,48,1461,113,[4,[[1461,50,1461,79,[[1461,50,1461,64,"customTypeName"],[1461,67,1461,79,[1,[1461,67,1461,72,[[],"Maybe"]],[[1461,73,1461,79,[1,[1461,73,1461,79,[[],"String"]],[]]]]]]]],[1461,81,1461,112,[[1461,81,1461,86,"type_"],[1461,89,1461,111,[1,[1461,89,1461,111,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1462,11,1463,9,[[1462,11,1462,31,"exposedFunctionTypes"],[1462,34,1462,55,[1,[1462,34,1462,38,[[],"List"]],[[1462,39,1462,55,[3,[[1462,41,1462,47,[1,[1462,41,1462,47,[[],"String"]],[]]],[1462,49,1462,53,[1,[1462,49,1462,53,[[],"Type"]],[]]]]]]]]]]],[1463,11,1464,9,[[1463,11,1463,24,"functionTypes"],[1463,27,1463,48,[1,[1463,27,1463,31,[[],"List"]],[[1463,32,1463,48,[3,[[1463,34,1463,40,[1,[1463,34,1463,40,[[],"String"]],[]]],[1463,42,1463,46,[1,[1463,42,1463,46,[[],"Type"]],[]]]]]]]]]]]]]],[1466,9,1474,10,[4,[[1466,11,1466,60,[[1466,11,1466,18,"aliases"],[1466,21,1466,60,[1,[1466,21,1466,25,[[],"List"]],[[1466,26,1466,60,[3,[[1466,28,1466,34,[1,[1466,28,1466,34,[[],"String"]],[]]],[1466,36,1466,58,[1,[1466,36,1466,58,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1467,11,1468,9,[[1467,11,1467,27,"canonicalRecords"],[1467,30,1467,58,[1,[1467,30,1467,34,[[],"List"]],[[1467,35,1467,58,[3,[[1467,37,1467,43,[1,[1467,37,1467,43,[[],"String"]],[]]],[1467,45,1467,56,[1,[1467,45,1467,56,[[],"KnownRecord"]],[]]]]]]]]]]],[1468,11,1469,9,[[1468,11,1468,23,"constructors"],[1468,26,1468,108,[1,[1468,26,1468,30,[[],"List"]],[[1468,31,1468,108,[3,[[1468,33,1468,39,[1,[1468,33,1468,39,[[],"String"]],[]]],[1468,41,1468,106,[4,[[1468,43,1468,72,[[1468,43,1468,57,"customTypeName"],[1468,60,1468,72,[1,[1468,60,1468,65,[[],"Maybe"]],[[1468,66,1468,72,[1,[1468,66,1468,72,[[],"String"]],[]]]]]]]],[1468,74,1468,105,[[1468,74,1468,79,"type_"],[1468,82,1468,104,[1,[1468,82,1468,104,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1469,11,1470,9,[[1469,11,1469,25,"exposedAliases"],[1469,28,1469,67,[1,[1469,28,1469,32,[[],"List"]],[[1469,33,1469,67,[3,[[1469,35,1469,41,[1,[1469,35,1469,41,[[],"String"]],[]]],[1469,43,1469,65,[1,[1469,43,1469,65,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1470,11,1471,9,[[1470,11,1470,34,"exposedCanonicalRecords"],[1470,37,1470,65,[1,[1470,37,1470,41,[[],"List"]],[[1470,42,1470,65,[3,[[1470,44,1470,50,[1,[1470,44,1470,50,[[],"String"]],[]]],[1470,52,1470,63,[1,[1470,52,1470,63,[[],"KnownRecord"]],[]]]]]]]]]]],[1471,11,1472,9,[[1471,11,1471,30,"exposedConstructors"],[1471,33,1471,115,[1,[1471,33,1471,37,[[],"List"]],[[1471,38,1471,115,[3,[[1471,40,1471,46,[1,[1471,40,1471,46,[[],"String"]],[]]],[1471,48,1471,113,[4,[[1471,50,1471,79,[[1471,50,1471,64,"customTypeName"],[1471,67,1471,79,[1,[1471,67,1471,72,[[],"Maybe"]],[[1471,73,1471,79,[1,[1471,73,1471,79,[[],"String"]],[]]]]]]]],[1471,81,1471,112,[[1471,81,1471,86,"type_"],[1471,89,1471,111,[1,[1471,89,1471,111,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1472,11,1473,9,[[1472,11,1472,31,"exposedFunctionTypes"],[1472,34,1472,55,[1,[1472,34,1472,38,[[],"List"]],[[1472,39,1472,55,[3,[[1472,41,1472,47,[1,[1472,41,1472,47,[[],"String"]],[]]],[1472,49,1472,53,[1,[1472,49,1472,53,[[],"Type"]],[]]]]]]]]]]],[1473,11,1474,9,[[1473,11,1473,24,"functionTypes"],[1473,27,1473,48,[1,[1473,27,1473,31,[[],"List"]],[[1473,32,1473,48,[3,[[1473,34,1473,40,[1,[1473,34,1473,40,[[],"String"]],[]]],[1473,42,1473,46,[1,[1473,42,1473,46,[[],"Type"]],[]]]]]]]]]]]]]]]]]]]]]]]]],[1475,1,1673,16,[[1475,1,1475,26,"accumulateDeclarationInfo"],[[1475,27,1475,45,[11,"subrecordTreatment"]],[1475,46,1475,53,[11,"context"]],[1475,54,1475,58,[11,"node"]],[1475,59,1475,62,[11,"acc"]]],[1476,5,1673,16,[16,[[[1477,9,1497,21,[0,[[0],[1,[1477,9,1477,172,[[1477,9,1477,37,"makeConstructorAndSubrecords"],[1477,40,1477,172,[6,[1477,40,1477,62,[1,[1477,40,1477,62,[[],"TypeWithPositionalVars"]],[]]],[1477,66,1477,172,[6,[1477,66,1477,84,[1,[1477,66,1477,70,[[],"List"]],[[1477,71,1477,84,[1,[1477,72,1477,76,[[],"Node"]],[[1477,77,1477,83,[1,[1477,77,1477,83,[[],"String"]],[]]]]]]]]],[1477,88,1477,172,[6,[1477,88,1477,104,[1,[1477,88,1477,104,[[],"ValueConstructor"]],[]]],[1477,108,1477,172,[3,[[1477,110,1477,116,[1,[1477,110,1477,116,[[],"String"]],[]]],[1477,118,1477,140,[1,[1477,118,1477,140,[[],"TypeWithPositionalVars"]],[]]],[1477,142,1477,170,[1,[1477,142,1477,146,[[],"List"]],[[1477,147,1477,170,[3,[[1477,149,1477,155,[1,[1477,149,1477,155,[[],"String"]],[]]],[1477,157,1477,168,[1,[1477,157,1477,168,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]]]]],[1478,9,1497,21,[[1478,9,1478,37,"makeConstructorAndSubrecords"],[[1478,38,1478,44,[11,"return"]],[1478,45,1478,53,[11,"typeVars"]],[1478,54,1478,73,[8,[[1478,56,1478,60,"name"],[1478,62,1478,71,"arguments"]]]]],[1479,13,1497,21,[1,"|>",0,[1479,13,1486,26,[0,[[1479,13,1479,21,[2,["List"],"map"]],[1480,17,1485,18,[7,[1480,18,1484,51,[0,[[1480,18,1480,51,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1480,52,1480,59,[2,[],"context"]],[1481,21,1483,22,[8,[[1481,23,1481,61,[[1481,23,1481,54,"constrainedTypeVarsAreRespected"],[1481,57,1481,61,[2,[],"True"]]]],[1482,23,1483,21,[[1482,23,1482,47,"subrecordIsAlsoCanonical"],[1482,50,1482,96,[0,[[1482,50,1482,77,[2,[],"subrecordCanonicityForField"]],[1482,78,1482,96,[2,[],"subrecordTreatment"]]]]]]]]]],[1484,21,1484,51,[7,[1484,22,1484,50,[0,[[1484,22,1484,30,[2,["List"],"map"]],[1484,31,1484,41,[2,["Node"],"value"]],[1484,42,1484,50,[2,[],"typeVars"]]]]]]]]]]]],[1486,17,1486,26,[2,[],"arguments"]]]]],[1487,20,1497,21,[7,[1487,21,1496,26,[18,[[[1487,22,1487,24,[11,"ts"]]],[1488,25,1496,26,[16,[[[1489,29,1491,48,[0,[[0],[1,[1489,29,1489,39,[[1489,29,1489,30,"n"],[1489,33,1489,39,[1,[1489,33,1489,39,[[],"String"]],[]]]]]],[1490,29,1491,48,[[1490,29,1490,30,"n"],[],[1491,33,1491,48,[0,[[1491,33,1491,43,[2,["Node"],"value"]],[1491,44,1491,48,[2,[],"name"]]]]]]]]]]],[1493,25,1496,26,[6,[[1493,27,1493,28,[2,[],"n"]],[1494,27,1494,71,[0,[[1494,27,1494,61,[2,[],"makeFunctionTypeWithPositionalVars"]],[1494,62,1494,68,[2,[],"return"]],[1494,69,1494,71,[2,[],"ts"]]]]],[1495,27,1495,75,[0,[[1495,27,1495,51,[2,[],"makeCustomTypeSubrecords"]],[1495,52,1495,70,[2,[],"subrecordTreatment"]],[1495,71,1495,72,[2,[],"n"]],[1495,73,1495,75,[2,[],"ts"]]]]]]]]]]]]]]]]]]]]]]],[1499,9,1522,48,[0,[[0],[1,[1499,9,1499,113,[[1499,9,1499,22,"skipIfIgnored"],[1499,25,1499,113,[6,[1499,25,1499,47,[6,[1499,26,1499,38,[1,[1499,26,1499,38,[[],"ExposedNames"]],[]]],[1499,42,1499,46,[1,[1499,42,1499,46,[[],"Bool"]],[]]]]],[1499,51,1499,113,[6,[1499,51,1499,52,[0,"r"]],[1499,56,1499,113,[6,[1499,56,1499,68,[6,[1499,57,1499,59,[2]],[1499,63,1499,67,[0,"info"]]]],[1499,72,1499,113,[6,[1499,72,1499,88,[6,[1499,73,1499,77,[0,"info"]],[1499,81,1499,87,[6,[1499,81,1499,82,[0,"r"]],[1499,86,1499,87,[0,"r"]]]]]],[1499,92,1499,113,[6,[1499,92,1499,108,[6,[1499,93,1499,97,[0,"info"]],[1499,101,1499,107,[6,[1499,101,1499,102,[0,"r"]],[1499,106,1499,107,[0,"r"]]]]]],[1499,112,1499,113,[0,"r"]]]]]]]]]]]]]]],[1500,9,1522,48,[[1500,9,1500,22,"skipIfIgnored"],[[1500,23,1500,37,[11,"checkIfExposed"]],[1500,38,1500,42,[11,"acc_"]],[1500,43,1500,51,[11,"makeInfo"]],[1500,52,1500,60,[11,"addLocal"]],[1500,61,1500,71,[11,"addExposed"]]],[1501,13,1522,48,[16,[[[1502,17,1504,75,[0,[[0],[1,[1502,17,1502,33,[[1502,17,1502,26,"isExposed"],[1502,29,1502,33,[1,[1502,29,1502,33,[[],"Bool"]],[]]]]]],[1503,17,1504,75,[[1503,17,1503,26,"isExposed"],[],[1504,21,1504,75,[0,[[1504,21,1504,34,[2,["MaybeX"],"unwrap"]],[1504,35,1504,39,[2,[],"True"]],[1504,40,1504,54,[2,[],"checkIfExposed"]],[1504,55,1504,75,[19,[1504,55,1504,62,[2,[],"context"]],[1504,63,1504,75,"exposingList"]]]]]]]]]]]],[1506,13,1522,48,[17,[[1506,18,1506,54,[6,[[1506,20,1506,41,[19,[1506,20,1506,27,[2,[],"context"]],[1506,28,1506,41,"fileIsIgnored"]]],[1506,43,1506,52,[2,[],"isExposed"]]]]],[[[1507,17,1507,32,[7,[[1507,19,1507,23,[12,[[],"True"],[]]],[1507,25,1507,30,[12,[[],"False"],[]]]]]],[1508,21,1508,25,[2,[],"acc_"]]],[[1510,17,1510,31,[7,[[1510,19,1510,23,[12,[[],"True"],[]]],[1510,25,1510,29,[12,[[],"True"],[]]]]]],[1511,21,1511,50,[0,[[1511,21,1511,31,[2,[],"addExposed"]],[1511,32,1511,45,[7,[1511,33,1511,44,[0,[[1511,33,1511,41,[2,[],"makeInfo"]],[1511,42,1511,44,[10]]]]]]],[1511,46,1511,50,[2,[],"acc_"]]]]]],[[1513,17,1513,32,[7,[[1513,19,1513,24,[12,[[],"False"],[]]],[1513,26,1513,30,[12,[[],"True"],[]]]]]],[1514,21,1519,58,[16,[[[1515,25,1517,40,[0,[[0],[1,[1515,25,1515,36,[[1515,25,1515,29,"info"],[1515,32,1515,36,[0,"info"]]]]],[1516,25,1517,40,[[1516,25,1516,29,"info"],[],[1517,29,1517,40,[0,[[1517,29,1517,37,[2,[],"makeInfo"]],[1517,38,1517,40,[10]]]]]]]]]]],[1519,21,1519,58,[1,"<|",1,[1519,21,1519,36,[0,[[1519,21,1519,31,[2,[],"addExposed"]],[1519,32,1519,36,[2,[],"info"]]]]],[1519,40,1519,58,[0,[[1519,40,1519,48,[2,[],"addLocal"]],[1519,49,1519,53,[2,[],"info"]],[1519,54,1519,58,[2,[],"acc_"]]]]]]]]]]],[[1521,17,1521,33,[7,[[1521,19,1521,24,[12,[[],"False"],[]]],[1521,26,1521,31,[12,[[],"False"],[]]]]]],[1522,21,1522,48,[0,[[1522,21,1522,29,[2,[],"addLocal"]],[1522,30,1522,43,[7,[1522,31,1522,42,[0,[[1522,31,1522,39,[2,[],"makeInfo"]],[1522,40,1522,42,[10]]]]]]],[1522,44,1522,48,[2,[],"acc_"]]]]]]]]]]]]]]]]]]],[1524,5,1673,16,[17,[[1524,10,1524,25,[0,[[1524,10,1524,20,[2,["Node"],"value"]],[1524,21,1524,25,[2,[],"node"]]]]],[[[1525,9,1525,42,[12,[[],"FunctionDeclaration"],[[1525,29,1525,42,[8,[[1525,31,1525,40,"signature"]]]]]]],[1526,13,1540,22,[1,"|>",0,[1526,13,1526,43,[0,[[1526,13,1526,22,[2,["Maybe"],"map"]],[1526,23,1526,33,[2,["Node"],"value"]],[1526,34,1526,43,[2,[],"signature"]]]]],[1527,20,1540,22,[0,[[1527,20,1527,33,[2,["MaybeX"],"unwrap"]],[1527,34,1527,37,[2,[],"acc"]],[1528,21,1540,22,[7,[1528,22,1539,111,[18,[[[1528,23,1528,47,[8,[[1528,25,1528,29,"name"],[1528,31,1528,45,"typeAnnotation"]]]]],[1529,25,1539,111,[16,[[[1530,29,1532,48,[0,[[0],[1,[1530,29,1530,39,[[1530,29,1530,30,"n"],[1530,33,1530,39,[1,[1530,33,1530,39,[[],"String"]],[]]]]]],[1531,29,1532,48,[[1531,29,1531,30,"n"],[],[1532,33,1532,48,[0,[[1532,33,1532,43,[2,["Node"],"value"]],[1532,44,1532,48,[2,[],"name"]]]]]]]]]]],[1534,25,1539,111,[0,[[1534,25,1534,38,[2,[],"skipIfIgnored"]],[1534,39,1534,67,[7,[1534,40,1534,66,[1,"<<",0,[1534,40,1534,52,[0,[[1534,40,1534,50,[2,["Set"],"member"]],[1534,51,1534,52,[2,[],"n"]]]]],[1534,56,1534,66,[20,".functions"]]]]]],[1535,29,1535,32,[2,[],"acc"]],[1537,29,1537,95,[7,[1537,30,1537,94,[18,[[[1537,31,1537,33,[1]]],[1537,37,1537,94,[6,[[1537,39,1537,40,[2,[],"n"]],[1537,42,1537,92,[0,[[1537,42,1537,69,[2,[],"typeAnnotToNoncanonicalType"]],[1537,70,1537,77,[2,[],"context"]],[1537,78,1537,92,[2,[],"typeAnnotation"]]]]]]]]]]]]],[1538,29,1538,97,[7,[1538,30,1538,96,[18,[[[1538,31,1538,35,[11,"info"]],[1538,36,1538,40,[11,"acc_"]]],[1538,44,1538,96,[21,[1538,46,1538,50,"acc_"],[[1538,53,1538,95,[[1538,53,1538,66,"functionTypes"],[1538,69,1538,94,[1,"::",1,[1538,69,1538,73,[2,[],"info"]],[1538,77,1538,94,[19,[1538,77,1538,80,[2,[],"acc"]],[1538,81,1538,94,"functionTypes"]]]]]]]]]]]]]]],[1539,29,1539,111,[7,[1539,30,1539,110,[18,[[[1539,31,1539,35,[11,"info"]],[1539,36,1539,40,[11,"acc_"]]],[1539,44,1539,110,[21,[1539,46,1539,50,"acc_"],[[1539,53,1539,109,[[1539,53,1539,73,"exposedFunctionTypes"],[1539,76,1539,108,[1,"::",1,[1539,76,1539,80,[2,[],"info"]],[1539,84,1539,108,[19,[1539,84,1539,87,[2,[],"acc"]],[1539,88,1539,108,"exposedFunctionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[[1542,9,1542,63,[12,[[],"CustomTypeDeclaration"],[[1542,31,1542,63,[8,[[1542,33,1542,37,"name"],[1542,39,1542,47,"generics"],[1542,49,1542,61,"constructors"]]]]]]],[1543,13,1591,18,[16,[[[1544,17,1546,36,[0,[[0],[1,[1544,17,1544,27,[[1544,17,1544,18,"n"],[1544,21,1544,27,[1,[1544,21,1544,27,[[],"String"]],[]]]]]],[1545,17,1546,36,[[1545,17,1545,18,"n"],[],[1546,21,1546,36,[0,[[1546,21,1546,31,[2,["Node"],"value"]],[1546,32,1546,36,[2,[],"name"]]]]]]]]]]],[1548,13,1591,18,[0,[[1548,13,1548,26,[2,[],"skipIfIgnored"]],[1548,27,1548,55,[7,[1548,28,1548,54,[1,"<<",0,[1548,28,1548,40,[0,[[1548,28,1548,38,[2,["Set"],"member"]],[1548,39,1548,40,[2,[],"n"]]]]],[1548,44,1548,54,[20,".openTypes"]]]]]],[1549,17,1549,20,[2,[],"acc"]],[1550,17,1579,18,[7,[1550,18,1578,37,[18,[[[1550,19,1550,21,[1]]],[1551,21,1578,37,[0,[[1551,21,1551,31,[2,["List"],"foldl"]],[1552,25,1576,26,[7,[1552,26,1575,37,[18,[[[1552,27,1552,28,[11,"c"]],[1552,29,1552,43,[7,[[1552,31,1552,35,[11,"fAcc"]],[1552,37,1552,41,[11,"rAcc"]]]]]],[1553,29,1575,37,[1,"|>",0,[1553,29,1565,45,[1,"|>",0,[1553,29,1553,41,[0,[[1553,29,1553,39,[2,["Node"],"value"]],[1553,40,1553,41,[2,[],"c"]]]]],[1554,36,1565,45,[0,[[1554,36,1554,64,[2,[],"makeConstructorAndSubrecords"]],[1555,37,1564,38,[7,[1555,38,1563,45,[1,"|>",0,[1555,38,1555,66,[0,[[1555,38,1555,46,[2,["List"],"map"]],[1555,47,1555,57,[2,["Node"],"value"]],[1555,58,1555,66,[2,[],"generics"]]]]],[1556,44,1563,45,[7,[1556,45,1562,78,[18,[[[1556,46,1556,48,[11,"gs"]]],[1557,49,1562,78,[1,"|>",0,[1557,49,1561,63,[1,"|>",0,[1557,49,1560,101,[1,"|>",0,[1557,49,1559,72,[1,"|>",0,[1557,49,1558,75,[1,"|>",0,[1557,49,1557,78,[0,[[1557,49,1557,57,[2,["List"],"map"]],[1557,58,1557,75,[7,[1557,59,1557,74,[0,[[1557,59,1557,66,[2,[],"TypeVar"]],[1557,67,1557,74,[2,[],"Nothing"]]]]]]],[1557,76,1557,78,[2,[],"gs"]]]]],[1558,56,1558,75,[0,[[1558,56,1558,65,[2,[],"NamedType"]],[1558,66,1558,75,[6,[[1558,68,1558,70,[9,[]]],[1558,72,1558,73,[2,[],"n"]]]]]]]]]],[1559,56,1559,72,[2,[],"DereferencedType"]]]],[1560,56,1560,101,[0,[[1560,56,1560,70,[2,[],"assignTypeVars"]],[1560,71,1560,101,[7,[1560,72,1560,100,[0,[[1560,72,1560,97,[2,[],"makePositionalArgTypeVars"]],[1560,98,1560,100,[2,[],"gs"]]]]]]]]]]]],[1561,56,1561,63,[2,[],"getType"]]]],[1562,56,1562,78,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]],[1565,37,1565,45,[2,[],"generics"]]]]]]],[1566,36,1575,37,[7,[1566,37,1574,42,[18,[[[1566,38,1566,55,[7,[[1566,40,1566,42,[11,"n_"]],[1566,44,1566,49,[11,"type_"]],[1566,51,1566,53,[11,"rs"]]]]]],[1567,41,1574,42,[6,[[1567,43,1572,52,[1,"::",1,[1567,43,1571,44,[6,[[1567,45,1567,47,[2,[],"n_"]],[1568,45,1570,46,[8,[[1568,47,1568,70,[[1568,47,1568,61,"customTypeName"],[1568,64,1568,70,[0,[[1568,64,1568,68,[2,[],"Just"]],[1568,69,1568,70,[2,[],"n"]]]]]]],[1569,47,1570,45,[[1569,47,1569,52,"type_"],[1569,55,1569,60,[2,[],"type_"]]]]]]]]]],[1572,48,1572,52,[2,[],"fAcc"]]]],[1573,43,1573,53,[1,"++",1,[1573,43,1573,45,[2,[],"rs"]],[1573,49,1573,53,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[1577,25,1577,35,[6,[[1577,27,1577,29,[9,[]]],[1577,31,1577,33,[9,[]]]]]],[1578,25,1578,37,[2,[],"constructors"]]]]]]]]]],[1580,17,1585,18,[7,[1580,18,1584,22,[18,[[[1580,19,1580,50,[7,[[1580,21,1580,36,[11,"newConstructors"]],[1580,38,1580,48,[11,"newRecords"]]]]],[1580,51,1580,55,[11,"acc_"]]],[1581,21,1584,22,[21,[1581,23,1581,27,"acc_"],[[1582,27,1583,25,[[1582,27,1582,43,"canonicalRecords"],[1582,46,1582,80,[1,"++",1,[1582,46,1582,56,[2,[],"newRecords"]],[1582,60,1582,80,[19,[1582,60,1582,63,[2,[],"acc"]],[1582,64,1582,80,"canonicalRecords"]]]]]]],[1583,27,1584,21,[[1583,27,1583,39,"constructors"],[1583,42,1583,77,[1,"++",1,[1583,42,1583,57,[2,[],"newConstructors"]],[1583,61,1583,77,[19,[1583,61,1583,64,[2,[],"acc"]],[1583,65,1583,77,"constructors"]]]]]]]]]]]]]]],[1586,17,1591,18,[7,[1586,18,1590,22,[18,[[[1586,19,1586,50,[7,[[1586,21,1586,36,[11,"newConstructors"]],[1586,38,1586,48,[11,"newRecords"]]]]],[1586,51,1586,55,[11,"acc_"]]],[1587,21,1590,22,[21,[1587,23,1587,27,"acc_"],[[1588,27,1589,25,[[1588,27,1588,50,"exposedCanonicalRecords"],[1588,53,1588,94,[1,"++",1,[1588,53,1588,63,[2,[],"newRecords"]],[1588,67,1588,94,[19,[1588,67,1588,70,[2,[],"acc"]],[1588,71,1588,94,"exposedCanonicalRecords"]]]]]]],[1589,27,1590,21,[[1589,27,1589,46,"exposedConstructors"],[1589,49,1589,91,[1,"++",1,[1589,49,1589,64,[2,[],"newConstructors"]],[1589,68,1589,91,[19,[1589,68,1589,71,[2,[],"acc"]],[1589,72,1589,91,"exposedConstructors"]]]]]]]]]]]]]]]]]]]]]],[[1593,9,1593,60,[12,[[],"AliasDeclaration"],[[1593,26,1593,60,[8,[[1593,28,1593,32,"name"],[1593,34,1593,42,"generics"],[1593,44,1593,58,"typeAnnotation"]]]]]]],[1594,13,1666,18,[16,[[[1595,17,1597,36,[0,[[0],[1,[1595,17,1595,27,[[1595,17,1595,18,"n"],[1595,21,1595,27,[1,[1595,21,1595,27,[[],"String"]],[]]]]]],[1596,17,1597,36,[[1596,17,1596,18,"n"],[],[1597,21,1597,36,[0,[[1597,21,1597,31,[2,["Node"],"value"]],[1597,32,1597,36,[2,[],"name"]]]]]]]]]],[1599,17,1609,22,[0,[[0],[1,[1599,17,1599,63,[[1599,17,1599,26,"aliasInfo"],[1599,29,1599,63,[3,[[1599,31,1599,37,[1,[1599,31,1599,37,[[],"String"]],[]]],[1599,39,1599,61,[1,[1599,39,1599,61,[[],"TypeWithPositionalVars"]],[]]]]]]]]],[1600,17,1609,22,[[1600,17,1600,26,"aliasInfo"],[],[1601,21,1609,22,[6,[[1601,23,1601,24,[2,[],"n"]],[1602,23,1608,39,[0,[[1602,23,1602,56,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1602,57,1602,64,[2,[],"context"]],[1604,25,1606,26,[8,[[1604,27,1604,66,[[1604,27,1604,58,"constrainedTypeVarsAreRespected"],[1604,61,1604,66,[2,[],"False"]]]],[1605,27,1606,25,[[1605,27,1605,51,"subrecordIsAlsoCanonical"],[1605,54,1605,101,[0,[[1605,54,1605,82,[2,[],"subrecordCanonicityForRecord"]],[1605,83,1605,101,[2,[],"subrecordTreatment"]]]]]]]]]],[1607,25,1607,55,[7,[1607,26,1607,54,[0,[[1607,26,1607,34,[2,["List"],"map"]],[1607,35,1607,45,[2,["Node"],"value"]],[1607,46,1607,54,[2,[],"generics"]]]]]]],[1608,25,1608,39,[2,[],"typeAnnotation"]]]]]]]]]]]]]],[1611,13,1666,18,[0,[[1611,13,1611,26,[2,[],"skipIfIgnored"]],[1611,27,1611,51,[7,[1611,28,1611,50,[1,"<<",0,[1611,28,1611,40,[0,[[1611,28,1611,38,[2,["Set"],"member"]],[1611,39,1611,40,[2,[],"n"]]]]],[1611,44,1611,50,[20,".types"]]]]]],[1612,17,1612,75,[21,[1612,19,1612,22,"acc"],[[1612,25,1612,74,[[1612,25,1612,39,"exposedAliases"],[1612,42,1612,73,[1,"::",1,[1612,42,1612,51,[2,[],"aliasInfo"]],[1612,55,1612,73,[19,[1612,55,1612,58,[2,[],"acc"]],[1612,59,1612,73,"exposedAliases"]]]]]]]]]],[1613,17,1653,18,[7,[1613,18,1652,30,[18,[[[1613,19,1613,21,[1]]],[1614,21,1652,30,[1,"|>",0,[1614,21,1614,49,[0,[[1614,21,1614,34,[2,[],"annotToFields"]],[1614,35,1614,49,[2,[],"typeAnnotation"]]]]],[1615,28,1652,30,[0,[[1615,28,1615,41,[2,["MaybeX"],"unwrap"]],[1615,42,1615,52,[6,[[1615,44,1615,46,[9,[]]],[1615,48,1615,50,[9,[]]]]]],[1616,29,1652,30,[7,[1616,30,1651,34,[18,[[[1616,31,1616,52,[7,[[1616,33,1616,39,[11,"fields"]],[1616,41,1616,50,[11,"isGeneric"]]]]]],[1617,33,1651,34,[6,[[1618,35,1648,38,[11,[1618,38,1618,47,[2,[],"isGeneric"]],[1619,37,1619,39,[9,[]]],[1622,37,1648,38,[9,[[1622,39,1647,40,[6,[[1622,41,1622,42,[2,[],"n"]],[1623,41,1646,42,[8,[[1623,43,1623,67,[[1623,43,1623,57,"customTypeName"],[1623,60,1623,67,[2,[],"Nothing"]]]],[1624,43,1646,41,[[1624,43,1624,48,"type_"],[1625,45,1645,53,[1,"|>",0,[1625,45,1625,73,[0,[[1625,45,1625,53,[2,["List"],"map"]],[1625,54,1625,64,[2,["Node"],"value"]],[1625,65,1625,73,[2,[],"generics"]]]]],[1626,52,1645,53,[7,[1626,53,1644,66,[18,[[[1626,54,1626,58,[11,"vars"]]],[1627,57,1644,66,[1,"|>",0,[1627,57,1636,67,[0,[[1627,57,1627,65,[2,["List"],"map"]],[1628,61,1635,62,[7,[1628,62,1634,73,[1,">>",1,[1628,62,1628,72,[2,["Node"],"value"]],[1629,68,1634,73,[1,">>",1,[1629,68,1629,80,[2,["Tuple"],"second"]],[1630,68,1634,73,[0,[[1630,68,1630,101,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1630,102,1630,109,[2,[],"context"]],[1631,69,1633,70,[8,[[1631,71,1631,109,[[1631,71,1631,102,"constrainedTypeVarsAreRespected"],[1631,105,1631,109,[2,[],"True"]]]],[1632,71,1633,69,[[1632,71,1632,95,"subrecordIsAlsoCanonical"],[1632,98,1632,144,[0,[[1632,98,1632,125,[2,[],"subrecordCanonicityForField"]],[1632,126,1632,144,[2,[],"subrecordTreatment"]]]]]]]]]],[1634,69,1634,73,[2,[],"vars"]]]]]]]]]]],[1636,61,1636,67,[2,[],"fields"]]]]],[1637,64,1644,66,[0,[[1637,64,1637,98,[2,[],"makeFunctionTypeWithPositionalVars"]],[1638,65,1644,66,[7,[1638,66,1643,83,[0,[[1638,66,1638,99,[2,[],"typeAnnotToTypeWithPositionalVars"]],[1638,100,1638,107,[2,[],"context"]],[1639,69,1641,70,[8,[[1639,71,1639,109,[[1639,71,1639,102,"constrainedTypeVarsAreRespected"],[1639,105,1639,109,[2,[],"True"]]]],[1640,71,1641,69,[[1640,71,1640,95,"subrecordIsAlsoCanonical"],[1640,98,1640,145,[0,[[1640,98,1640,126,[2,[],"subrecordCanonicityForRecord"]],[1640,127,1640,145,[2,[],"subrecordTreatment"]]]]]]]]]],[1642,69,1642,73,[2,[],"vars"]],[1643,69,1643,83,[2,[],"typeAnnotation"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1649,35,1650,80,[1,"|>",0,[1649,35,1649,108,[0,[[1649,35,1649,59,[2,[],"knownRecordFromTypeAnnot"]],[1649,60,1649,78,[2,[],"subrecordTreatment"]],[1649,79,1649,86,[2,[],"context"]],[1649,87,1649,108,[6,[[1649,89,1649,95,[2,[],"fields"]],[1649,97,1649,106,[2,[],"isGeneric"]]]]]]]],[1650,40,1650,80,[0,[[1650,40,1650,48,[2,["List"],"map"]],[1650,49,1650,80,[7,[1650,50,1650,79,[0,[[1650,50,1650,64,[2,["Tuple"],"mapFirst"]],[1650,65,1650,79,[7,[1650,66,1650,78,[18,[[[1650,67,1650,68,[11,"s"]]],[1650,72,1650,78,[1,"++",1,[1650,72,1650,73,[2,[],"n"]],[1650,77,1650,78,[2,[],"s"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1654,17,1660,18,[7,[1654,18,1659,22,[18,[[[1654,19,1654,50,[7,[[1654,21,1654,36,[11,"newConstructors"]],[1654,38,1654,48,[11,"newRecords"]]]]],[1654,51,1654,55,[11,"acc_"]]],[1655,21,1659,22,[21,[1655,23,1655,27,"acc_"],[[1656,27,1657,25,[[1656,27,1656,34,"aliases"],[1656,37,1656,61,[1,"::",1,[1656,37,1656,46,[2,[],"aliasInfo"]],[1656,50,1656,61,[19,[1656,50,1656,53,[2,[],"acc"]],[1656,54,1656,61,"aliases"]]]]]]],[1657,27,1658,25,[[1657,27,1657,43,"canonicalRecords"],[1657,46,1657,80,[1,"++",1,[1657,46,1657,56,[2,[],"newRecords"]],[1657,60,1657,80,[19,[1657,60,1657,63,[2,[],"acc"]],[1657,64,1657,80,"canonicalRecords"]]]]]]],[1658,27,1659,21,[[1658,27,1658,39,"constructors"],[1658,42,1658,77,[1,"++",1,[1658,42,1658,57,[2,[],"newConstructors"]],[1658,61,1658,77,[19,[1658,61,1658,64,[2,[],"acc"]],[1658,65,1658,77,"constructors"]]]]]]]]]]]]]]],[1661,17,1666,18,[7,[1661,18,1665,22,[18,[[[1661,19,1661,50,[7,[[1661,21,1661,36,[11,"newConstructors"]],[1661,38,1661,48,[11,"newRecords"]]]]],[1661,51,1661,55,[11,"acc_"]]],[1662,21,1665,22,[21,[1662,23,1662,27,"acc_"],[[1663,27,1664,25,[[1663,27,1663,50,"exposedCanonicalRecords"],[1663,53,1663,94,[1,"++",1,[1663,53,1663,63,[2,[],"newRecords"]],[1663,67,1663,94,[19,[1663,67,1663,70,[2,[],"acc"]],[1663,71,1663,94,"exposedCanonicalRecords"]]]]]]],[1664,27,1665,21,[[1664,27,1664,46,"exposedConstructors"],[1664,49,1664,91,[1,"++",1,[1664,49,1664,64,[2,[],"newConstructors"]],[1664,68,1664,91,[19,[1664,68,1664,71,[2,[],"acc"]],[1664,72,1664,91,"exposedConstructors"]]]]]]]]]]]]]]]]]]]]]],[[1668,9,1668,10,[0]],[1673,13,1673,16,[2,[],"acc"]]]]]]]]]]]]]]],[1676,1,1685,15,[0,[[1,[1676,1,1677,3,"{-| Visit each TLD and check it in turn.\n-}"]],[1,[1678,1,1678,93,[[1678,1,1678,24,"declarationEnterVisitor"],[1678,27,1678,93,[6,[1678,27,1678,37,[1,[1678,27,1678,37,[[],"RuleConfig"]],[]]],[1678,41,1678,93,[6,[1678,41,1678,54,[1,[1678,41,1678,54,[[],"ModuleContext"]],[]]],[1678,58,1678,93,[6,[1678,58,1678,74,[1,[1678,58,1678,62,[[],"Node"]],[[1678,63,1678,74,[1,[1678,63,1678,74,[[],"Declaration"]],[]]]]]],[1678,78,1678,93,[1,[1678,78,1678,82,[[],"List"]],[[1678,83,1678,93,[1,[1678,84,1678,89,[[],"Error"]],[[1678,90,1678,92,[4,[]]]]]]]]]]]]]]]]]],[1679,1,1685,15,[[1679,1,1679,24,"declarationEnterVisitor"],[[1679,25,1679,31,[11,"config"]],[1679,32,1679,39,[11,"context"]],[1679,40,1679,44,[11,"node"]]],[1680,5,1685,15,[17,[[1680,10,1680,25,[0,[[1680,10,1680,20,[2,["Node"],"value"]],[1680,21,1680,25,[2,[],"node"]]]]],[[[1681,9,1681,30,[12,[[],"FunctionDeclaration"],[[1681,29,1681,30,[11,"f"]]]]],[1682,13,1682,97,[0,[[1682,13,1682,37,[2,[],"checkFunctionDeclaration"]],[1682,38,1682,44,[2,[],"config"]],[1682,45,1682,95,[8,[[1682,47,1682,64,[[1682,47,1682,54,"context"],[1682,57,1682,64,[2,[],"context"]]]],[1682,66,1682,94,[[1682,66,1682,80,"localFunctions"],[1682,83,1682,93,[2,["Dict"],"empty"]]]]]]],[1682,96,1682,97,[2,[],"f"]]]]]],[[1684,9,1684,10,[0]],[1685,13,1685,15,[9,[]]]]]]]]]]]]],[1688,1,1704,111,[0,[[1,[1688,1,1690,3,"{-| Check a function declaration for unsorted record signatures, patterns, or\nexpressions.\n-}"]],[1,[1691,1,1691,85,[[1691,1,1691,25,"checkFunctionDeclaration"],[1691,28,1691,85,[6,[1691,28,1691,38,[1,[1691,28,1691,38,[[],"RuleConfig"]],[]]],[1691,42,1691,85,[6,[1691,42,1691,54,[1,[1691,42,1691,54,[[],"LocalContext"]],[]]],[1691,58,1691,85,[6,[1691,58,1691,66,[1,[1691,58,1691,66,[[],"Function"]],[]]],[1691,70,1691,85,[1,[1691,70,1691,74,[[],"List"]],[[1691,75,1691,85,[1,[1691,76,1691,81,[[],"Error"]],[[1691,82,1691,84,[4,[]]]]]]]]]]]]]]]]]],[1692,1,1704,111,[[1692,1,1692,25,"checkFunctionDeclaration"],[[1692,26,1692,32,[11,"config"]],[1692,33,1692,38,[11,"local"]],[1692,39,1692,43,[11,"func"]]],[1693,5,1704,111,[16,[[[1694,9,1695,40,[1,[1694,9,1694,34,[8,[[1694,11,1694,20,"arguments"],[1694,22,1694,32,"expression"]]]],[1695,13,1695,40,[0,[[1695,13,1695,23,[2,["Node"],"value"]],[1695,24,1695,40,[19,[1695,24,1695,28,[2,[],"func"]],[1695,29,1695,40,"declaration"]]]]]]]],[1697,9,1700,42,[0,[[0],[1,[1697,9,1697,41,[[1697,9,1697,16,"hasType"],[1697,19,1697,41,[1,[1697,19,1697,24,[[],"Maybe"]],[[1697,25,1697,41,[1,[1697,25,1697,41,[[],"DereferencedType"]],[]]]]]]]]],[1698,9,1700,42,[[1698,9,1698,16,"hasType"],[],[1699,13,1700,42,[1,"|>",0,[1699,13,1699,50,[0,[[1699,13,1699,31,[2,[],"getFunctionBinding"]],[1699,32,1699,45,[19,[1699,32,1699,37,[2,[],"local"]],[1699,38,1699,45,"context"]]],[1699,46,1699,50,[2,[],"func"]]]]],[1700,20,1700,42,[0,[[1700,20,1700,29,[2,["Maybe"],"map"]],[1700,30,1700,42,[2,["Tuple"],"second"]]]]]]]]]]]]],[1702,5,1704,111,[1,"|>",0,[1702,5,1703,32,[1,"|>",0,[1702,5,1702,113,[0,[[1702,5,1702,14,[2,["Maybe"],"map"]],[1702,15,1702,98,[7,[1702,16,1702,97,[1,"<<",0,[1702,16,1702,83,[1,"<<",0,[1702,16,1702,64,[0,[[1702,16,1702,35,[2,[],"checkTypeAnnotation"]],[1702,36,1702,42,[2,[],"config"]],[1702,43,1702,56,[19,[1702,43,1702,48,[2,[],"local"]],[1702,49,1702,56,"context"]]],[1702,57,1702,64,[2,[],"Nothing"]]]]],[1702,68,1702,83,[20,".typeAnnotation"]]]],[1702,87,1702,97,[2,["Node"],"value"]]]]]],[1702,99,1702,113,[19,[1702,99,1702,103,[2,[],"func"]],[1702,104,1702,113,"signature"]]]]]],[1703,12,1703,32,[0,[[1703,12,1703,29,[2,["Maybe"],"withDefault"]],[1703,30,1703,32,[9,[]]]]]]]],[1704,12,1704,111,[7,[1704,13,1704,110,[18,[[[1704,14,1704,25,[11,"errsInAnnot"]]],[1704,29,1704,110,[1,"++",1,[1704,29,1704,40,[2,[],"errsInAnnot"]],[1704,44,1704,110,[0,[[1704,44,1704,68,[2,[],"checkFunctionArgsAndExpr"]],[1704,69,1704,75,[2,[],"config"]],[1704,76,1704,81,[2,[],"local"]],[1704,82,1704,89,[2,[],"hasType"]],[1704,90,1704,99,[2,[],"arguments"]],[1704,100,1704,110,[2,[],"expression"]]]]]]]]]]]]]]]]]]]]]],[1707,1,1718,14,[0,[[1,[1707,1,1708,3,"{-| Get the name and type of a function, if possible.\n-}"]],[1,[1709,1,1709,85,[[1709,1,1709,19,"getFunctionBinding"],[1709,22,1709,85,[6,[1709,22,1709,35,[1,[1709,22,1709,35,[[],"ModuleContext"]],[]]],[1709,39,1709,85,[6,[1709,39,1709,47,[1,[1709,39,1709,47,[[],"Function"]],[]]],[1709,51,1709,85,[1,[1709,51,1709,56,[[],"Maybe"]],[[1709,57,1709,85,[3,[[1709,59,1709,65,[1,[1709,59,1709,65,[[],"String"]],[]]],[1709,67,1709,83,[1,[1709,67,1709,83,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[1710,1,1718,14,[[1710,1,1710,19,"getFunctionBinding"],[[1710,20,1710,27,[11,"context"]],[1710,28,1710,41,[8,[[1710,30,1710,39,"signature"]]]]],[1711,5,1718,14,[1,"|>",0,[1711,5,1711,35,[0,[[1711,5,1711,14,[2,["Maybe"],"map"]],[1711,15,1711,25,[2,["Node"],"value"]],[1711,26,1711,35,[2,[],"signature"]]]]],[1712,12,1718,14,[0,[[1712,12,1712,21,[2,["Maybe"],"map"]],[1713,13,1718,14,[7,[1713,14,1717,18,[18,[[[1713,15,1713,39,[8,[[1713,17,1713,21,"name"],[1713,23,1713,37,"typeAnnotation"]]]]],[1714,17,1717,18,[6,[[1714,19,1714,34,[0,[[1714,19,1714,29,[2,["Node"],"value"]],[1714,30,1714,34,[2,[],"name"]]]]],[1715,19,1716,47,[1,"|>",0,[1715,19,1715,69,[0,[[1715,19,1715,46,[2,[],"typeAnnotToNoncanonicalType"]],[1715,47,1715,54,[2,[],"context"]],[1715,55,1715,69,[2,[],"typeAnnotation"]]]]],[1716,24,1716,47,[0,[[1716,24,1716,39,[2,[],"dereferenceType"]],[1716,40,1716,47,[2,[],"context"]]]]]]]]]]]]]]]]]]]]]]]]],[1721,1,1731,72,[0,[[1,[1721,1,1723,3,"{-| Given a return type and a successive list of argument types, create a\nfunction with that type.\n-}"]],[1,[1724,1,1724,45,[[1724,1,1724,17,"makeFunctionType"],[1724,20,1724,45,[6,[1724,20,1724,24,[1,[1724,20,1724,24,[[],"Type"]],[]]],[1724,28,1724,45,[6,[1724,28,1724,37,[1,[1724,28,1724,32,[[],"List"]],[[1724,33,1724,37,[1,[1724,33,1724,37,[[],"Type"]],[]]]]]],[1724,41,1724,45,[1,[1724,41,1724,45,[[],"Type"]],[]]]]]]]]]],[1725,1,1731,72,[[1725,1,1725,17,"makeFunctionType"],[[1725,18,1725,24,[11,"return"]],[1725,25,1725,27,[11,"ts"]]],[1726,5,1731,72,[17,[[1726,10,1726,12,[2,[],"ts"]],[[[1727,9,1727,11,[10,[]]],[1728,13,1728,19,[2,[],"return"]]],[[1730,9,1730,17,[9,[1730,9,1730,10,[11,"t"]],[1730,14,1730,17,[11,"ts_"]]]],[1731,13,1731,72,[0,[[1731,13,1731,25,[2,[],"FunctionType"]],[1731,26,1731,72,[8,[[1731,28,1731,36,[[1731,28,1731,32,"from"],[1731,35,1731,36,[2,[],"t"]]]],[1731,38,1731,71,[[1731,38,1731,40,"to"],[1731,43,1731,70,[0,[[1731,43,1731,59,[2,[],"makeFunctionType"]],[1731,60,1731,66,[2,[],"return"]],[1731,67,1731,70,[2,[],"ts_"]]]]]]]]]]]]]]]]]]]]]]],[1734,1,1740,34,[0,[[1,[1734,1,1736,3,"{-| Given a return type and a successive list of argument types, create a\nfunction with that type, all types having positional vars.\n-}"]],[1,[1737,1,1737,117,[[1737,1,1737,35,"makeFunctionTypeWithPositionalVars"],[1737,38,1737,117,[6,[1737,38,1737,60,[1,[1737,38,1737,60,[[],"TypeWithPositionalVars"]],[]]],[1737,64,1737,117,[6,[1737,64,1737,91,[1,[1737,64,1737,68,[[],"List"]],[[1737,69,1737,91,[1,[1737,69,1737,91,[[],"TypeWithPositionalVars"]],[]]]]]],[1737,95,1737,117,[1,[1737,95,1737,117,[[],"TypeWithPositionalVars"]],[]]]]]]]]]],[1738,1,1740,34,[[1738,1,1738,35,"makeFunctionTypeWithPositionalVars"],[[1738,36,1738,42,[11,"return"]],[1738,43,1738,45,[11,"ts"]]],[1739,5,1740,34,[1,"|>",0,[1739,5,1739,96,[0,[[1739,5,1739,21,[2,[],"makeFunctionType"]],[1739,22,1739,56,[7,[1739,23,1739,55,[0,[[1739,23,1739,48,[2,[],"getTypeWithPositionalVars"]],[1739,49,1739,55,[2,[],"return"]]]]]]],[1739,57,1739,96,[7,[1739,58,1739,95,[0,[[1739,58,1739,66,[2,["List"],"map"]],[1739,67,1739,92,[2,[],"getTypeWithPositionalVars"]],[1739,93,1739,95,[2,[],"ts"]]]]]]]]]],[1740,12,1740,34,[2,[],"TypeWithPositionalVars"]]]]]]]]],[1743,1,1754,34,[0,[[1,[1743,1,1747,3,"{-| Given context, whether or not a top-level record type (if `Just`) and\nsubrecords (if `Just True`) found are in canonical order, and a `Dict` of\npositional type variables, convert a `TypeAnnotation` into a\n`TypeWithPositionalVars`.\n-}"]],[1,[1748,1,1748,260,[[1748,1,1748,34,"typeAnnotToTypeWithPositionalVars"],[1748,37,1748,260,[6,[1748,37,1748,111,[5,[1748,39,1748,46,"context"],[1748,48,1748,110,[[1748,49,1748,72,[[1748,49,1748,59,"moduleName"],[1748,62,1748,72,[1,[1748,62,1748,72,[[],"ModuleName"]],[]]]]],[1748,74,1748,110,[[1748,74,1748,85,"lookupTable"],[1748,88,1748,109,[1,[1748,88,1748,109,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1748,115,1748,260,[6,[1748,115,1748,196,[4,[[1748,117,1748,155,[[1748,117,1748,148,"constrainedTypeVarsAreRespected"],[1748,151,1748,155,[1,[1748,151,1748,155,[[],"Bool"]],[]]]]],[1748,157,1748,195,[[1748,157,1748,181,"subrecordIsAlsoCanonical"],[1748,184,1748,194,[1,[1748,184,1748,189,[[],"Maybe"]],[[1748,190,1748,194,[1,[1748,190,1748,194,[[],"Bool"]],[]]]]]]]]]]],[1748,200,1748,260,[6,[1748,200,1748,211,[1,[1748,200,1748,204,[[],"List"]],[[1748,205,1748,211,[1,[1748,205,1748,211,[[],"String"]],[]]]]]],[1748,215,1748,260,[6,[1748,215,1748,234,[1,[1748,215,1748,219,[[],"Node"]],[[1748,220,1748,234,[1,[1748,220,1748,234,[[],"TypeAnnotation"]],[]]]]]],[1748,238,1748,260,[1,[1748,238,1748,260,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[1749,1,1754,34,[[1749,1,1749,34,"typeAnnotToTypeWithPositionalVars"],[[1749,35,1749,42,[11,"context"]],[1749,43,1749,51,[11,"settings"]],[1749,52,1749,60,[11,"typeArgs"]]],[1750,5,1754,34,[1,">>",1,[1750,5,1750,37,[0,[[1750,5,1750,20,[2,[],"typeAnnotToType"]],[1750,21,1750,28,[2,[],"context"]],[1750,29,1750,37,[2,[],"settings"]]]]],[1751,12,1754,34,[1,">>",1,[1751,12,1751,28,[2,[],"DereferencedType"]],[1752,12,1754,34,[1,">>",1,[1752,12,1752,63,[0,[[1752,12,1752,26,[2,[],"assignTypeVars"]],[1752,27,1752,63,[7,[1752,28,1752,62,[0,[[1752,28,1752,53,[2,[],"makePositionalArgTypeVars"]],[1752,54,1752,62,[2,[],"typeArgs"]]]]]]]]]],[1753,12,1754,34,[1,">>",1,[1753,12,1753,19,[2,[],"getType"]],[1754,12,1754,34,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]]]],[1757,1,1794,13,[0,[[1,[1757,1,1760,3,"{-| Given how to treat subrecords, the current module names, and a\n`RecordDefinition`/whether the record is generic, generate all `KnownRecord`s\nfrom a type annotation.\n-}"]],[1,[1761,1,1761,187,[[1761,1,1761,25,"knownRecordFromTypeAnnot"],[1761,28,1761,187,[6,[1761,28,1761,47,[1,[1761,28,1761,47,[[],"SubrecordCanonicity"]],[]]],[1761,51,1761,187,[6,[1761,51,1761,125,[5,[1761,53,1761,60,"context"],[1761,62,1761,124,[[1761,63,1761,86,[[1761,63,1761,73,"moduleName"],[1761,76,1761,86,[1,[1761,76,1761,86,[[],"ModuleName"]],[]]]]],[1761,88,1761,124,[[1761,88,1761,99,"lookupTable"],[1761,102,1761,123,[1,[1761,102,1761,123,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1761,129,1761,187,[6,[1761,129,1761,155,[3,[[1761,131,1761,147,[1,[1761,131,1761,147,[[],"RecordDefinition"]],[]]],[1761,149,1761,153,[1,[1761,149,1761,153,[[],"Bool"]],[]]]]]],[1761,159,1761,187,[1,[1761,159,1761,163,[[],"List"]],[[1761,164,1761,187,[3,[[1761,166,1761,172,[1,[1761,166,1761,172,[[],"String"]],[]]],[1761,174,1761,185,[1,[1761,174,1761,185,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[1762,1,1794,13,[[1762,1,1762,25,"knownRecordFromTypeAnnot"],[[1762,26,1762,44,[11,"subrecordTreatment"]],[1762,45,1762,52,[11,"context"]],[1762,53,1762,74,[7,[[1762,55,1762,61,[11,"fields"]],[1762,63,1762,72,[11,"isGeneric"]]]]]],[1763,5,1794,13,[1,"|>",0,[1763,5,1785,85,[1,"|>",0,[1763,5,1784,15,[0,[[1763,5,1763,23,[2,["ListX"],"indexedFoldl"]],[1764,9,1782,10,[7,[1764,10,1781,18,[18,[[[1764,11,1764,12,[11,"i"]],[1764,13,1764,18,[11,"field"]]],[1765,13,1781,18,[16,[[[1766,17,1767,37,[1,[1766,17,1766,25,[7,[[1766,19,1766,20,[11,"f"]],[1766,22,1766,23,[11,"t"]]]]],[1767,21,1767,37,[0,[[1767,21,1767,31,[2,["Node"],"value"]],[1767,32,1767,37,[2,[],"field"]]]]]]]],[1769,13,1781,18,[0,[[1769,13,1769,24,[2,["Dict"],"insert"]],[1770,17,1770,31,[7,[1770,18,1770,30,[0,[[1770,18,1770,28,[2,["Node"],"value"]],[1770,29,1770,30,[2,[],"f"]]]]]]],[1771,17,1781,18,[6,[[1771,19,1771,20,[2,[],"i"]],[1772,19,1780,22,[0,[[1772,19,1772,34,[2,[],"typeAnnotToType"]],[1772,35,1772,42,[2,[],"context"]],[1774,21,1779,22,[8,[[1774,23,1774,62,[[1774,23,1774,54,"constrainedTypeVarsAreRespected"],[1774,57,1774,62,[2,[],"False"]]]],[1777,23,1779,21,[[1777,23,1777,47,"subrecordIsAlsoCanonical"],[1778,25,1778,71,[0,[[1778,25,1778,52,[2,[],"subrecordCanonicityForField"]],[1778,53,1778,71,[2,[],"subrecordTreatment"]]]]]]]]]],[1780,21,1780,22,[2,[],"t"]]]]]]]]]]]]]]]]]]],[1783,9,1783,19,[2,["Dict"],"empty"]],[1784,9,1784,15,[2,[],"fields"]]]]],[1785,12,1785,85,[7,[1785,13,1785,84,[18,[[[1785,14,1785,19,[11,"order"]]],[1785,23,1785,84,[8,[[1785,25,1785,38,[[1785,25,1785,30,"order"],[1785,33,1785,38,[2,[],"order"]]]],[1785,40,1785,61,[[1785,40,1785,49,"isGeneric"],[1785,52,1785,61,[2,[],"isGeneric"]]]],[1785,63,1785,83,[[1785,63,1785,74,"isSubrecord"],[1785,77,1785,82,[2,[],"False"]]]]]]]]]]]]]],[1786,12,1794,13,[7,[1786,13,1793,34,[18,[[[1786,14,1786,15,[11,"k"]]],[1787,17,1793,34,[11,[1787,20,1787,57,[1,"==",2,[1787,20,1787,38,[2,[],"subrecordTreatment"]],[1787,42,1787,57,[2,[],"AlwaysCanonical"]]]],[1788,21,1789,127,[1,"::",1,[1788,21,1788,30,[6,[[1788,23,1788,25,[5,""]],[1788,27,1788,28,[2,[],"k"]]]]],[1789,28,1789,127,[0,[[1789,28,1789,42,[2,["List"],"concatMap"]],[1789,43,1789,105,[7,[1789,44,1789,104,[18,[[[1789,45,1789,60,[7,[[1789,47,1789,48,[11,"f"]],[1789,50,1789,58,[7,[[1789,52,1789,53,[0]],[1789,55,1789,56,[11,"t"]]]]]]]]],[1789,64,1789,104,[0,[[1789,64,1789,86,[2,[],"makeSubrecordsFromType"]],[1789,87,1789,91,[2,[],"True"]],[1789,92,1789,102,[7,[1789,93,1789,101,[1,"++",1,[1789,93,1789,96,[5,"."]],[1789,100,1789,101,[2,[],"f"]]]]]],[1789,103,1789,104,[2,[],"t"]]]]]]]]]],[1789,106,1789,127,[7,[1789,107,1789,126,[0,[[1789,107,1789,118,[2,["Dict"],"toList"]],[1789,119,1789,126,[19,[1789,119,1789,120,[2,[],"k"]],[1789,121,1789,126,"order"]]]]]]]]]]]]],[1793,21,1793,34,[9,[[1793,23,1793,32,[6,[[1793,25,1793,27,[5,""]],[1793,29,1793,30,[2,[],"k"]]]]]]]]]]]]]]]]]]]]]],[1797,1,1804,10,[0,[[1,[1797,1,1798,3,"{-| Wrapper for `typeAnnotToType` when not dealing with aliases.\n-}"]],[1,[1799,1,1799,136,[[1799,1,1799,28,"typeAnnotToNoncanonicalType"],[1799,31,1799,136,[6,[1799,31,1799,105,[5,[1799,33,1799,40,"context"],[1799,42,1799,104,[[1799,43,1799,66,[[1799,43,1799,53,"moduleName"],[1799,56,1799,66,[1,[1799,56,1799,66,[[],"ModuleName"]],[]]]]],[1799,68,1799,104,[[1799,68,1799,79,"lookupTable"],[1799,82,1799,103,[1,[1799,82,1799,103,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1799,109,1799,136,[6,[1799,109,1799,128,[1,[1799,109,1799,113,[[],"Node"]],[[1799,114,1799,128,[1,[1799,114,1799,128,[[],"TypeAnnotation"]],[]]]]]],[1799,132,1799,136,[1,[1799,132,1799,136,[[],"Type"]],[]]]]]]]]]],[1800,1,1804,10,[[1800,1,1800,28,"typeAnnotToNoncanonicalType"],[[1800,29,1800,36,[11,"context"]]],[1801,5,1804,10,[0,[[1801,5,1801,20,[2,[],"typeAnnotToType"]],[1801,21,1801,28,[2,[],"context"]],[1802,9,1804,10,[8,[[1802,11,1802,49,[[1802,11,1802,42,"constrainedTypeVarsAreRespected"],[1802,45,1802,49,[2,[],"True"]]]],[1803,11,1804,9,[[1803,11,1803,35,"subrecordIsAlsoCanonical"],[1803,38,1803,45,[2,[],"Nothing"]]]]]]]]]]]]]]],[1807,1,1876,58,[0,[[1,[1807,1,1810,3,"{-| Given context and whether or not a top-level record type (if `Just`) and\nsubrecords (if `Just True`) found are in canonical order, convert a\n`TypeAnnotation` into a `Type`.\n-}"]],[1,[1811,1,1811,209,[[1811,1,1811,16,"typeAnnotToType"],[1811,19,1811,209,[6,[1811,19,1811,93,[5,[1811,21,1811,28,"context"],[1811,30,1811,92,[[1811,31,1811,54,[[1811,31,1811,41,"moduleName"],[1811,44,1811,54,[1,[1811,44,1811,54,[[],"ModuleName"]],[]]]]],[1811,56,1811,92,[[1811,56,1811,67,"lookupTable"],[1811,70,1811,91,[1,[1811,70,1811,91,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[1811,97,1811,209,[6,[1811,97,1811,178,[4,[[1811,99,1811,137,[[1811,99,1811,130,"constrainedTypeVarsAreRespected"],[1811,133,1811,137,[1,[1811,133,1811,137,[[],"Bool"]],[]]]]],[1811,139,1811,177,[[1811,139,1811,163,"subrecordIsAlsoCanonical"],[1811,166,1811,176,[1,[1811,166,1811,171,[[],"Maybe"]],[[1811,172,1811,176,[1,[1811,172,1811,176,[[],"Bool"]],[]]]]]]]]]]],[1811,182,1811,209,[6,[1811,182,1811,201,[1,[1811,182,1811,186,[[],"Node"]],[[1811,187,1811,201,[1,[1811,187,1811,201,[[],"TypeAnnotation"]],[]]]]]],[1811,205,1811,209,[1,[1811,205,1811,209,[[],"Type"]],[]]]]]]]]]]]],[1812,1,1876,58,[[1812,1,1812,16,"typeAnnotToType"],[[1812,17,1812,24,[11,"context"]],[1812,25,1812,100,[14,[1812,26,1812,99,[13,[1812,26,1812,87,[8,[[1812,28,1812,59,"constrainedTypeVarsAreRespected"],[1812,61,1812,85,"subrecordIsAlsoCanonical"]]]],[1812,91,1812,99,"settings"]]]]],[1812,101,1812,106,[11,"annot"]]],[1813,5,1876,58,[16,[[[1814,9,1819,21,[0,[[0],[1,[1814,9,1814,41,[[1814,9,1814,11,"go"],[1814,14,1814,41,[6,[1814,14,1814,33,[1,[1814,14,1814,18,[[],"Node"]],[[1814,19,1814,33,[1,[1814,19,1814,33,[[],"TypeAnnotation"]],[]]]]]],[1814,37,1814,41,[1,[1814,37,1814,41,[[],"Type"]],[]]]]]]]],[1815,9,1819,21,[[1815,9,1815,11,"go"],[],[1816,13,1819,21,[1,"|>",0,[1816,13,1816,60,[0,[[1816,13,1816,26,[2,["MaybeX"],"filter"]],[1816,27,1816,35,[2,[],"identity"]],[1816,36,1816,60,[2,[],"subrecordIsAlsoCanonical"]]]]],[1817,20,1819,21,[7,[1817,21,1818,110,[18,[[[1817,22,1817,41,[11,"subrecordStillCanon"]]],[1818,25,1818,110,[0,[[1818,25,1818,40,[2,[],"typeAnnotToType"]],[1818,41,1818,48,[2,[],"context"]],[1818,49,1818,110,[21,[1818,51,1818,59,"settings"],[[1818,62,1818,109,[[1818,62,1818,86,"subrecordIsAlsoCanonical"],[1818,89,1818,108,[2,[],"subrecordStillCanon"]]]]]]]]]]]]]]]]]]]]]],[1821,9,1828,28,[0,[[0],[1,[1821,9,1821,84,[[1821,9,1821,17,"makeList"],[1821,20,1821,84,[6,[1821,20,1821,30,[1,[1821,20,1821,30,[[],"ModuleName"]],[]]],[1821,34,1821,84,[6,[1821,34,1821,40,[1,[1821,34,1821,40,[[],"String"]],[]]],[1821,44,1821,84,[6,[1821,44,1821,70,[1,[1821,44,1821,48,[[],"List"]],[[1821,49,1821,70,[1,[1821,50,1821,54,[[],"Node"]],[[1821,55,1821,69,[1,[1821,55,1821,69,[[],"TypeAnnotation"]],[]]]]]]]]],[1821,74,1821,84,[1,[1821,74,1821,79,[[],"Maybe"]],[[1821,80,1821,84,[1,[1821,80,1821,84,[[],"Type"]],[]]]]]]]]]]]]]]],[1822,9,1828,28,[[1822,9,1822,17,"makeList"],[[1822,18,1822,28,[11,"moduleName"]],[1822,29,1822,33,[11,"name"]],[1822,34,1822,38,[11,"args"]]],[1823,13,1828,28,[17,[[1823,18,1823,44,[6,[[1823,20,1823,30,[2,[],"moduleName"]],[1823,32,1823,36,[2,[],"name"]],[1823,38,1823,42,[2,[],"args"]]]]],[[[1824,17,1824,53,[7,[[1824,19,1824,29,[10,[[1824,21,1824,27,[3,"List"]]]]],[1824,31,1824,37,[3,"List"]],[1824,39,1824,51,[10,[[1824,41,1824,49,[11,"listType"]]]]]]]],[1825,21,1825,52,[1,"<|",1,[1825,21,1825,25,[2,[],"Just"]],[1825,29,1825,52,[1,"<|",1,[1825,29,1825,37,[2,[],"ListType"]],[1825,41,1825,52,[0,[[1825,41,1825,43,[2,[],"go"]],[1825,44,1825,52,[2,[],"listType"]]]]]]]]]],[[1827,17,1827,18,[0]],[1828,21,1828,28,[2,[],"Nothing"]]]]]]]]]]]]],[1830,5,1876,58,[17,[[1830,10,1830,26,[0,[[1830,10,1830,20,[2,["Node"],"value"]],[1830,21,1830,26,[2,[],"annot"]]]]],[[[1831,9,1831,24,[12,[[],"Typed"],[[1831,15,1831,19,[11,"name"]],[1831,20,1831,24,[11,"args"]]]]],[1832,13,1846,21,[1,"|>",0,[1832,13,1842,64,[1,"|>",0,[1832,13,1841,21,[1,"|>",0,[1832,13,1833,70,[1,"|>",0,[1832,13,1832,51,[0,[[1832,13,1832,26,[2,[],"moduleNameFor"]],[1832,27,1832,46,[19,[1832,27,1832,34,[2,[],"context"]],[1832,35,1832,46,"lookupTable"]]],[1832,47,1832,51,[2,[],"name"]]]]],[1833,20,1833,70,[0,[[1833,20,1833,37,[2,["Maybe"],"withDefault"]],[1833,38,1833,70,[7,[1833,39,1833,69,[1,"<|",1,[1833,39,1833,50,[2,["Tuple"],"first"]],[1833,54,1833,69,[0,[[1833,54,1833,64,[2,["Node"],"value"]],[1833,65,1833,69,[2,[],"name"]]]]]]]]]]]]]],[1834,20,1841,21,[7,[1834,21,1840,39,[18,[[[1834,22,1834,32,[11,"moduleName"]]],[1835,25,1840,39,[11,[1835,28,1835,44,[1,"==",2,[1835,28,1835,38,[2,[],"moduleName"]],[1835,42,1835,44,[9,[]]]]],[1837,29,1837,47,[19,[1837,29,1837,36,[2,[],"context"]],[1837,37,1837,47,"moduleName"]]],[1840,29,1840,39,[2,[],"moduleName"]]]]]]]]]]],[1842,20,1842,64,[0,[[1842,20,1842,30,[2,["Tuple"],"pair"]],[1842,31,1842,64,[7,[1842,32,1842,63,[1,"<|",1,[1842,32,1842,44,[2,["Tuple"],"second"]],[1842,48,1842,63,[0,[[1842,48,1842,58,[2,["Node"],"value"]],[1842,59,1842,63,[2,[],"name"]]]]]]]]]]]]]],[1843,20,1846,21,[7,[1843,21,1845,111,[18,[[[1843,22,1843,39,[7,[[1843,24,1843,25,[11,"n"]],[1843,27,1843,37,[11,"moduleName"]]]]]],[1844,25,1845,111,[1,"|>",0,[1844,25,1844,51,[0,[[1844,25,1844,33,[2,[],"makeList"]],[1844,34,1844,44,[2,[],"moduleName"]],[1844,45,1844,46,[2,[],"n"]],[1844,47,1844,51,[2,[],"args"]]]]],[1845,32,1845,111,[0,[[1845,32,1845,54,[2,["MaybeX"],"withDefaultLazy"]],[1845,55,1845,111,[7,[1845,56,1845,110,[18,[[[1845,57,1845,59,[1]]],[1845,63,1845,110,[1,"<|",1,[1845,63,1845,90,[0,[[1845,63,1845,72,[2,[],"NamedType"]],[1845,73,1845,90,[6,[[1845,75,1845,85,[2,[],"moduleName"]],[1845,87,1845,88,[2,[],"n"]]]]]]]],[1845,94,1845,110,[0,[[1845,94,1845,102,[2,["List"],"map"]],[1845,103,1845,105,[2,[],"go"]],[1845,106,1845,110,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]],[[1848,9,1848,13,[12,[[],"Unit"],[]]],[1849,13,1849,21,[2,[],"UnitType"]]],[[1851,9,1851,18,[12,[[],"Tupled"],[[1851,16,1851,18,[11,"ts"]]]]],[1852,13,1852,40,[1,"<|",1,[1852,13,1852,22,[2,[],"TupleType"]],[1852,26,1852,40,[0,[[1852,26,1852,34,[2,["List"],"map"]],[1852,35,1852,37,[2,[],"go"]],[1852,38,1852,40,[2,[],"ts"]]]]]]]],[[1854,9,1854,18,[12,[[],"Record"],[[1854,16,1854,18,[11,"fs"]]]]],[1855,13,1859,18,[0,[[1855,13,1855,23,[2,[],"RecordType"]],[1856,17,1859,18,[8,[[1856,19,1856,36,[[1856,19,1856,26,"generic"],[1856,29,1856,36,[2,[],"Nothing"]]]],[1857,19,1858,17,[[1857,19,1857,28,"canonical"],[1857,31,1857,66,[1,"/=",2,[1857,31,1857,55,[2,[],"subrecordIsAlsoCanonical"]],[1857,59,1857,66,[2,[],"Nothing"]]]]]],[1858,19,1859,17,[[1858,19,1858,25,"fields"],[1858,28,1858,83,[0,[[1858,28,1858,36,[2,["List"],"map"]],[1858,37,1858,80,[7,[1858,38,1858,79,[1,"<<",0,[1858,38,1858,65,[0,[[1858,38,1858,51,[2,["Tuple"],"mapBoth"]],[1858,52,1858,62,[2,["Node"],"value"]],[1858,63,1858,65,[2,[],"go"]]]]],[1858,69,1858,79,[2,["Node"],"value"]]]]]],[1858,81,1858,83,[2,[],"fs"]]]]]]]]]]]]]],[[1861,9,1861,33,[12,[[],"GenericRecord"],[[1861,23,1861,30,[11,"generic"]],[1861,31,1861,33,[11,"fs"]]]]],[1862,13,1870,18,[0,[[1862,13,1862,23,[2,[],"RecordType"]],[1863,17,1870,18,[8,[[1863,19,1867,66,[[1863,19,1863,26,"generic"],[1867,21,1867,66,[1,"<|",1,[1867,21,1867,25,[2,[],"Just"]],[1867,29,1867,66,[1,"<|",1,[1867,29,1867,44,[0,[[1867,29,1867,36,[2,[],"TypeVar"]],[1867,37,1867,44,[2,[],"Nothing"]]]]],[1867,48,1867,66,[0,[[1867,48,1867,58,[2,["Node"],"value"]],[1867,59,1867,66,[2,[],"generic"]]]]]]]]]]],[1868,19,1869,17,[[1868,19,1868,28,"canonical"],[1868,31,1868,66,[1,"/=",2,[1868,31,1868,55,[2,[],"subrecordIsAlsoCanonical"]],[1868,59,1868,66,[2,[],"Nothing"]]]]]],[1869,19,1870,17,[[1869,19,1869,25,"fields"],[1869,28,1869,97,[1,"<|",1,[1869,28,1869,80,[0,[[1869,28,1869,36,[2,["List"],"map"]],[1869,37,1869,80,[7,[1869,38,1869,79,[1,"<<",0,[1869,38,1869,65,[0,[[1869,38,1869,51,[2,["Tuple"],"mapBoth"]],[1869,52,1869,62,[2,["Node"],"value"]],[1869,63,1869,65,[2,[],"go"]]]]],[1869,69,1869,79,[2,["Node"],"value"]]]]]]]]],[1869,84,1869,97,[0,[[1869,84,1869,94,[2,["Node"],"value"]],[1869,95,1869,97,[2,[],"fs"]]]]]]]]]]]]]]]],[[1872,9,1872,39,[12,[[],"FunctionTypeAnnotation"],[[1872,32,1872,36,[11,"from"]],[1872,37,1872,39,[11,"to"]]]]],[1873,13,1873,56,[0,[[1873,13,1873,25,[2,[],"FunctionType"]],[1873,26,1873,56,[8,[[1873,28,1873,42,[[1873,28,1873,32,"from"],[1873,35,1873,42,[0,[[1873,35,1873,37,[2,[],"go"]],[1873,38,1873,42,[2,[],"from"]]]]]]],[1873,44,1873,55,[[1873,44,1873,46,"to"],[1873,49,1873,54,[0,[[1873,49,1873,51,[2,[],"go"]],[1873,52,1873,54,[2,[],"to"]]]]]]]]]]]]]],[[1875,9,1875,22,[12,[[],"GenericType"],[[1875,21,1875,22,[11,"s"]]]]],[1876,13,1876,58,[0,[[1876,13,1876,24,[2,[],"makeTypeVar"]],[1876,25,1876,56,[2,[],"constrainedTypeVarsAreRespected"]],[1876,57,1876,58,[2,[],"s"]]]]]]]]]]]]]]]]]],[1879,1,1942,33,[0,[[1,[1879,1,1880,3,"{-| Canonicalize a type, dereferencing all aliases.\n-}"]],[1,[1881,1,1881,60,[[1881,1,1881,16,"dereferenceType"],[1881,19,1881,60,[6,[1881,19,1881,32,[1,[1881,19,1881,32,[[],"ModuleContext"]],[]]],[1881,36,1881,60,[6,[1881,36,1881,40,[1,[1881,36,1881,40,[[],"Type"]],[]]],[1881,44,1881,60,[1,[1881,44,1881,60,[[],"DereferencedType"]],[]]]]]]]]]],[1882,1,1942,33,[[1882,1,1882,16,"dereferenceType"],[[1882,17,1882,24,[11,"context"]],[1882,25,1882,30,[11,"type_"]]],[1883,5,1942,33,[16,[[[1884,9,1895,31,[0,[[0],[1,[1884,9,1884,48,[[1884,9,1884,19,"dropFields"],[1884,22,1884,48,[6,[1884,22,1884,32,[1,[1884,22,1884,25,[[],"Set"]],[[1884,26,1884,32,[1,[1884,26,1884,32,[[],"String"]],[]]]]]],[1884,36,1884,48,[6,[1884,36,1884,40,[1,[1884,36,1884,40,[[],"Type"]],[]]],[1884,44,1884,48,[1,[1884,44,1884,48,[[],"Type"]],[]]]]]]]]]],[1885,9,1895,31,[[1885,9,1885,19,"dropFields"],[[1885,20,1885,26,[11,"toDrop"]],[1885,27,1885,28,[11,"t"]]],[1886,13,1895,31,[17,[[1886,18,1886,19,[2,[],"t"]],[[[1887,17,1887,29,[12,[[],"RecordType"],[[1887,28,1887,29,[11,"r"]]]]],[1888,21,1892,26,[0,[[1888,21,1888,31,[2,[],"RecordType"]],[1889,25,1892,26,[21,[1889,27,1889,28,"r"],[[1890,31,1891,29,[[1890,31,1890,38,"generic"],[1890,41,1890,80,[0,[[1890,41,1890,50,[2,["Maybe"],"map"]],[1890,51,1890,70,[7,[1890,52,1890,69,[0,[[1890,52,1890,62,[2,[],"dropFields"]],[1890,63,1890,69,[2,[],"toDrop"]]]]]]],[1890,71,1890,80,[19,[1890,71,1890,72,[2,[],"r"]],[1890,73,1890,80,"generic"]]]]]]]],[1891,31,1892,25,[[1891,31,1891,37,"fields"],[1891,40,1891,102,[0,[[1891,40,1891,51,[2,["List"],"filter"]],[1891,52,1891,93,[7,[1891,53,1891,92,[18,[[[1891,54,1891,62,[7,[[1891,56,1891,57,[11,"f"]],[1891,59,1891,60,[0]]]]]],[1891,66,1891,92,[1,"<|",1,[1891,66,1891,69,[2,[],"not"]],[1891,73,1891,92,[0,[[1891,73,1891,83,[2,["Set"],"member"]],[1891,84,1891,85,[2,[],"f"]],[1891,86,1891,92,[2,[],"toDrop"]]]]]]]]]]]],[1891,94,1891,102,[19,[1891,94,1891,95,[2,[],"r"]],[1891,96,1891,102,"fields"]]]]]]]]]]]]]]],[[1894,17,1894,27,[11,"notARecord"]],[1895,21,1895,31,[2,[],"notARecord"]]]]]]]]]]]],[1897,9,1940,22,[0,[[0],[1,[1897,9,1897,26,[[1897,9,1897,11,"go"],[1897,14,1897,26,[6,[1897,14,1897,18,[1,[1897,14,1897,18,[[],"Type"]],[]]],[1897,22,1897,26,[1,[1897,22,1897,26,[[],"Type"]],[]]]]]]]],[1898,9,1940,22,[[1898,9,1898,11,"go"],[[1898,12,1898,13,[11,"t"]]],[1899,13,1940,22,[17,[[1899,18,1899,19,[2,[],"t"]],[[[1900,17,1900,42,[12,[[],"FunctionType"],[[1900,30,1900,42,[8,[[1900,32,1900,36,"from"],[1900,38,1900,40,"to"]]]]]]],[1901,21,1901,64,[0,[[1901,21,1901,33,[2,[],"FunctionType"]],[1901,34,1901,64,[8,[[1901,36,1901,50,[[1901,36,1901,40,"from"],[1901,43,1901,50,[0,[[1901,43,1901,45,[2,[],"go"]],[1901,46,1901,50,[2,[],"from"]]]]]]],[1901,52,1901,63,[[1901,52,1901,54,"to"],[1901,57,1901,62,[0,[[1901,57,1901,59,[2,[],"go"]],[1901,60,1901,62,[2,[],"to"]]]]]]]]]]]]]],[[1903,17,1903,29,[12,[[],"TupleType"],[[1903,27,1903,29,[11,"ts"]]]]],[1904,21,1904,48,[1,"<|",1,[1904,21,1904,30,[2,[],"TupleType"]],[1904,34,1904,48,[0,[[1904,34,1904,42,[2,["List"],"map"]],[1904,43,1904,45,[2,[],"go"]],[1904,46,1904,48,[2,[],"ts"]]]]]]]],[[1906,17,1906,28,[12,[[],"ListType"],[[1906,26,1906,28,[11,"t_"]]]]],[1907,21,1907,38,[1,"<|",1,[1907,21,1907,29,[2,[],"ListType"]],[1907,33,1907,38,[0,[[1907,33,1907,35,[2,[],"go"]],[1907,36,1907,38,[2,[],"t_"]]]]]]]],[[1909,17,1909,50,[12,[[],"NamedType"],[[1909,27,1909,47,[7,[[1909,29,1909,39,[11,"moduleName"]],[1909,41,1909,45,[11,"name"]]]]],[1909,48,1909,50,[11,"ts"]]]]],[1910,21,1920,82,[16,[[[1911,25,1913,43,[0,[[0],[1,[1911,25,1911,40,[[1911,25,1911,28,"ts_"],[1911,31,1911,40,[1,[1911,31,1911,35,[[],"List"]],[[1911,36,1911,40,[1,[1911,36,1911,40,[[],"Type"]],[]]]]]]]]],[1912,25,1913,43,[[1912,25,1912,28,"ts_"],[],[1913,29,1913,43,[0,[[1913,29,1913,37,[2,["List"],"map"]],[1913,38,1913,40,[2,[],"go"]],[1913,41,1913,43,[2,[],"ts"]]]]]]]]]]],[1915,21,1920,82,[1,"|>",0,[1915,21,1918,74,[1,"|>",0,[1915,21,1916,57,[1,"|>",0,[1915,21,1915,56,[0,[[1915,21,1915,29,[2,["Dict"],"get"]],[1915,30,1915,40,[2,[],"moduleName"]],[1915,41,1915,56,[19,[1915,41,1915,48,[2,[],"context"]],[1915,49,1915,56,"aliases"]]]]]],[1916,28,1916,57,[0,[[1916,28,1916,41,[2,["Maybe"],"andThen"]],[1916,42,1916,57,[7,[1916,43,1916,56,[0,[[1916,43,1916,51,[2,["Dict"],"get"]],[1916,52,1916,56,[2,[],"name"]]]]]]]]]]]],[1918,28,1918,74,[0,[[1918,28,1918,37,[2,["Maybe"],"map"]],[1918,38,1918,74,[7,[1918,39,1918,73,[1,"<<",0,[1918,39,1918,41,[2,[],"go"]],[1918,45,1918,73,[0,[[1918,45,1918,69,[2,[],"assignPositionalTypeVars"]],[1918,70,1918,73,[2,[],"ts_"]]]]]]]]]]]]]],[1920,28,1920,82,[0,[[1920,28,1920,45,[2,["Maybe"],"withDefault"]],[1920,46,1920,82,[7,[1920,47,1920,81,[0,[[1920,47,1920,56,[2,[],"NamedType"]],[1920,57,1920,77,[6,[[1920,59,1920,69,[2,[],"moduleName"]],[1920,71,1920,75,[2,[],"name"]]]]],[1920,78,1920,81,[2,[],"ts_"]]]]]]]]]]]]]]]],[[1922,17,1922,29,[12,[[],"RecordType"],[[1922,28,1922,29,[11,"r"]]]]],[1923,21,1935,26,[16,[[[1924,25,1926,67,[0,[[0],[1,[1924,25,1924,55,[[1924,25,1924,31,"fields"],[1924,34,1924,55,[1,[1924,34,1924,38,[[],"List"]],[[1924,39,1924,55,[3,[[1924,41,1924,47,[1,[1924,41,1924,47,[[],"String"]],[]]],[1924,49,1924,53,[1,[1924,49,1924,53,[[],"Type"]],[]]]]]]]]]]]],[1925,25,1926,67,[[1925,25,1925,31,"fields"],[],[1926,29,1926,67,[0,[[1926,29,1926,37,[2,["List"],"map"]],[1926,38,1926,58,[7,[1926,39,1926,57,[0,[[1926,39,1926,54,[2,["Tuple"],"mapSecond"]],[1926,55,1926,57,[2,[],"go"]]]]]]],[1926,59,1926,67,[19,[1926,59,1926,60,[2,[],"r"]],[1926,61,1926,67,"fields"]]]]]]]]]]]],[1928,21,1935,26,[0,[[1928,21,1928,31,[2,[],"RecordType"]],[1929,25,1935,26,[21,[1929,27,1929,28,"r"],[[1930,31,1934,29,[[1930,31,1930,38,"generic"],[1931,33,1933,108,[1,"|>",0,[1931,33,1931,55,[0,[[1931,33,1931,42,[2,["Maybe"],"map"]],[1931,43,1931,45,[2,[],"go"]],[1931,46,1931,55,[19,[1931,46,1931,47,[2,[],"r"]],[1931,48,1931,55,"generic"]]]]]],[1933,40,1933,108,[0,[[1933,40,1933,49,[2,["Maybe"],"map"]],[1933,50,1933,108,[7,[1933,51,1933,107,[0,[[1933,51,1933,61,[2,[],"dropFields"]],[1933,62,1933,107,[7,[1933,63,1933,106,[1,"<|",1,[1933,63,1933,75,[2,["Set"],"fromList"]],[1933,79,1933,106,[0,[[1933,79,1933,87,[2,["List"],"map"]],[1933,88,1933,99,[2,["Tuple"],"first"]],[1933,100,1933,106,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]],[1934,31,1935,25,[[1934,31,1934,37,"fields"],[1934,40,1934,46,[2,[],"fields"]]]]]]]]]]]]]],[[1937,17,1937,18,[0]],[1940,21,1940,22,[2,[],"t"]]]]]]]]]]]]],[1942,5,1942,33,[1,"<|",1,[1942,5,1942,21,[2,[],"DereferencedType"]],[1942,25,1942,33,[0,[[1942,25,1942,27,[2,[],"go"]],[1942,28,1942,33,[2,[],"type_"]]]]]]]]]]]]]]],[1945,1,1952,19,[0,[[1,[1945,1,1946,3,"{-| Assign a list of positional type vars.\n-}"]],[1,[1947,1,1947,71,[[1947,1,1947,25,"assignPositionalTypeVars"],[1947,28,1947,71,[6,[1947,28,1947,37,[1,[1947,28,1947,32,[[],"List"]],[[1947,33,1947,37,[1,[1947,33,1947,37,[[],"Type"]],[]]]]]],[1947,41,1947,71,[6,[1947,41,1947,63,[1,[1947,41,1947,63,[[],"TypeWithPositionalVars"]],[]]],[1947,67,1947,71,[1,[1947,67,1947,71,[[],"Type"]],[]]]]]]]]]],[1948,1,1952,19,[[1948,1,1948,25,"assignPositionalTypeVars"],[[1948,26,1948,28,[11,"ts"]],[1948,29,1948,30,[11,"t"]]],[1949,5,1952,19,[1,"|>",0,[1949,5,1951,92,[1,"|>",0,[1949,5,1950,25,[1,"|>",0,[1949,5,1949,82,[0,[[1949,5,1949,20,[2,["List"],"indexedMap"]],[1949,21,1949,79,[7,[1949,22,1949,78,[18,[[[1949,23,1949,24,[11,"i"]]],[1949,28,1949,78,[0,[[1949,28,1949,38,[2,["Tuple"],"pair"]],[1949,39,1949,78,[7,[1949,40,1949,77,[1,"++",1,[1949,40,1949,57,[5,"positional arg "]],[1949,61,1949,77,[0,[[1949,61,1949,75,[2,["String"],"fromInt"]],[1949,76,1949,77,[2,[],"i"]]]]]]]]]]]]]]]]],[1949,80,1949,82,[2,[],"ts"]]]]],[1950,12,1950,25,[2,["Dict"],"fromList"]]]],[1951,12,1951,92,[7,[1951,13,1951,91,[18,[[[1951,14,1951,18,[11,"vars"]]],[1951,22,1951,91,[0,[[1951,22,1951,36,[2,[],"assignTypeVars"]],[1951,37,1951,41,[2,[],"vars"]],[1951,42,1951,91,[7,[1951,43,1951,90,[1,"<|",1,[1951,43,1951,59,[2,[],"DereferencedType"]],[1951,63,1951,90,[0,[[1951,63,1951,88,[2,[],"getTypeWithPositionalVars"]],[1951,89,1951,90,[2,[],"t"]]]]]]]]]]]]]]]]]]],[1952,12,1952,19,[2,[],"getType"]]]]]]]]],[1955,1,1961,25,[0,[[1,[1955,1,1957,3,"{-| Given a list of type vars (as string), create positional type vars from\nthem.\n-}"]],[1,[1958,1,1958,60,[[1958,1,1958,26,"makePositionalArgTypeVars"],[1958,29,1958,60,[6,[1958,29,1958,40,[1,[1958,29,1958,33,[[],"List"]],[[1958,34,1958,40,[1,[1958,34,1958,40,[[],"String"]],[]]]]]],[1958,44,1958,60,[1,[1958,44,1958,48,[[],"Dict"]],[[1958,49,1958,55,[1,[1958,49,1958,55,[[],"String"]],[]]],[1958,56,1958,60,[1,[1958,56,1958,60,[[],"Type"]],[]]]]]]]]]]],[1959,1,1961,25,[[1959,1,1959,26,"makePositionalArgTypeVars"],[],[1960,5,1961,25,[1,">>",1,[1960,5,1960,94,[0,[[1960,5,1960,20,[2,["List"],"indexedMap"]],[1960,21,1960,94,[7,[1960,22,1960,93,[18,[[[1960,23,1960,24,[11,"i"]],[1960,25,1960,26,[11,"s"]]],[1960,30,1960,93,[6,[[1960,32,1960,33,[2,[],"s"]],[1960,35,1960,91,[1,"<|",1,[1960,35,1960,50,[0,[[1960,35,1960,42,[2,[],"TypeVar"]],[1960,43,1960,50,[2,[],"Nothing"]]]]],[1960,54,1960,91,[1,"++",1,[1960,54,1960,71,[5,"positional arg "]],[1960,75,1960,91,[0,[[1960,75,1960,89,[2,["String"],"fromInt"]],[1960,90,1960,91,[2,[],"i"]]]]]]]]]]]]]]]]]]]],[1961,12,1961,25,[2,["Dict"],"fromList"]]]]]]]]],[1964,1,1999,44,[0,[[1,[1964,1,1965,3,"{-| Assign type vars to a type.\n-}"]],[1,[1966,1,1966,74,[[1966,1,1966,15,"assignTypeVars"],[1966,18,1966,74,[6,[1966,18,1966,34,[1,[1966,18,1966,22,[[],"Dict"]],[[1966,23,1966,29,[1,[1966,23,1966,29,[[],"String"]],[]]],[1966,30,1966,34,[1,[1966,30,1966,34,[[],"Type"]],[]]]]]],[1966,38,1966,74,[6,[1966,38,1966,54,[1,[1966,38,1966,54,[[],"DereferencedType"]],[]]],[1966,58,1966,74,[1,[1966,58,1966,74,[[],"DereferencedType"]],[]]]]]]]]]],[1967,1,1999,44,[[1967,1,1967,15,"assignTypeVars"],[[1967,16,1967,24,[11,"typeVars"]],[1967,25,1967,30,[11,"type_"]]],[1968,5,1999,44,[16,[[[1969,9,1997,29,[0,[[0],[1,[1969,9,1969,26,[[1969,9,1969,11,"go"],[1969,14,1969,26,[6,[1969,14,1969,18,[1,[1969,14,1969,18,[[],"Type"]],[]]],[1969,22,1969,26,[1,[1969,22,1969,26,[[],"Type"]],[]]]]]]]],[1970,9,1997,29,[[1970,9,1970,11,"go"],[[1970,12,1970,13,[11,"t"]]],[1971,13,1997,29,[17,[[1971,18,1971,19,[2,[],"t"]],[[[1972,17,1972,42,[12,[[],"FunctionType"],[[1972,30,1972,42,[8,[[1972,32,1972,36,"from"],[1972,38,1972,40,"to"]]]]]]],[1973,21,1973,64,[0,[[1973,21,1973,33,[2,[],"FunctionType"]],[1973,34,1973,64,[8,[[1973,36,1973,50,[[1973,36,1973,40,"from"],[1973,43,1973,50,[0,[[1973,43,1973,45,[2,[],"go"]],[1973,46,1973,50,[2,[],"from"]]]]]]],[1973,52,1973,63,[[1973,52,1973,54,"to"],[1973,57,1973,62,[0,[[1973,57,1973,59,[2,[],"go"]],[1973,60,1973,62,[2,[],"to"]]]]]]]]]]]]]],[[1975,17,1975,29,[12,[[],"TupleType"],[[1975,27,1975,29,[11,"ts"]]]]],[1976,21,1976,48,[1,"<|",1,[1976,21,1976,30,[2,[],"TupleType"]],[1976,34,1976,48,[0,[[1976,34,1976,42,[2,["List"],"map"]],[1976,43,1976,45,[2,[],"go"]],[1976,46,1976,48,[2,[],"ts"]]]]]]]],[[1978,17,1978,28,[12,[[],"ListType"],[[1978,26,1978,28,[11,"t_"]]]]],[1979,21,1979,38,[1,"<|",1,[1979,21,1979,29,[2,[],"ListType"]],[1979,33,1979,38,[0,[[1979,33,1979,35,[2,[],"go"]],[1979,36,1979,38,[2,[],"t_"]]]]]]]],[[1981,17,1981,50,[12,[[],"NamedType"],[[1981,27,1981,47,[7,[[1981,29,1981,39,[11,"moduleName"]],[1981,41,1981,45,[11,"name"]]]]],[1981,48,1981,50,[11,"ts"]]]]],[1982,21,1983,58,[1,"|>",0,[1982,21,1982,35,[0,[[1982,21,1982,29,[2,["List"],"map"]],[1982,30,1982,32,[2,[],"go"]],[1982,33,1982,35,[2,[],"ts"]]]]],[1983,28,1983,58,[0,[[1983,28,1983,37,[2,[],"NamedType"]],[1983,38,1983,58,[6,[[1983,40,1983,50,[2,[],"moduleName"]],[1983,52,1983,56,[2,[],"name"]]]]]]]]]]],[[1985,17,1985,29,[12,[[],"RecordType"],[[1985,28,1985,29,[11,"r"]]]]],[1986,21,1990,26,[0,[[1986,21,1986,31,[2,[],"RecordType"]],[1987,25,1990,26,[21,[1987,27,1987,28,"r"],[[1988,31,1989,29,[[1988,31,1988,38,"generic"],[1988,41,1988,63,[0,[[1988,41,1988,50,[2,["Maybe"],"map"]],[1988,51,1988,53,[2,[],"go"]],[1988,54,1988,63,[19,[1988,54,1988,55,[2,[],"r"]],[1988,56,1988,63,"generic"]]]]]]]],[1989,31,1990,25,[[1989,31,1989,37,"fields"],[1989,40,1989,78,[0,[[1989,40,1989,48,[2,["List"],"map"]],[1989,49,1989,69,[7,[1989,50,1989,68,[0,[[1989,50,1989,65,[2,["Tuple"],"mapSecond"]],[1989,66,1989,68,[2,[],"go"]]]]]]],[1989,70,1989,78,[19,[1989,70,1989,71,[2,[],"r"]],[1989,72,1989,78,"fields"]]]]]]]]]]]]]]],[[1992,17,1992,30,[12,[[],"TypeVar"],[[1992,25,1992,26,[0]],[1992,27,1992,30,[11,"var"]]]]],[1993,21,1994,47,[1,"|>",0,[1993,21,1993,42,[0,[[1993,21,1993,29,[2,["Dict"],"get"]],[1993,30,1993,33,[2,[],"var"]],[1993,34,1993,42,[2,[],"typeVars"]]]]],[1994,28,1994,47,[0,[[1994,28,1994,45,[2,["Maybe"],"withDefault"]],[1994,46,1994,47,[2,[],"t"]]]]]]]],[[1996,17,1996,25,[12,[[],"UnitType"],[]]],[1997,21,1997,29,[2,[],"UnitType"]]]]]]]]]]]]],[1999,5,1999,44,[1,"<|",1,[1999,5,1999,21,[2,[],"DereferencedType"]],[1999,25,1999,44,[1,"<|",1,[1999,25,1999,27,[2,[],"go"]],[1999,31,1999,44,[0,[[1999,31,1999,38,[2,[],"getType"]],[1999,39,1999,44,[2,[],"type_"]]]]]]]]]]]]]]]]],[2002,1,2037,44,[0,[[1,[2002,1,2004,3,"{-| Prefix a string before type variables so as to disambiguate them for type\nmatching.\n-}"]],[1,[2005,1,2005,64,[[2005,1,2005,15,"prefixTypeVars"],[2005,18,2005,64,[6,[2005,18,2005,24,[1,[2005,18,2005,24,[[],"String"]],[]]],[2005,28,2005,64,[6,[2005,28,2005,44,[1,[2005,28,2005,44,[[],"DereferencedType"]],[]]],[2005,48,2005,64,[1,[2005,48,2005,64,[[],"DereferencedType"]],[]]]]]]]]]],[2006,1,2037,44,[[2006,1,2006,15,"prefixTypeVars"],[[2006,16,2006,22,[11,"prefix"]],[2006,23,2006,28,[11,"type_"]]],[2007,5,2037,44,[16,[[[2008,9,2035,29,[0,[[0],[1,[2008,9,2008,26,[[2008,9,2008,11,"go"],[2008,14,2008,26,[6,[2008,14,2008,18,[1,[2008,14,2008,18,[[],"Type"]],[]]],[2008,22,2008,26,[1,[2008,22,2008,26,[[],"Type"]],[]]]]]]]],[2009,9,2035,29,[[2009,9,2009,11,"go"],[[2009,12,2009,13,[11,"t"]]],[2010,13,2035,29,[17,[[2010,18,2010,19,[2,[],"t"]],[[[2011,17,2011,42,[12,[[],"FunctionType"],[[2011,30,2011,42,[8,[[2011,32,2011,36,"from"],[2011,38,2011,40,"to"]]]]]]],[2012,21,2012,64,[0,[[2012,21,2012,33,[2,[],"FunctionType"]],[2012,34,2012,64,[8,[[2012,36,2012,50,[[2012,36,2012,40,"from"],[2012,43,2012,50,[0,[[2012,43,2012,45,[2,[],"go"]],[2012,46,2012,50,[2,[],"from"]]]]]]],[2012,52,2012,63,[[2012,52,2012,54,"to"],[2012,57,2012,62,[0,[[2012,57,2012,59,[2,[],"go"]],[2012,60,2012,62,[2,[],"to"]]]]]]]]]]]]]],[[2014,17,2014,29,[12,[[],"TupleType"],[[2014,27,2014,29,[11,"ts"]]]]],[2015,21,2015,48,[1,"<|",1,[2015,21,2015,30,[2,[],"TupleType"]],[2015,34,2015,48,[0,[[2015,34,2015,42,[2,["List"],"map"]],[2015,43,2015,45,[2,[],"go"]],[2015,46,2015,48,[2,[],"ts"]]]]]]]],[[2017,17,2017,28,[12,[[],"ListType"],[[2017,26,2017,28,[11,"t_"]]]]],[2018,21,2018,38,[1,"<|",1,[2018,21,2018,29,[2,[],"ListType"]],[2018,33,2018,38,[0,[[2018,33,2018,35,[2,[],"go"]],[2018,36,2018,38,[2,[],"t_"]]]]]]]],[[2020,17,2020,50,[12,[[],"NamedType"],[[2020,27,2020,47,[7,[[2020,29,2020,39,[11,"moduleName"]],[2020,41,2020,45,[11,"name"]]]]],[2020,48,2020,50,[11,"ts"]]]]],[2021,21,2022,58,[1,"|>",0,[2021,21,2021,35,[0,[[2021,21,2021,29,[2,["List"],"map"]],[2021,30,2021,32,[2,[],"go"]],[2021,33,2021,35,[2,[],"ts"]]]]],[2022,28,2022,58,[0,[[2022,28,2022,37,[2,[],"NamedType"]],[2022,38,2022,58,[6,[[2022,40,2022,50,[2,[],"moduleName"]],[2022,52,2022,56,[2,[],"name"]]]]]]]]]]],[[2024,17,2024,29,[12,[[],"RecordType"],[[2024,28,2024,29,[11,"r"]]]]],[2025,21,2029,26,[0,[[2025,21,2025,31,[2,[],"RecordType"]],[2026,25,2029,26,[21,[2026,27,2026,28,"r"],[[2027,31,2028,29,[[2027,31,2027,38,"generic"],[2027,41,2027,63,[0,[[2027,41,2027,50,[2,["Maybe"],"map"]],[2027,51,2027,53,[2,[],"go"]],[2027,54,2027,63,[19,[2027,54,2027,55,[2,[],"r"]],[2027,56,2027,63,"generic"]]]]]]]],[2028,31,2029,25,[[2028,31,2028,37,"fields"],[2028,40,2028,78,[0,[[2028,40,2028,48,[2,["List"],"map"]],[2028,49,2028,69,[7,[2028,50,2028,68,[0,[[2028,50,2028,65,[2,["Tuple"],"mapSecond"]],[2028,66,2028,68,[2,[],"go"]]]]]]],[2028,70,2028,78,[19,[2028,70,2028,71,[2,[],"r"]],[2028,72,2028,78,"fields"]]]]]]]]]]]]]]],[[2031,17,2031,34,[12,[[],"TypeVar"],[[2031,25,2031,30,[11,"class"]],[2031,31,2031,34,[11,"var"]]]]],[2032,21,2032,50,[0,[[2032,21,2032,28,[2,[],"TypeVar"]],[2032,29,2032,34,[2,[],"class"]],[2032,35,2032,50,[7,[2032,36,2032,49,[1,"++",1,[2032,36,2032,42,[2,[],"prefix"]],[2032,46,2032,49,[2,[],"var"]]]]]]]]]],[[2034,17,2034,25,[12,[[],"UnitType"],[]]],[2035,21,2035,29,[2,[],"UnitType"]]]]]]]]]]]]],[2037,5,2037,44,[1,"<|",1,[2037,5,2037,21,[2,[],"DereferencedType"]],[2037,25,2037,44,[1,"<|",1,[2037,25,2037,27,[2,[],"go"]],[2037,31,2037,44,[0,[[2037,31,2037,38,[2,[],"getType"]],[2037,39,2037,44,[2,[],"type_"]]]]]]]]]]]]]]]]],[2040,1,2044,6,[0,[[1,[2040,1,2041,3,"{-| Unwrap a `DereferencedType`.\n-}"]],[1,[2042,1,2042,35,[[2042,1,2042,8,"getType"],[2042,11,2042,35,[6,[2042,11,2042,27,[1,[2042,11,2042,27,[[],"DereferencedType"]],[]]],[2042,31,2042,35,[1,[2042,31,2042,35,[[],"Type"]],[]]]]]]]],[2043,1,2044,6,[[2043,1,2043,8,"getType"],[[2043,9,2043,29,[14,[2043,10,2043,28,[12,[[],"DereferencedType"],[[2043,27,2043,28,[11,"t"]]]]]]]],[2044,5,2044,6,[2,[],"t"]]]]]]],[2047,1,2051,6,[0,[[1,[2047,1,2048,3,"{-| Unwrap a `TypeWithPositionalVars`.\n-}"]],[1,[2049,1,2049,59,[[2049,1,2049,26,"getTypeWithPositionalVars"],[2049,29,2049,59,[6,[2049,29,2049,51,[1,[2049,29,2049,51,[[],"TypeWithPositionalVars"]],[]]],[2049,55,2049,59,[1,[2049,55,2049,59,[[],"Type"]],[]]]]]]]],[2050,1,2051,6,[[2050,1,2050,26,"getTypeWithPositionalVars"],[[2050,27,2050,53,[14,[2050,28,2050,52,[12,[[],"TypeWithPositionalVars"],[[2050,51,2050,52,[11,"t"]]]]]]]],[2051,5,2051,6,[2,[],"t"]]]]]]],[2054,1,2073,85,[0,[[1,[2054,1,2056,3,"{-| Check the arguments to a function (for unsorted patterns) and its\nexpression, possibly having been given a type annotation.\n-}"]],[1,[2057,1,2057,141,[[2057,1,2057,25,"checkFunctionArgsAndExpr"],[2057,28,2057,141,[6,[2057,28,2057,38,[1,[2057,28,2057,38,[[],"RuleConfig"]],[]]],[2057,42,2057,141,[6,[2057,42,2057,54,[1,[2057,42,2057,54,[[],"LocalContext"]],[]]],[2057,58,2057,141,[6,[2057,58,2057,80,[1,[2057,58,2057,63,[[],"Maybe"]],[[2057,64,2057,80,[1,[2057,64,2057,80,[[],"DereferencedType"]],[]]]]]],[2057,84,2057,141,[6,[2057,84,2057,103,[1,[2057,84,2057,88,[[],"List"]],[[2057,89,2057,103,[1,[2057,90,2057,94,[[],"Node"]],[[2057,95,2057,102,[1,[2057,95,2057,102,[[],"Pattern"]],[]]]]]]]]],[2057,107,2057,141,[6,[2057,107,2057,122,[1,[2057,107,2057,111,[[],"Node"]],[[2057,112,2057,122,[1,[2057,112,2057,122,[[],"Expression"]],[]]]]]],[2057,126,2057,141,[1,[2057,126,2057,130,[[],"List"]],[[2057,131,2057,141,[1,[2057,132,2057,137,[[],"Error"]],[[2057,138,2057,140,[4,[]]]]]]]]]]]]]]]]]]]]]],[2058,1,2073,85,[[2058,1,2058,25,"checkFunctionArgsAndExpr"],[[2058,26,2058,32,[11,"config"]],[2058,33,2058,38,[11,"local"]],[2058,39,2058,46,[11,"hasType"]],[2058,47,2058,51,[11,"args"]],[2058,52,2058,56,[11,"expr"]]],[2059,5,2073,85,[16,[[[2060,9,2064,95,[1,[2060,9,2060,31,[7,[[2060,11,2060,19,[11,"argTypes"]],[2060,21,2060,29,[11,"exprType"]]]]],[2061,13,2064,95,[1,"|>",0,[2061,13,2063,66,[1,"|>",0,[2061,13,2062,67,[1,"|>",0,[2061,13,2061,50,[0,[[2061,13,2061,22,[2,["Maybe"],"map"]],[2061,23,2061,42,[2,[],"flattenFunctionType"]],[2061,43,2061,50,[2,[],"hasType"]]]]],[2062,20,2062,67,[0,[[2062,20,2062,33,[2,["Maybe"],"andThen"]],[2062,34,2062,67,[7,[2062,35,2062,66,[0,[[2062,35,2062,61,[2,[],"partiallyApplyArgsAndTypes"]],[2062,62,2062,66,[2,[],"args"]]]]]]]]]]]],[2063,20,2063,66,[0,[[2063,20,2063,29,[2,["Maybe"],"map"]],[2063,30,2063,66,[7,[2063,31,2063,65,[0,[[2063,31,2063,44,[2,["Tuple"],"mapBoth"]],[2063,45,2063,60,[7,[2063,46,2063,59,[0,[[2063,46,2063,54,[2,["List"],"map"]],[2063,55,2063,59,[2,[],"Just"]]]]]]],[2063,61,2063,65,[2,[],"Just"]]]]]]]]]]]],[2064,20,2064,95,[0,[[2064,20,2064,42,[2,["MaybeX"],"withDefaultLazy"]],[2064,43,2064,95,[7,[2064,44,2064,94,[18,[[[2064,45,2064,47,[1]]],[2064,51,2064,94,[6,[[2064,53,2064,83,[0,[[2064,53,2064,61,[2,["List"],"map"]],[2064,62,2064,78,[7,[2064,63,2064,77,[0,[[2064,63,2064,69,[2,[],"always"]],[2064,70,2064,77,[2,[],"Nothing"]]]]]]],[2064,79,2064,83,[2,[],"args"]]]]],[2064,85,2064,92,[2,[],"Nothing"]]]]]]]]]]]]]]]]],[2066,9,2070,33,[0,[[0],[1,[2066,9,2066,39,[[2066,9,2066,20,"newBindings"],[2066,23,2066,39,[1,[2066,23,2066,27,[[],"Dict"]],[[2066,28,2066,34,[1,[2066,28,2066,34,[[],"String"]],[]]],[2066,35,2066,39,[1,[2066,35,2066,39,[[],"Type"]],[]]]]]]]]],[2067,9,2070,33,[[2067,9,2067,20,"newBindings"],[],[2068,13,2070,33,[1,"|>",0,[2068,13,2069,31,[1,"|>",0,[2068,13,2068,78,[0,[[2068,13,2068,22,[2,["List"],"map2"]],[2068,23,2068,64,[7,[2068,24,2068,63,[0,[[2068,24,2068,49,[2,[],"bindingsInPatternWithType"]],[2068,50,2068,63,[19,[2068,50,2068,55,[2,[],"local"]],[2068,56,2068,63,"context"]]]]]]]],[2068,65,2068,69,[2,[],"args"]],[2068,70,2068,78,[2,[],"argTypes"]]]]],[2069,20,2069,31,[2,["List"],"concat"]]]],[2070,20,2070,33,[2,["Dict"],"fromList"]]]]]]]]]],[2072,5,2073,85,[1,"++",1,[2072,5,2072,114,[0,[[2072,5,2072,20,[2,[],"checkExpression"]],[2072,21,2072,27,[2,[],"config"]],[2072,28,2072,100,[21,[2072,30,2072,35,"local"],[[2072,38,2072,99,[[2072,38,2072,52,"localFunctions"],[2072,55,2072,98,[0,[[2072,55,2072,65,[2,["Dict"],"union"]],[2072,66,2072,86,[19,[2072,66,2072,71,[2,[],"local"]],[2072,72,2072,86,"localFunctions"]]],[2072,87,2072,98,[2,[],"newBindings"]]]]]]]]]],[2072,101,2072,109,[2,[],"exprType"]],[2072,110,2072,114,[2,[],"expr"]]]]],[2073,12,2073,85,[0,[[2073,12,2073,23,[2,["List"],"concat"]],[2073,24,2073,85,[7,[2073,25,2073,84,[0,[[2073,25,2073,34,[2,["List"],"map2"]],[2073,35,2073,70,[7,[2073,36,2073,69,[0,[[2073,36,2073,48,[2,[],"checkPattern"]],[2073,49,2073,55,[2,[],"config"]],[2073,56,2073,69,[19,[2073,56,2073,61,[2,[],"local"]],[2073,62,2073,69,"context"]]]]]]]],[2073,71,2073,79,[2,[],"argTypes"]],[2073,80,2073,84,[2,[],"args"]]]]]]]]]]]]]]]]]]]],[2076,1,2091,13,[0,[[1,[2076,1,2078,3,"{-| Given a list of arguments and a flattened function type, return a list of\nargument types and the final function type.\n-}"]],[1,[2079,1,2079,114,[[2079,1,2079,27,"partiallyApplyArgsAndTypes"],[2079,30,2079,114,[6,[2079,30,2079,36,[1,[2079,30,2079,34,[[],"List"]],[[2079,35,2079,36,[0,"a"]]]]],[2079,40,2079,114,[6,[2079,40,2079,61,[1,[2079,40,2079,44,[[],"List"]],[[2079,45,2079,61,[1,[2079,45,2079,61,[[],"DereferencedType"]],[]]]]]],[2079,65,2079,114,[1,[2079,65,2079,70,[[],"Maybe"]],[[2079,71,2079,114,[3,[[2079,73,2079,94,[1,[2079,73,2079,77,[[],"List"]],[[2079,78,2079,94,[1,[2079,78,2079,94,[[],"DereferencedType"]],[]]]]]],[2079,96,2079,112,[1,[2079,96,2079,112,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2080,1,2091,13,[[2080,1,2080,27,"partiallyApplyArgsAndTypes"],[[2080,28,2080,32,[11,"args"]],[2080,33,2080,38,[11,"types"]]],[2081,5,2091,13,[1,"|>",0,[2081,5,2082,41,[1,"|>",0,[2081,5,2081,21,[0,[[2081,5,2081,16,[2,["List"],"length"]],[2081,17,2081,21,[2,[],"args"]]]]],[2082,12,2082,41,[7,[2082,13,2082,40,[18,[[[2082,14,2082,15,[11,"i"]]],[2082,19,2082,40,[0,[[2082,19,2082,32,[2,["ListX"],"splitAt"]],[2082,33,2082,34,[2,[],"i"]],[2082,35,2082,40,[2,[],"types"]]]]]]]]]]]],[2083,12,2091,13,[7,[2083,13,2090,55,[18,[[[2083,14,2083,34,[7,[[2083,16,2083,24,[11,"argTypes"]],[2083,26,2083,32,[11,"return"]]]]]],[2084,17,2090,55,[1,"|>",0,[2084,17,2089,26,[1,"|>",0,[2084,17,2084,40,[0,[[2084,17,2084,33,[2,["ListX"],"unconsLast"]],[2084,34,2084,40,[2,[],"return"]]]]],[2085,24,2089,26,[0,[[2085,24,2085,33,[2,["Maybe"],"map"]],[2086,25,2089,26,[7,[2086,26,2088,48,[1,">>",1,[2086,26,2086,66,[0,[[2086,26,2086,39,[2,["Tuple"],"mapBoth"]],[2086,40,2086,47,[2,[],"getType"]],[2086,48,2086,66,[7,[2086,49,2086,65,[0,[[2086,49,2086,57,[2,["List"],"map"]],[2086,58,2086,65,[2,[],"getType"]]]]]]]]]],[2087,32,2088,48,[1,">>",1,[2087,32,2087,69,[7,[2087,33,2087,68,[18,[[[2087,34,2087,43,[7,[[2087,36,2087,37,[11,"r"]],[2087,39,2087,41,[11,"ts"]]]]]],[2087,47,2087,68,[0,[[2087,47,2087,63,[2,[],"makeFunctionType"]],[2087,64,2087,65,[2,[],"r"]],[2087,66,2087,68,[2,[],"ts"]]]]]]]]]],[2088,32,2088,48,[2,[],"DereferencedType"]]]]]]]]]]]]],[2090,24,2090,55,[0,[[2090,24,2090,33,[2,["Maybe"],"map"]],[2090,34,2090,55,[7,[2090,35,2090,54,[0,[[2090,35,2090,45,[2,["Tuple"],"pair"]],[2090,46,2090,54,[2,[],"argTypes"]]]]]]]]]]]]]]]]]]]]]]]],[2094,1,2167,15,[0,[[1,[2094,1,2095,3,"{-| Get all new bindings and their types from a pattern.\n-}"]],[1,[2096,1,2096,109,[[2096,1,2096,26,"bindingsInPatternWithType"],[2096,29,2096,109,[6,[2096,29,2096,42,[1,[2096,29,2096,42,[[],"ModuleContext"]],[]]],[2096,46,2096,109,[6,[2096,46,2096,58,[1,[2096,46,2096,50,[[],"Node"]],[[2096,51,2096,58,[1,[2096,51,2096,58,[[],"Pattern"]],[]]]]]],[2096,62,2096,109,[6,[2096,62,2096,84,[1,[2096,62,2096,67,[[],"Maybe"]],[[2096,68,2096,84,[1,[2096,68,2096,84,[[],"DereferencedType"]],[]]]]]],[2096,88,2096,109,[1,[2096,88,2096,92,[[],"List"]],[[2096,93,2096,109,[3,[[2096,95,2096,101,[1,[2096,95,2096,101,[[],"String"]],[]]],[2096,103,2096,107,[1,[2096,103,2096,107,[[],"Type"]],[]]]]]]]]]]]]]]]]]],[2097,1,2167,15,[[2097,1,2097,26,"bindingsInPatternWithType"],[[2097,27,2097,34,[11,"context"]],[2097,35,2097,42,[11,"pattern"]],[2097,43,2097,48,[11,"type_"]]],[2098,5,2167,15,[16,[[[2099,9,2101,46,[0,[[0],[1,[2099,9,2099,77,[[2099,9,2099,11,"go"],[2099,14,2099,77,[6,[2099,14,2099,26,[1,[2099,14,2099,18,[[],"Node"]],[[2099,19,2099,26,[1,[2099,19,2099,26,[[],"Pattern"]],[]]]]]],[2099,30,2099,77,[6,[2099,30,2099,52,[1,[2099,30,2099,35,[[],"Maybe"]],[[2099,36,2099,52,[1,[2099,36,2099,52,[[],"DereferencedType"]],[]]]]]],[2099,56,2099,77,[1,[2099,56,2099,60,[[],"List"]],[[2099,61,2099,77,[3,[[2099,63,2099,69,[1,[2099,63,2099,69,[[],"String"]],[]]],[2099,71,2099,75,[1,[2099,71,2099,75,[[],"Type"]],[]]]]]]]]]]]]]]]],[2100,9,2101,46,[[2100,9,2100,11,"go"],[],[2101,13,2101,46,[0,[[2101,13,2101,38,[2,[],"bindingsInPatternWithType"]],[2101,39,2101,46,[2,[],"context"]]]]]]]]]],[2103,9,2107,40,[0,[[0],[1,[2103,9,2103,77,[[2103,9,2103,17,"makeType"],[2103,20,2103,77,[6,[2103,20,2103,26,[1,[2103,20,2103,26,[[],"String"]],[]]],[2103,30,2103,77,[6,[2103,30,2103,52,[1,[2103,30,2103,35,[[],"Maybe"]],[[2103,36,2103,52,[1,[2103,36,2103,52,[[],"DereferencedType"]],[]]]]]],[2103,56,2103,77,[1,[2103,56,2103,60,[[],"List"]],[[2103,61,2103,77,[3,[[2103,63,2103,69,[1,[2103,63,2103,69,[[],"String"]],[]]],[2103,71,2103,75,[1,[2103,71,2103,75,[[],"Type"]],[]]]]]]]]]]]]]]]],[2104,9,2107,40,[[2104,9,2104,17,"makeType"],[[2104,18,2104,19,[11,"n"]],[2104,20,2104,21,[11,"t"]]],[2105,13,2107,40,[1,"|>",0,[2105,13,2106,62,[1,"|>",0,[2105,13,2105,32,[0,[[2105,13,2105,22,[2,["Maybe"],"map"]],[2105,23,2105,30,[2,[],"getType"]],[2105,31,2105,32,[2,[],"t"]]]]],[2106,20,2106,62,[0,[[2106,20,2106,29,[2,["Maybe"],"map"]],[2106,30,2106,62,[7,[2106,31,2106,61,[1,"<<",0,[2106,31,2106,45,[2,["List"],"singleton"]],[2106,49,2106,61,[0,[[2106,49,2106,59,[2,["Tuple"],"pair"]],[2106,60,2106,61,[2,[],"n"]]]]]]]]]]]]]],[2107,20,2107,40,[0,[[2107,20,2107,37,[2,["Maybe"],"withDefault"]],[2107,38,2107,40,[9,[]]]]]]]]]]]]]],[2109,5,2167,15,[17,[[2109,10,2109,28,[0,[[2109,10,2109,20,[2,["Node"],"value"]],[2109,21,2109,28,[2,[],"pattern"]]]]],[[[2110,9,2110,23,[12,[[],"ListPattern"],[[2110,21,2110,23,[11,"ps"]]]]],[2111,13,2112,60,[1,"|>",0,[2111,13,2111,30,[0,[[2111,13,2111,24,[2,[],"getListType"]],[2111,25,2111,30,[2,[],"type_"]]]]],[2112,20,2112,60,[7,[2112,21,2112,59,[18,[[[2112,22,2112,23,[11,"t"]]],[2112,27,2112,59,[0,[[2112,27,2112,41,[2,["List"],"concatMap"]],[2112,42,2112,56,[7,[2112,43,2112,55,[18,[[[2112,44,2112,45,[11,"p"]]],[2112,49,2112,55,[0,[[2112,49,2112,51,[2,[],"go"]],[2112,52,2112,53,[2,[],"p"]],[2112,54,2112,55,[2,[],"t"]]]]]]]]]],[2112,57,2112,59,[2,[],"ps"]]]]]]]]]]]]],[[2114,9,2114,24,[12,[[],"TuplePattern"],[[2114,22,2114,24,[11,"ps"]]]]],[2115,13,2117,31,[1,"|>",0,[2115,13,2116,35,[1,"|>",0,[2115,13,2115,35,[0,[[2115,13,2115,26,[2,[],"getTupleTypes"]],[2115,27,2115,29,[2,[],"ps"]],[2115,30,2115,35,[2,[],"type_"]]]]],[2116,20,2116,35,[0,[[2116,20,2116,29,[2,["List"],"map2"]],[2116,30,2116,32,[2,[],"go"]],[2116,33,2116,35,[2,[],"ps"]]]]]]],[2117,20,2117,31,[2,["List"],"concat"]]]]],[[2119,9,2119,25,[12,[[],"RecordPattern"],[[2119,23,2119,25,[11,"ps"]]]]],[2120,13,2129,31,[1,"|>",0,[2120,13,2128,21,[1,"|>",0,[2120,13,2120,38,[0,[[2120,13,2120,32,[2,[],"getRecordFieldTypes"]],[2120,33,2120,38,[2,[],"type_"]]]]],[2121,20,2128,21,[7,[2121,21,2127,31,[18,[[[2121,22,2121,24,[11,"ts"]]],[2122,25,2127,31,[0,[[2122,25,2122,33,[2,["List"],"map"]],[2123,29,2126,30,[7,[2123,30,2125,63,[18,[[[2123,31,2123,32,[11,"p"]]],[2124,33,2125,63,[1,"|>",0,[2124,33,2124,59,[0,[[2124,33,2124,41,[2,["Dict"],"get"]],[2124,42,2124,56,[7,[2124,43,2124,55,[0,[[2124,43,2124,53,[2,["Node"],"value"]],[2124,54,2124,55,[2,[],"p"]]]]]]],[2124,57,2124,59,[2,[],"ts"]]]]],[2125,40,2125,63,[0,[[2125,40,2125,48,[2,[],"makeType"]],[2125,49,2125,63,[7,[2125,50,2125,62,[0,[[2125,50,2125,60,[2,["Node"],"value"]],[2125,61,2125,62,[2,[],"p"]]]]]]]]]]]]]]]]],[2127,29,2127,31,[2,[],"ps"]]]]]]]]]]]],[2129,20,2129,31,[2,["List"],"concat"]]]]],[[2131,9,2131,33,[12,[[],"NamedPattern"],[[2131,22,2131,30,[8,[[2131,24,2131,28,"name"]]]],[2131,31,2131,33,[11,"ps"]]]]],[2135,13,2139,90,[1,"|>",0,[2135,13,2137,41,[1,"|>",0,[2135,13,2136,68,[1,"|>",0,[2135,13,2135,99,[0,[[2135,13,2135,29,[2,[],"findFunctionType"]],[2135,30,2135,80,[8,[[2135,32,2135,49,[[2135,32,2135,39,"context"],[2135,42,2135,49,[2,[],"context"]]]],[2135,51,2135,79,[[2135,51,2135,65,"localFunctions"],[2135,68,2135,78,[2,["Dict"],"empty"]]]]]]],[2135,81,2135,86,[2,[],"type_"]],[2135,87,2135,94,[2,[],"pattern"]],[2135,95,2135,99,[2,[],"name"]]]]],[2136,20,2136,68,[0,[[2136,20,2136,29,[2,["Maybe"],"map"]],[2136,30,2136,68,[7,[2136,31,2136,67,[0,[[2136,31,2136,40,[2,["List"],"map2"]],[2136,41,2136,64,[7,[2136,42,2136,63,[18,[[[2136,43,2136,44,[11,"p"]],[2136,45,2136,46,[11,"t"]]],[2136,50,2136,63,[0,[[2136,50,2136,52,[2,[],"go"]],[2136,53,2136,54,[2,[],"p"]],[2136,55,2136,63,[7,[2136,56,2136,62,[0,[[2136,56,2136,60,[2,[],"Just"]],[2136,61,2136,62,[2,[],"t"]]]]]]]]]]]]]]],[2136,65,2136,67,[2,[],"ps"]]]]]]]]]]]],[2137,20,2137,41,[0,[[2137,20,2137,29,[2,["Maybe"],"map"]],[2137,30,2137,41,[2,["List"],"concat"]]]]]]],[2139,20,2139,90,[0,[[2139,20,2139,42,[2,["MaybeX"],"withDefaultLazy"]],[2139,43,2139,90,[7,[2139,44,2139,89,[18,[[[2139,45,2139,47,[1]]],[2139,51,2139,89,[0,[[2139,51,2139,65,[2,["List"],"concatMap"]],[2139,66,2139,86,[7,[2139,67,2139,85,[18,[[[2139,68,2139,69,[11,"p"]]],[2139,73,2139,85,[0,[[2139,73,2139,75,[2,[],"go"]],[2139,76,2139,77,[2,[],"p"]],[2139,78,2139,85,[2,[],"Nothing"]]]]]]]]]],[2139,87,2139,89,[2,[],"ps"]]]]]]]]]]]]]]]],[[2141,9,2141,27,[12,[[],"UnConsPattern"],[[2141,23,2141,24,[11,"p"]],[2141,25,2141,27,[11,"ps"]]]]],[2143,13,2144,49,[1,"|>",0,[2143,13,2143,30,[0,[[2143,13,2143,24,[2,[],"getListType"]],[2143,25,2143,30,[2,[],"type_"]]]]],[2144,20,2144,49,[7,[2144,21,2144,48,[18,[[[2144,22,2144,23,[11,"t"]]],[2144,27,2144,48,[1,"++",1,[2144,27,2144,33,[0,[[2144,27,2144,29,[2,[],"go"]],[2144,30,2144,31,[2,[],"p"]],[2144,32,2144,33,[2,[],"t"]]]]],[2144,37,2144,48,[0,[[2144,37,2144,39,[2,[],"go"]],[2144,40,2144,42,[2,[],"ps"]],[2144,43,2144,48,[2,[],"type_"]]]]]]]]]]]]]]],[[2146,9,2146,24,[12,[[],"VarPattern"],[[2146,20,2146,24,[11,"name"]]]]],[2148,13,2148,32,[0,[[2148,13,2148,21,[2,[],"makeType"]],[2148,22,2148,26,[2,[],"name"]],[2148,27,2148,32,[2,[],"type_"]]]]]],[[2150,9,2150,25,[12,[[],"AsPattern"],[[2150,19,2150,20,[11,"p"]],[2150,21,2150,25,[11,"name"]]]]],[2152,13,2152,59,[1,"++",1,[2152,13,2152,45,[0,[[2152,13,2152,21,[2,[],"makeType"]],[2152,22,2152,39,[7,[2152,23,2152,38,[0,[[2152,23,2152,33,[2,["Node"],"value"]],[2152,34,2152,38,[2,[],"name"]]]]]]],[2152,40,2152,45,[2,[],"type_"]]]]],[2152,49,2152,59,[0,[[2152,49,2152,51,[2,[],"go"]],[2152,52,2152,53,[2,[],"p"]],[2152,54,2152,59,[2,[],"type_"]]]]]]]],[[2154,9,2154,31,[12,[[],"ParenthesizedPattern"],[[2154,30,2154,31,[11,"p"]]]]],[2156,13,2156,23,[0,[[2156,13,2156,15,[2,[],"go"]],[2156,16,2156,17,[2,[],"p"]],[2156,18,2156,23,[2,[],"type_"]]]]]],[[2158,9,2158,10,[0]],[2167,13,2167,15,[9,[]]]]]]]]]]]]]]]],[2170,1,2246,15,[0,[[1,[2170,1,2171,3,"{-| Descend into type annotations, checking for unsorted records.\n-}"]],[1,[2172,1,2172,118,[[2172,1,2172,20,"checkTypeAnnotation"],[2172,23,2172,118,[6,[2172,23,2172,33,[1,[2172,23,2172,33,[[],"RuleConfig"]],[]]],[2172,37,2172,118,[6,[2172,37,2172,50,[1,[2172,37,2172,50,[[],"ModuleContext"]],[]]],[2172,54,2172,118,[6,[2172,54,2172,76,[1,[2172,54,2172,59,[[],"Maybe"]],[[2172,60,2172,76,[1,[2172,60,2172,76,[[],"DereferencedType"]],[]]]]]],[2172,80,2172,118,[6,[2172,80,2172,99,[1,[2172,80,2172,84,[[],"Node"]],[[2172,85,2172,99,[1,[2172,85,2172,99,[[],"TypeAnnotation"]],[]]]]]],[2172,103,2172,118,[1,[2172,103,2172,107,[[],"List"]],[[2172,108,2172,118,[1,[2172,109,2172,114,[[],"Error"]],[[2172,115,2172,117,[4,[]]]]]]]]]]]]]]]]]]]],[2173,1,2246,15,[[2173,1,2173,20,"checkTypeAnnotation"],[[2173,21,2173,27,[11,"config"]],[2173,28,2173,35,[11,"context"]],[2173,36,2173,53,[11,"hasTypeFromParent"]],[2173,54,2173,59,[11,"type_"]]],[2174,5,2246,15,[16,[[[2175,9,2177,47,[0,[[0],[1,[2175,9,2175,78,[[2175,9,2175,11,"go"],[2175,14,2175,78,[6,[2175,14,2175,36,[1,[2175,14,2175,19,[[],"Maybe"]],[[2175,20,2175,36,[1,[2175,20,2175,36,[[],"DereferencedType"]],[]]]]]],[2175,40,2175,78,[6,[2175,40,2175,59,[1,[2175,40,2175,44,[[],"Node"]],[[2175,45,2175,59,[1,[2175,45,2175,59,[[],"TypeAnnotation"]],[]]]]]],[2175,63,2175,78,[1,[2175,63,2175,67,[[],"List"]],[[2175,68,2175,78,[1,[2175,69,2175,74,[[],"Error"]],[[2175,75,2175,77,[4,[]]]]]]]]]]]]]]]],[2176,9,2177,47,[[2176,9,2176,11,"go"],[],[2177,13,2177,47,[0,[[2177,13,2177,32,[2,[],"checkTypeAnnotation"]],[2177,33,2177,39,[2,[],"config"]],[2177,40,2177,47,[2,[],"context"]]]]]]]]]],[2179,9,2188,27,[0,[[0],[1,[2179,9,2179,124,[[2179,9,2179,20,"checkFields"],[2179,23,2179,124,[6,[2179,23,2179,64,[1,[2179,23,2179,27,[[],"List"]],[[2179,28,2179,64,[3,[[2179,30,2179,41,[1,[2179,30,2179,34,[[],"Node"]],[[2179,35,2179,41,[1,[2179,35,2179,41,[[],"String"]],[]]]]]],[2179,43,2179,62,[1,[2179,43,2179,47,[[],"Node"]],[[2179,48,2179,62,[1,[2179,48,2179,62,[[],"TypeAnnotation"]],[]]]]]]]]]]]],[2179,68,2179,124,[6,[2179,68,2179,105,[3,[[2179,70,2179,85,[1,[2179,70,2179,74,[[],"List"]],[[2179,75,2179,85,[1,[2179,76,2179,81,[[],"Error"]],[[2179,82,2179,84,[4,[]]]]]]]]],[2179,87,2179,103,[1,[2179,87,2179,91,[[],"Dict"]],[[2179,92,2179,98,[1,[2179,92,2179,98,[[],"String"]],[]]],[2179,99,2179,103,[1,[2179,99,2179,103,[[],"Type"]],[]]]]]]]]],[2179,109,2179,124,[1,[2179,109,2179,113,[[],"List"]],[[2179,114,2179,124,[1,[2179,115,2179,120,[[],"Error"]],[[2179,121,2179,123,[4,[]]]]]]]]]]]]]]]],[2180,9,2188,27,[[2180,9,2180,20,"checkFields"],[[2180,21,2180,27,[11,"fields"]],[2180,28,2180,72,[7,[[2180,30,2180,41,[11,"parentError"]],[2180,43,2180,70,[11,"canonicalTypeInfoFromParent"]]]]]],[2181,13,2188,27,[1,"++",1,[2181,13,2181,24,[2,[],"parentError"]],[2182,20,2188,27,[0,[[2182,20,2182,34,[2,["List"],"concatMap"]],[2183,21,2187,22,[7,[2183,22,2186,78,[18,[[[2183,23,2183,35,[7,[[2183,25,2183,30,[11,"field"]],[2183,32,2183,33,[11,"a"]]]]]],[2184,25,2186,78,[1,"|>",0,[2184,25,2185,67,[1,"|>",0,[2184,25,2184,80,[0,[[2184,25,2184,33,[2,["Dict"],"get"]],[2184,34,2184,52,[7,[2184,35,2184,51,[0,[[2184,35,2184,45,[2,["Node"],"value"]],[2184,46,2184,51,[2,[],"field"]]]]]]],[2184,53,2184,80,[2,[],"canonicalTypeInfoFromParent"]]]]],[2185,32,2185,67,[0,[[2185,32,2185,41,[2,["Maybe"],"map"]],[2185,42,2185,67,[7,[2185,43,2185,66,[0,[[2185,43,2185,58,[2,[],"dereferenceType"]],[2185,59,2185,66,[2,[],"context"]]]]]]]]]]]],[2186,32,2186,78,[7,[2186,33,2186,77,[18,[[[2186,34,2186,35,[11,"t"]]],[2186,39,2186,77,[0,[[2186,39,2186,58,[2,[],"checkTypeAnnotation"]],[2186,59,2186,65,[2,[],"config"]],[2186,66,2186,73,[2,[],"context"]],[2186,74,2186,75,[2,[],"t"]],[2186,76,2186,77,[2,[],"a"]]]]]]]]]]]]]]]]],[2188,21,2188,27,[2,[],"fields"]]]]]]]]]]]]],[2190,5,2246,15,[17,[[2190,10,2190,26,[0,[[2190,10,2190,20,[2,["Node"],"value"]],[2190,21,2190,26,[2,[],"type_"]]]]],[[[2192,9,2192,19,[12,[[],"Record"],[[2192,16,2192,19,[11,"def"]]]]],[2193,13,2197,57,[1,"|>",0,[2193,13,2195,14,[7,[2193,14,2194,46,[1,"|>",0,[2193,14,2193,88,[0,[[2193,14,2193,34,[2,[],"recordDefToCheckable"]],[2193,35,2193,42,[2,[],"context"]],[2193,43,2193,61,[7,[2193,44,2193,60,[0,[[2193,44,2193,54,[2,["Node"],"range"]],[2193,55,2193,60,[2,[],"type_"]]]]]]],[2193,62,2193,66,[2,[],"True"]],[2193,67,2193,84,[2,[],"hasTypeFromParent"]],[2193,85,2193,88,[2,[],"def"]]]]],[2194,20,2194,46,[0,[[2194,20,2194,31,[2,[],"checkRecord"]],[2194,32,2194,38,[2,[],"config"]],[2194,39,2194,46,[2,[],"context"]]]]]]]]],[2197,20,2197,57,[0,[[2197,20,2197,31,[2,[],"checkFields"]],[2197,32,2197,57,[7,[2197,33,2197,56,[0,[[2197,33,2197,41,[2,["List"],"map"]],[2197,42,2197,52,[2,["Node"],"value"]],[2197,53,2197,56,[2,[],"def"]]]]]]]]]]]]],[[2199,9,2199,28,[12,[[],"GenericRecord"],[[2199,23,2199,24,[0]],[2199,25,2199,28,[11,"def"]]]]],[2200,13,2204,71,[1,"|>",0,[2200,13,2202,14,[7,[2200,14,2201,46,[1,"|>",0,[2200,14,2200,102,[0,[[2200,14,2200,34,[2,[],"recordDefToCheckable"]],[2200,35,2200,42,[2,[],"context"]],[2200,43,2200,61,[7,[2200,44,2200,60,[0,[[2200,44,2200,54,[2,["Node"],"range"]],[2200,55,2200,60,[2,[],"type_"]]]]]]],[2200,62,2200,67,[2,[],"False"]],[2200,68,2200,85,[2,[],"hasTypeFromParent"]],[2200,86,2200,102,[7,[2200,87,2200,101,[0,[[2200,87,2200,97,[2,["Node"],"value"]],[2200,98,2200,101,[2,[],"def"]]]]]]]]]],[2201,20,2201,46,[0,[[2201,20,2201,31,[2,[],"checkRecord"]],[2201,32,2201,38,[2,[],"config"]],[2201,39,2201,46,[2,[],"context"]]]]]]]]],[2204,20,2204,71,[0,[[2204,20,2204,31,[2,[],"checkFields"]],[2204,32,2204,71,[7,[2204,33,2204,70,[1,"<|",1,[2204,33,2204,52,[0,[[2204,33,2204,41,[2,["List"],"map"]],[2204,42,2204,52,[2,["Node"],"value"]]]]],[2204,56,2204,70,[0,[[2204,56,2204,66,[2,["Node"],"value"]],[2204,67,2204,70,[2,[],"def"]]]]]]]]]]]]]]],[[2207,9,2207,41,[12,[[],"FunctionTypeAnnotation"],[[2207,32,2207,37,[11,"fromA"]],[2207,38,2207,41,[11,"toA"]]]]],[2208,13,2217,47,[16,[[[2209,17,2215,49,[1,[2209,17,2209,37,[7,[[2209,19,2209,27,[11,"fromType"]],[2209,29,2209,35,[11,"toType"]]]]],[2210,21,2215,49,[17,[[2210,26,2210,61,[0,[[2210,26,2210,35,[2,["Maybe"],"map"]],[2210,36,2210,43,[2,[],"getType"]],[2210,44,2210,61,[2,[],"hasTypeFromParent"]]]]],[[[2211,25,2211,57,[12,[[],"Just"],[[2211,30,2211,57,[14,[2211,31,2211,56,[12,[[],"FunctionType"],[[2211,44,2211,56,[8,[[2211,46,2211,50,"from"],[2211,52,2211,54,"to"]]]]]]]]]]]],[2212,29,2212,91,[6,[[2212,31,2212,60,[1,"<|",1,[2212,31,2212,35,[2,[],"Just"]],[2212,39,2212,60,[0,[[2212,39,2212,55,[2,[],"DereferencedType"]],[2212,56,2212,60,[2,[],"from"]]]]]]],[2212,62,2212,89,[1,"<|",1,[2212,62,2212,66,[2,[],"Just"]],[2212,70,2212,89,[0,[[2212,70,2212,86,[2,[],"DereferencedType"]],[2212,87,2212,89,[2,[],"to"]]]]]]]]]]],[[2214,25,2214,26,[0]],[2215,29,2215,49,[6,[[2215,31,2215,38,[2,[],"Nothing"]],[2215,40,2215,47,[2,[],"Nothing"]]]]]]]]]]]]],[2217,13,2217,47,[1,"++",1,[2217,13,2217,30,[0,[[2217,13,2217,15,[2,[],"go"]],[2217,16,2217,24,[2,[],"fromType"]],[2217,25,2217,30,[2,[],"fromA"]]]]],[2217,34,2217,47,[0,[[2217,34,2217,36,[2,[],"go"]],[2217,37,2217,43,[2,[],"toType"]],[2217,44,2217,47,[2,[],"toA"]]]]]]]]]]],[[2219,9,2219,22,[12,[[],"Tupled"],[[2219,16,2219,22,[11,"types_"]]]]],[2221,13,2222,31,[1,"|>",0,[2221,13,2221,73,[0,[[2221,13,2221,22,[2,["List"],"map2"]],[2221,23,2221,25,[2,[],"go"]],[2221,26,2221,66,[7,[2221,27,2221,65,[0,[[2221,27,2221,40,[2,[],"getTupleTypes"]],[2221,41,2221,47,[2,[],"types_"]],[2221,48,2221,65,[2,[],"hasTypeFromParent"]]]]]]],[2221,67,2221,73,[2,[],"types_"]]]]],[2222,20,2222,31,[2,["List"],"concat"]]]]],[[2224,9,2224,23,[12,[[],"Typed"],[[2224,15,2224,16,[0]],[2224,17,2224,23,[11,"types_"]]]]],[2225,13,2239,31,[16,[[[2226,17,2236,61,[0,[[0],[1,[2226,17,2226,57,[[2226,17,2226,25,"typeVars"],[2226,28,2226,57,[1,[2226,28,2226,32,[[],"List"]],[[2226,33,2226,57,[1,[2226,34,2226,39,[[],"Maybe"]],[[2226,40,2226,56,[1,[2226,40,2226,56,[[],"DereferencedType"]],[]]]]]]]]]]]],[2227,17,2236,61,[[2227,17,2227,25,"typeVars"],[],[2228,21,2236,61,[17,[[2228,26,2228,61,[0,[[2228,26,2228,35,[2,["Maybe"],"map"]],[2228,36,2228,43,[2,[],"getType"]],[2228,44,2228,61,[2,[],"hasTypeFromParent"]]]]],[[[2229,25,2229,46,[12,[[],"Just"],[[2229,30,2229,46,[14,[2229,31,2229,45,[12,[[],"NamedType"],[[2229,41,2229,42,[0]],[2229,43,2229,45,[11,"ts"]]]]]]]]]],[2230,29,2230,67,[0,[[2230,29,2230,37,[2,["List"],"map"]],[2230,38,2230,64,[7,[2230,39,2230,63,[1,"<<",0,[2230,39,2230,43,[2,[],"Just"]],[2230,47,2230,63,[2,[],"DereferencedType"]]]]]],[2230,65,2230,67,[2,[],"ts"]]]]]],[[2232,25,2232,42,[12,[[],"Just"],[[2232,30,2232,42,[14,[2232,31,2232,41,[12,[[],"ListType"],[[2232,40,2232,41,[11,"t"]]]]]]]]]],[2233,29,2233,59,[9,[[2233,31,2233,57,[1,"<|",1,[2233,31,2233,35,[2,[],"Just"]],[2233,39,2233,57,[0,[[2233,39,2233,55,[2,[],"DereferencedType"]],[2233,56,2233,57,[2,[],"t"]]]]]]]]]]],[[2235,25,2235,26,[0]],[2236,29,2236,61,[0,[[2236,29,2236,37,[2,["List"],"map"]],[2236,38,2236,54,[7,[2236,39,2236,53,[0,[[2236,39,2236,45,[2,[],"always"]],[2236,46,2236,53,[2,[],"Nothing"]]]]]]],[2236,55,2236,61,[2,[],"types_"]]]]]]]]]]]]]]]],[2238,13,2239,31,[1,"|>",0,[2238,13,2238,41,[0,[[2238,13,2238,22,[2,["List"],"map2"]],[2238,23,2238,25,[2,[],"go"]],[2238,26,2238,34,[2,[],"typeVars"]],[2238,35,2238,41,[2,[],"types_"]]]]],[2239,20,2239,31,[2,["List"],"concat"]]]]]]]],[[2242,9,2242,22,[12,[[],"GenericType"],[[2242,21,2242,22,[0]]]]],[2243,13,2243,15,[9,[]]]],[[2245,9,2245,13,[12,[[],"Unit"],[]]],[2246,13,2246,15,[9,[]]]]]]]]]]]]]]]],[2249,1,2397,15,[0,[[1,[2249,1,2250,3,"{-| Descend into subexpressions, keeping as much type information as possible.\n-}"]],[1,[2251,1,2251,109,[[2251,1,2251,16,"checkExpression"],[2251,19,2251,109,[6,[2251,19,2251,29,[1,[2251,19,2251,29,[[],"RuleConfig"]],[]]],[2251,33,2251,109,[6,[2251,33,2251,45,[1,[2251,33,2251,45,[[],"LocalContext"]],[]]],[2251,49,2251,109,[6,[2251,49,2251,71,[1,[2251,49,2251,54,[[],"Maybe"]],[[2251,55,2251,71,[1,[2251,55,2251,71,[[],"DereferencedType"]],[]]]]]],[2251,75,2251,109,[6,[2251,75,2251,90,[1,[2251,75,2251,79,[[],"Node"]],[[2251,80,2251,90,[1,[2251,80,2251,90,[[],"Expression"]],[]]]]]],[2251,94,2251,109,[1,[2251,94,2251,98,[[],"List"]],[[2251,99,2251,109,[1,[2251,100,2251,105,[[],"Error"]],[[2251,106,2251,108,[4,[]]]]]]]]]]]]]]]]]]]],[2252,1,2397,15,[[2252,1,2252,16,"checkExpression"],[[2252,17,2252,23,[11,"config"]],[2252,24,2252,29,[11,"local"]],[2252,30,2252,37,[11,"hasType"]],[2252,38,2252,42,[11,"node"]]],[2253,5,2397,15,[16,[[[2254,9,2256,41,[0,[[0],[1,[2254,9,2254,74,[[2254,9,2254,11,"go"],[2254,14,2254,74,[6,[2254,14,2254,36,[1,[2254,14,2254,19,[[],"Maybe"]],[[2254,20,2254,36,[1,[2254,20,2254,36,[[],"DereferencedType"]],[]]]]]],[2254,40,2254,74,[6,[2254,40,2254,55,[1,[2254,40,2254,44,[[],"Node"]],[[2254,45,2254,55,[1,[2254,45,2254,55,[[],"Expression"]],[]]]]]],[2254,59,2254,74,[1,[2254,59,2254,63,[[],"List"]],[[2254,64,2254,74,[1,[2254,65,2254,70,[[],"Error"]],[[2254,71,2254,73,[4,[]]]]]]]]]]]]]]]],[2255,9,2256,41,[[2255,9,2255,11,"go"],[],[2256,13,2256,41,[0,[[2256,13,2256,28,[2,[],"checkExpression"]],[2256,29,2256,35,[2,[],"config"]],[2256,36,2256,41,[2,[],"local"]]]]]]]]]],[2258,9,2273,27,[0,[[0],[1,[2258,9,2258,152,[[2258,9,2258,20,"checkFields"],[2258,23,2258,152,[6,[2258,23,2258,51,[1,[2258,23,2258,27,[[],"Dict"]],[[2258,28,2258,34,[1,[2258,28,2258,34,[[],"String"]],[]]],[2258,35,2258,51,[1,[2258,35,2258,51,[[],"DereferencedType"]],[]]]]]],[2258,55,2258,152,[6,[2258,55,2258,92,[1,[2258,55,2258,59,[[],"List"]],[[2258,60,2258,92,[3,[[2258,62,2258,73,[1,[2258,62,2258,66,[[],"Node"]],[[2258,67,2258,73,[1,[2258,67,2258,73,[[],"String"]],[]]]]]],[2258,75,2258,90,[1,[2258,75,2258,79,[[],"Node"]],[[2258,80,2258,90,[1,[2258,80,2258,90,[[],"Expression"]],[]]]]]]]]]]]],[2258,96,2258,152,[6,[2258,96,2258,133,[3,[[2258,98,2258,113,[1,[2258,98,2258,102,[[],"List"]],[[2258,103,2258,113,[1,[2258,104,2258,109,[[],"Error"]],[[2258,110,2258,112,[4,[]]]]]]]]],[2258,115,2258,131,[1,[2258,115,2258,119,[[],"Dict"]],[[2258,120,2258,126,[1,[2258,120,2258,126,[[],"String"]],[]]],[2258,127,2258,131,[1,[2258,127,2258,131,[[],"Type"]],[]]]]]]]]],[2258,137,2258,152,[1,[2258,137,2258,141,[[],"List"]],[[2258,142,2258,152,[1,[2258,143,2258,148,[[],"Error"]],[[2258,149,2258,151,[4,[]]]]]]]]]]]]]]]]]],[2259,9,2273,27,[[2259,9,2259,20,"checkFields"],[[2259,21,2259,29,[11,"typeInfo"]],[2259,30,2259,36,[11,"fields"]],[2259,37,2259,81,[7,[[2259,39,2259,50,[11,"parentError"]],[2259,52,2259,79,[11,"canonicalTypeInfoFromParent"]]]]]],[2260,13,2273,27,[1,"++",1,[2260,13,2260,24,[2,[],"parentError"]],[2261,20,2273,27,[0,[[2261,20,2261,34,[2,["List"],"concatMap"]],[2262,21,2272,22,[7,[2262,22,2271,46,[18,[[[2262,23,2262,35,[7,[[2262,25,2262,30,[11,"field"]],[2262,32,2262,33,[11,"e"]]]]]],[2263,25,2271,46,[16,[[[2264,29,2266,49,[0,[[0],[1,[2264,29,2264,39,[[2264,29,2264,30,"f"],[2264,33,2264,39,[1,[2264,33,2264,39,[[],"String"]],[]]]]]],[2265,29,2266,49,[[2265,29,2265,30,"f"],[],[2266,33,2266,49,[0,[[2266,33,2266,43,[2,["Node"],"value"]],[2266,44,2266,49,[2,[],"field"]]]]]]]]]]],[2268,25,2271,46,[1,"|>",0,[2268,25,2270,78,[1,"|>",0,[2268,25,2269,73,[1,"|>",0,[2268,25,2268,63,[0,[[2268,25,2268,33,[2,["Dict"],"get"]],[2268,34,2268,35,[2,[],"f"]],[2268,36,2268,63,[2,[],"canonicalTypeInfoFromParent"]]]]],[2269,32,2269,73,[0,[[2269,32,2269,41,[2,["Maybe"],"map"]],[2269,42,2269,73,[7,[2269,43,2269,72,[0,[[2269,43,2269,58,[2,[],"dereferenceType"]],[2269,59,2269,72,[19,[2269,59,2269,64,[2,[],"local"]],[2269,65,2269,72,"context"]]]]]]]]]]]]],[2270,32,2270,78,[0,[[2270,32,2270,49,[2,["MaybeX"],"orElseLazy"]],[2270,50,2270,78,[7,[2270,51,2270,77,[18,[[[2270,52,2270,54,[1]]],[2270,58,2270,77,[0,[[2270,58,2270,66,[2,["Dict"],"get"]],[2270,67,2270,68,[2,[],"f"]],[2270,69,2270,77,[2,[],"typeInfo"]]]]]]]]]]]]]]],[2271,32,2271,46,[7,[2271,33,2271,45,[18,[[[2271,34,2271,35,[11,"t"]]],[2271,39,2271,45,[0,[[2271,39,2271,41,[2,[],"go"]],[2271,42,2271,43,[2,[],"t"]],[2271,44,2271,45,[2,[],"e"]]]]]]]]]]]]]]]]]]]],[2273,21,2273,27,[2,[],"fields"]]]]]]]]]]]]],[2275,5,2397,15,[17,[[2275,10,2275,25,[0,[[2275,10,2275,20,[2,["Node"],"value"]],[2275,21,2275,25,[2,[],"node"]]]]],[[[2277,9,2277,19,[12,[[],"Negation"],[[2277,18,2277,19,[11,"e"]]]]],[2279,13,2279,25,[0,[[2279,13,2279,15,[2,[],"go"]],[2279,16,2279,23,[2,[],"hasType"]],[2279,24,2279,25,[2,[],"e"]]]]]],[[2281,9,2281,34,[12,[[],"ParenthesizedExpression"],[[2281,33,2281,34,[11,"e"]]]]],[2283,13,2283,25,[0,[[2283,13,2283,15,[2,[],"go"]],[2283,16,2283,23,[2,[],"hasType"]],[2283,24,2283,25,[2,[],"e"]]]]]],[[2285,9,2285,20,[12,[[],"ListExpr"],[[2285,18,2285,20,[11,"es"]]]]],[2286,13,2292,41,[16,[[[2288,17,2290,40,[0,[[0],[1,[2288,17,2288,47,[[2288,17,2288,22,"type_"],[2288,25,2288,47,[1,[2288,25,2288,30,[[],"Maybe"]],[[2288,31,2288,47,[1,[2288,31,2288,47,[[],"DereferencedType"]],[]]]]]]]]],[2289,17,2290,40,[[2289,17,2289,22,"type_"],[],[2290,21,2290,40,[0,[[2290,21,2290,32,[2,[],"getListType"]],[2290,33,2290,40,[2,[],"hasType"]]]]]]]]]]],[2292,13,2292,41,[0,[[2292,13,2292,27,[2,["List"],"concatMap"]],[2292,28,2292,38,[7,[2292,29,2292,37,[0,[[2292,29,2292,31,[2,[],"go"]],[2292,32,2292,37,[2,[],"type_"]]]]]]],[2292,39,2292,41,[2,[],"es"]]]]]]]]],[[2294,9,2294,23,[12,[[],"Application"],[[2294,21,2294,23,[11,"es"]]]]],[2296,13,2296,58,[0,[[2296,13,2296,34,[2,[],"checkApplicationChain"]],[2296,35,2296,41,[2,[],"config"]],[2296,42,2296,47,[2,[],"local"]],[2296,48,2296,55,[2,[],"hasType"]],[2296,56,2296,58,[2,[],"es"]]]]]],[[2298,9,2298,39,[12,[[],"OperatorApplication"],[[2298,29,2298,31,[11,"op"]],[2298,32,2298,33,[0]],[2298,34,2298,36,[11,"e1"]],[2298,37,2298,39,[11,"e2"]]]]],[2300,13,2300,91,[0,[[2300,13,2300,37,[2,[],"checkOperatorApplication"]],[2300,38,2300,82,[7,[2300,39,2300,81,[0,[[2300,39,2300,60,[2,[],"checkApplicationChain"]],[2300,61,2300,67,[2,[],"config"]],[2300,68,2300,73,[2,[],"local"]],[2300,74,2300,81,[2,[],"hasType"]]]]]]],[2300,83,2300,85,[2,[],"op"]],[2300,86,2300,88,[2,[],"e1"]],[2300,89,2300,91,[2,[],"e2"]]]]]],[[2302,9,2302,33,[12,[[],"IfBlock"],[[2302,17,2302,21,[11,"pred"]],[2302,22,2302,27,[11,"thenE"]],[2302,28,2302,33,[11,"elseE"]]]]],[2304,13,2304,128,[1,"++",1,[2304,13,2304,88,[0,[[2304,13,2304,15,[2,[],"go"]],[2304,16,2304,83,[7,[2304,17,2304,82,[1,"<|",1,[2304,17,2304,21,[2,[],"Just"]],[2304,25,2304,82,[1,"<|",1,[2304,25,2304,41,[2,[],"DereferencedType"]],[2304,45,2304,82,[0,[[2304,45,2304,54,[2,[],"NamedType"]],[2304,55,2304,79,[6,[[2304,57,2304,69,[9,[[2304,59,2304,67,[5,"Basics"]]]]],[2304,71,2304,77,[5,"Bool"]]]]],[2304,80,2304,82,[9,[]]]]]]]]]]]],[2304,84,2304,88,[2,[],"pred"]]]]],[2304,92,2304,128,[1,"++",1,[2304,92,2304,108,[0,[[2304,92,2304,94,[2,[],"go"]],[2304,95,2304,102,[2,[],"hasType"]],[2304,103,2304,108,[2,[],"thenE"]]]]],[2304,112,2304,128,[0,[[2304,112,2304,114,[2,[],"go"]],[2304,115,2304,122,[2,[],"hasType"]],[2304,123,2304,128,[2,[],"elseE"]]]]]]]]]],[[2306,9,2306,28,[12,[[],"TupledExpression"],[[2306,26,2306,28,[11,"es"]]]]],[2308,13,2309,31,[1,"|>",0,[2308,13,2308,55,[0,[[2308,13,2308,22,[2,["List"],"map2"]],[2308,23,2308,25,[2,[],"go"]],[2308,26,2308,52,[7,[2308,27,2308,51,[0,[[2308,27,2308,40,[2,[],"getTupleTypes"]],[2308,41,2308,43,[2,[],"es"]],[2308,44,2308,51,[2,[],"hasType"]]]]]]],[2308,53,2308,55,[2,[],"es"]]]]],[2309,20,2309,31,[2,["List"],"concat"]]]]],[[2311,9,2311,45,[12,[[],"CaseExpression"],[[2311,24,2311,45,[8,[[2311,26,2311,36,"expression"],[2311,38,2311,43,"cases"]]]]]]],[2314,13,2329,100,[16,[[[2315,17,2317,51,[0,[[0],[1,[2315,17,2315,50,[[2315,17,2315,25,"caseType"],[2315,28,2315,50,[1,[2315,28,2315,33,[[],"Maybe"]],[[2315,34,2315,50,[1,[2315,34,2315,50,[[],"DereferencedType"]],[]]]]]]]]],[2316,17,2317,51,[[2316,17,2316,25,"caseType"],[],[2317,21,2317,51,[0,[[2317,21,2317,34,[2,[],"inferExprType"]],[2317,35,2317,40,[2,[],"local"]],[2317,41,2317,51,[2,[],"expression"]]]]]]]]]]],[2319,13,2329,100,[1,"++",1,[2319,13,2319,34,[0,[[2319,13,2319,15,[2,[],"go"]],[2319,16,2319,23,[2,[],"Nothing"]],[2319,24,2319,34,[2,[],"expression"]]]]],[2320,20,2329,100,[1,"++",1,[2320,20,2328,26,[0,[[2320,20,2320,34,[2,["List"],"concatMap"]],[2321,21,2327,22,[7,[2321,22,2326,33,[18,[[[2321,23,2321,31,[7,[[2321,25,2321,26,[11,"p"]],[2321,28,2321,29,[11,"e"]]]]]],[2322,25,2326,33,[1,"|>",0,[2322,25,2323,45,[1,"|>",0,[2322,25,2322,75,[0,[[2322,25,2322,50,[2,[],"bindingsInPatternWithType"]],[2322,51,2322,64,[19,[2322,51,2322,56,[2,[],"local"]],[2322,57,2322,64,"context"]]],[2322,65,2322,66,[2,[],"p"]],[2322,67,2322,75,[2,[],"caseType"]]]]],[2323,32,2323,45,[2,["Dict"],"fromList"]]]],[2324,32,2326,33,[7,[2324,33,2325,142,[18,[[[2324,34,2324,45,[11,"newBindings"]]],[2325,37,2325,142,[0,[[2325,37,2325,52,[2,[],"checkExpression"]],[2325,53,2325,59,[2,[],"config"]],[2325,60,2325,132,[21,[2325,62,2325,67,"local"],[[2325,70,2325,131,[[2325,70,2325,84,"localFunctions"],[2325,87,2325,130,[0,[[2325,87,2325,97,[2,["Dict"],"union"]],[2325,98,2325,118,[19,[2325,98,2325,103,[2,[],"local"]],[2325,104,2325,118,"localFunctions"]]],[2325,119,2325,130,[2,[],"newBindings"]]]]]]]]]],[2325,133,2325,140,[2,[],"hasType"]],[2325,141,2325,142,[2,[],"e"]]]]]]]]]]]]]]]]],[2328,21,2328,26,[2,[],"cases"]]]]],[2329,20,2329,100,[0,[[2329,20,2329,34,[2,["List"],"concatMap"]],[2329,35,2329,94,[7,[2329,36,2329,93,[1,"<<",0,[2329,36,2329,78,[0,[[2329,36,2329,48,[2,[],"checkPattern"]],[2329,49,2329,55,[2,[],"config"]],[2329,56,2329,69,[19,[2329,56,2329,61,[2,[],"local"]],[2329,62,2329,69,"context"]]],[2329,70,2329,78,[2,[],"caseType"]]]]],[2329,82,2329,93,[2,["Tuple"],"first"]]]]]],[2329,95,2329,100,[2,[],"cases"]]]]]]]]]]]]],[[2331,9,2331,46,[12,[[],"LambdaExpression"],[[2331,26,2331,46,[8,[[2331,28,2331,32,"args"],[2331,34,2331,44,"expression"]]]]]]],[2333,13,2333,74,[0,[[2333,13,2333,37,[2,[],"checkFunctionArgsAndExpr"]],[2333,38,2333,44,[2,[],"config"]],[2333,45,2333,50,[2,[],"local"]],[2333,51,2333,58,[2,[],"hasType"]],[2333,59,2333,63,[2,[],"args"]],[2333,64,2333,74,[2,[],"expression"]]]]]],[[2335,9,2335,51,[12,[[],"LetExpression"],[[2335,23,2335,51,[8,[[2335,25,2335,37,"declarations"],[2335,39,2335,49,"expression"]]]]]]],[2337,13,2348,67,[16,[[[2338,17,2341,73,[1,[2338,17,2338,45,[7,[[2338,19,2338,30,[11,"newBindings"]],[2338,32,2338,43,[11,"decsToCheck"]]]]],[2339,21,2341,73,[1,"|>",0,[2339,21,2340,38,[1,"|>",0,[2339,21,2339,91,[0,[[2339,21,2339,29,[2,["List"],"map"]],[2339,30,2339,78,[7,[2339,31,2339,77,[1,"<<",0,[2339,31,2339,63,[0,[[2339,31,2339,50,[2,[],"checkLetDeclaration"]],[2339,51,2339,57,[2,[],"config"]],[2339,58,2339,63,[2,[],"local"]]]]],[2339,67,2339,77,[2,["Node"],"value"]]]]]],[2339,79,2339,91,[2,[],"declarations"]]]]],[2340,28,2340,38,[2,["List"],"unzip"]]]],[2341,28,2341,73,[0,[[2341,28,2341,42,[2,["Tuple"],"mapFirst"]],[2341,43,2341,73,[7,[2341,44,2341,72,[1,"<<",0,[2341,44,2341,57,[2,["Dict"],"fromList"]],[2341,61,2341,72,[2,["List"],"concat"]]]]]]]]]]]]],[2343,17,2345,93,[0,[[0],[1,[2343,17,2343,42,[[2343,17,2343,27,"newContext"],[2343,30,2343,42,[1,[2343,30,2343,42,[[],"LocalContext"]],[]]]]]],[2344,17,2345,93,[[2344,17,2344,27,"newContext"],[],[2345,21,2345,93,[21,[2345,23,2345,28,"local"],[[2345,31,2345,92,[[2345,31,2345,45,"localFunctions"],[2345,48,2345,91,[0,[[2345,48,2345,58,[2,["Dict"],"union"]],[2345,59,2345,79,[19,[2345,59,2345,64,[2,[],"local"]],[2345,65,2345,79,"localFunctions"]]],[2345,80,2345,91,[2,[],"newBindings"]]]]]]]]]]]]]]]],[2347,13,2348,67,[1,"++",1,[2347,13,2347,65,[0,[[2347,13,2347,28,[2,[],"checkExpression"]],[2347,29,2347,35,[2,[],"config"]],[2347,36,2347,46,[2,[],"newContext"]],[2347,47,2347,54,[2,[],"hasType"]],[2347,55,2347,65,[2,[],"expression"]]]]],[2348,20,2348,67,[0,[[2348,20,2348,34,[2,["List"],"concatMap"]],[2348,35,2348,55,[7,[2348,36,2348,54,[18,[[[2348,37,2348,38,[11,"f"]]],[2348,42,2348,54,[0,[[2348,42,2348,43,[2,[],"f"]],[2348,44,2348,54,[2,[],"newContext"]]]]]]]]]],[2348,56,2348,67,[2,[],"decsToCheck"]]]]]]]]]]],[[2350,9,2350,33,[12,[[],"RecordExpr"],[[2350,20,2350,33,[11,"recordSetters"]]]]],[2352,13,2360,70,[16,[[[2353,17,2355,48,[0,[[0],[1,[2353,17,2353,50,[[2353,17,2353,19,"ts"],[2353,22,2353,50,[1,[2353,22,2353,26,[[],"Dict"]],[[2353,27,2353,33,[1,[2353,27,2353,33,[[],"String"]],[]]],[2353,34,2353,50,[1,[2353,34,2353,50,[[],"DereferencedType"]],[]]]]]]]]],[2354,17,2355,48,[[2354,17,2354,19,"ts"],[],[2355,21,2355,48,[0,[[2355,21,2355,40,[2,[],"getRecordFieldTypes"]],[2355,41,2355,48,[2,[],"hasType"]]]]]]]]]]],[2357,13,2360,70,[1,"|>",0,[2357,13,2358,52,[1,"|>",0,[2357,13,2357,88,[0,[[2357,13,2357,37,[2,[],"recordSettersToCheckable"]],[2357,38,2357,43,[2,[],"local"]],[2357,44,2357,61,[7,[2357,45,2357,60,[0,[[2357,45,2357,55,[2,["Node"],"range"]],[2357,56,2357,60,[2,[],"node"]]]]]]],[2357,62,2357,66,[2,[],"True"]],[2357,67,2357,74,[2,[],"hasType"]],[2357,75,2357,88,[2,[],"recordSetters"]]]]],[2358,20,2358,52,[0,[[2358,20,2358,31,[2,[],"checkRecord"]],[2358,32,2358,38,[2,[],"config"]],[2358,39,2358,52,[19,[2358,39,2358,44,[2,[],"local"]],[2358,45,2358,52,"context"]]]]]]]],[2360,20,2360,70,[0,[[2360,20,2360,31,[2,[],"checkFields"]],[2360,32,2360,34,[2,[],"ts"]],[2360,35,2360,70,[7,[2360,36,2360,69,[0,[[2360,36,2360,44,[2,["List"],"map"]],[2360,45,2360,55,[2,["Node"],"value"]],[2360,56,2360,69,[2,[],"recordSetters"]]]]]]]]]]]]]]]],[[2362,9,2362,47,[12,[[],"RecordUpdateExpression"],[[2362,32,2362,33,[0]],[2362,34,2362,47,[11,"recordSetters"]]]]],[2365,13,2379,70,[16,[[[2366,17,2370,79,[0,[[0],[1,[2366,17,2366,52,[[2366,17,2366,27,"updateType"],[2366,30,2366,52,[1,[2366,30,2366,35,[[],"Maybe"]],[[2366,36,2366,52,[1,[2366,36,2366,52,[[],"DereferencedType"]],[]]]]]]]]],[2367,17,2370,79,[[2367,17,2367,27,"updateType"],[],[2369,21,2370,79,[1,"|>",0,[2369,21,2369,28,[2,[],"hasType"]],[2370,28,2370,79,[0,[[2370,28,2370,45,[2,["MaybeX"],"orElseLazy"]],[2370,46,2370,79,[7,[2370,47,2370,78,[18,[[[2370,48,2370,50,[1]]],[2370,54,2370,78,[0,[[2370,54,2370,67,[2,[],"inferExprType"]],[2370,68,2370,73,[2,[],"local"]],[2370,74,2370,78,[2,[],"node"]]]]]]]]]]]]]]]]]]]],[2372,17,2374,51,[0,[[0],[1,[2372,17,2372,50,[[2372,17,2372,19,"ts"],[2372,22,2372,50,[1,[2372,22,2372,26,[[],"Dict"]],[[2372,27,2372,33,[1,[2372,27,2372,33,[[],"String"]],[]]],[2372,34,2372,50,[1,[2372,34,2372,50,[[],"DereferencedType"]],[]]]]]]]]],[2373,17,2374,51,[[2373,17,2373,19,"ts"],[],[2374,21,2374,51,[0,[[2374,21,2374,40,[2,[],"getRecordFieldTypes"]],[2374,41,2374,51,[2,[],"updateType"]]]]]]]]]]],[2376,13,2379,70,[1,"|>",0,[2376,13,2377,52,[1,"|>",0,[2376,13,2376,92,[0,[[2376,13,2376,37,[2,[],"recordSettersToCheckable"]],[2376,38,2376,43,[2,[],"local"]],[2376,44,2376,61,[7,[2376,45,2376,60,[0,[[2376,45,2376,55,[2,["Node"],"range"]],[2376,56,2376,60,[2,[],"node"]]]]]]],[2376,62,2376,67,[2,[],"False"]],[2376,68,2376,78,[2,[],"updateType"]],[2376,79,2376,92,[2,[],"recordSetters"]]]]],[2377,20,2377,52,[0,[[2377,20,2377,31,[2,[],"checkRecord"]],[2377,32,2377,38,[2,[],"config"]],[2377,39,2377,52,[19,[2377,39,2377,44,[2,[],"local"]],[2377,45,2377,52,"context"]]]]]]]],[2379,20,2379,70,[0,[[2379,20,2379,31,[2,[],"checkFields"]],[2379,32,2379,34,[2,[],"ts"]],[2379,35,2379,70,[7,[2379,36,2379,69,[0,[[2379,36,2379,44,[2,["List"],"map"]],[2379,45,2379,55,[2,["Node"],"value"]],[2379,56,2379,69,[2,[],"recordSetters"]]]]]]]]]]]]]]]],[[2381,9,2381,34,[12,[[],"RecordAccess"],[[2381,22,2381,23,[11,"e"]],[2381,24,2381,34,[11,"accessFunc"]]]]],[2382,13,2382,73,[0,[[2382,13,2382,15,[2,[],"go"]],[2382,16,2382,71,[7,[2382,17,2382,70,[1,"<|",1,[2382,17,2382,45,[0,[[2382,17,2382,37,[2,[],"makeRecordAccessType"]],[2382,38,2382,45,[2,[],"hasType"]]]]],[2382,49,2382,70,[0,[[2382,49,2382,59,[2,["Node"],"value"]],[2382,60,2382,70,[2,[],"accessFunc"]]]]]]]]],[2382,72,2382,73,[2,[],"e"]]]]]],[[2384,9,2384,10,[0]],[2397,13,2397,15,[9,[]]]]]]]]]]]]]]]],[2400,1,2414,59,[0,[[1,[2400,1,2403,3,"{-| Generate a list of bindings from a `let` declaration as well as check them\nfor errors (when provided with the new context that includes all new `let`\nbindings. Note that type inference isn't performed with new bindings.\n-}"]],[1,[2404,1,2404,129,[[2404,1,2404,20,"checkLetDeclaration"],[2404,23,2404,129,[6,[2404,23,2404,33,[1,[2404,23,2404,33,[[],"RuleConfig"]],[]]],[2404,37,2404,129,[6,[2404,37,2404,49,[1,[2404,37,2404,49,[[],"LocalContext"]],[]]],[2404,53,2404,129,[6,[2404,53,2404,67,[1,[2404,53,2404,67,[[],"LetDeclaration"]],[]]],[2404,71,2404,129,[3,[[2404,73,2404,94,[1,[2404,73,2404,77,[[],"List"]],[[2404,78,2404,94,[3,[[2404,80,2404,86,[1,[2404,80,2404,86,[[],"String"]],[]]],[2404,88,2404,92,[1,[2404,88,2404,92,[[],"Type"]],[]]]]]]]]],[2404,96,2404,127,[6,[2404,96,2404,108,[1,[2404,96,2404,108,[[],"LocalContext"]],[]]],[2404,112,2404,127,[1,[2404,112,2404,116,[[],"List"]],[[2404,117,2404,127,[1,[2404,118,2404,123,[[],"Error"]],[[2404,124,2404,126,[4,[]]]]]]]]]]]]]]]]]]]]]]],[2405,1,2414,59,[[2405,1,2405,20,"checkLetDeclaration"],[[2405,21,2405,27,[11,"config"]],[2405,28,2405,33,[11,"local"]],[2405,34,2405,35,[11,"d"]]],[2406,5,2414,59,[1,"|>",0,[2406,5,2413,6,[7,[2406,6,2412,127,[17,[[2406,11,2406,12,[2,[],"d"]],[[[2407,9,2407,22,[12,[[],"LetFunction"],[[2407,21,2407,22,[11,"f"]]]]],[2408,13,2408,64,[18,[[[2408,14,2408,20,[11,"local_"]]],[2408,24,2408,64,[0,[[2408,24,2408,48,[2,[],"checkFunctionDeclaration"]],[2408,49,2408,55,[2,[],"config"]],[2408,56,2408,62,[2,[],"local_"]],[2408,63,2408,64,[2,[],"f"]]]]]]]]],[[2410,9,2410,29,[12,[[],"LetDestructuring"],[[2410,26,2410,27,[11,"p"]],[2410,28,2410,29,[11,"e"]]]]],[2412,13,2412,127,[18,[[[2412,14,2412,20,[11,"local_"]]],[2412,24,2412,127,[1,"++",1,[2412,24,2412,63,[0,[[2412,24,2412,39,[2,[],"checkExpression"]],[2412,40,2412,46,[2,[],"config"]],[2412,47,2412,53,[2,[],"local_"]],[2412,54,2412,61,[2,[],"Nothing"]],[2412,62,2412,63,[2,[],"e"]]]]],[2412,67,2412,127,[0,[[2412,67,2412,79,[2,[],"checkPattern"]],[2412,80,2412,86,[2,[],"config"]],[2412,87,2412,100,[19,[2412,87,2412,92,[2,[],"local"]],[2412,93,2412,100,"context"]]],[2412,101,2412,125,[7,[2412,102,2412,124,[0,[[2412,102,2412,115,[2,[],"inferExprType"]],[2412,116,2412,122,[2,[],"local_"]],[2412,123,2412,124,[2,[],"e"]]]]]]],[2412,126,2412,127,[2,[],"p"]]]]]]]]]]]]]]]]],[2414,12,2414,59,[0,[[2414,12,2414,22,[2,["Tuple"],"pair"]],[2414,23,2414,59,[7,[2414,24,2414,58,[0,[[2414,24,2414,50,[2,[],"bindingsFromLetDeclaration"]],[2414,51,2414,56,[2,[],"local"]],[2414,57,2414,58,[2,[],"d"]]]]]]]]]]]]]]]]],[2417,1,2440,61,[0,[[1,[2417,1,2418,3,"{-| Get (a best guess) at the bindings from a let declaration.\n-}"]],[1,[2419,1,2419,85,[[2419,1,2419,27,"bindingsFromLetDeclaration"],[2419,30,2419,85,[6,[2419,30,2419,42,[1,[2419,30,2419,42,[[],"LocalContext"]],[]]],[2419,46,2419,85,[6,[2419,46,2419,60,[1,[2419,46,2419,60,[[],"LetDeclaration"]],[]]],[2419,64,2419,85,[1,[2419,64,2419,68,[[],"List"]],[[2419,69,2419,85,[3,[[2419,71,2419,77,[1,[2419,71,2419,77,[[],"String"]],[]]],[2419,79,2419,83,[1,[2419,79,2419,83,[[],"Type"]],[]]]]]]]]]]]]]]]],[2420,1,2440,61,[[2420,1,2420,27,"bindingsFromLetDeclaration"],[[2420,28,2420,33,[11,"local"]],[2420,34,2420,35,[11,"d"]]],[2421,5,2440,61,[17,[[2421,10,2421,11,[2,[],"d"]],[[[2422,9,2422,22,[12,[[],"LetFunction"],[[2422,21,2422,22,[11,"f"]]]]],[2423,13,2435,40,[1,"|>",0,[2423,13,2434,44,[1,"|>",0,[2423,13,2433,22,[1,"|>",0,[2423,13,2424,55,[1,"|>",0,[2423,13,2423,47,[0,[[2423,13,2423,31,[2,[],"getFunctionBinding"]],[2423,32,2423,45,[19,[2423,32,2423,37,[2,[],"local"]],[2423,38,2423,45,"context"]]],[2423,46,2423,47,[2,[],"f"]]]]],[2424,20,2424,55,[0,[[2424,20,2424,29,[2,["Maybe"],"map"]],[2424,30,2424,55,[7,[2424,31,2424,54,[0,[[2424,31,2424,46,[2,["Tuple"],"mapSecond"]],[2424,47,2424,54,[2,[],"getType"]]]]]]]]]]]],[2425,20,2433,22,[0,[[2425,20,2425,37,[2,["MaybeX"],"orElseLazy"]],[2426,21,2433,22,[7,[2426,22,2432,33,[18,[[[2426,23,2426,25,[1]]],[2427,25,2432,33,[1,"|>",0,[2427,25,2427,49,[0,[[2427,25,2427,35,[2,["Node"],"value"]],[2427,36,2427,49,[19,[2427,36,2427,37,[2,[],"f"]],[2427,38,2427,49,"declaration"]]]]]],[2428,32,2432,33,[7,[2428,33,2431,84,[18,[[[2428,34,2428,54,[8,[[2428,36,2428,40,"name"],[2428,42,2428,52,"expression"]]]]],[2429,37,2431,84,[1,"|>",0,[2429,37,2430,61,[1,"|>",0,[2429,37,2429,67,[0,[[2429,37,2429,50,[2,[],"inferExprType"]],[2429,51,2429,56,[2,[],"local"]],[2429,57,2429,67,[2,[],"expression"]]]]],[2430,44,2430,61,[0,[[2430,44,2430,53,[2,["Maybe"],"map"]],[2430,54,2430,61,[2,[],"getType"]]]]]]],[2431,44,2431,84,[0,[[2431,44,2431,53,[2,["Maybe"],"map"]],[2431,54,2431,84,[7,[2431,55,2431,83,[0,[[2431,55,2431,65,[2,["Tuple"],"pair"]],[2431,66,2431,83,[7,[2431,67,2431,82,[0,[[2431,67,2431,77,[2,["Node"],"value"]],[2431,78,2431,82,[2,[],"name"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2434,20,2434,44,[0,[[2434,20,2434,29,[2,["Maybe"],"map"]],[2434,30,2434,44,[2,["List"],"singleton"]]]]]]],[2435,20,2435,40,[0,[[2435,20,2435,37,[2,["Maybe"],"withDefault"]],[2435,38,2435,40,[9,[]]]]]]]]],[[2437,9,2437,29,[12,[[],"LetDestructuring"],[[2437,26,2437,27,[11,"p"]],[2437,28,2437,29,[11,"e"]]]]],[2439,13,2440,61,[1,"|>",0,[2439,13,2439,34,[0,[[2439,13,2439,26,[2,[],"inferExprType"]],[2439,27,2439,32,[2,[],"local"]],[2439,33,2439,34,[2,[],"e"]]]]],[2440,20,2440,61,[0,[[2440,20,2440,45,[2,[],"bindingsInPatternWithType"]],[2440,46,2440,59,[19,[2440,46,2440,51,[2,[],"local"]],[2440,52,2440,59,"context"]]],[2440,60,2440,61,[2,[],"p"]]]]]]]]]]]]]]]]],[2443,1,2456,76,[0,[[1,[2443,1,2444,3,"{-| Handle the few common operators we expect to see records passed through.\n-}"]],[1,[2445,1,2445,110,[[2445,1,2445,25,"checkOperatorApplication"],[2445,28,2445,110,[6,[2445,28,2445,57,[6,[2445,29,2445,51,[1,[2445,29,2445,33,[[],"List"]],[[2445,34,2445,51,[1,[2445,35,2445,39,[[],"Node"]],[[2445,40,2445,50,[1,[2445,40,2445,50,[[],"Expression"]],[]]]]]]]]],[2445,55,2445,56,[0,"a"]]]],[2445,61,2445,110,[6,[2445,61,2445,67,[1,[2445,61,2445,67,[[],"String"]],[]]],[2445,71,2445,110,[6,[2445,71,2445,86,[1,[2445,71,2445,75,[[],"Node"]],[[2445,76,2445,86,[1,[2445,76,2445,86,[[],"Expression"]],[]]]]]],[2445,90,2445,110,[6,[2445,90,2445,105,[1,[2445,90,2445,94,[[],"Node"]],[[2445,95,2445,105,[1,[2445,95,2445,105,[[],"Expression"]],[]]]]]],[2445,109,2445,110,[0,"a"]]]]]]]]]]]]],[2446,1,2456,76,[[2446,1,2446,25,"checkOperatorApplication"],[[2446,26,2446,34,[11,"checkApp"]],[2446,35,2446,37,[11,"op"]],[2446,38,2446,40,[11,"e1"]],[2446,41,2446,43,[11,"e2"]]],[2447,5,2456,76,[17,[[2447,10,2447,12,[2,[],"op"]],[[[2448,9,2448,13,[3,"|>"]],[2449,13,2449,32,[0,[[2449,13,2449,21,[2,[],"checkApp"]],[2449,22,2449,32,[9,[[2449,24,2449,26,[2,[],"e2"]],[2449,28,2449,30,[2,[],"e1"]]]]]]]]],[[2451,9,2451,13,[3,"<|"]],[2452,13,2452,32,[0,[[2452,13,2452,21,[2,[],"checkApp"]],[2452,22,2452,32,[9,[[2452,24,2452,26,[2,[],"e1"]],[2452,28,2452,30,[2,[],"e2"]]]]]]]]],[[2454,9,2454,10,[0]],[2456,13,2456,76,[0,[[2456,13,2456,21,[2,[],"checkApp"]],[2456,22,2456,76,[9,[[2456,24,2456,66,[1,"<|",1,[2456,24,2456,45,[0,[[2456,24,2456,28,[2,[],"Node"]],[2456,29,2456,45,[2,["Range"],"emptyRange"]]]]],[2456,49,2456,66,[0,[[2456,49,2456,63,[2,[],"PrefixOperator"]],[2456,64,2456,66,[2,[],"op"]]]]]]],[2456,68,2456,70,[2,[],"e1"]],[2456,72,2456,74,[2,[],"e2"]]]]]]]]]]]]]]]]]],[2459,1,2548,58,[0,[[1,[2459,1,2461,3,"{-| Check a chain of expressions being applied to the first one, as we can glean\nadditional info from any stored function types we have.\n-}"]],[1,[2462,1,2462,122,[[2462,1,2462,22,"checkApplicationChain"],[2462,25,2462,122,[6,[2462,25,2462,35,[1,[2462,25,2462,35,[[],"RuleConfig"]],[]]],[2462,39,2462,122,[6,[2462,39,2462,51,[1,[2462,39,2462,51,[[],"LocalContext"]],[]]],[2462,55,2462,122,[6,[2462,55,2462,77,[1,[2462,55,2462,60,[[],"Maybe"]],[[2462,61,2462,77,[1,[2462,61,2462,77,[[],"DereferencedType"]],[]]]]]],[2462,81,2462,122,[6,[2462,81,2462,103,[1,[2462,81,2462,85,[[],"List"]],[[2462,86,2462,103,[1,[2462,87,2462,91,[[],"Node"]],[[2462,92,2462,102,[1,[2462,92,2462,102,[[],"Expression"]],[]]]]]]]]],[2462,107,2462,122,[1,[2462,107,2462,111,[[],"List"]],[[2462,112,2462,122,[1,[2462,113,2462,118,[[],"Error"]],[[2462,119,2462,121,[4,[]]]]]]]]]]]]]]]]]]]],[2463,1,2548,58,[[2463,1,2463,22,"checkApplicationChain"],[[2463,23,2463,29,[11,"config"]],[2463,30,2463,35,[11,"local"]],[2463,36,2463,43,[11,"hasType"]],[2463,44,2463,46,[11,"es"]]],[2464,5,2548,58,[16,[[[2465,9,2467,41,[0,[[0],[1,[2465,9,2465,81,[[2465,9,2465,18,"checkExpr"],[2465,21,2465,81,[6,[2465,21,2465,43,[1,[2465,21,2465,26,[[],"Maybe"]],[[2465,27,2465,43,[1,[2465,27,2465,43,[[],"DereferencedType"]],[]]]]]],[2465,47,2465,81,[6,[2465,47,2465,62,[1,[2465,47,2465,51,[[],"Node"]],[[2465,52,2465,62,[1,[2465,52,2465,62,[[],"Expression"]],[]]]]]],[2465,66,2465,81,[1,[2465,66,2465,70,[[],"List"]],[[2465,71,2465,81,[1,[2465,72,2465,77,[[],"Error"]],[[2465,78,2465,80,[4,[]]]]]]]]]]]]]]]],[2466,9,2467,41,[[2466,9,2466,18,"checkExpr"],[],[2467,13,2467,41,[0,[[2467,13,2467,28,[2,[],"checkExpression"]],[2467,29,2467,35,[2,[],"config"]],[2467,36,2467,41,[2,[],"local"]]]]]]]]]]],[2469,5,2548,58,[17,[[2469,10,2469,12,[2,[],"es"]],[[[2470,9,2470,11,[10,[]]],[2471,13,2471,15,[9,[]]]],[[2473,9,2473,14,[10,[[2473,11,2473,12,[11,"e"]]]]],[2474,13,2474,32,[0,[[2474,13,2474,22,[2,[],"checkExpr"]],[2474,23,2474,30,[2,[],"hasType"]],[2474,31,2474,32,[2,[],"e"]]]]]],[[2476,9,2476,21,[9,[2476,9,2476,13,[11,"func"]],[2476,17,2476,21,[11,"args"]]]],[2477,13,2548,58,[17,[[2477,18,2477,33,[0,[[2477,18,2477,28,[2,["Node"],"value"]],[2477,29,2477,33,[2,[],"func"]]]]],[[[2478,17,2478,39,[12,[[],"FunctionOrValue"],[[2478,33,2478,34,[0]],[2478,35,2478,39,[11,"name"]]]]],[2479,21,2494,97,[1,"|>",0,[2479,21,2492,49,[1,"|>",0,[2479,21,2491,85,[1,"|>",0,[2479,21,2490,30,[1,"|>",0,[2479,21,2480,75,[1,"|>",0,[2479,21,2479,61,[0,[[2479,21,2479,37,[2,[],"findFunctionType"]],[2479,38,2479,43,[2,[],"local"]],[2479,44,2479,51,[2,[],"hasType"]],[2479,52,2479,56,[2,[],"func"]],[2479,57,2479,61,[2,[],"name"]]]]],[2480,28,2480,75,[0,[[2480,28,2480,41,[2,["Maybe"],"andThen"]],[2480,42,2480,75,[7,[2480,43,2480,74,[0,[[2480,43,2480,69,[2,[],"partiallyApplyArgsAndTypes"]],[2480,70,2480,74,[2,[],"args"]]]]]]]]]]]],[2481,28,2490,30,[0,[[2481,28,2481,37,[2,["Maybe"],"map"]],[2482,29,2490,30,[7,[2482,30,2489,66,[18,[[[2482,31,2482,51,[7,[[2482,33,2482,41,[11,"argTypes"]],[2482,43,2482,49,[11,"return"]]]]]],[2484,33,2489,66,[1,"|>",0,[2484,33,2488,108,[1,"|>",0,[2484,33,2487,78,[1,"|>",0,[2484,33,2486,87,[1,"|>",0,[2484,33,2485,61,[1,"|>",0,[2484,33,2484,81,[0,[[2484,33,2484,42,[2,["Maybe"],"map"]],[2484,43,2484,73,[7,[2484,44,2484,72,[0,[[2484,44,2484,54,[2,[],"typesMatch"]],[2484,55,2484,65,[2,["Dict"],"empty"]],[2484,66,2484,72,[2,[],"return"]]]]]]],[2484,74,2484,81,[2,[],"hasType"]]]]],[2485,40,2485,61,[0,[[2485,40,2485,49,[2,["Maybe"],"map"]],[2485,50,2485,61,[2,["Tuple"],"first"]]]]]]],[2486,40,2486,87,[0,[[2486,40,2486,49,[2,["Maybe"],"map"]],[2486,50,2486,87,[7,[2486,51,2486,86,[0,[[2486,51,2486,62,[2,["Dict"],"filter"]],[2486,63,2486,86,[7,[2486,64,2486,85,[18,[[[2486,65,2486,73,[7,[[2486,67,2486,68,[11,"i"]],[2486,70,2486,71,[0]]]]],[2486,74,2486,75,[0]]],[2486,79,2486,85,[1,"==",2,[2486,79,2486,80,[2,[],"i"]],[2486,84,2486,85,[3,1]]]]]]]]]]]]]]]]]]],[2487,40,2487,78,[0,[[2487,40,2487,49,[2,["Maybe"],"map"]],[2487,50,2487,78,[7,[2487,51,2487,77,[0,[[2487,51,2487,64,[2,["DictX"],"mapKeys"]],[2487,65,2487,77,[2,["Tuple"],"second"]]]]]]]]]]]],[2488,40,2488,108,[0,[[2488,40,2488,49,[2,["Maybe"],"map"]],[2488,50,2488,108,[7,[2488,51,2488,107,[18,[[[2488,52,2488,60,[11,"typeVars"]]],[2488,64,2488,107,[0,[[2488,64,2488,72,[2,["List"],"map"]],[2488,73,2488,98,[7,[2488,74,2488,97,[0,[[2488,74,2488,88,[2,[],"assignTypeVars"]],[2488,89,2488,97,[2,[],"typeVars"]]]]]]],[2488,99,2488,107,[2,[],"argTypes"]]]]]]]]]]]]]]],[2489,40,2489,66,[0,[[2489,40,2489,57,[2,["Maybe"],"withDefault"]],[2489,58,2489,66,[2,[],"argTypes"]]]]]]]]]]]]]]]]],[2491,28,2491,85,[0,[[2491,28,2491,37,[2,["Maybe"],"map"]],[2491,38,2491,85,[7,[2491,39,2491,84,[0,[[2491,39,2491,48,[2,["List"],"map2"]],[2491,49,2491,79,[7,[2491,50,2491,78,[18,[[[2491,51,2491,52,[11,"e"]],[2491,53,2491,54,[11,"t"]]],[2491,58,2491,78,[0,[[2491,58,2491,67,[2,[],"checkExpr"]],[2491,68,2491,76,[7,[2491,69,2491,75,[0,[[2491,69,2491,73,[2,[],"Just"]],[2491,74,2491,75,[2,[],"t"]]]]]]],[2491,77,2491,78,[2,[],"e"]]]]]]]]]],[2491,80,2491,84,[2,[],"args"]]]]]]]]]]]],[2492,28,2492,49,[0,[[2492,28,2492,37,[2,["Maybe"],"map"]],[2492,38,2492,49,[2,["List"],"concat"]]]]]]],[2494,28,2494,97,[0,[[2494,28,2494,50,[2,["MaybeX"],"withDefaultLazy"]],[2494,51,2494,97,[7,[2494,52,2494,96,[18,[[[2494,53,2494,55,[1]]],[2494,59,2494,96,[0,[[2494,59,2494,73,[2,["List"],"concatMap"]],[2494,74,2494,93,[7,[2494,75,2494,92,[0,[[2494,75,2494,84,[2,[],"checkExpr"]],[2494,85,2494,92,[2,[],"Nothing"]]]]]]],[2494,94,2494,96,[2,[],"es"]]]]]]]]]]]]]]]],[[2496,17,2496,34,[12,[[],"PrefixOperator"],[[2496,32,2496,34,[11,"op"]]]]],[2497,21,2512,97,[1,"|>",0,[2497,21,2510,49,[1,"|>",0,[2497,21,2509,85,[1,"|>",0,[2497,21,2508,30,[1,"|>",0,[2497,21,2498,75,[1,"|>",0,[2497,21,2497,54,[0,[[2497,21,2497,37,[2,[],"findOperatorType"]],[2497,38,2497,51,[19,[2497,38,2497,43,[2,[],"local"]],[2497,44,2497,51,"context"]]],[2497,52,2497,54,[2,[],"op"]]]]],[2498,28,2498,75,[0,[[2498,28,2498,41,[2,["Maybe"],"andThen"]],[2498,42,2498,75,[7,[2498,43,2498,74,[0,[[2498,43,2498,69,[2,[],"partiallyApplyArgsAndTypes"]],[2498,70,2498,74,[2,[],"args"]]]]]]]]]]]],[2499,28,2508,30,[0,[[2499,28,2499,37,[2,["Maybe"],"map"]],[2500,29,2508,30,[7,[2500,30,2507,66,[18,[[[2500,31,2500,51,[7,[[2500,33,2500,41,[11,"argTypes"]],[2500,43,2500,49,[11,"return"]]]]]],[2502,33,2507,66,[1,"|>",0,[2502,33,2506,108,[1,"|>",0,[2502,33,2505,78,[1,"|>",0,[2502,33,2504,87,[1,"|>",0,[2502,33,2503,61,[1,"|>",0,[2502,33,2502,81,[0,[[2502,33,2502,42,[2,["Maybe"],"map"]],[2502,43,2502,73,[7,[2502,44,2502,72,[0,[[2502,44,2502,54,[2,[],"typesMatch"]],[2502,55,2502,65,[2,["Dict"],"empty"]],[2502,66,2502,72,[2,[],"return"]]]]]]],[2502,74,2502,81,[2,[],"hasType"]]]]],[2503,40,2503,61,[0,[[2503,40,2503,49,[2,["Maybe"],"map"]],[2503,50,2503,61,[2,["Tuple"],"first"]]]]]]],[2504,40,2504,87,[0,[[2504,40,2504,49,[2,["Maybe"],"map"]],[2504,50,2504,87,[7,[2504,51,2504,86,[0,[[2504,51,2504,62,[2,["Dict"],"filter"]],[2504,63,2504,86,[7,[2504,64,2504,85,[18,[[[2504,65,2504,73,[7,[[2504,67,2504,68,[11,"i"]],[2504,70,2504,71,[0]]]]],[2504,74,2504,75,[0]]],[2504,79,2504,85,[1,"==",2,[2504,79,2504,80,[2,[],"i"]],[2504,84,2504,85,[3,1]]]]]]]]]]]]]]]]]]],[2505,40,2505,78,[0,[[2505,40,2505,49,[2,["Maybe"],"map"]],[2505,50,2505,78,[7,[2505,51,2505,77,[0,[[2505,51,2505,64,[2,["DictX"],"mapKeys"]],[2505,65,2505,77,[2,["Tuple"],"second"]]]]]]]]]]]],[2506,40,2506,108,[0,[[2506,40,2506,49,[2,["Maybe"],"map"]],[2506,50,2506,108,[7,[2506,51,2506,107,[18,[[[2506,52,2506,60,[11,"typeVars"]]],[2506,64,2506,107,[0,[[2506,64,2506,72,[2,["List"],"map"]],[2506,73,2506,98,[7,[2506,74,2506,97,[0,[[2506,74,2506,88,[2,[],"assignTypeVars"]],[2506,89,2506,97,[2,[],"typeVars"]]]]]]],[2506,99,2506,107,[2,[],"argTypes"]]]]]]]]]]]]]]],[2507,40,2507,66,[0,[[2507,40,2507,57,[2,["Maybe"],"withDefault"]],[2507,58,2507,66,[2,[],"argTypes"]]]]]]]]]]]]]]]]],[2509,28,2509,85,[0,[[2509,28,2509,37,[2,["Maybe"],"map"]],[2509,38,2509,85,[7,[2509,39,2509,84,[0,[[2509,39,2509,48,[2,["List"],"map2"]],[2509,49,2509,79,[7,[2509,50,2509,78,[18,[[[2509,51,2509,52,[11,"e"]],[2509,53,2509,54,[11,"t"]]],[2509,58,2509,78,[0,[[2509,58,2509,67,[2,[],"checkExpr"]],[2509,68,2509,76,[7,[2509,69,2509,75,[0,[[2509,69,2509,73,[2,[],"Just"]],[2509,74,2509,75,[2,[],"t"]]]]]]],[2509,77,2509,78,[2,[],"e"]]]]]]]]]],[2509,80,2509,84,[2,[],"args"]]]]]]]]]]]],[2510,28,2510,49,[0,[[2510,28,2510,37,[2,["Maybe"],"map"]],[2510,38,2510,49,[2,["List"],"concat"]]]]]]],[2512,28,2512,97,[0,[[2512,28,2512,50,[2,["MaybeX"],"withDefaultLazy"]],[2512,51,2512,97,[7,[2512,52,2512,96,[18,[[[2512,53,2512,55,[1]]],[2512,59,2512,96,[0,[[2512,59,2512,73,[2,["List"],"concatMap"]],[2512,74,2512,93,[7,[2512,75,2512,92,[0,[[2512,75,2512,84,[2,[],"checkExpr"]],[2512,85,2512,92,[2,[],"Nothing"]]]]]]],[2512,94,2512,96,[2,[],"es"]]]]]]]]]]]]]]]],[[2514,17,2514,46,[12,[[],"ParenthesizedExpression"],[[2514,41,2514,46,[11,"func_"]]]]],[2516,21,2516,79,[0,[[2516,21,2516,42,[2,[],"checkApplicationChain"]],[2516,43,2516,49,[2,[],"config"]],[2516,50,2516,55,[2,[],"local"]],[2516,56,2516,63,[2,[],"hasType"]],[2516,64,2516,79,[7,[2516,65,2516,78,[1,"::",1,[2516,65,2516,70,[2,[],"func_"]],[2516,74,2516,78,[2,[],"args"]]]]]]]]]],[[2518,17,2518,48,[12,[[],"RecordAccessFunction"],[[2518,38,2518,48,[11,"accessFunc"]]]]],[2519,21,2521,57,[1,"|>",0,[2519,21,2519,72,[0,[[2519,21,2519,30,[2,[],"checkExpr"]],[2519,31,2519,72,[7,[2519,32,2519,71,[0,[[2519,32,2519,52,[2,[],"makeRecordAccessType"]],[2519,53,2519,60,[2,[],"hasType"]],[2519,61,2519,71,[2,[],"accessFunc"]]]]]]]]]],[2521,28,2521,57,[7,[2521,29,2521,56,[18,[[[2521,30,2521,31,[11,"f"]]],[2521,35,2521,56,[0,[[2521,35,2521,49,[2,["List"],"concatMap"]],[2521,50,2521,51,[2,[],"f"]],[2521,52,2521,56,[2,[],"args"]]]]]]]]]]]]],[[2523,17,2523,18,[0]],[2548,21,2548,58,[0,[[2548,21,2548,35,[2,["List"],"concatMap"]],[2548,36,2548,55,[7,[2548,37,2548,54,[0,[[2548,37,2548,46,[2,[],"checkExpr"]],[2548,47,2548,54,[2,[],"Nothing"]]]]]]],[2548,56,2548,58,[2,[],"es"]]]]]]]]]]]]]]]]]]]]]]],[2551,1,2569,13,[0,[[1,[2551,1,2552,3,"{-| Make a type for a record being accessed\n-}"]],[1,[2553,1,2553,82,[[2553,1,2553,21,"makeRecordAccessType"],[2553,24,2553,82,[6,[2553,24,2553,46,[1,[2553,24,2553,29,[[],"Maybe"]],[[2553,30,2553,46,[1,[2553,30,2553,46,[[],"DereferencedType"]],[]]]]]],[2553,50,2553,82,[6,[2553,50,2553,56,[1,[2553,50,2553,56,[[],"String"]],[]]],[2553,60,2553,82,[1,[2553,60,2553,65,[[],"Maybe"]],[[2553,66,2553,82,[1,[2553,66,2553,82,[[],"DereferencedType"]],[]]]]]]]]]]]]],[2554,1,2569,13,[[2554,1,2554,21,"makeRecordAccessType"],[[2554,22,2554,29,[11,"hasType"]],[2554,30,2554,40,[11,"accessFunc"]]],[2556,5,2569,13,[1,"|>",0,[2556,5,2556,30,[0,[[2556,5,2556,19,[2,[],"makeAccessFunc"]],[2556,20,2556,30,[2,[],"accessFunc"]]]]],[2557,12,2569,13,[7,[2557,13,2568,28,[18,[[[2557,14,2557,15,[11,"f"]]],[2558,17,2568,28,[0,[[2558,17,2558,26,[2,["Maybe"],"map"]],[2559,21,2567,22,[7,[2559,22,2566,34,[18,[[[2559,23,2559,24,[11,"t"]]],[2560,25,2566,34,[1,"<|",1,[2560,25,2560,41,[2,[],"DereferencedType"]],[2561,29,2566,34,[0,[[2561,29,2561,39,[2,[],"RecordType"]],[2563,33,2566,34,[8,[[2563,35,2563,99,[[2563,35,2563,42,"generic"],[2563,45,2563,99,[1,"<|",1,[2563,45,2563,49,[2,[],"Just"]],[2563,53,2563,99,[1,"<|",1,[2563,53,2563,68,[0,[[2563,53,2563,60,[2,[],"TypeVar"]],[2563,61,2563,68,[2,[],"Nothing"]]]]],[2563,72,2563,99,[1,"++",1,[2563,72,2563,94,[5,"record access field "]],[2563,98,2563,99,[2,[],"f"]]]]]]]]]],[2564,35,2565,33,[[2564,35,2564,44,"canonical"],[2564,47,2564,52,[2,[],"False"]]]],[2565,35,2566,33,[[2565,35,2565,41,"fields"],[2565,44,2565,64,[9,[[2565,46,2565,62,[6,[[2565,48,2565,49,[2,[],"f"]],[2565,51,2565,60,[0,[[2565,51,2565,58,[2,[],"getType"]],[2565,59,2565,60,[2,[],"t"]]]]]]]]]]]]]]]]]]]]]]]]]],[2568,21,2568,28,[2,[],"hasType"]]]]]]]]]]]]]]]]],[2572,1,2611,70,[0,[[1,[2572,1,2575,3,"{-| Given context, its return type, its module lookup node, and its name, find\nany type info stored for a function, canonicalizing the result and returning a\nlist of arg types (and finally the return type).\n-}"]],[1,[2576,1,2576,111,[[2576,1,2576,17,"findFunctionType"],[2576,20,2576,111,[6,[2576,20,2576,32,[1,[2576,20,2576,32,[[],"LocalContext"]],[]]],[2576,36,2576,111,[6,[2576,36,2576,58,[1,[2576,36,2576,41,[[],"Maybe"]],[[2576,42,2576,58,[1,[2576,42,2576,58,[[],"DereferencedType"]],[]]]]]],[2576,62,2576,111,[6,[2576,62,2576,68,[1,[2576,62,2576,66,[[],"Node"]],[[2576,67,2576,68,[0,"a"]]]]],[2576,72,2576,111,[6,[2576,72,2576,78,[1,[2576,72,2576,78,[[],"String"]],[]]],[2576,82,2576,111,[1,[2576,82,2576,87,[[],"Maybe"]],[[2576,88,2576,111,[1,[2576,89,2576,93,[[],"List"]],[[2576,94,2576,110,[1,[2576,94,2576,110,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]]]]]],[2577,1,2611,70,[[2577,1,2577,17,"findFunctionType"],[[2577,18,2577,45,[8,[[2577,20,2577,27,"context"],[2577,29,2577,43,"localFunctions"]]]],[2577,46,2577,51,[11,"type_"]],[2577,52,2577,62,[11,"moduleNode"]],[2577,63,2577,67,[11,"name"]]],[2578,5,2611,70,[16,[[[2579,9,2586,23,[0,[[0],[1,[2579,9,2579,58,[[2579,9,2579,20,"getTypeVars"],[2579,23,2579,58,[6,[2579,23,2579,45,[1,[2579,23,2579,28,[[],"Maybe"]],[[2579,29,2579,45,[1,[2579,29,2579,45,[[],"DereferencedType"]],[]]]]]],[2579,49,2579,58,[1,[2579,49,2579,53,[[],"List"]],[[2579,54,2579,58,[1,[2579,54,2579,58,[[],"Type"]],[]]]]]]]]]]],[2580,9,2586,23,[[2580,9,2580,20,"getTypeVars"],[[2580,21,2580,22,[11,"t"]]],[2581,13,2586,23,[17,[[2581,18,2581,37,[0,[[2581,18,2581,27,[2,["Maybe"],"map"]],[2581,28,2581,35,[2,[],"getType"]],[2581,36,2581,37,[2,[],"t"]]]]],[[[2582,17,2582,38,[12,[[],"Just"],[[2582,22,2582,38,[14,[2582,23,2582,37,[12,[[],"NamedType"],[[2582,33,2582,34,[0]],[2582,35,2582,37,[11,"ts"]]]]]]]]]],[2583,21,2583,23,[2,[],"ts"]]],[[2585,17,2585,18,[0]],[2586,21,2586,23,[9,[]]]]]]]]]]]]]],[2588,5,2611,70,[1,"|>",0,[2588,5,2610,14,[1,"|>",0,[2588,5,2596,14,[1,"|>",0,[2588,5,2588,49,[0,[[2588,5,2588,18,[2,[],"moduleNameFor"]],[2588,19,2588,38,[19,[2588,19,2588,26,[2,[],"context"]],[2588,27,2588,38,"lookupTable"]]],[2588,39,2588,49,[2,[],"moduleNode"]]]]],[2589,12,2596,14,[0,[[2589,12,2589,21,[2,["Maybe"],"map"]],[2590,13,2596,14,[7,[2590,14,2595,31,[18,[[[2590,15,2590,25,[11,"moduleName"]]],[2591,17,2595,31,[11,[2591,20,2591,36,[1,"==",2,[2591,20,2591,30,[2,[],"moduleName"]],[2591,34,2591,36,[9,[]]]]],[2592,21,2592,39,[19,[2592,21,2592,28,[2,[],"context"]],[2592,29,2592,39,"moduleName"]]],[2595,21,2595,31,[2,[],"moduleName"]]]]]]]]]]]]]],[2597,12,2610,14,[0,[[2597,12,2597,25,[2,["Maybe"],"andThen"]],[2598,13,2610,14,[7,[2598,14,2609,83,[18,[[[2598,15,2598,25,[11,"moduleName"]]],[2599,17,2609,83,[11,[2599,20,2599,91,[1,"<|",1,[2599,20,2599,69,[0,[[2599,20,2599,33,[2,["MaybeX"],"unwrap"]],[2599,34,2599,39,[2,[],"False"]],[2599,40,2599,69,[7,[2599,41,2599,68,[1,"<<",0,[2599,41,2599,53,[2,["Char"],"isUpper"]],[2599,57,2599,68,[2,["Tuple"],"first"]]]]]]]]],[2599,73,2599,91,[0,[[2599,73,2599,86,[2,["String"],"uncons"]],[2599,87,2599,91,[2,[],"name"]]]]]]],[2601,21,2604,84,[1,"|>",0,[2601,21,2603,44,[1,"|>",0,[2601,21,2602,57,[1,"|>",0,[2601,21,2601,61,[0,[[2601,21,2601,29,[2,["Dict"],"get"]],[2601,30,2601,40,[2,[],"moduleName"]],[2601,41,2601,61,[19,[2601,41,2601,48,[2,[],"context"]],[2601,49,2601,61,"constructors"]]]]]],[2602,28,2602,57,[0,[[2602,28,2602,41,[2,["Maybe"],"andThen"]],[2602,42,2602,57,[7,[2602,43,2602,56,[0,[[2602,43,2602,51,[2,["Dict"],"get"]],[2602,52,2602,56,[2,[],"name"]]]]]]]]]]]],[2603,28,2603,44,[0,[[2603,28,2603,37,[2,["Maybe"],"map"]],[2603,38,2603,44,[20,".type_"]]]]]]],[2604,28,2604,84,[0,[[2604,28,2604,37,[2,["Maybe"],"map"]],[2604,38,2604,84,[7,[2604,39,2604,83,[0,[[2604,39,2604,63,[2,[],"assignPositionalTypeVars"]],[2604,64,2604,83,[7,[2604,65,2604,82,[0,[[2604,65,2604,76,[2,[],"getTypeVars"]],[2604,77,2604,82,[2,[],"type_"]]]]]]]]]]]]]]]]],[2607,21,2609,83,[1,"|>",0,[2607,21,2608,57,[1,"|>",0,[2607,21,2607,62,[0,[[2607,21,2607,29,[2,["Dict"],"get"]],[2607,30,2607,40,[2,[],"moduleName"]],[2607,41,2607,62,[19,[2607,41,2607,48,[2,[],"context"]],[2607,49,2607,62,"functionTypes"]]]]]],[2608,28,2608,57,[0,[[2608,28,2608,41,[2,["Maybe"],"andThen"]],[2608,42,2608,57,[7,[2608,43,2608,56,[0,[[2608,43,2608,51,[2,["Dict"],"get"]],[2608,52,2608,56,[2,[],"name"]]]]]]]]]]]],[2609,28,2609,83,[0,[[2609,28,2609,45,[2,["MaybeX"],"orElseLazy"]],[2609,46,2609,83,[7,[2609,47,2609,82,[18,[[[2609,48,2609,50,[1]]],[2609,54,2609,82,[0,[[2609,54,2609,62,[2,["Dict"],"get"]],[2609,63,2609,67,[2,[],"name"]],[2609,68,2609,82,[2,[],"localFunctions"]]]]]]]]]]]]]]]]]]]]]]]]]]],[2611,12,2611,70,[0,[[2611,12,2611,21,[2,["Maybe"],"map"]],[2611,22,2611,70,[7,[2611,23,2611,69,[1,"<<",0,[2611,23,2611,42,[2,[],"flattenFunctionType"]],[2611,46,2611,69,[0,[[2611,46,2611,61,[2,[],"dereferenceType"]],[2611,62,2611,69,[2,[],"context"]]]]]]]]]]]]]]]]]]]]]],[2614,1,2628,14,[0,[[1,[2614,1,2616,3,"{-| Given context and an operator, find any type info stored for an operator,\ncanonicalizing the result.\n-}"]],[1,[2617,1,2617,76,[[2617,1,2617,17,"findOperatorType"],[2617,20,2617,76,[6,[2617,20,2617,33,[1,[2617,20,2617,33,[[],"ModuleContext"]],[]]],[2617,37,2617,76,[6,[2617,37,2617,43,[1,[2617,37,2617,43,[[],"String"]],[]]],[2617,47,2617,76,[1,[2617,47,2617,52,[[],"Maybe"]],[[2617,53,2617,76,[1,[2617,54,2617,58,[[],"List"]],[[2617,59,2617,75,[1,[2617,59,2617,75,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2618,1,2628,14,[[2618,1,2618,17,"findOperatorType"],[[2618,18,2618,25,[11,"context"]],[2618,26,2618,28,[11,"op"]]],[2619,5,2628,14,[1,"|>",0,[2619,5,2622,21,[1,"|>",0,[2619,5,2620,23,[1,"|>",0,[2619,5,2619,105,[0,[[2619,5,2619,20,[2,["DictX"],"filterMap"]],[2619,21,2619,83,[7,[2619,22,2619,82,[18,[[[2619,23,2619,24,[0]],[2619,25,2619,30,[11,"funcs"]]],[2619,34,2619,82,[0,[[2619,34,2619,44,[2,["DictX"],"find"]],[2619,45,2619,76,[7,[2619,46,2619,75,[18,[[[2619,47,2619,55,[11,"funcName"]],[2619,56,2619,57,[0]]],[2619,61,2619,75,[1,"==",2,[2619,61,2619,63,[2,[],"op"]],[2619,67,2619,75,[2,[],"funcName"]]]]]]]]],[2619,77,2619,82,[2,[],"funcs"]]]]]]]]]],[2619,84,2619,105,[19,[2619,84,2619,91,[2,[],"context"]],[2619,92,2619,105,"functionTypes"]]]]]],[2620,12,2620,23,[2,["Dict"],"toList"]]]],[2622,12,2622,21,[2,["List"],"head"]]]],[2623,12,2628,14,[0,[[2623,12,2623,21,[2,["Maybe"],"map"]],[2624,13,2628,14,[7,[2624,14,2627,39,[1,">>",1,[2624,14,2624,26,[2,["Tuple"],"second"]],[2625,20,2627,39,[1,">>",1,[2625,20,2625,32,[2,["Tuple"],"second"]],[2626,20,2627,39,[1,">>",1,[2626,20,2626,43,[0,[[2626,20,2626,35,[2,[],"dereferenceType"]],[2626,36,2626,43,[2,[],"context"]]]]],[2627,20,2627,39,[2,[],"flattenFunctionType"]]]]]]]]]]]]]]]]]]]],[2631,1,2647,37,[0,[[1,[2631,1,2632,3,"{-| Turn a function into a list of argument types and a return type.\n-}"]],[1,[2633,1,2633,64,[[2633,1,2633,20,"flattenFunctionType"],[2633,23,2633,64,[6,[2633,23,2633,39,[1,[2633,23,2633,39,[[],"DereferencedType"]],[]]],[2633,43,2633,64,[1,[2633,43,2633,47,[[],"List"]],[[2633,48,2633,64,[1,[2633,48,2633,64,[[],"DereferencedType"]],[]]]]]]]]]]],[2634,1,2647,37,[[2634,1,2634,20,"flattenFunctionType"],[],[2635,5,2647,37,[16,[[[2636,9,2643,34,[0,[[0],[1,[2636,9,2636,31,[[2636,9,2636,11,"go"],[2636,14,2636,31,[6,[2636,14,2636,18,[1,[2636,14,2636,18,[[],"Type"]],[]]],[2636,22,2636,31,[1,[2636,22,2636,26,[[],"List"]],[[2636,27,2636,31,[1,[2636,27,2636,31,[[],"Type"]],[]]]]]]]]]]],[2637,9,2643,34,[[2637,9,2637,11,"go"],[[2637,12,2637,13,[11,"t"]]],[2638,13,2643,34,[17,[[2638,18,2638,19,[2,[],"t"]],[[[2639,17,2639,42,[12,[[],"FunctionType"],[[2639,30,2639,42,[8,[[2639,32,2639,36,"from"],[2639,38,2639,40,"to"]]]]]]],[2640,21,2640,34,[1,"::",1,[2640,21,2640,25,[2,[],"from"]],[2640,29,2640,34,[0,[[2640,29,2640,31,[2,[],"go"]],[2640,32,2640,34,[2,[],"to"]]]]]]]],[[2642,17,2642,26,[11,"otherType"]],[2643,21,2643,34,[9,[[2643,23,2643,32,[2,[],"otherType"]]]]]]]]]]]]]]]],[2645,5,2647,37,[1,">>",1,[2645,5,2645,12,[2,[],"getType"]],[2646,12,2647,37,[1,">>",1,[2646,12,2646,14,[2,[],"go"]],[2647,12,2647,37,[0,[[2647,12,2647,20,[2,["List"],"map"]],[2647,21,2647,37,[2,[],"DereferencedType"]]]]]]]]]]]]]]]]],[2650,1,2659,20,[0,[[1,[2650,1,2651,3,"{-| Get the type a `List` is full of if possible.\n-}"]],[1,[2652,1,2652,63,[[2652,1,2652,12,"getListType"],[2652,15,2652,63,[6,[2652,15,2652,37,[1,[2652,15,2652,20,[[],"Maybe"]],[[2652,21,2652,37,[1,[2652,21,2652,37,[[],"DereferencedType"]],[]]]]]],[2652,41,2652,63,[1,[2652,41,2652,46,[[],"Maybe"]],[[2652,47,2652,63,[1,[2652,47,2652,63,[[],"DereferencedType"]],[]]]]]]]]]]],[2653,1,2659,20,[[2653,1,2653,12,"getListType"],[[2653,13,2653,22,[11,"assocType"]]],[2654,5,2659,20,[17,[[2654,10,2654,37,[0,[[2654,10,2654,19,[2,["Maybe"],"map"]],[2654,20,2654,27,[2,[],"getType"]],[2654,28,2654,37,[2,[],"assocType"]]]]],[[[2655,9,2655,26,[12,[[],"Just"],[[2655,14,2655,26,[14,[2655,15,2655,25,[12,[[],"ListType"],[[2655,24,2655,25,[11,"t"]]]]]]]]]],[2656,13,2656,39,[1,"<|",1,[2656,13,2656,17,[2,[],"Just"]],[2656,21,2656,39,[0,[[2656,21,2656,37,[2,[],"DereferencedType"]],[2656,38,2656,39,[2,[],"t"]]]]]]]],[[2658,9,2658,10,[0]],[2659,13,2659,20,[2,[],"Nothing"]]]]]]]]]]]],[2662,1,2671,48,[0,[[1,[2662,1,2663,3,"{-| Get all types for a tuple's subexpressions.\n-}"]],[1,[2664,1,2664,82,[[2664,1,2664,14,"getTupleTypes"],[2664,17,2664,82,[6,[2664,17,2664,23,[1,[2664,17,2664,21,[[],"List"]],[[2664,22,2664,23,[0,"a"]]]]],[2664,27,2664,82,[6,[2664,27,2664,49,[1,[2664,27,2664,32,[[],"Maybe"]],[[2664,33,2664,49,[1,[2664,33,2664,49,[[],"DereferencedType"]],[]]]]]],[2664,53,2664,82,[1,[2664,53,2664,57,[[],"List"]],[[2664,58,2664,82,[1,[2664,59,2664,64,[[],"Maybe"]],[[2664,65,2664,81,[1,[2664,65,2664,81,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2665,1,2671,48,[[2665,1,2665,14,"getTupleTypes"],[[2665,15,2665,24,[11,"emptyList"]],[2665,25,2665,34,[11,"assocType"]]],[2666,5,2671,48,[17,[[2666,10,2666,37,[0,[[2666,10,2666,19,[2,["Maybe"],"map"]],[2666,20,2666,27,[2,[],"getType"]],[2666,28,2666,37,[2,[],"assocType"]]]]],[[[2667,9,2667,28,[12,[[],"Just"],[[2667,14,2667,28,[14,[2667,15,2667,27,[12,[[],"TupleType"],[[2667,25,2667,27,[11,"ts"]]]]]]]]]],[2668,13,2668,51,[0,[[2668,13,2668,21,[2,["List"],"map"]],[2668,22,2668,48,[7,[2668,23,2668,47,[1,"<<",0,[2668,23,2668,27,[2,[],"Just"]],[2668,31,2668,47,[2,[],"DereferencedType"]]]]]],[2668,49,2668,51,[2,[],"ts"]]]]]],[[2670,9,2670,10,[0]],[2671,13,2671,48,[0,[[2671,13,2671,21,[2,["List"],"map"]],[2671,22,2671,38,[7,[2671,23,2671,37,[0,[[2671,23,2671,29,[2,[],"always"]],[2671,30,2671,37,[2,[],"Nothing"]]]]]]],[2671,39,2671,48,[2,[],"emptyList"]]]]]]]]]]]]]]],[2674,1,2683,23,[0,[[1,[2674,1,2675,3,"{-| Get all types for a record's fields.\n-}"]],[1,[2676,1,2676,77,[[2676,1,2676,20,"getRecordFieldTypes"],[2676,23,2676,77,[6,[2676,23,2676,45,[1,[2676,23,2676,28,[[],"Maybe"]],[[2676,29,2676,45,[1,[2676,29,2676,45,[[],"DereferencedType"]],[]]]]]],[2676,49,2676,77,[1,[2676,49,2676,53,[[],"Dict"]],[[2676,54,2676,60,[1,[2676,54,2676,60,[[],"String"]],[]]],[2676,61,2676,77,[1,[2676,61,2676,77,[[],"DereferencedType"]],[]]]]]]]]]]],[2677,1,2683,23,[[2677,1,2677,20,"getRecordFieldTypes"],[[2677,21,2677,26,[11,"type_"]]],[2678,5,2683,23,[17,[[2678,10,2678,33,[0,[[2678,10,2678,19,[2,["Maybe"],"map"]],[2678,20,2678,27,[2,[],"getType"]],[2678,28,2678,33,[2,[],"type_"]]]]],[[[2679,9,2679,37,[12,[[],"Just"],[[2679,14,2679,37,[14,[2679,15,2679,36,[12,[[],"RecordType"],[[2679,26,2679,36,[8,[[2679,28,2679,34,"fields"]]]]]]]]]]]],[2680,13,2680,80,[1,"<|",1,[2680,13,2680,26,[2,["Dict"],"fromList"]],[2680,30,2680,80,[0,[[2680,30,2680,38,[2,["List"],"map"]],[2680,39,2680,73,[7,[2680,40,2680,72,[0,[[2680,40,2680,55,[2,["Tuple"],"mapSecond"]],[2680,56,2680,72,[2,[],"DereferencedType"]]]]]]],[2680,74,2680,80,[2,[],"fields"]]]]]]]],[[2682,9,2682,10,[0]],[2683,13,2683,23,[2,["Dict"],"empty"]]]]]]]]]]]],[2686,1,2752,15,[0,[[1,[2686,1,2687,3,"{-| Descend into pattern, keeping as much type information as possible.\n-}"]],[1,[2688,1,2688,104,[[2688,1,2688,13,"checkPattern"],[2688,16,2688,104,[6,[2688,16,2688,26,[1,[2688,16,2688,26,[[],"RuleConfig"]],[]]],[2688,30,2688,104,[6,[2688,30,2688,43,[1,[2688,30,2688,43,[[],"ModuleContext"]],[]]],[2688,47,2688,104,[6,[2688,47,2688,69,[1,[2688,47,2688,52,[[],"Maybe"]],[[2688,53,2688,69,[1,[2688,53,2688,69,[[],"DereferencedType"]],[]]]]]],[2688,73,2688,104,[6,[2688,73,2688,85,[1,[2688,73,2688,77,[[],"Node"]],[[2688,78,2688,85,[1,[2688,78,2688,85,[[],"Pattern"]],[]]]]]],[2688,89,2688,104,[1,[2688,89,2688,93,[[],"List"]],[[2688,94,2688,104,[1,[2688,95,2688,100,[[],"Error"]],[[2688,101,2688,103,[4,[]]]]]]]]]]]]]]]]]]]],[2689,1,2752,15,[[2689,1,2689,13,"checkPattern"],[[2689,14,2689,20,[11,"config"]],[2689,21,2689,28,[11,"context"]],[2689,29,2689,36,[11,"hasType"]],[2689,37,2689,41,[11,"node"]]],[2690,5,2752,15,[16,[[[2691,9,2693,40,[0,[[0],[1,[2691,9,2691,71,[[2691,9,2691,11,"go"],[2691,14,2691,71,[6,[2691,14,2691,36,[1,[2691,14,2691,19,[[],"Maybe"]],[[2691,20,2691,36,[1,[2691,20,2691,36,[[],"DereferencedType"]],[]]]]]],[2691,40,2691,71,[6,[2691,40,2691,52,[1,[2691,40,2691,44,[[],"Node"]],[[2691,45,2691,52,[1,[2691,45,2691,52,[[],"Pattern"]],[]]]]]],[2691,56,2691,71,[1,[2691,56,2691,60,[[],"List"]],[[2691,61,2691,71,[1,[2691,62,2691,67,[[],"Error"]],[[2691,68,2691,70,[4,[]]]]]]]]]]]]]]]],[2692,9,2693,40,[[2692,9,2692,11,"go"],[],[2693,13,2693,40,[0,[[2693,13,2693,25,[2,[],"checkPattern"]],[2693,26,2693,32,[2,[],"config"]],[2693,33,2693,40,[2,[],"context"]]]]]]]]]]],[2695,5,2752,15,[17,[[2695,10,2695,25,[0,[[2695,10,2695,20,[2,["Node"],"value"]],[2695,21,2695,25,[2,[],"node"]]]]],[[[2696,9,2696,24,[12,[[],"TuplePattern"],[[2696,22,2696,24,[11,"ps"]]]]],[2698,13,2699,31,[1,"|>",0,[2698,13,2698,55,[0,[[2698,13,2698,22,[2,["List"],"map2"]],[2698,23,2698,25,[2,[],"go"]],[2698,26,2698,52,[7,[2698,27,2698,51,[0,[[2698,27,2698,40,[2,[],"getTupleTypes"]],[2698,41,2698,43,[2,[],"ps"]],[2698,44,2698,51,[2,[],"hasType"]]]]]]],[2698,53,2698,55,[2,[],"ps"]]]]],[2699,20,2699,31,[2,["List"],"concat"]]]]],[[2701,9,2701,27,[12,[[],"UnConsPattern"],[[2701,23,2701,24,[11,"p"]],[2701,25,2701,27,[11,"ps"]]]]],[2702,13,2708,38,[16,[[[2704,17,2706,40,[0,[[0],[1,[2704,17,2704,47,[[2704,17,2704,22,"type_"],[2704,25,2704,47,[1,[2704,25,2704,30,[[],"Maybe"]],[[2704,31,2704,47,[1,[2704,31,2704,47,[[],"DereferencedType"]],[]]]]]]]]],[2705,17,2706,40,[[2705,17,2705,22,"type_"],[],[2706,21,2706,40,[0,[[2706,21,2706,32,[2,[],"getListType"]],[2706,33,2706,40,[2,[],"hasType"]]]]]]]]]]],[2708,13,2708,38,[1,"++",1,[2708,13,2708,23,[0,[[2708,13,2708,15,[2,[],"go"]],[2708,16,2708,21,[2,[],"type_"]],[2708,22,2708,23,[2,[],"p"]]]]],[2708,27,2708,38,[0,[[2708,27,2708,29,[2,[],"go"]],[2708,30,2708,35,[2,[],"type_"]],[2708,36,2708,38,[2,[],"ps"]]]]]]]]]]],[[2710,9,2710,23,[12,[[],"ListPattern"],[[2710,21,2710,23,[11,"ps"]]]]],[2711,13,2717,41,[16,[[[2713,17,2715,40,[0,[[0],[1,[2713,17,2713,47,[[2713,17,2713,22,"type_"],[2713,25,2713,47,[1,[2713,25,2713,30,[[],"Maybe"]],[[2713,31,2713,47,[1,[2713,31,2713,47,[[],"DereferencedType"]],[]]]]]]]]],[2714,17,2715,40,[[2714,17,2714,22,"type_"],[],[2715,21,2715,40,[0,[[2715,21,2715,32,[2,[],"getListType"]],[2715,33,2715,40,[2,[],"hasType"]]]]]]]]]]],[2717,13,2717,41,[0,[[2717,13,2717,27,[2,["List"],"concatMap"]],[2717,28,2717,38,[7,[2717,29,2717,37,[0,[[2717,29,2717,31,[2,[],"go"]],[2717,32,2717,37,[2,[],"type_"]]]]]]],[2717,39,2717,41,[2,[],"ps"]]]]]]]]],[[2719,9,2719,22,[12,[[],"AsPattern"],[[2719,19,2719,20,[11,"p"]],[2719,21,2719,22,[0]]]]],[2721,13,2721,25,[0,[[2721,13,2721,15,[2,[],"go"]],[2721,16,2721,23,[2,[],"hasType"]],[2721,24,2721,25,[2,[],"p"]]]]]],[[2723,9,2723,31,[12,[[],"ParenthesizedPattern"],[[2723,30,2723,31,[11,"p"]]]]],[2725,13,2725,25,[0,[[2725,13,2725,15,[2,[],"go"]],[2725,16,2725,23,[2,[],"hasType"]],[2725,24,2725,25,[2,[],"p"]]]]]],[[2727,9,2727,35,[12,[[],"NamedPattern"],[[2727,22,2727,30,[8,[[2727,24,2727,28,"name"]]]],[2727,31,2727,35,[11,"pats"]]]]],[2731,13,2734,84,[1,"|>",0,[2731,13,2733,41,[1,"|>",0,[2731,13,2732,70,[1,"|>",0,[2731,13,2731,98,[0,[[2731,13,2731,29,[2,[],"findFunctionType"]],[2731,30,2731,80,[8,[[2731,32,2731,49,[[2731,32,2731,39,"context"],[2731,42,2731,49,[2,[],"context"]]]],[2731,51,2731,79,[[2731,51,2731,65,"localFunctions"],[2731,68,2731,78,[2,["Dict"],"empty"]]]]]]],[2731,81,2731,88,[2,[],"hasType"]],[2731,89,2731,93,[2,[],"node"]],[2731,94,2731,98,[2,[],"name"]]]]],[2732,20,2732,70,[0,[[2732,20,2732,29,[2,["Maybe"],"map"]],[2732,30,2732,70,[7,[2732,31,2732,69,[0,[[2732,31,2732,40,[2,["List"],"map2"]],[2732,41,2732,64,[7,[2732,42,2732,63,[18,[[[2732,43,2732,44,[11,"p"]],[2732,45,2732,46,[11,"t"]]],[2732,50,2732,63,[0,[[2732,50,2732,52,[2,[],"go"]],[2732,53,2732,61,[7,[2732,54,2732,60,[0,[[2732,54,2732,58,[2,[],"Just"]],[2732,59,2732,60,[2,[],"t"]]]]]]],[2732,62,2732,63,[2,[],"p"]]]]]]]]]],[2732,65,2732,69,[2,[],"pats"]]]]]]]]]]]],[2733,20,2733,41,[0,[[2733,20,2733,29,[2,["Maybe"],"map"]],[2733,30,2733,41,[2,["List"],"concat"]]]]]]],[2734,20,2734,84,[0,[[2734,20,2734,42,[2,["MaybeX"],"withDefaultLazy"]],[2734,43,2734,84,[7,[2734,44,2734,83,[18,[[[2734,45,2734,47,[1]]],[2734,51,2734,83,[0,[[2734,51,2734,65,[2,["List"],"concatMap"]],[2734,66,2734,78,[7,[2734,67,2734,77,[0,[[2734,67,2734,69,[2,[],"go"]],[2734,70,2734,77,[2,[],"Nothing"]]]]]]],[2734,79,2734,83,[2,[],"pats"]]]]]]]]]]]]]]]],[[2736,9,2736,29,[12,[[],"RecordPattern"],[[2736,23,2736,29,[11,"fields"]]]]],[2737,13,2740,31,[1,"|>",0,[2737,13,2738,46,[1,"|>",0,[2737,13,2737,70,[0,[[2737,13,2737,37,[2,[],"recordPatternToCheckable"]],[2737,38,2737,55,[7,[2737,39,2737,54,[0,[[2737,39,2737,49,[2,["Node"],"range"]],[2737,50,2737,54,[2,[],"node"]]]]]]],[2737,56,2737,63,[2,[],"hasType"]],[2737,64,2737,70,[2,[],"fields"]]]]],[2738,20,2738,46,[0,[[2738,20,2738,31,[2,[],"checkRecord"]],[2738,32,2738,38,[2,[],"config"]],[2738,39,2738,46,[2,[],"context"]]]]]]],[2740,20,2740,31,[2,["Tuple"],"first"]]]]],[[2742,9,2742,10,[0]],[2752,13,2752,15,[9,[]]]]]]]]]]]]]]]],[2755,1,2793,13,[0,[[1,[2755,1,2757,3,"{-| Given an error range and whether or not a record has all fields of the known\ntype, convert a `RecordDefinition` into a checkable record.\n-}"]],[1,[2758,1,2758,117,[[2758,1,2758,21,"recordDefToCheckable"],[2758,24,2758,117,[6,[2758,24,2758,37,[1,[2758,24,2758,37,[[],"ModuleContext"]],[]]],[2758,41,2758,117,[6,[2758,41,2758,46,[1,[2758,41,2758,46,[[],"Range"]],[]]],[2758,50,2758,117,[6,[2758,50,2758,54,[1,[2758,50,2758,54,[[],"Bool"]],[]]],[2758,58,2758,117,[6,[2758,58,2758,80,[1,[2758,58,2758,63,[[],"Maybe"]],[[2758,64,2758,80,[1,[2758,64,2758,80,[[],"DereferencedType"]],[]]]]]],[2758,84,2758,117,[6,[2758,84,2758,100,[1,[2758,84,2758,100,[[],"RecordDefinition"]],[]]],[2758,104,2758,117,[1,[2758,104,2758,117,[[],"RecordToCheck"]],[]]]]]]]]]]]]]]]],[2759,1,2793,13,[[2759,1,2759,21,"recordDefToCheckable"],[[2759,22,2759,29,[11,"context"]],[2759,30,2759,39,[11,"fullRange"]],[2759,40,2759,52,[11,"hasAllFields"]],[2759,53,2759,70,[11,"hasTypeFromParent"]],[2759,71,2759,77,[11,"fields"]]],[2760,5,2793,13,[16,[[[2761,9,2765,24,[0,[[0],[1,[2761,9,2761,65,[[2761,9,2761,17,"makeType"],[2761,20,2761,65,[6,[2761,20,2761,39,[1,[2761,20,2761,24,[[],"Node"]],[[2761,25,2761,39,[1,[2761,25,2761,39,[[],"TypeAnnotation"]],[]]]]]],[2761,43,2761,65,[1,[2761,43,2761,48,[[],"Maybe"]],[[2761,49,2761,65,[1,[2761,49,2761,65,[[],"DereferencedType"]],[]]]]]]]]]]],[2762,9,2765,24,[[2762,9,2762,17,"makeType"],[],[2763,13,2765,24,[1,">>",1,[2763,13,2763,48,[0,[[2763,13,2763,40,[2,[],"typeAnnotToNoncanonicalType"]],[2763,41,2763,48,[2,[],"context"]]]]],[2764,20,2765,24,[1,">>",1,[2764,20,2764,43,[0,[[2764,20,2764,35,[2,[],"dereferenceType"]],[2764,36,2764,43,[2,[],"context"]]]]],[2765,20,2765,24,[2,[],"Just"]]]]]]]]]]],[2767,9,2777,22,[0,[[0],[1,[2767,9,2767,36,[[2767,9,2767,18,"orderInfo"],[2767,21,2767,36,[1,[2767,21,2767,26,[[],"Maybe"]],[[2767,27,2767,36,[1,[2767,27,2767,36,[[],"OrderInfo"]],[]]]]]]]]],[2768,9,2777,22,[[2768,9,2768,18,"orderInfo"],[],[2769,13,2777,22,[1,"|>",0,[2769,13,2770,43,[1,"|>",0,[2769,13,2769,79,[0,[[2769,13,2769,26,[2,["Maybe"],"andThen"]],[2769,27,2769,61,[7,[2769,28,2769,60,[1,"<<",0,[2769,28,2769,42,[2,["Result"],"toMaybe"]],[2769,46,2769,60,[2,[],"makeFieldOrder"]]]]]],[2769,62,2769,79,[2,[],"hasTypeFromParent"]]]]],[2770,20,2770,43,[0,[[2770,20,2770,29,[2,["Maybe"],"map"]],[2770,30,2770,43,[2,[],"HasFieldOrder"]]]]]]],[2771,20,2777,22,[0,[[2771,20,2771,33,[2,["MaybeX"],"orElse"]],[2772,21,2777,22,[7,[2772,22,2776,32,[11,[2772,25,2772,37,[2,[],"hasAllFields"]],[2773,25,2773,42,[0,[[2773,25,2773,29,[2,[],"Just"]],[2773,30,2773,42,[2,[],"HasAllFields"]]]]],[2776,25,2776,32,[2,[],"Nothing"]]]]]]]]]]]]]]]]],[2779,5,2793,13,[1,"|>",0,[2779,5,2787,15,[0,[[2779,5,2779,13,[2,["List"],"map"]],[2780,9,2786,10,[7,[2780,10,2785,87,[18,[[[2780,11,2780,12,[11,"f"]]],[2781,13,2785,87,[16,[[[2782,17,2783,33,[1,[2782,17,2782,33,[7,[[2782,19,2782,24,[11,"field"]],[2782,26,2782,31,[11,"type_"]]]]],[2783,21,2783,33,[0,[[2783,21,2783,31,[2,["Node"],"value"]],[2783,32,2783,33,[2,[],"f"]]]]]]]],[2785,13,2785,87,[8,[[2785,15,2785,39,[[2785,15,2785,20,"field"],[2785,23,2785,39,[0,[[2785,23,2785,33,[2,["Node"],"value"]],[2785,34,2785,39,[2,[],"field"]]]]]]],[2785,41,2785,63,[[2785,41,2785,46,"type_"],[2785,49,2785,63,[0,[[2785,49,2785,57,[2,[],"makeType"]],[2785,58,2785,63,[2,[],"type_"]]]]]]],[2785,65,2785,86,[[2785,65,2785,70,"range"],[2785,73,2785,85,[0,[[2785,73,2785,83,[2,["Node"],"range"]],[2785,84,2785,85,[2,[],"f"]]]]]]]]]]]]]]]]]],[2787,9,2787,15,[2,[],"fields"]]]]],[2788,12,2793,13,[7,[2788,13,2792,18,[18,[[[2788,14,2788,16,[11,"fs"]]],[2789,17,2792,18,[8,[[2789,19,2789,40,[[2789,19,2789,28,"fullRange"],[2789,31,2789,40,[2,[],"fullRange"]]]],[2790,19,2791,17,[[2790,19,2790,28,"orderInfo"],[2790,31,2790,40,[2,[],"orderInfo"]]]],[2791,19,2792,17,[[2791,19,2791,25,"fields"],[2791,28,2791,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[2796,1,2837,18,[0,[[1,[2796,1,2799,3,"{-| Convert a record type into a field order, assuming no fields are missing\n(since that would be a type error). Returns a list of non-canonical fields\nencountered\n-}"]],[1,[2800,1,2800,79,[[2800,1,2800,15,"makeFieldOrder"],[2800,18,2800,79,[6,[2800,18,2800,34,[1,[2800,18,2800,34,[[],"DereferencedType"]],[]]],[2800,38,2800,79,[1,[2800,38,2800,44,[[],"Result"]],[[2800,45,2800,68,[1,[2800,46,2800,50,[[],"List"]],[[2800,51,2800,67,[3,[[2800,53,2800,59,[1,[2800,53,2800,59,[[],"String"]],[]]],[2800,61,2800,65,[1,[2800,61,2800,65,[[],"Type"]],[]]]]]]]]],[2800,69,2800,79,[1,[2800,69,2800,79,[[],"FieldOrder"]],[]]]]]]]]]]],[2801,1,2837,18,[[2801,1,2801,15,"makeFieldOrder"],[],[2802,5,2837,18,[16,[[[2803,9,2835,27,[0,[[0],[1,[2803,9,2803,63,[[2803,9,2803,11,"go"],[2803,14,2803,63,[6,[2803,14,2803,18,[1,[2803,14,2803,18,[[],"Type"]],[]]],[2803,22,2803,63,[1,[2803,22,2803,28,[[],"Result"]],[[2803,29,2803,52,[1,[2803,30,2803,34,[[],"List"]],[[2803,35,2803,51,[3,[[2803,37,2803,43,[1,[2803,37,2803,43,[[],"String"]],[]]],[2803,45,2803,49,[1,[2803,45,2803,49,[[],"Type"]],[]]]]]]]]],[2803,53,2803,63,[1,[2803,53,2803,63,[[],"FieldOrder"]],[]]]]]]]]]]],[2804,9,2835,27,[[2804,9,2804,11,"go"],[[2804,12,2804,17,[11,"type_"]]],[2805,13,2835,27,[17,[[2805,18,2805,23,[2,[],"type_"]],[[[2806,17,2806,58,[12,[[],"RecordType"],[[2806,28,2806,58,[8,[[2806,30,2806,37,"generic"],[2806,39,2806,48,"canonical"],[2806,50,2806,56,"fields"]]]]]]],[2807,21,2832,35,[11,[2807,24,2807,33,[2,[],"canonical"]],[2808,25,2829,34,[1,"<|",1,[2808,25,2808,27,[2,[],"Ok"]],[2809,29,2829,34,[0,[[2809,29,2809,39,[2,[],"FieldOrder"]],[2810,33,2829,34,[8,[[2810,35,2812,57,[[2810,35,2810,44,"canonical"],[2811,37,2812,57,[1,"|>",0,[2811,37,2811,92,[0,[[2811,37,2811,52,[2,["List"],"indexedMap"]],[2811,53,2811,85,[7,[2811,54,2811,84,[18,[[[2811,55,2811,56,[11,"i"]],[2811,57,2811,65,[7,[[2811,59,2811,60,[11,"n"]],[2811,62,2811,63,[11,"t"]]]]]],[2811,69,2811,84,[6,[[2811,71,2811,72,[2,[],"n"]],[2811,74,2811,82,[6,[[2811,76,2811,77,[2,[],"i"]],[2811,79,2811,80,[2,[],"t"]]]]]]]]]]]]],[2811,86,2811,92,[2,[],"fields"]]]]],[2812,44,2812,57,[2,["Dict"],"fromList"]]]]]],[2813,35,2829,33,[[2813,35,2813,42,"generic"],[2814,37,2828,48,[0,[[2814,37,2814,46,[2,["Maybe"],"map"]],[2815,41,2827,42,[7,[2815,42,2826,73,[18,[[[2815,43,2815,44,[11,"g"]]],[2816,45,2826,73,[17,[[2816,50,2816,54,[0,[[2816,50,2816,52,[2,[],"go"]],[2816,53,2816,54,[2,[],"g"]]]]],[[[2817,49,2817,53,[12,[[],"Ok"],[[2817,52,2817,53,[11,"o"]]]]],[2818,53,2818,68,[0,[[2818,53,2818,66,[2,[],"OrderedFields"]],[2818,67,2818,68,[2,[],"o"]]]]]],[[2820,49,2820,55,[12,[[],"Err"],[[2820,53,2820,55,[10,[]]]]]],[2822,53,2822,126,[1,"<|",1,[2822,53,2822,66,[2,[],"OrderedFields"]],[2822,70,2822,126,[0,[[2822,70,2822,80,[2,[],"FieldOrder"]],[2822,81,2822,126,[8,[[2822,83,2822,105,[[2822,83,2822,92,"canonical"],[2822,95,2822,105,[2,["Dict"],"empty"]]]],[2822,107,2822,125,[[2822,107,2822,114,"generic"],[2822,117,2822,124,[2,[],"Nothing"]]]]]]]]]]]]],[[2824,49,2824,55,[12,[[],"Err"],[[2824,53,2824,55,[11,"fs"]]]]],[2825,53,2826,73,[1,"|>",0,[2825,53,2825,76,[0,[[2825,53,2825,61,[2,["List"],"map"]],[2825,62,2825,73,[2,["Tuple"],"first"]],[2825,74,2825,76,[2,[],"fs"]]]]],[2826,60,2826,73,[2,[],"UnknownFields"]]]]]]]]]]]]]],[2828,41,2828,48,[2,[],"generic"]]]]]]]]]]]]]]],[2832,25,2832,35,[0,[[2832,25,2832,28,[2,[],"Err"]],[2832,29,2832,35,[2,[],"fields"]]]]]]]],[[2834,17,2834,18,[0]],[2835,21,2835,27,[0,[[2835,21,2835,24,[2,[],"Err"]],[2835,25,2835,27,[9,[]]]]]]]]]]]]]]]]],[2837,5,2837,18,[1,"<<",0,[2837,5,2837,7,[2,[],"go"]],[2837,11,2837,18,[2,[],"getType"]]]]]]]]]]]],[2840,1,2867,13,[0,[[1,[2840,1,2842,3,"{-| Given an error range and maybe a type, convert a record pattern to a\ncheckable record.\n-}"]],[1,[2843,1,2843,98,[[2843,1,2843,25,"recordPatternToCheckable"],[2843,28,2843,98,[6,[2843,28,2843,33,[1,[2843,28,2843,33,[[],"Range"]],[]]],[2843,37,2843,98,[6,[2843,37,2843,59,[1,[2843,37,2843,42,[[],"Maybe"]],[[2843,43,2843,59,[1,[2843,43,2843,59,[[],"DereferencedType"]],[]]]]]],[2843,63,2843,98,[6,[2843,63,2843,81,[1,[2843,63,2843,67,[[],"List"]],[[2843,68,2843,81,[1,[2843,69,2843,73,[[],"Node"]],[[2843,74,2843,80,[1,[2843,74,2843,80,[[],"String"]],[]]]]]]]]],[2843,85,2843,98,[1,[2843,85,2843,98,[[],"RecordToCheck"]],[]]]]]]]]]]]],[2844,1,2867,13,[[2844,1,2844,25,"recordPatternToCheckable"],[[2844,26,2844,35,[11,"fullRange"]],[2844,36,2844,43,[11,"hasType"]]],[2845,5,2867,13,[16,[[[2846,9,2848,40,[0,[[0],[1,[2846,9,2846,45,[[2846,9,2846,14,"types"],[2846,17,2846,45,[1,[2846,17,2846,21,[[],"Dict"]],[[2846,22,2846,28,[1,[2846,22,2846,28,[[],"String"]],[]]],[2846,29,2846,45,[1,[2846,29,2846,45,[[],"DereferencedType"]],[]]]]]]]]],[2847,9,2848,40,[[2847,9,2847,14,"types"],[],[2848,13,2848,40,[0,[[2848,13,2848,32,[2,[],"getRecordFieldTypes"]],[2848,33,2848,40,[2,[],"hasType"]]]]]]]]]],[2850,9,2853,43,[0,[[0],[1,[2850,9,2850,36,[[2850,9,2850,18,"orderInfo"],[2850,21,2850,36,[1,[2850,21,2850,26,[[],"Maybe"]],[[2850,27,2850,36,[1,[2850,27,2850,36,[[],"OrderInfo"]],[]]]]]]]]],[2851,9,2853,43,[[2851,9,2851,18,"orderInfo"],[],[2852,13,2853,43,[1,"|>",0,[2852,13,2852,69,[0,[[2852,13,2852,26,[2,["Maybe"],"andThen"]],[2852,27,2852,61,[7,[2852,28,2852,60,[1,"<<",0,[2852,28,2852,42,[2,["Result"],"toMaybe"]],[2852,46,2852,60,[2,[],"makeFieldOrder"]]]]]],[2852,62,2852,69,[2,[],"hasType"]]]]],[2853,20,2853,43,[0,[[2853,20,2853,29,[2,["Maybe"],"map"]],[2853,30,2853,43,[2,[],"HasFieldOrder"]]]]]]]]]]]]],[2855,5,2867,13,[1,">>",1,[2855,5,2861,10,[0,[[2855,5,2855,13,[2,["List"],"map"]],[2856,9,2861,10,[7,[2856,10,2860,14,[18,[[[2856,11,2856,12,[11,"r"]]],[2857,13,2860,14,[8,[[2857,15,2857,35,[[2857,15,2857,20,"field"],[2857,23,2857,35,[0,[[2857,23,2857,33,[2,["Node"],"value"]],[2857,34,2857,35,[2,[],"r"]]]]]]],[2858,15,2859,13,[[2858,15,2858,20,"type_"],[2858,23,2858,52,[0,[[2858,23,2858,31,[2,["Dict"],"get"]],[2858,32,2858,46,[7,[2858,33,2858,45,[0,[[2858,33,2858,43,[2,["Node"],"value"]],[2858,44,2858,45,[2,[],"r"]]]]]]],[2858,47,2858,52,[2,[],"types"]]]]]]],[2859,15,2860,13,[[2859,15,2859,20,"range"],[2859,23,2859,35,[0,[[2859,23,2859,33,[2,["Node"],"range"]],[2859,34,2859,35,[2,[],"r"]]]]]]]]]]]]]]]]]],[2862,12,2867,13,[7,[2862,13,2866,18,[18,[[[2862,14,2862,16,[11,"fs"]]],[2863,17,2866,18,[8,[[2863,19,2863,40,[[2863,19,2863,28,"fullRange"],[2863,31,2863,40,[2,[],"fullRange"]]]],[2864,19,2865,17,[[2864,19,2864,28,"orderInfo"],[2864,31,2864,40,[2,[],"orderInfo"]]]],[2865,19,2866,17,[[2865,19,2865,25,"fields"],[2865,28,2865,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[2870,1,2913,13,[0,[[1,[2870,1,2872,3,"{-| Given an error range, whether or not a record has all fields of the known\ntype, and maybe a type, convert a list of record setters to a checkable record.\n-}"]],[1,[2873,1,2873,128,[[2873,1,2873,25,"recordSettersToCheckable"],[2873,28,2873,128,[6,[2873,28,2873,40,[1,[2873,28,2873,40,[[],"LocalContext"]],[]]],[2873,44,2873,128,[6,[2873,44,2873,49,[1,[2873,44,2873,49,[[],"Range"]],[]]],[2873,53,2873,128,[6,[2873,53,2873,57,[1,[2873,53,2873,57,[[],"Bool"]],[]]],[2873,61,2873,128,[6,[2873,61,2873,83,[1,[2873,61,2873,66,[[],"Maybe"]],[[2873,67,2873,83,[1,[2873,67,2873,83,[[],"DereferencedType"]],[]]]]]],[2873,87,2873,128,[6,[2873,87,2873,111,[1,[2873,87,2873,91,[[],"List"]],[[2873,92,2873,111,[1,[2873,93,2873,97,[[],"Node"]],[[2873,98,2873,110,[1,[2873,98,2873,110,[[],"RecordSetter"]],[]]]]]]]]],[2873,115,2873,128,[1,[2873,115,2873,128,[[],"RecordToCheck"]],[]]]]]]]]]]]]]]]],[2874,1,2913,13,[[2874,1,2874,25,"recordSettersToCheckable"],[[2874,26,2874,33,[11,"context"]],[2874,34,2874,43,[11,"fullRange"]],[2874,44,2874,56,[11,"hasAllFields"]],[2874,57,2874,64,[11,"hasType"]]],[2875,5,2913,13,[16,[[[2876,9,2882,24,[0,[[0],[1,[2876,9,2876,35,[[2876,9,2876,17,"fallback"],[2876,20,2876,35,[1,[2876,20,2876,25,[[],"Maybe"]],[[2876,26,2876,35,[1,[2876,26,2876,35,[[],"OrderInfo"]],[]]]]]]]]],[2877,9,2882,24,[[2877,9,2877,17,"fallback"],[],[2878,13,2882,24,[11,[2878,16,2878,28,[2,[],"hasAllFields"]],[2879,17,2879,34,[0,[[2879,17,2879,21,[2,[],"Just"]],[2879,22,2879,34,[2,[],"HasAllFields"]]]]],[2882,17,2882,24,[2,[],"Nothing"]]]]]]]]],[2884,9,2886,40,[0,[[0],[1,[2884,9,2884,45,[[2884,9,2884,14,"types"],[2884,17,2884,45,[1,[2884,17,2884,21,[[],"Dict"]],[[2884,22,2884,28,[1,[2884,22,2884,28,[[],"String"]],[]]],[2884,29,2884,45,[1,[2884,29,2884,45,[[],"DereferencedType"]],[]]]]]]]]],[2885,9,2886,40,[[2885,9,2885,14,"types"],[],[2886,13,2886,40,[0,[[2886,13,2886,32,[2,[],"getRecordFieldTypes"]],[2886,33,2886,40,[2,[],"hasType"]]]]]]]]]],[2888,9,2892,42,[0,[[0],[1,[2888,9,2888,36,[[2888,9,2888,18,"orderInfo"],[2888,21,2888,36,[1,[2888,21,2888,26,[[],"Maybe"]],[[2888,27,2888,36,[1,[2888,27,2888,36,[[],"OrderInfo"]],[]]]]]]]]],[2889,9,2892,42,[[2889,9,2889,18,"orderInfo"],[],[2890,13,2892,42,[1,"|>",0,[2890,13,2891,43,[1,"|>",0,[2890,13,2890,69,[0,[[2890,13,2890,26,[2,["Maybe"],"andThen"]],[2890,27,2890,61,[7,[2890,28,2890,60,[1,"<<",0,[2890,28,2890,42,[2,["Result"],"toMaybe"]],[2890,46,2890,60,[2,[],"makeFieldOrder"]]]]]],[2890,62,2890,69,[2,[],"hasType"]]]]],[2891,20,2891,43,[0,[[2891,20,2891,29,[2,["Maybe"],"map"]],[2891,30,2891,43,[2,[],"HasFieldOrder"]]]]]]],[2892,20,2892,42,[0,[[2892,20,2892,33,[2,["MaybeX"],"orElse"]],[2892,34,2892,42,[2,[],"fallback"]]]]]]]]]]]]],[2894,5,2913,13,[1,">>",1,[2894,5,2907,10,[0,[[2894,5,2894,13,[2,["List"],"map"]],[2895,9,2907,10,[7,[2895,10,2906,14,[18,[[[2895,11,2895,12,[11,"r"]]],[2896,13,2906,14,[16,[[[2897,17,2899,62,[0,[[0],[1,[2897,17,2897,27,[[2897,17,2897,18,"f"],[2897,21,2897,27,[1,[2897,21,2897,27,[[],"String"]],[]]]]]],[2898,17,2899,62,[[2898,17,2898,18,"f"],[],[2899,21,2899,62,[1,"<|",1,[2899,21,2899,31,[2,["Node"],"value"]],[2899,35,2899,62,[1,"<|",1,[2899,35,2899,46,[2,["Tuple"],"first"]],[2899,50,2899,62,[0,[[2899,50,2899,60,[2,["Node"],"value"]],[2899,61,2899,62,[2,[],"r"]]]]]]]]]]]]]]],[2901,13,2906,14,[8,[[2901,15,2901,24,[[2901,15,2901,20,"field"],[2901,23,2901,24,[2,[],"f"]]]],[2902,15,2905,13,[[2902,15,2902,20,"type_"],[2903,17,2904,104,[1,"|>",0,[2903,17,2903,33,[0,[[2903,17,2903,25,[2,["Dict"],"get"]],[2903,26,2903,27,[2,[],"f"]],[2903,28,2903,33,[2,[],"types"]]]]],[2904,24,2904,104,[0,[[2904,24,2904,41,[2,["MaybeX"],"orElseLazy"]],[2904,42,2904,104,[7,[2904,43,2904,103,[18,[[[2904,44,2904,46,[1]]],[2904,50,2904,103,[1,"<|",1,[2904,50,2904,71,[0,[[2904,50,2904,63,[2,[],"inferExprType"]],[2904,64,2904,71,[2,[],"context"]]]]],[2904,75,2904,103,[1,"<|",1,[2904,75,2904,87,[2,["Tuple"],"second"]],[2904,91,2904,103,[0,[[2904,91,2904,101,[2,["Node"],"value"]],[2904,102,2904,103,[2,[],"r"]]]]]]]]]]]]]]]]]]]]],[2905,15,2906,13,[[2905,15,2905,20,"range"],[2905,23,2905,35,[0,[[2905,23,2905,33,[2,["Node"],"range"]],[2905,34,2905,35,[2,[],"r"]]]]]]]]]]]]]]]]]]]]],[2908,12,2913,13,[7,[2908,13,2912,18,[18,[[[2908,14,2908,16,[11,"fs"]]],[2909,17,2912,18,[8,[[2909,19,2909,40,[[2909,19,2909,28,"fullRange"],[2909,31,2909,40,[2,[],"fullRange"]]]],[2910,19,2911,17,[[2910,19,2910,28,"orderInfo"],[2910,31,2910,40,[2,[],"orderInfo"]]]],[2911,19,2912,17,[[2911,19,2911,25,"fields"],[2911,28,2911,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[2916,1,2932,19,[0,[[1,[2916,1,2918,3,"{-| Given two dicts of field types, keep only fields that have identical types\nbetween the two.\n-}"]],[1,[2919,1,2919,86,[[2919,1,2919,27,"keepOnlyMatchingFieldTypes"],[2919,30,2919,86,[6,[2919,30,2919,46,[1,[2919,30,2919,34,[[],"Dict"]],[[2919,35,2919,41,[1,[2919,35,2919,41,[[],"String"]],[]]],[2919,42,2919,46,[1,[2919,42,2919,46,[[],"Type"]],[]]]]]],[2919,50,2919,86,[6,[2919,50,2919,66,[1,[2919,50,2919,54,[[],"Dict"]],[[2919,55,2919,61,[1,[2919,55,2919,61,[[],"String"]],[]]],[2919,62,2919,66,[1,[2919,62,2919,66,[[],"Type"]],[]]]]]],[2919,70,2919,86,[1,[2919,70,2919,74,[[],"Dict"]],[[2919,75,2919,81,[1,[2919,75,2919,81,[[],"String"]],[]]],[2919,82,2919,86,[1,[2919,82,2919,86,[[],"Type"]],[]]]]]]]]]]]]],[2920,1,2932,19,[[2920,1,2920,27,"keepOnlyMatchingFieldTypes"],[[2920,28,2920,30,[11,"d1"]],[2920,31,2920,33,[11,"d2"]]],[2921,5,2932,19,[0,[[2921,5,2921,15,[2,["Dict"],"merge"]],[2921,16,2921,33,[7,[2921,17,2921,32,[18,[[[2921,18,2921,19,[0]],[2921,20,2921,21,[0]],[2921,22,2921,25,[11,"acc"]]],[2921,29,2921,32,[2,[],"acc"]]]]]]],[2922,9,2928,10,[7,[2922,10,2927,20,[18,[[[2922,11,2922,16,[11,"field"]],[2922,17,2922,19,[11,"t1"]],[2922,20,2922,22,[11,"t2"]],[2922,23,2922,26,[11,"acc"]]],[2923,13,2927,20,[11,[2923,16,2923,24,[1,"==",2,[2923,16,2923,18,[2,[],"t1"]],[2923,22,2923,24,[2,[],"t2"]]]],[2924,17,2924,41,[0,[[2924,17,2924,28,[2,["Dict"],"insert"]],[2924,29,2924,34,[2,[],"field"]],[2924,35,2924,37,[2,[],"t1"]],[2924,38,2924,41,[2,[],"acc"]]]]],[2927,17,2927,20,[2,[],"acc"]]]]]]]]],[2929,9,2929,26,[7,[2929,10,2929,25,[18,[[[2929,11,2929,12,[0]],[2929,13,2929,14,[0]],[2929,15,2929,18,[11,"acc"]]],[2929,22,2929,25,[2,[],"acc"]]]]]]],[2930,9,2930,11,[2,[],"d1"]],[2931,9,2931,11,[2,[],"d2"]],[2932,9,2932,19,[2,["Dict"],"empty"]]]]]]]]]],[2935,1,3081,50,[0,[[1,[2935,1,2937,3,"{-| Once a record has been reduced to a standard format, check its sorting,\nreturning a list of canonical field types, if any were found.\n-}"]],[1,[2938,1,2938,100,[[2938,1,2938,12,"checkRecord"],[2938,15,2938,100,[6,[2938,15,2938,25,[1,[2938,15,2938,25,[[],"RuleConfig"]],[]]],[2938,29,2938,100,[6,[2938,29,2938,42,[1,[2938,29,2938,42,[[],"ModuleContext"]],[]]],[2938,46,2938,100,[6,[2938,46,2938,59,[1,[2938,46,2938,59,[[],"RecordToCheck"]],[]]],[2938,63,2938,100,[3,[[2938,65,2938,80,[1,[2938,65,2938,69,[[],"List"]],[[2938,70,2938,80,[1,[2938,71,2938,76,[[],"Error"]],[[2938,77,2938,79,[4,[]]]]]]]]],[2938,82,2938,98,[1,[2938,82,2938,86,[[],"Dict"]],[[2938,87,2938,93,[1,[2938,87,2938,93,[[],"String"]],[]]],[2938,94,2938,98,[1,[2938,94,2938,98,[[],"Type"]],[]]]]]]]]]]]]]]]]]],[2939,1,3081,50,[[2939,1,2939,12,"checkRecord"],[[2939,13,2939,82,[14,[2939,14,2939,81,[13,[2939,14,2939,71,[14,[2939,15,2939,70,[12,[[],"RuleConfig"],[[2939,26,2939,70,[8,[[2939,28,2939,39,"sortUnknown"],[2939,41,2939,54,"sortAmbiguous"],[2939,56,2939,68,"sortGenerics"]]]]]]]]],[2939,75,2939,81,"config"]]]]],[2939,83,2939,90,[11,"context"]],[2939,91,2939,135,[14,[2939,92,2939,134,[13,[2939,92,2939,124,[8,[[2939,94,2939,103,"fullRange"],[2939,105,2939,114,"orderInfo"],[2939,116,2939,122,"fields"]]]],[2939,128,2939,134,"record"]]]]]],[2940,5,3081,50,[16,[[[2941,9,2949,63,[0,[[0],[1,[2941,9,2941,27,[[2941,9,2941,19,"errorRange"],[2941,22,2941,27,[1,[2941,22,2941,27,[[],"Range"]],[]]]]]],[2942,9,2949,63,[[2942,9,2942,19,"errorRange"],[],[2943,13,2949,63,[16,[[[2944,17,2946,36,[0,[[0],[1,[2944,17,2944,29,[[2944,17,2944,18,"s"],[2944,21,2944,29,[1,[2944,21,2944,29,[[],"Location"]],[]]]]]],[2945,17,2946,36,[[2945,17,2945,18,"s"],[],[2946,21,2946,36,[19,[2946,21,2946,30,[2,[],"fullRange"]],[2946,31,2946,36,"start"]]]]]]]]],[2949,13,2949,63,[8,[[2949,15,2949,24,[[2949,15,2949,20,"start"],[2949,23,2949,24,[2,[],"s"]]]],[2949,26,2949,62,[[2949,26,2949,29,"end"],[2949,32,2949,61,[21,[2949,34,2949,35,"s"],[[2949,38,2949,60,[[2949,38,2949,44,"column"],[2949,47,2949,59,[1,"+",0,[2949,47,2949,55,[19,[2949,47,2949,48,[2,[],"s"]],[2949,49,2949,55,"column"]]],[2949,58,2949,59,[3,1]]]]]]]]]]]]]]]]]]]]]],[2951,9,3009,21,[0,[[0],[1,[2951,9,2960,14,[[2951,9,2951,23,"matchingOrders"],[2952,13,2960,14,[3,[[2952,15,2958,18,[1,[2952,15,2952,19,[[],"List"]],[[2953,17,2958,18,[4,[[2953,19,2953,57,[[2953,19,2953,38,"canonicalFieldTypes"],[2953,41,2953,57,[1,[2953,41,2953,45,[[],"Dict"]],[[2953,46,2953,52,[1,[2953,46,2953,52,[[],"String"]],[]]],[2953,53,2953,57,[1,[2953,53,2953,57,[[],"Type"]],[]]]]]]]],[2954,19,2955,17,[[2954,19,2954,29,"fieldOrder"],[2954,32,2954,47,[1,[2954,32,2954,36,[[],"Dict"]],[[2954,37,2954,43,[1,[2954,37,2954,43,[[],"String"]],[]]],[2954,44,2954,47,[1,[2954,44,2954,47,[[],"Int"]],[]]]]]]]],[2955,19,2956,17,[[2955,19,2955,35,"hasUnknownFields"],[2955,38,2955,42,[1,[2955,38,2955,42,[[],"Bool"]],[]]]]],[2956,19,2957,17,[[2956,19,2956,30,"isSubrecord"],[2956,33,2956,37,[1,[2956,33,2956,37,[[],"Bool"]],[]]]]],[2957,19,2958,17,[[2957,19,2957,27,"typeName"],[2957,30,2957,57,[1,[2957,30,2957,34,[[],"List"]],[[2957,35,2957,57,[3,[[2957,37,2957,47,[1,[2957,37,2957,47,[[],"ModuleName"]],[]]],[2957,49,2957,55,[1,[2957,49,2957,55,[[],"String"]],[]]]]]]]]]]]]]]]]],[2959,15,2959,19,[1,[2959,15,2959,19,[[],"Bool"]],[]]]]]]]]],[2961,9,3009,21,[[2961,9,2961,23,"matchingOrders"],[],[2962,13,3009,21,[1,"|>",0,[2962,13,2994,93,[1,"|>",0,[2962,13,2993,52,[1,"|>",0,[2962,13,2992,31,[1,"|>",0,[2962,13,2991,22,[1,"|>",0,[2962,13,2976,22,[1,"|>",0,[2962,13,2962,62,[0,[[2962,13,2962,30,[2,[],"findMatchingTypes"]],[2962,31,2962,37,[2,[],"config"]],[2962,38,2962,45,[2,[],"context"]],[2962,46,2962,55,[2,[],"orderInfo"]],[2962,56,2962,62,[2,[],"fields"]]]]],[2963,20,2976,22,[0,[[2963,20,2963,28,[2,["List"],"map"]],[2964,21,2976,22,[7,[2964,22,2975,33,[18,[[[2964,23,2964,60,[8,[[2964,25,2964,35,"fieldOrder"],[2964,37,2964,48,"isSubrecord"],[2964,50,2964,58,"typeName"]]]]],[2965,25,2975,33,[1,"|>",0,[2965,25,2965,65,[0,[[2965,25,2965,34,[2,[],"makeOrder"]],[2965,35,2965,47,[2,[],"sortGenerics"]],[2965,48,2965,54,[2,[],"fields"]],[2965,55,2965,65,[2,[],"fieldOrder"]]]]],[2966,32,2975,33,[7,[2966,33,2974,38,[18,[[[2966,34,2966,35,[11,"o"]]],[2967,37,2974,38,[6,[[2967,39,2967,63,[0,[[2967,39,2967,50,[2,["Dict"],"toList"]],[2967,51,2967,63,[19,[2967,51,2967,52,[2,[],"o"]],[2967,53,2967,63,"fieldOrder"]]]]]],[2968,39,2973,40,[8,[[2968,41,2968,84,[[2968,41,2968,60,"canonicalFieldTypes"],[2968,63,2968,84,[19,[2968,63,2968,64,[2,[],"o"]],[2968,65,2968,84,"canonicalFieldTypes"]]]]],[2969,41,2970,39,[[2969,41,2969,51,"fieldOrder"],[2969,54,2969,66,[19,[2969,54,2969,55,[2,[],"o"]],[2969,56,2969,66,"fieldOrder"]]]]],[2970,41,2971,39,[[2970,41,2970,57,"hasUnknownFields"],[2970,60,2970,78,[19,[2970,60,2970,61,[2,[],"o"]],[2970,62,2970,78,"hasUnknownFields"]]]]],[2971,41,2972,39,[[2971,41,2971,52,"isSubrecord"],[2971,55,2971,66,[2,[],"isSubrecord"]]]],[2972,41,2973,39,[[2972,41,2972,49,"typeName"],[2972,52,2972,60,[2,[],"typeName"]]]]]]]]]]]]]]]]]]]]]]]]]]],[2978,20,2991,22,[0,[[2978,20,2978,40,[2,["DictX"],"fromListDedupe"]],[2979,21,2991,22,[7,[2979,22,2990,33,[18,[[[2979,23,2979,25,[11,"o1"]],[2979,26,2979,28,[11,"o2"]]],[2980,25,2990,33,[1,"|>",0,[2980,25,2986,26,[7,[2980,26,2985,31,[11,[2980,29,2980,48,[19,[2980,29,2980,31,[2,[],"o1"]],[2980,32,2980,48,"hasUnknownFields"]]],[2982,29,2982,31,[2,[],"o2"]],[2985,29,2985,31,[2,[],"o1"]]]]]],[2987,32,2990,33,[7,[2987,33,2989,138,[18,[[[2987,34,2987,35,[11,"o"]]],[2989,37,2989,138,[21,[2989,39,2989,40,"o"],[[2989,43,2989,137,[[2989,43,2989,62,"canonicalFieldTypes"],[2989,65,2989,136,[0,[[2989,65,2989,91,[2,[],"keepOnlyMatchingFieldTypes"]],[2989,92,2989,113,[19,[2989,92,2989,93,[2,[],"o"]],[2989,94,2989,113,"canonicalFieldTypes"]]],[2989,114,2989,136,[19,[2989,114,2989,116,[2,[],"o2"]],[2989,117,2989,136,"canonicalFieldTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2992,20,2992,31,[2,["Dict"],"values"]]]],[2993,20,2993,52,[0,[[2993,20,2993,34,[2,["List"],"partition"]],[2993,35,2993,52,[20,".hasUnknownFields"]]]]]]],[2994,20,2994,93,[0,[[2994,20,2994,33,[2,["Tuple"],"mapBoth"]],[2994,34,2994,63,[7,[2994,35,2994,62,[0,[[2994,35,2994,49,[2,["List"],"partition"]],[2994,50,2994,62,[20,".isSubrecord"]]]]]]],[2994,64,2994,93,[7,[2994,65,2994,92,[0,[[2994,65,2994,79,[2,["List"],"partition"]],[2994,80,2994,92,[20,".isSubrecord"]]]]]]]]]]]],[2995,20,3009,21,[7,[2995,21,3008,65,[18,[[[2995,22,2995,24,[11,"os"]]],[2996,25,3008,65,[17,[[2996,30,2996,32,[2,[],"os"]],[[[2998,29,2998,71,[7,[[2998,31,2998,57,[7,[[2998,33,2998,51,[11,"unknownIsSubrecord"]],[2998,53,2998,55,[10,[]]]]]],[2998,59,2998,69,[7,[[2998,61,2998,63,[10,[]]],[2998,65,2998,67,[10,[]]]]]]]]],[2999,33,2999,61,[6,[[2999,35,2999,53,[2,[],"unknownIsSubrecord"]],[2999,55,2999,59,[2,[],"True"]]]]]],[[3001,29,3001,71,[7,[[3001,31,3001,57,[7,[[3001,33,3001,34,[0]],[3001,36,3001,55,[11,"unknownNotSubrecord"]]]]],[3001,59,3001,69,[7,[[3001,61,3001,63,[10,[]]],[3001,65,3001,67,[10,[]]]]]]]]],[3002,33,3002,62,[6,[[3002,35,3002,54,[2,[],"unknownNotSubrecord"]],[3002,56,3002,60,[2,[],"True"]]]]]],[[3004,29,3004,64,[7,[[3004,31,3004,32,[0]],[3004,34,3004,62,[7,[[3004,36,3004,56,[11,"noUnknownIsSubrecord"]],[3004,58,3004,60,[10,[]]]]]]]]],[3005,33,3005,64,[6,[[3005,35,3005,55,[2,[],"noUnknownIsSubrecord"]],[3005,57,3005,62,[2,[],"False"]]]]]],[[3007,29,3007,64,[7,[[3007,31,3007,32,[0]],[3007,34,3007,62,[7,[[3007,36,3007,37,[0]],[3007,39,3007,60,[11,"noUnknownNotSubrecord"]]]]]]]],[3008,33,3008,65,[6,[[3008,35,3008,56,[2,[],"noUnknownNotSubrecord"]],[3008,58,3008,63,[2,[],"False"]]]]]]]]]]]]]]]]]]]]]],[3011,9,3013,38,[0,[[0],[1,[3011,9,3011,47,[[3011,9,3011,21,"alphabetical"],[3011,24,3011,47,[6,[3011,24,3011,29,[1,[3011,24,3011,29,[[],"Field"]],[]]],[3011,33,3011,47,[6,[3011,33,3011,38,[1,[3011,33,3011,38,[[],"Field"]],[]]],[3011,42,3011,47,[1,[3011,42,3011,47,[[],"Order"]],[]]]]]]]]]],[3012,9,3013,38,[[3012,9,3012,21,"alphabetical"],[[3012,22,3012,24,[11,"f1"]],[3012,25,3012,27,[11,"f2"]]],[3013,13,3013,38,[0,[[3013,13,3013,20,[2,[],"compare"]],[3013,21,3013,29,[19,[3013,21,3013,23,[2,[],"f1"]],[3013,24,3013,29,"field"]]],[3013,30,3013,38,[19,[3013,30,3013,32,[2,[],"f2"]],[3013,33,3013,38,"field"]]]]]]]]]]],[3015,9,3023,46,[0,[[0],[1,[3015,9,3015,66,[[3015,9,3015,21,"byFieldOrder"],[3015,24,3015,66,[6,[3015,24,3015,39,[1,[3015,24,3015,28,[[],"Dict"]],[[3015,29,3015,35,[1,[3015,29,3015,35,[[],"String"]],[]]],[3015,36,3015,39,[1,[3015,36,3015,39,[[],"Int"]],[]]]]]],[3015,43,3015,66,[6,[3015,43,3015,48,[1,[3015,43,3015,48,[[],"Field"]],[]]],[3015,52,3015,66,[6,[3015,52,3015,57,[1,[3015,52,3015,57,[[],"Field"]],[]]],[3015,61,3015,66,[1,[3015,61,3015,66,[[],"Order"]],[]]]]]]]]]]]],[3016,9,3023,46,[[3016,9,3016,21,"byFieldOrder"],[[3016,22,3016,25,[11,"ord"]],[3016,26,3016,28,[11,"f1"]],[3016,29,3016,31,[11,"f2"]]],[3017,13,3023,46,[16,[[[3018,17,3021,48,[0,[[0],[1,[3018,17,3018,34,[[3018,17,3018,18,"o"],[3018,21,3018,34,[6,[3018,21,3018,27,[1,[3018,21,3018,27,[[],"String"]],[]]],[3018,31,3018,34,[1,[3018,31,3018,34,[[],"Int"]],[]]]]]]]],[3019,17,3021,48,[[3019,17,3019,18,"o"],[[3019,19,3019,20,[11,"f"]]],[3020,21,3021,48,[1,"|>",0,[3020,21,3020,35,[0,[[3020,21,3020,29,[2,["Dict"],"get"]],[3020,30,3020,31,[2,[],"f"]],[3020,32,3020,35,[2,[],"ord"]]]]],[3021,28,3021,48,[0,[[3021,28,3021,45,[2,["Maybe"],"withDefault"]],[3021,46,3021,48,[14,[3021,47,3021,48,[3,1]]]]]]]]]]]]]]],[3023,13,3023,46,[0,[[3023,13,3023,20,[2,[],"compare"]],[3023,21,3023,33,[7,[3023,22,3023,32,[0,[[3023,22,3023,23,[2,[],"o"]],[3023,24,3023,32,[19,[3023,24,3023,26,[2,[],"f1"]],[3023,27,3023,32,"field"]]]]]]]],[3023,34,3023,46,[7,[3023,35,3023,45,[0,[[3023,35,3023,36,[2,[],"o"]],[3023,37,3023,45,[19,[3023,37,3023,39,[2,[],"f2"]],[3023,40,3023,45,"field"]]]]]]]]]]]]]]]]]]],[3025,9,3027,87,[0,[[0],[1,[3025,9,3025,70,[[3025,9,3025,23,"checkSortingBy"],[3025,26,3025,70,[6,[3025,26,3025,51,[6,[3025,27,3025,32,[1,[3025,27,3025,32,[[],"Field"]],[]]],[3025,36,3025,50,[6,[3025,36,3025,41,[1,[3025,36,3025,41,[[],"Field"]],[]]],[3025,45,3025,50,[1,[3025,45,3025,50,[[],"Order"]],[]]]]]]],[3025,55,3025,70,[1,[3025,55,3025,59,[[],"List"]],[[3025,60,3025,70,[1,[3025,61,3025,66,[[],"Error"]],[[3025,67,3025,69,[4,[]]]]]]]]]]]]]],[3026,9,3027,87,[[3026,9,3026,23,"checkSortingBy"],[[3026,24,3026,25,[11,"o"]]],[3027,13,3027,87,[0,[[3027,13,3027,25,[2,[],"checkSorting"]],[3027,26,3027,47,[19,[3027,26,3027,33,[2,[],"context"]],[3027,34,3027,47,"extractSource"]]],[3027,48,3027,63,[5,"Record fields"]],[3027,64,3027,69,[9,[[3027,66,3027,67,[2,[],"o"]]]]],[3027,70,3027,80,[2,[],"errorRange"]],[3027,81,3027,87,[2,[],"fields"]]]]]]]]]],[3029,9,3042,23,[0,[[0],[1,[3029,9,3029,69,[[3029,9,3029,22,"handleUnknown"],[3029,25,3029,69,[6,[3029,25,3029,50,[6,[3029,26,3029,31,[1,[3029,26,3029,31,[[],"Field"]],[]]],[3029,35,3029,49,[6,[3029,35,3029,40,[1,[3029,35,3029,40,[[],"Field"]],[]]],[3029,44,3029,49,[1,[3029,44,3029,49,[[],"Order"]],[]]]]]]],[3029,54,3029,69,[1,[3029,54,3029,58,[[],"List"]],[[3029,59,3029,69,[1,[3029,60,3029,65,[[],"Error"]],[[3029,66,3029,68,[4,[]]]]]]]]]]]]]],[3030,9,3042,23,[[3030,9,3030,22,"handleUnknown"],[[3030,23,3030,39,[11,"whenAlphabetical"]]],[3031,13,3042,23,[17,[[3031,18,3031,29,[2,[],"sortUnknown"]],[[[3032,17,3032,31,[12,[[],"Alphabetically"],[]]],[3034,21,3034,52,[0,[[3034,21,3034,35,[2,[],"checkSortingBy"]],[3034,36,3034,52,[2,[],"whenAlphabetical"]]]]]],[[3036,17,3036,27,[12,[[],"ReportOnly"],[]]],[3038,21,3038,56,[0,[[3038,21,3038,39,[2,[],"unknownRecordError"]],[3038,40,3038,46,[2,[],"record"]],[3038,47,3038,56,[2,[],"fullRange"]]]]]],[[3040,17,3040,26,[12,[[],"DoNotSort"],[]]],[3042,21,3042,23,[9,[]]]]]]]]]]]]]],[3044,5,3081,50,[17,[[3044,10,3044,24,[2,[],"matchingOrders"]],[[[3045,9,3045,18,[7,[[3045,11,3045,13,[10,[]]],[3045,15,3045,16,[0]]]]],[3048,13,3048,55,[6,[[3048,15,3048,41,[0,[[3048,15,3048,28,[2,[],"handleUnknown"]],[3048,29,3048,41,[2,[],"alphabetical"]]]]],[3048,43,3048,53,[2,["Dict"],"empty"]]]]]],[[3050,9,3050,58,[7,[[3050,11,3050,50,[10,[[3050,13,3050,48,[8,[[3050,15,3050,34,"canonicalFieldTypes"],[3050,36,3050,46,"fieldOrder"]]]]]]],[3050,52,3050,56,[12,[[],"True"],[]]]]]],[3052,13,3052,77,[6,[[3052,15,3052,54,[0,[[3052,15,3052,28,[2,[],"handleUnknown"]],[3052,29,3052,54,[7,[3052,30,3052,53,[0,[[3052,30,3052,42,[2,[],"byFieldOrder"]],[3052,43,3052,53,[2,[],"fieldOrder"]]]]]]]]]],[3052,56,3052,75,[2,[],"canonicalFieldTypes"]]]]]],[[3054,9,3054,59,[7,[[3054,11,3054,50,[10,[[3054,13,3054,48,[8,[[3054,15,3054,34,"canonicalFieldTypes"],[3054,36,3054,46,"fieldOrder"]]]]]]],[3054,52,3054,57,[12,[[],"False"],[]]]]]],[3056,13,3056,79,[6,[[3056,15,3056,56,[1,"<|",1,[3056,15,3056,29,[2,[],"checkSortingBy"]],[3056,33,3056,56,[0,[[3056,33,3056,45,[2,[],"byFieldOrder"]],[3056,46,3056,56,[2,[],"fieldOrder"]]]]]]],[3056,58,3056,77,[2,[],"canonicalFieldTypes"]]]]]],[[3058,9,3058,25,[7,[[3058,11,3058,20,[11,"ambiguous"]],[3058,22,3058,23,[0]]]]],[3060,13,3081,50,[16,[[[3061,17,3066,34,[0,[[0],[1,[3061,17,3061,57,[[3061,17,3061,38,"unambiguousFieldTypes"],[3061,41,3061,57,[1,[3061,41,3061,45,[[],"Dict"]],[[3061,46,3061,52,[1,[3061,46,3061,52,[[],"String"]],[]]],[3061,53,3061,57,[1,[3061,53,3061,57,[[],"Type"]],[]]]]]]]]],[3062,17,3066,34,[[3062,17,3062,38,"unambiguousFieldTypes"],[],[3064,21,3066,34,[0,[[3064,21,3064,31,[2,["List"],"foldl"]],[3064,32,3064,116,[7,[3064,33,3064,115,[18,[[[3064,34,3064,57,[8,[[3064,36,3064,55,"canonicalFieldTypes"]]]],[3064,58,3064,61,[11,"acc"]]],[3064,65,3064,115,[0,[[3064,65,3064,91,[2,[],"keepOnlyMatchingFieldTypes"]],[3064,92,3064,111,[2,[],"canonicalFieldTypes"]],[3064,112,3064,115,[2,[],"acc"]]]]]]]]]],[3065,25,3065,35,[2,["Dict"],"empty"]],[3066,25,3066,34,[2,[],"ambiguous"]]]]]]]]]]],[3068,13,3081,50,[17,[[3068,18,3068,31,[2,[],"sortAmbiguous"]],[[[3069,17,3069,31,[12,[[],"Alphabetically"],[]]],[3071,21,3071,75,[6,[[3071,23,3071,50,[0,[[3071,23,3071,37,[2,[],"checkSortingBy"]],[3071,38,3071,50,[2,[],"alphabetical"]]]]],[3071,52,3071,73,[2,[],"unambiguousFieldTypes"]]]]]],[[3073,17,3073,27,[12,[[],"ReportOnly"],[]]],[3075,21,3077,22,[6,[[3075,23,3075,150,[0,[[3075,23,3075,43,[2,[],"ambiguousRecordError"]],[3075,44,3075,50,[2,[],"record"]],[3075,51,3075,140,[7,[3075,52,3075,139,[0,[[3075,52,3075,60,[2,["List"],"map"]],[3075,61,3075,129,[7,[3075,62,3075,128,[1,"<<",0,[3075,62,3075,115,[0,[[3075,62,3075,70,[2,["List"],"map"]],[3075,71,3075,115,[7,[3075,72,3075,114,[18,[[[3075,73,3075,81,[7,[[3075,75,3075,76,[11,"m"]],[3075,78,3075,79,[11,"n"]]]]]],[3075,85,3075,114,[1,"<|",1,[3075,85,3075,100,[0,[[3075,85,3075,96,[2,["String"],"join"]],[3075,97,3075,100,[5,"."]]]]],[3075,104,3075,114,[1,"++",1,[3075,104,3075,105,[2,[],"m"]],[3075,109,3075,114,[9,[[3075,111,3075,112,[2,[],"n"]]]]]]]]]]]]]]]]],[3075,119,3075,128,[20,".typeName"]]]]]],[3075,130,3075,139,[2,[],"ambiguous"]]]]]]],[3075,141,3075,150,[2,[],"fullRange"]]]]],[3076,23,3076,44,[2,[],"unambiguousFieldTypes"]]]]]],[[3079,17,3079,26,[12,[[],"DoNotSort"],[]]],[3081,21,3081,50,[6,[[3081,23,3081,25,[9,[]]],[3081,27,3081,48,[2,[],"unambiguousFieldTypes"]]]]]]]]]]]]]]]]]]]]]]]]]],[3084,1,3153,13,[0,[[1,[3084,1,3087,3,"{-| Given how to sort generics, a list of fields to sort, and a `FieldOrder`,\nreturn an ordering of fields, whether or not any of them were an unknown record\n(via generics), and any canonical field types.\n-}"]],[1,[3088,1,3088,154,[[3088,1,3088,10,"makeOrder"],[3088,13,3088,154,[6,[3088,13,3088,25,[1,[3088,13,3088,25,[[],"SortGenerics"]],[]]],[3088,29,3088,154,[6,[3088,29,3088,39,[1,[3088,29,3088,33,[[],"List"]],[[3088,34,3088,39,[1,[3088,34,3088,39,[[],"Field"]],[]]]]]],[3088,43,3088,154,[6,[3088,43,3088,53,[1,[3088,43,3088,53,[[],"FieldOrder"]],[]]],[3088,57,3088,154,[4,[[3088,59,3088,97,[[3088,59,3088,78,"canonicalFieldTypes"],[3088,81,3088,97,[1,[3088,81,3088,85,[[],"Dict"]],[[3088,86,3088,92,[1,[3088,86,3088,92,[[],"String"]],[]]],[3088,93,3088,97,[1,[3088,93,3088,97,[[],"Type"]],[]]]]]]]],[3088,99,3088,127,[[3088,99,3088,109,"fieldOrder"],[3088,112,3088,127,[1,[3088,112,3088,116,[[],"Dict"]],[[3088,117,3088,123,[1,[3088,117,3088,123,[[],"String"]],[]]],[3088,124,3088,127,[1,[3088,124,3088,127,[[],"Int"]],[]]]]]]]],[3088,129,3088,153,[[3088,129,3088,145,"hasUnknownFields"],[3088,148,3088,152,[1,[3088,148,3088,152,[[],"Bool"]],[]]]]]]]]]]]]]]]]],[3089,1,3153,13,[[3089,1,3089,10,"makeOrder"],[[3089,11,3089,23,[11,"sortGenerics"]],[3089,24,3089,32,[11,"inFields"]],[3089,33,3089,53,[14,[3089,34,3089,52,[12,[[],"FieldOrder"],[[3089,45,3089,52,[11,"inOrder"]]]]]]]],[3090,5,3153,13,[16,[[[3091,9,3100,28,[0,[[0],[1,[3091,9,3091,28,[[3091,9,3091,22,"genericOffset"],[3091,25,3091,28,[1,[3091,25,3091,28,[[],"Int"]],[]]]]]],[3092,9,3100,28,[[3092,9,3092,22,"genericOffset"],[],[3095,13,3100,28,[17,[[3095,18,3095,30,[2,[],"sortGenerics"]],[[[3096,17,3096,35,[12,[[],"GenericFieldsFirst"],[]]],[3097,21,3097,29,[14,[3097,22,3097,29,[3,1000000]]]]],[[3099,17,3099,34,[12,[[],"GenericFieldsLast"],[]]],[3100,21,3100,28,[3,1000000]]]]]]]]]]]],[3102,9,3148,83,[0,[[0],[1,[3102,9,3102,74,[[3102,9,3102,11,"go"],[3102,14,3102,74,[6,[3102,14,3102,17,[1,[3102,14,3102,17,[[],"Int"]],[]]],[3102,21,3102,74,[6,[3102,21,3102,31,[1,[3102,21,3102,25,[[],"List"]],[[3102,26,3102,31,[1,[3102,26,3102,31,[[],"Field"]],[]]]]]],[3102,35,3102,74,[6,[3102,35,3102,45,[1,[3102,35,3102,45,[[],"FieldOrder"]],[]]],[3102,49,3102,74,[3,[[3102,51,3102,66,[1,[3102,51,3102,55,[[],"Dict"]],[[3102,56,3102,62,[1,[3102,56,3102,62,[[],"String"]],[]]],[3102,63,3102,66,[1,[3102,63,3102,66,[[],"Int"]],[]]]]]],[3102,68,3102,72,[1,[3102,68,3102,72,[[],"Bool"]],[]]]]]]]]]]]]]]],[3103,9,3148,83,[[3103,9,3103,11,"go"],[[3103,12,3103,22,[11,"offsetMult"]],[3103,23,3103,35,[11,"fieldsToMake"]],[3103,36,3103,71,[14,[3103,37,3103,70,[12,[[],"FieldOrder"],[[3103,48,3103,70,[8,[[3103,50,3103,59,"canonical"],[3103,61,3103,68,"generic"]]]]]]]]]],[3104,13,3148,83,[16,[[[3105,17,3117,52,[0,[[0],[1,[3105,17,3105,109,[[3105,17,3105,21,"step"],[3105,24,3105,109,[6,[3105,24,3105,29,[1,[3105,24,3105,29,[[],"Field"]],[]]],[3105,33,3105,109,[6,[3105,33,3105,69,[3,[[3105,35,3105,55,[1,[3105,35,3105,39,[[],"List"]],[[3105,40,3105,55,[3,[[3105,42,3105,48,[1,[3105,42,3105,48,[[],"String"]],[]]],[3105,50,3105,53,[1,[3105,50,3105,53,[[],"Int"]],[]]]]]]]]],[3105,57,3105,67,[1,[3105,57,3105,61,[[],"List"]],[[3105,62,3105,67,[1,[3105,62,3105,67,[[],"Field"]],[]]]]]]]]],[3105,73,3105,109,[3,[[3105,75,3105,95,[1,[3105,75,3105,79,[[],"List"]],[[3105,80,3105,95,[3,[[3105,82,3105,88,[1,[3105,82,3105,88,[[],"String"]],[]]],[3105,90,3105,93,[1,[3105,90,3105,93,[[],"Int"]],[]]]]]]]]],[3105,97,3105,107,[1,[3105,97,3105,101,[[],"List"]],[[3105,102,3105,107,[1,[3105,102,3105,107,[[],"Field"]],[]]]]]]]]]]]]]]]],[3106,17,3117,52,[[3106,17,3106,21,"step"],[[3106,22,3106,23,[11,"f"]],[3106,24,3106,42,[7,[[3106,26,3106,32,[11,"canAcc"]],[3106,34,3106,40,[11,"genAcc"]]]]]],[3107,21,3117,52,[17,[[3107,26,3107,52,[0,[[3107,26,3107,34,[2,["Dict"],"get"]],[3107,35,3107,42,[19,[3107,35,3107,36,[2,[],"f"]],[3107,37,3107,42,"field"]]],[3107,43,3107,52,[2,[],"canonical"]]]]],[[[3108,25,3108,38,[12,[[],"Just"],[[3108,30,3108,38,[7,[[3108,32,3108,33,[11,"i"]],[3108,35,3108,36,[0]]]]]]]],[3109,29,3114,30,[6,[[3109,31,3112,42,[1,"::",1,[3109,31,3111,32,[6,[[3109,33,3109,40,[19,[3109,33,3109,34,[2,[],"f"]],[3109,35,3109,40,"field"]]],[3110,33,3110,63,[1,"+",0,[3110,33,3110,34,[2,[],"i"]],[3110,37,3110,63,[1,"*",0,[3110,37,3110,47,[2,[],"offsetMult"]],[3110,50,3110,63,[2,[],"genericOffset"]]]]]]]]],[3112,36,3112,42,[2,[],"canAcc"]]]],[3113,31,3113,37,[2,[],"genAcc"]]]]]],[[3116,25,3116,32,[12,[[],"Nothing"],[]]],[3117,29,3117,52,[6,[[3117,31,3117,37,[2,[],"canAcc"]],[3117,39,3117,50,[1,"::",1,[3117,39,3117,40,[2,[],"f"]],[3117,44,3117,50,[2,[],"genAcc"]]]]]]]]]]]]]]]]]],[3119,13,3148,83,[1,"|>",0,[3119,13,3147,22,[1,"|>",0,[3119,13,3119,52,[0,[[3119,13,3119,23,[2,["List"],"foldl"]],[3119,24,3119,28,[2,[],"step"]],[3119,29,3119,39,[6,[[3119,31,3119,33,[9,[]]],[3119,35,3119,37,[9,[]]]]]],[3119,40,3119,52,[2,[],"fieldsToMake"]]]]],[3120,20,3147,22,[0,[[3120,20,3120,33,[2,["Tuple"],"mapBoth"]],[3120,34,3120,47,[2,["Dict"],"fromList"]],[3121,21,3147,22,[7,[3121,22,3146,54,[18,[[[3121,23,3121,25,[11,"fs"]]],[3122,25,3146,54,[17,[[3122,30,3122,37,[2,[],"generic"]],[[[3123,29,3123,55,[12,[[],"Just"],[[3123,34,3123,55,[14,[3123,35,3123,54,[12,[[],"OrderedFields"],[[3123,49,3123,54,[11,"order"]]]]]]]]]],[3124,33,3124,61,[0,[[3124,33,3124,35,[2,[],"go"]],[3124,36,3124,52,[7,[3124,37,3124,51,[1,"+",0,[3124,37,3124,47,[2,[],"offsetMult"]],[3124,50,3124,51,[3,1]]]]]],[3124,53,3124,55,[2,[],"fs"]],[3124,56,3124,61,[2,[],"order"]]]]]],[[3126,29,3126,53,[12,[[],"Just"],[[3126,34,3126,53,[14,[3126,35,3126,52,[12,[[],"UnknownFields"],[[3126,49,3126,52,[11,"fs_"]]]]]]]]]],[3127,33,3143,34,[16,[[[3128,37,3130,54,[0,[[0],[1,[3128,37,3128,55,[[3128,37,3128,41,"alph"],[3128,44,3128,55,[1,[3128,44,3128,48,[[],"List"]],[[3128,49,3128,55,[1,[3128,49,3128,55,[[],"String"]],[]]]]]]]]],[3129,37,3130,54,[[3129,37,3129,41,"alph"],[],[3130,41,3130,54,[0,[[3130,41,3130,50,[2,["List"],"sort"]],[3130,51,3130,54,[2,[],"fs_"]]]]]]]]]]],[3132,33,3143,34,[6,[[3132,35,3141,53,[1,"|>",0,[3132,35,3140,39,[0,[[3132,35,3132,43,[2,["List"],"map"]],[3133,37,3139,38,[7,[3133,38,3138,42,[18,[[[3133,39,3133,40,[11,"f"]]],[3134,41,3138,42,[6,[[3134,43,3134,50,[19,[3134,43,3134,44,[2,[],"f"]],[3134,45,3134,50,"field"]]],[3135,43,3137,86,[1,"|>",0,[3135,43,3136,68,[1,"|>",0,[3135,43,3135,71,[0,[[3135,43,3135,58,[2,["ListX"],"elemIndex"]],[3135,59,3135,66,[19,[3135,59,3135,60,[2,[],"f"]],[3135,61,3135,66,"field"]]],[3135,67,3135,71,[2,[],"alph"]]]]],[3136,48,3136,68,[0,[[3136,48,3136,65,[2,["Maybe"],"withDefault"]],[3136,66,3136,68,[14,[3136,67,3136,68,[3,1]]]]]]]]],[3137,48,3137,86,[0,[[3137,48,3137,51,[12,"+"]],[3137,52,3137,86,[7,[3137,53,3137,85,[1,"*",0,[3137,53,3137,69,[7,[3137,54,3137,68,[1,"+",0,[3137,54,3137,64,[2,[],"offsetMult"]],[3137,67,3137,68,[3,1]]]]]],[3137,72,3137,85,[2,[],"genericOffset"]]]]]]]]]]]]]]]]]]],[3140,37,3140,39,[2,[],"fs"]]]]],[3141,40,3141,53,[2,["Dict"],"fromList"]]]],[3142,35,3142,39,[2,[],"True"]]]]]]]]],[[3145,29,3145,36,[12,[[],"Nothing"],[]]],[3146,33,3146,54,[6,[[3146,35,3146,45,[2,["Dict"],"empty"]],[3146,47,3146,52,[2,[],"False"]]]]]]]]]]]]]]]]]]]],[3148,20,3148,83,[7,[3148,21,3148,82,[18,[[[3148,22,3148,47,[7,[[3148,24,3148,27,[11,"f1s"]],[3148,29,3148,45,[7,[[3148,31,3148,34,[11,"f2s"]],[3148,36,3148,43,[11,"unknown"]]]]]]]]],[3148,51,3148,82,[6,[[3148,53,3148,71,[0,[[3148,53,3148,63,[2,["Dict"],"union"]],[3148,64,3148,67,[2,[],"f1s"]],[3148,68,3148,71,[2,[],"f2s"]]]]],[3148,73,3148,80,[2,[],"unknown"]]]]]]]]]]]]]]]]]]]]],[3150,5,3153,13,[1,"|>",0,[3150,5,3150,39,[0,[[3150,5,3150,7,[2,[],"go"]],[3150,8,3150,9,[3,0]],[3150,10,3150,18,[2,[],"inFields"]],[3150,19,3150,39,[7,[3150,20,3150,38,[0,[[3150,20,3150,30,[2,[],"FieldOrder"]],[3150,31,3150,38,[2,[],"inOrder"]]]]]]]]]],[3151,12,3153,13,[7,[3151,13,3152,156,[18,[[[3151,14,3151,46,[7,[[3151,16,3151,26,[11,"fieldOrder"]],[3151,28,3151,44,[11,"hasUnknownFields"]]]]]],[3152,17,3152,156,[8,[[3152,19,3152,92,[[3152,19,3152,38,"canonicalFieldTypes"],[3152,41,3152,92,[0,[[3152,41,3152,49,[2,["Dict"],"map"]],[3152,50,3152,74,[7,[3152,51,3152,73,[18,[[[3152,52,3152,53,[0]],[3152,54,3152,55,[11,"v"]]],[3152,59,3152,73,[0,[[3152,59,3152,71,[2,["Tuple"],"second"]],[3152,72,3152,73,[2,[],"v"]]]]]]]]]],[3152,75,3152,92,[19,[3152,75,3152,82,[2,[],"inOrder"]],[3152,83,3152,92,"canonical"]]]]]]]],[3152,94,3152,117,[[3152,94,3152,104,"fieldOrder"],[3152,107,3152,117,[2,[],"fieldOrder"]]]],[3152,119,3152,155,[[3152,119,3152,135,"hasUnknownFields"],[3152,138,3152,154,[2,[],"hasUnknownFields"]]]]]]]]]]]]]]]]]]]]]],[3156,1,3236,35,[0,[[1,[3156,1,3159,3,"{-| Given context of known types, any information that would help find the\nappropriate canonical ordering, and a list of fields, return all matching field\norders.\n-}"]],[1,[3160,1,3160,177,[[3160,1,3160,18,"findMatchingTypes"],[3160,21,3160,177,[6,[3160,21,3160,31,[1,[3160,21,3160,31,[[],"RuleConfig"]],[]]],[3160,35,3160,177,[6,[3160,35,3160,48,[1,[3160,35,3160,48,[[],"ModuleContext"]],[]]],[3160,52,3160,177,[6,[3160,52,3160,67,[1,[3160,52,3160,57,[[],"Maybe"]],[[3160,58,3160,67,[1,[3160,58,3160,67,[[],"OrderInfo"]],[]]]]]],[3160,71,3160,177,[6,[3160,71,3160,81,[1,[3160,71,3160,75,[[],"List"]],[[3160,76,3160,81,[1,[3160,76,3160,81,[[],"Field"]],[]]]]]],[3160,85,3160,177,[1,[3160,85,3160,89,[[],"List"]],[[3160,90,3160,177,[4,[[3160,92,3160,115,[[3160,92,3160,102,"fieldOrder"],[3160,105,3160,115,[1,[3160,105,3160,115,[[],"FieldOrder"]],[]]]]],[3160,117,3160,135,[[3160,117,3160,128,"isSubrecord"],[3160,131,3160,135,[1,[3160,131,3160,135,[[],"Bool"]],[]]]]],[3160,137,3160,176,[[3160,137,3160,145,"typeName"],[3160,148,3160,175,[1,[3160,148,3160,152,[[],"List"]],[[3160,153,3160,175,[3,[[3160,155,3160,165,[1,[3160,155,3160,165,[[],"ModuleName"]],[]]],[3160,167,3160,173,[1,[3160,167,3160,173,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3161,1,3236,35,[[3161,1,3161,18,"findMatchingTypes"],[[3161,19,3161,25,[11,"config"]],[3161,26,3161,33,[11,"context"]],[3161,34,3161,38,[11,"info"]],[3161,39,3161,50,[11,"matchFields"]]],[3162,5,3236,35,[16,[[[3163,9,3181,61,[0,[[0],[1,[3163,9,3163,128,[[3163,9,3163,19,"getMatches"],[3163,22,3163,128,[6,[3163,22,3163,32,[1,[3163,22,3163,26,[[],"List"]],[[3163,27,3163,32,[1,[3163,27,3163,32,[[],"Field"]],[]]]]]],[3163,36,3163,128,[1,[3163,36,3163,40,[[],"List"]],[[3163,41,3163,128,[4,[[3163,43,3163,66,[[3163,43,3163,53,"fieldOrder"],[3163,56,3163,66,[1,[3163,56,3163,66,[[],"FieldOrder"]],[]]]]],[3163,68,3163,86,[[3163,68,3163,79,"isSubrecord"],[3163,82,3163,86,[1,[3163,82,3163,86,[[],"Bool"]],[]]]]],[3163,88,3163,127,[[3163,88,3163,96,"typeName"],[3163,99,3163,126,[1,[3163,99,3163,103,[[],"List"]],[[3163,104,3163,126,[3,[[3163,106,3163,116,[1,[3163,106,3163,116,[[],"ModuleName"]],[]]],[3163,118,3163,124,[1,[3163,118,3163,124,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]],[3164,9,3181,61,[[3164,9,3164,19,"getMatches"],[[3164,20,3164,22,[11,"fs"]]],[3165,13,3181,61,[16,[[[3166,17,3171,68,[1,[3166,17,3166,53,[8,[[3166,19,3166,35,"canonicalMatches"],[3166,37,3166,51,"genericMatches"]]]],[3167,21,3171,68,[11,[3167,24,3167,39,[0,[[3167,24,3167,36,[2,["List"],"isEmpty"]],[3167,37,3167,39,[2,[],"fs"]]]]],[3168,25,3168,71,[8,[[3168,27,3168,48,[[3168,27,3168,43,"canonicalMatches"],[3168,46,3168,48,[9,[]]]]],[3168,50,3168,70,[[3168,50,3168,64,"genericMatches"],[3168,67,3168,69,[9,[]]]]]]]],[3171,25,3171,68,[0,[[3171,25,3171,37,[2,[],"searchOrders"]],[3171,38,3171,44,[2,[],"config"]],[3171,45,3171,52,[2,[],"context"]],[3171,53,3171,65,[2,[],"hasAllFields"]],[3171,66,3171,68,[2,[],"fs"]]]]]]]]]],[3173,13,3181,61,[1,"++",1,[3173,13,3180,33,[0,[[3173,13,3173,21,[2,["List"],"map"]],[3174,17,3179,18,[7,[3174,18,3178,22,[18,[[[3174,19,3174,30,[7,[[3174,21,3174,25,[11,"name"]],[3174,27,3174,28,[11,"k"]]]]]],[3175,21,3178,22,[8,[[3175,23,3175,58,[[3175,23,3175,33,"fieldOrder"],[3175,36,3175,58,[0,[[3175,36,3175,48,[2,[],"toFieldOrder"]],[3175,49,3175,56,[2,[],"Nothing"]],[3175,57,3175,58,[2,[],"k"]]]]]]],[3176,23,3177,21,[[3176,23,3176,34,"isSubrecord"],[3176,37,3176,50,[19,[3176,37,3176,38,[2,[],"k"]],[3176,39,3176,50,"isSubrecord"]]]]],[3177,23,3178,21,[[3177,23,3177,31,"typeName"],[3177,34,3177,42,[9,[[3177,36,3177,40,[2,[],"name"]]]]]]]]]]]]]]],[3180,17,3180,33,[2,[],"canonicalMatches"]]]]],[3181,20,3181,61,[0,[[3181,20,3181,34,[2,["List"],"concatMap"]],[3181,35,3181,46,[2,[],"makeGeneric"]],[3181,47,3181,61,[2,[],"genericMatches"]]]]]]]]]]]]]]],[3183,9,3188,18,[0,[[0],[1,[3183,9,3183,66,[[3183,9,3183,21,"toFieldOrder"],[3183,24,3183,66,[6,[3183,24,3183,37,[1,[3183,24,3183,29,[[],"Maybe"]],[[3183,30,3183,37,[1,[3183,30,3183,37,[[],"Generic"]],[]]]]]],[3183,41,3183,66,[6,[3183,41,3183,52,[1,[3183,41,3183,52,[[],"KnownRecord"]],[]]],[3183,56,3183,66,[1,[3183,56,3183,66,[[],"FieldOrder"]],[]]]]]]]]]],[3184,9,3188,18,[[3184,9,3184,21,"toFieldOrder"],[[3184,22,3184,29,[11,"generic"]],[3184,30,3184,39,[8,[[3184,32,3184,37,"order"]]]]],[3185,13,3188,18,[0,[[3185,13,3185,23,[2,[],"FieldOrder"]],[3186,17,3188,18,[8,[[3186,19,3186,36,[[3186,19,3186,28,"canonical"],[3186,31,3186,36,[2,[],"order"]]]],[3187,19,3188,17,[[3187,19,3187,26,"generic"],[3187,29,3187,36,[2,[],"generic"]]]]]]]]]]]]]]],[3190,9,3215,21,[0,[[0],[1,[3190,9,3190,192,[[3190,9,3190,20,"makeGeneric"],[3190,23,3190,192,[6,[3190,23,3190,96,[4,[[3190,25,3190,45,[[3190,25,3190,32,"missing"],[3190,35,3190,45,[1,[3190,35,3190,39,[[],"List"]],[[3190,40,3190,45,[1,[3190,40,3190,45,[[],"Field"]],[]]]]]]]],[3190,47,3190,95,[[3190,47,3190,52,"type_"],[3190,55,3190,94,[3,[[3190,57,3190,79,[3,[[3190,59,3190,69,[1,[3190,59,3190,69,[[],"ModuleName"]],[]]],[3190,71,3190,77,[1,[3190,71,3190,77,[[],"String"]],[]]]]]],[3190,81,3190,92,[1,[3190,81,3190,92,[[],"KnownRecord"]],[]]]]]]]]]]],[3190,100,3190,192,[1,[3190,100,3190,104,[[],"List"]],[[3190,105,3190,192,[4,[[3190,107,3190,130,[[3190,107,3190,117,"fieldOrder"],[3190,120,3190,130,[1,[3190,120,3190,130,[[],"FieldOrder"]],[]]]]],[3190,132,3190,150,[[3190,132,3190,143,"isSubrecord"],[3190,146,3190,150,[1,[3190,146,3190,150,[[],"Bool"]],[]]]]],[3190,152,3190,191,[[3190,152,3190,160,"typeName"],[3190,163,3190,190,[1,[3190,163,3190,167,[[],"List"]],[[3190,168,3190,190,[3,[[3190,170,3190,180,[1,[3190,170,3190,180,[[],"ModuleName"]],[]]],[3190,182,3190,188,[1,[3190,182,3190,188,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]],[3191,9,3215,21,[[3191,9,3191,20,"makeGeneric"],[[3191,21,3191,39,[8,[[3191,23,3191,30,"missing"],[3191,32,3191,37,"type_"]]]]],[3192,13,3215,21,[16,[[[3193,17,3194,26,[1,[3193,17,3193,27,[7,[[3193,19,3193,20,[11,"n"]],[3193,22,3193,25,[11,"rec"]]]]],[3194,21,3194,26,[2,[],"type_"]]]]],[3196,13,3215,21,[1,"|>",0,[3196,13,3203,22,[1,"|>",0,[3196,13,3196,31,[0,[[3196,13,3196,23,[2,[],"getMatches"]],[3196,24,3196,31,[2,[],"missing"]]]]],[3197,20,3203,22,[0,[[3197,20,3197,28,[2,["List"],"map"]],[3198,21,3203,22,[7,[3198,22,3202,26,[18,[[[3198,23,3198,60,[8,[[3198,25,3198,35,"fieldOrder"],[3198,37,3198,48,"isSubrecord"],[3198,50,3198,58,"typeName"]]]]],[3199,25,3202,26,[8,[[3199,27,3199,91,[[3199,27,3199,37,"fieldOrder"],[3199,40,3199,91,[0,[[3199,40,3199,52,[2,[],"toFieldOrder"]],[3199,53,3199,87,[7,[3199,54,3199,86,[1,"<|",1,[3199,54,3199,58,[2,[],"Just"]],[3199,62,3199,86,[0,[[3199,62,3199,75,[2,[],"OrderedFields"]],[3199,76,3199,86,[2,[],"fieldOrder"]]]]]]]]],[3199,88,3199,91,[2,[],"rec"]]]]]]],[3200,27,3201,25,[[3200,27,3200,38,"isSubrecord"],[3200,41,3200,71,[1,"||",1,[3200,41,3200,56,[19,[3200,41,3200,44,[2,[],"rec"]],[3200,45,3200,56,"isSubrecord"]]],[3200,60,3200,71,[2,[],"isSubrecord"]]]]]],[3201,27,3202,25,[[3201,27,3201,35,"typeName"],[3201,38,3201,51,[1,"::",1,[3201,38,3201,39,[2,[],"n"]],[3201,43,3201,51,[2,[],"typeName"]]]]]]]]]]]]]]]]]]],[3204,20,3215,21,[7,[3204,21,3214,31,[18,[[[3204,22,3204,24,[11,"ls"]]],[3205,25,3214,31,[11,[3205,28,3205,43,[0,[[3205,28,3205,40,[2,["List"],"isEmpty"]],[3205,41,3205,43,[2,[],"ls"]]]]],[3207,29,3211,30,[9,[[3207,31,3210,32,[8,[[3207,33,3207,113,[[3207,33,3207,43,"fieldOrder"],[3207,46,3207,113,[0,[[3207,46,3207,58,[2,[],"toFieldOrder"]],[3207,59,3207,109,[7,[3207,60,3207,108,[1,"<|",1,[3207,60,3207,64,[2,[],"Just"]],[3207,68,3207,108,[1,"<|",1,[3207,68,3207,81,[2,[],"UnknownFields"]],[3207,85,3207,108,[0,[[3207,85,3207,93,[2,["List"],"map"]],[3207,94,3207,100,[20,".field"]],[3207,101,3207,108,[2,[],"missing"]]]]]]]]]]],[3207,110,3207,113,[2,[],"rec"]]]]]]],[3208,33,3209,31,[[3208,33,3208,44,"isSubrecord"],[3208,47,3208,62,[19,[3208,47,3208,50,[2,[],"rec"]],[3208,51,3208,62,"isSubrecord"]]]]],[3209,33,3210,31,[[3209,33,3209,41,"typeName"],[3209,44,3209,49,[9,[[3209,46,3209,47,[2,[],"n"]]]]]]]]]]]]],[3214,29,3214,31,[2,[],"ls"]]]]]]]]]]]]]]]]]]],[3217,9,3224,26,[0,[[0],[1,[3217,9,3217,28,[[3217,9,3217,21,"hasAllFields"],[3217,24,3217,28,[1,[3217,24,3217,28,[[],"Bool"]],[]]]]]],[3218,9,3224,26,[[3218,9,3218,21,"hasAllFields"],[],[3219,13,3224,26,[17,[[3219,18,3219,22,[2,[],"info"]],[[[3220,17,3220,34,[12,[[],"Just"],[[3220,22,3220,34,[12,[[],"HasAllFields"],[]]]]]],[3221,21,3221,25,[2,[],"True"]]],[[3223,17,3223,18,[0]],[3224,21,3224,26,[2,[],"False"]]]]]]]]]]]]],[3226,5,3236,35,[17,[[3226,10,3226,14,[2,[],"info"]],[[[3227,9,3227,31,[12,[[],"Just"],[[3227,14,3227,31,[14,[3227,15,3227,30,[12,[[],"HasFieldOrder"],[[3227,29,3227,30,[11,"f"]]]]]]]]]],[3229,13,3233,14,[9,[[3229,15,3232,16,[8,[[3229,17,3229,31,[[3229,17,3229,27,"fieldOrder"],[3229,30,3229,31,[2,[],"f"]]]],[3230,17,3231,15,[[3230,17,3230,28,"isSubrecord"],[3230,31,3230,36,[2,[],"False"]]]],[3231,17,3232,15,[[3231,17,3231,25,"typeName"],[3231,28,3231,30,[9,[]]]]]]]]]]]],[[3235,9,3235,10,[0]],[3236,13,3236,35,[0,[[3236,13,3236,23,[2,[],"getMatches"]],[3236,24,3236,35,[2,[],"matchFields"]]]]]]]]]]]]]]]]]],[3239,1,3252,6,[1,[[1,[3239,1,3241,3,"{-| A list of orders that match a list of fields, including both full matches\nand generic matches (with fields not present in the generic).\n-}"]],[3242,12,3242,24,"OrderMatches"],[],[3243,5,3252,6,[4,[[3243,7,3243,70,[[3243,7,3243,23,"canonicalMatches"],[3243,26,3243,70,[1,[3243,26,3243,30,[[],"List"]],[[3243,31,3243,70,[3,[[3243,33,3243,55,[3,[[3243,35,3243,45,[1,[3243,35,3243,45,[[],"ModuleName"]],[]]],[3243,47,3243,53,[1,[3243,47,3243,53,[[],"String"]],[]]]]]],[3243,57,3243,68,[1,[3243,57,3243,68,[[],"KnownRecord"]],[]]]]]]]]]]],[3244,7,3252,5,[[3244,7,3244,21,"genericMatches"],[3245,9,3251,14,[1,[3245,9,3245,13,[[],"List"]],[[3246,13,3251,14,[4,[[3246,15,3249,18,[[3246,15,3246,20,"type_"],[3247,17,3249,18,[3,[[3247,19,3247,41,[3,[[3247,21,3247,31,[1,[3247,21,3247,31,[[],"ModuleName"]],[]]],[3247,33,3247,39,[1,[3247,33,3247,39,[[],"String"]],[]]]]]],[3248,19,3248,30,[1,[3248,19,3248,30,[[],"KnownRecord"]],[]]]]]]]],[3250,15,3251,13,[[3250,15,3250,22,"missing"],[3250,25,3250,35,[1,[3250,25,3250,29,[[],"List"]],[[3250,30,3250,35,[1,[3250,30,3250,35,[[],"Field"]],[]]]]]]]]]]]]]]]]]]]]]],[3255,1,3338,13,[0,[[1,[3255,1,3257,3,"{-| Given context and a predicate to filter valid records, find a list of\nrecords that match a list of fields.\n-}"]],[1,[3258,1,3258,81,[[3258,1,3258,13,"searchOrders"],[3258,16,3258,81,[6,[3258,16,3258,26,[1,[3258,16,3258,26,[[],"RuleConfig"]],[]]],[3258,30,3258,81,[6,[3258,30,3258,43,[1,[3258,30,3258,43,[[],"ModuleContext"]],[]]],[3258,47,3258,81,[6,[3258,47,3258,51,[1,[3258,47,3258,51,[[],"Bool"]],[]]],[3258,55,3258,81,[6,[3258,55,3258,65,[1,[3258,55,3258,59,[[],"List"]],[[3258,60,3258,65,[1,[3258,60,3258,65,[[],"Field"]],[]]]]]],[3258,69,3258,81,[1,[3258,69,3258,81,[[],"OrderMatches"]],[]]]]]]]]]]]]]],[3259,1,3338,13,[[3259,1,3259,13,"searchOrders"],[[3259,14,3259,58,[14,[3259,15,3259,57,[12,[[],"RuleConfig"],[[3259,26,3259,57,[8,[[3259,28,3259,55,"typecheckUnambiguousRecords"]]]]]]]]],[3259,59,3259,66,[11,"context"]],[3259,67,3259,79,[11,"hasAllFields"]],[3259,80,3259,86,[11,"fields"]]],[3260,5,3338,13,[16,[[[3261,9,3264,33,[0,[[0],[1,[3261,9,3261,40,[[3261,9,3261,20,"matchFields"],[3261,23,3261,40,[1,[3261,23,3261,27,[[],"Dict"]],[[3261,28,3261,34,[1,[3261,28,3261,34,[[],"String"]],[]]],[3261,35,3261,40,[1,[3261,35,3261,40,[[],"Field"]],[]]]]]]]]],[3262,9,3264,33,[[3262,9,3262,20,"matchFields"],[],[3263,13,3264,33,[1,"|>",0,[3263,13,3263,51,[0,[[3263,13,3263,21,[2,["List"],"map"]],[3263,22,3263,44,[7,[3263,23,3263,43,[18,[[[3263,24,3263,25,[11,"f"]]],[3263,29,3263,43,[6,[[3263,31,3263,38,[19,[3263,31,3263,32,[2,[],"f"]],[3263,33,3263,38,"field"]]],[3263,40,3263,41,[2,[],"f"]]]]]]]]]],[3263,45,3263,51,[2,[],"fields"]]]]],[3264,20,3264,33,[2,["Dict"],"fromList"]]]]]]]]],[3266,9,3287,32,[0,[[0],[1,[3266,9,3266,41,[[3266,9,3266,19,"checkTypes"],[3266,22,3266,41,[6,[3266,22,3266,33,[1,[3266,22,3266,33,[[],"KnownRecord"]],[]]],[3266,37,3266,41,[1,[3266,37,3266,41,[[],"Bool"]],[]]]]]]]],[3267,9,3287,32,[[3267,9,3267,19,"checkTypes"],[[3267,20,3267,29,[8,[[3267,22,3267,27,"order"]]]]],[3268,13,3287,32,[1,"|>",0,[3268,13,3286,23,[0,[[3268,13,3268,23,[2,["List"],"foldl"]],[3269,17,3284,18,[7,[3269,18,3283,59,[18,[[[3269,19,3269,35,[8,[[3269,21,3269,26,"field"],[3269,28,3269,33,"type_"]]]],[3269,36,3269,56,[7,[[3269,38,3269,44,[11,"varAcc"]],[3269,46,3269,54,[11,"matchAcc"]]]]]],[3270,21,3283,59,[16,[[[3271,25,3276,71,[0,[[0],[1,[3271,25,3271,65,[[3271,25,3271,37,"assignedVars"],[3271,40,3271,65,[1,[3271,40,3271,44,[[],"Dict"]],[[3271,45,3271,60,[3,[[3271,47,3271,50,[1,[3271,47,3271,50,[[],"Int"]],[]]],[3271,52,3271,58,[1,[3271,52,3271,58,[[],"String"]],[]]]]]],[3271,61,3271,65,[1,[3271,61,3271,65,[[],"Type"]],[]]]]]]]]],[3272,25,3276,71,[[3272,25,3272,37,"assignedVars"],[],[3276,29,3276,71,[0,[[3276,29,3276,40,[2,["Dict"],"filter"]],[3276,41,3276,64,[7,[3276,42,3276,63,[18,[[[3276,43,3276,51,[7,[[3276,45,3276,46,[11,"i"]],[3276,48,3276,49,[0]]]]],[3276,52,3276,53,[0]]],[3276,57,3276,63,[1,"==",2,[3276,57,3276,58,[2,[],"i"]],[3276,62,3276,63,[3,2]]]]]]]]],[3276,65,3276,71,[2,[],"varAcc"]]]]]]]]]]],[3278,21,3283,59,[1,"|>",0,[3278,21,3282,68,[1,"|>",0,[3278,21,3280,70,[1,"|>",0,[3278,21,3279,79,[1,"|>",0,[3278,21,3278,41,[0,[[3278,21,3278,29,[2,["Dict"],"get"]],[3278,30,3278,35,[2,[],"field"]],[3278,36,3278,41,[2,[],"order"]]]]],[3279,28,3279,79,[0,[[3279,28,3279,37,[2,["Maybe"],"map"]],[3279,38,3279,79,[7,[3279,39,3279,78,[1,"<<",0,[3279,39,3279,62,[0,[[3279,39,3279,54,[2,[],"dereferenceType"]],[3279,55,3279,62,[2,[],"context"]]]]],[3279,66,3279,78,[2,["Tuple"],"second"]]]]]]]]]]],[3280,28,3280,70,[0,[[3280,28,3280,38,[2,["Maybe"],"map2"]],[3280,39,3280,64,[7,[3280,40,3280,63,[0,[[3280,40,3280,50,[2,[],"typesMatch"]],[3280,51,3280,63,[2,[],"assignedVars"]]]]]]],[3280,65,3280,70,[2,[],"type_"]]]]]]],[3282,28,3282,68,[0,[[3282,28,3282,45,[2,["Maybe"],"withDefault"]],[3282,46,3282,68,[6,[[3282,48,3282,60,[2,[],"assignedVars"]],[3282,62,3282,66,[2,[],"True"]]]]]]]]]],[3283,28,3283,59,[0,[[3283,28,3283,43,[2,["Tuple"],"mapSecond"]],[3283,44,3283,59,[7,[3283,45,3283,58,[0,[[3283,45,3283,49,[12,"&&"]],[3283,50,3283,58,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]]],[3285,17,3285,37,[6,[[3285,19,3285,29,[2,["Dict"],"empty"]],[3285,31,3285,35,[2,[],"True"]]]]],[3286,17,3286,23,[2,[],"fields"]]]]],[3287,20,3287,32,[2,["Tuple"],"second"]]]]]]]]],[3289,9,3295,36,[0,[[0],[1,[3289,9,3289,47,[[3289,9,3289,26,"missingFieldLimit"],[3289,29,3289,47,[6,[3289,29,3289,40,[1,[3289,29,3289,40,[[],"KnownRecord"]],[]]],[3289,44,3289,47,[1,[3289,44,3289,47,[[],"Int"]],[]]]]]]]],[3290,9,3295,36,[[3290,9,3290,26,"missingFieldLimit"],[],[3291,13,3295,36,[11,[3291,16,3291,28,[2,[],"hasAllFields"]],[3292,17,3292,25,[0,[[3292,17,3292,23,[2,[],"always"]],[3292,24,3292,25,[3,1]]]]],[3295,17,3295,36,[1,"<<",0,[3295,17,3295,26,[2,["Dict"],"size"]],[3295,30,3295,36,[20,".order"]]]]]]]]]]],[3297,9,3318,20,[0,[[0],[1,[3297,9,3297,83,[[3297,9,3297,13,"step"],[3297,16,3297,83,[6,[3297,16,3297,26,[1,[3297,16,3297,26,[[],"ModuleName"]],[]]],[3297,30,3297,83,[6,[3297,30,3297,36,[1,[3297,30,3297,36,[[],"String"]],[]]],[3297,40,3297,83,[6,[3297,40,3297,51,[1,[3297,40,3297,51,[[],"KnownRecord"]],[]]],[3297,55,3297,83,[6,[3297,55,3297,67,[1,[3297,55,3297,67,[[],"OrderMatches"]],[]]],[3297,71,3297,83,[1,[3297,71,3297,83,[[],"OrderMatches"]],[]]]]]]]]]]]]]],[3298,9,3318,20,[[3298,9,3298,13,"step"],[[3298,14,3298,24,[11,"moduleName"]],[3298,25,3298,29,[11,"name"]],[3298,30,3298,31,[11,"o"]],[3298,32,3298,35,[11,"acc"]]],[3299,13,3318,20,[11,[3299,16,3299,80,[1,">=",2,[3299,16,3299,57,[0,[[3299,16,3299,25,[2,["Dict"],"size"]],[3299,26,3299,57,[7,[3299,27,3299,56,[0,[[3299,27,3299,36,[2,["Dict"],"diff"]],[3299,37,3299,44,[19,[3299,37,3299,38,[2,[],"o"]],[3299,39,3299,44,"order"]]],[3299,45,3299,56,[2,[],"matchFields"]]]]]]]]]],[3299,61,3299,80,[0,[[3299,61,3299,78,[2,[],"missingFieldLimit"]],[3299,79,3299,80,[2,[],"o"]]]]]]],[3301,17,3301,20,[2,[],"acc"]],[3303,18,3318,20,[11,[3303,21,3303,32,[19,[3303,21,3303,22,[2,[],"o"]],[3303,23,3303,32,"isGeneric"]]],[3304,17,3310,18,[21,[3304,19,3304,22,"acc"],[[3305,23,3310,17,[[3305,23,3305,37,"genericMatches"],[3306,25,3309,50,[1,"::",1,[3306,25,3308,26,[8,[[3306,27,3306,62,[[3306,27,3306,32,"type_"],[3306,35,3306,62,[6,[[3306,37,3306,57,[6,[[3306,39,3306,49,[2,[],"moduleName"]],[3306,51,3306,55,[2,[],"name"]]]]],[3306,59,3306,60,[2,[],"o"]]]]]]],[3307,27,3308,25,[[3307,27,3307,34,"missing"],[3307,37,3307,81,[1,"<|",1,[3307,37,3307,48,[2,["Dict"],"values"]],[3307,52,3307,81,[0,[[3307,52,3307,61,[2,["Dict"],"diff"]],[3307,62,3307,73,[2,[],"matchFields"]],[3307,74,3307,81,[19,[3307,74,3307,75,[2,[],"o"]],[3307,76,3307,81,"order"]]]]]]]]]]]]],[3309,32,3309,50,[19,[3309,32,3309,35,[2,[],"acc"]],[3309,36,3309,50,"genericMatches"]]]]]]]]]],[3312,18,3318,20,[11,[3312,21,3312,66,[1,"<|",1,[3312,21,3312,33,[2,["Dict"],"isEmpty"]],[3312,37,3312,66,[0,[[3312,37,3312,46,[2,["Dict"],"diff"]],[3312,47,3312,58,[2,[],"matchFields"]],[3312,59,3312,66,[19,[3312,59,3312,60,[2,[],"o"]],[3312,61,3312,66,"order"]]]]]]]],[3314,17,3314,97,[21,[3314,19,3314,22,"acc"],[[3314,25,3314,96,[[3314,25,3314,41,"canonicalMatches"],[3314,44,3314,95,[1,"::",1,[3314,44,3314,71,[6,[[3314,46,3314,66,[6,[[3314,48,3314,58,[2,[],"moduleName"]],[3314,60,3314,64,[2,[],"name"]]]]],[3314,68,3314,69,[2,[],"o"]]]]],[3314,75,3314,95,[19,[3314,75,3314,78,[2,[],"acc"]],[3314,79,3314,95,"canonicalMatches"]]]]]]]]]],[3318,17,3318,20,[2,[],"acc"]]]]]]]]]]]]]],[3320,5,3338,13,[1,"|>",0,[3320,5,3328,33,[0,[[3320,5,3320,15,[2,["Dict"],"foldl"]],[3321,9,3326,10,[7,[3321,10,3325,28,[18,[[[3321,11,3321,21,[11,"moduleName"]],[3321,22,3321,33,[11,"moduleTypes"]],[3321,34,3321,42,[11,"outerAcc"]]],[3322,13,3325,28,[0,[[3322,13,3322,23,[2,["Dict"],"foldl"]],[3323,17,3323,34,[7,[3323,18,3323,33,[0,[[3323,18,3323,22,[2,[],"step"]],[3323,23,3323,33,[2,[],"moduleName"]]]]]]],[3324,17,3324,25,[2,[],"outerAcc"]],[3325,17,3325,28,[2,[],"moduleTypes"]]]]]]]]]],[3327,9,3327,55,[8,[[3327,11,3327,32,[[3327,11,3327,27,"canonicalMatches"],[3327,30,3327,32,[9,[]]]]],[3327,34,3327,54,[[3327,34,3327,48,"genericMatches"],[3327,51,3327,53,[9,[]]]]]]]],[3328,9,3328,33,[19,[3328,9,3328,16,[2,[],"context"]],[3328,17,3328,33,"canonicalRecords"]]]]]],[3329,12,3338,13,[7,[3329,13,3337,24,[18,[[[3329,14,3329,59,[14,[3329,15,3329,58,[13,[3329,15,3329,51,[8,[[3329,17,3329,33,"canonicalMatches"],[3329,35,3329,49,"genericMatches"]]]],[3329,55,3329,58,"res"]]]]]],[3330,17,3337,24,[11,[3330,20,3330,112,[1,"||",1,[3330,20,3330,47,[2,[],"typecheckUnambiguousRecords"]],[3330,51,3330,112,[1,">",2,[3330,51,3330,108,[1,"+",0,[3330,51,3330,79,[0,[[3330,51,3330,62,[2,["List"],"length"]],[3330,63,3330,79,[2,[],"canonicalMatches"]]]]],[3330,82,3330,108,[0,[[3330,82,3330,93,[2,["List"],"length"]],[3330,94,3330,108,[2,[],"genericMatches"]]]]]]],[3330,111,3330,112,[3,1]]]]]],[3332,21,3334,22,[8,[[3332,23,3332,99,[[3332,23,3332,39,"canonicalMatches"],[3332,42,3332,99,[0,[[3332,42,3332,53,[2,["List"],"filter"]],[3332,54,3332,82,[7,[3332,55,3332,81,[1,"<<",0,[3332,55,3332,65,[2,[],"checkTypes"]],[3332,69,3332,81,[2,["Tuple"],"second"]]]]]],[3332,83,3332,99,[2,[],"canonicalMatches"]]]]]]],[3333,23,3334,21,[[3333,23,3333,37,"genericMatches"],[3333,40,3333,105,[0,[[3333,40,3333,51,[2,["List"],"filter"]],[3333,52,3333,90,[7,[3333,53,3333,89,[1,"<<",0,[3333,53,3333,79,[1,"<<",0,[3333,53,3333,63,[2,[],"checkTypes"]],[3333,67,3333,79,[2,["Tuple"],"second"]]]],[3333,83,3333,89,[20,".type_"]]]]]],[3333,91,3333,105,[2,[],"genericMatches"]]]]]]]]]],[3337,21,3337,24,[2,[],"res"]]]]]]]]]]]]]]]]]]],[3341,1,3442,36,[0,[[1,[3341,1,3343,3,"{-| Check two `Type`s and see if they are theoretically equivalent (e.g. type\nvars can match anything.\n-}"]],[1,[3344,1,3344,118,[[3344,1,3344,11,"typesMatch"],[3344,14,3344,118,[6,[3344,14,3344,39,[1,[3344,14,3344,18,[[],"Dict"]],[[3344,19,3344,34,[3,[[3344,21,3344,24,[1,[3344,21,3344,24,[[],"Int"]],[]]],[3344,26,3344,32,[1,[3344,26,3344,32,[[],"String"]],[]]]]]],[3344,35,3344,39,[1,[3344,35,3344,39,[[],"Type"]],[]]]]]],[3344,43,3344,118,[6,[3344,43,3344,59,[1,[3344,43,3344,59,[[],"DereferencedType"]],[]]],[3344,63,3344,118,[6,[3344,63,3344,79,[1,[3344,63,3344,79,[[],"DereferencedType"]],[]]],[3344,83,3344,118,[3,[[3344,85,3344,110,[1,[3344,85,3344,89,[[],"Dict"]],[[3344,90,3344,105,[3,[[3344,92,3344,95,[1,[3344,92,3344,95,[[],"Int"]],[]]],[3344,97,3344,103,[1,[3344,97,3344,103,[[],"String"]],[]]]]]],[3344,106,3344,110,[1,[3344,106,3344,110,[[],"Type"]],[]]]]]],[3344,112,3344,116,[1,[3344,112,3344,116,[[],"Bool"]],[]]]]]]]]]]]]]]],[3345,1,3442,36,[[3345,1,3345,11,"typesMatch"],[[3345,12,3345,18,[11,"inVars"]],[3345,19,3345,48,[14,[3345,20,3345,47,[12,[[],"DereferencedType"],[[3345,37,3345,47,[11,"derefType1"]]]]]]],[3345,49,3345,78,[14,[3345,50,3345,77,[12,[[],"DereferencedType"],[[3345,67,3345,77,[11,"derefType2"]]]]]]]],[3346,5,3442,36,[16,[[[3347,9,3368,44,[0,[[0],[1,[3347,9,3347,133,[[3347,9,3347,22,"matchTypeVars"],[3347,25,3347,133,[6,[3347,25,3347,28,[1,[3347,25,3347,28,[[],"Int"]],[]]],[3347,32,3347,133,[6,[3347,32,3347,57,[1,[3347,32,3347,36,[[],"Dict"]],[[3347,37,3347,52,[3,[[3347,39,3347,42,[1,[3347,39,3347,42,[[],"Int"]],[]]],[3347,44,3347,50,[1,[3347,44,3347,50,[[],"String"]],[]]]]]],[3347,53,3347,57,[1,[3347,53,3347,57,[[],"Type"]],[]]]]]],[3347,61,3347,133,[6,[3347,61,3347,76,[1,[3347,61,3347,66,[[],"Maybe"]],[[3347,67,3347,76,[1,[3347,67,3347,76,[[],"Typeclass"]],[]]]]]],[3347,80,3347,133,[6,[3347,80,3347,86,[1,[3347,80,3347,86,[[],"String"]],[]]],[3347,90,3347,133,[6,[3347,90,3347,94,[1,[3347,90,3347,94,[[],"Type"]],[]]],[3347,98,3347,133,[3,[[3347,100,3347,125,[1,[3347,100,3347,104,[[],"Dict"]],[[3347,105,3347,120,[3,[[3347,107,3347,110,[1,[3347,107,3347,110,[[],"Int"]],[]]],[3347,112,3347,118,[1,[3347,112,3347,118,[[],"String"]],[]]]]]],[3347,121,3347,125,[1,[3347,121,3347,125,[[],"Type"]],[]]]]]],[3347,127,3347,131,[1,[3347,127,3347,131,[[],"Bool"]],[]]]]]]]]]]]]]]]]]]],[3348,9,3368,44,[[3348,9,3348,22,"matchTypeVars"],[[3348,23,3348,27,[11,"side"]],[3348,28,3348,36,[11,"typeVars"]],[3348,37,3348,46,[11,"typeclass"]],[3348,47,3348,51,[11,"name"]],[3348,52,3348,57,[11,"type_"]]],[3349,13,3368,44,[17,[[3349,18,3349,61,[6,[[3349,20,3349,52,[0,[[3349,20,3349,28,[2,["Dict"],"get"]],[3349,29,3349,43,[6,[[3349,31,3349,35,[2,[],"side"]],[3349,37,3349,41,[2,[],"name"]]]]],[3349,44,3349,52,[2,[],"typeVars"]]]]],[3349,54,3349,59,[2,[],"type_"]]]]],[[[3350,17,3350,30,[7,[[3350,19,3350,25,[12,[[],"Just"],[[3350,24,3350,25,[11,"t"]]]]],[3350,27,3350,28,[0]]]]],[3353,21,3354,73,[1,"|>",0,[3353,21,3353,69,[0,[[3353,21,3353,23,[2,[],"go"]],[3353,24,3353,61,[7,[3353,25,3353,60,[0,[[3353,25,3353,36,[2,["Dict"],"remove"]],[3353,37,3353,51,[6,[[3353,39,3353,43,[2,[],"side"]],[3353,45,3353,49,[2,[],"name"]]]]],[3353,52,3353,60,[2,[],"typeVars"]]]]]]],[3353,62,3353,63,[2,[],"t"]],[3353,64,3353,69,[2,[],"type_"]]]]],[3354,28,3354,73,[0,[[3354,28,3354,42,[2,["Tuple"],"mapFirst"]],[3354,43,3354,73,[7,[3354,44,3354,72,[0,[[3354,44,3354,55,[2,["Dict"],"insert"]],[3354,56,3354,70,[6,[[3354,58,3354,62,[2,[],"side"]],[3354,64,3354,68,[2,[],"name"]]]]],[3354,71,3354,72,[2,[],"t"]]]]]]]]]]]]],[[3356,17,3356,41,[7,[[3356,19,3356,26,[12,[[],"Nothing"],[]]],[3356,28,3356,39,[12,[[],"TypeVar"],[[3356,36,3356,37,[0]],[3356,38,3356,39,[0]]]]]]]],[3358,21,3358,39,[6,[[3358,23,3358,31,[2,[],"typeVars"]],[3358,33,3358,37,[2,[],"True"]]]]]],[[3360,17,3360,31,[7,[[3360,19,3360,26,[12,[[],"Nothing"],[]]],[3360,28,3360,29,[0]]]]],[3361,21,3368,44,[11,[3362,25,3363,54,[1,"|>",0,[3362,25,3362,69,[0,[[3362,25,3362,34,[2,["Maybe"],"map"]],[3362,35,3362,59,[7,[3362,36,3362,58,[0,[[3362,36,3362,52,[2,[],"matchesTypeClass"]],[3362,53,3362,58,[2,[],"type_"]]]]]]],[3362,60,3362,69,[2,[],"typeclass"]]]]],[3363,32,3363,54,[0,[[3363,32,3363,49,[2,["Maybe"],"withDefault"]],[3363,50,3363,54,[2,[],"True"]]]]]]],[3365,25,3365,76,[6,[[3365,27,3365,68,[0,[[3365,27,3365,38,[2,["Dict"],"insert"]],[3365,39,3365,53,[6,[[3365,41,3365,45,[2,[],"side"]],[3365,47,3365,51,[2,[],"name"]]]]],[3365,54,3365,59,[2,[],"type_"]],[3365,60,3365,68,[2,[],"typeVars"]]]]],[3365,70,3365,74,[2,[],"True"]]]]],[3368,25,3368,44,[6,[[3368,27,3368,35,[2,[],"typeVars"]],[3368,37,3368,42,[2,[],"False"]]]]]]]]]]]]]]]]],[3370,9,3382,43,[0,[[0],[1,[3370,9,3370,118,[[3370,9,3370,25,"checkListOfTypes"],[3370,28,3370,118,[6,[3370,28,3370,53,[1,[3370,28,3370,32,[[],"Dict"]],[[3370,33,3370,48,[3,[[3370,35,3370,38,[1,[3370,35,3370,38,[[],"Int"]],[]]],[3370,40,3370,46,[1,[3370,40,3370,46,[[],"String"]],[]]]]]],[3370,49,3370,53,[1,[3370,49,3370,53,[[],"Type"]],[]]]]]],[3370,57,3370,118,[6,[3370,57,3370,66,[1,[3370,57,3370,61,[[],"List"]],[[3370,62,3370,66,[1,[3370,62,3370,66,[[],"Type"]],[]]]]]],[3370,70,3370,118,[6,[3370,70,3370,79,[1,[3370,70,3370,74,[[],"List"]],[[3370,75,3370,79,[1,[3370,75,3370,79,[[],"Type"]],[]]]]]],[3370,83,3370,118,[3,[[3370,85,3370,110,[1,[3370,85,3370,89,[[],"Dict"]],[[3370,90,3370,105,[3,[[3370,92,3370,95,[1,[3370,92,3370,95,[[],"Int"]],[]]],[3370,97,3370,103,[1,[3370,97,3370,103,[[],"String"]],[]]]]]],[3370,106,3370,110,[1,[3370,106,3370,110,[[],"Type"]],[]]]]]],[3370,112,3370,116,[1,[3370,112,3370,116,[[],"Bool"]],[]]]]]]]]]]]]]]],[3371,9,3382,43,[[3371,9,3371,25,"checkListOfTypes"],[[3371,26,3371,34,[11,"typeVars"]],[3371,35,3371,38,[11,"t1s"]],[3371,39,3371,42,[11,"t2s"]]],[3372,13,3382,43,[11,[3372,16,3372,50,[1,"/=",2,[3372,16,3372,31,[0,[[3372,16,3372,27,[2,["List"],"length"]],[3372,28,3372,31,[2,[],"t1s"]]]]],[3372,35,3372,50,[0,[[3372,35,3372,46,[2,["List"],"length"]],[3372,47,3372,50,[2,[],"t2s"]]]]]]],[3373,17,3373,36,[6,[[3373,19,3373,27,[2,[],"typeVars"]],[3373,29,3373,34,[2,[],"False"]]]]],[3376,17,3382,43,[1,"|>",0,[3376,17,3376,34,[0,[[3376,17,3376,26,[2,["ListX"],"zip"]],[3376,27,3376,30,[2,[],"t1s"]],[3376,31,3376,34,[2,[],"t2s"]]]]],[3377,24,3382,43,[0,[[3377,24,3377,34,[2,["List"],"foldl"]],[3378,25,3381,26,[7,[3378,26,3380,67,[18,[[[3378,27,3378,39,[7,[[3378,29,3378,32,[11,"t1_"]],[3378,34,3378,37,[11,"t2_"]]]]],[3378,40,3378,60,[7,[[3378,42,3378,48,[11,"varAcc"]],[3378,50,3378,58,[11,"matchAcc"]]]]]],[3379,29,3380,67,[1,"|>",0,[3379,29,3379,46,[0,[[3379,29,3379,31,[2,[],"go"]],[3379,32,3379,38,[2,[],"varAcc"]],[3379,39,3379,42,[2,[],"t1_"]],[3379,43,3379,46,[2,[],"t2_"]]]]],[3380,36,3380,67,[0,[[3380,36,3380,51,[2,["Tuple"],"mapSecond"]],[3380,52,3380,67,[7,[3380,53,3380,66,[0,[[3380,53,3380,57,[12,"&&"]],[3380,58,3380,66,[2,[],"matchAcc"]]]]]]]]]]]]]]]]],[3382,25,3382,43,[6,[[3382,27,3382,35,[2,[],"typeVars"]],[3382,37,3382,41,[2,[],"True"]]]]]]]]]]]]]]]]],[3384,9,3400,21,[0,[[0],[1,[3384,9,3384,219,[[3384,9,3384,28,"validateRecordMatch"],[3384,31,3384,219,[6,[3384,31,3384,56,[1,[3384,31,3384,35,[[],"Dict"]],[[3384,36,3384,51,[3,[[3384,38,3384,41,[1,[3384,38,3384,41,[[],"Int"]],[]]],[3384,43,3384,49,[1,[3384,43,3384,49,[[],"String"]],[]]]]]],[3384,52,3384,56,[1,[3384,52,3384,56,[[],"Type"]],[]]]]]],[3384,60,3384,219,[6,[3384,60,3384,70,[1,[3384,60,3384,65,[[],"Maybe"]],[[3384,66,3384,70,[1,[3384,66,3384,70,[[],"Type"]],[]]]]]],[3384,74,3384,219,[6,[3384,74,3384,84,[1,[3384,74,3384,79,[[],"Maybe"]],[[3384,80,3384,84,[1,[3384,80,3384,84,[[],"Type"]],[]]]]]],[3384,88,3384,219,[6,[3384,88,3384,180,[4,[[3384,90,3384,116,[[3384,90,3384,94,"both"],[3384,97,3384,116,[1,[3384,97,3384,101,[[],"List"]],[[3384,102,3384,116,[3,[[3384,104,3384,108,[1,[3384,104,3384,108,[[],"Type"]],[]]],[3384,110,3384,114,[1,[3384,110,3384,114,[[],"Type"]],[]]]]]]]]]]],[3384,118,3384,147,[[3384,118,3384,123,"only1"],[3384,126,3384,147,[1,[3384,126,3384,130,[[],"List"]],[[3384,131,3384,147,[3,[[3384,133,3384,139,[1,[3384,133,3384,139,[[],"String"]],[]]],[3384,141,3384,145,[1,[3384,141,3384,145,[[],"Type"]],[]]]]]]]]]]],[3384,149,3384,179,[[3384,149,3384,154,"only2"],[3384,157,3384,178,[1,[3384,157,3384,161,[[],"List"]],[[3384,162,3384,178,[3,[[3384,164,3384,170,[1,[3384,164,3384,170,[[],"String"]],[]]],[3384,172,3384,176,[1,[3384,172,3384,176,[[],"Type"]],[]]]]]]]]]]]]]],[3384,184,3384,219,[3,[[3384,186,3384,211,[1,[3384,186,3384,190,[[],"Dict"]],[[3384,191,3384,206,[3,[[3384,193,3384,196,[1,[3384,193,3384,196,[[],"Int"]],[]]],[3384,198,3384,204,[1,[3384,198,3384,204,[[],"String"]],[]]]]]],[3384,207,3384,211,[1,[3384,207,3384,211,[[],"Type"]],[]]]]]],[3384,213,3384,217,[1,[3384,213,3384,217,[[],"Bool"]],[]]]]]]]]]]]]]]]]],[3385,9,3400,21,[[3385,9,3385,28,"validateRecordMatch"],[[3385,29,3385,37,[11,"typeVars"]],[3385,38,3385,46,[11,"generic1"]],[3385,47,3385,55,[11,"generic2"]],[3385,56,3385,78,[8,[[3385,58,3385,62,"both"],[3385,64,3385,69,"only1"],[3385,71,3385,76,"only2"]]]]],[3387,13,3400,21,[1,"|>",0,[3387,13,3394,21,[1,"|>",0,[3387,13,3388,72,[1,"|>",0,[3387,13,3387,28,[0,[[3387,13,3387,23,[2,["List"],"unzip"]],[3387,24,3387,28,[2,[],"both"]]]]],[3388,20,3388,72,[7,[3388,21,3388,71,[18,[[[3388,22,3388,34,[7,[[3388,24,3388,27,[11,"l1s"]],[3388,29,3388,32,[11,"l2s"]]]]]],[3388,38,3388,71,[0,[[3388,38,3388,54,[2,[],"checkListOfTypes"]],[3388,55,3388,63,[2,[],"typeVars"]],[3388,64,3388,67,[2,[],"l1s"]],[3388,68,3388,71,[2,[],"l2s"]]]]]]]]]]]],[3389,20,3394,21,[7,[3389,21,3393,63,[18,[[[3389,22,3389,40,[7,[[3389,24,3389,28,[11,"vars"]],[3389,30,3389,38,[11,"matchAcc"]]]]]],[3390,25,3393,63,[1,"|>",0,[3390,25,3392,78,[1,"|>",0,[3390,25,3391,139,[1,"|>",0,[3390,25,3390,61,[0,[[3390,25,3390,33,[2,[],"validate"]],[3390,34,3390,55,[7,[3390,35,3390,54,[1,"<<",0,[3390,35,3390,38,[2,[],"not"]],[3390,42,3390,54,[2,["List"],"isEmpty"]]]]]],[3390,56,3390,61,[2,[],"only1"]]]]],[3391,32,3391,139,[0,[[3391,32,3391,42,[2,["Maybe"],"map2"]],[3391,43,3391,130,[7,[3391,44,3391,129,[18,[[[3391,45,3391,46,[11,"g"]],[3391,47,3391,49,[11,"fs"]]],[3391,53,3391,129,[0,[[3391,53,3391,55,[2,[],"go"]],[3391,56,3391,60,[2,[],"vars"]],[3391,61,3391,127,[7,[3391,62,3391,126,[0,[[3391,62,3391,72,[2,[],"RecordType"]],[3391,73,3391,126,[8,[[3391,75,3391,92,[[3391,75,3391,82,"generic"],[3391,85,3391,92,[2,[],"Nothing"]]]],[3391,94,3391,111,[[3391,94,3391,103,"canonical"],[3391,106,3391,111,[2,[],"False"]]]],[3391,113,3391,125,[[3391,113,3391,119,"fields"],[3391,122,3391,124,[2,[],"fs"]]]]]]]]]]]],[3391,128,3391,129,[2,[],"g"]]]]]]]]]],[3391,131,3391,139,[2,[],"generic2"]]]]]]],[3392,32,3392,78,[0,[[3392,32,3392,49,[2,["Maybe"],"withDefault"]],[3392,50,3392,78,[6,[[3392,52,3392,56,[2,[],"vars"]],[3392,58,3392,76,[0,[[3392,58,3392,70,[2,["List"],"isEmpty"]],[3392,71,3392,76,[2,[],"only1"]]]]]]]]]]]]],[3393,32,3393,63,[0,[[3393,32,3393,47,[2,["Tuple"],"mapSecond"]],[3393,48,3393,63,[7,[3393,49,3393,62,[0,[[3393,49,3393,53,[12,"&&"]],[3393,54,3393,62,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]],[3395,20,3400,21,[7,[3395,21,3399,63,[18,[[[3395,22,3395,40,[7,[[3395,24,3395,28,[11,"vars"]],[3395,30,3395,38,[11,"matchAcc"]]]]]],[3396,25,3399,63,[1,"|>",0,[3396,25,3398,78,[1,"|>",0,[3396,25,3397,139,[1,"|>",0,[3396,25,3396,61,[0,[[3396,25,3396,33,[2,[],"validate"]],[3396,34,3396,55,[7,[3396,35,3396,54,[1,"<<",0,[3396,35,3396,38,[2,[],"not"]],[3396,42,3396,54,[2,["List"],"isEmpty"]]]]]],[3396,56,3396,61,[2,[],"only2"]]]]],[3397,32,3397,139,[0,[[3397,32,3397,42,[2,["Maybe"],"map2"]],[3397,43,3397,130,[7,[3397,44,3397,129,[18,[[[3397,45,3397,46,[11,"g"]],[3397,47,3397,49,[11,"fs"]]],[3397,53,3397,129,[0,[[3397,53,3397,55,[2,[],"go"]],[3397,56,3397,60,[2,[],"vars"]],[3397,61,3397,127,[7,[3397,62,3397,126,[0,[[3397,62,3397,72,[2,[],"RecordType"]],[3397,73,3397,126,[8,[[3397,75,3397,92,[[3397,75,3397,82,"generic"],[3397,85,3397,92,[2,[],"Nothing"]]]],[3397,94,3397,111,[[3397,94,3397,103,"canonical"],[3397,106,3397,111,[2,[],"False"]]]],[3397,113,3397,125,[[3397,113,3397,119,"fields"],[3397,122,3397,124,[2,[],"fs"]]]]]]]]]]]],[3397,128,3397,129,[2,[],"g"]]]]]]]]]],[3397,131,3397,139,[2,[],"generic1"]]]]]]],[3398,32,3398,78,[0,[[3398,32,3398,49,[2,["Maybe"],"withDefault"]],[3398,50,3398,78,[6,[[3398,52,3398,56,[2,[],"vars"]],[3398,58,3398,76,[0,[[3398,58,3398,70,[2,["List"],"isEmpty"]],[3398,71,3398,76,[2,[],"only2"]]]]]]]]]]]]],[3399,32,3399,63,[0,[[3399,32,3399,47,[2,["Tuple"],"mapSecond"]],[3399,48,3399,63,[7,[3399,49,3399,62,[0,[[3399,49,3399,53,[12,"&&"]],[3399,54,3399,62,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]]]]]]],[3402,9,3440,40,[0,[[0],[1,[3402,9,3402,94,[[3402,9,3402,11,"go"],[3402,14,3402,94,[6,[3402,14,3402,39,[1,[3402,14,3402,18,[[],"Dict"]],[[3402,19,3402,34,[3,[[3402,21,3402,24,[1,[3402,21,3402,24,[[],"Int"]],[]]],[3402,26,3402,32,[1,[3402,26,3402,32,[[],"String"]],[]]]]]],[3402,35,3402,39,[1,[3402,35,3402,39,[[],"Type"]],[]]]]]],[3402,43,3402,94,[6,[3402,43,3402,47,[1,[3402,43,3402,47,[[],"Type"]],[]]],[3402,51,3402,94,[6,[3402,51,3402,55,[1,[3402,51,3402,55,[[],"Type"]],[]]],[3402,59,3402,94,[3,[[3402,61,3402,86,[1,[3402,61,3402,65,[[],"Dict"]],[[3402,66,3402,81,[3,[[3402,68,3402,71,[1,[3402,68,3402,71,[[],"Int"]],[]]],[3402,73,3402,79,[1,[3402,73,3402,79,[[],"String"]],[]]]]]],[3402,82,3402,86,[1,[3402,82,3402,86,[[],"Type"]],[]]]]]],[3402,88,3402,92,[1,[3402,88,3402,92,[[],"Bool"]],[]]]]]]]]]]]]]]],[3403,9,3440,40,[[3403,9,3403,11,"go"],[[3403,12,3403,20,[11,"typeVars"]],[3403,21,3403,26,[11,"type1"]],[3403,27,3403,32,[11,"type2"]]],[3404,13,3440,40,[17,[[3404,18,3404,34,[6,[[3404,20,3404,25,[2,[],"type1"]],[3404,27,3404,32,[2,[],"type2"]]]]],[[[3405,17,3405,35,[7,[[3405,19,3405,30,[12,[[],"TypeVar"],[[3405,27,3405,28,[11,"c"]],[3405,29,3405,30,[11,"n"]]]]],[3405,32,3405,33,[11,"t"]]]]],[3406,21,3406,51,[0,[[3406,21,3406,34,[2,[],"matchTypeVars"]],[3406,35,3406,36,[3,1]],[3406,37,3406,45,[2,[],"typeVars"]],[3406,46,3406,47,[2,[],"c"]],[3406,48,3406,49,[2,[],"n"]],[3406,50,3406,51,[2,[],"t"]]]]]],[[3408,17,3408,35,[7,[[3408,19,3408,20,[11,"t"]],[3408,22,3408,33,[12,[[],"TypeVar"],[[3408,30,3408,31,[11,"c"]],[3408,32,3408,33,[11,"n"]]]]]]]],[3409,21,3409,51,[0,[[3409,21,3409,34,[2,[],"matchTypeVars"]],[3409,35,3409,36,[3,2]],[3409,37,3409,45,[2,[],"typeVars"]],[3409,46,3409,47,[2,[],"c"]],[3409,48,3409,49,[2,[],"n"]],[3409,50,3409,51,[2,[],"t"]]]]]],[[3411,17,3411,45,[7,[[3411,19,3411,30,[12,[[],"ListType"],[[3411,28,3411,30,[11,"t1"]]]]],[3411,32,3411,43,[12,[[],"ListType"],[[3411,41,3411,43,[11,"t2"]]]]]]]],[3412,21,3412,38,[0,[[3412,21,3412,23,[2,[],"go"]],[3412,24,3412,32,[2,[],"typeVars"]],[3412,33,3412,35,[2,[],"t1"]],[3412,36,3412,38,[2,[],"t2"]]]]]],[[3414,17,3414,49,[7,[[3414,19,3414,32,[12,[[],"TupleType"],[[3414,29,3414,32,[11,"t1s"]]]]],[3414,34,3414,47,[12,[[],"TupleType"],[[3414,44,3414,47,[11,"t2s"]]]]]]]],[3416,21,3416,54,[0,[[3416,21,3416,37,[2,[],"checkListOfTypes"]],[3416,38,3416,46,[2,[],"typeVars"]],[3416,47,3416,50,[2,[],"t1s"]],[3416,51,3416,54,[2,[],"t2s"]]]]]],[[3418,17,3418,53,[7,[[3418,19,3418,34,[12,[[],"FunctionType"],[[3418,32,3418,34,[11,"f1"]]]]],[3418,36,3418,51,[12,[[],"FunctionType"],[[3418,49,3418,51,[11,"f2"]]]]]]]],[3419,21,3419,84,[0,[[3419,21,3419,37,[2,[],"checkListOfTypes"]],[3419,38,3419,46,[2,[],"typeVars"]],[3419,47,3419,65,[9,[[3419,49,3419,56,[19,[3419,49,3419,51,[2,[],"f1"]],[3419,52,3419,56,"from"]]],[3419,58,3419,63,[19,[3419,58,3419,60,[2,[],"f1"]],[3419,61,3419,63,"to"]]]]]],[3419,66,3419,84,[9,[[3419,68,3419,75,[19,[3419,68,3419,70,[2,[],"f1"]],[3419,71,3419,75,"from"]]],[3419,77,3419,82,[19,[3419,77,3419,79,[2,[],"f2"]],[3419,80,3419,82,"to"]]]]]]]]]],[[3421,17,3421,39,[7,[[3421,19,3421,27,[12,[[],"UnitType"],[]]],[3421,29,3421,37,[12,[[],"UnitType"],[]]]]]],[3422,21,3422,39,[6,[[3422,23,3422,31,[2,[],"typeVars"]],[3422,33,3422,37,[2,[],"True"]]]]]],[[3424,17,3424,59,[7,[[3424,19,3424,37,[12,[[],"NamedType"],[[3424,29,3424,31,[11,"n1"]],[3424,32,3424,37,[11,"args1"]]]]],[3424,39,3424,57,[12,[[],"NamedType"],[[3424,49,3424,51,[11,"n2"]],[3424,52,3424,57,[11,"args2"]]]]]]]],[3425,21,3426,61,[1,"|>",0,[3425,21,3425,58,[0,[[3425,21,3425,37,[2,[],"checkListOfTypes"]],[3425,38,3425,46,[2,[],"typeVars"]],[3425,47,3425,52,[2,[],"args1"]],[3425,53,3425,58,[2,[],"args2"]]]]],[3426,28,3426,61,[0,[[3426,28,3426,43,[2,["Tuple"],"mapSecond"]],[3426,44,3426,61,[7,[3426,45,3426,60,[0,[[3426,45,3426,49,[12,"&&"]],[3426,50,3426,60,[7,[3426,51,3426,59,[1,"==",2,[3426,51,3426,53,[2,[],"n1"]],[3426,57,3426,59,[2,[],"n2"]]]]]]]]]]]]]]]]],[[3428,17,3428,49,[7,[[3428,19,3428,32,[12,[[],"RecordType"],[[3428,30,3428,32,[11,"r1"]]]]],[3428,34,3428,47,[12,[[],"RecordType"],[[3428,45,3428,47,[11,"r2"]]]]]]]],[3430,21,3437,78,[1,"|>",0,[3430,21,3436,62,[0,[[3430,21,3430,31,[2,["Dict"],"merge"]],[3431,25,3431,80,[7,[3431,26,3431,79,[18,[[[3431,27,3431,28,[11,"f"]],[3431,29,3431,31,[11,"t1"]],[3431,32,3431,35,[11,"acc"]]],[3431,39,3431,79,[21,[3431,41,3431,44,"acc"],[[3431,47,3431,78,[[3431,47,3431,52,"only1"],[3431,55,3431,77,[1,"::",1,[3431,55,3431,64,[6,[[3431,57,3431,58,[2,[],"f"]],[3431,60,3431,62,[2,[],"t1"]]]]],[3431,68,3431,77,[19,[3431,68,3431,71,[2,[],"acc"]],[3431,72,3431,77,"only1"]]]]]]]]]]]]]]],[3432,25,3432,82,[7,[3432,26,3432,81,[18,[[[3432,27,3432,28,[0]],[3432,29,3432,31,[11,"t1"]],[3432,32,3432,34,[11,"t2"]],[3432,35,3432,38,[11,"acc"]]],[3432,42,3432,81,[21,[3432,44,3432,47,"acc"],[[3432,50,3432,80,[[3432,50,3432,54,"both"],[3432,57,3432,79,[1,"::",1,[3432,57,3432,67,[6,[[3432,59,3432,61,[2,[],"t1"]],[3432,63,3432,65,[2,[],"t2"]]]]],[3432,71,3432,79,[19,[3432,71,3432,74,[2,[],"acc"]],[3432,75,3432,79,"both"]]]]]]]]]]]]]]],[3433,25,3433,80,[7,[3433,26,3433,79,[18,[[[3433,27,3433,28,[11,"f"]],[3433,29,3433,31,[11,"t2"]],[3433,32,3433,35,[11,"acc"]]],[3433,39,3433,79,[21,[3433,41,3433,44,"acc"],[[3433,47,3433,78,[[3433,47,3433,52,"only2"],[3433,55,3433,77,[1,"::",1,[3433,55,3433,64,[6,[[3433,57,3433,58,[2,[],"f"]],[3433,60,3433,62,[2,[],"t2"]]]]],[3433,68,3433,77,[19,[3433,68,3433,71,[2,[],"acc"]],[3433,72,3433,77,"only2"]]]]]]]]]]]]]]],[3434,25,3434,50,[7,[3434,26,3434,49,[0,[[3434,26,3434,39,[2,["Dict"],"fromList"]],[3434,40,3434,49,[19,[3434,40,3434,42,[2,[],"r1"]],[3434,43,3434,49,"fields"]]]]]]]],[3435,25,3435,50,[7,[3435,26,3435,49,[0,[[3435,26,3435,39,[2,["Dict"],"fromList"]],[3435,40,3435,49,[19,[3435,40,3435,42,[2,[],"r2"]],[3435,43,3435,49,"fields"]]]]]]]],[3436,25,3436,62,[8,[[3436,27,3436,36,[[3436,27,3436,31,"both"],[3436,34,3436,36,[9,[]]]]],[3436,38,3436,48,[[3436,38,3436,43,"only1"],[3436,46,3436,48,[9,[]]]]],[3436,50,3436,61,[[3436,50,3436,55,"only2"],[3436,58,3436,60,[9,[]]]]]]]]]]],[3437,28,3437,78,[0,[[3437,28,3437,47,[2,[],"validateRecordMatch"]],[3437,48,3437,56,[2,[],"typeVars"]],[3437,57,3437,67,[19,[3437,57,3437,59,[2,[],"r1"]],[3437,60,3437,67,"generic"]]],[3437,68,3437,78,[19,[3437,68,3437,70,[2,[],"r2"]],[3437,71,3437,78,"generic"]]]]]]]]],[[3439,17,3439,18,[0]],[3440,21,3440,40,[6,[[3440,23,3440,31,[2,[],"typeVars"]],[3440,33,3440,38,[2,[],"False"]]]]]]]]]]]]]]]],[3442,5,3442,36,[0,[[3442,5,3442,7,[2,[],"go"]],[3442,8,3442,14,[2,[],"inVars"]],[3442,15,3442,25,[2,[],"derefType1"]],[3442,26,3442,36,[2,[],"derefType2"]]]]]]]]]]]]],[3445,1,3512,31,[0,[[1,[3445,1,3446,3,"{-| Check if a type matches a constrained type variable.\n-}"]],[1,[3447,1,3447,45,[[3447,1,3447,17,"matchesTypeClass"],[3447,20,3447,45,[6,[3447,20,3447,24,[1,[3447,20,3447,24,[[],"Type"]],[]]],[3447,28,3447,45,[6,[3447,28,3447,37,[1,[3447,28,3447,37,[[],"Typeclass"]],[]]],[3447,41,3447,45,[1,[3447,41,3447,45,[[],"Bool"]],[]]]]]]]]]],[3448,1,3512,31,[[3448,1,3448,17,"matchesTypeClass"],[[3448,18,3448,23,[11,"type_"]],[3448,24,3448,29,[11,"class"]]],[3449,5,3512,31,[16,[[[3450,9,3473,26,[0,[[0],[1,[3450,9,3450,40,[[3450,9,3450,25,"typeIsComparable"],[3450,28,3450,40,[6,[3450,28,3450,32,[1,[3450,28,3450,32,[[],"Type"]],[]]],[3450,36,3450,40,[1,[3450,36,3450,40,[[],"Bool"]],[]]]]]]]],[3451,9,3473,26,[[3451,9,3451,25,"typeIsComparable"],[[3451,26,3451,27,[11,"t"]]],[3452,13,3473,26,[17,[[3452,18,3452,19,[2,[],"t"]],[[[3453,17,3453,56,[12,[[],"NamedType"],[[3453,27,3453,53,[7,[[3453,29,3453,41,[10,[[3453,31,3453,39,[3,"String"]]]]],[3453,43,3453,51,[3,"String"]]]]],[3453,54,3453,56,[10,[]]]]]],[3454,21,3454,25,[2,[],"True"]]],[[3456,17,3456,52,[12,[[],"NamedType"],[[3456,27,3456,49,[7,[[3456,29,3456,39,[10,[[3456,31,3456,37,[3,"Char"]]]]],[3456,41,3456,47,[3,"Char"]]]]],[3456,50,3456,52,[10,[]]]]]],[3457,21,3457,25,[2,[],"True"]]],[[3459,17,3459,53,[12,[[],"NamedType"],[[3459,27,3459,50,[7,[[3459,29,3459,41,[10,[[3459,31,3459,39,[3,"Basics"]]]]],[3459,43,3459,48,[3,"Int"]]]]],[3459,51,3459,53,[10,[]]]]]],[3460,21,3460,25,[2,[],"True"]]],[[3462,17,3462,55,[12,[[],"NamedType"],[[3462,27,3462,52,[7,[[3462,29,3462,41,[10,[[3462,31,3462,39,[3,"Basics"]]]]],[3462,43,3462,50,[3,"Float"]]]]],[3462,53,3462,55,[10,[]]]]]],[3463,21,3463,25,[2,[],"True"]]],[[3465,17,3465,28,[12,[[],"ListType"],[[3465,26,3465,28,[11,"t_"]]]]],[3466,21,3466,40,[0,[[3466,21,3466,37,[2,[],"typeIsComparable"]],[3466,38,3466,40,[2,[],"t_"]]]]]],[[3468,17,3468,29,[12,[[],"TupleType"],[[3468,27,3468,29,[11,"ts"]]]]],[3469,21,3469,49,[0,[[3469,21,3469,29,[2,["List"],"all"]],[3469,30,3469,46,[2,[],"typeIsComparable"]],[3469,47,3469,49,[2,[],"ts"]]]]]],[[3471,17,3471,18,[0]],[3473,21,3473,26,[2,[],"False"]]]]]]]]]]]],[3475,9,3486,26,[0,[[0],[1,[3475,9,3475,40,[[3475,9,3475,25,"typeIsAppendable"],[3475,28,3475,40,[6,[3475,28,3475,32,[1,[3475,28,3475,32,[[],"Type"]],[]]],[3475,36,3475,40,[1,[3475,36,3475,40,[[],"Bool"]],[]]]]]]]],[3476,9,3486,26,[[3476,9,3476,25,"typeIsAppendable"],[[3476,26,3476,27,[11,"t"]]],[3477,13,3486,26,[17,[[3477,18,3477,19,[2,[],"t"]],[[[3478,17,3478,56,[12,[[],"NamedType"],[[3478,27,3478,53,[7,[[3478,29,3478,41,[10,[[3478,31,3478,39,[3,"String"]]]]],[3478,43,3478,51,[3,"String"]]]]],[3478,54,3478,56,[10,[]]]]]],[3479,21,3479,25,[2,[],"True"]]],[[3481,17,3481,27,[12,[[],"ListType"],[[3481,26,3481,27,[0]]]]],[3482,21,3482,25,[2,[],"True"]]],[[3484,17,3484,18,[0]],[3486,21,3486,26,[2,[],"False"]]]]]]]]]]]],[3488,9,3499,26,[0,[[0],[1,[3488,9,3488,36,[[3488,9,3488,21,"typeIsNumber"],[3488,24,3488,36,[6,[3488,24,3488,28,[1,[3488,24,3488,28,[[],"Type"]],[]]],[3488,32,3488,36,[1,[3488,32,3488,36,[[],"Bool"]],[]]]]]]]],[3489,9,3499,26,[[3489,9,3489,21,"typeIsNumber"],[[3489,22,3489,23,[11,"t"]]],[3490,13,3499,26,[17,[[3490,18,3490,19,[2,[],"t"]],[[[3491,17,3491,53,[12,[[],"NamedType"],[[3491,27,3491,50,[7,[[3491,29,3491,41,[10,[[3491,31,3491,39,[3,"Basics"]]]]],[3491,43,3491,48,[3,"Int"]]]]],[3491,51,3491,53,[10,[]]]]]],[3492,21,3492,25,[2,[],"True"]]],[[3494,17,3494,55,[12,[[],"NamedType"],[[3494,27,3494,52,[7,[[3494,29,3494,41,[10,[[3494,31,3494,39,[3,"Basics"]]]]],[3494,43,3494,50,[3,"Float"]]]]],[3494,53,3494,55,[10,[]]]]]],[3495,21,3495,25,[2,[],"True"]]],[[3497,17,3497,18,[0]],[3499,21,3499,26,[2,[],"False"]]]]]]]]]]]]],[3501,5,3512,31,[17,[[3501,10,3501,15,[2,[],"class"]],[[[3502,9,3502,19,[12,[[],"Appendable"],[]]],[3503,13,3503,35,[0,[[3503,13,3503,29,[2,[],"typeIsAppendable"]],[3503,30,3503,35,[2,[],"type_"]]]]]],[[3505,9,3505,19,[12,[[],"Comparable"],[]]],[3506,13,3506,35,[0,[[3506,13,3506,29,[2,[],"typeIsComparable"]],[3506,30,3506,35,[2,[],"type_"]]]]]],[[3508,9,3508,19,[12,[[],"CompAppend"],[]]],[3509,13,3509,61,[1,"&&",1,[3509,13,3509,35,[0,[[3509,13,3509,29,[2,[],"typeIsAppendable"]],[3509,30,3509,35,[2,[],"type_"]]]]],[3509,39,3509,61,[0,[[3509,39,3509,55,[2,[],"typeIsComparable"]],[3509,56,3509,61,[2,[],"type_"]]]]]]]],[[3511,9,3511,15,[12,[[],"Number"],[]]],[3512,13,3512,31,[0,[[3512,13,3512,25,[2,[],"typeIsNumber"]],[3512,26,3512,31,[2,[],"type_"]]]]]]]]]]]]]]]]]],[3515,1,3694,38,[0,[[1,[3515,1,3516,3,"{-| Do some half-hearted type inference to help differentiate records.\n-}"]],[1,[3517,1,3517,74,[[3517,1,3517,14,"inferExprType"],[3517,17,3517,74,[6,[3517,17,3517,29,[1,[3517,17,3517,29,[[],"LocalContext"]],[]]],[3517,33,3517,74,[6,[3517,33,3517,48,[1,[3517,33,3517,37,[[],"Node"]],[[3517,38,3517,48,[1,[3517,38,3517,48,[[],"Expression"]],[]]]]]],[3517,52,3517,74,[1,[3517,52,3517,57,[[],"Maybe"]],[[3517,58,3517,74,[1,[3517,58,3517,74,[[],"DereferencedType"]],[]]]]]]]]]]]]],[3518,1,3694,38,[[3518,1,3518,14,"inferExprType"],[[3518,15,3518,20,[11,"local"]]],[3519,5,3694,38,[16,[[[3520,9,3527,22,[0,[[0],[1,[3520,9,3520,73,[[3520,9,3520,17,"makeFunc"],[3520,20,3520,73,[6,[3520,20,3520,26,[1,[3520,20,3520,26,[[],"String"]],[]]],[3520,30,3520,73,[6,[3520,30,3520,59,[1,[3520,30,3520,35,[[],"Maybe"]],[[3520,36,3520,59,[1,[3520,37,3520,41,[[],"List"]],[[3520,42,3520,58,[1,[3520,42,3520,58,[[],"DereferencedType"]],[]]]]]]]]],[3520,63,3520,73,[1,[3520,63,3520,68,[[],"Maybe"]],[[3520,69,3520,73,[1,[3520,69,3520,73,[[],"Type"]],[]]]]]]]]]]]]],[3521,9,3527,22,[[3521,9,3521,17,"makeFunc"],[[3521,18,3521,31,[11,"typeVarPrefix"]]],[3522,13,3527,22,[1,">>",1,[3522,13,3522,64,[0,[[3522,13,3522,22,[2,["Maybe"],"map"]],[3522,23,3522,64,[7,[3522,24,3522,63,[0,[[3522,24,3522,32,[2,["List"],"map"]],[3522,33,3522,63,[7,[3522,34,3522,62,[0,[[3522,34,3522,48,[2,[],"prefixTypeVars"]],[3522,49,3522,62,[2,[],"typeVarPrefix"]]]]]]]]]]]]]]],[3523,20,3527,22,[1,">>",1,[3523,20,3523,50,[0,[[3523,20,3523,33,[2,["Maybe"],"andThen"]],[3523,34,3523,50,[2,["ListX"],"unconsLast"]]]]],[3524,20,3527,22,[0,[[3524,20,3524,29,[2,["Maybe"],"map"]],[3525,21,3527,22,[7,[3525,22,3526,65,[1,">>",1,[3525,22,3525,62,[0,[[3525,22,3525,35,[2,["Tuple"],"mapBoth"]],[3525,36,3525,43,[2,[],"getType"]],[3525,44,3525,62,[7,[3525,45,3525,61,[0,[[3525,45,3525,53,[2,["List"],"map"]],[3525,54,3525,61,[2,[],"getType"]]]]]]]]]],[3526,28,3526,65,[7,[3526,29,3526,64,[18,[[[3526,30,3526,39,[7,[[3526,32,3526,33,[11,"r"]],[3526,35,3526,37,[11,"ts"]]]]]],[3526,43,3526,64,[0,[[3526,43,3526,59,[2,[],"makeFunctionType"]],[3526,60,3526,61,[2,[],"r"]],[3526,62,3526,64,[2,[],"ts"]]]]]]]]]]]]]]]]]]]]]]]]]],[3529,9,3691,30,[0,[[0],[1,[3529,9,3529,53,[[3529,9,3529,11,"go"],[3529,14,3529,53,[6,[3529,14,3529,20,[1,[3529,14,3529,20,[[],"String"]],[]]],[3529,24,3529,53,[6,[3529,24,3529,39,[1,[3529,24,3529,28,[[],"Node"]],[[3529,29,3529,39,[1,[3529,29,3529,39,[[],"Expression"]],[]]]]]],[3529,43,3529,53,[1,[3529,43,3529,48,[[],"Maybe"]],[[3529,49,3529,53,[1,[3529,49,3529,53,[[],"Type"]],[]]]]]]]]]]]]],[3530,9,3691,30,[[3530,9,3530,11,"go"],[[3530,12,3530,25,[11,"typeVarPrefix"]],[3530,26,3530,30,[11,"node"]]],[3531,13,3691,30,[17,[[3531,18,3531,33,[0,[[3531,18,3531,28,[2,["Node"],"value"]],[3531,29,3531,33,[2,[],"node"]]]]],[[[3532,17,3532,25,[12,[[],"UnitExpr"],[]]],[3534,21,3534,34,[0,[[3534,21,3534,25,[2,[],"Just"]],[3534,26,3534,34,[2,[],"UnitType"]]]]]],[[3536,17,3536,26,[12,[[],"Integer"],[[3536,25,3536,26,[0]]]]],[3537,21,3537,65,[1,"<|",1,[3537,21,3537,25,[2,[],"Just"]],[3537,29,3537,65,[0,[[3537,29,3537,38,[2,[],"NamedType"]],[3537,39,3537,62,[6,[[3537,41,3537,53,[9,[[3537,43,3537,51,[5,"Basics"]]]]],[3537,55,3537,60,[5,"Int"]]]]],[3537,63,3537,65,[9,[]]]]]]]]],[[3539,17,3539,22,[12,[[],"Hex"],[[3539,21,3539,22,[0]]]]],[3540,21,3540,65,[1,"<|",1,[3540,21,3540,25,[2,[],"Just"]],[3540,29,3540,65,[0,[[3540,29,3540,38,[2,[],"NamedType"]],[3540,39,3540,62,[6,[[3540,41,3540,53,[9,[[3540,43,3540,51,[5,"Basics"]]]]],[3540,55,3540,60,[5,"Int"]]]]],[3540,63,3540,65,[9,[]]]]]]]]],[[3542,17,3542,28,[12,[[],"Floatable"],[[3542,27,3542,28,[0]]]]],[3543,21,3543,67,[1,"<|",1,[3543,21,3543,25,[2,[],"Just"]],[3543,29,3543,67,[0,[[3543,29,3543,38,[2,[],"NamedType"]],[3543,39,3543,64,[6,[[3543,41,3543,53,[9,[[3543,43,3543,51,[5,"Basics"]]]]],[3543,55,3543,62,[5,"Float"]]]]],[3543,65,3543,67,[9,[]]]]]]]]],[[3545,17,3545,26,[12,[[],"Literal"],[[3545,25,3545,26,[0]]]]],[3546,21,3546,68,[1,"<|",1,[3546,21,3546,25,[2,[],"Just"]],[3546,29,3546,68,[0,[[3546,29,3546,38,[2,[],"NamedType"]],[3546,39,3546,65,[6,[[3546,41,3546,53,[9,[[3546,43,3546,51,[5,"String"]]]]],[3546,55,3546,63,[5,"String"]]]]],[3546,66,3546,68,[9,[]]]]]]]]],[[3548,17,3548,30,[12,[[],"CharLiteral"],[[3548,29,3548,30,[0]]]]],[3549,21,3549,64,[1,"<|",1,[3549,21,3549,25,[2,[],"Just"]],[3549,29,3549,64,[0,[[3549,29,3549,38,[2,[],"NamedType"]],[3549,39,3549,61,[6,[[3549,41,3549,51,[9,[[3549,43,3549,49,[5,"Char"]]]]],[3549,53,3549,59,[5,"Char"]]]]],[3549,62,3549,64,[9,[]]]]]]]]],[[3551,17,3551,36,[12,[[],"TupledExpression"],[[3551,34,3551,36,[11,"es"]]]]],[3552,21,3554,47,[1,"|>",0,[3552,21,3553,42,[1,"|>",0,[3552,21,3552,113,[0,[[3552,21,3552,36,[2,["List"],"indexedMap"]],[3552,37,3552,110,[7,[3552,38,3552,109,[18,[[[3552,39,3552,40,[11,"i"]],[3552,41,3552,42,[11,"e"]]],[3552,46,3552,109,[0,[[3552,46,3552,48,[2,[],"go"]],[3552,49,3552,107,[7,[3552,50,3552,106,[1,"++",1,[3552,50,3552,63,[2,[],"typeVarPrefix"]],[3552,67,3552,106,[1,"++",1,[3552,67,3552,86,[5,"Tuple Expression "]],[3552,90,3552,106,[0,[[3552,90,3552,104,[2,["String"],"fromInt"]],[3552,105,3552,106,[2,[],"i"]]]]]]]]]]],[3552,108,3552,109,[2,[],"e"]]]]]]]]]],[3552,111,3552,113,[2,[],"es"]]]]],[3553,28,3553,42,[2,["MaybeX"],"combine"]]]],[3554,28,3554,47,[0,[[3554,28,3554,37,[2,["Maybe"],"map"]],[3554,38,3554,47,[2,[],"TupleType"]]]]]]]],[[3556,17,3556,28,[12,[[],"ListExpr"],[[3556,26,3556,28,[11,"es"]]]]],[3557,21,3566,50,[11,[3557,24,3557,39,[0,[[3557,24,3557,36,[2,["List"],"isEmpty"]],[3557,37,3557,39,[2,[],"es"]]]]],[3559,25,3559,108,[0,[[3559,25,3559,29,[2,[],"Just"]],[3559,30,3559,108,[7,[3559,31,3559,107,[0,[[3559,31,3559,39,[2,[],"ListType"]],[3559,40,3559,107,[7,[3559,41,3559,106,[1,"<|",1,[3559,41,3559,56,[0,[[3559,41,3559,48,[2,[],"TypeVar"]],[3559,49,3559,56,[2,[],"Nothing"]]]]],[3559,60,3559,106,[1,"++",1,[3559,60,3559,73,[2,[],"typeVarPrefix"]],[3559,77,3559,106,[5,"inferred empty list typevar"]]]]]]]]]]]]]]]],[3563,25,3566,50,[1,"|>",0,[3563,25,3565,42,[1,"|>",0,[3563,25,3564,45,[1,"|>",0,[3563,25,3563,113,[0,[[3563,25,3563,40,[2,["List"],"indexedMap"]],[3563,41,3563,110,[7,[3563,42,3563,109,[18,[[[3563,43,3563,44,[11,"i"]],[3563,45,3563,46,[11,"e"]]],[3563,50,3563,109,[0,[[3563,50,3563,52,[2,[],"go"]],[3563,53,3563,107,[7,[3563,54,3563,106,[1,"++",1,[3563,54,3563,67,[2,[],"typeVarPrefix"]],[3563,71,3563,106,[1,"++",1,[3563,71,3563,86,[5,"List Element "]],[3563,90,3563,106,[0,[[3563,90,3563,104,[2,["String"],"fromInt"]],[3563,105,3563,106,[2,[],"i"]]]]]]]]]]],[3563,108,3563,109,[2,[],"e"]]]]]]]]]],[3563,111,3563,113,[2,[],"es"]]]]],[3564,32,3564,45,[2,["MaybeX"],"values"]]]],[3565,32,3565,42,[2,[],"unifyTypes"]]]],[3566,32,3566,50,[0,[[3566,32,3566,41,[2,["Maybe"],"map"]],[3566,42,3566,50,[2,[],"ListType"]]]]]]]]]],[[3568,17,3568,30,[12,[[],"RecordExpr"],[[3568,28,3568,30,[11,"rs"]]]]],[3569,21,3580,119,[1,"|>",0,[3569,21,3579,42,[1,"|>",0,[3569,21,3578,30,[1,"|>",0,[3569,21,3569,23,[2,[],"rs"]],[3570,28,3578,30,[0,[[3570,28,3570,36,[2,["List"],"map"]],[3571,29,3578,30,[7,[3571,30,3577,77,[18,[[[3571,31,3571,32,[11,"n"]]],[3572,33,3577,77,[16,[[[3573,37,3574,53,[1,[3573,37,3573,45,[7,[[3573,39,3573,40,[11,"f"]],[3573,42,3573,43,[11,"e"]]]]],[3574,41,3574,53,[0,[[3574,41,3574,51,[2,["Node"],"value"]],[3574,52,3574,53,[2,[],"n"]]]]]]]],[3576,33,3577,77,[1,"|>",0,[3576,33,3576,88,[0,[[3576,33,3576,35,[2,[],"go"]],[3576,36,3576,86,[7,[3576,37,3576,85,[1,"++",1,[3576,37,3576,50,[2,[],"typeVarPrefix"]],[3576,54,3576,85,[1,"++",1,[3576,54,3576,69,[5,"Record Field "]],[3576,73,3576,85,[0,[[3576,73,3576,83,[2,["Node"],"value"]],[3576,84,3576,85,[2,[],"f"]]]]]]]]]]],[3576,87,3576,88,[2,[],"e"]]]]],[3577,40,3577,77,[0,[[3577,40,3577,49,[2,["Maybe"],"map"]],[3577,50,3577,77,[7,[3577,51,3577,76,[0,[[3577,51,3577,61,[2,["Tuple"],"pair"]],[3577,62,3577,76,[7,[3577,63,3577,75,[0,[[3577,63,3577,73,[2,["Node"],"value"]],[3577,74,3577,75,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3579,28,3579,42,[2,["MaybeX"],"combine"]]]],[3580,28,3580,119,[0,[[3580,28,3580,37,[2,["Maybe"],"map"]],[3580,38,3580,119,[7,[3580,39,3580,118,[18,[[[3580,40,3580,46,[11,"fields"]]],[3580,50,3580,118,[0,[[3580,50,3580,60,[2,[],"RecordType"]],[3580,61,3580,118,[8,[[3580,63,3580,80,[[3580,63,3580,70,"generic"],[3580,73,3580,80,[2,[],"Nothing"]]]],[3580,82,3580,99,[[3580,82,3580,91,"canonical"],[3580,94,3580,99,[2,[],"False"]]]],[3580,101,3580,117,[[3580,101,3580,107,"fields"],[3580,110,3580,116,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]],[[3582,17,3582,39,[12,[[],"FunctionOrValue"],[[3582,33,3582,34,[0]],[3582,35,3582,39,[11,"name"]]]]],[3583,21,3584,50,[1,"|>",0,[3583,21,3583,61,[0,[[3583,21,3583,37,[2,[],"findFunctionType"]],[3583,38,3583,43,[2,[],"local"]],[3583,44,3583,51,[2,[],"Nothing"]],[3583,52,3583,56,[2,[],"node"]],[3583,57,3583,61,[2,[],"name"]]]]],[3584,28,3584,50,[0,[[3584,28,3584,36,[2,[],"makeFunc"]],[3584,37,3584,50,[2,[],"typeVarPrefix"]]]]]]]],[[3586,17,3586,42,[12,[[],"ParenthesizedExpression"],[[3586,41,3586,42,[11,"e"]]]]],[3588,21,3588,39,[0,[[3588,21,3588,23,[2,[],"go"]],[3588,24,3588,37,[2,[],"typeVarPrefix"]],[3588,38,3588,39,[2,[],"e"]]]]]],[[3590,17,3590,27,[12,[[],"Negation"],[[3590,26,3590,27,[11,"e"]]]]],[3591,21,3591,39,[0,[[3591,21,3591,23,[2,[],"go"]],[3591,24,3591,37,[2,[],"typeVarPrefix"]],[3591,38,3591,39,[2,[],"e"]]]]]],[[3593,17,3593,32,[12,[[],"IfBlock"],[[3593,25,3593,26,[0]],[3593,27,3593,29,[11,"e1"]],[3593,30,3593,32,[11,"e2"]]]]],[3595,21,3597,38,[1,"|>",0,[3595,21,3596,41,[1,"|>",0,[3595,21,3595,108,[9,[[3595,23,3595,63,[0,[[3595,23,3595,25,[2,[],"go"]],[3595,26,3595,60,[7,[3595,27,3595,59,[1,"++",1,[3595,27,3595,40,[2,[],"typeVarPrefix"]],[3595,44,3595,59,[5,"If Block True"]]]]]],[3595,61,3595,63,[2,[],"e1"]]]]],[3595,65,3595,106,[0,[[3595,65,3595,67,[2,[],"go"]],[3595,68,3595,103,[7,[3595,69,3595,102,[1,"++",1,[3595,69,3595,82,[2,[],"typeVarPrefix"]],[3595,86,3595,102,[5,"If Block False"]]]]]],[3595,104,3595,106,[2,[],"e2"]]]]]]]],[3596,28,3596,41,[2,["MaybeX"],"values"]]]],[3597,28,3597,38,[2,[],"unifyTypes"]]]]],[[3599,17,3599,33,[12,[[],"PrefixOperator"],[[3599,32,3599,33,[11,"p"]]]]],[3600,21,3601,50,[1,"|>",0,[3600,21,3600,53,[0,[[3600,21,3600,37,[2,[],"findOperatorType"]],[3600,38,3600,51,[19,[3600,38,3600,43,[2,[],"local"]],[3600,44,3600,51,"context"]]],[3600,52,3600,53,[2,[],"p"]]]]],[3601,28,3601,50,[0,[[3601,28,3601,36,[2,[],"makeFunc"]],[3601,37,3601,50,[2,[],"typeVarPrefix"]]]]]]]],[[3603,17,3603,41,[12,[[],"CaseExpression"],[[3603,32,3603,41,[8,[[3603,34,3603,39,"cases"]]]]]]],[3605,21,3607,38,[1,"|>",0,[3605,21,3606,41,[1,"|>",0,[3605,21,3605,122,[0,[[3605,21,3605,36,[2,["List"],"indexedMap"]],[3605,37,3605,116,[7,[3605,38,3605,115,[18,[[[3605,39,3605,40,[11,"i"]],[3605,41,3605,49,[7,[[3605,43,3605,44,[0]],[3605,46,3605,47,[11,"e"]]]]]],[3605,53,3605,115,[0,[[3605,53,3605,55,[2,[],"go"]],[3605,56,3605,113,[7,[3605,57,3605,112,[1,"++",1,[3605,57,3605,70,[2,[],"typeVarPrefix"]],[3605,74,3605,112,[1,"++",1,[3605,74,3605,92,[5,"Case Expression "]],[3605,96,3605,112,[0,[[3605,96,3605,110,[2,["String"],"fromInt"]],[3605,111,3605,112,[2,[],"i"]]]]]]]]]]],[3605,114,3605,115,[2,[],"e"]]]]]]]]]],[3605,117,3605,122,[2,[],"cases"]]]]],[3606,28,3606,41,[2,["MaybeX"],"values"]]]],[3607,28,3607,38,[2,[],"unifyTypes"]]]]],[[3609,17,3609,31,[12,[[],"Application"],[[3609,29,3609,31,[11,"es"]]]]],[3610,21,3611,45,[1,"|>",0,[3610,21,3610,51,[0,[[3610,21,3610,42,[2,[],"inferApplicationChain"]],[3610,43,3610,48,[2,[],"local"]],[3610,49,3610,51,[2,[],"es"]]]]],[3611,28,3611,45,[0,[[3611,28,3611,37,[2,["Maybe"],"map"]],[3611,38,3611,45,[2,[],"getType"]]]]]]]],[[3613,17,3613,54,[12,[[],"LambdaExpression"],[[3613,34,3613,54,[8,[[3613,36,3613,40,"args"],[3613,42,3613,52,"expression"]]]]]]],[3614,21,3625,38,[16,[[[3615,25,3622,38,[0,[[0],[1,[3615,25,3615,63,[[3615,25,3615,35,"unwrapArgs"],[3615,38,3615,63,[6,[3615,38,3615,49,[1,[3615,38,3615,42,[[],"List"]],[[3615,43,3615,49,[1,[3615,43,3615,49,[[],"String"]],[]]]]]],[3615,53,3615,63,[1,[3615,53,3615,58,[[],"Maybe"]],[[3615,59,3615,63,[1,[3615,59,3615,63,[[],"Type"]],[]]]]]]]]]]],[3616,25,3622,38,[[3616,25,3616,35,"unwrapArgs"],[[3616,36,3616,38,[11,"xs"]]],[3617,29,3622,38,[1,"|>",0,[3617,29,3617,44,[0,[[3617,29,3617,41,[2,["ListX"],"uncons"]],[3617,42,3617,44,[2,[],"xs"]]]]],[3618,36,3622,38,[0,[[3618,36,3618,49,[2,["MaybeX"],"unpack"]],[3618,50,3618,86,[7,[3618,51,3618,85,[18,[[[3618,52,3618,54,[1]]],[3618,58,3618,85,[0,[[3618,58,3618,60,[2,[],"go"]],[3618,61,3618,74,[2,[],"typeVarPrefix"]],[3618,75,3618,85,[2,[],"expression"]]]]]]]]]],[3619,37,3622,38,[7,[3619,38,3621,135,[18,[[[3619,39,3619,49,[7,[[3619,41,3619,42,[11,"x"]],[3619,44,3619,47,[11,"xs_"]]]]]],[3620,41,3621,135,[1,"|>",0,[3620,41,3620,55,[0,[[3620,41,3620,51,[2,[],"unwrapArgs"]],[3620,52,3620,55,[2,[],"xs_"]]]]],[3621,48,3621,135,[0,[[3621,48,3621,57,[2,["Maybe"],"map"]],[3621,58,3621,135,[7,[3621,59,3621,134,[18,[[[3621,60,3621,61,[11,"t"]]],[3621,65,3621,134,[0,[[3621,65,3621,77,[2,[],"FunctionType"]],[3621,78,3621,134,[8,[[3621,80,3621,124,[[3621,80,3621,84,"from"],[3621,87,3621,124,[1,"<|",1,[3621,87,3621,102,[0,[[3621,87,3621,94,[2,[],"TypeVar"]],[3621,95,3621,102,[2,[],"Nothing"]]]]],[3621,106,3621,124,[1,"++",1,[3621,106,3621,119,[2,[],"typeVarPrefix"]],[3621,123,3621,124,[2,[],"x"]]]]]]]],[3621,126,3621,133,[[3621,126,3621,128,"to"],[3621,131,3621,132,[2,[],"t"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3624,21,3625,38,[1,"|>",0,[3624,21,3624,84,[0,[[3624,21,3624,36,[2,["List"],"indexedMap"]],[3624,37,3624,79,[7,[3624,38,3624,78,[18,[[[3624,39,3624,40,[11,"i"]],[3624,41,3624,42,[0]]],[3624,46,3624,78,[1,"++",1,[3624,46,3624,58,[5,"lambda arg"]],[3624,62,3624,78,[0,[[3624,62,3624,76,[2,["String"],"fromInt"]],[3624,77,3624,78,[2,[],"i"]]]]]]]]]]]],[3624,80,3624,84,[2,[],"args"]]]]],[3625,28,3625,38,[2,[],"unwrapArgs"]]]]]]]],[[3627,17,3627,42,[12,[[],"RecordAccess"],[[3627,30,3627,31,[11,"e"]],[3627,32,3627,42,[11,"accessFunc"]]]]],[3628,21,3636,45,[1,"|>",0,[3628,21,3635,29,[1,"|>",0,[3628,21,3630,47,[1,"|>",0,[3628,21,3629,54,[1,"|>",0,[3628,21,3628,39,[0,[[3628,21,3628,23,[2,[],"go"]],[3628,24,3628,37,[2,[],"typeVarPrefix"]],[3628,38,3628,39,[2,[],"e"]]]]],[3629,28,3629,54,[0,[[3629,28,3629,37,[2,["Maybe"],"map"]],[3629,38,3629,54,[2,[],"DereferencedType"]]]]]]],[3630,28,3630,47,[2,[],"getRecordFieldTypes"]]]],[3631,28,3635,29,[7,[3631,29,3634,61,[18,[[[3631,30,3631,32,[11,"ts"]]],[3632,33,3634,61,[1,"|>",0,[3632,33,3633,54,[1,"|>",0,[3632,33,3632,54,[0,[[3632,33,3632,43,[2,["Node"],"value"]],[3632,44,3632,54,[2,[],"accessFunc"]]]]],[3633,40,3633,54,[2,[],"makeAccessFunc"]]]],[3634,40,3634,61,[7,[3634,41,3634,60,[18,[[[3634,42,3634,43,[11,"f"]]],[3634,47,3634,60,[0,[[3634,47,3634,55,[2,["Dict"],"get"]],[3634,56,3634,57,[2,[],"f"]],[3634,58,3634,60,[2,[],"ts"]]]]]]]]]]]]]]]]]]],[3636,28,3636,45,[0,[[3636,28,3636,37,[2,["Maybe"],"map"]],[3636,38,3636,45,[2,[],"getType"]]]]]]]],[[3638,17,3638,33,[12,[[],"GLSLExpression"],[[3638,32,3638,33,[0]]]]],[3639,21,3639,28,[2,[],"Nothing"]]],[[3641,17,3641,48,[12,[[],"RecordAccessFunction"],[[3641,38,3641,48,[11,"accessFunc"]]]]],[3643,21,3656,29,[1,"|>",0,[3643,21,3643,46,[0,[[3643,21,3643,35,[2,[],"makeAccessFunc"]],[3643,36,3643,46,[2,[],"accessFunc"]]]]],[3644,28,3656,29,[7,[3644,29,3655,42,[18,[[[3644,30,3644,31,[11,"f"]]],[3645,33,3655,42,[1,"<|",1,[3645,33,3645,37,[2,[],"Just"]],[3646,37,3655,42,[0,[[3646,37,3646,49,[2,[],"FunctionType"]],[3647,41,3655,42,[8,[[3647,43,3653,50,[[3647,43,3647,47,"from"],[3648,45,3653,50,[0,[[3648,45,3648,55,[2,[],"RecordType"]],[3650,49,3653,50,[8,[[3650,51,3650,139,[[3650,51,3650,58,"generic"],[3650,61,3650,139,[1,"<|",1,[3650,61,3650,65,[2,[],"Just"]],[3650,69,3650,139,[1,"<|",1,[3650,69,3650,84,[0,[[3650,69,3650,76,[2,[],"TypeVar"]],[3650,77,3650,84,[2,[],"Nothing"]]]]],[3650,88,3650,139,[1,"++",1,[3650,88,3650,101,[2,[],"typeVarPrefix"]],[3650,105,3650,139,[1,"++",1,[3650,105,3650,134,[5,"record access inferred for "]],[3650,138,3650,139,[2,[],"f"]]]]]]]]]]]],[3651,51,3652,49,[[3651,51,3651,60,"canonical"],[3651,63,3651,68,[2,[],"False"]]]],[3652,51,3653,49,[[3652,51,3652,57,"fields"],[3652,60,3652,147,[9,[[3652,62,3652,145,[6,[[3652,64,3652,65,[2,[],"f"]],[3652,67,3652,143,[1,"<|",1,[3652,67,3652,82,[0,[[3652,67,3652,74,[2,[],"TypeVar"]],[3652,75,3652,82,[2,[],"Nothing"]]]]],[3652,86,3652,143,[1,"++",1,[3652,86,3652,99,[2,[],"typeVarPrefix"]],[3652,103,3652,143,[1,"++",1,[3652,103,3652,138,[5,"record access inferred field for "]],[3652,142,3652,143,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]],[3654,43,3655,41,[[3654,43,3654,45,"to"],[3654,48,3654,124,[1,"<|",1,[3654,48,3654,63,[0,[[3654,48,3654,55,[2,[],"TypeVar"]],[3654,56,3654,63,[2,[],"Nothing"]]]]],[3654,67,3654,124,[1,"++",1,[3654,67,3654,80,[2,[],"typeVarPrefix"]],[3654,84,3654,124,[1,"++",1,[3654,84,3654,119,[5,"record access inferred field for "]],[3654,123,3654,124,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]]]],[[3658,17,3658,27,[12,[[],"Operator"],[[3658,26,3658,27,[0]]]]],[3659,21,3659,28,[2,[],"Nothing"]]],[[3661,17,3661,47,[12,[[],"OperatorApplication"],[[3661,37,3661,39,[11,"op"]],[3661,40,3661,41,[0]],[3661,42,3661,44,[11,"e1"]],[3661,45,3661,47,[11,"e2"]]]]],[3663,21,3664,45,[1,"|>",0,[3663,21,3663,84,[0,[[3663,21,3663,45,[2,[],"checkOperatorApplication"]],[3663,46,3663,75,[7,[3663,47,3663,74,[0,[[3663,47,3663,68,[2,[],"inferApplicationChain"]],[3663,69,3663,74,[2,[],"local"]]]]]]],[3663,76,3663,78,[2,[],"op"]],[3663,79,3663,81,[2,[],"e1"]],[3663,82,3663,84,[2,[],"e2"]]]]],[3664,28,3664,45,[0,[[3664,28,3664,37,[2,["Maybe"],"map"]],[3664,38,3664,45,[2,[],"getType"]]]]]]]],[[3666,17,3666,59,[12,[[],"LetExpression"],[[3666,31,3666,59,[8,[[3666,33,3666,45,"declarations"],[3666,47,3666,57,"expression"]]]]]]],[3667,21,3675,45,[16,[[[3668,25,3671,49,[0,[[0],[1,[3668,25,3668,55,[[3668,25,3668,36,"newBindings"],[3668,39,3668,55,[1,[3668,39,3668,43,[[],"Dict"]],[[3668,44,3668,50,[1,[3668,44,3668,50,[[],"String"]],[]]],[3668,51,3668,55,[1,[3668,51,3668,55,[[],"Type"]],[]]]]]]]]],[3669,25,3671,49,[[3669,25,3669,36,"newBindings"],[],[3670,29,3671,49,[1,"|>",0,[3670,29,3670,105,[0,[[3670,29,3670,43,[2,["List"],"concatMap"]],[3670,44,3670,92,[7,[3670,45,3670,91,[1,"<<",0,[3670,45,3670,77,[0,[[3670,45,3670,71,[2,[],"bindingsFromLetDeclaration"]],[3670,72,3670,77,[2,[],"local"]]]]],[3670,81,3670,91,[2,["Node"],"value"]]]]]],[3670,93,3670,105,[2,[],"declarations"]]]]],[3671,36,3671,49,[2,["Dict"],"fromList"]]]]]]]]]],[3673,21,3675,45,[1,"|>",0,[3673,21,3674,68,[1,"|>",0,[3673,21,3673,118,[0,[[3673,21,3673,34,[2,[],"inferExprType"]],[3673,35,3673,107,[21,[3673,37,3673,42,"local"],[[3673,45,3673,106,[[3673,45,3673,59,"localFunctions"],[3673,62,3673,105,[0,[[3673,62,3673,72,[2,["Dict"],"union"]],[3673,73,3673,93,[19,[3673,73,3673,78,[2,[],"local"]],[3673,79,3673,93,"localFunctions"]]],[3673,94,3673,105,[2,[],"newBindings"]]]]]]]]]],[3673,108,3673,118,[2,[],"expression"]]]]],[3674,28,3674,68,[0,[[3674,28,3674,37,[2,["Maybe"],"map"]],[3674,38,3674,68,[7,[3674,39,3674,67,[0,[[3674,39,3674,53,[2,[],"prefixTypeVars"]],[3674,54,3674,67,[2,[],"typeVarPrefix"]]]]]]]]]]]],[3675,28,3675,45,[0,[[3675,28,3675,37,[2,["Maybe"],"map"]],[3675,38,3675,45,[2,[],"getType"]]]]]]]]]]],[[3677,17,3677,46,[12,[[],"RecordUpdateExpression"],[[3677,40,3677,43,[11,"var"]],[3677,44,3677,46,[11,"fs"]]]]],[3678,21,3691,30,[1,"|>",0,[3678,21,3679,50,[1,"|>",0,[3678,21,3678,72,[0,[[3678,21,3678,37,[2,[],"findFunctionType"]],[3678,38,3678,43,[2,[],"local"]],[3678,44,3678,51,[2,[],"Nothing"]],[3678,52,3678,55,[2,[],"var"]],[3678,56,3678,72,[7,[3678,57,3678,71,[0,[[3678,57,3678,67,[2,["Node"],"value"]],[3678,68,3678,71,[2,[],"var"]]]]]]]]]],[3679,28,3679,50,[0,[[3679,28,3679,36,[2,[],"makeFunc"]],[3679,37,3679,50,[2,[],"typeVarPrefix"]]]]]]],[3680,28,3691,30,[0,[[3680,28,3680,45,[2,["MaybeX"],"orElseLazy"]],[3681,29,3691,30,[7,[3681,30,3690,42,[18,[[[3681,31,3681,33,[1]]],[3682,33,3690,42,[1,"|>",0,[3682,33,3682,186,[0,[[3682,33,3682,48,[2,["MaybeX"],"traverse"]],[3682,49,3682,183,[7,[3682,50,3682,182,[1,"<<",0,[3682,50,3682,168,[7,[3682,51,3682,167,[18,[[[3682,52,3682,60,[7,[[3682,54,3682,55,[11,"f"]],[3682,57,3682,58,[11,"e"]]]]]],[3682,64,3682,167,[1,"|>",0,[3682,64,3682,126,[0,[[3682,64,3682,66,[2,[],"go"]],[3682,67,3682,124,[7,[3682,68,3682,123,[1,"++",1,[3682,68,3682,81,[2,[],"typeVarPrefix"]],[3682,85,3682,123,[1,"++",1,[3682,85,3682,107,[5,"Record Update Field "]],[3682,111,3682,123,[0,[[3682,111,3682,121,[2,["Node"],"value"]],[3682,122,3682,123,[2,[],"f"]]]]]]]]]]],[3682,125,3682,126,[2,[],"e"]]]]],[3682,130,3682,167,[0,[[3682,130,3682,139,[2,["Maybe"],"map"]],[3682,140,3682,167,[7,[3682,141,3682,166,[0,[[3682,141,3682,151,[2,["Tuple"],"pair"]],[3682,152,3682,166,[7,[3682,153,3682,165,[0,[[3682,153,3682,163,[2,["Node"],"value"]],[3682,164,3682,165,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]],[3682,172,3682,182,[2,["Node"],"value"]]]]]],[3682,184,3682,186,[2,[],"fs"]]]]],[3683,40,3690,42,[0,[[3683,40,3683,49,[2,["Maybe"],"map"]],[3684,41,3690,42,[7,[3684,42,3689,50,[18,[[[3684,43,3684,49,[11,"fields"]]],[3685,45,3689,50,[0,[[3685,45,3685,55,[2,[],"RecordType"]],[3686,49,3689,50,[8,[[3686,51,3686,130,[[3686,51,3686,58,"generic"],[3686,61,3686,130,[1,"<|",1,[3686,61,3686,65,[2,[],"Just"]],[3686,69,3686,130,[1,"<|",1,[3686,69,3686,84,[0,[[3686,69,3686,76,[2,[],"TypeVar"]],[3686,77,3686,84,[2,[],"Nothing"]]]]],[3686,88,3686,130,[1,"++",1,[3686,88,3686,101,[2,[],"typeVarPrefix"]],[3686,105,3686,130,[5,"inferred update generic"]]]]]]]]]],[3687,51,3688,49,[[3687,51,3687,60,"canonical"],[3687,63,3687,68,[2,[],"False"]]]],[3688,51,3689,49,[[3688,51,3688,57,"fields"],[3688,60,3688,66,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3693,5,3694,38,[1,">>",1,[3693,5,3693,10,[0,[[3693,5,3693,7,[2,[],"go"]],[3693,8,3693,10,[5,""]]]]],[3694,12,3694,38,[0,[[3694,12,3694,21,[2,["Maybe"],"map"]],[3694,22,3694,38,[2,[],"DereferencedType"]]]]]]]]]]]]]]],[3697,1,3762,58,[0,[[1,[3697,1,3698,3,"{-| Infer type for a chain of expressions being applied to the first one.\n-}"]],[1,[3699,1,3699,89,[[3699,1,3699,22,"inferApplicationChain"],[3699,25,3699,89,[6,[3699,25,3699,37,[1,[3699,25,3699,37,[[],"LocalContext"]],[]]],[3699,41,3699,89,[6,[3699,41,3699,63,[1,[3699,41,3699,45,[[],"List"]],[[3699,46,3699,63,[1,[3699,47,3699,51,[[],"Node"]],[[3699,52,3699,62,[1,[3699,52,3699,62,[[],"Expression"]],[]]]]]]]]],[3699,67,3699,89,[1,[3699,67,3699,72,[[],"Maybe"]],[[3699,73,3699,89,[1,[3699,73,3699,89,[[],"DereferencedType"]],[]]]]]]]]]]]]],[3700,1,3762,58,[[3700,1,3700,22,"inferApplicationChain"],[[3700,23,3700,28,[11,"local"]],[3700,29,3700,31,[11,"es"]]],[3701,5,3762,58,[16,[[[3702,9,3704,32,[0,[[0],[1,[3702,9,3702,62,[[3702,9,3702,18,"inferExpr"],[3702,21,3702,62,[6,[3702,21,3702,36,[1,[3702,21,3702,25,[[],"Node"]],[[3702,26,3702,36,[1,[3702,26,3702,36,[[],"Expression"]],[]]]]]],[3702,40,3702,62,[1,[3702,40,3702,45,[[],"Maybe"]],[[3702,46,3702,62,[1,[3702,46,3702,62,[[],"DereferencedType"]],[]]]]]]]]]]],[3703,9,3704,32,[[3703,9,3703,18,"inferExpr"],[],[3704,13,3704,32,[0,[[3704,13,3704,26,[2,[],"inferExprType"]],[3704,27,3704,32,[2,[],"local"]]]]]]]]]],[3706,9,3719,69,[0,[[0],[1,[3706,9,3706,114,[[3706,9,3706,22,"getReturnType"],[3706,25,3706,114,[6,[3706,25,3706,47,[1,[3706,25,3706,29,[[],"List"]],[[3706,30,3706,47,[1,[3706,31,3706,35,[[],"Node"]],[[3706,36,3706,46,[1,[3706,36,3706,46,[[],"Expression"]],[]]]]]]]]],[3706,51,3706,114,[6,[3706,51,3706,94,[3,[[3706,53,3706,74,[1,[3706,53,3706,57,[[],"List"]],[[3706,58,3706,74,[1,[3706,58,3706,74,[[],"DereferencedType"]],[]]]]]],[3706,76,3706,92,[1,[3706,76,3706,92,[[],"DereferencedType"]],[]]]]]],[3706,98,3706,114,[1,[3706,98,3706,114,[[],"DereferencedType"]],[]]]]]]]]]],[3707,9,3719,69,[[3707,9,3707,22,"getReturnType"],[[3707,23,3707,27,[11,"args"]],[3707,28,3707,52,[7,[[3707,30,3707,38,[11,"argTypes"]],[3707,40,3707,50,[11,"returnType"]]]]]],[3708,13,3719,69,[1,"|>",0,[3708,13,3718,46,[1,"|>",0,[3708,13,3717,55,[1,"|>",0,[3708,13,3716,31,[1,"|>",0,[3708,13,3709,38,[1,"|>",0,[3708,13,3708,36,[0,[[3708,13,3708,21,[2,["List"],"map"]],[3708,22,3708,31,[2,[],"inferExpr"]],[3708,32,3708,36,[2,[],"args"]]]]],[3709,20,3709,38,[0,[[3709,20,3709,29,[2,["ListX"],"zip"]],[3709,30,3709,38,[2,[],"argTypes"]]]]]]],[3710,20,3716,31,[0,[[3710,20,3710,30,[2,["List"],"foldl"]],[3711,21,3715,22,[7,[3711,22,3714,58,[18,[[[3711,23,3711,33,[7,[[3711,25,3711,27,[11,"t1"]],[3711,29,3711,31,[11,"t2"]]]]],[3711,34,3711,42,[11,"typeVars"]]],[3712,25,3714,58,[1,"|>",0,[3712,25,3713,53,[1,"|>",0,[3712,25,3712,62,[0,[[3712,25,3712,34,[2,["Maybe"],"map"]],[3712,35,3712,59,[7,[3712,36,3712,58,[0,[[3712,36,3712,46,[2,[],"typesMatch"]],[3712,47,3712,55,[2,[],"typeVars"]],[3712,56,3712,58,[2,[],"t1"]]]]]]],[3712,60,3712,62,[2,[],"t2"]]]]],[3713,32,3713,53,[0,[[3713,32,3713,41,[2,["Maybe"],"map"]],[3713,42,3713,53,[2,["Tuple"],"first"]]]]]]],[3714,32,3714,58,[0,[[3714,32,3714,49,[2,["Maybe"],"withDefault"]],[3714,50,3714,58,[2,[],"typeVars"]]]]]]]]]]]],[3716,21,3716,31,[2,["Dict"],"empty"]]]]]]],[3717,20,3717,55,[0,[[3717,20,3717,31,[2,["Dict"],"filter"]],[3717,32,3717,55,[7,[3717,33,3717,54,[18,[[[3717,34,3717,42,[7,[[3717,36,3717,37,[11,"i"]],[3717,39,3717,40,[0]]]]],[3717,43,3717,44,[0]]],[3717,48,3717,54,[1,"==",2,[3717,48,3717,49,[2,[],"i"]],[3717,53,3717,54,[3,1]]]]]]]]]]]]]],[3718,20,3718,46,[0,[[3718,20,3718,33,[2,["DictX"],"mapKeys"]],[3718,34,3718,46,[2,["Tuple"],"second"]]]]]]],[3719,20,3719,69,[7,[3719,21,3719,68,[18,[[[3719,22,3719,30,[11,"typeVars"]]],[3719,34,3719,68,[0,[[3719,34,3719,48,[2,[],"assignTypeVars"]],[3719,49,3719,57,[2,[],"typeVars"]],[3719,58,3719,68,[2,[],"returnType"]]]]]]]]]]]]]]]]]],[3721,5,3762,58,[17,[[3721,10,3721,12,[2,[],"es"]],[[[3722,9,3722,11,[10,[]]],[3723,13,3723,20,[2,[],"Nothing"]]],[[3725,9,3725,14,[10,[[3725,11,3725,12,[11,"e"]]]]],[3726,13,3726,24,[0,[[3726,13,3726,22,[2,[],"inferExpr"]],[3726,23,3726,24,[2,[],"e"]]]]]],[[3728,9,3728,21,[9,[3728,9,3728,13,[11,"func"]],[3728,17,3728,21,[11,"args"]]]],[3729,13,3762,58,[17,[[3729,18,3729,33,[0,[[3729,18,3729,28,[2,["Node"],"value"]],[3729,29,3729,33,[2,[],"func"]]]]],[[[3730,17,3730,39,[12,[[],"FunctionOrValue"],[[3730,33,3730,34,[0]],[3730,35,3730,39,[11,"name"]]]]],[3731,21,3735,58,[1,"|>",0,[3731,21,3733,75,[1,"|>",0,[3731,21,3732,102,[1,"|>",0,[3731,21,3731,61,[0,[[3731,21,3731,37,[2,[],"findFunctionType"]],[3731,38,3731,43,[2,[],"local"]],[3731,44,3731,51,[2,[],"Nothing"]],[3731,52,3731,56,[2,[],"func"]],[3731,57,3731,61,[2,[],"name"]]]]],[3732,28,3732,102,[0,[[3732,28,3732,45,[2,["MaybeX"],"orElseLazy"]],[3732,46,3732,102,[7,[3732,47,3732,101,[18,[[[3732,48,3732,50,[1]]],[3732,54,3732,101,[1,"<|",1,[3732,54,3732,83,[0,[[3732,54,3732,63,[2,["Maybe"],"map"]],[3732,64,3732,83,[2,[],"flattenFunctionType"]]]]],[3732,87,3732,101,[0,[[3732,87,3732,96,[2,[],"inferExpr"]],[3732,97,3732,101,[2,[],"func"]]]]]]]]]]]]]]]]],[3733,28,3733,75,[0,[[3733,28,3733,41,[2,["Maybe"],"andThen"]],[3733,42,3733,75,[7,[3733,43,3733,74,[0,[[3733,43,3733,69,[2,[],"partiallyApplyArgsAndTypes"]],[3733,70,3733,74,[2,[],"args"]]]]]]]]]]]],[3735,28,3735,58,[0,[[3735,28,3735,37,[2,["Maybe"],"map"]],[3735,38,3735,58,[7,[3735,39,3735,57,[0,[[3735,39,3735,52,[2,[],"getReturnType"]],[3735,53,3735,57,[2,[],"args"]]]]]]]]]]]]],[[3737,17,3737,34,[12,[[],"PrefixOperator"],[[3737,32,3737,34,[11,"op"]]]]],[3738,21,3741,58,[1,"|>",0,[3738,21,3740,75,[1,"|>",0,[3738,21,3738,54,[0,[[3738,21,3738,37,[2,[],"findOperatorType"]],[3738,38,3738,51,[19,[3738,38,3738,43,[2,[],"local"]],[3738,44,3738,51,"context"]]],[3738,52,3738,54,[2,[],"op"]]]]],[3740,28,3740,75,[0,[[3740,28,3740,41,[2,["Maybe"],"andThen"]],[3740,42,3740,75,[7,[3740,43,3740,74,[0,[[3740,43,3740,69,[2,[],"partiallyApplyArgsAndTypes"]],[3740,70,3740,74,[2,[],"args"]]]]]]]]]]]],[3741,28,3741,58,[0,[[3741,28,3741,37,[2,["Maybe"],"map"]],[3741,38,3741,58,[7,[3741,39,3741,57,[0,[[3741,39,3741,52,[2,[],"getReturnType"]],[3741,53,3741,57,[2,[],"args"]]]]]]]]]]]]],[[3743,17,3743,46,[12,[[],"ParenthesizedExpression"],[[3743,41,3743,46,[11,"func_"]]]]],[3745,21,3745,64,[0,[[3745,21,3745,42,[2,[],"inferApplicationChain"]],[3745,43,3745,48,[2,[],"local"]],[3745,49,3745,64,[7,[3745,50,3745,63,[1,"::",1,[3745,50,3745,55,[2,[],"func_"]],[3745,59,3745,63,[2,[],"args"]]]]]]]]]],[[3747,17,3747,48,[12,[[],"RecordAccessFunction"],[[3747,38,3747,48,[11,"accessFunc"]]]]],[3749,21,3755,29,[1,"|>",0,[3749,21,3751,47,[1,"|>",0,[3749,21,3750,51,[1,"|>",0,[3749,21,3749,35,[0,[[3749,21,3749,30,[2,["List"],"head"]],[3749,31,3749,35,[2,[],"args"]]]]],[3750,28,3750,51,[0,[[3750,28,3750,41,[2,["Maybe"],"andThen"]],[3750,42,3750,51,[2,[],"inferExpr"]]]]]]],[3751,28,3751,47,[2,[],"getRecordFieldTypes"]]]],[3752,28,3755,29,[7,[3752,29,3754,61,[18,[[[3752,30,3752,32,[11,"ts"]]],[3753,33,3754,61,[1,"|>",0,[3753,33,3753,58,[0,[[3753,33,3753,47,[2,[],"makeAccessFunc"]],[3753,48,3753,58,[2,[],"accessFunc"]]]]],[3754,40,3754,61,[7,[3754,41,3754,60,[18,[[[3754,42,3754,43,[11,"f"]]],[3754,47,3754,60,[0,[[3754,47,3754,55,[2,["Dict"],"get"]],[3754,56,3754,57,[2,[],"f"]],[3754,58,3754,60,[2,[],"ts"]]]]]]]]]]]]]]]]]]]],[[3757,17,3757,18,[0]],[3759,21,3762,58,[1,"|>",0,[3759,21,3761,75,[1,"|>",0,[3759,21,3760,57,[1,"|>",0,[3759,21,3759,35,[0,[[3759,21,3759,30,[2,[],"inferExpr"]],[3759,31,3759,35,[2,[],"func"]]]]],[3760,28,3760,57,[0,[[3760,28,3760,37,[2,["Maybe"],"map"]],[3760,38,3760,57,[2,[],"flattenFunctionType"]]]]]]],[3761,28,3761,75,[0,[[3761,28,3761,41,[2,["Maybe"],"andThen"]],[3761,42,3761,75,[7,[3761,43,3761,74,[0,[[3761,43,3761,69,[2,[],"partiallyApplyArgsAndTypes"]],[3761,70,3761,74,[2,[],"args"]]]]]]]]]]]],[3762,28,3762,58,[0,[[3762,28,3762,37,[2,["Maybe"],"map"]],[3762,38,3762,58,[7,[3762,39,3762,57,[0,[[3762,39,3762,52,[2,[],"getReturnType"]],[3762,53,3762,57,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3765,1,3792,13,[0,[[1,[3765,1,3766,3,"{-| Given a list of types, try to reduce them to a single type.\n-}"]],[1,[3767,1,3767,37,[[3767,1,3767,11,"unifyTypes"],[3767,14,3767,37,[6,[3767,14,3767,23,[1,[3767,14,3767,18,[[],"List"]],[[3767,19,3767,23,[1,[3767,19,3767,23,[[],"Type"]],[]]]]]],[3767,27,3767,37,[1,[3767,27,3767,32,[[],"Maybe"]],[[3767,33,3767,37,[1,[3767,33,3767,37,[[],"Type"]],[]]]]]]]]]]],[3768,1,3792,13,[[3768,1,3768,11,"unifyTypes"],[],[3769,5,3792,13,[1,">>",1,[3769,5,3778,11,[0,[[3769,5,3769,15,[2,["List"],"foldl"]],[3770,9,3777,10,[7,[3770,10,3776,25,[18,[[[3770,11,3770,12,[11,"t"]],[3770,13,3770,16,[11,"acc"]]],[3772,13,3776,25,[11,[3772,16,3772,33,[0,[[3772,16,3772,27,[2,["List"],"member"]],[3772,28,3772,29,[2,[],"t"]],[3772,30,3772,33,[2,[],"acc"]]]]],[3773,17,3773,20,[2,[],"acc"]],[3776,17,3776,25,[1,"::",1,[3776,17,3776,18,[2,[],"t"]],[3776,22,3776,25,[2,[],"acc"]]]]]]]]]]],[3778,9,3778,11,[9,[]]]]]],[3779,12,3792,13,[7,[3779,13,3791,98,[18,[[[3779,14,3779,16,[11,"ts"]]],[3780,17,3791,98,[17,[[3780,22,3780,99,[6,[[3780,24,3780,26,[2,[],"ts"]],[3780,28,3780,97,[0,[[3780,28,3780,39,[2,["List"],"filter"]],[3780,40,3780,94,[7,[3780,41,3780,93,[0,[[3780,41,3780,45,[12,"/="]],[3780,46,3780,93,[7,[3780,47,3780,92,[0,[[3780,47,3780,54,[2,[],"TypeVar"]],[3780,55,3780,62,[2,[],"Nothing"]],[3780,63,3780,92,[5,"inferred empty list typevar"]]]]]]]]]]]],[3780,95,3780,97,[2,[],"ts"]]]]]]]],[[[3781,21,3781,33,[7,[[3781,23,3781,28,[10,[[3781,25,3781,26,[11,"t"]]]]],[3781,30,3781,31,[0]]]]],[3782,25,3782,31,[0,[[3782,25,3782,29,[2,[],"Just"]],[3782,30,3782,31,[2,[],"t"]]]]]],[[3784,21,3784,30,[7,[[3784,23,3784,24,[0]],[3784,26,3784,28,[10,[]]]]]],[3785,25,3785,32,[2,[],"Nothing"]]],[[3787,21,3787,33,[7,[[3787,23,3787,24,[0]],[3787,26,3787,31,[10,[[3787,28,3787,29,[11,"t"]]]]]]]],[3788,25,3788,31,[0,[[3788,25,3788,29,[2,[],"Just"]],[3788,30,3788,31,[2,[],"t"]]]]]],[[3790,21,3790,36,[7,[[3790,23,3790,24,[0]],[3790,26,3790,34,[9,[3790,26,3790,27,[11,"t"]],[3790,31,3790,34,[11,"ts_"]]]]]]],[3791,25,3791,98,[0,[[3791,25,3791,35,[2,["List"],"foldl"]],[3791,36,3791,85,[7,[3791,37,3791,84,[18,[[[3791,38,3791,40,[11,"t_"]],[3791,41,3791,44,[11,"acc"]]],[3791,48,3791,84,[0,[[3791,48,3791,61,[2,["Maybe"],"andThen"]],[3791,62,3791,80,[7,[3791,63,3791,79,[0,[[3791,63,3791,76,[2,[],"unifyTwoTypes"]],[3791,77,3791,79,[2,[],"t_"]]]]]]],[3791,81,3791,84,[2,[],"acc"]]]]]]]]]],[3791,86,3791,94,[7,[3791,87,3791,93,[0,[[3791,87,3791,91,[2,[],"Just"]],[3791,92,3791,93,[2,[],"t"]]]]]]],[3791,95,3791,98,[2,[],"ts_"]]]]]]]]]]]]]]]]]]]]]],[3795,1,3867,20,[0,[[1,[3795,1,3796,3,"{-| Given two types that are not the same, try to find a compatible type.\n-}"]],[1,[3797,1,3797,43,[[3797,1,3797,14,"unifyTwoTypes"],[3797,17,3797,43,[6,[3797,17,3797,21,[1,[3797,17,3797,21,[[],"Type"]],[]]],[3797,25,3797,43,[6,[3797,25,3797,29,[1,[3797,25,3797,29,[[],"Type"]],[]]],[3797,33,3797,43,[1,[3797,33,3797,38,[[],"Maybe"]],[[3797,39,3797,43,[1,[3797,39,3797,43,[[],"Type"]],[]]]]]]]]]]]]],[3798,1,3867,20,[[3798,1,3798,14,"unifyTwoTypes"],[[3798,15,3798,20,[11,"type1"]],[3798,21,3798,26,[11,"type2"]]],[3799,5,3867,20,[17,[[3799,10,3799,26,[6,[[3799,12,3799,17,[2,[],"type1"]],[3799,19,3799,24,[2,[],"type2"]]]]],[[[3800,9,3800,33,[7,[[3800,11,3800,28,[12,[[],"TypeVar"],[[3800,19,3800,26,[12,[[],"Nothing"],[]]],[3800,27,3800,28,[0]]]]],[3800,30,3800,31,[0]]]]],[3801,13,3801,23,[0,[[3801,13,3801,17,[2,[],"Just"]],[3801,18,3801,23,[2,[],"type2"]]]]]],[[3803,9,3803,33,[7,[[3803,11,3803,12,[0]],[3803,14,3803,31,[12,[[],"TypeVar"],[[3803,22,3803,29,[12,[[],"Nothing"],[]]],[3803,30,3803,31,[0]]]]]]]],[3804,13,3804,23,[0,[[3804,13,3804,17,[2,[],"Just"]],[3804,18,3804,23,[2,[],"type1"]]]]]],[[3806,9,3806,35,[7,[[3806,11,3806,30,[12,[[],"TypeVar"],[[3806,19,3806,28,[14,[3806,20,3806,27,[12,[[],"Just"],[[3806,25,3806,27,[11,"tc"]]]]]]],[3806,29,3806,30,[0]]]]],[3806,32,3806,33,[0]]]]],[3807,13,3807,57,[0,[[3807,13,3807,21,[2,[],"validate"]],[3807,22,3807,51,[7,[3807,23,3807,50,[18,[[[3807,24,3807,25,[11,"t"]]],[3807,29,3807,50,[0,[[3807,29,3807,45,[2,[],"matchesTypeClass"]],[3807,46,3807,47,[2,[],"t"]],[3807,48,3807,50,[2,[],"tc"]]]]]]]]]],[3807,52,3807,57,[2,[],"type2"]]]]]],[[3809,9,3809,35,[7,[[3809,11,3809,12,[0]],[3809,14,3809,33,[12,[[],"TypeVar"],[[3809,22,3809,31,[14,[3809,23,3809,30,[12,[[],"Just"],[[3809,28,3809,30,[11,"tc"]]]]]]],[3809,32,3809,33,[0]]]]]]]],[3810,13,3810,57,[0,[[3810,13,3810,21,[2,[],"validate"]],[3810,22,3810,51,[7,[3810,23,3810,50,[18,[[[3810,24,3810,25,[11,"t"]]],[3810,29,3810,50,[0,[[3810,29,3810,45,[2,[],"matchesTypeClass"]],[3810,46,3810,47,[2,[],"t"]],[3810,48,3810,50,[2,[],"tc"]]]]]]]]]],[3810,52,3810,57,[2,[],"type1"]]]]]],[[3812,9,3812,45,[7,[[3812,11,3812,26,[12,[[],"FunctionType"],[[3812,24,3812,26,[11,"f1"]]]]],[3812,28,3812,43,[12,[[],"FunctionType"],[[3812,41,3812,43,[11,"f2"]]]]]]]],[3813,13,3815,46,[0,[[3813,13,3813,23,[2,["Maybe"],"map2"]],[3813,24,3813,75,[7,[3813,25,3813,74,[18,[[[3813,26,3813,30,[11,"from"]],[3813,31,3813,33,[11,"to"]]],[3813,37,3813,74,[0,[[3813,37,3813,49,[2,[],"FunctionType"]],[3813,50,3813,74,[8,[[3813,52,3813,63,[[3813,52,3813,56,"from"],[3813,59,3813,63,[2,[],"from"]]]],[3813,65,3813,73,[[3813,65,3813,67,"to"],[3813,70,3813,72,[2,[],"to"]]]]]]]]]]]]]]],[3814,17,3814,50,[7,[3814,18,3814,49,[0,[[3814,18,3814,28,[2,[],"unifyTypes"]],[3814,29,3814,49,[9,[[3814,31,3814,38,[19,[3814,31,3814,33,[2,[],"f1"]],[3814,34,3814,38,"from"]]],[3814,40,3814,47,[19,[3814,40,3814,42,[2,[],"f2"]],[3814,43,3814,47,"from"]]]]]]]]]]],[3815,17,3815,46,[7,[3815,18,3815,45,[0,[[3815,18,3815,28,[2,[],"unifyTypes"]],[3815,29,3815,45,[9,[[3815,31,3815,36,[19,[3815,31,3815,33,[2,[],"f1"]],[3815,34,3815,36,"to"]]],[3815,38,3815,43,[19,[3815,38,3815,40,[2,[],"f2"]],[3815,41,3815,43,"to"]]]]]]]]]]]]]]],[[3817,9,3817,37,[7,[[3817,11,3817,22,[12,[[],"ListType"],[[3817,20,3817,22,[11,"t1"]]]]],[3817,24,3817,35,[12,[[],"ListType"],[[3817,33,3817,35,[11,"t2"]]]]]]]],[3818,13,3819,38,[1,"|>",0,[3818,13,3818,34,[0,[[3818,13,3818,23,[2,[],"unifyTypes"]],[3818,24,3818,34,[9,[[3818,26,3818,28,[2,[],"t1"]],[3818,30,3818,32,[2,[],"t2"]]]]]]]],[3819,20,3819,38,[0,[[3819,20,3819,29,[2,["Maybe"],"map"]],[3819,30,3819,38,[2,[],"ListType"]]]]]]]],[[3821,9,3821,41,[7,[[3821,11,3821,24,[12,[[],"TupleType"],[[3821,21,3821,24,[11,"t1s"]]]]],[3821,26,3821,39,[12,[[],"TupleType"],[[3821,36,3821,39,[11,"t2s"]]]]]]]],[3822,13,3824,39,[1,"|>",0,[3822,13,3823,74,[1,"|>",0,[3822,13,3822,30,[0,[[3822,13,3822,22,[2,["ListX"],"zip"]],[3822,23,3822,26,[2,[],"t1s"]],[3822,27,3822,30,[2,[],"t2s"]]]]],[3823,20,3823,74,[0,[[3823,20,3823,35,[2,["MaybeX"],"traverse"]],[3823,36,3823,74,[7,[3823,37,3823,73,[18,[[[3823,38,3823,48,[7,[[3823,40,3823,42,[11,"t1"]],[3823,44,3823,46,[11,"t2"]]]]]],[3823,52,3823,73,[0,[[3823,52,3823,62,[2,[],"unifyTypes"]],[3823,63,3823,73,[9,[[3823,65,3823,67,[2,[],"t1"]],[3823,69,3823,71,[2,[],"t2"]]]]]]]]]]]]]]]]]],[3824,20,3824,39,[0,[[3824,20,3824,29,[2,["Maybe"],"map"]],[3824,30,3824,39,[2,[],"TupleType"]]]]]]]],[[3826,9,3826,41,[7,[[3826,11,3826,24,[12,[[],"RecordType"],[[3826,22,3826,24,[11,"r1"]]]]],[3826,26,3826,39,[12,[[],"RecordType"],[[3826,37,3826,39,[11,"r2"]]]]]]]],[3828,13,3862,21,[1,"|>",0,[3828,13,3841,54,[0,[[3828,13,3828,23,[2,["Dict"],"merge"]],[3829,17,3829,72,[7,[3829,18,3829,71,[18,[[[3829,19,3829,20,[11,"f"]],[3829,21,3829,23,[11,"t1"]],[3829,24,3829,27,[11,"acc"]]],[3829,31,3829,71,[21,[3829,33,3829,36,"acc"],[[3829,39,3829,70,[[3829,39,3829,44,"only1"],[3829,47,3829,69,[1,"::",1,[3829,47,3829,56,[6,[[3829,49,3829,50,[2,[],"f"]],[3829,52,3829,54,[2,[],"t1"]]]]],[3829,60,3829,69,[19,[3829,60,3829,63,[2,[],"acc"]],[3829,64,3829,69,"only1"]]]]]]]]]]]]]]],[3830,17,3837,18,[7,[3830,18,3836,22,[18,[[[3830,19,3830,20,[11,"f"]],[3830,21,3830,23,[11,"t1"]],[3830,24,3830,26,[11,"t2"]],[3830,27,3830,30,[11,"acc"]]],[3831,21,3836,22,[21,[3831,23,3831,26,"acc"],[[3832,27,3836,21,[[3832,27,3832,31,"both"],[3833,29,3835,57,[1,"|>",0,[3833,29,3834,60,[1,"|>",0,[3833,29,3833,50,[0,[[3833,29,3833,39,[2,[],"unifyTypes"]],[3833,40,3833,50,[9,[[3833,42,3833,44,[2,[],"t1"]],[3833,46,3833,48,[2,[],"t2"]]]]]]]],[3834,36,3834,60,[0,[[3834,36,3834,45,[2,["Maybe"],"map"]],[3834,46,3834,60,[7,[3834,47,3834,59,[0,[[3834,47,3834,57,[2,["Tuple"],"pair"]],[3834,58,3834,59,[2,[],"f"]]]]]]]]]]]],[3835,36,3835,57,[7,[3835,37,3835,56,[18,[[[3835,38,3835,39,[11,"x"]]],[3835,43,3835,56,[1,"::",1,[3835,43,3835,44,[2,[],"x"]],[3835,48,3835,56,[19,[3835,48,3835,51,[2,[],"acc"]],[3835,52,3835,56,"both"]]]]]]]]]]]]]]]]]]]]]],[3838,17,3838,72,[7,[3838,18,3838,71,[18,[[[3838,19,3838,20,[11,"f"]],[3838,21,3838,23,[11,"t2"]],[3838,24,3838,27,[11,"acc"]]],[3838,31,3838,71,[21,[3838,33,3838,36,"acc"],[[3838,39,3838,70,[[3838,39,3838,44,"only2"],[3838,47,3838,69,[1,"::",1,[3838,47,3838,56,[6,[[3838,49,3838,50,[2,[],"f"]],[3838,52,3838,54,[2,[],"t2"]]]]],[3838,60,3838,69,[19,[3838,60,3838,63,[2,[],"acc"]],[3838,64,3838,69,"only2"]]]]]]]]]]]]]]],[3839,17,3839,42,[7,[3839,18,3839,41,[0,[[3839,18,3839,31,[2,["Dict"],"fromList"]],[3839,32,3839,41,[19,[3839,32,3839,34,[2,[],"r1"]],[3839,35,3839,41,"fields"]]]]]]]],[3840,17,3840,42,[7,[3840,18,3840,41,[0,[[3840,18,3840,31,[2,["Dict"],"fromList"]],[3840,32,3840,41,[19,[3840,32,3840,34,[2,[],"r2"]],[3840,35,3840,41,"fields"]]]]]]]],[3841,17,3841,54,[8,[[3841,19,3841,28,[[3841,19,3841,23,"both"],[3841,26,3841,28,[9,[]]]]],[3841,30,3841,40,[[3841,30,3841,35,"only1"],[3841,38,3841,40,[9,[]]]]],[3841,42,3841,53,[[3841,42,3841,47,"only2"],[3841,50,3841,52,[9,[]]]]]]]]]]],[3842,20,3862,21,[7,[3842,21,3861,34,[18,[[[3842,22,3842,44,[8,[[3842,24,3842,28,"both"],[3842,30,3842,35,"only1"],[3842,37,3842,42,"only2"]]]]],[3843,25,3861,34,[1,"|>",0,[3843,25,3843,44,[0,[[3843,25,3843,39,[2,["MaybeX"],"combine"]],[3843,40,3843,44,[2,[],"both"]]]]],[3844,32,3861,34,[0,[[3844,32,3844,45,[2,["Maybe"],"andThen"]],[3845,33,3861,34,[7,[3845,34,3860,52,[18,[[[3845,35,3845,40,[11,"both_"]]],[3846,37,3860,52,[17,[[3846,42,3846,90,[6,[[3846,44,3846,65,[6,[[3846,46,3846,56,[19,[3846,46,3846,48,[2,[],"r1"]],[3846,49,3846,56,"generic"]]],[3846,58,3846,63,[2,[],"only2"]]]]],[3846,67,3846,88,[6,[[3846,69,3846,79,[19,[3846,69,3846,71,[2,[],"r2"]],[3846,72,3846,79,"generic"]]],[3846,81,3846,86,[2,[],"only1"]]]]]]]],[[[3847,41,3847,97,[7,[[3847,43,3847,68,[7,[[3847,45,3847,63,[12,[[],"Just"],[[3847,50,3847,63,[14,[3847,51,3847,62,[12,[[],"TypeVar"],[[3847,59,3847,60,[0]],[3847,61,3847,62,[0]]]]]]]]]],[3847,65,3847,66,[0]]]]],[3847,70,3847,95,[7,[[3847,72,3847,90,[12,[[],"Just"],[[3847,77,3847,90,[14,[3847,78,3847,89,[12,[[],"TypeVar"],[[3847,86,3847,87,[0]],[3847,88,3847,89,[0]]]]]]]]]],[3847,92,3847,93,[0]]]]]]]],[3848,45,3848,105,[1,"<|",1,[3848,45,3848,49,[2,[],"Just"]],[3848,53,3848,105,[0,[[3848,53,3848,63,[2,[],"RecordType"]],[3848,64,3848,105,[21,[3848,66,3848,68,"r1"],[[3848,71,3848,104,[[3848,71,3848,77,"fields"],[3848,80,3848,103,[1,"++",1,[3848,80,3848,85,[2,[],"only1"]],[3848,89,3848,103,[1,"++",1,[3848,89,3848,94,[2,[],"both_"]],[3848,98,3848,103,[2,[],"only2"]]]]]]]]]]]]]]]]],[[3850,41,3850,77,[7,[[3850,43,3850,58,[7,[[3850,45,3850,52,[12,[[],"Nothing"],[]]],[3850,54,3850,56,[10,[]]]]]],[3850,60,3850,75,[7,[[3850,62,3850,69,[12,[[],"Nothing"],[]]],[3850,71,3850,73,[10,[]]]]]]]]],[3851,45,3851,87,[1,"<|",1,[3851,45,3851,49,[2,[],"Just"]],[3851,53,3851,87,[0,[[3851,53,3851,63,[2,[],"RecordType"]],[3851,64,3851,87,[21,[3851,66,3851,68,"r1"],[[3851,71,3851,86,[[3851,71,3851,77,"fields"],[3851,80,3851,85,[2,[],"both_"]]]]]]]]]]]]],[[3853,41,3853,87,[7,[[3853,43,3853,68,[7,[[3853,45,3853,63,[12,[[],"Just"],[[3853,50,3853,63,[14,[3853,51,3853,62,[12,[[],"TypeVar"],[[3853,59,3853,60,[0]],[3853,61,3853,62,[0]]]]]]]]]],[3853,65,3853,66,[0]]]]],[3853,70,3853,85,[7,[[3853,72,3853,79,[12,[[],"Nothing"],[]]],[3853,81,3853,83,[10,[]]]]]]]]],[3854,45,3854,96,[1,"<|",1,[3854,45,3854,49,[2,[],"Just"]],[3854,53,3854,96,[0,[[3854,53,3854,63,[2,[],"RecordType"]],[3854,64,3854,96,[21,[3854,66,3854,68,"r1"],[[3854,71,3854,95,[[3854,71,3854,77,"fields"],[3854,80,3854,94,[1,"++",1,[3854,80,3854,85,[2,[],"both_"]],[3854,89,3854,94,[2,[],"only2"]]]]]]]]]]]]]]],[[3856,41,3856,87,[7,[[3856,43,3856,58,[7,[[3856,45,3856,52,[12,[[],"Nothing"],[]]],[3856,54,3856,56,[10,[]]]]]],[3856,60,3856,85,[7,[[3856,62,3856,80,[12,[[],"Just"],[[3856,67,3856,80,[14,[3856,68,3856,79,[12,[[],"TypeVar"],[[3856,76,3856,77,[0]],[3856,78,3856,79,[0]]]]]]]]]],[3856,82,3856,83,[0]]]]]]]],[3857,45,3857,96,[1,"<|",1,[3857,45,3857,49,[2,[],"Just"]],[3857,53,3857,96,[0,[[3857,53,3857,63,[2,[],"RecordType"]],[3857,64,3857,96,[21,[3857,66,3857,68,"r1"],[[3857,71,3857,95,[[3857,71,3857,77,"fields"],[3857,80,3857,94,[1,"++",1,[3857,80,3857,85,[2,[],"both_"]],[3857,89,3857,94,[2,[],"only1"]]]]]]]]]]]]]]],[[3859,41,3859,42,[0]],[3860,45,3860,52,[2,[],"Nothing"]]]]]]]]]]]]]]]]]]]]]]]]],[[3864,9,3864,10,[0]],[3867,13,3867,20,[2,[],"Nothing"]]]]]]]]]]]],[3870,1,3888,15,[0,[[1,[3870,1,3871,3,"{-| Report that an unknown record was encountered without fixes.\n-}"]],[1,[3872,1,3872,63,[[3872,1,3872,19,"unknownRecordError"],[3872,22,3872,63,[6,[3872,22,3872,35,[1,[3872,22,3872,35,[[],"RecordToCheck"]],[]]],[3872,39,3872,63,[6,[3872,39,3872,44,[1,[3872,39,3872,44,[[],"Range"]],[]]],[3872,48,3872,63,[1,[3872,48,3872,52,[[],"List"]],[[3872,53,3872,63,[1,[3872,54,3872,59,[[],"Error"]],[[3872,60,3872,62,[4,[]]]]]]]]]]]]]]]],[3873,1,3888,15,[[3873,1,3873,19,"unknownRecordError"],[[3873,20,3873,30,[8,[[3873,22,3873,28,"fields"]]]],[3873,31,3873,36,[11,"range"]]],[3874,5,3888,15,[17,[[3874,10,3874,16,[2,[],"fields"]],[[[3875,9,3875,20,[9,[3875,9,3875,10,[0]],[3875,14,3875,20,[9,[3875,14,3875,15,[0]],[3875,19,3875,20,[0]]]]]],[3876,13,3884,14,[9,[[3876,15,3883,22,[0,[[3876,15,3876,25,[2,["Rule"],"error"]],[3877,17,3882,18,[8,[[3877,19,3880,22,[[3877,19,3877,26,"details"],[3878,21,3880,22,[9,[[3878,23,3878,173,[5,"This record did not correspond with any known alias or custom type argument record, so whether or not its fields are sorted could not be determined!"]],[3879,23,3879,137,[5,"Create a type alias for this record type, or remove reportUnknownRecordsWithoutFix from your rule configuration."]]]]]]],[3881,19,3882,17,[[3881,19,3881,26,"message"],[3881,29,3881,58,[5,"Unknown record encountered."]]]]]]],[3883,17,3883,22,[2,[],"range"]]]]]]]]],[[3886,9,3886,10,[0]],[3888,13,3888,15,[9,[]]]]]]]]]]]]],[3891,1,3924,15,[0,[[1,[3891,1,3893,3,"{-| Report that an ambiguous record was encountered, along with a list of\nmatching type aliases.\n-}"]],[1,[3894,1,3894,87,[[3894,1,3894,21,"ambiguousRecordError"],[3894,24,3894,87,[6,[3894,24,3894,37,[1,[3894,24,3894,37,[[],"RecordToCheck"]],[]]],[3894,41,3894,87,[6,[3894,41,3894,59,[1,[3894,41,3894,45,[[],"List"]],[[3894,46,3894,59,[1,[3894,47,3894,51,[[],"List"]],[[3894,52,3894,58,[1,[3894,52,3894,58,[[],"String"]],[]]]]]]]]],[3894,63,3894,87,[6,[3894,63,3894,68,[1,[3894,63,3894,68,[[],"Range"]],[]]],[3894,72,3894,87,[1,[3894,72,3894,76,[[],"List"]],[[3894,77,3894,87,[1,[3894,78,3894,83,[[],"Error"]],[[3894,84,3894,86,[4,[]]]]]]]]]]]]]]]]]],[3895,1,3924,15,[[3895,1,3895,21,"ambiguousRecordError"],[[3895,22,3895,32,[8,[[3895,24,3895,30,"fields"]]]],[3895,33,3895,41,[11,"matching"]],[3895,42,3895,47,[11,"range"]]],[3896,5,3924,15,[16,[[[3897,9,3907,57,[0,[[0],[1,[3897,9,3897,46,[[3897,9,3897,22,"prettyGeneric"],[3897,25,3897,46,[6,[3897,25,3897,36,[1,[3897,25,3897,29,[[],"List"]],[[3897,30,3897,36,[1,[3897,30,3897,36,[[],"String"]],[]]]]]],[3897,40,3897,46,[1,[3897,40,3897,46,[[],"String"]],[]]]]]]]],[3898,9,3907,57,[[3898,9,3898,22,"prettyGeneric"],[[3898,23,3898,24,[11,"s"]]],[3899,13,3907,57,[17,[[3899,18,3899,19,[2,[],"s"]],[[[3900,17,3900,19,[10,[]]],[3901,21,3901,23,[5,""]]],[[3903,17,3903,22,[10,[[3903,19,3903,20,[11,"x"]]]]],[3904,21,3904,22,[2,[],"x"]]],[[3906,17,3906,24,[9,[3906,17,3906,18,[11,"x"]],[3906,22,3906,24,[11,"xs"]]]],[3907,21,3907,57,[1,"++",1,[3907,21,3907,22,[2,[],"x"]],[3907,26,3907,57,[1,"++",1,[3907,26,3907,30,[5," ("]],[3907,34,3907,57,[1,"++",1,[3907,34,3907,50,[0,[[3907,34,3907,47,[2,[],"prettyGeneric"]],[3907,48,3907,50,[2,[],"xs"]]]]],[3907,54,3907,57,[5,")"]]]]]]]]]]]]]]]]]]],[3909,5,3924,15,[17,[[3909,10,3909,16,[2,[],"fields"]],[[[3910,9,3910,20,[9,[3910,9,3910,10,[0]],[3910,14,3910,20,[9,[3910,14,3910,15,[0]],[3910,19,3910,20,[0]]]]]],[3911,13,3920,14,[9,[[3911,15,3919,22,[0,[[3911,15,3911,25,[2,["Rule"],"error"]],[3912,17,3918,18,[8,[[3912,19,3916,22,[[3912,19,3912,26,"details"],[3913,21,3916,22,[9,[[3913,23,3913,150,[5,"This record could be one of several possible record aliases, so whether or not its fields are sorted could not be determined!"]],[3914,23,3914,127,[5,"Try adding a type annotation, or remove reportAmbiguousRecordsWithoutFix from your rule configuration."]],[3915,23,3915,142,[1,"++",1,[3915,23,3915,76,[5,"The record matched the following possible aliases: "]],[3915,80,3915,142,[0,[[3915,80,3915,91,[2,["String"],"join"]],[3915,92,3915,96,[5,", "]],[3915,97,3915,142,[7,[3915,98,3915,141,[0,[[3915,98,3915,106,[2,["List"],"map"]],[3915,107,3915,120,[2,[],"prettyGeneric"]],[3915,121,3915,141,[7,[3915,122,3915,140,[0,[[3915,122,3915,131,[2,["List"],"sort"]],[3915,132,3915,140,[2,[],"matching"]]]]]]]]]]]]]]]]]]]]]],[3917,19,3918,17,[[3917,19,3917,26,"message"],[3917,29,3917,60,[5,"Ambiguous record encountered."]]]]]]],[3919,17,3919,22,[2,[],"range"]]]]]]]]],[[3922,9,3922,10,[0]],[3924,13,3924,15,[9,[]]]]]]]]]]]]]]]]],[[11,1,56,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, defaults\n\n\n### Sorting\n\n@docs sortGenericFieldsLast\n\n\n### Ambiguous Records\n\nAn ambiguous record is a record that matches more than one known \"canonical\"\nrecord.\n\n@docs doNotSortAmbiguousRecords, reportAmbiguousRecordsWithoutFix\n\n\n### Unknown Records\n\nAn unknown record is a record that does not match any known \"canonical\" records.\n\n@docs doNotSortUnknownRecords, reportUnknownRecordsWithoutFix\n\n\n### Subrecords\n\nSubrecords are records that are either within the fields of a type alias or are\narguments of a custom type.\n\n@docs treatSubrecordsAsUnknown, treatAllSubrecordsAsCanonical, treatCustomTypeRecordsAsCanonical\n\n\n### Other Settings\n\n@docs typecheckAllRecords\n\n-}"],[949,29,949,75,"-- Arguments only have order if config says so"],[935,25,935,83,"-- Constrained type vars aren't respected for type aliases"],[924,31,924,69,"-- No constructors for generic records"],[910,53,910,85,"-- Return type *does* have order"],[900,53,900,99,"-- Arguments only have order if config says so"],[897,53,897,109,"-- Constrained type vars do apply to record constructors"],[1123,21,1123,56,"-- Only create the top level record"],[1103,21,1103,62,"-- Subrecords canonical if config says so"],[1100,23,1100,75,"-- Constrained type vars don't apply to type aliases"],[1173,13,1173,25,"-- NamedType"],[1172,13,1172,23,"-- TypeVar"],[1171,13,1171,24,"-- UnitType"],[1230,21,1230,56,"-- is just a normal generic record."],[1229,21,1229,76,"-- `type alias G comparable = { comparable | x : Int }`"],[1228,21,1228,75,"-- Generic records completely ignore typeclasses, i.e."],[1208,13,1208,81,"-- Can't use module name lookup, so just have to hope this is right."],[1259,9,1259,88,"-- Sometimes constrained type variables are not respected, like in type aliases"],[1381,5,1381,74,"-- Find aliases, canonical records, and function types and store them"],[1672,13,1672,29,"-- Destructuring"],[1671,13,1671,32,"-- InfixDeclaration"],[1670,13,1670,31,"-- PortDeclaration"],[1669,13,1669,34,"-- Nothing to do for:"],[1617,35,1617,79,"-- Generic records do not have constructors."],[1603,25,1603,79,"-- Constrained type vars are not respected for aliases"],[1536,29,1536,151,"-- Function declarations do not have canonical record orders nor do they have type variables (that might be made concrete)"],[1792,21,1792,56,"-- Only create the top level record"],[1776,21,1776,62,"-- Subrecords canonical if config says so"],[1773,21,1773,75,"-- Constrained type vars are not respected for aliases"],[1866,21,1866,56,"-- is just a normal generic record."],[1865,21,1865,76,"-- `type alias G comparable = { comparable | x : Int }`"],[1864,21,1864,75,"-- Generic records completely ignore typeclasses, i.e."],[1836,29,1836,95,"-- If the module name is empty, then update to current module name"],[1939,21,1939,31,"-- TypeVar"],[1938,21,1938,32,"-- UnitType"],[1932,37,1932,107,"-- Generic records overwrite more \"inner\" fields with their outer ones"],[1919,25,1919,73,"-- If no aliases match, it must be a custom type"],[1917,25,1917,43,"-- Apply type vars"],[2166,13,2166,28,"-- FloatPattern"],[2165,13,2165,26,"-- HexPattern"],[2164,13,2164,26,"-- IntPattern"],[2163,13,2163,29,"-- StringPattern"],[2162,13,2162,27,"-- CharPattern"],[2161,13,2161,27,"-- UnitPattern"],[2160,13,2160,26,"-- AllPattern"],[2159,13,2159,31,"-- No bindings in:"],[2155,13,2155,45,"-- Parentheses don't affect type"],[2151,13,2151,60,"-- Bind `name` to overall type and then descend"],[2147,13,2147,47,"-- Bind `name` to the overall type"],[2142,13,2142,67,"-- `p` has type in list, and `ps` is overall list type"],[2138,17,2138,32,"-- No type info"],[2134,13,2134,89,"-- which cannot be local, so we can just create an empty local context here."],[2133,13,2133,111,"-- Note that while `findFunctionType` requires local context, a pattern can only be a constructor,"],[2132,13,2132,62,"-- Get type info we've stored and use it to check"],[2241,9,2241,48,"-- Generic and unit types are dead ends"],[2220,13,2220,45,"-- Tuples must have a tuple type"],[2206,9,2206,60,"-- Descend into functions, tuples, and custom types"],[2203,17,2203,73,"-- Used any found record information to check subrecords"],[2196,17,2196,73,"-- Used any found record information to check subrecords"],[2191,9,2191,38,"-- Records are simply records"],[2396,13,2396,49,"-- FunctionOrValue ModuleName String"],[2395,13,2395,32,"-- CharLiteral Char"],[2394,13,2394,30,"-- Literal String"],[2393,13,2393,43,"-- RecordAccessFunction String"],[2392,13,2392,37,"-- GLSLExpression String"],[2391,13,2391,31,"-- Floatable Float"],[2390,13,2390,23,"-- Hex Int"],[2389,13,2389,27,"-- Integer Int"],[2388,13,2388,31,"-- Operator String"],[2387,13,2387,37,"-- PrefixOperator String"],[2386,13,2386,24,"-- UnitExpr"],[2385,13,2385,95,"-- The following neither have subexpressions nor are a record and so are dead ends"],[2378,17,2378,73,"-- Used any found record information to check subrecords"],[2368,21,2368,84,"-- Get type from updated var if we don't have a good annotation"],[2364,13,2364,95,"-- A record update expression does not have to have all fields of the known record"],[2363,13,2363,88,"-- A record update must have the same type as the record, so type is useful"],[2359,17,2359,73,"-- Used any found record information to check subrecords"],[2351,13,2351,78,"-- A record expression has to have all fields of the known record"],[2336,13,2336,64,"-- Create new bindings from any that have type info"],[2332,13,2332,35,"-- Check as a function"],[2313,13,2313,50,"-- Branches have same type as overall"],[2312,13,2312,65,"-- Try to infer type of case expression for patterns"],[2307,13,2307,45,"-- Tuples must have a tuple type"],[2303,13,2303,89,"-- List predicate must have type Bool and branches have same type as overall"],[2299,13,2299,44,"-- Handle a few known operators"],[2295,13,2295,58,"-- Try to pull type info from known functions"],[2287,17,2287,47,"-- Lists must have a list type"],[2282,13,2282,47,"-- Parentheses don't change a type"],[2278,13,2278,46,"-- Negation doesn't change a type"],[2276,9,2276,96,"-- Simple patterns simply descend into sub expressions of, unwrapping type if necessary"],[2411,13,2411,101,"-- Try to infer type of e for type info, since destructuring can't have type annotations"],[2438,13,2438,101,"-- Try to infer type of e for type info, since destructuring can't have type annotations"],[2455,13,2455,111,"-- Other operators, we don't know (or rather care) what they do, so just treat them like functions"],[2547,21,2547,50,"-- Negation (Node Expression)"],[2546,21,2546,39,"-- Operator String"],[2545,21,2545,39,"-- Floatable Float"],[2544,21,2544,31,"-- Hex Int"],[2543,21,2543,35,"-- Integer Int"],[2542,21,2542,65,"-- TupledExpression (List (Node Expression))"],[2541,21,2541,40,"-- CharLiteral Char"],[2540,21,2540,38,"-- Literal String"],[2539,21,2539,61,"-- RecordExpr (List (Node RecordSetter))"],[2538,21,2538,57,"-- ListExpr (List (Node Expression))"],[2537,21,2537,87,"-- RecordUpdateExpression (Node String) (List (Node RecordSetter))"],[2536,21,2536,61,"-- List.concatMap (checkExpr Nothing) es"],[2535,21,2535,45,"-- GLSLExpression String"],[2534,21,2534,32,"-- UnitExpr"],[2533,21,2533,60,"-- * Cannot apply args to non-functions"],[2532,21,2532,68,"-- RecordAccess (Node Expression) (Node String)"],[2531,21,2531,101,"-- OperatorApplication String InfixDirection (Node Expression) (Node Expression)"],[2530,21,2530,85,"-- IfBlock (Node Expression) (Node Expression) (Node Expression)"],[2529,21,2529,48,"-- CaseExpression CaseBlock"],[2528,21,2528,46,"-- LetExpression LetBlock"],[2527,21,2527,60,"-- Application (List (Node Expression))"],[2526,21,2526,98,"-- * These are possibly valid, but can't infer the \"return\" type of the block"],[2525,21,2525,47,"-- LambdaExpression Lambda"],[2524,21,2524,80,"-- * This is valid application, but we can't infer the type"],[2520,25,2520,96,"-- Assume there is only one argument, because if not, it's a type error"],[2515,21,2515,46,"-- Unwrap the parentheses"],[2511,25,2511,85,"-- Couldn't find the function type, so type info is gone now"],[2501,33,2501,52,"-- Assign type vars"],[2493,25,2493,85,"-- Couldn't find the function type, so type info is gone now"],[2483,33,2483,52,"-- Assign type vars"],[2562,33,2562,88,"-- This is, in essence, a generic record with one field"],[2555,5,2555,106,"-- We know the expression being accessed is a record with a field of the type of the total expression"],[2600,21,2600,93,"-- Constructor, not a function, which cannot be defined in local context"],[2621,9,2621,48,"-- There aren't any duplicate operators"],[2751,13,2751,33,"-- VarPattern String"],[2750,13,2750,34,"-- FloatPattern Float"],[2749,13,2749,30,"-- HexPattern Int"],[2748,13,2748,30,"-- IntPattern Int"],[2747,13,2747,36,"-- StringPattern String"],[2746,13,2746,32,"-- CharPattern Char"],[2745,13,2745,27,"-- UnitPattern"],[2744,13,2744,26,"-- AllPattern"],[2743,13,2743,51,"-- Neither can descend into nor check:"],[2739,17,2739,94,"-- No such thing as subrecords for patterns, so we can just return the errors"],[2730,13,2730,89,"-- which cannot be local, so we can just create an empty local context here."],[2729,13,2729,111,"-- Note that while `findFunctionType` requires local context, a pattern can only be a constructor,"],[2728,13,2728,62,"-- Get type info we've stored and use it to check"],[2724,13,2724,46,"-- Parentheses do not change type"],[2720,13,2720,47,"-- As pattern does not change type"],[2712,17,2712,49,"-- List pattern has to be a list"],[2703,17,2703,43,"-- Uncons has to be a list"],[2697,13,2697,45,"-- Tuples must have a tuple type"],[2821,53,2821,139,"-- Unit record is always canonical, or else it's a type error, in which case who knows"],[3080,21,3080,57,"-- Do not sort if config says not to"],[3074,21,3074,62,"-- Report without fixes if config says to"],[3070,21,3070,61,"-- Sort alphabetically if config says to"],[3063,21,3063,87,"-- Keep any fields that have identical types despite the ambiguity"],[3059,13,3059,31,"--Ambiguous record"],[3055,13,3055,34,"-- Unambiguous record"],[3051,13,3051,95,"-- Generic with unknown fields, so sort accordingly and use what type info we have"],[3047,13,3047,53,"-- Sort alphabetically if config says to"],[3046,13,3046,58,"-- Completely unknown record, so no type data"],[3041,21,3041,53,"-- Unknown record; don't sort it"],[3037,21,3037,63,"-- Unknown record, so report without fixes"],[3033,21,3033,80,"-- Unknown record, so sort alphabetically if config says to"],[2997,29,2997,97,"-- Prefer matches without unknown fields and that are not subrecords"],[2988,37,2988,95,"-- Keep only matching field types between duplicate orders"],[2981,29,2981,69,"-- Prefer matches without unknown fields"],[2977,17,2977,41,"-- Dedupe by field order"],[2948,13,2948,76,"-- Assume opening `{` is just the first character of the range."],[3094,13,3094,101,"-- but it works as long as a record doesn't have over 1,000,000 fields, which seems safe"],[3093,13,3093,70,"-- This is an ugly hack to put generic fields first/last,"],[3228,13,3228,83,"-- Don't worry about module name, because this will never be ambiguous"],[3206,29,3206,124,"-- Either it's an empty generic or nothing matched; either way just say what fields are missing"],[3331,21,3331,82,"-- If there are multiple matches, try to disambiguate by type"],[3317,17,3317,94,"-- Record was not generic but extra fields were present, so it wasn't a match"],[3313,17,3313,88,"-- Record is not generic and has no extra fields, so it is a good match"],[3300,17,3300,47,"-- Too many fields are missing"],[3281,25,3281,87,"-- If any `Nothing`s were encountered, we're missing type info"],[3275,29,3275,114,"-- same type variable (but it does for the known record if they are both `Maybe var`)"],[3274,29,3274,116,"-- For example, { a = Nothing, b = Nothing } should not require `a` and `b` to have the"],[3273,29,3273,115,"-- Only keep type variables assigned on the known record, since fields are independent"],[3429,21,3429,100,"-- Divide fields into those that are present in both and those that are missing"],[3415,21,3415,48,"-- Tuples must be same size"],[3386,13,3386,41,"-- Fields in both must match"],[3357,21,3357,131,"-- Handle base case.  This isn't right, but not worth going to the effort of matching typeclasses and the like"],[3352,21,3352,116,"-- Remove the matched typevar, because if the same exists within it refers to a different value"],[3351,21,3351,85,"-- If the type var has been assigned, check if that type matches"],[3498,21,3498,48,"-- Nothing else is a number"],[3485,21,3485,50,"-- Nothing else is appendable"],[3472,21,3472,50,"-- Nothing else is comparable"],[3662,21,3662,52,"-- Handle a few known operators"],[3649,49,3649,104,"-- This is, in essence, a generic record with one field"],[3642,21,3642,122,"-- We know the expression being accessed is a record with a field of the type of the total expression"],[3604,21,3604,56,"-- Try to infer all cases and unify"],[3594,21,3594,58,"-- Try to infer either side and unify"],[3587,21,3587,63,"-- Type is just whatever is in parentheses"],[3562,25,3562,55,"-- Have to check all and unify"],[3558,25,3558,57,"-- An empty list can be anything"],[3533,21,3533,57,"-- Mr. Incredible says UNIT IS UNIT."],[3758,21,3758,45,"-- Try to infer the type"],[3748,21,3748,83,"-- Assume there's only one arg, since it's a type error if not"],[3744,21,3744,46,"-- Unwrap the parentheses"],[3739,25,3739,67,"-- Definitely can't infer an operator type"],[3734,25,3734,44,"-- Assign type vars"],[3771,13,3771,99,"-- Dedupe the slow way because custom types aren't comparable and order doesn't matter"],[3866,13,3866,57,"-- NamedType unifies with nothing but itself"],[3865,13,3865,56,"-- UnitType unifies with nothing but itself"],[3827,13,3827,92,"-- Divide fields into those that are present in both and those that are missing"],[3887,13,3887,50,"-- Do not report 0 or 1 field records"],[3923,13,3923,50,"-- Do not report 0 or 1 field records"]]]]
