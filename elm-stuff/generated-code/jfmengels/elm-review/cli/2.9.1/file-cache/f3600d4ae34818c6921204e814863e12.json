[1,[[1,1,13,6,[0,[[1,8,1,12,["Util"]],[1,13,13,6,[1,[[2,7,2,18,[3,["GluedTo",[1,[2,14,2,18]]]]],[3,7,3,27,[1,"allBindingsInPattern"]],[4,7,4,19,[1,"checkSorting"]],[5,7,5,27,[1,"checkSortingWithGlue"]],[6,7,6,18,[1,"countUsesIn"]],[7,7,7,25,[1,"fallbackCompareFor"]],[8,7,8,39,[1,"fallbackCompareWithUnsortableFor"]],[9,7,9,21,[1,"findAllNamesIn"]],[10,7,10,23,[1,"findDependencies"]],[11,7,11,21,[1,"makeAccessFunc"]],[12,7,12,15,[1,"validate"]]]]]]]],[[18,1,18,28,[[18,8,18,12,["Dict"]],[0],[1,[18,13,18,28,[1,[[18,23,18,27,[2,"Dict"]]]]]]]],[19,1,19,27,[[19,8,19,18,["Dict","Extra"]],[1,[19,22,19,27,["DictX"]]],[0]]],[20,1,20,75,[[20,8,20,29,["Elm","Syntax","Expression"]],[0],[1,[20,30,20,75,[1,[[20,40,20,54,[3,["Expression",[1,[20,50,20,54]]]]],[20,56,20,74,[3,["LetDeclaration",[1,[20,70,20,74]]]]]]]]]]],[21,1,21,47,[[21,8,21,23,["Elm","Syntax","Node"]],[1,[21,27,21,31,["Node"]]],[1,[21,32,21,47,[1,[[21,42,21,46,[2,"Node"]]]]]]]],[22,1,22,49,[[22,8,22,26,["Elm","Syntax","Pattern"]],[0],[1,[22,27,22,49,[1,[[22,37,22,48,[3,["Pattern",[1,[22,44,22,48]]]]]]]]]]],[23,1,23,41,[[23,8,23,24,["Elm","Syntax","Range"]],[0],[1,[23,25,23,41,[1,[[23,35,23,40,[2,"Range"]]]]]]]],[24,1,24,63,[[24,8,24,13,["Graph"]],[0],[1,[24,14,24,63,[1,[[24,24,24,36,[2,"AcyclicGraph"]],[24,38,24,42,[2,"Edge"]],[24,44,24,49,[2,"Graph"]],[24,51,24,62,[2,"NodeContext"]]]]]]]],[25,1,25,27,[[25,8,25,18,["List","Extra"]],[1,[25,22,25,27,["ListX"]]],[0]]],[26,1,26,29,[[26,8,26,19,["Maybe","Extra"]],[1,[26,23,26,29,["MaybeX"]]],[0]]],[27,1,27,31,[[27,8,27,20,["Result","Extra"]],[1,[27,24,27,31,["ResultX"]]],[0]]],[28,1,28,40,[[28,8,28,18,["Review","Fix"]],[1,[28,22,28,25,["Fix"]]],[1,[28,26,28,40,[1,[[28,36,28,39,[2,"Fix"]]]]]]]],[29,1,29,44,[[29,8,29,19,["Review","Rule"]],[1,[29,23,29,27,["Rule"]]],[1,[29,28,29,44,[1,[[29,38,29,43,[2,"Error"]]]]]]]],[30,1,30,26,[[30,8,30,11,["Set"]],[0],[1,[30,12,30,26,[1,[[30,22,30,25,[2,"Set"]]]]]]]]],[[33,1,39,34,[2,[[1,[33,1,34,3,"{-| Specify how something is glued to another (by name).\n-}"]],[35,6,35,13,"GluedTo"],[],[[36,7,36,36,[[36,7,36,23,"GluedBeforeFirst"],[[36,24,36,36,[1,[36,25,36,28,[[],"Set"]],[[36,29,36,35,[1,[36,29,36,35,[[],"String"]],[]]]]]]]]],[37,7,37,35,[[37,7,37,22,"GluedAfterFirst"],[[37,23,37,35,[1,[37,24,37,27,[[],"Set"]],[[37,28,37,34,[1,[37,28,37,34,[[],"String"]],[]]]]]]]]],[38,7,38,35,[[38,7,38,22,"GluedBeforeLast"],[[38,23,38,35,[1,[38,24,38,27,[[],"Set"]],[[38,28,38,34,[1,[38,28,38,34,[[],"String"]],[]]]]]]]]],[39,7,39,34,[[39,7,39,21,"GluedAfterLast"],[[39,22,39,34,[1,[39,23,39,26,[[],"Set"]],[[39,27,39,33,[1,[39,27,39,33,[[],"String"]],[]]]]]]]]]]]]],[42,1,95,21,[0,[[1,[42,1,43,3,"{-| Recursively find all bindings in a pattern.\n-}"]],[1,[44,1,44,51,[[44,1,44,21,"allBindingsInPattern"],[44,24,44,51,[6,[44,24,44,36,[1,[44,24,44,28,[[],"Node"]],[[44,29,44,36,[1,[44,29,44,36,[[],"Pattern"]],[]]]]]],[44,40,44,51,[1,[44,40,44,44,[[],"List"]],[[44,45,44,51,[1,[44,45,44,51,[[],"String"]],[]]]]]]]]]]],[45,1,95,21,[[45,1,45,21,"allBindingsInPattern"],[[45,22,45,29,[11,"pattern"]]],[46,5,95,21,[16,[[[47,9,49,48,[0,[[0],[1,[47,9,47,48,[[47,9,47,11,"go"],[47,14,47,48,[6,[47,14,47,33,[1,[47,14,47,18,[[],"List"]],[[47,19,47,33,[1,[47,20,47,24,[[],"Node"]],[[47,25,47,32,[1,[47,25,47,32,[[],"Pattern"]],[]]]]]]]]],[47,37,47,48,[1,[47,37,47,41,[[],"List"]],[[47,42,47,48,[1,[47,42,47,48,[[],"String"]],[]]]]]]]]]]],[48,9,49,48,[[48,9,48,11,"go"],[],[49,13,49,48,[0,[[49,13,49,27,[2,["List"],"concatMap"]],[49,28,49,48,[2,[],"allBindingsInPattern"]]]]]]]]]]],[51,5,95,21,[17,[[51,10,51,28,[0,[[51,10,51,20,[2,["Node"],"value"]],[51,21,51,28,[2,[],"pattern"]]]]],[[[52,9,52,19,[12,[[],"AllPattern"],[]]],[53,13,53,15,[9,[]]]],[[55,9,55,20,[12,[[],"UnitPattern"],[]]],[56,13,56,15,[9,[]]]],[[58,9,58,22,[12,[[],"CharPattern"],[[58,21,58,22,[0]]]]],[59,13,59,15,[9,[]]]],[[61,9,61,24,[12,[[],"StringPattern"],[[61,23,61,24,[0]]]]],[62,13,62,15,[9,[]]]],[[64,9,64,21,[12,[[],"IntPattern"],[[64,20,64,21,[0]]]]],[65,13,65,15,[9,[]]]],[[67,9,67,21,[12,[[],"HexPattern"],[[67,20,67,21,[0]]]]],[68,13,68,15,[9,[]]]],[[70,9,70,23,[12,[[],"FloatPattern"],[[70,22,70,23,[0]]]]],[71,13,71,15,[9,[]]]],[[73,9,73,24,[12,[[],"TuplePattern"],[[73,22,73,24,[11,"ps"]]]]],[74,13,74,18,[0,[[74,13,74,15,[2,[],"go"]],[74,16,74,18,[2,[],"ps"]]]]]],[[76,9,76,25,[12,[[],"RecordPattern"],[[76,23,76,25,[11,"ps"]]]]],[77,13,77,35,[0,[[77,13,77,21,[2,["List"],"map"]],[77,22,77,32,[2,["Node"],"value"]],[77,33,77,35,[2,[],"ps"]]]]]],[[79,9,79,27,[12,[[],"UnConsPattern"],[[79,23,79,24,[11,"p"]],[79,25,79,27,[11,"ps"]]]]],[80,13,80,25,[0,[[80,13,80,15,[2,[],"go"]],[80,16,80,25,[9,[[80,18,80,19,[2,[],"p"]],[80,21,80,23,[2,[],"ps"]]]]]]]]],[[82,9,82,23,[12,[[],"ListPattern"],[[82,21,82,23,[11,"ps"]]]]],[83,13,83,18,[0,[[83,13,83,15,[2,[],"go"]],[83,16,83,18,[2,[],"ps"]]]]]],[[85,9,85,24,[12,[[],"VarPattern"],[[85,20,85,24,[11,"name"]]]]],[86,13,86,21,[9,[[86,15,86,19,[2,[],"name"]]]]]],[[88,9,88,26,[12,[[],"NamedPattern"],[[88,22,88,23,[0]],[88,24,88,26,[11,"ps"]]]]],[89,13,89,18,[0,[[89,13,89,15,[2,[],"go"]],[89,16,89,18,[2,[],"ps"]]]]]],[[91,9,91,25,[12,[[],"AsPattern"],[[91,19,91,20,[11,"p"]],[91,21,91,25,[11,"name"]]]]],[92,13,92,40,[1,"::",1,[92,13,92,28,[0,[[92,13,92,23,[2,["Node"],"value"]],[92,24,92,28,[2,[],"name"]]]]],[92,32,92,40,[0,[[92,32,92,34,[2,[],"go"]],[92,35,92,40,[9,[[92,37,92,38,[2,[],"p"]]]]]]]]]]],[[94,9,94,31,[12,[[],"ParenthesizedPattern"],[[94,30,94,31,[11,"p"]]]]],[95,13,95,21,[0,[[95,13,95,15,[2,[],"go"]],[95,16,95,21,[9,[[95,18,95,19,[2,[],"p"]]]]]]]]]]]]]]]]]]]]],[98,1,142,13,[0,[[1,[98,1,103,3,"{-| Given context and a list of ordering functions, check if a list is sorted\nand generate errors if it isn't. Ordering functions are applied in order, with\nties being broken by the next function in the list. Earlier ordering functions\nwill never be invalidated by later ones (i.e. there is no transitivity\nassumptions made between ordering functions).\n-}"]],[1,[104,1,104,167,[[104,1,104,13,"checkSorting"],[104,16,104,167,[6,[104,16,104,33,[6,[104,17,104,22,[1,[104,17,104,22,[[],"Range"]],[]]],[104,26,104,32,[1,[104,26,104,32,[[],"String"]],[]]]]],[104,37,104,167,[6,[104,37,104,43,[1,[104,37,104,43,[[],"String"]],[]]],[104,47,104,167,[6,[104,47,104,109,[1,[104,47,104,51,[[],"List"]],[[104,52,104,109,[6,[104,53,104,74,[5,[104,55,104,56,"a"],[104,58,104,73,[[104,59,104,73,[[104,59,104,64,"range"],[104,67,104,72,[1,[104,67,104,72,[[],"Range"]],[]]]]]]]]],[104,78,104,108,[6,[104,78,104,99,[5,[104,80,104,81,"a"],[104,83,104,98,[[104,84,104,98,[[104,84,104,89,"range"],[104,92,104,97,[1,[104,92,104,97,[[],"Range"]],[]]]]]]]]],[104,103,104,108,[1,[104,103,104,108,[[],"Order"]],[]]]]]]]]]],[104,113,104,167,[6,[104,113,104,118,[1,[104,113,104,118,[[],"Range"]],[]]],[104,122,104,167,[6,[104,122,104,148,[1,[104,122,104,126,[[],"List"]],[[104,127,104,148,[5,[104,129,104,130,"a"],[104,132,104,147,[[104,133,104,147,[[104,133,104,138,"range"],[104,141,104,146,[1,[104,141,104,146,[[],"Range"]],[]]]]]]]]]]]],[104,152,104,167,[1,[104,152,104,156,[[],"List"]],[[104,157,104,167,[1,[104,158,104,163,[[],"Error"]],[[104,164,104,166,[4,[]]]]]]]]]]]]]]]]]]]]]],[105,1,142,13,[[105,1,105,13,"checkSorting"],[[105,14,105,27,[11,"extractSource"]],[105,28,105,41,[11,"errorConcerns"]],[105,42,105,51,[11,"orderings"]],[105,52,105,62,[11,"errorRange"]],[105,63,105,65,[11,"ds"]]],[106,5,142,13,[16,[[[107,9,109,63,[0,[[0],[1,[107,9,107,58,[[107,9,107,16,"indexed"],[107,19,107,58,[1,[107,19,107,23,[[],"List"]],[[107,24,107,58,[1,[107,25,107,35,[["Graph"],"Node"]],[[107,36,107,57,[5,[107,38,107,39,"a"],[107,41,107,56,[[107,42,107,56,[[107,42,107,47,"range"],[107,50,107,55,[1,[107,50,107,55,[[],"Range"]],[]]]]]]]]]]]]]]]]]],[108,9,109,63,[[108,9,108,16,"indexed"],[],[109,13,109,63,[0,[[109,13,109,28,[2,["List"],"indexedMap"]],[109,29,109,60,[7,[109,30,109,59,[18,[[[109,31,109,32,[11,"i"]],[109,33,109,34,[11,"d"]]],[109,38,109,59,[8,[[109,40,109,46,[[109,40,109,42,"id"],[109,45,109,46,[2,[],"i"]]]],[109,48,109,58,[[109,48,109,53,"label"],[109,56,109,57,[2,[],"d"]]]]]]]]]]]],[109,61,109,63,[2,[],"ds"]]]]]]]]]]],[111,5,142,13,[1,"|>",0,[111,5,130,6,[7,[111,6,129,34,[17,[[111,11,111,20,[2,[],"orderings"]],[[[112,9,112,14,[10,[[112,11,112,12,[11,"o"]]]]],[115,13,120,24,[0,[[115,13,115,26,[2,["List"],"sortWith"]],[116,17,119,18,[7,[116,18,118,68,[18,[[[116,19,116,21,[11,"d1"]],[116,22,116,24,[11,"d2"]]],[117,21,118,68,[1,"|>",0,[117,21,117,49,[7,[117,22,117,48,[18,[[[117,23,117,25,[1]]],[117,29,117,48,[0,[[117,29,117,36,[2,[],"compare"]],[117,37,117,42,[19,[117,37,117,39,[2,[],"d1"]],[117,40,117,42,"id"]]],[117,43,117,48,[19,[117,43,117,45,[2,[],"d2"]],[117,46,117,48,"id"]]]]]]]]]]],[118,28,118,68,[0,[[118,28,118,46,[2,[],"fallbackCompareFor"]],[118,47,118,68,[7,[118,48,118,67,[0,[[118,48,118,49,[2,[],"o"]],[118,50,118,58,[19,[118,50,118,52,[2,[],"d1"]],[118,53,118,58,"label"]]],[118,59,118,67,[19,[118,59,118,61,[2,[],"d2"]],[118,62,118,67,"label"]]]]]]]]]]]]]]]]]],[120,17,120,24,[2,[],"indexed"]]]]]],[[122,9,122,11,[11,"os"]],[125,13,129,34,[1,"|>",0,[125,13,128,41,[1,"|>",0,[125,13,127,43,[1,"|>",0,[125,13,126,51,[1,"|>",0,[125,13,125,32,[0,[[125,13,125,21,[2,[],"genEdges"]],[125,22,125,24,[2,[],"os"]],[125,25,125,32,[2,[],"indexed"]]]]],[126,20,126,51,[0,[[126,20,126,43,[2,["Graph"],"fromNodesAndEdges"]],[126,44,126,51,[2,[],"indexed"]]]]]]],[127,20,127,43,[0,[[127,20,127,35,[2,[],"eliminateCycles"]],[127,36,127,43,[2,[],"indexed"]]]]]]],[128,20,128,41,[2,["Graph"],"topologicalSort"]]]],[129,20,129,34,[0,[[129,20,129,28,[2,["List"],"map"]],[129,29,129,34,[20,".node"]]]]]]]]]]]]]],[132,12,142,13,[7,[132,13,141,23,[18,[[[132,14,132,20,[11,"sorted"]]],[133,17,141,23,[11,[133,20,133,63,[1,"/=",2,[133,20,133,39,[0,[[133,20,133,28,[2,["List"],"map"]],[133,29,133,32,[20,".id"]],[133,33,133,39,[2,[],"sorted"]]]]],[133,43,133,63,[0,[[133,43,133,51,[2,["List"],"map"]],[133,52,133,55,[20,".id"]],[133,56,133,63,[2,[],"indexed"]]]]]]],[135,21,138,42,[1,"|>",0,[135,21,137,66,[1,"|>",0,[135,21,136,51,[1,"|>",0,[135,21,135,76,[0,[[135,21,135,29,[2,["List"],"map"]],[135,30,135,69,[7,[135,31,135,68,[18,[[[135,32,135,45,[8,[[135,34,135,36,"id"],[135,38,135,43,"label"]]]]],[135,49,135,68,[6,[[135,51,135,53,[2,[],"id"]],[135,55,135,66,[19,[135,55,135,60,[2,[],"label"]],[135,61,135,66,"range"]]]]]]]]]]],[135,70,135,76,[2,[],"sorted"]]]]],[136,28,136,51,[0,[[136,28,136,37,[2,[],"createFix"]],[136,38,136,51,[2,[],"extractSource"]]]]]]],[137,28,137,66,[0,[[137,28,137,41,[2,[],"unsortedError"]],[137,42,137,55,[2,[],"errorConcerns"]],[137,56,137,66,[2,[],"errorRange"]]]]]]],[138,28,138,42,[2,["List"],"singleton"]]]],[141,21,141,23,[9,[]]]]]]]]]]]]]]]]]]]],[145,1,234,13,[0,[[1,[145,1,147,3,"{-| Given context and a list of ordering functions, check if a list is sorted\nand generate errors if it isn't.\n-}"]],[1,[148,1,148,319,[[148,1,148,21,"checkSortingWithGlue"],[148,24,148,319,[6,[148,24,148,41,[6,[148,25,148,30,[1,[148,25,148,30,[[],"Range"]],[]]],[148,34,148,40,[1,[148,34,148,40,[[],"String"]],[]]]]],[148,45,148,319,[6,[148,45,148,51,[1,[148,45,148,51,[[],"String"]],[]]],[148,55,148,319,[6,[148,55,148,213,[1,[148,55,148,59,[[],"List"]],[[148,60,148,213,[6,[148,61,148,130,[5,[148,63,148,64,"a"],[148,66,148,129,[[148,67,148,88,[[148,67,148,72,"glued"],[148,75,148,88,[1,[148,75,148,80,[[],"Maybe"]],[[148,81,148,88,[1,[148,81,148,88,[[],"GluedTo"]],[]]]]]]]],[148,90,148,113,[[148,90,148,100,"namesBound"],[148,103,148,113,[1,[148,103,148,106,[[],"Set"]],[[148,107,148,113,[1,[148,107,148,113,[[],"String"]],[]]]]]]]],[148,115,148,129,[[148,115,148,120,"range"],[148,123,148,128,[1,[148,123,148,128,[[],"Range"]],[]]]]]]]]],[148,134,148,212,[6,[148,134,148,203,[5,[148,136,148,137,"a"],[148,139,148,202,[[148,140,148,161,[[148,140,148,145,"glued"],[148,148,148,161,[1,[148,148,148,153,[[],"Maybe"]],[[148,154,148,161,[1,[148,154,148,161,[[],"GluedTo"]],[]]]]]]]],[148,163,148,186,[[148,163,148,173,"namesBound"],[148,176,148,186,[1,[148,176,148,179,[[],"Set"]],[[148,180,148,186,[1,[148,180,148,186,[[],"String"]],[]]]]]]]],[148,188,148,202,[[148,188,148,193,"range"],[148,196,148,201,[1,[148,196,148,201,[[],"Range"]],[]]]]]]]]],[148,207,148,212,[1,[148,207,148,212,[[],"Order"]],[]]]]]]]]]],[148,217,148,319,[6,[148,217,148,222,[1,[148,217,148,222,[[],"Range"]],[]]],[148,226,148,319,[6,[148,226,148,300,[1,[148,226,148,230,[[],"List"]],[[148,231,148,300,[5,[148,233,148,234,"a"],[148,236,148,299,[[148,237,148,258,[[148,237,148,242,"glued"],[148,245,148,258,[1,[148,245,148,250,[[],"Maybe"]],[[148,251,148,258,[1,[148,251,148,258,[[],"GluedTo"]],[]]]]]]]],[148,260,148,283,[[148,260,148,270,"namesBound"],[148,273,148,283,[1,[148,273,148,276,[[],"Set"]],[[148,277,148,283,[1,[148,277,148,283,[[],"String"]],[]]]]]]]],[148,285,148,299,[[148,285,148,290,"range"],[148,293,148,298,[1,[148,293,148,298,[[],"Range"]],[]]]]]]]]]]]],[148,304,148,319,[1,[148,304,148,308,[[],"List"]],[[148,309,148,319,[1,[148,310,148,315,[[],"Error"]],[[148,316,148,318,[4,[]]]]]]]]]]]]]]]]]]]]]],[149,1,234,13,[[149,1,149,21,"checkSortingWithGlue"],[[149,22,149,35,[11,"extractSource"]],[149,36,149,49,[11,"errorConcerns"]],[149,50,149,59,[11,"orderings"]],[149,60,149,70,[11,"errorRange"]],[149,71,149,73,[11,"ds"]]],[150,5,234,13,[16,[[[151,9,189,62,[0,[[0],[1,[151,9,151,302,[[151,9,151,18,"glueLevel"],[151,21,151,302,[6,[151,21,151,108,[1,[151,21,151,25,[[],"List"]],[[151,26,151,108,[1,[151,27,151,37,[["Graph"],"Node"]],[[151,38,151,107,[5,[151,40,151,41,"a"],[151,43,151,106,[[151,44,151,65,[[151,44,151,49,"glued"],[151,52,151,65,[1,[151,52,151,57,[[],"Maybe"]],[[151,58,151,65,[1,[151,58,151,65,[[],"GluedTo"]],[]]]]]]]],[151,67,151,90,[[151,67,151,77,"namesBound"],[151,80,151,90,[1,[151,80,151,83,[[],"Set"]],[[151,84,151,90,[1,[151,84,151,90,[[],"String"]],[]]]]]]]],[151,92,151,106,[[151,92,151,97,"range"],[151,100,151,105,[1,[151,100,151,105,[[],"Range"]],[]]]]]]]]]]]]]]],[151,112,151,302,[6,[151,112,151,211,[1,[151,112,151,116,[[],"List"]],[[151,117,151,211,[1,[151,118,151,122,[[],"List"]],[[151,123,151,210,[1,[151,124,151,135,[[],"NodeContext"]],[[151,136,151,205,[5,[151,138,151,139,"a"],[151,141,151,204,[[151,142,151,163,[[151,142,151,147,"glued"],[151,150,151,163,[1,[151,150,151,155,[[],"Maybe"]],[[151,156,151,163,[1,[151,156,151,163,[[],"GluedTo"]],[]]]]]]]],[151,165,151,188,[[151,165,151,175,"namesBound"],[151,178,151,188,[1,[151,178,151,181,[[],"Set"]],[[151,182,151,188,[1,[151,182,151,188,[[],"String"]],[]]]]]]]],[151,190,151,204,[[151,190,151,195,"range"],[151,198,151,203,[1,[151,198,151,203,[[],"Range"]],[]]]]]]]]],[151,206,151,209,[1,[151,206,151,209,[[],"Int"]],[]]]]]]]]]]]],[151,215,151,302,[1,[151,215,151,219,[[],"List"]],[[151,220,151,302,[1,[151,221,151,231,[["Graph"],"Node"]],[[151,232,151,301,[5,[151,234,151,235,"a"],[151,237,151,300,[[151,238,151,259,[[151,238,151,243,"glued"],[151,246,151,259,[1,[151,246,151,251,[[],"Maybe"]],[[151,252,151,259,[1,[151,252,151,259,[[],"GluedTo"]],[]]]]]]]],[151,261,151,284,[[151,261,151,271,"namesBound"],[151,274,151,284,[1,[151,274,151,277,[[],"Set"]],[[151,278,151,284,[1,[151,278,151,284,[[],"String"]],[]]]]]]]],[151,286,151,300,[[151,286,151,291,"range"],[151,294,151,299,[1,[151,294,151,299,[[],"Range"]],[]]]]]]]]]]]]]]]]]]]]]],[152,9,189,62,[[152,9,152,18,"glueLevel"],[[152,19,152,25,[11,"sorted"]],[152,26,152,31,[11,"glued"]]],[153,13,189,62,[17,[[153,18,153,23,[2,[],"glued"]],[[[154,17,154,19,[10,[]]],[155,21,155,27,[2,[],"sorted"]]],[[157,17,157,24,[9,[157,17,157,18,[11,"g"]],[157,22,157,24,[11,"gs"]]]],[158,21,189,62,[16,[[[159,25,162,40,[0,[[0],[1,[159,25,159,121,[[159,25,159,31,"asList"],[159,34,159,121,[1,[159,34,159,38,[[],"List"]],[[159,39,159,121,[1,[159,40,159,50,[["Graph"],"Node"]],[[159,51,159,120,[5,[159,53,159,54,"a"],[159,56,159,119,[[159,57,159,78,[[159,57,159,62,"glued"],[159,65,159,78,[1,[159,65,159,70,[[],"Maybe"]],[[159,71,159,78,[1,[159,71,159,78,[[],"GluedTo"]],[]]]]]]]],[159,80,159,103,[[159,80,159,90,"namesBound"],[159,93,159,103,[1,[159,93,159,96,[[],"Set"]],[[159,97,159,103,[1,[159,97,159,103,[[],"String"]],[]]]]]]]],[159,105,159,119,[[159,105,159,110,"range"],[159,113,159,118,[1,[159,113,159,118,[[],"Range"]],[]]]]]]]]]]]]]]]]]],[160,25,162,40,[[160,25,160,31,"asList"],[],[161,29,162,40,[1,"|>",0,[161,29,161,45,[0,[[161,29,161,37,[2,["List"],"map"]],[161,38,161,43,[20,".node"]],[161,44,161,45,[2,[],"g"]]]]],[162,36,162,40,[2,[],"sort"]]]]]]]]]],[164,21,189,62,[1,"|>",0,[164,21,188,22,[7,[164,22,187,33,[11,[164,25,164,44,[0,[[164,25,164,37,[2,["List"],"isEmpty"]],[164,38,164,44,[2,[],"sorted"]]]]],[166,25,166,31,[2,[],"asList"]],[170,25,187,33,[1,"|>",0,[170,25,170,103,[0,[[170,25,170,39,[2,["List"],"partition"]],[170,40,170,96,[7,[170,41,170,95,[1,"<<",0,[170,41,170,85,[1,"<<",0,[170,41,170,75,[0,[[170,41,170,54,[2,["MaybeX"],"unwrap"]],[170,55,170,60,[2,[],"False"]],[170,61,170,75,[2,[],"isGluedToFirst"]]]]],[170,79,170,85,[20,".glued"]]]],[170,89,170,95,[20,".label"]]]]]],[170,97,170,103,[2,[],"asList"]]]]],[171,32,187,33,[7,[171,33,186,53,[18,[[[171,34,171,53,[7,[[171,36,171,43,[11,"toFirst"]],[171,45,171,51,[11,"toLast"]]]]]],[172,37,186,53,[1,"|>",0,[172,37,185,79,[1,"|>",0,[172,37,179,53,[1,"|>",0,[172,37,178,47,[0,[[172,37,172,47,[2,["List"],"foldl"]],[173,41,176,42,[7,[173,42,175,101,[18,[[[173,43,173,44,[11,"d"]],[173,45,173,65,[8,[[173,47,173,55,"inserted"],[173,57,173,63,"toGlue"]]]]],[174,45,175,101,[1,"|>",0,[174,45,174,65,[0,[[174,45,174,56,[2,[],"insertGlued"]],[174,57,174,63,[2,[],"toGlue"]],[174,64,174,65,[2,[],"d"]]]]],[175,52,175,101,[7,[175,53,175,100,[18,[[[175,54,175,55,[11,"r"]]],[175,59,175,100,[21,[175,61,175,62,"r"],[[175,65,175,99,[[175,65,175,73,"inserted"],[175,76,175,98,[1,"++",1,[175,76,175,84,[2,[],"inserted"]],[175,88,175,98,[19,[175,88,175,89,[2,[],"r"]],[175,90,175,98,"inserted"]]]]]]]]]]]]]]]]]]]]]],[177,41,177,76,[8,[[177,43,177,56,[[177,43,177,51,"inserted"],[177,54,177,56,[9,[]]]]],[177,58,177,75,[[177,58,177,64,"toGlue"],[177,67,177,74,[2,[],"toFirst"]]]]]]],[178,41,178,47,[2,[],"sorted"]]]]],[179,44,179,53,[20,".inserted"]]]],[180,44,185,79,[0,[[180,44,180,54,[2,["List"],"foldr"]],[181,45,184,46,[7,[181,46,183,105,[18,[[[181,47,181,48,[11,"d"]],[181,49,181,69,[8,[[181,51,181,59,"inserted"],[181,61,181,67,"toGlue"]]]]],[182,49,183,105,[1,"|>",0,[182,49,182,69,[0,[[182,49,182,60,[2,[],"insertGlued"]],[182,61,182,67,[2,[],"toGlue"]],[182,68,182,69,[2,[],"d"]]]]],[183,56,183,105,[7,[183,57,183,104,[18,[[[183,58,183,59,[11,"r"]]],[183,63,183,104,[21,[183,65,183,66,"r"],[[183,69,183,103,[[183,69,183,77,"inserted"],[183,80,183,102,[1,"++",1,[183,80,183,90,[19,[183,80,183,81,[2,[],"r"]],[183,82,183,90,"inserted"]]],[183,94,183,102,[2,[],"inserted"]]]]]]]]]]]]]]]]]]]]],[185,45,185,79,[8,[[185,47,185,60,[[185,47,185,55,"inserted"],[185,58,185,60,[9,[]]]]],[185,62,185,78,[[185,62,185,68,"toGlue"],[185,71,185,77,[2,[],"toLast"]]]]]]]]]]]],[186,44,186,53,[20,".inserted"]]]]]]]]]]]]]]],[189,28,189,62,[7,[189,29,189,61,[18,[[[189,30,189,37,[11,"sorted_"]]],[189,41,189,61,[0,[[189,41,189,50,[2,[],"glueLevel"]],[189,51,189,58,[2,[],"sorted_"]],[189,59,189,61,[2,[],"gs"]]]]]]]]]]]]]]]]]]]]]]]]],[191,9,193,63,[0,[[0],[1,[191,9,191,106,[[191,9,191,16,"indexed"],[191,19,191,106,[1,[191,19,191,23,[[],"List"]],[[191,24,191,106,[1,[191,25,191,35,[["Graph"],"Node"]],[[191,36,191,105,[5,[191,38,191,39,"a"],[191,41,191,104,[[191,42,191,63,[[191,42,191,47,"glued"],[191,50,191,63,[1,[191,50,191,55,[[],"Maybe"]],[[191,56,191,63,[1,[191,56,191,63,[[],"GluedTo"]],[]]]]]]]],[191,65,191,88,[[191,65,191,75,"namesBound"],[191,78,191,88,[1,[191,78,191,81,[[],"Set"]],[[191,82,191,88,[1,[191,82,191,88,[[],"String"]],[]]]]]]]],[191,90,191,104,[[191,90,191,95,"range"],[191,98,191,103,[1,[191,98,191,103,[[],"Range"]],[]]]]]]]]]]]]]]]]]],[192,9,193,63,[[192,9,192,16,"indexed"],[],[193,13,193,63,[0,[[193,13,193,28,[2,["List"],"indexedMap"]],[193,29,193,60,[7,[193,30,193,59,[18,[[[193,31,193,32,[11,"i"]],[193,33,193,34,[11,"d"]]],[193,38,193,59,[8,[[193,40,193,46,[[193,40,193,42,"id"],[193,45,193,46,[2,[],"i"]]]],[193,48,193,58,[[193,48,193,53,"label"],[193,56,193,57,[2,[],"d"]]]]]]]]]]]],[193,61,193,63,[2,[],"ds"]]]]]]]]]],[195,9,207,130,[0,[[0],[1,[195,9,195,398,[[195,9,195,20,"insertGlued"],[195,23,195,398,[6,[195,23,195,110,[1,[195,23,195,27,[[],"List"]],[[195,28,195,110,[1,[195,29,195,39,[["Graph"],"Node"]],[[195,40,195,109,[5,[195,42,195,43,"a"],[195,45,195,108,[[195,46,195,67,[[195,46,195,51,"glued"],[195,54,195,67,[1,[195,54,195,59,[[],"Maybe"]],[[195,60,195,67,[1,[195,60,195,67,[[],"GluedTo"]],[]]]]]]]],[195,69,195,92,[[195,69,195,79,"namesBound"],[195,82,195,92,[1,[195,82,195,85,[[],"Set"]],[[195,86,195,92,[1,[195,86,195,92,[[],"String"]],[]]]]]]]],[195,94,195,108,[[195,94,195,99,"range"],[195,102,195,107,[1,[195,102,195,107,[[],"Range"]],[]]]]]]]]]]]]]]],[195,114,195,398,[6,[195,114,195,194,[1,[195,114,195,124,[["Graph"],"Node"]],[[195,125,195,194,[5,[195,127,195,128,"a"],[195,130,195,193,[[195,131,195,152,[[195,131,195,136,"glued"],[195,139,195,152,[1,[195,139,195,144,[[],"Maybe"]],[[195,145,195,152,[1,[195,145,195,152,[[],"GluedTo"]],[]]]]]]]],[195,154,195,177,[[195,154,195,164,"namesBound"],[195,167,195,177,[1,[195,167,195,170,[[],"Set"]],[[195,171,195,177,[1,[195,171,195,177,[[],"String"]],[]]]]]]]],[195,179,195,193,[[195,179,195,184,"range"],[195,187,195,192,[1,[195,187,195,192,[[],"Range"]],[]]]]]]]]]]]],[195,198,195,398,[4,[[195,200,195,298,[[195,200,195,208,"inserted"],[195,211,195,298,[1,[195,211,195,215,[[],"List"]],[[195,216,195,298,[1,[195,217,195,227,[["Graph"],"Node"]],[[195,228,195,297,[5,[195,230,195,231,"a"],[195,233,195,296,[[195,234,195,255,[[195,234,195,239,"glued"],[195,242,195,255,[1,[195,242,195,247,[[],"Maybe"]],[[195,248,195,255,[1,[195,248,195,255,[[],"GluedTo"]],[]]]]]]]],[195,257,195,280,[[195,257,195,267,"namesBound"],[195,270,195,280,[1,[195,270,195,273,[[],"Set"]],[[195,274,195,280,[1,[195,274,195,280,[[],"String"]],[]]]]]]]],[195,282,195,296,[[195,282,195,287,"range"],[195,290,195,295,[1,[195,290,195,295,[[],"Range"]],[]]]]]]]]]]]]]]]]],[195,300,195,397,[[195,300,195,306,"toGlue"],[195,309,195,396,[1,[195,309,195,313,[[],"List"]],[[195,314,195,396,[1,[195,315,195,325,[["Graph"],"Node"]],[[195,326,195,395,[5,[195,328,195,329,"a"],[195,331,195,394,[[195,332,195,353,[[195,332,195,337,"glued"],[195,340,195,353,[1,[195,340,195,345,[[],"Maybe"]],[[195,346,195,353,[1,[195,346,195,353,[[],"GluedTo"]],[]]]]]]]],[195,355,195,378,[[195,355,195,365,"namesBound"],[195,368,195,378,[1,[195,368,195,371,[[],"Set"]],[[195,372,195,378,[1,[195,372,195,378,[[],"String"]],[]]]]]]]],[195,380,195,394,[[195,380,195,385,"range"],[195,388,195,393,[1,[195,388,195,393,[[],"Range"]],[]]]]]]]]]]]]]]]]]]]]]]]]]]],[196,9,207,130,[[196,9,196,20,"insertGlued"],[[196,21,196,26,[11,"glued"]],[196,27,196,45,[14,[196,28,196,44,[13,[196,28,196,37,[8,[[196,30,196,35,"label"]]]],[196,41,196,44,"dec"]]]]]],[198,13,207,130,[1,"|>",0,[198,13,205,107,[1,"|>",0,[198,13,203,22,[0,[[198,13,198,27,[2,["List"],"partition"]],[199,17,202,18,[7,[199,18,201,109,[1,">>",1,[199,18,199,24,[20,".label"]],[200,24,201,109,[1,">>",1,[200,24,200,30,[20,".glued"]],[201,24,201,109,[0,[[201,24,201,37,[2,["MaybeX"],"unwrap"]],[201,38,201,43,[2,[],"False"]],[201,44,201,109,[7,[201,45,201,108,[1,"<<",0,[201,45,201,97,[1,"<<",0,[201,45,201,63,[1,"<<",0,[201,45,201,48,[2,[],"not"]],[201,52,201,63,[2,["Set"],"isEmpty"]]]],[201,67,201,97,[0,[[201,67,201,80,[2,["Set"],"intersect"]],[201,81,201,97,[19,[201,81,201,86,[2,[],"label"]],[201,87,201,97,"namesBound"]]]]]]]],[201,101,201,108,[2,[],"gluedTo"]]]]]]]]]]]]]]],[203,17,203,22,[2,[],"glued"]]]]],[205,20,205,107,[0,[[205,20,205,34,[2,["Tuple"],"mapFirst"]],[205,35,205,107,[7,[205,36,205,106,[0,[[205,36,205,50,[2,["List"],"partition"]],[205,51,205,106,[7,[205,52,205,105,[1,"<<",0,[205,52,205,95,[1,"<<",0,[205,52,205,85,[0,[[205,52,205,65,[2,["MaybeX"],"unwrap"]],[205,66,205,71,[2,[],"False"]],[205,72,205,85,[2,[],"isGluedBefore"]]]]],[205,89,205,95,[20,".glued"]]]],[205,99,205,105,[20,".label"]]]]]]]]]]]]]]]],[207,20,207,130,[7,[207,21,207,129,[18,[[[207,22,207,61,[7,[[207,24,207,51,[7,[[207,26,207,37,[11,"gluedBefore"]],[207,39,207,49,[11,"gluedAfter"]]]]],[207,53,207,59,[11,"toGlue"]]]]]],[207,65,207,129,[8,[[207,67,207,110,[[207,67,207,75,"inserted"],[207,78,207,110,[1,"++",1,[207,78,207,89,[2,[],"gluedBefore"]],[207,93,207,110,[1,"::",1,[207,93,207,96,[2,[],"dec"]],[207,100,207,110,[2,[],"gluedAfter"]]]]]]]],[207,112,207,128,[[207,112,207,118,"toGlue"],[207,121,207,127,[2,[],"toGlue"]]]]]]]]]]]]]]]]]]],[209,9,216,18,[0,[[0],[1,[209,9,209,194,[[209,9,209,13,"sort"],[209,16,209,194,[6,[209,16,209,103,[1,[209,16,209,20,[[],"List"]],[[209,21,209,103,[1,[209,22,209,32,[["Graph"],"Node"]],[[209,33,209,102,[5,[209,35,209,36,"a"],[209,38,209,101,[[209,39,209,60,[[209,39,209,44,"glued"],[209,47,209,60,[1,[209,47,209,52,[[],"Maybe"]],[[209,53,209,60,[1,[209,53,209,60,[[],"GluedTo"]],[]]]]]]]],[209,62,209,85,[[209,62,209,72,"namesBound"],[209,75,209,85,[1,[209,75,209,78,[[],"Set"]],[[209,79,209,85,[1,[209,79,209,85,[[],"String"]],[]]]]]]]],[209,87,209,101,[[209,87,209,92,"range"],[209,95,209,100,[1,[209,95,209,100,[[],"Range"]],[]]]]]]]]]]]]]]],[209,107,209,194,[1,[209,107,209,111,[[],"List"]],[[209,112,209,194,[1,[209,113,209,123,[["Graph"],"Node"]],[[209,124,209,193,[5,[209,126,209,127,"a"],[209,129,209,192,[[209,130,209,151,[[209,130,209,135,"glued"],[209,138,209,151,[1,[209,138,209,143,[[],"Maybe"]],[[209,144,209,151,[1,[209,144,209,151,[[],"GluedTo"]],[]]]]]]]],[209,153,209,176,[[209,153,209,163,"namesBound"],[209,166,209,176,[1,[209,166,209,169,[[],"Set"]],[[209,170,209,176,[1,[209,170,209,176,[[],"String"]],[]]]]]]]],[209,178,209,192,[[209,178,209,183,"range"],[209,186,209,191,[1,[209,186,209,191,[[],"Range"]],[]]]]]]]]]]]]]]]]]]]],[210,9,216,18,[[210,9,210,13,"sort"],[],[211,13,216,18,[0,[[211,13,211,26,[2,["List"],"sortWith"]],[212,17,216,18,[7,[212,18,215,95,[18,[[[212,19,212,21,[11,"d1"]],[212,22,212,24,[11,"d2"]]],[214,21,215,95,[1,"|>",0,[214,21,214,49,[7,[214,22,214,48,[18,[[[214,23,214,25,[1]]],[214,29,214,48,[0,[[214,29,214,36,[2,[],"compare"]],[214,37,214,42,[19,[214,37,214,39,[2,[],"d1"]],[214,40,214,42,"id"]]],[214,43,214,48,[19,[214,43,214,45,[2,[],"d2"]],[214,46,214,48,"id"]]]]]]]]]]],[215,28,215,95,[0,[[215,28,215,46,[2,[],"fallbackCompareFor"]],[215,47,215,95,[7,[215,48,215,94,[0,[[215,48,215,66,[2,[],"compareByOrderings"]],[215,67,215,76,[2,[],"orderings"]],[215,77,215,85,[19,[215,77,215,79,[2,[],"d1"]],[215,80,215,85,"label"]]],[215,86,215,94,[19,[215,86,215,88,[2,[],"d2"]],[215,89,215,94,"label"]]]]]]]]]]]]]]]]]]]]]]]]]]],[218,5,234,13,[1,"|>",0,[218,5,222,24,[1,"|>",0,[218,5,220,30,[1,"|>",0,[218,5,218,27,[0,[[218,5,218,19,[2,[],"gluedListToDAG"]],[218,20,218,27,[2,[],"indexed"]]]]],[220,12,220,30,[2,["Graph"],"heightLevels"]]]],[222,12,222,24,[0,[[222,12,222,21,[2,[],"glueLevel"]],[222,22,222,24,[9,[]]]]]]]],[224,12,234,13,[7,[224,13,233,23,[18,[[[224,14,224,20,[11,"sorted"]]],[225,17,233,23,[11,[225,20,225,63,[1,"/=",2,[225,20,225,39,[0,[[225,20,225,28,[2,["List"],"map"]],[225,29,225,32,[20,".id"]],[225,33,225,39,[2,[],"sorted"]]]]],[225,43,225,63,[0,[[225,43,225,51,[2,["List"],"map"]],[225,52,225,55,[20,".id"]],[225,56,225,63,[2,[],"indexed"]]]]]]],[227,21,230,42,[1,"|>",0,[227,21,229,66,[1,"|>",0,[227,21,228,51,[1,"|>",0,[227,21,227,76,[0,[[227,21,227,29,[2,["List"],"map"]],[227,30,227,69,[7,[227,31,227,68,[18,[[[227,32,227,45,[8,[[227,34,227,36,"id"],[227,38,227,43,"label"]]]]],[227,49,227,68,[6,[[227,51,227,53,[2,[],"id"]],[227,55,227,66,[19,[227,55,227,60,[2,[],"label"]],[227,61,227,66,"range"]]]]]]]]]]],[227,70,227,76,[2,[],"sorted"]]]]],[228,28,228,51,[0,[[228,28,228,37,[2,[],"createFix"]],[228,38,228,51,[2,[],"extractSource"]]]]]]],[229,28,229,66,[0,[[229,28,229,41,[2,[],"unsortedError"]],[229,42,229,55,[2,[],"errorConcerns"]],[229,56,229,66,[2,[],"errorRange"]]]]]]],[230,28,230,42,[2,["List"],"singleton"]]]],[233,21,233,23,[9,[]]]]]]]]]]]]]]]]]]]],[237,1,253,65,[0,[[1,[237,1,238,3,"{-| Count the uses of a given name in the scope of an expression.\n-}"]],[1,[239,1,239,47,[[239,1,239,12,"countUsesIn"],[239,15,239,47,[6,[239,15,239,30,[1,[239,15,239,19,[[],"Node"]],[[239,20,239,30,[1,[239,20,239,30,[[],"Expression"]],[]]]]]],[239,34,239,47,[6,[239,34,239,40,[1,[239,34,239,40,[[],"String"]],[]]],[239,44,239,47,[1,[239,44,239,47,[[],"Int"]],[]]]]]]]]]],[240,1,253,65,[[240,1,240,12,"countUsesIn"],[[240,13,240,17,[11,"expr"]],[240,18,240,22,[11,"name"]]],[241,5,253,65,[17,[[241,10,241,25,[0,[[241,10,241,20,[2,["Node"],"value"]],[241,21,241,25,[2,[],"expr"]]]]],[[[243,9,243,29,[12,[[],"FunctionOrValue"],[[243,25,243,27,[10,[]]],[243,28,243,29,[11,"n"]]]]],[244,13,248,18,[11,[244,16,244,25,[1,"==",2,[244,16,244,17,[2,[],"n"]],[244,21,244,25,[2,[],"name"]]]],[245,17,245,18,[3,1]],[248,17,248,18,[3,0]]]]],[[250,9,250,10,[0]],[251,13,253,65,[1,"|>",0,[251,13,251,32,[0,[[251,13,251,27,[2,[],"subexpressions"]],[251,28,251,32,[2,[],"expr"]]]]],[253,20,253,65,[0,[[253,20,253,30,[2,["List"],"foldl"]],[253,31,253,63,[7,[253,32,253,62,[18,[[[253,33,253,34,[11,"e"]]],[253,38,253,62,[0,[[253,38,253,41,[12,"+"]],[253,42,253,62,[7,[253,43,253,61,[0,[[253,43,253,54,[2,[],"countUsesIn"]],[253,55,253,56,[2,[],"e"]],[253,57,253,61,[2,[],"name"]]]]]]]]]]]]]]],[253,64,253,65,[3,0]]]]]]]]]]]]]]]]],[256,1,271,19,[0,[[1,[256,1,263,3,"{-| Use the first order, or use the second order if the first is `EQ`. This is\nlazy in the second comparison and written for use in pipeline-style code, e.g.\nin implementing a stable sort below:\n\n    (\\() -> compare index1 index2)\n        |> fallbackCompareFor (compare element1 element2)\n\n-}"]],[1,[264,1,264,53,[[264,1,264,19,"fallbackCompareFor"],[264,22,264,53,[6,[264,22,264,27,[1,[264,22,264,27,[[],"Order"]],[]]],[264,31,264,53,[6,[264,31,264,44,[6,[264,32,264,34,[2]],[264,38,264,43,[1,[264,38,264,43,[[],"Order"]],[]]]]],[264,48,264,53,[1,[264,48,264,53,[[],"Order"]],[]]]]]]]]]],[265,1,271,19,[[265,1,265,19,"fallbackCompareFor"],[[265,20,265,24,[11,"comp"]],[265,25,265,33,[11,"fallback"]]],[266,5,271,19,[17,[[266,10,266,14,[2,[],"comp"]],[[[267,9,267,11,[12,[[],"EQ"],[]]],[268,13,268,24,[0,[[268,13,268,21,[2,[],"fallback"]],[268,22,268,24,[10]]]]]],[[270,9,270,15,[11,"ltOrGt"]],[271,13,271,19,[2,[],"ltOrGt"]]]]]]]]]]]],[274,1,284,28,[0,[[1,[274,1,276,3,"{-| Use the first order, or use the second order if the first is `Just EQ`. This\nis lazy in the second comparison and written for use in pipeline-style code.\n-}"]],[1,[277,1,277,85,[[277,1,277,33,"fallbackCompareWithUnsortableFor"],[277,36,277,85,[6,[277,36,277,47,[1,[277,36,277,41,[[],"Maybe"]],[[277,42,277,47,[1,[277,42,277,47,[[],"Order"]],[]]]]]],[277,51,277,85,[6,[277,51,277,70,[6,[277,52,277,54,[2]],[277,58,277,69,[1,[277,58,277,63,[[],"Maybe"]],[[277,64,277,69,[1,[277,64,277,69,[[],"Order"]],[]]]]]]]],[277,74,277,85,[1,[277,74,277,79,[[],"Maybe"]],[[277,80,277,85,[1,[277,80,277,85,[[],"Order"]],[]]]]]]]]]]]]],[278,1,284,28,[[278,1,278,33,"fallbackCompareWithUnsortableFor"],[[278,34,278,38,[11,"comp"]],[278,39,278,47,[11,"fallback"]]],[279,5,284,28,[17,[[279,10,279,14,[2,[],"comp"]],[[[280,9,280,16,[12,[[],"Just"],[[280,14,280,16,[12,[[],"EQ"],[]]]]]],[281,13,281,24,[0,[[281,13,281,21,[2,[],"fallback"]],[281,22,281,24,[10]]]]]],[[283,9,283,24,[11,"ltOrGtOrNothing"]],[284,13,284,28,[2,[],"ltOrGtOrNothing"]]]]]]]]]]]],[287,1,298,77,[0,[[1,[287,1,288,3,"{-| Find all (local) names used in an expression.\n-}"]],[1,[289,1,289,47,[[289,1,289,15,"findAllNamesIn"],[289,18,289,47,[6,[289,18,289,33,[1,[289,18,289,22,[[],"Node"]],[[289,23,289,33,[1,[289,23,289,33,[[],"Expression"]],[]]]]]],[289,37,289,47,[1,[289,37,289,40,[[],"Set"]],[[289,41,289,47,[1,[289,41,289,47,[[],"String"]],[]]]]]]]]]]],[290,1,298,77,[[290,1,290,15,"findAllNamesIn"],[[290,16,290,20,[11,"expr"]]],[291,5,298,77,[17,[[291,10,291,25,[0,[[291,10,291,20,[2,["Node"],"value"]],[291,21,291,25,[2,[],"expr"]]]]],[[[293,9,293,29,[12,[[],"FunctionOrValue"],[[293,25,293,27,[10,[]]],[293,28,293,29,[11,"n"]]]]],[294,13,294,28,[0,[[294,13,294,26,[2,["Set"],"singleton"]],[294,27,294,28,[2,[],"n"]]]]]],[[296,9,296,10,[0]],[297,13,298,77,[1,"|>",0,[297,13,297,32,[0,[[297,13,297,27,[2,[],"subexpressions"]],[297,28,297,32,[2,[],"expr"]]]]],[298,20,298,77,[0,[[298,20,298,30,[2,["List"],"foldl"]],[298,31,298,67,[7,[298,32,298,66,[18,[[[298,33,298,34,[11,"e"]]],[298,38,298,66,[0,[[298,38,298,47,[2,["Set"],"union"]],[298,48,298,66,[7,[298,49,298,65,[0,[[298,49,298,63,[2,[],"findAllNamesIn"]],[298,64,298,65,[2,[],"e"]]]]]]]]]]]]]]],[298,68,298,77,[2,["Set"],"empty"]]]]]]]]]]]]]]]]],[301,1,315,11,[0,[[1,[301,1,302,3,"{-| Find all dependencies of a declaration.\n-}"]],[1,[303,1,303,191,[[303,1,303,17,"findDependencies"],[303,20,303,191,[6,[303,20,303,94,[3,[[303,22,303,25,[1,[303,22,303,25,[[],"Int"]],[]]],[303,27,303,92,[5,[303,29,303,30,"a"],[303,32,303,91,[[303,33,303,65,[[303,33,303,52,"dependentOnBindings"],[303,55,303,65,[1,[303,55,303,58,[[],"Set"]],[[303,59,303,65,[1,[303,59,303,65,[[],"String"]],[]]]]]]]],[303,67,303,91,[[303,67,303,77,"namesBound"],[303,80,303,90,[1,[303,80,303,83,[[],"Set"]],[[303,84,303,90,[1,[303,84,303,90,[[],"String"]],[]]]]]]]]]]]]]]],[303,98,303,191,[6,[303,98,303,168,[1,[303,98,303,102,[[],"List"]],[[303,103,303,168,[5,[303,105,303,106,"a"],[303,108,303,167,[[303,109,303,141,[[303,109,303,128,"dependentOnBindings"],[303,131,303,141,[1,[303,131,303,134,[[],"Set"]],[[303,135,303,141,[1,[303,135,303,141,[[],"String"]],[]]]]]]]],[303,143,303,167,[[303,143,303,153,"namesBound"],[303,156,303,166,[1,[303,156,303,159,[[],"Set"]],[[303,160,303,166,[1,[303,160,303,166,[[],"String"]],[]]]]]]]]]]]]]]],[303,172,303,191,[3,[[303,174,303,184,[1,[303,174,303,177,[[],"Set"]],[[303,178,303,184,[1,[303,178,303,184,[[],"String"]],[]]]]]],[303,186,303,189,[1,[303,186,303,189,[[],"Int"]],[]]]]]]]]]]]]],[304,1,315,11,[[304,1,304,17,"findDependencies"],[[304,18,304,29,[7,[[304,20,304,24,[11,"decI"]],[304,26,304,27,[11,"d"]]]]],[304,30,304,32,[11,"ds"]]],[305,5,315,11,[0,[[305,5,305,23,[2,["ListX"],"indexedFoldl"]],[306,9,313,10,[7,[306,10,312,67,[18,[[[306,11,306,12,[11,"i"]],[306,13,306,48,[8,[[306,15,306,34,"dependentOnBindings"],[306,36,306,46,"namesBound"]]]],[306,49,306,83,[14,[306,50,306,82,[13,[306,50,306,75,[7,[[306,52,306,59,[11,"glueAcc"]],[306,61,306,73,[11,"numberUsedIn"]]]]],[306,79,306,82,"acc"]]]]]],[308,13,312,67,[11,[308,16,308,92,[1,"||",1,[308,16,308,25,[1,"==",2,[308,16,308,17,[2,[],"i"]],[308,21,308,25,[2,[],"decI"]]]],[308,29,308,92,[7,[308,30,308,91,[1,"<|",1,[308,30,308,41,[2,["Set"],"isEmpty"]],[308,45,308,91,[0,[[308,45,308,58,[2,["Set"],"intersect"]],[308,59,308,71,[19,[308,59,308,60,[2,[],"d"]],[308,61,308,71,"namesBound"]]],[308,72,308,91,[2,[],"dependentOnBindings"]]]]]]]]]]],[309,17,309,20,[2,[],"acc"]],[312,17,312,67,[6,[[312,19,312,47,[0,[[312,19,312,28,[2,["Set"],"union"]],[312,29,312,36,[2,[],"glueAcc"]],[312,37,312,47,[2,[],"namesBound"]]]]],[312,49,312,65,[1,"+",0,[312,49,312,61,[2,[],"numberUsedIn"]],[312,64,312,65,[3,1]]]]]]]]]]]]]],[314,9,314,25,[6,[[314,11,314,20,[2,["Set"],"empty"]],[314,22,314,23,[3,0]]]]],[315,9,315,11,[2,[],"ds"]]]]]]]]]],[318,1,328,19,[0,[[1,[318,1,320,3,"{-| Work around `elm-syntax` sometimes including a period in record access\nfunctions.\n-}"]],[1,[321,1,321,34,[[321,1,321,15,"makeAccessFunc"],[321,18,321,34,[6,[321,18,321,24,[1,[321,18,321,24,[[],"String"]],[]]],[321,28,321,34,[1,[321,28,321,34,[[],"String"]],[]]]]]]]],[322,1,328,19,[[322,1,322,15,"makeAccessFunc"],[[322,16,322,26,[11,"accessFunc"]]],[323,5,328,19,[11,[323,8,323,40,[0,[[323,8,323,25,[2,["String"],"startsWith"]],[323,26,323,29,[5,"."]],[323,30,323,40,[2,[],"accessFunc"]]]]],[325,9,325,37,[0,[[325,9,325,24,[2,["String"],"dropLeft"]],[325,25,325,26,[3,1]],[325,27,325,37,[2,[],"accessFunc"]]]]],[328,9,328,19,[2,[],"accessFunc"]]]]]]]]],[331,1,340,16,[0,[[1,[331,1,333,3,"{-| Keep a value only if it passes a predicate. Like `Maybe.Extra.filter`, but\ndoes not take a `Maybe` as input.\n-}"]],[1,[334,1,334,39,[[334,1,334,9,"validate"],[334,12,334,39,[6,[334,12,334,23,[6,[334,13,334,14,[0,"a"]],[334,18,334,22,[1,[334,18,334,22,[[],"Bool"]],[]]]]],[334,27,334,39,[6,[334,27,334,28,[0,"a"]],[334,32,334,39,[1,[334,32,334,37,[[],"Maybe"]],[[334,38,334,39,[0,"a"]]]]]]]]]]]],[335,1,340,16,[[335,1,335,9,"validate"],[[335,10,335,14,[11,"pred"]],[335,15,335,16,[11,"x"]]],[336,5,340,16,[11,[336,8,336,14,[0,[[336,8,336,12,[2,[],"pred"]],[336,13,336,14,[2,[],"x"]]]]],[337,9,337,15,[0,[[337,9,337,13,[2,[],"Just"]],[337,14,337,15,[2,[],"x"]]]]],[340,9,340,16,[2,[],"Nothing"]]]]]]]]],[343,1,358,17,[0,[[1,[343,1,344,3,"{-| Given a list of ordering functions for breaking ties, order to things.\n-}"]],[1,[345,1,345,63,[[345,1,345,19,"compareByOrderings"],[345,22,345,63,[6,[345,22,345,44,[1,[345,22,345,26,[[],"List"]],[[345,27,345,44,[6,[345,28,345,29,[0,"a"]],[345,33,345,43,[6,[345,33,345,34,[0,"a"]],[345,38,345,43,[1,[345,38,345,43,[[],"Order"]],[]]]]]]]]]],[345,48,345,63,[6,[345,48,345,49,[0,"a"]],[345,53,345,63,[6,[345,53,345,54,[0,"a"]],[345,58,345,63,[1,[345,58,345,63,[[],"Order"]],[]]]]]]]]]]]],[346,1,358,17,[[346,1,346,19,"compareByOrderings"],[[346,20,346,29,[11,"orderings"]],[346,30,346,32,[11,"d1"]],[346,33,346,35,[11,"d2"]]],[347,5,358,17,[16,[[[348,9,356,56,[0,[[0],[1,[348,9,348,45,[[348,9,348,11,"go"],[348,14,348,45,[6,[348,14,348,36,[1,[348,14,348,18,[[],"List"]],[[348,19,348,36,[6,[348,20,348,21,[0,"a"]],[348,25,348,35,[6,[348,25,348,26,[0,"a"]],[348,30,348,35,[1,[348,30,348,35,[[],"Order"]],[]]]]]]]]]],[348,40,348,45,[1,[348,40,348,45,[[],"Order"]],[]]]]]]]],[349,9,356,56,[[349,9,349,11,"go"],[[349,12,349,14,[11,"os"]]],[350,13,356,56,[17,[[350,18,350,20,[2,[],"os"]],[[[351,17,351,19,[10,[]]],[352,21,352,23,[2,[],"EQ"]]],[[354,17,354,25,[9,[354,17,354,18,[11,"o"]],[354,22,354,25,[11,"os_"]]]],[355,21,356,56,[1,"|>",0,[355,21,355,36,[7,[355,22,355,35,[18,[[[355,23,355,25,[1]]],[355,29,355,35,[0,[[355,29,355,31,[2,[],"go"]],[355,32,355,35,[2,[],"os_"]]]]]]]]]],[356,28,356,56,[0,[[356,28,356,46,[2,[],"fallbackCompareFor"]],[356,47,356,56,[7,[356,48,356,55,[0,[[356,48,356,49,[2,[],"o"]],[356,50,356,52,[2,[],"d1"]],[356,53,356,55,[2,[],"d2"]]]]]]]]]]]]]]]]]]]]]]],[358,5,358,17,[0,[[358,5,358,7,[2,[],"go"]],[358,8,358,17,[2,[],"orderings"]]]]]]]]]]]]],[361,1,384,23,[0,[[1,[361,1,363,3,"{-| Given a source code extractor and a sorted list of ranges (with original\nindices), create fixes to resort the source code to the list.\n-}"]],[1,[364,1,364,65,[[364,1,364,10,"createFix"],[364,13,364,65,[6,[364,13,364,30,[6,[364,14,364,19,[1,[364,14,364,19,[[],"Range"]],[]]],[364,23,364,29,[1,[364,23,364,29,[[],"String"]],[]]]]],[364,34,364,65,[6,[364,34,364,53,[1,[364,34,364,38,[[],"List"]],[[364,39,364,53,[3,[[364,41,364,44,[1,[364,41,364,44,[[],"Int"]],[]]],[364,46,364,51,[1,[364,46,364,51,[[],"Range"]],[]]]]]]]]],[364,57,364,65,[1,[364,57,364,61,[[],"List"]],[[364,62,364,65,[1,[364,62,364,65,[[],"Fix"]],[]]]]]]]]]]]]],[365,1,384,23,[[365,1,365,10,"createFix"],[[365,11,365,24,[11,"extractSource"]],[365,25,365,31,[11,"sorted"]]],[366,5,384,23,[16,[[[367,9,381,44,[0,[[0],[1,[367,9,367,53,[[367,9,367,17,"applyFix"],[367,20,367,53,[6,[367,20,367,23,[1,[367,20,367,23,[[],"Int"]],[]]],[367,27,367,53,[6,[367,27,367,41,[3,[[367,29,367,32,[1,[367,29,367,32,[[],"Int"]],[]]],[367,34,367,39,[1,[367,34,367,39,[[],"Range"]],[]]]]]],[367,45,367,53,[1,[367,45,367,49,[[],"List"]],[[367,50,367,53,[1,[367,50,367,53,[[],"Fix"]],[]]]]]]]]]]]]],[368,9,381,44,[[368,9,368,17,"applyFix"],[[368,18,368,26,[11,"newIndex"]],[368,27,368,46,[7,[[368,29,368,37,[11,"oldIndex"]],[368,39,368,44,[11,"range"]]]]]],[369,13,381,44,[11,[369,16,369,36,[1,"==",2,[369,16,369,24,[2,[],"newIndex"]],[369,28,369,36,[2,[],"oldIndex"]]]],[370,17,370,19,[9,[]]],[373,17,381,44,[1,"|>",0,[373,17,380,26,[1,"|>",0,[373,17,374,46,[1,"|>",0,[373,17,373,65,[0,[[373,17,373,27,[2,["ListX"],"find"]],[373,28,373,58,[7,[373,29,373,57,[1,"<<",0,[373,29,373,42,[0,[[373,29,373,33,[12,"=="]],[373,34,373,42,[2,[],"newIndex"]]]]],[373,46,373,57,[2,["Tuple"],"first"]]]]]],[373,59,373,65,[2,[],"sorted"]]]]],[374,24,374,46,[0,[[374,24,374,33,[2,["Maybe"],"map"]],[374,34,374,46,[2,["Tuple"],"second"]]]]]]],[375,24,380,26,[0,[[375,24,375,33,[2,["Maybe"],"map"]],[376,25,380,26,[7,[376,26,379,50,[18,[[[376,27,376,35,[11,"oldRange"]]],[377,29,379,50,[1,"|>",0,[377,29,378,63,[1,"|>",0,[377,29,377,48,[0,[[377,29,377,42,[2,[],"extractSource"]],[377,43,377,48,[2,[],"range"]]]]],[378,36,378,63,[0,[[378,36,378,54,[2,["Fix"],"replaceRangeBy"]],[378,55,378,63,[2,[],"oldRange"]]]]]]],[379,36,379,50,[2,["List"],"singleton"]]]]]]]]]]]]]],[381,24,381,44,[0,[[381,24,381,41,[2,["Maybe"],"withDefault"]],[381,42,381,44,[9,[]]]]]]]]]]]]]]]],[383,5,384,23,[1,"|>",0,[383,5,383,36,[0,[[383,5,383,20,[2,["List"],"indexedMap"]],[383,21,383,29,[2,[],"applyFix"]],[383,30,383,36,[2,[],"sorted"]]]]],[384,12,384,23,[2,["List"],"concat"]]]]]]]]]]]],[387,1,446,14,[0,[[1,[387,1,391,3,"{-| Given a graph with edges labeled by priority (larger number is lower\npriority, convert it to an acyclic graph by removing edges, with the guarantee\nthat all lower-priority edges will be removed before any of higher priority\nare.\n-}"]],[1,[392,1,392,75,[[392,1,392,16,"eliminateCycles"],[392,19,392,75,[6,[392,19,392,38,[1,[392,19,392,23,[[],"List"]],[[392,24,392,38,[1,[392,25,392,35,[["Graph"],"Node"]],[[392,36,392,37,[0,"a"]]]]]]]],[392,42,392,75,[6,[392,42,392,53,[1,[392,42,392,47,[[],"Graph"]],[[392,48,392,49,[0,"a"]],[392,50,392,53,[1,[392,50,392,53,[[],"Int"]],[]]]]]],[392,57,392,75,[1,[392,57,392,69,[[],"AcyclicGraph"]],[[392,70,392,71,[0,"a"]],[392,72,392,75,[1,[392,72,392,75,[[],"Int"]],[]]]]]]]]]]]]],[393,1,446,14,[[393,1,393,16,"eliminateCycles"],[[393,17,393,22,[11,"nodes"]],[393,23,393,24,[11,"g"]]],[395,5,446,14,[1,"|>",0,[395,5,395,40,[0,[[395,5,395,38,[2,["Graph"],"stronglyConnectedComponents"]],[395,39,395,40,[2,[],"g"]]]]],[396,12,446,14,[0,[[396,12,396,27,[2,["ResultX"],"extract"]],[397,13,446,14,[7,[397,14,445,21,[1,">>",1,[397,14,436,18,[0,[[397,14,397,22,[2,["List"],"map"]],[399,17,436,18,[7,[399,18,435,29,[18,[[[399,19,399,24,[11,"graph"]]],[400,21,435,29,[16,[[[401,25,414,48,[1,[401,25,401,69,[7,[[401,27,401,46,[11,"lowestPriorityEdges"]],[401,48,401,67,[11,"higherPriorityEdges"]]]]],[403,29,414,48,[1,"|>",0,[403,29,409,64,[1,"|>",0,[403,29,408,52,[1,"|>",0,[403,29,406,47,[1,"|>",0,[403,29,405,56,[1,"|>",0,[403,29,403,46,[0,[[403,29,403,40,[2,["Graph"],"edges"]],[403,41,403,46,[2,[],"graph"]]]]],[405,36,405,56,[0,[[405,36,405,49,[2,["DictX"],"groupBy"]],[405,50,405,56,[20,".label"]]]]]]],[406,36,406,47,[2,["Dict"],"values"]]]],[408,36,408,52,[2,["ListX"],"unconsLast"]]]],[409,36,409,64,[0,[[409,36,409,53,[2,["Maybe"],"withDefault"]],[409,54,409,64,[6,[[409,56,409,58,[9,[]]],[409,60,409,62,[9,[]]]]]]]]]]],[410,36,414,48,[0,[[410,36,410,49,[2,["Tuple"],"mapBoth"]],[411,37,413,38,[7,[411,38,412,56,[1,">>",1,[411,38,411,78,[0,[[411,38,411,46,[2,["List"],"map"]],[411,47,411,78,[7,[411,48,411,77,[18,[[[411,49,411,61,[8,[[411,51,411,55,"from"],[411,57,411,59,"to"]]]]],[411,65,411,77,[6,[[411,67,411,71,[2,[],"from"]],[411,73,411,75,[2,[],"to"]]]]]]]]]]]]],[412,44,412,56,[2,["Set"],"fromList"]]]]]],[414,37,414,48,[2,["List"],"concat"]]]]]]]]],[416,25,418,46,[0,[[0],[1,[416,25,416,49,[[416,25,416,27,"ns"],[416,30,416,49,[1,[416,30,416,34,[[],"List"]],[[416,35,416,49,[1,[416,36,416,46,[["Graph"],"Node"]],[[416,47,416,48,[0,"a"]]]]]]]]]]],[417,25,418,46,[[417,25,417,27,"ns"],[],[418,29,418,46,[0,[[418,29,418,40,[2,["Graph"],"nodes"]],[418,41,418,46,[2,[],"graph"]]]]]]]]]]],[420,21,435,29,[1,"|>",0,[420,21,427,44,[0,[[420,21,420,31,[2,["Set"],"filter"]],[422,25,426,26,[7,[422,26,425,49,[18,[[[422,27,422,39,[7,[[422,29,422,33,[11,"from"]],[422,35,422,37,[11,"to"]]]]]],[423,29,425,49,[1,"|>",0,[423,29,424,54,[1,"|>",0,[423,29,423,117,[0,[[423,29,423,52,[2,["Graph"],"fromNodesAndEdges"]],[423,53,423,55,[2,[],"ns"]],[423,56,423,117,[7,[423,57,423,116,[1,"::",1,[423,57,423,93,[8,[[423,59,423,70,[[423,59,423,63,"from"],[423,66,423,70,[2,[],"from"]]]],[423,72,423,79,[[423,72,423,74,"to"],[423,77,423,79,[2,[],"to"]]]],[423,81,423,92,[[423,81,423,86,"label"],[423,89,423,91,[14,[423,90,423,91,[3,1]]]]]]]]],[423,97,423,116,[2,[],"higherPriorityEdges"]]]]]]]]],[424,36,424,54,[2,["Graph"],"checkAcyclic"]]]],[425,36,425,49,[2,["ResultX"],"isErr"]]]]]]]]],[427,25,427,44,[2,[],"lowestPriorityEdges"]]]]],[428,28,435,29,[7,[428,29,434,38,[18,[[[428,30,428,31,[11,"s"]]],[429,33,434,38,[11,[429,36,429,49,[0,[[429,36,429,47,[2,["Set"],"isEmpty"]],[429,48,429,49,[2,[],"s"]]]]],[431,37,431,56,[2,[],"lowestPriorityEdges"]],[434,37,434,38,[2,[],"s"]]]]]]]]]]]]]]]]]]]]]],[437,20,445,21,[1,">>",1,[437,20,437,50,[0,[[437,20,437,30,[2,["List"],"foldl"]],[437,31,437,40,[2,["Set"],"union"]],[437,41,437,50,[2,["Set"],"empty"]]]]],[439,20,445,21,[7,[439,21,444,53,[18,[[[439,22,439,30,[11,"toRemove"]]],[440,25,444,53,[1,"|>",0,[440,25,442,61,[1,"|>",0,[440,25,441,102,[1,"|>",0,[440,25,440,38,[0,[[440,25,440,36,[2,["Graph"],"edges"]],[440,37,440,38,[2,[],"g"]]]]],[441,32,441,102,[0,[[441,32,441,43,[2,["List"],"filter"]],[441,44,441,102,[7,[441,45,441,101,[18,[[[441,46,441,58,[8,[[441,48,441,52,"from"],[441,54,441,56,"to"]]]]],[441,62,441,101,[1,"<|",1,[441,62,441,65,[2,[],"not"]],[441,69,441,101,[0,[[441,69,441,79,[2,["Set"],"member"]],[441,80,441,92,[6,[[441,82,441,86,[2,[],"from"]],[441,88,441,90,[2,[],"to"]]]]],[441,93,441,101,[2,[],"toRemove"]]]]]]]]]]]]]]]]],[442,32,442,61,[0,[[442,32,442,55,[2,["Graph"],"fromNodesAndEdges"]],[442,56,442,61,[2,[],"nodes"]]]]]]],[444,32,444,53,[0,[[444,32,444,47,[2,[],"eliminateCycles"]],[444,48,444,53,[2,[],"nodes"]]]]]]]]]]]]]]]]]]]]]]]]]]]],[449,1,483,76,[0,[[1,[449,1,451,3,"{-| Generate edges for every pairwise combination of nodes, along with their\npriority (lower number is higher priority).\n-}"]],[1,[452,1,452,136,[[452,1,452,9,"genEdges"],[452,12,452,136,[6,[452,12,452,74,[1,[452,12,452,16,[[],"List"]],[[452,17,452,74,[6,[452,18,452,39,[5,[452,20,452,21,"a"],[452,23,452,38,[[452,24,452,38,[[452,24,452,29,"range"],[452,32,452,37,[1,[452,32,452,37,[[],"Range"]],[]]]]]]]]],[452,43,452,73,[6,[452,43,452,64,[5,[452,45,452,46,"a"],[452,48,452,63,[[452,49,452,63,[[452,49,452,54,"range"],[452,57,452,62,[1,[452,57,452,62,[[],"Range"]],[]]]]]]]]],[452,68,452,73,[1,[452,68,452,73,[[],"Order"]],[]]]]]]]]]],[452,78,452,136,[6,[452,78,452,117,[1,[452,78,452,82,[[],"List"]],[[452,83,452,117,[1,[452,84,452,94,[["Graph"],"Node"]],[[452,95,452,116,[5,[452,97,452,98,"a"],[452,100,452,115,[[452,101,452,115,[[452,101,452,106,"range"],[452,109,452,114,[1,[452,109,452,114,[[],"Range"]],[]]]]]]]]]]]]]]],[452,121,452,136,[1,[452,121,452,125,[[],"List"]],[[452,126,452,136,[1,[452,127,452,131,[[],"Edge"]],[[452,132,452,135,[1,[452,132,452,135,[[],"Int"]],[]]]]]]]]]]]]]]]],[453,1,483,76,[[453,1,453,9,"genEdges"],[[453,10,453,19,[11,"orderings"]],[453,20,453,27,[11,"indexed"]]],[454,5,483,76,[16,[[[455,9,480,80,[0,[[0],[1,[455,9,455,182,[[455,9,455,16,"genEdge"],[455,19,455,182,[6,[455,19,455,88,[1,[455,19,455,23,[[],"List"]],[[455,24,455,88,[3,[[455,26,455,29,[1,[455,26,455,29,[[],"Int"]],[]]],[455,31,455,86,[6,[455,31,455,52,[5,[455,33,455,34,"a"],[455,36,455,51,[[455,37,455,51,[[455,37,455,42,"range"],[455,45,455,50,[1,[455,45,455,50,[[],"Range"]],[]]]]]]]]],[455,56,455,86,[6,[455,56,455,77,[5,[455,58,455,59,"a"],[455,61,455,76,[[455,62,455,76,[[455,62,455,67,"range"],[455,70,455,75,[1,[455,70,455,75,[[],"Range"]],[]]]]]]]]],[455,81,455,86,[1,[455,81,455,86,[[],"Order"]],[]]]]]]]]]]]]],[455,92,455,182,[6,[455,92,455,162,[3,[[455,94,455,126,[1,[455,94,455,104,[["Graph"],"Node"]],[[455,105,455,126,[5,[455,107,455,108,"a"],[455,110,455,125,[[455,111,455,125,[[455,111,455,116,"range"],[455,119,455,124,[1,[455,119,455,124,[[],"Range"]],[]]]]]]]]]]]],[455,128,455,160,[1,[455,128,455,138,[["Graph"],"Node"]],[[455,139,455,160,[5,[455,141,455,142,"a"],[455,144,455,159,[[455,145,455,159,[[455,145,455,150,"range"],[455,153,455,158,[1,[455,153,455,158,[[],"Range"]],[]]]]]]]]]]]]]]],[455,166,455,182,[1,[455,166,455,171,[[],"Maybe"]],[[455,172,455,182,[1,[455,173,455,177,[[],"Edge"]],[[455,178,455,181,[1,[455,178,455,181,[[],"Int"]],[]]]]]]]]]]]]]]]],[456,9,480,80,[[456,9,456,16,"genEdge"],[[456,17,456,19,[11,"os"]],[456,20,456,30,[7,[[456,22,456,24,[11,"d1"]],[456,26,456,28,[11,"d2"]]]]]],[457,13,480,80,[17,[[457,18,457,20,[2,[],"os"]],[[[458,17,458,19,[10,[]]],[460,21,469,73,[17,[[460,26,460,45,[0,[[460,26,460,33,[2,[],"compare"]],[460,34,460,39,[19,[460,34,460,36,[2,[],"d1"]],[460,37,460,39,"id"]]],[460,40,460,45,[19,[460,40,460,42,[2,[],"d2"]],[460,43,460,45,"id"]]]]]],[[[461,25,461,27,[12,[[],"LT"],[]]],[462,29,462,73,[0,[[462,29,462,33,[2,[],"Just"]],[462,34,462,73,[8,[[462,36,462,48,[[462,36,462,40,"from"],[462,43,462,48,[19,[462,43,462,45,[2,[],"d1"]],[462,46,462,48,"id"]]]]],[462,50,462,60,[[462,50,462,52,"to"],[462,55,462,60,[19,[462,55,462,57,[2,[],"d2"]],[462,58,462,60,"id"]]]]],[462,62,462,72,[[462,62,462,67,"label"],[462,70,462,71,[3,0]]]]]]]]]]],[[464,25,464,27,[12,[[],"EQ"],[]]],[466,29,466,36,[2,[],"Nothing"]]],[[468,25,468,27,[12,[[],"GT"],[]]],[469,29,469,73,[0,[[469,29,469,33,[2,[],"Just"]],[469,34,469,73,[8,[[469,36,469,48,[[469,36,469,40,"from"],[469,43,469,48,[19,[469,43,469,45,[2,[],"d2"]],[469,46,469,48,"id"]]]]],[469,50,469,60,[[469,50,469,52,"to"],[469,55,469,60,[19,[469,55,469,57,[2,[],"d1"]],[469,58,469,60,"id"]]]]],[469,62,469,72,[[469,62,469,67,"label"],[469,70,469,71,[3,0]]]]]]]]]]]]]]]],[[471,17,471,39,[9,[471,17,471,32,[7,[[471,19,471,27,[11,"priority"]],[471,29,471,30,[11,"o"]]]]],[471,36,471,39,[11,"os_"]]]],[472,21,480,80,[17,[[472,26,472,45,[0,[[472,26,472,27,[2,[],"o"]],[472,28,472,36,[19,[472,28,472,30,[2,[],"d1"]],[472,31,472,36,"label"]]],[472,37,472,45,[19,[472,37,472,39,[2,[],"d2"]],[472,40,472,45,"label"]]]]]],[[[473,25,473,27,[12,[[],"LT"],[]]],[474,29,474,80,[0,[[474,29,474,33,[2,[],"Just"]],[474,34,474,80,[8,[[474,36,474,48,[[474,36,474,40,"from"],[474,43,474,48,[19,[474,43,474,45,[2,[],"d1"]],[474,46,474,48,"id"]]]]],[474,50,474,60,[[474,50,474,52,"to"],[474,55,474,60,[19,[474,55,474,57,[2,[],"d2"]],[474,58,474,60,"id"]]]]],[474,62,474,79,[[474,62,474,67,"label"],[474,70,474,78,[2,[],"priority"]]]]]]]]]]],[[476,25,476,27,[12,[[],"EQ"],[]]],[477,29,477,51,[0,[[477,29,477,36,[2,[],"genEdge"]],[477,37,477,40,[2,[],"os_"]],[477,41,477,51,[6,[[477,43,477,45,[2,[],"d1"]],[477,47,477,49,[2,[],"d2"]]]]]]]]],[[479,25,479,27,[12,[[],"GT"],[]]],[480,29,480,80,[0,[[480,29,480,33,[2,[],"Just"]],[480,34,480,80,[8,[[480,36,480,48,[[480,36,480,40,"from"],[480,43,480,48,[19,[480,43,480,45,[2,[],"d2"]],[480,46,480,48,"id"]]]]],[480,50,480,60,[[480,50,480,52,"to"],[480,55,480,60,[19,[480,55,480,57,[2,[],"d1"]],[480,58,480,60,"id"]]]]],[480,62,480,79,[[480,62,480,67,"label"],[480,70,480,78,[2,[],"priority"]]]]]]]]]]]]]]]]]]]]]]]]]],[482,5,483,76,[1,"|>",0,[482,5,482,30,[0,[[482,5,482,22,[2,["ListX"],"uniquePairs"]],[482,23,482,30,[2,[],"indexed"]]]]],[483,12,483,76,[0,[[483,12,483,26,[2,["List"],"filterMap"]],[483,27,483,76,[7,[483,28,483,75,[1,"<|",1,[483,28,483,35,[2,[],"genEdge"]],[483,39,483,75,[0,[[483,39,483,54,[2,["List"],"indexedMap"]],[483,55,483,65,[2,["Tuple"],"pair"]],[483,66,483,75,[2,[],"orderings"]]]]]]]]]]]]]]]]]]]]]],[486,1,513,30,[0,[[1,[486,1,489,3,"{-| Given a list of glued TLDs, remove any glues that are cyclic by converting\nit to a directed acyclic graph, where edges indicate gluing dependencies (i.e.\nA -> B means B is glued to A).\n-}"]],[1,[490,1,490,165,[[490,1,490,15,"gluedListToDAG"],[490,18,490,165,[6,[490,18,490,90,[1,[490,18,490,22,[[],"List"]],[[490,23,490,90,[1,[490,24,490,34,[["Graph"],"Node"]],[[490,35,490,89,[5,[490,37,490,38,"a"],[490,40,490,88,[[490,41,490,62,[[490,41,490,46,"glued"],[490,49,490,62,[1,[490,49,490,54,[[],"Maybe"]],[[490,55,490,62,[1,[490,55,490,62,[[],"GluedTo"]],[]]]]]]]],[490,64,490,88,[[490,64,490,74,"namesBound"],[490,77,490,87,[1,[490,77,490,80,[[],"Set"]],[[490,81,490,87,[1,[490,81,490,87,[[],"String"]],[]]]]]]]]]]]]]]]]]],[490,94,490,165,[1,[490,94,490,106,[[],"AcyclicGraph"]],[[490,107,490,161,[5,[490,109,490,110,"a"],[490,112,490,160,[[490,113,490,134,[[490,113,490,118,"glued"],[490,121,490,134,[1,[490,121,490,126,[[],"Maybe"]],[[490,127,490,134,[1,[490,127,490,134,[[],"GluedTo"]],[]]]]]]]],[490,136,490,160,[[490,136,490,146,"namesBound"],[490,149,490,159,[1,[490,149,490,152,[[],"Set"]],[[490,153,490,159,[1,[490,153,490,159,[[],"String"]],[]]]]]]]]]]]],[490,162,490,165,[1,[490,162,490,165,[[],"Int"]],[]]]]]]]]]]],[491,1,513,30,[[491,1,491,15,"gluedListToDAG"],[[491,16,491,18,[11,"ds"]]],[492,5,513,30,[16,[[[493,9,505,19,[0,[[0],[1,[493,9,493,32,[[493,9,493,14,"edges"],[493,17,493,32,[1,[493,17,493,21,[[],"List"]],[[493,22,493,32,[1,[493,23,493,27,[[],"Edge"]],[[493,28,493,31,[1,[493,28,493,31,[[],"Int"]],[]]]]]]]]]]]],[494,9,505,19,[[494,9,494,14,"edges"],[],[496,13,505,19,[0,[[496,13,496,27,[2,["List"],"concatMap"]],[497,17,504,18,[7,[497,18,503,30,[18,[[[497,19,497,32,[8,[[497,21,497,23,"id"],[497,25,497,30,"label"]]]]],[498,21,503,30,[1,"|>",0,[498,21,498,73,[0,[[498,21,498,34,[2,["MaybeX"],"unwrap"]],[498,35,498,37,[9,[]]],[498,38,498,61,[7,[498,39,498,60,[1,"<<",0,[498,39,498,49,[2,["Set"],"toList"]],[498,53,498,60,[2,[],"gluedTo"]]]]]],[498,62,498,73,[19,[498,62,498,67,[2,[],"label"]],[498,68,498,73,"glued"]]]]]],[499,28,503,30,[0,[[499,28,499,42,[2,["List"],"filterMap"]],[500,29,503,30,[7,[500,30,502,96,[18,[[[500,31,500,32,[11,"n"]]],[501,33,502,96,[1,"|>",0,[501,33,501,57,[0,[[501,33,501,41,[2,["Dict"],"get"]],[501,42,501,43,[2,[],"n"]],[501,44,501,57,[2,[],"namesToNodeId"]]]]],[502,40,502,96,[0,[[502,40,502,49,[2,["Maybe"],"map"]],[502,50,502,96,[7,[502,51,502,95,[18,[[[502,52,502,56,[11,"from"]]],[502,60,502,95,[8,[[502,62,502,73,[[502,62,502,66,"from"],[502,69,502,73,[2,[],"from"]]]],[502,75,502,82,[[502,75,502,77,"to"],[502,80,502,82,[2,[],"id"]]]],[502,84,502,94,[[502,84,502,89,"label"],[502,92,502,93,[3,0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[505,17,505,19,[2,[],"ds"]]]]]]]]]],[507,9,510,33,[0,[[0],[1,[507,9,507,40,[[507,9,507,22,"namesToNodeId"],[507,25,507,40,[1,[507,25,507,29,[[],"Dict"]],[[507,30,507,36,[1,[507,30,507,36,[[],"String"]],[]]],[507,37,507,40,[1,[507,37,507,40,[[],"Int"]],[]]]]]]]]],[508,9,510,33,[[508,9,508,22,"namesToNodeId"],[],[509,13,510,33,[1,"|>",0,[509,13,509,108,[0,[[509,13,509,27,[2,["List"],"concatMap"]],[509,28,509,105,[7,[509,29,509,104,[18,[[[509,30,509,43,[8,[[509,32,509,34,"id"],[509,36,509,41,"label"]]]]],[509,47,509,104,[1,"<|",1,[509,47,509,73,[0,[[509,47,509,55,[2,["List"],"map"]],[509,56,509,73,[7,[509,57,509,72,[18,[[[509,58,509,59,[11,"n"]]],[509,63,509,72,[6,[[509,65,509,66,[2,[],"n"]],[509,68,509,70,[2,[],"id"]]]]]]]]]]]]],[509,77,509,104,[0,[[509,77,509,87,[2,["Set"],"toList"]],[509,88,509,104,[19,[509,88,509,93,[2,[],"label"]],[509,94,509,104,"namesBound"]]]]]]]]]]]]],[509,106,509,108,[2,[],"ds"]]]]],[510,20,510,33,[2,["Dict"],"fromList"]]]]]]]]]],[512,5,513,30,[1,"|>",0,[512,5,512,37,[0,[[512,5,512,28,[2,["Graph"],"fromNodesAndEdges"]],[512,29,512,31,[2,[],"ds"]],[512,32,512,37,[2,[],"edges"]]]]],[513,12,513,30,[0,[[513,12,513,27,[2,[],"eliminateCycles"]],[513,28,513,30,[2,[],"ds"]]]]]]]]]]]]]]],[516,1,531,15,[0,[[1,[516,1,517,3,"{-| Extract what names something is glued to.\n-}"]],[1,[518,1,518,32,[[518,1,518,8,"gluedTo"],[518,11,518,32,[6,[518,11,518,18,[1,[518,11,518,18,[[],"GluedTo"]],[]]],[518,22,518,32,[1,[518,22,518,25,[[],"Set"]],[[518,26,518,32,[1,[518,26,518,32,[[],"String"]],[]]]]]]]]]]],[519,1,531,15,[[519,1,519,8,"gluedTo"],[[519,9,519,10,[11,"g"]]],[520,5,531,15,[17,[[520,10,520,11,[2,[],"g"]],[[[521,9,521,28,[12,[[],"GluedBeforeFirst"],[[521,26,521,28,[11,"ns"]]]]],[522,13,522,15,[2,[],"ns"]]],[[524,9,524,27,[12,[[],"GluedAfterFirst"],[[524,25,524,27,[11,"ns"]]]]],[525,13,525,15,[2,[],"ns"]]],[[527,9,527,27,[12,[[],"GluedBeforeLast"],[[527,25,527,27,[11,"ns"]]]]],[528,13,528,15,[2,[],"ns"]]],[[530,9,530,26,[12,[[],"GluedAfterLast"],[[530,24,530,26,[11,"ns"]]]]],[531,13,531,15,[2,[],"ns"]]]]]]]]]]]],[534,1,549,18,[0,[[1,[534,1,535,3,"{-| Check if something is glued before or after that to which it is glued.\n-}"]],[1,[536,1,536,32,[[536,1,536,14,"isGluedBefore"],[536,17,536,32,[6,[536,17,536,24,[1,[536,17,536,24,[[],"GluedTo"]],[]]],[536,28,536,32,[1,[536,28,536,32,[[],"Bool"]],[]]]]]]]],[537,1,549,18,[[537,1,537,14,"isGluedBefore"],[[537,15,537,16,[11,"g"]]],[538,5,549,18,[17,[[538,10,538,11,[2,[],"g"]],[[[539,9,539,27,[12,[[],"GluedBeforeFirst"],[[539,26,539,27,[0]]]]],[540,13,540,17,[2,[],"True"]]],[[542,9,542,26,[12,[[],"GluedAfterFirst"],[[542,25,542,26,[0]]]]],[543,13,543,18,[2,[],"False"]]],[[545,9,545,26,[12,[[],"GluedBeforeLast"],[[545,25,545,26,[0]]]]],[546,13,546,17,[2,[],"True"]]],[[548,9,548,25,[12,[[],"GluedAfterLast"],[[548,24,548,25,[0]]]]],[549,13,549,18,[2,[],"False"]]]]]]]]]]]],[552,1,567,18,[0,[[1,[552,1,553,3,"{-| Check if something is glued to the first or last of its glued list.\n-}"]],[1,[554,1,554,33,[[554,1,554,15,"isGluedToFirst"],[554,18,554,33,[6,[554,18,554,25,[1,[554,18,554,25,[[],"GluedTo"]],[]]],[554,29,554,33,[1,[554,29,554,33,[[],"Bool"]],[]]]]]]]],[555,1,567,18,[[555,1,555,15,"isGluedToFirst"],[[555,16,555,17,[11,"g"]]],[556,5,567,18,[17,[[556,10,556,11,[2,[],"g"]],[[[557,9,557,27,[12,[[],"GluedBeforeFirst"],[[557,26,557,27,[0]]]]],[558,13,558,17,[2,[],"True"]]],[[560,9,560,26,[12,[[],"GluedAfterFirst"],[[560,25,560,26,[0]]]]],[561,13,561,17,[2,[],"True"]]],[[563,9,563,26,[12,[[],"GluedBeforeLast"],[[563,25,563,26,[0]]]]],[564,13,564,18,[2,[],"False"]]],[[566,9,566,25,[12,[[],"GluedAfterLast"],[[566,24,566,25,[0]]]]],[567,13,567,18,[2,[],"False"]]]]]]]]]]]],[570,1,659,15,[0,[[1,[570,1,571,3,"{-| Get all immediate child expressions of an expression.\n-}"]],[1,[572,1,572,59,[[572,1,572,15,"subexpressions"],[572,18,572,59,[6,[572,18,572,33,[1,[572,18,572,22,[[],"Node"]],[[572,23,572,33,[1,[572,23,572,33,[[],"Expression"]],[]]]]]],[572,37,572,59,[1,[572,37,572,41,[[],"List"]],[[572,42,572,59,[1,[572,43,572,47,[[],"Node"]],[[572,48,572,58,[1,[572,48,572,58,[[],"Expression"]],[]]]]]]]]]]]]]],[573,1,659,15,[[573,1,573,15,"subexpressions"],[[573,16,573,20,[11,"expr"]]],[574,5,659,15,[17,[[574,10,574,25,[0,[[574,10,574,20,[2,["Node"],"value"]],[574,21,574,25,[2,[],"expr"]]]]],[[[575,9,575,17,[12,[[],"UnitExpr"],[]]],[576,13,576,15,[9,[]]]],[[578,9,578,23,[12,[[],"Application"],[[578,21,578,23,[11,"es"]]]]],[579,13,579,15,[2,[],"es"]]],[[581,9,581,38,[12,[[],"OperatorApplication"],[[581,29,581,30,[0]],[581,31,581,32,[0]],[581,33,581,35,[11,"e1"]],[581,36,581,38,[11,"e2"]]]]],[582,13,582,23,[9,[[582,15,582,17,[2,[],"e1"]],[582,19,582,21,[2,[],"e2"]]]]]],[[584,9,584,28,[12,[[],"FunctionOrValue"],[[584,25,584,26,[0]],[584,27,584,28,[0]]]]],[585,13,585,15,[9,[]]]],[[587,9,587,43,[12,[[],"IfBlock"],[[587,17,587,25,[11,"predExpr"]],[587,26,587,34,[11,"thenExpr"]],[587,35,587,43,[11,"elseExpr"]]]]],[588,13,588,45,[9,[[588,15,588,23,[2,[],"predExpr"]],[588,25,588,33,[2,[],"thenExpr"]],[588,35,588,43,[2,[],"elseExpr"]]]]]],[[590,9,590,25,[12,[[],"PrefixOperator"],[[590,24,590,25,[0]]]]],[591,13,591,15,[9,[]]]],[[593,9,593,19,[12,[[],"Operator"],[[593,18,593,19,[0]]]]],[594,13,594,15,[9,[]]]],[[596,9,596,18,[12,[[],"Integer"],[[596,17,596,18,[0]]]]],[597,13,597,15,[9,[]]]],[[599,9,599,14,[12,[[],"Hex"],[[599,13,599,14,[0]]]]],[600,13,600,15,[9,[]]]],[[602,9,602,20,[12,[[],"Floatable"],[[602,19,602,20,[0]]]]],[603,13,603,15,[9,[]]]],[[605,9,605,19,[12,[[],"Negation"],[[605,18,605,19,[11,"e"]]]]],[606,13,606,18,[9,[[606,15,606,16,[2,[],"e"]]]]]],[[608,9,608,18,[12,[[],"Literal"],[[608,17,608,18,[0]]]]],[609,13,609,15,[9,[]]]],[[611,9,611,22,[12,[[],"CharLiteral"],[[611,21,611,22,[0]]]]],[612,13,612,15,[9,[]]]],[[614,9,614,28,[12,[[],"TupledExpression"],[[614,26,614,28,[11,"es"]]]]],[615,13,615,15,[2,[],"es"]]],[[617,9,617,34,[12,[[],"ParenthesizedExpression"],[[617,33,617,34,[11,"e"]]]]],[618,13,618,18,[9,[[618,15,618,16,[2,[],"e"]]]]]],[[620,9,620,31,[12,[[],"LetExpression"],[[620,23,620,31,[11,"letBlock"]]]]],[621,13,633,59,[16,[[[622,17,630,30,[0,[[0],[1,[622,17,622,66,[[622,17,622,25,"subExprs"],[622,28,622,66,[6,[622,28,622,47,[1,[622,28,622,32,[[],"Node"]],[[622,33,622,47,[1,[622,33,622,47,[[],"LetDeclaration"]],[]]]]]],[622,51,622,66,[1,[622,51,622,55,[[],"Node"]],[[622,56,622,66,[1,[622,56,622,66,[[],"Expression"]],[]]]]]]]]]]],[623,17,630,30,[[623,17,623,25,"subExprs"],[[623,26,623,27,[11,"n"]]],[624,21,630,30,[17,[[624,26,624,38,[0,[[624,26,624,36,[2,["Node"],"value"]],[624,37,624,38,[2,[],"n"]]]]],[[[625,25,625,52,[12,[[],"LetFunction"],[[625,37,625,52,[8,[[625,39,625,50,"declaration"]]]]]]],[626,29,627,47,[1,"|>",0,[626,29,626,51,[0,[[626,29,626,39,[2,["Node"],"value"]],[626,40,626,51,[2,[],"declaration"]]]]],[627,36,627,47,[20,".expression"]]]]],[[629,25,629,45,[12,[[],"LetDestructuring"],[[629,42,629,43,[0]],[629,44,629,45,[11,"e"]]]]],[630,29,630,30,[2,[],"e"]]]]]]]]]]]]],[632,13,633,59,[1,"::",1,[632,13,632,32,[19,[632,13,632,21,[2,[],"letBlock"]],[632,22,632,32,"expression"]]],[633,20,633,59,[0,[[633,20,633,28,[2,["List"],"map"]],[633,29,633,37,[2,[],"subExprs"]],[633,38,633,59,[19,[633,38,633,46,[2,[],"letBlock"]],[633,47,633,59,"declarations"]]]]]]]]]]]],[[635,9,635,33,[12,[[],"CaseExpression"],[[635,24,635,33,[11,"caseBlock"]]]]],[636,13,637,57,[1,"::",1,[636,13,636,33,[19,[636,13,636,22,[2,[],"caseBlock"]],[636,23,636,33,"expression"]]],[637,20,637,57,[0,[[637,20,637,28,[2,["List"],"map"]],[637,29,637,41,[2,["Tuple"],"second"]],[637,42,637,57,[19,[637,42,637,51,[2,[],"caseBlock"]],[637,52,637,57,"cases"]]]]]]]]],[[639,9,639,40,[12,[[],"LambdaExpression"],[[639,26,639,40,[8,[[639,28,639,38,"expression"]]]]]]],[640,13,640,27,[9,[[640,15,640,25,[2,[],"expression"]]]]]],[[642,9,642,27,[12,[[],"RecordExpr"],[[642,20,642,27,[11,"setters"]]]]],[643,13,643,58,[0,[[643,13,643,21,[2,["List"],"map"]],[643,22,643,50,[7,[643,23,643,49,[1,"<<",0,[643,23,643,35,[2,["Tuple"],"second"]],[643,39,643,49,[2,["Node"],"value"]]]]]],[643,51,643,58,[2,[],"setters"]]]]]],[[645,9,645,20,[12,[[],"ListExpr"],[[645,18,645,20,[11,"es"]]]]],[646,13,646,15,[2,[],"es"]]],[[648,9,648,30,[12,[[],"RecordAccess"],[[648,22,648,28,[11,"record"]],[648,29,648,30,[0]]]]],[649,13,649,23,[9,[[649,15,649,21,[2,[],"record"]]]]]],[[651,9,651,31,[12,[[],"RecordAccessFunction"],[[651,30,651,31,[0]]]]],[652,13,652,15,[9,[]]]],[[654,9,654,47,[12,[[],"RecordUpdateExpression"],[[654,32,654,38,[11,"record"]],[654,39,654,47,[11,"updaters"]]]]],[655,13,656,66,[1,"::",1,[655,13,655,49,[0,[[655,13,655,21,[2,["Node"],"map"]],[655,22,655,42,[7,[655,23,655,41,[0,[[655,23,655,38,[2,[],"FunctionOrValue"]],[655,39,655,41,[9,[]]]]]]]],[655,43,655,49,[2,[],"record"]]]]],[656,20,656,66,[0,[[656,20,656,28,[2,["List"],"map"]],[656,29,656,57,[7,[656,30,656,56,[1,"<<",0,[656,30,656,42,[2,["Tuple"],"second"]],[656,46,656,56,[2,["Node"],"value"]]]]]],[656,58,656,66,[2,[],"updaters"]]]]]]]],[[658,9,658,25,[12,[[],"GLSLExpression"],[[658,24,658,25,[0]]]]],[659,13,659,15,[9,[]]]]]]]]]]]]],[662,1,671,10,[0,[[1,[662,1,663,3,"{-| Given a range and a fix, create an unsorted case error.\n-}"]],[1,[664,1,664,56,[[664,1,664,14,"unsortedError"],[664,17,664,56,[6,[664,17,664,23,[1,[664,17,664,23,[[],"String"]],[]]],[664,27,664,56,[6,[664,27,664,32,[1,[664,27,664,32,[[],"Range"]],[]]],[664,36,664,56,[6,[664,36,664,44,[1,[664,36,664,40,[[],"List"]],[[664,41,664,44,[1,[664,41,664,44,[[],"Fix"]],[]]]]]],[664,48,664,56,[1,[664,48,664,53,[[],"Error"]],[[664,54,664,56,[4,[]]]]]]]]]]]]]]],[665,1,671,10,[[665,1,665,14,"unsortedError"],[[665,15,665,28,[11,"errorConcerns"]]],[666,5,671,10,[0,[[666,5,666,22,[2,["Rule"],"errorWithFix"]],[667,9,671,10,[8,[[667,11,669,14,[[667,11,667,18,"details"],[668,13,669,14,[9,[[668,15,668,122,[1,"++",1,[668,15,668,28,[2,[],"errorConcerns"]],[668,32,668,122,[5," were found out of order.  They should be sorted as specified in the rule configuration."]]]]]]]]],[670,11,671,9,[[670,11,670,18,"message"],[670,21,670,56,[1,"++",1,[670,21,670,34,[2,[],"errorConcerns"]],[670,38,670,56,[5," are not sorted."]]]]]]]]]]]]]]]]]],[[15,1,16,3,"{-| Utility functions used by other modules but not specific to them.\n-}"],[134,21,134,50,"-- Generate a fix if unsorted"],[131,9,131,27,"-- Check if sorted"],[124,13,124,52,"-- ignoring lower priority sorts first."],[123,13,123,80,"-- Otherwise, generate all pairwise edges, then eliminate cycles by"],[114,13,114,65,"-- weird transitivity issues, so simply sort stably."],[113,13,113,77,"-- If there is only one sorting function, we needn't worry about"],[226,21,226,50,"-- Generate a fix if unsorted"],[223,9,223,27,"-- Check if sorted"],[221,9,221,27,"-- Glue each level"],[219,9,219,39,"-- Sort by dependency (gluing)"],[213,21,213,35,"-- Sort stably"],[206,17,206,27,"-- Flatten"],[204,17,204,53,"-- Split into glued before and after"],[197,13,197,59,"-- Keep only glued that are glued to this name"],[169,25,169,38,"-- Glue items"],[165,25,165,49,"-- Initial unglued items"],[252,17,252,45,"-- Count and sum in one pass"],[242,9,242,57,"-- If the name is qualified, it isn't a variable"],[292,9,292,57,"-- If the name is qualified, it isn't a variable"],[307,13,307,37,"-- Cannot glue to itself"],[324,9,324,43,"-- Work around elm-syntax behavior"],[443,29,443,63,"-- Repeat the process if necessary"],[438,17,438,68,"-- Eliminate all identified edges and rebuild graph"],[430,37,430,133,"-- Don't risk the infinite loop and delete them all if none of them appeared cyclic individually"],[421,25,421,134,"-- Filter low priority edges by removing any that by the insertion of just that edge create a cyclic subgraph"],[407,33,407,64,"-- Select lowest priority edges"],[404,33,404,58,"-- Group them by priority"],[402,29,402,45,"-- Get all edges"],[398,17,398,64,"-- If not, for each strongly-connected subgraph"],[394,5,394,30,"-- Check if it is acyclic"],[465,29,465,56,"-- This should never happen"],[459,21,459,64,"-- Unsortable, so simply use original order"],[495,13,495,94,"-- There can be duplicate edges, but that is fine, since the graph only keeps one"]]]]
