[1,[[1,1,1,44,[0,[[1,8,1,29,["NoUnsortedRecordsTest"]],[1,30,1,44,[1,[[1,40,1,43,[1,"all"]]]]]]]],[[3,1,16,10,[[3,8,3,25,["NoUnsortedRecords"]],[0],[1,[4,5,16,10,[1,[[5,11,5,19,[1,"defaults"]],[6,11,6,36,[1,"doNotSortAmbiguousRecords"]],[7,11,7,34,[1,"doNotSortUnknownRecords"]],[8,11,8,43,[1,"reportAmbiguousRecordsWithoutFix"]],[9,11,9,41,[1,"reportUnknownRecordsWithoutFix"]],[10,11,10,15,[1,"rule"]],[11,11,11,32,[1,"sortGenericFieldsLast"]],[12,11,12,40,[1,"treatAllSubrecordsAsCanonical"]],[13,11,13,44,[1,"treatCustomTypeRecordsAsCanonical"]],[14,11,14,35,[1,"treatSubrecordsAsUnknown"]],[15,11,15,30,[1,"typecheckAllRecords"]]]]]]]],[17,1,17,47,[[17,8,17,22,["Review","Project"]],[0],[1,[17,23,17,47,[1,[[17,33,17,46,[1,"addDependency"]]]]]]]],[18,1,18,19,[[18,8,18,19,["Review","Test"]],[0],[0]]],[19,1,19,73,[[19,8,19,32,["Review","Test","Dependencies"]],[0],[1,[19,33,19,73,[1,[[19,43,19,52,[1,"elmParser"]],[19,54,19,72,[1,"projectWithElmCore"]]]]]]]],[20,1,20,44,[[20,8,20,12,["Test"]],[0],[1,[20,13,20,44,[1,[[20,23,20,27,[2,"Test"]],[20,29,20,37,[1,"describe"]],[20,39,20,43,[1,"test"]]]]]]]]],[[23,1,47,10,[0,[[0],[1,[23,1,23,11,[[23,1,23,4,"all"],[23,7,23,11,[1,[23,7,23,11,[[],"Test"]],[]]]]]],[24,1,47,10,[[24,1,24,4,"all"],[],[25,5,47,10,[0,[[25,5,25,13,[2,[],"describe"]],[25,14,25,33,[5,"NoUnsortedRecords"]],[26,9,47,10,[9,[[26,11,26,25,[2,[],"unknownRecords"]],[27,11,27,27,[2,[],"ambiguousRecords"]],[28,11,28,20,[2,[],"withAlias"]],[29,11,29,28,[2,[],"inTypeAnnotations"]],[30,11,30,24,[2,[],"inExpressions"]],[31,11,31,21,[2,[],"inPatterns"]],[32,11,32,24,[2,[],"avoidBadFixes"]],[33,11,33,38,[2,[],"disambiguatesByHasAllFields"]],[34,11,34,40,[2,[],"disambiguatesByTypeAnnotation"]],[35,11,35,25,[2,[],"customTypeArgs"]],[36,11,36,47,[2,[],"disambiguatesByKnownFunctionArgTypes"]],[37,11,37,25,[2,[],"typeVarSupport"]],[38,11,38,35,[2,[],"recordConstructorSupport"]],[39,11,39,31,[2,[],"usesRecordFieldTypes"]],[40,11,40,26,[2,[],"operatorSupport"]],[41,11,41,28,[2,[],"dependencySupport"]],[42,11,42,31,[2,[],"genericRecordSupport"]],[43,11,43,30,[2,[],"localBindingSupport"]],[44,11,44,37,[2,[],"simpleTypeInferenceSupport"]],[45,11,45,21,[2,[],"subrecords"]],[46,11,46,31,[2,[],"typecheckUnambiguous"]]]]]]]]]]]]],[50,1,60,10,[0,[[0],[1,[50,1,50,74,[[50,1,50,21,"ambiguousRecordError"],[50,24,50,74,[6,[50,24,50,35,[1,[50,24,50,28,[[],"List"]],[[50,29,50,35,[1,[50,29,50,35,[[],"String"]],[]]]]]],[50,39,50,74,[6,[50,39,50,45,[1,[50,39,50,45,[[],"String"]],[]]],[50,49,50,74,[1,[50,49,50,74,[["Review","Test"],"ExpectedError"]],[]]]]]]]]]],[51,1,60,10,[[51,1,51,21,"ambiguousRecordError"],[[51,22,51,30,[11,"matching"]],[51,31,51,36,[11,"under"]]],[52,5,60,10,[0,[[52,5,52,22,[2,["Review","Test"],"error"]],[53,9,60,10,[8,[[53,11,57,14,[[53,11,53,18,"details"],[54,13,57,14,[9,[[54,15,54,142,[5,"This record could be one of several possible record aliases, so whether or not its fields are sorted could not be determined!"]],[55,15,55,119,[5,"Try adding a type annotation, or remove reportAmbiguousRecordsWithoutFix from your rule configuration."]],[56,15,56,97,[1,"++",1,[56,15,56,68,[5,"The record matched the following possible aliases: "]],[56,72,56,97,[0,[[56,72,56,83,[2,["String"],"join"]],[56,84,56,88,[5,", "]],[56,89,56,97,[2,[],"matching"]]]]]]]]]]]],[58,11,59,9,[[58,11,58,18,"message"],[58,21,58,52,[5,"Ambiguous record encountered."]]]],[59,11,60,9,[[59,11,59,16,"under"],[59,19,59,24,[2,[],"under"]]]]]]]]]]]]]]],[63,1,157,10,[0,[[0],[1,[63,1,63,24,[[63,1,63,17,"ambiguousRecords"],[63,20,63,24,[1,[63,20,63,24,[[],"Test"]],[]]]]]],[64,1,157,10,[[64,1,64,17,"ambiguousRecords"],[],[65,5,157,10,[0,[[65,5,65,13,[2,[],"describe"]],[65,14,65,33,[5,"ambiguous records"]],[66,9,157,10,[9,[[66,11,76,50,[1,"<|",1,[66,11,66,62,[0,[[66,11,66,15,[2,[],"test"]],[66,16,66,62,[5,"passes ambiguous record that is alphabetical"]]]]],[67,13,76,50,[18,[[[67,14,67,16,[1]]],[68,17,76,50,[1,"|>",0,[68,17,75,55,[1,"|>",0,[68,17,74,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { a = 1, b = 2, c = 3 }\n"]],[75,24,75,55,[0,[[75,24,75,39,[2,["Review","Test"],"run"]],[75,40,75,55,[7,[75,41,75,54,[0,[[75,41,75,45,[2,[],"rule"]],[75,46,75,54,[2,[],"defaults"]]]]]]]]]]]],[76,24,76,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[77,11,97,26,[1,"<|",1,[77,11,77,65,[0,[[77,11,77,15,[2,[],"test"]],[77,16,77,65,[5,"fails ambiguous record that is not alphabetical"]]]]],[78,13,97,26,[18,[[[78,14,78,16,[1]]],[79,17,97,26,[1,"|>",0,[79,17,86,55,[1,"|>",0,[79,17,85,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { b = 2, a = 1, c = 3 }\n"]],[86,24,86,55,[0,[[86,24,86,39,[2,["Review","Test"],"run"]],[86,40,86,55,[7,[86,41,86,54,[0,[[86,41,86,45,[2,[],"rule"]],[86,46,86,54,[2,[],"defaults"]]]]]]]]]]]],[87,24,97,26,[0,[[87,24,87,48,[2,["Review","Test"],"expectErrors"]],[88,25,97,26,[9,[[88,27,96,4,[1,"|>",0,[88,27,89,120,[1,"|>",0,[88,27,88,40,[2,[],"unsortedError"]],[89,32,89,120,[0,[[89,32,89,53,[2,["Review","Test"],"atExactly"]],[89,54,89,120,[8,[[89,56,89,87,[[89,56,89,61,"start"],[89,64,89,87,[8,[[89,66,89,73,[[89,66,89,69,"row"],[89,72,89,73,[3,6]]]],[89,75,89,86,[[89,75,89,81,"column"],[89,84,89,85,[3,5]]]]]]]]],[89,89,89,119,[[89,89,89,92,"end"],[89,95,89,118,[8,[[89,97,89,104,[[89,97,89,100,"row"],[89,103,89,104,[3,6]]]],[89,106,89,117,[[89,106,89,112,"column"],[89,115,89,116,[3,6]]]]]]]]]]]]]]]]],[90,32,96,4,[0,[[90,32,90,53,[2,["Review","Test"],"whenFixed"]],[90,54,96,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { a = 1, b = 2, c = 3 }\n"]]]]]]]]]]]]]]]]]]]],[98,11,112,50,[1,"<|",1,[98,11,98,78,[0,[[98,11,98,15,[2,[],"test"]],[98,16,98,78,[5,"passes ambiguous record that is not alphabetical with option"]]]]],[99,13,112,50,[18,[[[99,14,99,16,[1]]],[100,17,112,50,[1,"|>",0,[100,17,111,26,[1,"|>",0,[100,17,106,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { b = 2, a = 1, c = 3 }\n"]],[107,24,111,26,[0,[[107,24,107,39,[2,["Review","Test"],"run"]],[108,25,111,26,[7,[108,26,110,36,[1,"|>",0,[108,26,109,57,[1,"|>",0,[108,26,108,34,[2,[],"defaults"]],[109,32,109,57,[2,[],"doNotSortAmbiguousRecords"]]]],[110,32,110,36,[2,[],"rule"]]]]]]]]]]],[112,24,112,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[113,11,123,50,[1,"<|",1,[113,11,113,78,[0,[[113,11,113,15,[2,[],"test"]],[113,16,113,78,[5,"passes unambiguous record (because of identical field orders"]]]]],[114,13,123,50,[18,[[[114,14,114,16,[1]]],[115,17,123,50,[1,"|>",0,[115,17,122,55,[1,"|>",0,[115,17,121,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { b : Int, c : Int, a : Int }\n\na = { b = 2, c = 3, a = 1 }\n"]],[122,24,122,55,[0,[[122,24,122,39,[2,["Review","Test"],"run"]],[122,40,122,55,[7,[122,41,122,54,[0,[[122,41,122,45,[2,[],"rule"]],[122,46,122,54,[2,[],"defaults"]]]]]]]]]]]],[123,24,123,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[124,11,138,116,[1,"<|",1,[124,11,124,79,[0,[[124,11,124,15,[2,[],"test"]],[124,16,124,79,[5,"reports ambiguous record that is not alphabetical with option"]]]]],[125,13,138,116,[18,[[[125,14,125,16,[1]]],[126,17,138,116,[1,"|>",0,[126,17,137,26,[1,"|>",0,[126,17,132,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { b = 2, a = 1, c = 3 }\n"]],[133,24,137,26,[0,[[133,24,133,39,[2,["Review","Test"],"run"]],[134,25,137,26,[7,[134,26,136,36,[1,"|>",0,[134,26,135,64,[1,"|>",0,[134,26,134,34,[2,[],"defaults"]],[135,32,135,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[136,32,136,36,[2,[],"rule"]]]]]]]]]]],[138,24,138,116,[0,[[138,24,138,48,[2,["Review","Test"],"expectErrors"]],[138,49,138,116,[9,[[138,51,138,114,[0,[[138,51,138,71,[2,[],"ambiguousRecordError"]],[138,72,138,88,[9,[[138,74,138,79,[5,"A.A"]],[138,81,138,86,[5,"A.B"]]]]],[138,89,138,114,[5,"{ b = 2, a = 1, c = 3 }"]]]]]]]]]]]]]]]]]],[139,11,156,50,[1,"<|",1,[139,11,139,88,[0,[[139,11,139,15,[2,[],"test"]],[139,16,139,88,[5,"does not report ambiguous records with a single field even with option"]]]]],[140,13,156,50,[18,[[[140,14,140,16,[1]]],[141,17,156,50,[1,"|>",0,[141,17,155,26,[1,"|>",0,[141,17,150,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na r =\n    case r of\n        { b } ->\n            True\n"]],[151,24,155,26,[0,[[151,24,151,39,[2,["Review","Test"],"run"]],[152,25,155,26,[7,[152,26,154,36,[1,"|>",0,[152,26,153,64,[1,"|>",0,[152,26,152,34,[2,[],"defaults"]],[153,32,153,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[154,32,154,36,[2,[],"rule"]]]]]]]]]]],[156,24,156,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[160,1,204,10,[0,[[0],[1,[160,1,160,21,[[160,1,160,14,"avoidBadFixes"],[160,17,160,21,[1,[160,17,160,21,[[],"Test"]],[]]]]]],[161,1,204,10,[[161,1,161,14,"avoidBadFixes"],[],[162,5,204,10,[0,[[162,5,162,13,[2,[],"describe"]],[162,14,162,32,[5,"avoids bad fixes"]],[163,9,204,10,[9,[[163,11,203,26,[1,"<|",1,[163,11,163,57,[0,[[163,11,163,15,[2,[],"test"]],[163,16,163,57,[5,"do not splice onto the ends of comments"]]]]],[164,13,203,26,[18,[[[164,14,164,16,[1]]],[165,17,203,26,[1,"|>",0,[165,17,182,55,[1,"|>",0,[165,17,181,4,[5,"module A exposing (..)\n\ntype alias Rec =\n    { foo : Int\n    , bar : Int\n    , baz : Int\n    }\n\ntest : Rec -> Rec\ntest r =\n    { r\n        | bar = 1\n        -- comment\n        , foo = 2\n        , baz = 3\n    }\n"]],[182,24,182,55,[0,[[182,24,182,39,[2,["Review","Test"],"run"]],[182,40,182,55,[7,[182,41,182,54,[0,[[182,41,182,45,[2,[],"rule"]],[182,46,182,54,[2,[],"defaults"]]]]]]]]]]]],[183,24,203,26,[0,[[183,24,183,48,[2,["Review","Test"],"expectErrors"]],[184,25,203,26,[9,[[184,27,202,4,[1,"|>",0,[184,27,185,122,[1,"|>",0,[184,27,184,40,[2,[],"unsortedError"]],[185,32,185,122,[0,[[185,32,185,53,[2,["Review","Test"],"atExactly"]],[185,54,185,122,[8,[[185,56,185,88,[[185,56,185,61,"start"],[185,64,185,88,[8,[[185,66,185,74,[[185,66,185,69,"row"],[185,72,185,74,[3,11]]]],[185,76,185,87,[[185,76,185,82,"column"],[185,85,185,86,[3,5]]]]]]]]],[185,90,185,121,[[185,90,185,93,"end"],[185,96,185,120,[8,[[185,98,185,106,[[185,98,185,101,"row"],[185,104,185,106,[3,11]]]],[185,108,185,119,[[185,108,185,114,"column"],[185,117,185,118,[3,6]]]]]]]]]]]]]]]]],[186,32,202,4,[0,[[186,32,186,53,[2,["Review","Test"],"whenFixed"]],[186,54,202,4,[5,"module A exposing (..)\n\ntype alias Rec =\n    { foo : Int\n    , bar : Int\n    , baz : Int\n    }\n\ntest : Rec -> Rec\ntest r =\n    { r\n        | foo = 2\n        , bar = 1\n        -- comment\n        , baz = 3\n    }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[207,1,331,10,[0,[[0],[1,[207,1,207,22,[[207,1,207,15,"customTypeArgs"],[207,18,207,22,[1,[207,18,207,22,[[],"Test"]],[]]]]]],[208,1,331,10,[[208,1,208,15,"customTypeArgs"],[],[209,5,331,10,[0,[[209,5,209,13,[2,[],"describe"]],[209,14,209,47,[5,"record is an argument of a type"]],[210,9,331,10,[9,[[210,11,219,50,[1,"<|",1,[210,11,210,44,[0,[[210,11,210,15,[2,[],"test"]],[210,16,210,44,[5,"fields are in sorted order"]]]]],[211,13,219,50,[18,[[[211,14,211,16,[1]]],[212,17,219,50,[1,"|>",0,[212,17,218,55,[1,"|>",0,[212,17,217,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\na = A { foo = 1, bar = 2, baz = 3 }\n"]],[218,24,218,55,[0,[[218,24,218,39,[2,["Review","Test"],"run"]],[218,40,218,55,[7,[218,41,218,54,[0,[[218,41,218,45,[2,[],"rule"]],[218,46,218,54,[2,[],"defaults"]]]]]]]]]]]],[219,24,219,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[220,11,238,26,[1,"<|",1,[220,11,220,48,[0,[[220,11,220,15,[2,[],"test"]],[220,16,220,48,[5,"fields are not in sorted order"]]]]],[221,13,238,26,[18,[[[221,14,221,16,[1]]],[222,17,238,26,[1,"|>",0,[222,17,228,55,[1,"|>",0,[222,17,227,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\na = A { bar = 2, foo = 1, baz = 3 }\n"]],[228,24,228,55,[0,[[228,24,228,39,[2,["Review","Test"],"run"]],[228,40,228,55,[7,[228,41,228,54,[0,[[228,41,228,45,[2,[],"rule"]],[228,46,228,54,[2,[],"defaults"]]]]]]]]]]]],[229,24,238,26,[0,[[229,24,229,48,[2,["Review","Test"],"expectErrors"]],[230,25,238,26,[9,[[230,27,237,4,[1,"|>",0,[230,27,231,120,[1,"|>",0,[230,27,230,40,[2,[],"unsortedError"]],[231,32,231,120,[0,[[231,32,231,53,[2,["Review","Test"],"atExactly"]],[231,54,231,120,[8,[[231,56,231,87,[[231,56,231,61,"start"],[231,64,231,87,[8,[[231,66,231,73,[[231,66,231,69,"row"],[231,72,231,73,[3,5]]]],[231,75,231,86,[[231,75,231,81,"column"],[231,84,231,85,[3,7]]]]]]]]],[231,89,231,119,[[231,89,231,92,"end"],[231,95,231,118,[8,[[231,97,231,104,[[231,97,231,100,"row"],[231,103,231,104,[3,5]]]],[231,106,231,117,[[231,106,231,112,"column"],[231,115,231,116,[3,8]]]]]]]]]]]]]]]]],[232,32,237,4,[0,[[232,32,232,53,[2,["Review","Test"],"whenFixed"]],[232,54,237,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\na = A { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[239,11,261,26,[1,"<|",1,[239,11,239,62,[0,[[239,11,239,15,[2,[],"test"]],[239,16,239,62,[5,"disambiguates by constructor for expressions"]]]]],[240,13,261,26,[18,[[[240,14,240,16,[1]]],[241,17,261,26,[1,"|>",0,[241,17,249,55,[1,"|>",0,[241,17,248,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = A { bar = 2, foo = 1, baz = 3 }\n"]],[249,24,249,55,[0,[[249,24,249,39,[2,["Review","Test"],"run"]],[249,40,249,55,[7,[249,41,249,54,[0,[[249,41,249,45,[2,[],"rule"]],[249,46,249,54,[2,[],"defaults"]]]]]]]]]]]],[250,24,261,26,[0,[[250,24,250,48,[2,["Review","Test"],"expectErrors"]],[251,25,261,26,[9,[[251,27,260,4,[1,"|>",0,[251,27,252,120,[1,"|>",0,[251,27,251,40,[2,[],"unsortedError"]],[252,32,252,120,[0,[[252,32,252,53,[2,["Review","Test"],"atExactly"]],[252,54,252,120,[8,[[252,56,252,87,[[252,56,252,61,"start"],[252,64,252,87,[8,[[252,66,252,73,[[252,66,252,69,"row"],[252,72,252,73,[3,7]]]],[252,75,252,86,[[252,75,252,81,"column"],[252,84,252,85,[3,7]]]]]]]]],[252,89,252,119,[[252,89,252,92,"end"],[252,95,252,118,[8,[[252,97,252,104,[[252,97,252,100,"row"],[252,103,252,104,[3,7]]]],[252,106,252,117,[[252,106,252,112,"column"],[252,115,252,116,[3,8]]]]]]]]]]]]]]]]],[253,32,260,4,[0,[[253,32,253,53,[2,["Review","Test"],"whenFixed"]],[253,54,260,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = A { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[262,11,291,26,[1,"<|",1,[262,11,262,72,[0,[[262,11,262,15,[2,[],"test"]],[262,16,262,72,[5,"disambiguates by constructor arg index for expressions"]]]]],[263,13,291,26,[18,[[[263,14,263,16,[1]]],[264,17,291,26,[1,"|>",0,[264,17,271,55,[1,"|>",0,[264,17,270,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\na = A 3 { bar = 1, foo = 2, baz = 3 } \"hello\" { foo = 1, bar = 2, baz = 3 }\n"]],[271,24,271,55,[0,[[271,24,271,39,[2,["Review","Test"],"run"]],[271,40,271,55,[7,[271,41,271,54,[0,[[271,41,271,45,[2,[],"rule"]],[271,46,271,54,[2,[],"defaults"]]]]]]]]]]]],[272,24,291,26,[0,[[272,24,272,48,[2,["Review","Test"],"expectErrors"]],[273,25,291,26,[9,[[273,27,281,4,[1,"|>",0,[273,27,274,121,[1,"|>",0,[273,27,273,40,[2,[],"unsortedError"]],[274,32,274,121,[0,[[274,32,274,53,[2,["Review","Test"],"atExactly"]],[274,54,274,121,[8,[[274,56,274,87,[[274,56,274,61,"start"],[274,64,274,87,[8,[[274,66,274,73,[[274,66,274,69,"row"],[274,72,274,73,[3,6]]]],[274,75,274,86,[[274,75,274,81,"column"],[274,84,274,85,[3,9]]]]]]]]],[274,89,274,120,[[274,89,274,92,"end"],[274,95,274,119,[8,[[274,97,274,104,[[274,97,274,100,"row"],[274,103,274,104,[3,6]]]],[274,106,274,118,[[274,106,274,112,"column"],[274,115,274,117,[3,10]]]]]]]]]]]]]]]]],[275,32,281,4,[0,[[275,32,275,53,[2,["Review","Test"],"whenFixed"]],[275,54,281,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\na = A 3 { foo = 2, bar = 1, baz = 3 } \"hello\" { foo = 1, bar = 2, baz = 3 }\n"]]]]]]],[282,27,290,4,[1,"|>",0,[282,27,283,122,[1,"|>",0,[282,27,282,40,[2,[],"unsortedError"]],[283,32,283,122,[0,[[283,32,283,53,[2,["Review","Test"],"atExactly"]],[283,54,283,122,[8,[[283,56,283,88,[[283,56,283,61,"start"],[283,64,283,88,[8,[[283,66,283,73,[[283,66,283,69,"row"],[283,72,283,73,[3,6]]]],[283,75,283,87,[[283,75,283,81,"column"],[283,84,283,86,[3,47]]]]]]]]],[283,90,283,121,[[283,90,283,93,"end"],[283,96,283,120,[8,[[283,98,283,105,[[283,98,283,101,"row"],[283,104,283,105,[3,6]]]],[283,107,283,119,[[283,107,283,113,"column"],[283,116,283,118,[3,48]]]]]]]]]]]]]]]]],[284,32,290,4,[0,[[284,32,284,53,[2,["Review","Test"],"whenFixed"]],[284,54,290,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\na = A 3 { bar = 1, foo = 2, baz = 3 } \"hello\" { bar = 2, foo = 1, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[292,11,330,26,[1,"<|",1,[292,11,292,69,[0,[[292,11,292,15,[2,[],"test"]],[292,16,292,69,[5,"disambiguates by constructor arg index for patterns"]]]]],[293,13,330,26,[18,[[[293,14,293,16,[1]]],[294,17,330,26,[1,"|>",0,[294,17,304,55,[1,"|>",0,[294,17,303,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\n\na custom =\n    case custom of\n        A _ { bar, foo } _ {foo, bar} -> False\n"]],[304,24,304,55,[0,[[304,24,304,39,[2,["Review","Test"],"run"]],[304,40,304,55,[7,[304,41,304,54,[0,[[304,41,304,45,[2,[],"rule"]],[304,46,304,54,[2,[],"defaults"]]]]]]]]]]]],[305,24,330,26,[0,[[305,24,305,48,[2,["Review","Test"],"expectErrors"]],[306,25,330,26,[9,[[306,27,317,4,[1,"|>",0,[306,27,307,122,[1,"|>",0,[306,27,306,40,[2,[],"unsortedError"]],[307,32,307,122,[0,[[307,32,307,53,[2,["Review","Test"],"atExactly"]],[307,54,307,122,[8,[[307,56,307,88,[[307,56,307,61,"start"],[307,64,307,88,[8,[[307,66,307,73,[[307,66,307,69,"row"],[307,72,307,73,[3,9]]]],[307,75,307,87,[[307,75,307,81,"column"],[307,84,307,86,[3,13]]]]]]]]],[307,90,307,121,[[307,90,307,93,"end"],[307,96,307,120,[8,[[307,98,307,105,[[307,98,307,101,"row"],[307,104,307,105,[3,9]]]],[307,107,307,119,[[307,107,307,113,"column"],[307,116,307,118,[3,14]]]]]]]]]]]]]]]]],[308,32,317,4,[0,[[308,32,308,53,[2,["Review","Test"],"whenFixed"]],[308,54,317,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\n\na custom =\n    case custom of\n        A _ { foo, bar } _ {foo, bar} -> False\n"]]]]]]],[318,27,329,4,[1,"|>",0,[318,27,319,122,[1,"|>",0,[318,27,318,40,[2,[],"unsortedError"]],[319,32,319,122,[0,[[319,32,319,53,[2,["Review","Test"],"atExactly"]],[319,54,319,122,[8,[[319,56,319,88,[[319,56,319,61,"start"],[319,64,319,88,[8,[[319,66,319,73,[[319,66,319,69,"row"],[319,72,319,73,[3,9]]]],[319,75,319,87,[[319,75,319,81,"column"],[319,84,319,86,[3,28]]]]]]]]],[319,90,319,121,[[319,90,319,93,"end"],[319,96,319,120,[8,[[319,98,319,105,[[319,98,319,101,"row"],[319,104,319,105,[3,9]]]],[319,107,319,119,[[319,107,319,113,"column"],[319,116,319,118,[3,29]]]]]]]]]]]]]]]]],[320,32,329,4,[0,[[320,32,320,53,[2,["Review","Test"],"whenFixed"]],[320,54,329,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\n\na custom =\n    case custom of\n        A _ { bar, foo } _ {bar, foo} -> False\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[334,1,439,10,[0,[[0],[1,[334,1,334,25,[[334,1,334,18,"dependencySupport"],[334,21,334,25,[1,[334,21,334,25,[[],"Test"]],[]]]]]],[335,1,439,10,[[335,1,335,18,"dependencySupport"],[],[336,5,439,10,[0,[[336,5,336,13,[2,[],"describe"]],[336,14,336,34,[5,"dependency support"]],[337,9,439,10,[9,[[337,11,357,26,[1,"<|",1,[337,11,337,77,[0,[[337,11,337,15,[2,[],"test"]],[337,16,337,77,[5,"will sort based on type alias in dependency with annotation"]]]]],[338,13,357,26,[18,[[[338,14,338,16,[1]]],[339,17,357,26,[1,"|>",0,[339,17,346,118,[1,"|>",0,[339,17,345,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na : DeadEnd\na = { problem = BadRepeat, col = 1, row = 2 }\n"]],[346,24,346,118,[0,[[346,24,346,54,[2,["Review","Test"],"runWithProjectData"]],[346,55,346,102,[7,[346,56,346,101,[1,"|>",0,[346,56,346,74,[2,[],"projectWithElmCore"]],[346,78,346,101,[0,[[346,78,346,91,[2,[],"addDependency"]],[346,92,346,101,[2,[],"elmParser"]]]]]]]]],[346,103,346,118,[7,[346,104,346,117,[0,[[346,104,346,108,[2,[],"rule"]],[346,109,346,117,[2,[],"defaults"]]]]]]]]]]]],[347,24,357,26,[0,[[347,24,347,48,[2,["Review","Test"],"expectErrors"]],[348,25,357,26,[9,[[348,27,356,4,[1,"|>",0,[348,27,348,40,[2,[],"unsortedError"]],[349,32,356,4,[0,[[349,32,349,53,[2,["Review","Test"],"whenFixed"]],[350,33,356,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na : DeadEnd\na = { row = 2 , col = 1, problem = BadRepeat}\n"]]]]]]]]]]]]]]]]]]]],[358,11,376,26,[1,"<|",1,[358,11,358,69,[0,[[358,11,358,15,[2,[],"test"]],[358,16,358,69,[5,"will sort based on type alias in dependency without"]]]]],[359,13,376,26,[18,[[[359,14,359,16,[1]]],[360,17,376,26,[1,"|>",0,[360,17,366,118,[1,"|>",0,[360,17,365,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na = { problem = BadRepeat, col = 1, row = 2 }\n"]],[366,24,366,118,[0,[[366,24,366,54,[2,["Review","Test"],"runWithProjectData"]],[366,55,366,102,[7,[366,56,366,101,[1,"|>",0,[366,56,366,74,[2,[],"projectWithElmCore"]],[366,78,366,101,[0,[[366,78,366,91,[2,[],"addDependency"]],[366,92,366,101,[2,[],"elmParser"]]]]]]]]],[366,103,366,118,[7,[366,104,366,117,[0,[[366,104,366,108,[2,[],"rule"]],[366,109,366,117,[2,[],"defaults"]]]]]]]]]]]],[367,24,376,26,[0,[[367,24,367,48,[2,["Review","Test"],"expectErrors"]],[368,25,376,26,[9,[[368,27,375,4,[1,"|>",0,[368,27,368,40,[2,[],"unsortedError"]],[369,32,375,4,[0,[[369,32,369,53,[2,["Review","Test"],"whenFixed"]],[370,33,375,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na = { row = 2 , col = 1, problem = BadRepeat}\n"]]]]]]]]]]]]]]]]]]]],[377,11,400,26,[1,"<|",1,[377,11,377,96,[0,[[377,11,377,15,[2,[],"test"]],[377,16,377,96,[5,"will disambiguate based on dependency function signature (including list type)"]]]]],[378,13,400,26,[18,[[[378,14,378,16,[1]]],[379,17,400,26,[1,"|>",0,[379,17,387,118,[1,"|>",0,[379,17,386,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : Problem }\n\na = deadEndsToString [ { problem = BadRepeat, col = 1, row = 2 } ]\n"]],[387,24,387,118,[0,[[387,24,387,54,[2,["Review","Test"],"runWithProjectData"]],[387,55,387,102,[7,[387,56,387,101,[1,"|>",0,[387,56,387,74,[2,[],"projectWithElmCore"]],[387,78,387,101,[0,[[387,78,387,91,[2,[],"addDependency"]],[387,92,387,101,[2,[],"elmParser"]]]]]]]]],[387,103,387,118,[7,[387,104,387,117,[0,[[387,104,387,108,[2,[],"rule"]],[387,109,387,117,[2,[],"defaults"]]]]]]]]]]]],[388,24,400,26,[0,[[388,24,388,48,[2,["Review","Test"],"expectErrors"]],[389,25,400,26,[9,[[389,27,399,4,[1,"|>",0,[389,27,390,122,[1,"|>",0,[389,27,389,40,[2,[],"unsortedError"]],[390,32,390,122,[0,[[390,32,390,53,[2,["Review","Test"],"atExactly"]],[390,54,390,122,[8,[[390,56,390,88,[[390,56,390,61,"start"],[390,64,390,88,[8,[[390,66,390,73,[[390,66,390,69,"row"],[390,72,390,73,[3,7]]]],[390,75,390,87,[[390,75,390,81,"column"],[390,84,390,86,[3,24]]]]]]]]],[390,90,390,121,[[390,90,390,93,"end"],[390,96,390,120,[8,[[390,98,390,105,[[390,98,390,101,"row"],[390,104,390,105,[3,7]]]],[390,107,390,119,[[390,107,390,113,"column"],[390,116,390,118,[3,25]]]]]]]]]]]]]]]]],[391,32,399,4,[0,[[391,32,391,53,[2,["Review","Test"],"whenFixed"]],[392,33,399,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : Problem }\n\na = deadEndsToString [ { row = 2 , col = 1, problem = BadRepeat} ]\n"]]]]]]]]]]]]]]]]]]]],[401,11,438,26,[1,"<|",1,[401,11,401,55,[0,[[401,11,401,15,[2,[],"test"]],[401,16,401,55,[5,"will disambiguate based on field type"]]]]],[402,13,438,26,[18,[[[402,14,402,16,[1]]],[403,17,438,26,[1,"|>",0,[403,17,412,118,[1,"|>",0,[403,17,411,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : String }\n\na : { col : Int, row : Int, problem : Problem }\na = { problem = BadRepeat, col = 1, row = 2 }\n"]],[412,24,412,118,[0,[[412,24,412,54,[2,["Review","Test"],"runWithProjectData"]],[412,55,412,102,[7,[412,56,412,101,[1,"|>",0,[412,56,412,74,[2,[],"projectWithElmCore"]],[412,78,412,101,[0,[[412,78,412,91,[2,[],"addDependency"]],[412,92,412,101,[2,[],"elmParser"]]]]]]]]],[412,103,412,118,[7,[412,104,412,117,[0,[[412,104,412,108,[2,[],"rule"]],[412,109,412,117,[2,[],"defaults"]]]]]]]]]]]],[413,24,438,26,[0,[[413,24,413,48,[2,["Review","Test"],"expectErrors"]],[414,25,438,26,[9,[[414,27,425,4,[1,"|>",0,[414,27,415,120,[1,"|>",0,[414,27,414,40,[2,[],"unsortedError"]],[415,32,415,120,[0,[[415,32,415,53,[2,["Review","Test"],"atExactly"]],[415,54,415,120,[8,[[415,56,415,87,[[415,56,415,61,"start"],[415,64,415,87,[8,[[415,66,415,73,[[415,66,415,69,"row"],[415,72,415,73,[3,8]]]],[415,75,415,86,[[415,75,415,81,"column"],[415,84,415,85,[3,5]]]]]]]]],[415,89,415,119,[[415,89,415,92,"end"],[415,95,415,118,[8,[[415,97,415,104,[[415,97,415,100,"row"],[415,103,415,104,[3,8]]]],[415,106,415,117,[[415,106,415,112,"column"],[415,115,415,116,[3,6]]]]]]]]]]]]]]]]],[416,32,425,4,[0,[[416,32,416,53,[2,["Review","Test"],"whenFixed"]],[417,33,425,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : String }\n\na : { col : Int, row : Int, problem : Problem }\na = { row = 2 , col = 1, problem = BadRepeat}\n"]]]]]]],[426,27,437,4,[1,"|>",0,[426,27,427,120,[1,"|>",0,[426,27,426,40,[2,[],"unsortedError"]],[427,32,427,120,[0,[[427,32,427,53,[2,["Review","Test"],"atExactly"]],[427,54,427,120,[8,[[427,56,427,87,[[427,56,427,61,"start"],[427,64,427,87,[8,[[427,66,427,73,[[427,66,427,69,"row"],[427,72,427,73,[3,7]]]],[427,75,427,86,[[427,75,427,81,"column"],[427,84,427,85,[3,5]]]]]]]]],[427,89,427,119,[[427,89,427,92,"end"],[427,95,427,118,[8,[[427,97,427,104,[[427,97,427,100,"row"],[427,103,427,104,[3,7]]]],[427,106,427,117,[[427,106,427,112,"column"],[427,115,427,116,[3,6]]]]]]]]]]]]]]]]],[428,32,437,4,[0,[[428,32,428,53,[2,["Review","Test"],"whenFixed"]],[429,33,437,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : String }\n\na : { row : Int, col : Int, problem : Problem }\na = { problem = BadRepeat, col = 1, row = 2 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[442,1,634,10,[0,[[0],[1,[442,1,442,35,[[442,1,442,28,"disambiguatesByHasAllFields"],[442,31,442,35,[1,[442,31,442,35,[[],"Test"]],[]]]]]],[443,1,634,10,[[443,1,443,28,"disambiguatesByHasAllFields"],[],[444,5,634,10,[0,[[444,5,444,13,[2,[],"describe"]],[444,14,444,67,[5,"disambiguates by whether all fields must be present"]],[445,9,634,10,[9,[[445,11,456,50,[1,"<|",1,[445,11,445,24,[0,[[445,11,445,15,[2,[],"test"]],[445,16,445,24,[5,"passes"]]]]],[446,13,456,50,[18,[[[446,14,446,16,[1]]],[447,17,456,50,[1,"|>",0,[447,17,455,55,[1,"|>",0,[447,17,454,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int, extra : Int }\n\na = { foo = 1, bar = 2, baz = 3}\n"]],[455,24,455,55,[0,[[455,24,455,39,[2,["Review","Test"],"run"]],[455,40,455,55,[7,[455,41,455,54,[0,[[455,41,455,45,[2,[],"rule"]],[455,46,455,54,[2,[],"defaults"]]]]]]]]]]]],[456,24,456,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[457,11,479,26,[1,"<|",1,[457,11,457,23,[0,[[457,11,457,15,[2,[],"test"]],[457,16,457,23,[5,"fails"]]]]],[458,13,479,26,[18,[[[458,14,458,16,[1]]],[459,17,479,26,[1,"|>",0,[459,17,467,55,[1,"|>",0,[459,17,466,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int, extra : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[467,24,467,55,[0,[[467,24,467,39,[2,["Review","Test"],"run"]],[467,40,467,55,[7,[467,41,467,54,[0,[[467,41,467,45,[2,[],"rule"]],[467,46,467,54,[2,[],"defaults"]]]]]]]]]]]],[468,24,479,26,[0,[[468,24,468,48,[2,["Review","Test"],"expectErrors"]],[469,25,479,26,[9,[[469,27,478,4,[1,"|>",0,[469,27,470,120,[1,"|>",0,[469,27,469,40,[2,[],"unsortedError"]],[470,32,470,120,[0,[[470,32,470,53,[2,["Review","Test"],"atExactly"]],[470,54,470,120,[8,[[470,56,470,87,[[470,56,470,61,"start"],[470,64,470,87,[8,[[470,66,470,73,[[470,66,470,69,"row"],[470,72,470,73,[3,7]]]],[470,75,470,86,[[470,75,470,81,"column"],[470,84,470,85,[3,5]]]]]]]]],[470,89,470,119,[[470,89,470,92,"end"],[470,95,470,118,[8,[[470,97,470,104,[[470,97,470,100,"row"],[470,103,470,104,[3,7]]]],[470,106,470,117,[[470,106,470,112,"column"],[470,115,470,116,[3,6]]]]]]]]]]]]]]]]],[471,32,478,4,[0,[[471,32,471,53,[2,["Review","Test"],"whenFixed"]],[471,54,478,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int, extra : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[480,11,502,26,[1,"<|",1,[480,11,480,68,[0,[[480,11,480,15,[2,[],"test"]],[480,16,480,68,[5,"does not match any when all fields must be present"]]]]],[481,13,502,26,[18,[[[481,14,481,16,[1]]],[482,17,502,26,[1,"|>",0,[482,17,490,55,[1,"|>",0,[482,17,489,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na = { baz = 3, bar = 2 }\n"]],[490,24,490,55,[0,[[490,24,490,39,[2,["Review","Test"],"run"]],[490,40,490,55,[7,[490,41,490,54,[0,[[490,41,490,45,[2,[],"rule"]],[490,46,490,54,[2,[],"defaults"]]]]]]]]]]]],[491,24,502,26,[0,[[491,24,491,48,[2,["Review","Test"],"expectErrors"]],[492,25,502,26,[9,[[492,27,501,4,[1,"|>",0,[492,27,493,120,[1,"|>",0,[492,27,492,40,[2,[],"unsortedError"]],[493,32,493,120,[0,[[493,32,493,53,[2,["Review","Test"],"atExactly"]],[493,54,493,120,[8,[[493,56,493,87,[[493,56,493,61,"start"],[493,64,493,87,[8,[[493,66,493,73,[[493,66,493,69,"row"],[493,72,493,73,[3,7]]]],[493,75,493,86,[[493,75,493,81,"column"],[493,84,493,85,[3,5]]]]]]]]],[493,89,493,119,[[493,89,493,92,"end"],[493,95,493,118,[8,[[493,97,493,104,[[493,97,493,100,"row"],[493,103,493,104,[3,7]]]],[493,106,493,117,[[493,106,493,112,"column"],[493,115,493,116,[3,6]]]]]]]]]]]]]]]]],[494,32,501,4,[0,[[494,32,494,53,[2,["Review","Test"],"whenFixed"]],[494,54,501,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na = { bar = 2 , baz = 3}\n"]]]]]]]]]]]]]]]]]]]],[503,11,525,26,[1,"<|",1,[503,11,503,50,[0,[[503,11,503,15,[2,[],"test"]],[503,16,503,50,[5,"is ambiguous with record updates"]]]]],[504,13,525,26,[18,[[[504,14,504,16,[1]]],[505,17,525,26,[1,"|>",0,[505,17,513,55,[1,"|>",0,[505,17,512,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na r = { r | baz = 3, bar = 2, foo = 1 }\n"]],[513,24,513,55,[0,[[513,24,513,39,[2,["Review","Test"],"run"]],[513,40,513,55,[7,[513,41,513,54,[0,[[513,41,513,45,[2,[],"rule"]],[513,46,513,54,[2,[],"defaults"]]]]]]]]]]]],[514,24,525,26,[0,[[514,24,514,48,[2,["Review","Test"],"expectErrors"]],[515,25,525,26,[9,[[515,27,524,4,[1,"|>",0,[515,27,516,120,[1,"|>",0,[515,27,515,40,[2,[],"unsortedError"]],[516,32,516,120,[0,[[516,32,516,53,[2,["Review","Test"],"atExactly"]],[516,54,516,120,[8,[[516,56,516,87,[[516,56,516,61,"start"],[516,64,516,87,[8,[[516,66,516,73,[[516,66,516,69,"row"],[516,72,516,73,[3,7]]]],[516,75,516,86,[[516,75,516,81,"column"],[516,84,516,85,[3,7]]]]]]]]],[516,89,516,119,[[516,89,516,92,"end"],[516,95,516,118,[8,[[516,97,516,104,[[516,97,516,100,"row"],[516,103,516,104,[3,7]]]],[516,106,516,117,[[516,106,516,112,"column"],[516,115,516,116,[3,8]]]]]]]]]]]]]]]]],[517,32,524,4,[0,[[517,32,517,53,[2,["Review","Test"],"whenFixed"]],[517,54,524,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na r = { r | bar = 2, baz = 3, foo = 1 }\n"]]]]]]]]]]]]]]]]]]]],[526,11,541,50,[1,"<|",1,[526,11,526,62,[0,[[526,11,526,15,[2,[],"test"]],[526,16,526,62,[5,"is ambiguous with record updates not sorting"]]]]],[527,13,541,50,[18,[[[527,14,527,16,[1]]],[528,17,541,50,[1,"|>",0,[528,17,540,26,[1,"|>",0,[528,17,535,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na r = { r | baz = 3, bar = 2, foo = 1 }\n"]],[536,24,540,26,[0,[[536,24,536,39,[2,["Review","Test"],"run"]],[537,25,540,26,[7,[537,26,539,36,[1,"|>",0,[537,26,538,57,[1,"|>",0,[537,26,537,34,[2,[],"defaults"]],[538,32,538,57,[2,[],"doNotSortAmbiguousRecords"]]]],[539,32,539,36,[2,[],"rule"]]]]]]]]]]],[541,24,541,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[542,11,566,26,[1,"<|",1,[542,11,542,75,[0,[[542,11,542,15,[2,[],"test"]],[542,16,542,75,[5,"patterns do not match any when all fields must be present"]]]]],[543,13,566,26,[18,[[[543,14,543,16,[1]]],[544,17,566,26,[1,"|>",0,[544,17,553,55,[1,"|>",0,[544,17,552,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { baz : Int, bar : Int } -> Bool\na _ = True\n"]],[553,24,553,55,[0,[[553,24,553,39,[2,["Review","Test"],"run"]],[553,40,553,55,[7,[553,41,553,54,[0,[[553,41,553,45,[2,[],"rule"]],[553,46,553,54,[2,[],"defaults"]]]]]]]]]]]],[554,24,566,26,[0,[[554,24,554,48,[2,["Review","Test"],"expectErrors"]],[555,25,566,26,[9,[[555,27,565,4,[1,"|>",0,[555,27,556,120,[1,"|>",0,[555,27,555,40,[2,[],"unsortedError"]],[556,32,556,120,[0,[[556,32,556,53,[2,["Review","Test"],"atExactly"]],[556,54,556,120,[8,[[556,56,556,87,[[556,56,556,61,"start"],[556,64,556,87,[8,[[556,66,556,73,[[556,66,556,69,"row"],[556,72,556,73,[3,7]]]],[556,75,556,86,[[556,75,556,81,"column"],[556,84,556,85,[3,5]]]]]]]]],[556,89,556,119,[[556,89,556,92,"end"],[556,95,556,118,[8,[[556,97,556,104,[[556,97,556,100,"row"],[556,103,556,104,[3,7]]]],[556,106,556,117,[[556,106,556,112,"column"],[556,115,556,116,[3,6]]]]]]]]]]]]]]]]],[557,32,565,4,[0,[[557,32,557,53,[2,["Review","Test"],"whenFixed"]],[557,54,565,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { bar : Int , baz : Int} -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[567,11,591,26,[1,"<|",1,[567,11,567,64,[0,[[567,11,567,15,[2,[],"test"]],[567,16,567,64,[5,"patterns match when all fields must be present"]]]]],[568,13,591,26,[18,[[[568,14,568,16,[1]]],[569,17,591,26,[1,"|>",0,[569,17,578,55,[1,"|>",0,[569,17,577,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { bar : Int, foo : Int, baz : Int } -> Bool\na _ = True\n"]],[578,24,578,55,[0,[[578,24,578,39,[2,["Review","Test"],"run"]],[578,40,578,55,[7,[578,41,578,54,[0,[[578,41,578,45,[2,[],"rule"]],[578,46,578,54,[2,[],"defaults"]]]]]]]]]]]],[579,24,591,26,[0,[[579,24,579,48,[2,["Review","Test"],"expectErrors"]],[580,25,591,26,[9,[[580,27,590,4,[1,"|>",0,[580,27,581,120,[1,"|>",0,[580,27,580,40,[2,[],"unsortedError"]],[581,32,581,120,[0,[[581,32,581,53,[2,["Review","Test"],"atExactly"]],[581,54,581,120,[8,[[581,56,581,87,[[581,56,581,61,"start"],[581,64,581,87,[8,[[581,66,581,73,[[581,66,581,69,"row"],[581,72,581,73,[3,7]]]],[581,75,581,86,[[581,75,581,81,"column"],[581,84,581,85,[3,5]]]]]]]]],[581,89,581,119,[[581,89,581,92,"end"],[581,95,581,118,[8,[[581,97,581,104,[[581,97,581,100,"row"],[581,103,581,104,[3,7]]]],[581,106,581,117,[[581,106,581,112,"column"],[581,115,581,116,[3,6]]]]]]]]]]]]]]]]],[582,32,590,4,[0,[[582,32,582,53,[2,["Review","Test"],"whenFixed"]],[582,54,590,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { foo : Int, baz : Int , bar : Int} -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[592,11,616,26,[1,"<|",1,[592,11,592,51,[0,[[592,11,592,15,[2,[],"test"]],[592,16,592,51,[5,"is ambiguous with generic records"]]]]],[593,13,616,26,[18,[[[593,14,593,16,[1]]],[594,17,616,26,[1,"|>",0,[594,17,603,55,[1,"|>",0,[594,17,602,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { r | baz : Int, bar : Int, foo : Int } -> Bool\na _ = True\n"]],[603,24,603,55,[0,[[603,24,603,39,[2,["Review","Test"],"run"]],[603,40,603,55,[7,[603,41,603,54,[0,[[603,41,603,45,[2,[],"rule"]],[603,46,603,54,[2,[],"defaults"]]]]]]]]]]]],[604,24,616,26,[0,[[604,24,604,48,[2,["Review","Test"],"expectErrors"]],[605,25,616,26,[9,[[605,27,615,4,[1,"|>",0,[605,27,606,120,[1,"|>",0,[605,27,605,40,[2,[],"unsortedError"]],[606,32,606,120,[0,[[606,32,606,53,[2,["Review","Test"],"atExactly"]],[606,54,606,120,[8,[[606,56,606,87,[[606,56,606,61,"start"],[606,64,606,87,[8,[[606,66,606,73,[[606,66,606,69,"row"],[606,72,606,73,[3,7]]]],[606,75,606,86,[[606,75,606,81,"column"],[606,84,606,85,[3,5]]]]]]]]],[606,89,606,119,[[606,89,606,92,"end"],[606,95,606,118,[8,[[606,97,606,104,[[606,97,606,100,"row"],[606,103,606,104,[3,7]]]],[606,106,606,117,[[606,106,606,112,"column"],[606,115,606,116,[3,6]]]]]]]]]]]]]]]]],[607,32,615,4,[0,[[607,32,607,53,[2,["Review","Test"],"whenFixed"]],[607,54,615,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { r | bar : Int, baz : Int, foo : Int } -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[617,11,633,50,[1,"<|",1,[617,11,617,63,[0,[[617,11,617,15,[2,[],"test"]],[617,16,617,63,[5,"is ambiguous with generic records not sorting"]]]]],[618,13,633,50,[18,[[[618,14,618,16,[1]]],[619,17,633,50,[1,"|>",0,[619,17,632,26,[1,"|>",0,[619,17,627,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { r | baz : Int, bar : Int, foo : Int } -> Bool\na _ = True\n"]],[628,24,632,26,[0,[[628,24,628,39,[2,["Review","Test"],"run"]],[629,25,632,26,[7,[629,26,631,36,[1,"|>",0,[629,26,630,57,[1,"|>",0,[629,26,629,34,[2,[],"defaults"]],[630,32,630,57,[2,[],"doNotSortAmbiguousRecords"]]]],[631,32,631,36,[2,[],"rule"]]]]]]]]]]],[633,24,633,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[637,1,842,10,[0,[[0],[1,[637,1,637,44,[[637,1,637,37,"disambiguatesByKnownFunctionArgTypes"],[637,40,637,44,[1,[637,40,637,44,[[],"Test"]],[]]]]]],[638,1,842,10,[[638,1,638,37,"disambiguatesByKnownFunctionArgTypes"],[],[639,5,842,10,[0,[[639,5,639,13,[2,[],"describe"]],[639,14,639,57,[5,"disambiguates by known function arg types"]],[640,9,842,10,[9,[[640,11,668,26,[1,"<|",1,[640,11,640,68,[0,[[640,11,640,15,[2,[],"test"]],[640,16,640,68,[5,"possible because of type annotation in same module"]]]]],[641,13,668,26,[18,[[[641,14,641,16,[1]]],[642,17,668,26,[1,"|>",0,[642,17,653,55,[1,"|>",0,[642,17,652,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo { bar = 2, foo = 1, baz = 3 }\n"]],[653,24,653,55,[0,[[653,24,653,39,[2,["Review","Test"],"run"]],[653,40,653,55,[7,[653,41,653,54,[0,[[653,41,653,45,[2,[],"rule"]],[653,46,653,54,[2,[],"defaults"]]]]]]]]]]]],[654,24,668,26,[0,[[654,24,654,48,[2,["Review","Test"],"expectErrors"]],[655,25,668,26,[9,[[655,27,667,4,[1,"|>",0,[655,27,656,124,[1,"|>",0,[655,27,655,40,[2,[],"unsortedError"]],[656,32,656,124,[0,[[656,32,656,53,[2,["Review","Test"],"atExactly"]],[656,54,656,124,[8,[[656,56,656,89,[[656,56,656,61,"start"],[656,64,656,89,[8,[[656,66,656,74,[[656,66,656,69,"row"],[656,72,656,74,[3,10]]]],[656,76,656,88,[[656,76,656,82,"column"],[656,85,656,87,[3,12]]]]]]]]],[656,91,656,123,[[656,91,656,94,"end"],[656,97,656,122,[8,[[656,99,656,107,[[656,99,656,102,"row"],[656,105,656,107,[3,10]]]],[656,109,656,121,[[656,109,656,115,"column"],[656,118,656,120,[3,13]]]]]]]]]]]]]]]]],[657,32,667,4,[0,[[657,32,657,53,[2,["Review","Test"],"whenFixed"]],[657,54,667,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[669,11,704,26,[1,"<|",1,[669,11,669,69,[0,[[669,11,669,15,[2,[],"test"]],[669,16,669,69,[5,"possible because of type annotation in other module"]]]]],[670,13,704,26,[18,[[[670,14,670,16,[1]]],[671,17,704,26,[1,"|>",0,[671,17,688,64,[1,"|>",0,[671,17,687,18,[9,[[671,19,677,4,[5,"module B exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[678,19,686,4,[5,"module A exposing (..)\n\nimport B exposing (foo)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = foo { bar = 2, foo = 1, baz = 3 }\n"]]]]],[688,24,688,64,[0,[[688,24,688,48,[2,["Review","Test"],"runOnModules"]],[688,49,688,64,[7,[688,50,688,63,[0,[[688,50,688,54,[2,[],"rule"]],[688,55,688,63,[2,[],"defaults"]]]]]]]]]]]],[689,24,704,26,[0,[[689,24,689,58,[2,["Review","Test"],"expectErrorsForModules"]],[690,25,704,26,[9,[[690,27,703,28,[6,[[690,29,690,32,[5,"A"]],[691,29,702,30,[9,[[691,31,701,4,[1,"|>",0,[691,31,692,126,[1,"|>",0,[691,31,691,44,[2,[],"unsortedError"]],[692,36,692,126,[0,[[692,36,692,57,[2,["Review","Test"],"atExactly"]],[692,58,692,126,[8,[[692,60,692,92,[[692,60,692,65,"start"],[692,68,692,92,[8,[[692,70,692,77,[[692,70,692,73,"row"],[692,76,692,77,[3,8]]]],[692,79,692,91,[[692,79,692,85,"column"],[692,88,692,90,[3,12]]]]]]]]],[692,94,692,125,[[692,94,692,97,"end"],[692,100,692,124,[8,[[692,102,692,109,[[692,102,692,105,"row"],[692,108,692,109,[3,8]]]],[692,111,692,123,[[692,111,692,117,"column"],[692,120,692,122,[3,13]]]]]]]]]]]]]]]]],[693,36,701,4,[0,[[693,36,693,57,[2,["Review","Test"],"whenFixed"]],[693,58,701,4,[5,"module A exposing (..)\n\nimport B exposing (foo)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[705,11,729,50,[1,"<|",1,[705,11,705,51,[0,[[705,11,705,15,[2,[],"test"]],[705,16,705,51,[5,"does not keep unexposed functions"]]]]],[706,13,729,50,[18,[[[706,14,706,16,[1]]],[707,17,729,50,[1,"|>",0,[707,17,728,26,[1,"|>",0,[707,17,723,18,[9,[[707,19,713,4,[5,"module B exposing (A)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[714,19,722,4,[5,"module A exposing (..)\n\nimport B\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = B.foo { bar = 2, foo = 1, baz = 3 }\n"]]]]],[724,24,728,26,[0,[[724,24,724,48,[2,["Review","Test"],"runOnModules"]],[725,25,728,26,[7,[725,26,727,36,[1,"|>",0,[725,26,726,57,[1,"|>",0,[725,26,725,34,[2,[],"defaults"]],[726,32,726,57,[2,[],"doNotSortAmbiguousRecords"]]]],[727,32,727,36,[2,[],"rule"]]]]]]]]]]],[729,24,729,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[730,11,750,50,[1,"<|",1,[730,11,730,74,[0,[[730,11,730,15,[2,[],"test"]],[730,16,730,74,[5,"does understand unexposed alias from an exposed function"]]]]],[731,13,750,50,[18,[[[731,14,731,16,[1]]],[732,17,750,50,[1,"|>",0,[732,17,749,64,[1,"|>",0,[732,17,748,18,[9,[[732,19,738,4,[5,"module B exposing (foo)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[739,19,747,4,[5,"module A exposing (..)\n\nimport B exposing (foo)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]],[749,24,749,64,[0,[[749,24,749,48,[2,["Review","Test"],"runOnModules"]],[749,49,749,64,[7,[749,50,749,63,[0,[[749,50,749,54,[2,[],"rule"]],[749,55,749,63,[2,[],"defaults"]]]]]]]]]]]],[750,24,750,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[751,11,781,26,[1,"<|",1,[751,11,751,76,[0,[[751,11,751,15,[2,[],"test"]],[751,16,751,76,[5,"possible because of type annotation in custom type pattern"]]]]],[752,13,781,26,[18,[[[752,14,752,16,[1]]],[753,17,781,26,[1,"|>",0,[753,17,765,55,[1,"|>",0,[753,17,764,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom = Custom A\n\nfunc : Custom -> Bool\nfunc c =\n    case c of\n        Custom { bar, foo, baz } -> True\n"]],[765,24,765,55,[0,[[765,24,765,39,[2,["Review","Test"],"run"]],[765,40,765,55,[7,[765,41,765,54,[0,[[765,41,765,45,[2,[],"rule"]],[765,46,765,54,[2,[],"defaults"]]]]]]]]]]]],[766,24,781,26,[0,[[766,24,766,48,[2,["Review","Test"],"expectErrors"]],[767,25,781,26,[9,[[767,27,780,4,[1,"|>",0,[767,27,768,124,[1,"|>",0,[767,27,767,40,[2,[],"unsortedError"]],[768,32,768,124,[0,[[768,32,768,53,[2,["Review","Test"],"atExactly"]],[768,54,768,124,[8,[[768,56,768,89,[[768,56,768,61,"start"],[768,64,768,89,[8,[[768,66,768,74,[[768,66,768,69,"row"],[768,72,768,74,[3,11]]]],[768,76,768,88,[[768,76,768,82,"column"],[768,85,768,87,[3,16]]]]]]]]],[768,91,768,123,[[768,91,768,94,"end"],[768,97,768,122,[8,[[768,99,768,107,[[768,99,768,102,"row"],[768,105,768,107,[3,11]]]],[768,109,768,121,[[768,109,768,115,"column"],[768,118,768,120,[3,17]]]]]]]]]]]]]]]]],[769,32,780,4,[0,[[769,32,769,53,[2,["Review","Test"],"whenFixed"]],[769,54,780,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom = Custom A\n\nfunc : Custom -> Bool\nfunc c =\n    case c of\n        Custom { foo, bar, baz } -> True\n"]]]]]]]]]]]]]]]]]]]],[782,11,801,50,[1,"<|",1,[782,11,782,77,[0,[[782,11,782,15,[2,[],"test"]],[782,16,782,77,[5,"does understand unexposed alias from an exposed constructor"]]]]],[783,13,801,50,[18,[[[783,14,783,16,[1]]],[784,17,801,50,[1,"|>",0,[784,17,800,64,[1,"|>",0,[784,17,799,18,[9,[[784,19,789,4,[5,"module B exposing (Custom(..))\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype Custom = Custom A\n"]],[790,19,798,4,[5,"module A exposing (..)\n\nimport B exposing (Custom(..))\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = Custom { foo = 1, bar = 2, baz = 3 }\n"]]]]],[800,24,800,64,[0,[[800,24,800,48,[2,["Review","Test"],"runOnModules"]],[800,49,800,64,[7,[800,50,800,63,[0,[[800,50,800,54,[2,[],"rule"]],[800,55,800,63,[2,[],"defaults"]]]]]]]]]]]],[801,24,801,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[802,11,821,50,[1,"<|",1,[802,11,802,59,[0,[[802,11,802,15,[2,[],"test"]],[802,16,802,59,[5,"does not understand unexposed constructor"]]]]],[803,13,821,50,[18,[[[803,14,803,16,[1]]],[804,17,821,50,[1,"|>",0,[804,17,820,64,[1,"|>",0,[804,17,819,18,[9,[[804,19,809,4,[5,"module B exposing (A)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype Custom = Custom A\n"]],[810,19,818,4,[5,"module A exposing (..)\n\nimport B\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = B.Custom { bar = 2, baz = 3, foo = 1}\n"]]]]],[820,24,820,64,[0,[[820,24,820,48,[2,["Review","Test"],"runOnModules"]],[820,49,820,64,[7,[820,50,820,63,[0,[[820,50,820,54,[2,[],"rule"]],[820,55,820,63,[2,[],"defaults"]]]]]]]]]]]],[821,24,821,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[822,11,841,50,[1,"<|",1,[822,11,822,61,[0,[[822,11,822,15,[2,[],"test"]],[822,16,822,61,[5,"does understand imported record constructor"]]]]],[823,13,841,50,[18,[[[823,14,823,16,[1]]],[824,17,841,50,[1,"|>",0,[824,17,840,64,[1,"|>",0,[824,17,839,18,[9,[[824,19,829,4,[5,"module B exposing (A)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int } }\n\ntype Custom = Custom A\n"]],[830,19,838,4,[5,"module A exposing (..)\n\nimport B exposing (A)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = A { foo = 1, bar = 2, baz = 3}\n"]]]]],[840,24,840,64,[0,[[840,24,840,48,[2,["Review","Test"],"runOnModules"]],[840,49,840,64,[7,[840,50,840,63,[0,[[840,50,840,54,[2,[],"rule"]],[840,55,840,63,[2,[],"defaults"]]]]]]]]]]]],[841,24,841,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[845,1,948,10,[0,[[0],[1,[845,1,845,37,[[845,1,845,30,"disambiguatesByTypeAnnotation"],[845,33,845,37,[1,[845,33,845,37,[[],"Test"]],[]]]]]],[846,1,948,10,[[846,1,846,30,"disambiguatesByTypeAnnotation"],[],[847,5,948,10,[0,[[847,5,847,13,[2,[],"describe"]],[847,14,847,51,[5,"disambiguates using type annotation"]],[848,9,948,10,[9,[[848,11,872,26,[1,"<|",1,[848,11,848,71,[0,[[848,11,848,15,[2,[],"test"]],[848,16,848,71,[5,"disambiguation is possible because of type annotation"]]]]],[849,13,872,26,[18,[[[849,14,849,16,[1]]],[850,17,872,26,[1,"|>",0,[850,17,859,55,[1,"|>",0,[850,17,858,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : A\na = { bar = 2, foo = 1, baz = 3 }\n"]],[859,24,859,55,[0,[[859,24,859,39,[2,["Review","Test"],"run"]],[859,40,859,55,[7,[859,41,859,54,[0,[[859,41,859,45,[2,[],"rule"]],[859,46,859,54,[2,[],"defaults"]]]]]]]]]]]],[860,24,872,26,[0,[[860,24,860,48,[2,["Review","Test"],"expectErrors"]],[861,25,872,26,[9,[[861,27,871,4,[1,"|>",0,[861,27,862,120,[1,"|>",0,[861,27,861,40,[2,[],"unsortedError"]],[862,32,862,120,[0,[[862,32,862,53,[2,["Review","Test"],"atExactly"]],[862,54,862,120,[8,[[862,56,862,87,[[862,56,862,61,"start"],[862,64,862,87,[8,[[862,66,862,73,[[862,66,862,69,"row"],[862,72,862,73,[3,8]]]],[862,75,862,86,[[862,75,862,81,"column"],[862,84,862,85,[3,5]]]]]]]]],[862,89,862,119,[[862,89,862,92,"end"],[862,95,862,118,[8,[[862,97,862,104,[[862,97,862,100,"row"],[862,103,862,104,[3,8]]]],[862,106,862,117,[[862,106,862,112,"column"],[862,115,862,116,[3,6]]]]]]]]]]]]]]]]],[863,32,871,4,[0,[[863,32,863,53,[2,["Review","Test"],"whenFixed"]],[863,54,871,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : A\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[873,11,897,26,[1,"<|",1,[873,11,873,86,[0,[[873,11,873,15,[2,[],"test"]],[873,16,873,86,[5,"disambiguation is possible because of type annotation with type vars"]]]]],[874,13,897,26,[18,[[[874,14,874,16,[1]]],[875,17,897,26,[1,"|>",0,[875,17,884,55,[1,"|>",0,[875,17,883,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\n\ntype alias B a = { bar : Int, foo : a, baz : Int }\n\na : A Int\na = { bar = 2, foo = 1, baz = 3 }\n"]],[884,24,884,55,[0,[[884,24,884,39,[2,["Review","Test"],"run"]],[884,40,884,55,[7,[884,41,884,54,[0,[[884,41,884,45,[2,[],"rule"]],[884,46,884,54,[2,[],"defaults"]]]]]]]]]]]],[885,24,897,26,[0,[[885,24,885,48,[2,["Review","Test"],"expectErrors"]],[886,25,897,26,[9,[[886,27,896,4,[1,"|>",0,[886,27,887,120,[1,"|>",0,[886,27,886,40,[2,[],"unsortedError"]],[887,32,887,120,[0,[[887,32,887,53,[2,["Review","Test"],"atExactly"]],[887,54,887,120,[8,[[887,56,887,87,[[887,56,887,61,"start"],[887,64,887,87,[8,[[887,66,887,73,[[887,66,887,69,"row"],[887,72,887,73,[3,8]]]],[887,75,887,86,[[887,75,887,81,"column"],[887,84,887,85,[3,5]]]]]]]]],[887,89,887,119,[[887,89,887,92,"end"],[887,95,887,118,[8,[[887,97,887,104,[[887,97,887,100,"row"],[887,103,887,104,[3,8]]]],[887,106,887,117,[[887,106,887,112,"column"],[887,115,887,116,[3,6]]]]]]]]]]]]]]]]],[888,32,896,4,[0,[[888,32,888,53,[2,["Review","Test"],"whenFixed"]],[888,54,896,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\n\ntype alias B a = { bar : Int, foo : a, baz : Int }\n\na : A Int\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[898,11,922,26,[1,"<|",1,[898,11,898,79,[0,[[898,11,898,15,[2,[],"test"]],[898,16,898,79,[5,"disambiguation is possible because of complex type annotation"]]]]],[899,13,922,26,[18,[[[899,14,899,16,[1]]],[900,17,922,26,[1,"|>",0,[900,17,909,55,[1,"|>",0,[900,17,908,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> String -> ( Int, String, List A )\na i s = ( i, s, [ { bar = 2, foo = 1, baz = 3 } ] )\n"]],[909,24,909,55,[0,[[909,24,909,39,[2,["Review","Test"],"run"]],[909,40,909,55,[7,[909,41,909,54,[0,[[909,41,909,45,[2,[],"rule"]],[909,46,909,54,[2,[],"defaults"]]]]]]]]]]]],[910,24,922,26,[0,[[910,24,910,48,[2,["Review","Test"],"expectErrors"]],[911,25,922,26,[9,[[911,27,921,4,[1,"|>",0,[911,27,912,122,[1,"|>",0,[911,27,911,40,[2,[],"unsortedError"]],[912,32,912,122,[0,[[912,32,912,53,[2,["Review","Test"],"atExactly"]],[912,54,912,122,[8,[[912,56,912,88,[[912,56,912,61,"start"],[912,64,912,88,[8,[[912,66,912,73,[[912,66,912,69,"row"],[912,72,912,73,[3,8]]]],[912,75,912,87,[[912,75,912,81,"column"],[912,84,912,86,[3,19]]]]]]]]],[912,90,912,121,[[912,90,912,93,"end"],[912,96,912,120,[8,[[912,98,912,105,[[912,98,912,101,"row"],[912,104,912,105,[3,8]]]],[912,107,912,119,[[912,107,912,113,"column"],[912,116,912,118,[3,20]]]]]]]]]]]]]]]]],[913,32,921,4,[0,[[913,32,913,53,[2,["Review","Test"],"whenFixed"]],[913,54,921,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> String -> ( Int, String, List A )\na i s = ( i, s, [ { foo = 1, bar = 2, baz = 3 } ] )\n"]]]]]]]]]]]]]]]]]]]],[923,11,947,26,[1,"<|",1,[923,11,923,82,[0,[[923,11,923,15,[2,[],"test"]],[923,16,923,82,[5,"disambiguation of pattern is possible because of type annotation"]]]]],[924,13,947,26,[18,[[[924,14,924,16,[1]]],[925,17,947,26,[1,"|>",0,[925,17,934,55,[1,"|>",0,[925,17,933,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> A -> Int -> Bool\na i1 { bar, foo, baz } i2 = True\n"]],[934,24,934,55,[0,[[934,24,934,39,[2,["Review","Test"],"run"]],[934,40,934,55,[7,[934,41,934,54,[0,[[934,41,934,45,[2,[],"rule"]],[934,46,934,54,[2,[],"defaults"]]]]]]]]]]]],[935,24,947,26,[0,[[935,24,935,48,[2,["Review","Test"],"expectErrors"]],[936,25,947,26,[9,[[936,27,946,4,[1,"|>",0,[936,27,937,120,[1,"|>",0,[936,27,936,40,[2,[],"unsortedError"]],[937,32,937,120,[0,[[937,32,937,53,[2,["Review","Test"],"atExactly"]],[937,54,937,120,[8,[[937,56,937,87,[[937,56,937,61,"start"],[937,64,937,87,[8,[[937,66,937,73,[[937,66,937,69,"row"],[937,72,937,73,[3,8]]]],[937,75,937,86,[[937,75,937,81,"column"],[937,84,937,85,[3,6]]]]]]]]],[937,89,937,119,[[937,89,937,92,"end"],[937,95,937,118,[8,[[937,97,937,104,[[937,97,937,100,"row"],[937,103,937,104,[3,8]]]],[937,106,937,117,[[937,106,937,112,"column"],[937,115,937,116,[3,7]]]]]]]]]]]]]]]]],[938,32,946,4,[0,[[938,32,938,53,[2,["Review","Test"],"whenFixed"]],[938,54,946,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> A -> Int -> Bool\na i1 { foo, bar, baz } i2 = True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[951,1,1375,10,[0,[[0],[1,[951,1,951,28,[[951,1,951,21,"genericRecordSupport"],[951,24,951,28,[1,[951,24,951,28,[[],"Test"]],[]]]]]],[952,1,1375,10,[[952,1,952,21,"genericRecordSupport"],[],[953,5,1375,10,[0,[[953,5,953,13,[2,[],"describe"]],[953,14,953,31,[5,"generic records"]],[954,9,1375,10,[9,[[954,11,975,26,[1,"<|",1,[954,11,954,43,[0,[[954,11,954,15,[2,[],"test"]],[954,16,954,43,[5,"without additional fields"]]]]],[955,13,975,26,[18,[[[955,14,955,16,[1]]],[956,17,975,26,[1,"|>",0,[956,17,963,55,[1,"|>",0,[956,17,962,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic {}\na = { bar = 2, foo = 1, baz = 3 }\n"]],[963,24,963,55,[0,[[963,24,963,39,[2,["Review","Test"],"run"]],[963,40,963,55,[7,[963,41,963,54,[0,[[963,41,963,45,[2,[],"rule"]],[963,46,963,54,[2,[],"defaults"]]]]]]]]]]]],[964,24,975,26,[0,[[964,24,964,48,[2,["Review","Test"],"expectErrors"]],[965,25,975,26,[9,[[965,27,974,4,[1,"|>",0,[965,27,966,120,[1,"|>",0,[965,27,965,40,[2,[],"unsortedError"]],[966,32,966,120,[0,[[966,32,966,53,[2,["Review","Test"],"atExactly"]],[966,54,966,120,[8,[[966,56,966,87,[[966,56,966,61,"start"],[966,64,966,87,[8,[[966,66,966,73,[[966,66,966,69,"row"],[966,72,966,73,[3,6]]]],[966,75,966,86,[[966,75,966,81,"column"],[966,84,966,85,[3,5]]]]]]]]],[966,89,966,119,[[966,89,966,92,"end"],[966,95,966,118,[8,[[966,97,966,104,[[966,97,966,100,"row"],[966,103,966,104,[3,6]]]],[966,106,966,117,[[966,106,966,112,"column"],[966,115,966,116,[3,6]]]]]]]]]]]]]]]]],[967,32,974,4,[0,[[967,32,967,53,[2,["Review","Test"],"whenFixed"]],[968,33,974,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic {}\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[976,11,995,26,[1,"<|",1,[976,11,976,67,[0,[[976,11,976,15,[2,[],"test"]],[976,16,976,67,[5,"without additional fields without type annotation"]]]]],[977,13,995,26,[18,[[[977,14,977,16,[1]]],[978,17,995,26,[1,"|>",0,[978,17,984,55,[1,"|>",0,[978,17,983,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[984,24,984,55,[0,[[984,24,984,39,[2,["Review","Test"],"run"]],[984,40,984,55,[7,[984,41,984,54,[0,[[984,41,984,45,[2,[],"rule"]],[984,46,984,54,[2,[],"defaults"]]]]]]]]]]]],[985,24,995,26,[0,[[985,24,985,48,[2,["Review","Test"],"expectErrors"]],[986,25,995,26,[9,[[986,27,994,4,[1,"|>",0,[986,27,987,120,[1,"|>",0,[986,27,986,40,[2,[],"unsortedError"]],[987,32,987,120,[0,[[987,32,987,53,[2,["Review","Test"],"atExactly"]],[987,54,987,120,[8,[[987,56,987,87,[[987,56,987,61,"start"],[987,64,987,87,[8,[[987,66,987,73,[[987,66,987,69,"row"],[987,72,987,73,[3,5]]]],[987,75,987,86,[[987,75,987,81,"column"],[987,84,987,85,[3,5]]]]]]]]],[987,89,987,119,[[987,89,987,92,"end"],[987,95,987,118,[8,[[987,97,987,104,[[987,97,987,100,"row"],[987,103,987,104,[3,5]]]],[987,106,987,117,[[987,106,987,112,"column"],[987,115,987,116,[3,6]]]]]]]]]]]]]]]]],[988,32,994,4,[0,[[988,32,988,53,[2,["Review","Test"],"whenFixed"]],[989,33,994,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[996,11,1017,26,[1,"<|",1,[996,11,996,40,[0,[[996,11,996,15,[2,[],"test"]],[996,16,996,40,[5,"with additional fields"]]]]],[997,13,1017,26,[18,[[[997,14,997,16,[1]]],[998,17,1017,26,[1,"|>",0,[998,17,1005,55,[1,"|>",0,[998,17,1004,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { x = 0, bar = 2, z = 3, y = 2, foo = 1, baz = 3 }\n"]],[1005,24,1005,55,[0,[[1005,24,1005,39,[2,["Review","Test"],"run"]],[1005,40,1005,55,[7,[1005,41,1005,54,[0,[[1005,41,1005,45,[2,[],"rule"]],[1005,46,1005,54,[2,[],"defaults"]]]]]]]]]]]],[1006,24,1017,26,[0,[[1006,24,1006,48,[2,["Review","Test"],"expectErrors"]],[1007,25,1017,26,[9,[[1007,27,1016,4,[1,"|>",0,[1007,27,1008,120,[1,"|>",0,[1007,27,1007,40,[2,[],"unsortedError"]],[1008,32,1008,120,[0,[[1008,32,1008,53,[2,["Review","Test"],"atExactly"]],[1008,54,1008,120,[8,[[1008,56,1008,87,[[1008,56,1008,61,"start"],[1008,64,1008,87,[8,[[1008,66,1008,73,[[1008,66,1008,69,"row"],[1008,72,1008,73,[3,6]]]],[1008,75,1008,86,[[1008,75,1008,81,"column"],[1008,84,1008,85,[3,5]]]]]]]]],[1008,89,1008,119,[[1008,89,1008,92,"end"],[1008,95,1008,118,[8,[[1008,97,1008,104,[[1008,97,1008,100,"row"],[1008,103,1008,104,[3,6]]]],[1008,106,1008,117,[[1008,106,1008,112,"column"],[1008,115,1008,116,[3,6]]]]]]]]]]]]]]]]],[1009,32,1016,4,[0,[[1009,32,1009,53,[2,["Review","Test"],"whenFixed"]],[1010,33,1016,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { x = 0, y = 2, z = 3, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1018,11,1043,26,[1,"<|",1,[1018,11,1018,45,[0,[[1018,11,1018,15,[2,[],"test"]],[1018,16,1018,45,[5,"with additional fields last"]]]]],[1019,13,1043,26,[18,[[[1019,14,1019,16,[1]]],[1020,17,1043,26,[1,"|>",0,[1020,17,1031,26,[1,"|>",0,[1020,17,1026,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { x = 0, bar = 2, z = 3, y = 2, foo = 1, baz = 3 }\n"]],[1027,24,1031,26,[0,[[1027,24,1027,39,[2,["Review","Test"],"run"]],[1028,25,1031,26,[7,[1028,26,1030,36,[1,"|>",0,[1028,26,1029,53,[1,"|>",0,[1028,26,1028,34,[2,[],"defaults"]],[1029,32,1029,53,[2,[],"sortGenericFieldsLast"]]]],[1030,32,1030,36,[2,[],"rule"]]]]]]]]]]],[1032,24,1043,26,[0,[[1032,24,1032,48,[2,["Review","Test"],"expectErrors"]],[1033,25,1043,26,[9,[[1033,27,1042,4,[1,"|>",0,[1033,27,1034,120,[1,"|>",0,[1033,27,1033,40,[2,[],"unsortedError"]],[1034,32,1034,120,[0,[[1034,32,1034,53,[2,["Review","Test"],"atExactly"]],[1034,54,1034,120,[8,[[1034,56,1034,87,[[1034,56,1034,61,"start"],[1034,64,1034,87,[8,[[1034,66,1034,73,[[1034,66,1034,69,"row"],[1034,72,1034,73,[3,6]]]],[1034,75,1034,86,[[1034,75,1034,81,"column"],[1034,84,1034,85,[3,5]]]]]]]]],[1034,89,1034,119,[[1034,89,1034,92,"end"],[1034,95,1034,118,[8,[[1034,97,1034,104,[[1034,97,1034,100,"row"],[1034,103,1034,104,[3,6]]]],[1034,106,1034,117,[[1034,106,1034,112,"column"],[1034,115,1034,116,[3,6]]]]]]]]]]]]]]]]],[1035,32,1042,4,[0,[[1035,32,1035,53,[2,["Review","Test"],"whenFixed"]],[1036,33,1042,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { foo = 1, bar = 2, baz = 3 , x = 0, y = 2, z = 3}\n"]]]]]]]]]]]]]]]]]]]],[1044,11,1063,26,[1,"<|",1,[1044,11,1044,63,[0,[[1044,11,1044,15,[2,[],"test"]],[1044,16,1044,63,[5,"with additional fields without type signature"]]]]],[1045,13,1063,26,[18,[[[1045,14,1045,16,[1]]],[1046,17,1063,26,[1,"|>",0,[1046,17,1052,55,[1,"|>",0,[1046,17,1051,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { x = 0, bar = 2, z = 3, y = 2, foo = 1, baz = 3 }\n"]],[1052,24,1052,55,[0,[[1052,24,1052,39,[2,["Review","Test"],"run"]],[1052,40,1052,55,[7,[1052,41,1052,54,[0,[[1052,41,1052,45,[2,[],"rule"]],[1052,46,1052,54,[2,[],"defaults"]]]]]]]]]]]],[1053,24,1063,26,[0,[[1053,24,1053,48,[2,["Review","Test"],"expectErrors"]],[1054,25,1063,26,[9,[[1054,27,1062,4,[1,"|>",0,[1054,27,1055,120,[1,"|>",0,[1054,27,1054,40,[2,[],"unsortedError"]],[1055,32,1055,120,[0,[[1055,32,1055,53,[2,["Review","Test"],"atExactly"]],[1055,54,1055,120,[8,[[1055,56,1055,87,[[1055,56,1055,61,"start"],[1055,64,1055,87,[8,[[1055,66,1055,73,[[1055,66,1055,69,"row"],[1055,72,1055,73,[3,5]]]],[1055,75,1055,86,[[1055,75,1055,81,"column"],[1055,84,1055,85,[3,5]]]]]]]]],[1055,89,1055,119,[[1055,89,1055,92,"end"],[1055,95,1055,118,[8,[[1055,97,1055,104,[[1055,97,1055,100,"row"],[1055,103,1055,104,[3,5]]]],[1055,106,1055,117,[[1055,106,1055,112,"column"],[1055,115,1055,116,[3,6]]]]]]]]]]]]]]]]],[1056,32,1062,4,[0,[[1056,32,1056,53,[2,["Review","Test"],"whenFixed"]],[1057,33,1062,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { x = 0, y = 2, z = 3, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1064,11,1087,26,[1,"<|",1,[1064,11,1064,66,[0,[[1064,11,1064,15,[2,[],"test"]],[1064,16,1064,66,[5,"with additional fields that have canonical order"]]]]],[1065,13,1087,26,[18,[[[1065,14,1065,16,[1]]],[1066,17,1087,26,[1,"|>",0,[1066,17,1074,55,[1,"|>",0,[1066,17,1073,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1074,24,1074,55,[0,[[1074,24,1074,39,[2,["Review","Test"],"run"]],[1074,40,1074,55,[7,[1074,41,1074,54,[0,[[1074,41,1074,45,[2,[],"rule"]],[1074,46,1074,54,[2,[],"defaults"]]]]]]]]]]]],[1075,24,1087,26,[0,[[1075,24,1075,48,[2,["Review","Test"],"expectErrors"]],[1076,25,1087,26,[9,[[1076,27,1086,4,[1,"|>",0,[1076,27,1077,120,[1,"|>",0,[1076,27,1076,40,[2,[],"unsortedError"]],[1077,32,1077,120,[0,[[1077,32,1077,53,[2,["Review","Test"],"atExactly"]],[1077,54,1077,120,[8,[[1077,56,1077,87,[[1077,56,1077,61,"start"],[1077,64,1077,87,[8,[[1077,66,1077,73,[[1077,66,1077,69,"row"],[1077,72,1077,73,[3,7]]]],[1077,75,1077,86,[[1077,75,1077,81,"column"],[1077,84,1077,85,[3,5]]]]]]]]],[1077,89,1077,119,[[1077,89,1077,92,"end"],[1077,95,1077,118,[8,[[1077,97,1077,104,[[1077,97,1077,100,"row"],[1077,103,1077,104,[3,7]]]],[1077,106,1077,117,[[1077,106,1077,112,"column"],[1077,115,1077,116,[3,6]]]]]]]]]]]]]]]]],[1078,32,1086,4,[0,[[1078,32,1078,53,[2,["Review","Test"],"whenFixed"]],[1079,33,1086,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1088,11,1115,26,[1,"<|",1,[1088,11,1088,71,[0,[[1088,11,1088,15,[2,[],"test"]],[1088,16,1088,71,[5,"with additional fields that have canonical order last"]]]]],[1089,13,1115,26,[18,[[[1089,14,1089,16,[1]]],[1090,17,1115,26,[1,"|>",0,[1090,17,1102,26,[1,"|>",0,[1090,17,1097,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1098,24,1102,26,[0,[[1098,24,1098,39,[2,["Review","Test"],"run"]],[1099,25,1102,26,[7,[1099,26,1101,36,[1,"|>",0,[1099,26,1100,53,[1,"|>",0,[1099,26,1099,34,[2,[],"defaults"]],[1100,32,1100,53,[2,[],"sortGenericFieldsLast"]]]],[1101,32,1101,36,[2,[],"rule"]]]]]]]]]]],[1103,24,1115,26,[0,[[1103,24,1103,48,[2,["Review","Test"],"expectErrors"]],[1104,25,1115,26,[9,[[1104,27,1114,4,[1,"|>",0,[1104,27,1105,120,[1,"|>",0,[1104,27,1104,40,[2,[],"unsortedError"]],[1105,32,1105,120,[0,[[1105,32,1105,53,[2,["Review","Test"],"atExactly"]],[1105,54,1105,120,[8,[[1105,56,1105,87,[[1105,56,1105,61,"start"],[1105,64,1105,87,[8,[[1105,66,1105,73,[[1105,66,1105,69,"row"],[1105,72,1105,73,[3,7]]]],[1105,75,1105,86,[[1105,75,1105,81,"column"],[1105,84,1105,85,[3,5]]]]]]]]],[1105,89,1105,119,[[1105,89,1105,92,"end"],[1105,95,1105,118,[8,[[1105,97,1105,104,[[1105,97,1105,100,"row"],[1105,103,1105,104,[3,7]]]],[1105,106,1105,117,[[1105,106,1105,112,"column"],[1105,115,1105,116,[3,6]]]]]]]]]]]]]]]]],[1106,32,1114,4,[0,[[1106,32,1106,53,[2,["Review","Test"],"whenFixed"]],[1107,33,1114,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { foo = 1, bar = 2, baz = 3 , yi = 3, er = 2, san = 0}\n"]]]]]]]]]]]]]]]]]]]],[1116,11,1137,26,[1,"<|",1,[1116,11,1116,85,[0,[[1116,11,1116,15,[2,[],"test"]],[1116,16,1116,85,[5,"with additional fields that have canonical order without annotation"]]]]],[1117,13,1137,26,[18,[[[1117,14,1117,16,[1]]],[1118,17,1137,26,[1,"|>",0,[1118,17,1125,55,[1,"|>",0,[1118,17,1124,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1125,24,1125,55,[0,[[1125,24,1125,39,[2,["Review","Test"],"run"]],[1125,40,1125,55,[7,[1125,41,1125,54,[0,[[1125,41,1125,45,[2,[],"rule"]],[1125,46,1125,54,[2,[],"defaults"]]]]]]]]]]]],[1126,24,1137,26,[0,[[1126,24,1126,48,[2,["Review","Test"],"expectErrors"]],[1127,25,1137,26,[9,[[1127,27,1136,4,[1,"|>",0,[1127,27,1128,120,[1,"|>",0,[1127,27,1127,40,[2,[],"unsortedError"]],[1128,32,1128,120,[0,[[1128,32,1128,53,[2,["Review","Test"],"atExactly"]],[1128,54,1128,120,[8,[[1128,56,1128,87,[[1128,56,1128,61,"start"],[1128,64,1128,87,[8,[[1128,66,1128,73,[[1128,66,1128,69,"row"],[1128,72,1128,73,[3,6]]]],[1128,75,1128,86,[[1128,75,1128,81,"column"],[1128,84,1128,85,[3,5]]]]]]]]],[1128,89,1128,119,[[1128,89,1128,92,"end"],[1128,95,1128,118,[8,[[1128,97,1128,104,[[1128,97,1128,100,"row"],[1128,103,1128,104,[3,6]]]],[1128,106,1128,117,[[1128,106,1128,112,"column"],[1128,115,1128,116,[3,6]]]]]]]]]]]]]]]]],[1129,32,1136,4,[0,[[1129,32,1129,53,[2,["Review","Test"],"whenFixed"]],[1130,33,1136,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na = { yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1138,11,1161,26,[1,"<|",1,[1138,11,1138,59,[0,[[1138,11,1138,15,[2,[],"test"]],[1138,16,1138,59,[5,"nested generics that have canonical order"]]]]],[1139,13,1161,26,[18,[[[1139,14,1139,16,[1]]],[1140,17,1161,26,[1,"|>",0,[1140,17,1148,55,[1,"|>",0,[1140,17,1147,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 {})\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1148,24,1148,55,[0,[[1148,24,1148,39,[2,["Review","Test"],"run"]],[1148,40,1148,55,[7,[1148,41,1148,54,[0,[[1148,41,1148,45,[2,[],"rule"]],[1148,46,1148,54,[2,[],"defaults"]]]]]]]]]]]],[1149,24,1161,26,[0,[[1149,24,1149,48,[2,["Review","Test"],"expectErrors"]],[1150,25,1161,26,[9,[[1150,27,1160,4,[1,"|>",0,[1150,27,1151,120,[1,"|>",0,[1150,27,1150,40,[2,[],"unsortedError"]],[1151,32,1151,120,[0,[[1151,32,1151,53,[2,["Review","Test"],"atExactly"]],[1151,54,1151,120,[8,[[1151,56,1151,87,[[1151,56,1151,61,"start"],[1151,64,1151,87,[8,[[1151,66,1151,73,[[1151,66,1151,69,"row"],[1151,72,1151,73,[3,7]]]],[1151,75,1151,86,[[1151,75,1151,81,"column"],[1151,84,1151,85,[3,5]]]]]]]]],[1151,89,1151,119,[[1151,89,1151,92,"end"],[1151,95,1151,118,[8,[[1151,97,1151,104,[[1151,97,1151,100,"row"],[1151,103,1151,104,[3,7]]]],[1151,106,1151,117,[[1151,106,1151,112,"column"],[1151,115,1151,116,[3,6]]]]]]]]]]]]]]]]],[1152,32,1160,4,[0,[[1152,32,1152,53,[2,["Review","Test"],"whenFixed"]],[1153,33,1160,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 {})\na = { yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1162,11,1187,26,[1,"<|",1,[1162,11,1162,83,[0,[[1162,11,1162,15,[2,[],"test"]],[1162,16,1162,83,[5,"nested generics that have canonical order with additional nesting"]]]]],[1163,13,1187,26,[18,[[[1163,14,1163,16,[1]]],[1164,17,1187,26,[1,"|>",0,[1164,17,1173,55,[1,"|>",0,[1164,17,1172,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[1173,24,1173,55,[0,[[1173,24,1173,39,[2,["Review","Test"],"run"]],[1173,40,1173,55,[7,[1173,41,1173,54,[0,[[1173,41,1173,45,[2,[],"rule"]],[1173,46,1173,54,[2,[],"defaults"]]]]]]]]]]]],[1174,24,1187,26,[0,[[1174,24,1174,48,[2,["Review","Test"],"expectErrors"]],[1175,25,1187,26,[9,[[1175,27,1186,4,[1,"|>",0,[1175,27,1176,120,[1,"|>",0,[1175,27,1175,40,[2,[],"unsortedError"]],[1176,32,1176,120,[0,[[1176,32,1176,53,[2,["Review","Test"],"atExactly"]],[1176,54,1176,120,[8,[[1176,56,1176,87,[[1176,56,1176,61,"start"],[1176,64,1176,87,[8,[[1176,66,1176,73,[[1176,66,1176,69,"row"],[1176,72,1176,73,[3,8]]]],[1176,75,1176,86,[[1176,75,1176,81,"column"],[1176,84,1176,85,[3,5]]]]]]]]],[1176,89,1176,119,[[1176,89,1176,92,"end"],[1176,95,1176,118,[8,[[1176,97,1176,104,[[1176,97,1176,100,"row"],[1176,103,1176,104,[3,8]]]],[1176,106,1176,117,[[1176,106,1176,112,"column"],[1176,115,1176,116,[3,6]]]]]]]]]]]]]]]]],[1177,32,1186,4,[0,[[1177,32,1177,53,[2,["Review","Test"],"whenFixed"]],[1178,33,1186,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { y = 2, x = 6, yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1188,11,1217,26,[1,"<|",1,[1188,11,1188,90,[0,[[1188,11,1188,15,[2,[],"test"]],[1188,16,1188,90,[5,"nested generics that have canonical order with additional nesting at end"]]]]],[1189,13,1217,26,[18,[[[1189,14,1189,16,[1]]],[1190,17,1217,26,[1,"|>",0,[1190,17,1203,26,[1,"|>",0,[1190,17,1198,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[1199,24,1203,26,[0,[[1199,24,1199,39,[2,["Review","Test"],"run"]],[1200,25,1203,26,[7,[1200,26,1202,36,[1,"|>",0,[1200,26,1201,53,[1,"|>",0,[1200,26,1200,34,[2,[],"defaults"]],[1201,32,1201,53,[2,[],"sortGenericFieldsLast"]]]],[1202,32,1202,36,[2,[],"rule"]]]]]]]]]]],[1204,24,1217,26,[0,[[1204,24,1204,48,[2,["Review","Test"],"expectErrors"]],[1205,25,1217,26,[9,[[1205,27,1216,4,[1,"|>",0,[1205,27,1206,120,[1,"|>",0,[1205,27,1205,40,[2,[],"unsortedError"]],[1206,32,1206,120,[0,[[1206,32,1206,53,[2,["Review","Test"],"atExactly"]],[1206,54,1206,120,[8,[[1206,56,1206,87,[[1206,56,1206,61,"start"],[1206,64,1206,87,[8,[[1206,66,1206,73,[[1206,66,1206,69,"row"],[1206,72,1206,73,[3,8]]]],[1206,75,1206,86,[[1206,75,1206,81,"column"],[1206,84,1206,85,[3,5]]]]]]]]],[1206,89,1206,119,[[1206,89,1206,92,"end"],[1206,95,1206,118,[8,[[1206,97,1206,104,[[1206,97,1206,100,"row"],[1206,103,1206,104,[3,8]]]],[1206,106,1206,117,[[1206,106,1206,112,"column"],[1206,115,1206,116,[3,6]]]]]]]]]]]]]]]]],[1207,32,1216,4,[0,[[1207,32,1207,53,[2,["Review","Test"],"whenFixed"]],[1208,33,1216,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { foo = 1, bar = 2, baz = 3 , yi = 3, er = 2, san = 0, y = 2, x = 6}\n"]]]]]]]]]]]]]]]]]]]],[1218,11,1241,26,[1,"<|",1,[1218,11,1218,57,[0,[[1218,11,1218,15,[2,[],"test"]],[1218,16,1218,57,[5,"nested generics without canonical order"]]]]],[1219,13,1241,26,[18,[[[1219,14,1219,16,[1]]],[1220,17,1241,26,[1,"|>",0,[1220,17,1228,55,[1,"|>",0,[1220,17,1227,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 { x : Int, y : Int })\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[1228,24,1228,55,[0,[[1228,24,1228,39,[2,["Review","Test"],"run"]],[1228,40,1228,55,[7,[1228,41,1228,54,[0,[[1228,41,1228,45,[2,[],"rule"]],[1228,46,1228,54,[2,[],"defaults"]]]]]]]]]]]],[1229,24,1241,26,[0,[[1229,24,1229,48,[2,["Review","Test"],"expectErrors"]],[1230,25,1241,26,[9,[[1230,27,1240,4,[1,"|>",0,[1230,27,1231,120,[1,"|>",0,[1230,27,1230,40,[2,[],"unsortedError"]],[1231,32,1231,120,[0,[[1231,32,1231,53,[2,["Review","Test"],"atExactly"]],[1231,54,1231,120,[8,[[1231,56,1231,87,[[1231,56,1231,61,"start"],[1231,64,1231,87,[8,[[1231,66,1231,73,[[1231,66,1231,69,"row"],[1231,72,1231,73,[3,7]]]],[1231,75,1231,86,[[1231,75,1231,81,"column"],[1231,84,1231,85,[3,5]]]]]]]]],[1231,89,1231,119,[[1231,89,1231,92,"end"],[1231,95,1231,118,[8,[[1231,97,1231,104,[[1231,97,1231,100,"row"],[1231,103,1231,104,[3,7]]]],[1231,106,1231,117,[[1231,106,1231,112,"column"],[1231,115,1231,116,[3,6]]]]]]]]]]]]]]]]],[1232,32,1240,4,[0,[[1232,32,1232,53,[2,["Review","Test"],"whenFixed"]],[1233,33,1240,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 { x : Int, y : Int })\na = { x = 6, y = 2, yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1242,11,1260,26,[1,"<|",1,[1242,11,1242,67,[0,[[1242,11,1242,15,[2,[],"test"]],[1242,16,1242,67,[5,"nested generics without canonical order ambiguous"]]]]],[1243,13,1260,26,[18,[[[1243,14,1243,16,[1]]],[1244,17,1260,26,[1,"|>",0,[1244,17,1255,26,[1,"|>",0,[1244,17,1250,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[1251,24,1255,26,[0,[[1251,24,1251,39,[2,["Review","Test"],"run"]],[1252,25,1255,26,[7,[1252,26,1254,36,[1,"|>",0,[1252,26,1253,64,[1,"|>",0,[1252,26,1252,34,[2,[],"defaults"]],[1253,32,1253,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[1254,32,1254,36,[2,[],"rule"]]]]]]]]]]],[1256,24,1260,26,[0,[[1256,24,1256,48,[2,["Review","Test"],"expectErrors"]],[1257,25,1260,26,[9,[[1257,27,1259,99,[0,[[1257,27,1257,47,[2,[],"ambiguousRecordError"]],[1258,29,1258,83,[9,[[1258,31,1258,55,[5,"A.Generic (A.Generic2)"]],[1258,57,1258,81,[5,"A.Generic2 (A.Generic)"]]]]],[1259,29,1259,99,[5,"{ san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }"]]]]]]]]]]]]]]]]]],[1261,11,1279,26,[1,"<|",1,[1261,11,1261,69,[0,[[1261,11,1261,15,[2,[],"test"]],[1261,16,1261,69,[5,"nested generics without canonical order report only"]]]]],[1262,13,1279,26,[18,[[[1262,14,1262,16,[1]]],[1263,17,1279,26,[1,"|>",0,[1263,17,1275,26,[1,"|>",0,[1263,17,1270,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 { x : Int, y : Int })\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[1271,24,1275,26,[0,[[1271,24,1271,39,[2,["Review","Test"],"run"]],[1272,25,1275,26,[7,[1272,26,1274,36,[1,"|>",0,[1272,26,1273,62,[1,"|>",0,[1272,26,1272,34,[2,[],"defaults"]],[1273,32,1273,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[1274,32,1274,36,[2,[],"rule"]]]]]]]]]]],[1276,24,1279,26,[0,[[1276,24,1276,48,[2,["Review","Test"],"expectErrors"]],[1277,25,1279,26,[9,[[1277,27,1277,116,[0,[[1277,27,1277,45,[2,[],"unknownRecordError"]],[1277,46,1277,116,[5,"{ san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }"]]]]],[1278,27,1278,68,[0,[[1278,27,1278,45,[2,[],"unknownRecordError"]],[1278,46,1278,68,[5,"{ x : Int, y : Int }"]]]]]]]]]]]]]]]]]],[1280,11,1301,26,[1,"<|",1,[1280,11,1280,64,[0,[[1280,11,1280,15,[2,[],"test"]],[1280,16,1280,64,[5,"prefers canonical match over generic + unknown"]]]]],[1281,13,1301,26,[18,[[[1281,14,1281,16,[1]]],[1282,17,1301,26,[1,"|>",0,[1282,17,1289,55,[1,"|>",0,[1282,17,1288,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias Generic rec = { rec | bar : Int, foo : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[1289,24,1289,55,[0,[[1289,24,1289,39,[2,["Review","Test"],"run"]],[1289,40,1289,55,[7,[1289,41,1289,54,[0,[[1289,41,1289,45,[2,[],"rule"]],[1289,46,1289,54,[2,[],"defaults"]]]]]]]]]]]],[1290,24,1301,26,[0,[[1290,24,1290,48,[2,["Review","Test"],"expectErrors"]],[1291,25,1301,26,[9,[[1291,27,1300,4,[1,"|>",0,[1291,27,1292,120,[1,"|>",0,[1291,27,1291,40,[2,[],"unsortedError"]],[1292,32,1292,120,[0,[[1292,32,1292,53,[2,["Review","Test"],"atExactly"]],[1292,54,1292,120,[8,[[1292,56,1292,87,[[1292,56,1292,61,"start"],[1292,64,1292,87,[8,[[1292,66,1292,73,[[1292,66,1292,69,"row"],[1292,72,1292,73,[3,6]]]],[1292,75,1292,86,[[1292,75,1292,81,"column"],[1292,84,1292,85,[3,5]]]]]]]]],[1292,89,1292,119,[[1292,89,1292,92,"end"],[1292,95,1292,118,[8,[[1292,97,1292,104,[[1292,97,1292,100,"row"],[1292,103,1292,104,[3,6]]]],[1292,106,1292,117,[[1292,106,1292,112,"column"],[1292,115,1292,116,[3,6]]]]]]]]]]]]]]]]],[1293,32,1300,4,[0,[[1293,32,1293,53,[2,["Review","Test"],"whenFixed"]],[1294,33,1300,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias Generic rec = { rec | bar : Int, foo : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1302,11,1318,110,[1,"<|",1,[1302,11,1302,74,[0,[[1302,11,1302,15,[2,[],"test"]],[1302,16,1302,74,[5,"does not prefer canonical match over generic + canonical"]]]]],[1303,13,1318,110,[18,[[[1303,14,1303,16,[1]]],[1304,17,1318,110,[1,"|>",0,[1304,17,1316,26,[1,"|>",0,[1304,17,1311,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { baz : Int }\ntype alias Generic rec = { rec | bar : Int, foo : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[1312,24,1316,26,[0,[[1312,24,1312,39,[2,["Review","Test"],"run"]],[1313,25,1316,26,[7,[1313,26,1315,36,[1,"|>",0,[1313,26,1314,64,[1,"|>",0,[1313,26,1313,34,[2,[],"defaults"]],[1314,32,1314,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[1315,32,1315,36,[2,[],"rule"]]]]]]]]]]],[1317,24,1318,110,[0,[[1317,24,1317,48,[2,["Review","Test"],"expectErrors"]],[1318,25,1318,110,[9,[[1318,27,1318,108,[0,[[1318,27,1318,47,[2,[],"ambiguousRecordError"]],[1318,48,1318,76,[9,[[1318,50,1318,55,[5,"A.A"]],[1318,57,1318,74,[5,"A.Generic (A.B)"]]]]],[1318,77,1318,108,[5,"{ bar = 2, foo = 1, baz = 3 }"]]]]]]]]]]]]]]]]]],[1319,11,1332,50,[1,"<|",1,[1319,11,1319,81,[0,[[1319,11,1319,15,[2,[],"test"]],[1319,16,1319,81,[5,"does not recurse infinitely when not all fields must be present"]]]]],[1320,13,1332,50,[18,[[[1320,14,1320,16,[1]]],[1321,17,1332,50,[1,"|>",0,[1321,17,1331,55,[1,"|>",0,[1321,17,1330,4,[5,"module A exposing (..)\n\ntype alias Generic a =\n    { a | unrelated : Int, foo : Int }\n\nfunc x =\n    case x of\n        { bar, baz, foo } ->\n            True\n"]],[1331,24,1331,55,[0,[[1331,24,1331,39,[2,["Review","Test"],"run"]],[1331,40,1331,55,[7,[1331,41,1331,54,[0,[[1331,41,1331,45,[2,[],"rule"]],[1331,46,1331,54,[2,[],"defaults"]]]]]]]]]]]],[1332,24,1332,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1333,11,1374,26,[1,"<|",1,[1333,11,1333,59,[0,[[1333,11,1333,15,[2,[],"test"]],[1333,16,1333,59,[5,"handles weird Elm nested generic behavior"]]]]],[1334,13,1374,26,[18,[[[1334,14,1334,16,[1]]],[1335,17,1374,26,[1,"|>",0,[1335,17,1354,26,[1,"|>",0,[1335,17,1349,4,[5,"module A exposing (..)\n\ntype alias Gen1 a =\n    { a | y : Int, x : Int }\n\n\ntype alias Gen2 b =\n    { b | x : Char, y : String }\n\ntype alias OtherRec = { y : String, x : Char }\n\na : Gen2 (Gen1 { x : String, y : Float })\na =\n    { y = \"bar\", x = 'a' }\n"]],[1350,24,1354,26,[0,[[1350,24,1350,39,[2,["Review","Test"],"run"]],[1351,25,1354,26,[7,[1351,26,1353,36,[1,"|>",0,[1351,26,1352,64,[1,"|>",0,[1351,26,1351,34,[2,[],"defaults"]],[1352,32,1352,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[1353,32,1353,36,[2,[],"rule"]]]]]]]]]]],[1355,24,1374,26,[0,[[1355,24,1355,48,[2,["Review","Test"],"expectErrors"]],[1356,25,1374,26,[9,[[1356,27,1373,4,[1,"|>",0,[1356,27,1357,122,[1,"|>",0,[1356,27,1356,40,[2,[],"unsortedError"]],[1357,32,1357,122,[0,[[1357,32,1357,53,[2,["Review","Test"],"atExactly"]],[1357,54,1357,122,[8,[[1357,56,1357,88,[[1357,56,1357,61,"start"],[1357,64,1357,88,[8,[[1357,66,1357,74,[[1357,66,1357,69,"row"],[1357,72,1357,74,[3,14]]]],[1357,76,1357,87,[[1357,76,1357,82,"column"],[1357,85,1357,86,[3,5]]]]]]]]],[1357,90,1357,121,[[1357,90,1357,93,"end"],[1357,96,1357,120,[8,[[1357,98,1357,106,[[1357,98,1357,101,"row"],[1357,104,1357,106,[3,14]]]],[1357,108,1357,119,[[1357,108,1357,114,"column"],[1357,117,1357,118,[3,6]]]]]]]]]]]]]]]]],[1358,32,1373,4,[0,[[1358,32,1358,53,[2,["Review","Test"],"whenFixed"]],[1359,33,1373,4,[5,"module A exposing (..)\n\ntype alias Gen1 a =\n    { a | y : Int, x : Int }\n\n\ntype alias Gen2 b =\n    { b | x : Char, y : String }\n\ntype alias OtherRec = { y : String, x : Char }\n\na : Gen2 (Gen1 { x : String, y : Float })\na =\n    { x = 'a' , y = \"bar\"}\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1378,1,1417,10,[0,[[0],[1,[1378,1,1378,21,[[1378,1,1378,14,"inExpressions"],[1378,17,1378,21,[1,[1378,17,1378,21,[[],"Test"]],[]]]]]],[1379,1,1417,10,[[1379,1,1379,14,"inExpressions"],[],[1380,5,1417,10,[0,[[1380,5,1380,13,[2,[],"describe"]],[1380,14,1380,38,[5,"expressions are sorted"]],[1381,9,1417,10,[9,[[1381,11,1394,26,[1,"<|",1,[1381,11,1381,35,[0,[[1381,11,1381,15,[2,[],"test"]],[1381,16,1381,35,[5,"sorts expressions"]]]]],[1382,13,1394,26,[18,[[[1382,14,1382,16,[1]]],[1383,17,1394,26,[1,"|>",0,[1383,17,1387,55,[1,"|>",0,[1383,17,1386,4,[5,"module A exposing (..)\n\na = { b = 1, c = 2, a = 3 }\n"]],[1387,24,1387,55,[0,[[1387,24,1387,39,[2,["Review","Test"],"run"]],[1387,40,1387,55,[7,[1387,41,1387,54,[0,[[1387,41,1387,45,[2,[],"rule"]],[1387,46,1387,54,[2,[],"defaults"]]]]]]]]]]]],[1388,24,1394,26,[0,[[1388,24,1388,48,[2,["Review","Test"],"expectErrors"]],[1389,25,1394,26,[9,[[1389,27,1393,4,[1,"|>",0,[1389,27,1389,40,[2,[],"unsortedError"]],[1390,32,1393,4,[0,[[1390,32,1390,53,[2,["Review","Test"],"whenFixed"]],[1390,54,1393,4,[5,"module A exposing (..)\n\na = { a = 3 , b = 1, c = 2}\n"]]]]]]]]]]]]]]]]]]]],[1395,11,1416,26,[1,"<|",1,[1395,11,1395,45,[0,[[1395,11,1395,15,[2,[],"test"]],[1395,16,1395,45,[5,"sorts multiline expressions"]]]]],[1396,13,1416,26,[18,[[[1396,14,1396,16,[1]]],[1397,17,1416,26,[1,"|>",0,[1397,17,1405,55,[1,"|>",0,[1397,17,1404,4,[5,"module A exposing (..)\n\na =\n    { b = 1\n    , c = 2\n    , a = 3\n    }\n"]],[1405,24,1405,55,[0,[[1405,24,1405,39,[2,["Review","Test"],"run"]],[1405,40,1405,55,[7,[1405,41,1405,54,[0,[[1405,41,1405,45,[2,[],"rule"]],[1405,46,1405,54,[2,[],"defaults"]]]]]]]]]]]],[1406,24,1416,26,[0,[[1406,24,1406,48,[2,["Review","Test"],"expectErrors"]],[1407,25,1416,26,[9,[[1407,27,1415,4,[1,"|>",0,[1407,27,1407,40,[2,[],"unsortedError"]],[1408,32,1415,4,[0,[[1408,32,1408,53,[2,["Review","Test"],"whenFixed"]],[1408,54,1415,4,[5,"module A exposing (..)\n\na =\n    { a = 3\n    \n    , b = 1, c = 2\n    }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1420,1,1437,10,[0,[[0],[1,[1420,1,1420,18,[[1420,1,1420,11,"inPatterns"],[1420,14,1420,18,[1,[1420,14,1420,18,[[],"Test"]],[]]]]]],[1421,1,1437,10,[[1421,1,1421,11,"inPatterns"],[],[1422,5,1437,10,[0,[[1422,5,1422,13,[2,[],"describe"]],[1422,14,1422,35,[5,"patterns are sorted"]],[1423,9,1437,10,[9,[[1423,11,1436,26,[1,"<|",1,[1423,11,1423,32,[0,[[1423,11,1423,15,[2,[],"test"]],[1423,16,1423,32,[5,"sorts patterns"]]]]],[1424,13,1436,26,[18,[[[1424,14,1424,16,[1]]],[1425,17,1436,26,[1,"|>",0,[1425,17,1429,55,[1,"|>",0,[1425,17,1428,4,[5,"module A exposing (..)\n\na { foo, baz, bar } = True\n"]],[1429,24,1429,55,[0,[[1429,24,1429,39,[2,["Review","Test"],"run"]],[1429,40,1429,55,[7,[1429,41,1429,54,[0,[[1429,41,1429,45,[2,[],"rule"]],[1429,46,1429,54,[2,[],"defaults"]]]]]]]]]]]],[1430,24,1436,26,[0,[[1430,24,1430,48,[2,["Review","Test"],"expectErrors"]],[1431,25,1436,26,[9,[[1431,27,1435,4,[1,"|>",0,[1431,27,1431,40,[2,[],"unsortedError"]],[1432,32,1435,4,[0,[[1432,32,1432,53,[2,["Review","Test"],"whenFixed"]],[1432,54,1435,4,[5,"module A exposing (..)\n\na { bar, baz, foo } = True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1440,1,1487,10,[0,[[0],[1,[1440,1,1440,25,[[1440,1,1440,18,"inTypeAnnotations"],[1440,21,1440,25,[1,[1440,21,1440,25,[[],"Test"]],[]]]]]],[1441,1,1487,10,[[1441,1,1441,18,"inTypeAnnotations"],[],[1442,5,1487,10,[0,[[1442,5,1442,13,[2,[],"describe"]],[1442,14,1442,83,[5,"type annotations are sorted (when not custom types or type aliases)"]],[1443,9,1487,10,[9,[[1443,11,1458,26,[1,"<|",1,[1443,11,1443,40,[0,[[1443,11,1443,15,[2,[],"test"]],[1443,16,1443,40,[5,"sorts type annotations"]]]]],[1444,13,1458,26,[18,[[[1444,14,1444,16,[1]]],[1445,17,1458,26,[1,"|>",0,[1445,17,1450,55,[1,"|>",0,[1445,17,1449,4,[5,"module A exposing (..)\n\na : { b : Int, c : Int, a : Int } -> Bool\na _ = True\n"]],[1450,24,1450,55,[0,[[1450,24,1450,39,[2,["Review","Test"],"run"]],[1450,40,1450,55,[7,[1450,41,1450,54,[0,[[1450,41,1450,45,[2,[],"rule"]],[1450,46,1450,54,[2,[],"defaults"]]]]]]]]]]]],[1451,24,1458,26,[0,[[1451,24,1451,48,[2,["Review","Test"],"expectErrors"]],[1452,25,1458,26,[9,[[1452,27,1457,4,[1,"|>",0,[1452,27,1452,40,[2,[],"unsortedError"]],[1453,32,1457,4,[0,[[1453,32,1453,53,[2,["Review","Test"],"whenFixed"]],[1453,54,1457,4,[5,"module A exposing (..)\n\na : { a : Int , b : Int, c : Int} -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[1459,11,1486,26,[1,"<|",1,[1459,11,1459,50,[0,[[1459,11,1459,15,[2,[],"test"]],[1459,16,1459,50,[5,"sorts multiline type annotations"]]]]],[1460,13,1486,26,[18,[[[1460,14,1460,16,[1]]],[1461,17,1486,26,[1,"|>",0,[1461,17,1472,55,[1,"|>",0,[1461,17,1471,4,[5,"module A exposing (..)\n\na :\n    { b : Int\n    , c : Int\n    , a : Int\n    }\n    -> Bool\na _ =\n    True\n"]],[1472,24,1472,55,[0,[[1472,24,1472,39,[2,["Review","Test"],"run"]],[1472,40,1472,55,[7,[1472,41,1472,54,[0,[[1472,41,1472,45,[2,[],"rule"]],[1472,46,1472,54,[2,[],"defaults"]]]]]]]]]]]],[1473,24,1486,26,[0,[[1473,24,1473,48,[2,["Review","Test"],"expectErrors"]],[1474,25,1486,26,[9,[[1474,27,1485,4,[1,"|>",0,[1474,27,1474,40,[2,[],"unsortedError"]],[1475,32,1485,4,[0,[[1475,32,1475,53,[2,["Review","Test"],"whenFixed"]],[1475,54,1485,4,[5,"module A exposing (..)\n\na :\n    { a : Int\n    \n    , b : Int, c : Int\n    }\n    -> Bool\na _ =\n    True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1490,1,1620,10,[0,[[0],[1,[1490,1,1490,27,[[1490,1,1490,20,"localBindingSupport"],[1490,23,1490,27,[1,[1490,23,1490,27,[[],"Test"]],[]]]]]],[1491,1,1620,10,[[1491,1,1491,20,"localBindingSupport"],[],[1492,5,1620,10,[0,[[1492,5,1492,13,[2,[],"describe"]],[1492,14,1492,50,[5,"disambiguates using local bindings"]],[1493,9,1620,10,[9,[[1493,11,1525,26,[1,"<|",1,[1493,11,1493,66,[0,[[1493,11,1493,15,[2,[],"test"]],[1493,16,1493,66,[5,"possible because of type annotation in let block"]]]]],[1494,13,1525,26,[18,[[[1494,14,1494,16,[1]]],[1495,17,1525,26,[1,"|>",0,[1495,17,1508,55,[1,"|>",0,[1495,17,1507,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc =\n    let\n        foo : A -> Bool\n        foo _ = True\n    in\n    foo { bar = 2, foo = 1, baz = 3 }\n"]],[1508,24,1508,55,[0,[[1508,24,1508,39,[2,["Review","Test"],"run"]],[1508,40,1508,55,[7,[1508,41,1508,54,[0,[[1508,41,1508,45,[2,[],"rule"]],[1508,46,1508,54,[2,[],"defaults"]]]]]]]]]]]],[1509,24,1525,26,[0,[[1509,24,1509,48,[2,["Review","Test"],"expectErrors"]],[1510,25,1525,26,[9,[[1510,27,1524,4,[1,"|>",0,[1510,27,1511,123,[1,"|>",0,[1510,27,1510,40,[2,[],"unsortedError"]],[1511,32,1511,123,[0,[[1511,32,1511,53,[2,["Review","Test"],"atExactly"]],[1511,54,1511,123,[8,[[1511,56,1511,88,[[1511,56,1511,61,"start"],[1511,64,1511,88,[8,[[1511,66,1511,74,[[1511,66,1511,69,"row"],[1511,72,1511,74,[3,12]]]],[1511,76,1511,87,[[1511,76,1511,82,"column"],[1511,85,1511,86,[3,9]]]]]]]]],[1511,90,1511,122,[[1511,90,1511,93,"end"],[1511,96,1511,121,[8,[[1511,98,1511,106,[[1511,98,1511,101,"row"],[1511,104,1511,106,[3,12]]]],[1511,108,1511,120,[[1511,108,1511,114,"column"],[1511,117,1511,119,[3,10]]]]]]]]]]]]]]]]],[1512,32,1524,4,[0,[[1512,32,1512,53,[2,["Review","Test"],"whenFixed"]],[1512,54,1524,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc =\n    let\n        foo : A -> Bool\n        foo _ = True\n    in\n    foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1526,11,1548,26,[1,"<|",1,[1526,11,1526,69,[0,[[1526,11,1526,15,[2,[],"test"]],[1526,16,1526,69,[5,"possible because of type annotation on function arg"]]]]],[1527,13,1548,26,[18,[[[1527,14,1527,16,[1]]],[1528,17,1548,26,[1,"|>",0,[1528,17,1536,55,[1,"|>",0,[1528,17,1535,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc foo = foo { bar = 2, foo = 1, baz = 3 }\n"]],[1536,24,1536,55,[0,[[1536,24,1536,39,[2,["Review","Test"],"run"]],[1536,40,1536,55,[7,[1536,41,1536,54,[0,[[1536,41,1536,45,[2,[],"rule"]],[1536,46,1536,54,[2,[],"defaults"]]]]]]]]]]]],[1537,24,1548,26,[0,[[1537,24,1537,48,[2,["Review","Test"],"expectErrors"]],[1538,25,1548,26,[9,[[1538,27,1547,4,[1,"|>",0,[1538,27,1539,122,[1,"|>",0,[1538,27,1538,40,[2,[],"unsortedError"]],[1539,32,1539,122,[0,[[1539,32,1539,53,[2,["Review","Test"],"atExactly"]],[1539,54,1539,122,[8,[[1539,56,1539,88,[[1539,56,1539,61,"start"],[1539,64,1539,88,[8,[[1539,66,1539,73,[[1539,66,1539,69,"row"],[1539,72,1539,73,[3,7]]]],[1539,75,1539,87,[[1539,75,1539,81,"column"],[1539,84,1539,86,[3,16]]]]]]]]],[1539,90,1539,121,[[1539,90,1539,93,"end"],[1539,96,1539,120,[8,[[1539,98,1539,105,[[1539,98,1539,101,"row"],[1539,104,1539,105,[3,7]]]],[1539,107,1539,119,[[1539,107,1539,113,"column"],[1539,116,1539,118,[3,17]]]]]]]]]]]]]]]]],[1540,32,1547,4,[0,[[1540,32,1540,53,[2,["Review","Test"],"whenFixed"]],[1540,54,1547,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc foo = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1549,11,1571,26,[1,"<|",1,[1549,11,1549,48,[0,[[1549,11,1549,15,[2,[],"test"]],[1549,16,1549,48,[5,"possible because of lambda arg"]]]]],[1550,13,1571,26,[18,[[[1550,14,1550,16,[1]]],[1551,17,1571,26,[1,"|>",0,[1551,17,1559,55,[1,"|>",0,[1551,17,1558,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc = \\foo -> foo { bar = 2, foo = 1, baz = 3 }\n"]],[1559,24,1559,55,[0,[[1559,24,1559,39,[2,["Review","Test"],"run"]],[1559,40,1559,55,[7,[1559,41,1559,54,[0,[[1559,41,1559,45,[2,[],"rule"]],[1559,46,1559,54,[2,[],"defaults"]]]]]]]]]]]],[1560,24,1571,26,[0,[[1560,24,1560,48,[2,["Review","Test"],"expectErrors"]],[1561,25,1571,26,[9,[[1561,27,1570,4,[1,"|>",0,[1561,27,1562,122,[1,"|>",0,[1561,27,1561,40,[2,[],"unsortedError"]],[1562,32,1562,122,[0,[[1562,32,1562,53,[2,["Review","Test"],"atExactly"]],[1562,54,1562,122,[8,[[1562,56,1562,88,[[1562,56,1562,61,"start"],[1562,64,1562,88,[8,[[1562,66,1562,73,[[1562,66,1562,69,"row"],[1562,72,1562,73,[3,7]]]],[1562,75,1562,87,[[1562,75,1562,81,"column"],[1562,84,1562,86,[3,20]]]]]]]]],[1562,90,1562,121,[[1562,90,1562,93,"end"],[1562,96,1562,120,[8,[[1562,98,1562,105,[[1562,98,1562,101,"row"],[1562,104,1562,105,[3,7]]]],[1562,107,1562,119,[[1562,107,1562,113,"column"],[1562,116,1562,118,[3,21]]]]]]]]]]]]]]]]],[1563,32,1570,4,[0,[[1563,32,1563,53,[2,["Review","Test"],"whenFixed"]],[1563,54,1570,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc = \\foo -> foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1572,11,1594,26,[1,"<|",1,[1572,11,1572,43,[0,[[1572,11,1572,15,[2,[],"test"]],[1572,16,1572,43,[5,"works with record pattern"]]]]],[1573,13,1594,26,[18,[[[1573,14,1573,16,[1]]],[1574,17,1594,26,[1,"|>",0,[1574,17,1582,55,[1,"|>",0,[1574,17,1581,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { field : Int, foo : (A -> Bool) } -> Bool\nfunc { field, foo } = foo { bar = 2, foo = 1, baz = 3 }\n"]],[1582,24,1582,55,[0,[[1582,24,1582,39,[2,["Review","Test"],"run"]],[1582,40,1582,55,[7,[1582,41,1582,54,[0,[[1582,41,1582,45,[2,[],"rule"]],[1582,46,1582,54,[2,[],"defaults"]]]]]]]]]]]],[1583,24,1594,26,[0,[[1583,24,1583,48,[2,["Review","Test"],"expectErrors"]],[1584,25,1594,26,[9,[[1584,27,1593,4,[1,"|>",0,[1584,27,1585,122,[1,"|>",0,[1584,27,1584,40,[2,[],"unsortedError"]],[1585,32,1585,122,[0,[[1585,32,1585,53,[2,["Review","Test"],"atExactly"]],[1585,54,1585,122,[8,[[1585,56,1585,88,[[1585,56,1585,61,"start"],[1585,64,1585,88,[8,[[1585,66,1585,73,[[1585,66,1585,69,"row"],[1585,72,1585,73,[3,7]]]],[1585,75,1585,87,[[1585,75,1585,81,"column"],[1585,84,1585,86,[3,27]]]]]]]]],[1585,90,1585,121,[[1585,90,1585,93,"end"],[1585,96,1585,120,[8,[[1585,98,1585,105,[[1585,98,1585,101,"row"],[1585,104,1585,105,[3,7]]]],[1585,107,1585,119,[[1585,107,1585,113,"column"],[1585,116,1585,118,[3,28]]]]]]]]]]]]]]]]],[1586,32,1593,4,[0,[[1586,32,1586,53,[2,["Review","Test"],"whenFixed"]],[1586,54,1593,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { field : Int, foo : (A -> Bool) } -> Bool\nfunc { field, foo } = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1595,11,1619,26,[1,"<|",1,[1595,11,1595,42,[0,[[1595,11,1595,15,[2,[],"test"]],[1595,16,1595,42,[5,"works with named pattern"]]]]],[1596,13,1619,26,[18,[[[1596,14,1596,16,[1]]],[1597,17,1619,26,[1,"|>",0,[1597,17,1606,55,[1,"|>",0,[1597,17,1605,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\ntype Custom = Custom In (A -> Bool)\n\nfunc : Custom -> Bool\nfunc (Custom field foo) = foo { bar = 2, foo = 1, baz = 3 }\n"]],[1606,24,1606,55,[0,[[1606,24,1606,39,[2,["Review","Test"],"run"]],[1606,40,1606,55,[7,[1606,41,1606,54,[0,[[1606,41,1606,45,[2,[],"rule"]],[1606,46,1606,54,[2,[],"defaults"]]]]]]]]]]]],[1607,24,1619,26,[0,[[1607,24,1607,48,[2,["Review","Test"],"expectErrors"]],[1608,25,1619,26,[9,[[1608,27,1618,4,[1,"|>",0,[1608,27,1609,122,[1,"|>",0,[1608,27,1608,40,[2,[],"unsortedError"]],[1609,32,1609,122,[0,[[1609,32,1609,53,[2,["Review","Test"],"atExactly"]],[1609,54,1609,122,[8,[[1609,56,1609,88,[[1609,56,1609,61,"start"],[1609,64,1609,88,[8,[[1609,66,1609,73,[[1609,66,1609,69,"row"],[1609,72,1609,73,[3,8]]]],[1609,75,1609,87,[[1609,75,1609,81,"column"],[1609,84,1609,86,[3,31]]]]]]]]],[1609,90,1609,121,[[1609,90,1609,93,"end"],[1609,96,1609,120,[8,[[1609,98,1609,105,[[1609,98,1609,101,"row"],[1609,104,1609,105,[3,8]]]],[1609,107,1609,119,[[1609,107,1609,113,"column"],[1609,116,1609,118,[3,32]]]]]]]]]]]]]]]]],[1610,32,1618,4,[0,[[1610,32,1610,53,[2,["Review","Test"],"whenFixed"]],[1610,54,1618,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\ntype Custom = Custom In (A -> Bool)\n\nfunc : Custom -> Bool\nfunc (Custom field foo) = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1623,1,1713,10,[0,[[0],[1,[1623,1,1623,23,[[1623,1,1623,16,"operatorSupport"],[1623,19,1623,23,[1,[1623,19,1623,23,[[],"Test"]],[]]]]]],[1624,1,1713,10,[[1624,1,1624,16,"operatorSupport"],[],[1625,5,1713,10,[0,[[1625,5,1625,13,[2,[],"describe"]],[1625,14,1625,32,[5,"operator support"]],[1626,9,1713,10,[9,[[1626,11,1654,26,[1,"<|",1,[1626,11,1626,53,[0,[[1626,11,1626,15,[2,[],"test"]],[1626,16,1626,53,[5,"understands |> operator application"]]]]],[1627,13,1654,26,[18,[[[1627,14,1627,16,[1]]],[1628,17,1654,26,[1,"|>",0,[1628,17,1639,55,[1,"|>",0,[1628,17,1638,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { bar = 2, foo = 1, baz = 3 } |> foo\n"]],[1639,24,1639,55,[0,[[1639,24,1639,39,[2,["Review","Test"],"run"]],[1639,40,1639,55,[7,[1639,41,1639,54,[0,[[1639,41,1639,45,[2,[],"rule"]],[1639,46,1639,54,[2,[],"defaults"]]]]]]]]]]]],[1640,24,1654,26,[0,[[1640,24,1640,48,[2,["Review","Test"],"expectErrors"]],[1641,25,1654,26,[9,[[1641,27,1653,4,[1,"|>",0,[1641,27,1642,122,[1,"|>",0,[1641,27,1641,40,[2,[],"unsortedError"]],[1642,32,1642,122,[0,[[1642,32,1642,53,[2,["Review","Test"],"atExactly"]],[1642,54,1642,122,[8,[[1642,56,1642,88,[[1642,56,1642,61,"start"],[1642,64,1642,88,[8,[[1642,66,1642,74,[[1642,66,1642,69,"row"],[1642,72,1642,74,[3,10]]]],[1642,76,1642,87,[[1642,76,1642,82,"column"],[1642,85,1642,86,[3,8]]]]]]]]],[1642,90,1642,121,[[1642,90,1642,93,"end"],[1642,96,1642,120,[8,[[1642,98,1642,106,[[1642,98,1642,101,"row"],[1642,104,1642,106,[3,10]]]],[1642,108,1642,119,[[1642,108,1642,114,"column"],[1642,117,1642,118,[3,9]]]]]]]]]]]]]]]]],[1643,32,1653,4,[0,[[1643,32,1643,53,[2,["Review","Test"],"whenFixed"]],[1643,54,1653,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { foo = 1, bar = 2, baz = 3 } |> foo\n"]]]]]]]]]]]]]]]]]]]],[1655,11,1683,26,[1,"<|",1,[1655,11,1655,37,[0,[[1655,11,1655,15,[2,[],"test"]],[1655,16,1655,37,[5,"handles parentheses"]]]]],[1656,13,1683,26,[18,[[[1656,14,1656,16,[1]]],[1657,17,1683,26,[1,"|>",0,[1657,17,1668,55,[1,"|>",0,[1657,17,1667,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { bar = 2, foo = 1, baz = 3 } |> (foo)\n"]],[1668,24,1668,55,[0,[[1668,24,1668,39,[2,["Review","Test"],"run"]],[1668,40,1668,55,[7,[1668,41,1668,54,[0,[[1668,41,1668,45,[2,[],"rule"]],[1668,46,1668,54,[2,[],"defaults"]]]]]]]]]]]],[1669,24,1683,26,[0,[[1669,24,1669,48,[2,["Review","Test"],"expectErrors"]],[1670,25,1683,26,[9,[[1670,27,1682,4,[1,"|>",0,[1670,27,1671,122,[1,"|>",0,[1670,27,1670,40,[2,[],"unsortedError"]],[1671,32,1671,122,[0,[[1671,32,1671,53,[2,["Review","Test"],"atExactly"]],[1671,54,1671,122,[8,[[1671,56,1671,88,[[1671,56,1671,61,"start"],[1671,64,1671,88,[8,[[1671,66,1671,74,[[1671,66,1671,69,"row"],[1671,72,1671,74,[3,10]]]],[1671,76,1671,87,[[1671,76,1671,82,"column"],[1671,85,1671,86,[3,8]]]]]]]]],[1671,90,1671,121,[[1671,90,1671,93,"end"],[1671,96,1671,120,[8,[[1671,98,1671,106,[[1671,98,1671,101,"row"],[1671,104,1671,106,[3,10]]]],[1671,108,1671,119,[[1671,108,1671,114,"column"],[1671,117,1671,118,[3,9]]]]]]]]]]]]]]]]],[1672,32,1682,4,[0,[[1672,32,1672,53,[2,["Review","Test"],"whenFixed"]],[1672,54,1682,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { foo = 1, bar = 2, baz = 3 } |> (foo)\n"]]]]]]]]]]]]]]]]]]]],[1684,11,1712,26,[1,"<|",1,[1684,11,1684,53,[0,[[1684,11,1684,15,[2,[],"test"]],[1684,16,1684,53,[5,"understands <| operator application"]]]]],[1685,13,1712,26,[18,[[[1685,14,1685,16,[1]]],[1686,17,1712,26,[1,"|>",0,[1686,17,1697,55,[1,"|>",0,[1686,17,1696,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo <| { bar = 2, foo = 1, baz = 3 }\n"]],[1697,24,1697,55,[0,[[1697,24,1697,39,[2,["Review","Test"],"run"]],[1697,40,1697,55,[7,[1697,41,1697,54,[0,[[1697,41,1697,45,[2,[],"rule"]],[1697,46,1697,54,[2,[],"defaults"]]]]]]]]]]]],[1698,24,1712,26,[0,[[1698,24,1698,48,[2,["Review","Test"],"expectErrors"]],[1699,25,1712,26,[9,[[1699,27,1711,4,[1,"|>",0,[1699,27,1700,124,[1,"|>",0,[1699,27,1699,40,[2,[],"unsortedError"]],[1700,32,1700,124,[0,[[1700,32,1700,53,[2,["Review","Test"],"atExactly"]],[1700,54,1700,124,[8,[[1700,56,1700,89,[[1700,56,1700,61,"start"],[1700,64,1700,89,[8,[[1700,66,1700,74,[[1700,66,1700,69,"row"],[1700,72,1700,74,[3,10]]]],[1700,76,1700,88,[[1700,76,1700,82,"column"],[1700,85,1700,87,[3,15]]]]]]]]],[1700,91,1700,123,[[1700,91,1700,94,"end"],[1700,97,1700,122,[8,[[1700,99,1700,107,[[1700,99,1700,102,"row"],[1700,105,1700,107,[3,10]]]],[1700,109,1700,121,[[1700,109,1700,115,"column"],[1700,118,1700,120,[3,16]]]]]]]]]]]]]]]]],[1701,32,1711,4,[0,[[1701,32,1701,53,[2,["Review","Test"],"whenFixed"]],[1701,54,1711,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo <| { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1716,1,1758,10,[0,[[0],[1,[1716,1,1716,32,[[1716,1,1716,25,"recordConstructorSupport"],[1716,28,1716,32,[1,[1716,28,1716,32,[[],"Test"]],[]]]]]],[1717,1,1758,10,[[1717,1,1717,25,"recordConstructorSupport"],[],[1718,5,1758,10,[0,[[1718,5,1718,13,[2,[],"describe"]],[1718,14,1718,41,[5,"using record constructors"]],[1719,9,1758,10,[9,[[1719,11,1757,26,[1,"<|",1,[1719,11,1719,85,[0,[[1719,11,1719,15,[2,[],"test"]],[1719,16,1719,85,[5,"possible because of type annotation of field for record constructor"]]]]],[1720,13,1757,26,[18,[[[1720,14,1720,16,[1]]],[1721,17,1757,26,[1,"|>",0,[1721,17,1731,55,[1,"|>",0,[1721,17,1730,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias C = { a : A, b : B }\n\nfunc =\n    C { bar = 1, foo = 2, baz = 3 } { foo = 2, bar = 1, baz = 3 }\n"]],[1731,24,1731,55,[0,[[1731,24,1731,39,[2,["Review","Test"],"run"]],[1731,40,1731,55,[7,[1731,41,1731,54,[0,[[1731,41,1731,45,[2,[],"rule"]],[1731,46,1731,54,[2,[],"defaults"]]]]]]]]]]]],[1732,24,1757,26,[0,[[1732,24,1732,48,[2,["Review","Test"],"expectErrors"]],[1733,25,1757,26,[9,[[1733,27,1744,4,[1,"|>",0,[1733,27,1734,120,[1,"|>",0,[1733,27,1733,40,[2,[],"unsortedError"]],[1734,32,1734,120,[0,[[1734,32,1734,53,[2,["Review","Test"],"atExactly"]],[1734,54,1734,120,[8,[[1734,56,1734,87,[[1734,56,1734,61,"start"],[1734,64,1734,87,[8,[[1734,66,1734,73,[[1734,66,1734,69,"row"],[1734,72,1734,73,[3,9]]]],[1734,75,1734,86,[[1734,75,1734,81,"column"],[1734,84,1734,85,[3,7]]]]]]]]],[1734,89,1734,119,[[1734,89,1734,92,"end"],[1734,95,1734,118,[8,[[1734,97,1734,104,[[1734,97,1734,100,"row"],[1734,103,1734,104,[3,9]]]],[1734,106,1734,117,[[1734,106,1734,112,"column"],[1734,115,1734,116,[3,8]]]]]]]]]]]]]]]]],[1735,32,1744,4,[0,[[1735,32,1735,53,[2,["Review","Test"],"whenFixed"]],[1735,54,1744,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias C = { a : A, b : B }\n\nfunc =\n    C { foo = 2, bar = 1, baz = 3 } { foo = 2, bar = 1, baz = 3 }\n"]]]]]]],[1745,27,1756,4,[1,"|>",0,[1745,27,1746,122,[1,"|>",0,[1745,27,1745,40,[2,[],"unsortedError"]],[1746,32,1746,122,[0,[[1746,32,1746,53,[2,["Review","Test"],"atExactly"]],[1746,54,1746,122,[8,[[1746,56,1746,88,[[1746,56,1746,61,"start"],[1746,64,1746,88,[8,[[1746,66,1746,73,[[1746,66,1746,69,"row"],[1746,72,1746,73,[3,9]]]],[1746,75,1746,87,[[1746,75,1746,81,"column"],[1746,84,1746,86,[3,37]]]]]]]]],[1746,90,1746,121,[[1746,90,1746,93,"end"],[1746,96,1746,120,[8,[[1746,98,1746,105,[[1746,98,1746,101,"row"],[1746,104,1746,105,[3,9]]]],[1746,107,1746,119,[[1746,107,1746,113,"column"],[1746,116,1746,118,[3,38]]]]]]]]]]]]]]]]],[1747,32,1756,4,[0,[[1747,32,1747,53,[2,["Review","Test"],"whenFixed"]],[1747,54,1756,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias C = { a : A, b : B }\n\nfunc =\n    C { bar = 1, foo = 2, baz = 3 } { bar = 1, foo = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1761,1,2021,10,[0,[[0],[1,[1761,1,1761,34,[[1761,1,1761,27,"simpleTypeInferenceSupport"],[1761,30,1761,34,[1,[1761,30,1761,34,[[],"Test"]],[]]]]]],[1762,1,2021,10,[[1762,1,1762,27,"simpleTypeInferenceSupport"],[],[1763,5,2021,10,[0,[[1763,5,1763,13,[2,[],"describe"]],[1763,14,1763,41,[5,"infers record field types"]],[1764,9,2021,10,[9,[[1764,11,1785,26,[1,"<|",1,[1764,11,1764,42,[0,[[1764,11,1764,15,[2,[],"test"]],[1764,16,1764,42,[5,"can disambiguate by type"]]]]],[1765,13,1785,26,[18,[[[1765,14,1765,16,[1]]],[1766,17,1785,26,[1,"|>",0,[1766,17,1773,55,[1,"|>",0,[1766,17,1772,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : List (List Int), baz : Char }\ntype alias B = { bar : List (List String), foo : Int, baz : Char }\n\nfunc = { bar = [ [], ([3, 4]) ], foo = 3, baz = '2' }\n"]],[1773,24,1773,55,[0,[[1773,24,1773,39,[2,["Review","Test"],"run"]],[1773,40,1773,55,[7,[1773,41,1773,54,[0,[[1773,41,1773,45,[2,[],"rule"]],[1773,46,1773,54,[2,[],"defaults"]]]]]]]]]]]],[1774,24,1785,26,[0,[[1774,24,1774,48,[2,["Review","Test"],"expectErrors"]],[1775,25,1785,26,[9,[[1775,27,1784,4,[1,"|>",0,[1775,27,1776,120,[1,"|>",0,[1775,27,1775,40,[2,[],"unsortedError"]],[1776,32,1776,120,[0,[[1776,32,1776,53,[2,["Review","Test"],"atExactly"]],[1776,54,1776,120,[8,[[1776,56,1776,87,[[1776,56,1776,61,"start"],[1776,64,1776,87,[8,[[1776,66,1776,73,[[1776,66,1776,69,"row"],[1776,72,1776,73,[3,6]]]],[1776,75,1776,86,[[1776,75,1776,81,"column"],[1776,84,1776,85,[3,8]]]]]]]]],[1776,89,1776,119,[[1776,89,1776,92,"end"],[1776,95,1776,118,[8,[[1776,97,1776,104,[[1776,97,1776,100,"row"],[1776,103,1776,104,[3,6]]]],[1776,106,1776,117,[[1776,106,1776,112,"column"],[1776,115,1776,116,[3,9]]]]]]]]]]]]]]]]],[1777,32,1784,4,[0,[[1777,32,1777,53,[2,["Review","Test"],"whenFixed"]],[1778,33,1784,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : List (List Int), baz : Char }\ntype alias B = { bar : List (List String), foo : Int, baz : Char }\n\nfunc = { foo = 3, bar = [ [], ([3, 4]) ], baz = '2' }\n"]]]]]]]]]]]]]]]]]]]],[1786,11,1795,50,[1,"<|",1,[1786,11,1786,53,[0,[[1786,11,1786,15,[2,[],"test"]],[1786,16,1786,53,[5,"does not incorrectly infer Nothings"]]]]],[1787,13,1795,50,[18,[[[1787,14,1787,16,[1]]],[1788,17,1795,50,[1,"|>",0,[1788,17,1794,55,[1,"|>",0,[1788,17,1793,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Maybe Int, bar : Maybe Float }\n\na = { foo = Nothing, bar = Nothing }\n"]],[1794,24,1794,55,[0,[[1794,24,1794,39,[2,["Review","Test"],"run"]],[1794,40,1794,55,[7,[1794,41,1794,54,[0,[[1794,41,1794,45,[2,[],"rule"]],[1794,46,1794,54,[2,[],"defaults"]]]]]]]]]]]],[1795,24,1795,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1796,11,1805,50,[1,"<|",1,[1796,11,1796,60,[0,[[1796,11,1796,15,[2,[],"test"]],[1796,16,1796,60,[5,"does not incorrectly infer nested Nothings"]]]]],[1797,13,1805,50,[18,[[[1797,14,1797,16,[1]]],[1798,17,1805,50,[1,"|>",0,[1798,17,1804,55,[1,"|>",0,[1798,17,1803,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Maybe Int, bar : Maybe Float }, er : Int }\n\na = { yi = { foo = Nothing, bar = Nothing }, er = 2 }\n"]],[1804,24,1804,55,[0,[[1804,24,1804,39,[2,["Review","Test"],"run"]],[1804,40,1804,55,[7,[1804,41,1804,54,[0,[[1804,41,1804,45,[2,[],"rule"]],[1804,46,1804,54,[2,[],"defaults"]]]]]]]]]]]],[1805,24,1805,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1806,11,1827,26,[1,"<|",1,[1806,11,1806,32,[0,[[1806,11,1806,15,[2,[],"test"]],[1806,16,1806,32,[5,"infers lambdas"]]]]],[1807,13,1827,26,[18,[[[1807,14,1807,16,[1]]],[1808,17,1827,26,[1,"|>",0,[1808,17,1815,55,[1,"|>",0,[1808,17,1814,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int -> Int, baz : Char }\ntype alias B = { bar : Int, foo : Int, baz : Char }\n\nfunc = { bar = \\i -> i + 1, foo = 3, baz = '2' }\n"]],[1815,24,1815,55,[0,[[1815,24,1815,39,[2,["Review","Test"],"run"]],[1815,40,1815,55,[7,[1815,41,1815,54,[0,[[1815,41,1815,45,[2,[],"rule"]],[1815,46,1815,54,[2,[],"defaults"]]]]]]]]]]]],[1816,24,1827,26,[0,[[1816,24,1816,48,[2,["Review","Test"],"expectErrors"]],[1817,25,1827,26,[9,[[1817,27,1826,4,[1,"|>",0,[1817,27,1818,120,[1,"|>",0,[1817,27,1817,40,[2,[],"unsortedError"]],[1818,32,1818,120,[0,[[1818,32,1818,53,[2,["Review","Test"],"atExactly"]],[1818,54,1818,120,[8,[[1818,56,1818,87,[[1818,56,1818,61,"start"],[1818,64,1818,87,[8,[[1818,66,1818,73,[[1818,66,1818,69,"row"],[1818,72,1818,73,[3,6]]]],[1818,75,1818,86,[[1818,75,1818,81,"column"],[1818,84,1818,85,[3,8]]]]]]]]],[1818,89,1818,119,[[1818,89,1818,92,"end"],[1818,95,1818,118,[8,[[1818,97,1818,104,[[1818,97,1818,100,"row"],[1818,103,1818,104,[3,6]]]],[1818,106,1818,117,[[1818,106,1818,112,"column"],[1818,115,1818,116,[3,9]]]]]]]]]]]]]]]]],[1819,32,1826,4,[0,[[1819,32,1819,53,[2,["Review","Test"],"whenFixed"]],[1820,33,1826,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int -> Int, baz : Char }\ntype alias B = { bar : Int, foo : Int, baz : Char }\n\nfunc = { foo = 3, bar = \\i -> i + 1, baz = '2' }\n"]]]]]]]]]]]]]]]]]]]],[1828,11,1849,26,[1,"<|",1,[1828,11,1828,60,[0,[[1828,11,1828,15,[2,[],"test"]],[1828,16,1828,60,[5,"can disambiguate by type with record types"]]]]],[1829,13,1849,26,[18,[[[1829,14,1829,16,[1]]],[1830,17,1849,26,[1,"|>",0,[1830,17,1837,55,[1,"|>",0,[1830,17,1836,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc = { bar = 2, foo = { a = 3, b = \"b\" }, baz = { a = 2, b = \"r\" }.a }\n"]],[1837,24,1837,55,[0,[[1837,24,1837,39,[2,["Review","Test"],"run"]],[1837,40,1837,55,[7,[1837,41,1837,54,[0,[[1837,41,1837,45,[2,[],"rule"]],[1837,46,1837,54,[2,[],"defaults"]]]]]]]]]]]],[1838,24,1849,26,[0,[[1838,24,1838,48,[2,["Review","Test"],"expectErrors"]],[1839,25,1849,26,[9,[[1839,27,1848,4,[1,"|>",0,[1839,27,1840,120,[1,"|>",0,[1839,27,1839,40,[2,[],"unsortedError"]],[1840,32,1840,120,[0,[[1840,32,1840,53,[2,["Review","Test"],"atExactly"]],[1840,54,1840,120,[8,[[1840,56,1840,87,[[1840,56,1840,61,"start"],[1840,64,1840,87,[8,[[1840,66,1840,73,[[1840,66,1840,69,"row"],[1840,72,1840,73,[3,6]]]],[1840,75,1840,86,[[1840,75,1840,81,"column"],[1840,84,1840,85,[3,8]]]]]]]]],[1840,89,1840,119,[[1840,89,1840,92,"end"],[1840,95,1840,118,[8,[[1840,97,1840,104,[[1840,97,1840,100,"row"],[1840,103,1840,104,[3,6]]]],[1840,106,1840,117,[[1840,106,1840,112,"column"],[1840,115,1840,116,[3,9]]]]]]]]]]]]]]]]],[1841,32,1848,4,[0,[[1841,32,1841,53,[2,["Review","Test"],"whenFixed"]],[1842,33,1848,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc = { foo = { a = 3, b = \"b\" }, bar = 2, baz = { a = 2, b = \"r\" }.a }\n"]]]]]]]]]]]]]]]]]]]],[1850,11,1878,26,[1,"<|",1,[1850,11,1850,48,[0,[[1850,11,1850,15,[2,[],"test"]],[1850,16,1850,48,[5,"infers let destructuring types"]]]]],[1851,13,1878,26,[18,[[[1851,14,1851,16,[1]]],[1852,17,1878,26,[1,"|>",0,[1852,17,1863,55,[1,"|>",0,[1852,17,1862,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc =\n    let\n        { bar, foo, baz } = A 1 \"string\" 3\n    in\n    { foo = foo, bar = bar, baz = baz }\n"]],[1863,24,1863,55,[0,[[1863,24,1863,39,[2,["Review","Test"],"run"]],[1863,40,1863,55,[7,[1863,41,1863,54,[0,[[1863,41,1863,45,[2,[],"rule"]],[1863,46,1863,54,[2,[],"defaults"]]]]]]]]]]]],[1864,24,1878,26,[0,[[1864,24,1864,48,[2,["Review","Test"],"expectErrors"]],[1865,25,1878,26,[9,[[1865,27,1877,4,[1,"|>",0,[1865,27,1866,121,[1,"|>",0,[1865,27,1865,40,[2,[],"unsortedError"]],[1866,32,1866,121,[0,[[1866,32,1866,53,[2,["Review","Test"],"atExactly"]],[1866,54,1866,121,[8,[[1866,56,1866,87,[[1866,56,1866,61,"start"],[1866,64,1866,87,[8,[[1866,66,1866,73,[[1866,66,1866,69,"row"],[1866,72,1866,73,[3,8]]]],[1866,75,1866,86,[[1866,75,1866,81,"column"],[1866,84,1866,85,[3,9]]]]]]]]],[1866,89,1866,120,[[1866,89,1866,92,"end"],[1866,95,1866,119,[8,[[1866,97,1866,104,[[1866,97,1866,100,"row"],[1866,103,1866,104,[3,8]]]],[1866,106,1866,118,[[1866,106,1866,112,"column"],[1866,115,1866,117,[3,10]]]]]]]]]]]]]]]]],[1867,32,1877,4,[0,[[1867,32,1867,53,[2,["Review","Test"],"whenFixed"]],[1867,54,1877,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc =\n    let\n        { foo, bar, baz } = A 1 \"string\" 3\n    in\n    { foo = foo, bar = bar, baz = baz }\n"]]]]]]]]]]]]]]]]]]]],[1879,11,1907,26,[1,"<|",1,[1879,11,1879,43,[0,[[1879,11,1879,15,[2,[],"test"]],[1879,16,1879,43,[5,"infers case pattern types"]]]]],[1880,13,1907,26,[18,[[[1880,14,1880,16,[1]]],[1881,17,1907,26,[1,"|>",0,[1881,17,1892,55,[1,"|>",0,[1881,17,1891,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case {foo = 1, bar = s, baz = 2} of\n        {bar, foo, baz} ->\n            True\n"]],[1892,24,1892,55,[0,[[1892,24,1892,39,[2,["Review","Test"],"run"]],[1892,40,1892,55,[7,[1892,41,1892,54,[0,[[1892,41,1892,45,[2,[],"rule"]],[1892,46,1892,54,[2,[],"defaults"]]]]]]]]]]]],[1893,24,1907,26,[0,[[1893,24,1893,48,[2,["Review","Test"],"expectErrors"]],[1894,25,1907,26,[9,[[1894,27,1906,4,[1,"|>",0,[1894,27,1895,121,[1,"|>",0,[1894,27,1894,40,[2,[],"unsortedError"]],[1895,32,1895,121,[0,[[1895,32,1895,53,[2,["Review","Test"],"atExactly"]],[1895,54,1895,121,[8,[[1895,56,1895,87,[[1895,56,1895,61,"start"],[1895,64,1895,87,[8,[[1895,66,1895,73,[[1895,66,1895,69,"row"],[1895,72,1895,73,[3,9]]]],[1895,75,1895,86,[[1895,75,1895,81,"column"],[1895,84,1895,85,[3,9]]]]]]]]],[1895,89,1895,120,[[1895,89,1895,92,"end"],[1895,95,1895,119,[8,[[1895,97,1895,104,[[1895,97,1895,100,"row"],[1895,103,1895,104,[3,9]]]],[1895,106,1895,118,[[1895,106,1895,112,"column"],[1895,115,1895,117,[3,10]]]]]]]]]]]]]]]]],[1896,32,1906,4,[0,[[1896,32,1896,53,[2,["Review","Test"],"whenFixed"]],[1896,54,1906,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case {foo = 1, bar = s, baz = 2} of\n        {foo, bar, baz} ->\n            True\n"]]]]]]]]]]]]]]]]]]]],[1908,11,1938,26,[1,"<|",1,[1908,11,1908,47,[0,[[1908,11,1908,15,[2,[],"test"]],[1908,16,1908,47,[5,"assigns case pattern bindings"]]]]],[1909,13,1938,26,[18,[[[1909,14,1909,16,[1]]],[1910,17,1938,26,[1,"|>",0,[1910,17,1922,55,[1,"|>",0,[1910,17,1921,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case s of\n        \"True\" -> True\n        \"False\" -> False\n        str -> {bar = str, foo = 1, baz = 2}\n"]],[1922,24,1922,55,[0,[[1922,24,1922,39,[2,["Review","Test"],"run"]],[1922,40,1922,55,[7,[1922,41,1922,54,[0,[[1922,41,1922,45,[2,[],"rule"]],[1922,46,1922,54,[2,[],"defaults"]]]]]]]]]]]],[1923,24,1938,26,[0,[[1923,24,1923,48,[2,["Review","Test"],"expectErrors"]],[1924,25,1938,26,[9,[[1924,27,1937,4,[1,"|>",0,[1924,27,1925,124,[1,"|>",0,[1924,27,1924,40,[2,[],"unsortedError"]],[1925,32,1925,124,[0,[[1925,32,1925,53,[2,["Review","Test"],"atExactly"]],[1925,54,1925,124,[8,[[1925,56,1925,89,[[1925,56,1925,61,"start"],[1925,64,1925,89,[8,[[1925,66,1925,74,[[1925,66,1925,69,"row"],[1925,72,1925,74,[3,11]]]],[1925,76,1925,88,[[1925,76,1925,82,"column"],[1925,85,1925,87,[3,16]]]]]]]]],[1925,91,1925,123,[[1925,91,1925,94,"end"],[1925,97,1925,122,[8,[[1925,99,1925,107,[[1925,99,1925,102,"row"],[1925,105,1925,107,[3,11]]]],[1925,109,1925,121,[[1925,109,1925,115,"column"],[1925,118,1925,120,[3,17]]]]]]]]]]]]]]]]],[1926,32,1937,4,[0,[[1926,32,1926,53,[2,["Review","Test"],"whenFixed"]],[1926,54,1937,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case s of\n        \"True\" -> True\n        \"False\" -> False\n        str -> {foo = 1, bar = str, baz = 2}\n"]]]]]]]]]]]]]]]]]]]],[1939,11,1967,26,[1,"<|",1,[1939,11,1939,51,[0,[[1939,11,1939,15,[2,[],"test"]],[1939,16,1939,51,[5,"infers record update with binding"]]]]],[1940,13,1967,26,[18,[[[1940,14,1940,16,[1]]],[1941,17,1967,26,[1,"|>",0,[1941,17,1952,55,[1,"|>",0,[1941,17,1951,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nr : A\nr = { foo = 1, bar = 2, baz = 3 }\n\nfunc =\n    { r | baz = 1, foo = 2 }\n"]],[1952,24,1952,55,[0,[[1952,24,1952,39,[2,["Review","Test"],"run"]],[1952,40,1952,55,[7,[1952,41,1952,54,[0,[[1952,41,1952,45,[2,[],"rule"]],[1952,46,1952,54,[2,[],"defaults"]]]]]]]]]]]],[1953,24,1967,26,[0,[[1953,24,1953,48,[2,["Review","Test"],"expectErrors"]],[1954,25,1967,26,[9,[[1954,27,1966,4,[1,"|>",0,[1954,27,1955,122,[1,"|>",0,[1954,27,1954,40,[2,[],"unsortedError"]],[1955,32,1955,122,[0,[[1955,32,1955,53,[2,["Review","Test"],"atExactly"]],[1955,54,1955,122,[8,[[1955,56,1955,88,[[1955,56,1955,61,"start"],[1955,64,1955,88,[8,[[1955,66,1955,74,[[1955,66,1955,69,"row"],[1955,72,1955,74,[3,10]]]],[1955,76,1955,87,[[1955,76,1955,82,"column"],[1955,85,1955,86,[3,5]]]]]]]]],[1955,90,1955,121,[[1955,90,1955,93,"end"],[1955,96,1955,120,[8,[[1955,98,1955,106,[[1955,98,1955,101,"row"],[1955,104,1955,106,[3,10]]]],[1955,108,1955,119,[[1955,108,1955,114,"column"],[1955,117,1955,118,[3,6]]]]]]]]]]]]]]]]],[1956,32,1966,4,[0,[[1956,32,1956,53,[2,["Review","Test"],"whenFixed"]],[1956,54,1966,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nr : A\nr = { foo = 1, bar = 2, baz = 3 }\n\nfunc =\n    { r | foo = 2 , baz = 1}\n"]]]]]]]]]]]]]]]]]]]],[1968,11,1994,26,[1,"<|",1,[1968,11,1968,38,[0,[[1968,11,1968,15,[2,[],"test"]],[1968,16,1968,38,[5,"unifies record types"]]]]],[1969,13,1994,26,[18,[[[1969,14,1969,16,[1]]],[1970,17,1994,26,[1,"|>",0,[1970,17,1980,55,[1,"|>",0,[1970,17,1979,4,[5,"module A exposing (..)\n\ntype alias A = { foo : String, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc r =\n    case List.head [ { r | baz = 1 }, { r | bar = 1 }, { r | foo = \"string\" } ] of\n        Just { bar, baz, foo } -> True\n        Nothing -> False\n"]],[1980,24,1980,55,[0,[[1980,24,1980,39,[2,["Review","Test"],"run"]],[1980,40,1980,55,[7,[1980,41,1980,54,[0,[[1980,41,1980,45,[2,[],"rule"]],[1980,46,1980,54,[2,[],"defaults"]]]]]]]]]]]],[1981,24,1994,26,[0,[[1981,24,1981,48,[2,["Review","Test"],"expectErrors"]],[1982,25,1994,26,[9,[[1982,27,1993,4,[1,"|>",0,[1982,27,1983,122,[1,"|>",0,[1982,27,1982,40,[2,[],"unsortedError"]],[1983,32,1983,122,[0,[[1983,32,1983,53,[2,["Review","Test"],"atExactly"]],[1983,54,1983,122,[8,[[1983,56,1983,88,[[1983,56,1983,61,"start"],[1983,64,1983,88,[8,[[1983,66,1983,73,[[1983,66,1983,69,"row"],[1983,72,1983,73,[3,8]]]],[1983,75,1983,87,[[1983,75,1983,81,"column"],[1983,84,1983,86,[3,14]]]]]]]]],[1983,90,1983,121,[[1983,90,1983,93,"end"],[1983,96,1983,120,[8,[[1983,98,1983,105,[[1983,98,1983,101,"row"],[1983,104,1983,105,[3,8]]]],[1983,107,1983,119,[[1983,107,1983,113,"column"],[1983,116,1983,118,[3,15]]]]]]]]]]]]]]]]],[1984,32,1993,4,[0,[[1984,32,1984,53,[2,["Review","Test"],"whenFixed"]],[1984,54,1993,4,[5,"module A exposing (..)\n\ntype alias A = { foo : String, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc r =\n    case List.head [ { r | baz = 1 }, { r | bar = 1 }, { r | foo = \"string\" } ] of\n        Just { foo, bar, baz } -> True\n        Nothing -> False\n"]]]]]]]]]]]]]]]]]]]],[1995,11,2007,50,[1,"<|",1,[1995,11,1995,50,[0,[[1995,11,1995,15,[2,[],"test"]],[1995,16,1995,50,[5,"assigns type vars when necessary"]]]]],[1996,13,2007,50,[18,[[[1996,14,1996,16,[1]]],[1997,17,2007,50,[1,"|>",0,[1997,17,2006,55,[1,"|>",0,[1997,17,2005,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : A\nfunc =\n    identity { foo = 1, bar = 2, baz = 3}\n"]],[2006,24,2006,55,[0,[[2006,24,2006,39,[2,["Review","Test"],"run"]],[2006,40,2006,55,[7,[2006,41,2006,54,[0,[[2006,41,2006,45,[2,[],"rule"]],[2006,46,2006,54,[2,[],"defaults"]]]]]]]]]]]],[2007,24,2007,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2008,11,2020,50,[1,"<|",1,[2008,11,2008,52,[0,[[2008,11,2008,15,[2,[],"test"]],[2008,16,2008,52,[5,"assigns type vars when necessary 2"]]]]],[2009,13,2020,50,[18,[[[2009,14,2009,16,[1]]],[2010,17,2020,50,[1,"|>",0,[2010,17,2019,55,[1,"|>",0,[2010,17,2018,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : a -> A\nfunc =\n    always { foo = 1, bar = 2, baz = 3}\n"]],[2019,24,2019,55,[0,[[2019,24,2019,39,[2,["Review","Test"],"run"]],[2019,40,2019,55,[7,[2019,41,2019,54,[0,[[2019,41,2019,45,[2,[],"rule"]],[2019,46,2019,54,[2,[],"defaults"]]]]]]]]]]]],[2020,24,2020,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2024,1,2409,10,[0,[[0],[1,[2024,1,2024,18,[[2024,1,2024,11,"subrecords"],[2024,14,2024,18,[1,[2024,14,2024,18,[[],"Test"]],[]]]]]],[2025,1,2409,10,[[2025,1,2025,11,"subrecords"],[],[2026,5,2409,10,[0,[[2026,5,2026,13,[2,[],"describe"]],[2026,14,2026,26,[5,"subrecords"]],[2027,9,2409,10,[9,[[2027,11,2055,26,[1,"<|",1,[2027,11,2027,56,[0,[[2027,11,2027,15,[2,[],"test"]],[2027,16,2027,56,[5,"are sorted by default in larger record"]]]]],[2028,13,2055,26,[18,[[[2028,14,2028,16,[1]]],[2029,17,2055,26,[1,"|>",0,[2029,17,2035,55,[1,"|>",0,[2029,17,2034,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { er = 1, yi = { bar = 2, foo = 1, baz = 3 } }\n"]],[2035,24,2035,55,[0,[[2035,24,2035,39,[2,["Review","Test"],"run"]],[2035,40,2035,55,[7,[2035,41,2035,54,[0,[[2035,41,2035,45,[2,[],"rule"]],[2035,46,2035,54,[2,[],"defaults"]]]]]]]]]]]],[2036,24,2055,26,[0,[[2036,24,2036,48,[2,["Review","Test"],"expectErrors"]],[2037,25,2055,26,[9,[[2037,27,2045,4,[1,"|>",0,[2037,27,2038,120,[1,"|>",0,[2037,27,2037,40,[2,[],"unsortedError"]],[2038,32,2038,120,[0,[[2038,32,2038,53,[2,["Review","Test"],"atExactly"]],[2038,54,2038,120,[8,[[2038,56,2038,87,[[2038,56,2038,61,"start"],[2038,64,2038,87,[8,[[2038,66,2038,73,[[2038,66,2038,69,"row"],[2038,72,2038,73,[3,5]]]],[2038,75,2038,86,[[2038,75,2038,81,"column"],[2038,84,2038,85,[3,8]]]]]]]]],[2038,89,2038,119,[[2038,89,2038,92,"end"],[2038,95,2038,118,[8,[[2038,97,2038,104,[[2038,97,2038,100,"row"],[2038,103,2038,104,[3,5]]]],[2038,106,2038,117,[[2038,106,2038,112,"column"],[2038,115,2038,116,[3,9]]]]]]]]]]]]]]]]],[2039,32,2045,4,[0,[[2039,32,2039,53,[2,["Review","Test"],"whenFixed"]],[2040,33,2045,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { yi = { bar = 2, foo = 1, baz = 3 } , er = 1}\n"]]]]]]],[2046,27,2054,4,[1,"|>",0,[2046,27,2047,122,[1,"|>",0,[2046,27,2046,40,[2,[],"unsortedError"]],[2047,32,2047,122,[0,[[2047,32,2047,53,[2,["Review","Test"],"atExactly"]],[2047,54,2047,122,[8,[[2047,56,2047,88,[[2047,56,2047,61,"start"],[2047,64,2047,88,[8,[[2047,66,2047,73,[[2047,66,2047,69,"row"],[2047,72,2047,73,[3,5]]]],[2047,75,2047,87,[[2047,75,2047,81,"column"],[2047,84,2047,86,[3,23]]]]]]]]],[2047,90,2047,121,[[2047,90,2047,93,"end"],[2047,96,2047,120,[8,[[2047,98,2047,105,[[2047,98,2047,101,"row"],[2047,104,2047,105,[3,5]]]],[2047,107,2047,119,[[2047,107,2047,113,"column"],[2047,116,2047,118,[3,24]]]]]]]]]]]]]]]]],[2048,32,2054,4,[0,[[2048,32,2048,53,[2,["Review","Test"],"whenFixed"]],[2049,33,2054,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { er = 1, yi = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[2056,11,2065,50,[1,"<|",1,[2056,11,2056,89,[0,[[2056,11,2056,15,[2,[],"test"]],[2056,16,2056,89,[5,"are not sorted by default from constructor when not part of constructor"]]]]],[2057,13,2065,50,[18,[[[2057,14,2057,16,[1]]],[2058,17,2065,50,[1,"|>",0,[2058,17,2064,55,[1,"|>",0,[2058,17,2063,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, baz = 3, foo = 1 }\n"]],[2064,24,2064,55,[0,[[2064,24,2064,39,[2,["Review","Test"],"run"]],[2064,40,2064,55,[7,[2064,41,2064,54,[0,[[2064,41,2064,45,[2,[],"rule"]],[2064,46,2064,54,[2,[],"defaults"]]]]]]]]]]]],[2065,24,2065,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2066,11,2081,50,[1,"<|",1,[2066,11,2066,87,[0,[[2066,11,2066,15,[2,[],"test"]],[2066,16,2066,87,[5,"are sorted from constructor when not part of constructor with setting"]]]]],[2067,13,2081,50,[18,[[[2067,14,2067,16,[1]]],[2068,17,2081,50,[1,"|>",0,[2068,17,2080,26,[1,"|>",0,[2068,17,2075,4,[5,"module A exposing (..)\n\ntype alias Rec = { yi : { bar : Int, baz : Int, foo : Int }, er : Int }\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\nfunc = { foo = 1, bar = 2, baz = 3 }\n"]],[2076,24,2080,26,[0,[[2076,24,2076,39,[2,["Review","Test"],"run"]],[2077,25,2080,26,[7,[2077,26,2079,36,[1,"|>",0,[2077,26,2078,65,[1,"|>",0,[2077,26,2077,34,[2,[],"defaults"]],[2078,32,2078,65,[2,[],"treatCustomTypeRecordsAsCanonical"]]]],[2079,32,2079,36,[2,[],"rule"]]]]]]]]]]],[2081,24,2081,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2082,11,2113,26,[1,"<|",1,[2082,11,2082,77,[0,[[2082,11,2082,15,[2,[],"test"]],[2082,16,2082,77,[5,"are sorted by default in larger record with type annotation"]]]]],[2083,13,2113,26,[18,[[[2083,14,2083,16,[1]]],[2084,17,2113,26,[1,"|>",0,[2084,17,2091,55,[1,"|>",0,[2084,17,2090,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { er = 1, yi = { bar = 2, foo = 1, baz = 3 } }\n"]],[2091,24,2091,55,[0,[[2091,24,2091,39,[2,["Review","Test"],"run"]],[2091,40,2091,55,[7,[2091,41,2091,54,[0,[[2091,41,2091,45,[2,[],"rule"]],[2091,46,2091,54,[2,[],"defaults"]]]]]]]]]]]],[2092,24,2113,26,[0,[[2092,24,2092,48,[2,["Review","Test"],"expectErrors"]],[2093,25,2113,26,[9,[[2093,27,2102,4,[1,"|>",0,[2093,27,2094,120,[1,"|>",0,[2093,27,2093,40,[2,[],"unsortedError"]],[2094,32,2094,120,[0,[[2094,32,2094,53,[2,["Review","Test"],"atExactly"]],[2094,54,2094,120,[8,[[2094,56,2094,87,[[2094,56,2094,61,"start"],[2094,64,2094,87,[8,[[2094,66,2094,73,[[2094,66,2094,69,"row"],[2094,72,2094,73,[3,6]]]],[2094,75,2094,86,[[2094,75,2094,81,"column"],[2094,84,2094,85,[3,8]]]]]]]]],[2094,89,2094,119,[[2094,89,2094,92,"end"],[2094,95,2094,118,[8,[[2094,97,2094,104,[[2094,97,2094,100,"row"],[2094,103,2094,104,[3,6]]]],[2094,106,2094,117,[[2094,106,2094,112,"column"],[2094,115,2094,116,[3,9]]]]]]]]]]]]]]]]],[2095,32,2102,4,[0,[[2095,32,2095,53,[2,["Review","Test"],"whenFixed"]],[2096,33,2102,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { yi = { bar = 2, foo = 1, baz = 3 } , er = 1}\n"]]]]]]],[2103,27,2112,4,[1,"|>",0,[2103,27,2104,122,[1,"|>",0,[2103,27,2103,40,[2,[],"unsortedError"]],[2104,32,2104,122,[0,[[2104,32,2104,53,[2,["Review","Test"],"atExactly"]],[2104,54,2104,122,[8,[[2104,56,2104,88,[[2104,56,2104,61,"start"],[2104,64,2104,88,[8,[[2104,66,2104,73,[[2104,66,2104,69,"row"],[2104,72,2104,73,[3,6]]]],[2104,75,2104,87,[[2104,75,2104,81,"column"],[2104,84,2104,86,[3,23]]]]]]]]],[2104,90,2104,121,[[2104,90,2104,93,"end"],[2104,96,2104,120,[8,[[2104,98,2104,105,[[2104,98,2104,101,"row"],[2104,104,2104,105,[3,6]]]],[2104,107,2104,119,[[2104,107,2104,113,"column"],[2104,116,2104,118,[3,24]]]]]]]]]]]]]]]]],[2105,32,2112,4,[0,[[2105,32,2105,53,[2,["Review","Test"],"whenFixed"]],[2106,33,2112,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { er = 1, yi = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[2114,11,2142,26,[1,"<|",1,[2114,11,2114,57,[0,[[2114,11,2114,15,[2,[],"test"]],[2114,16,2114,57,[5,"are sorted by default in sub sub record"]]]]],[2115,13,2142,26,[18,[[[2115,14,2115,16,[1]]],[2116,17,2142,26,[1,"|>",0,[2116,17,2122,55,[1,"|>",0,[2116,17,2121,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc = { outer = { er = 1, yi = { bar = 2, foo = 1, baz = 3 } } }\n"]],[2122,24,2122,55,[0,[[2122,24,2122,39,[2,["Review","Test"],"run"]],[2122,40,2122,55,[7,[2122,41,2122,54,[0,[[2122,41,2122,45,[2,[],"rule"]],[2122,46,2122,54,[2,[],"defaults"]]]]]]]]]]]],[2123,24,2142,26,[0,[[2123,24,2123,48,[2,["Review","Test"],"expectErrors"]],[2124,25,2142,26,[9,[[2124,27,2132,4,[1,"|>",0,[2124,27,2125,122,[1,"|>",0,[2124,27,2124,40,[2,[],"unsortedError"]],[2125,32,2125,122,[0,[[2125,32,2125,53,[2,["Review","Test"],"atExactly"]],[2125,54,2125,122,[8,[[2125,56,2125,88,[[2125,56,2125,61,"start"],[2125,64,2125,88,[8,[[2125,66,2125,73,[[2125,66,2125,69,"row"],[2125,72,2125,73,[3,5]]]],[2125,75,2125,87,[[2125,75,2125,81,"column"],[2125,84,2125,86,[3,18]]]]]]]]],[2125,90,2125,121,[[2125,90,2125,93,"end"],[2125,96,2125,120,[8,[[2125,98,2125,105,[[2125,98,2125,101,"row"],[2125,104,2125,105,[3,5]]]],[2125,107,2125,119,[[2125,107,2125,113,"column"],[2125,116,2125,118,[3,19]]]]]]]]]]]]]]]]],[2126,32,2132,4,[0,[[2126,32,2126,53,[2,["Review","Test"],"whenFixed"]],[2127,33,2132,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc = { outer = { yi = { bar = 2, foo = 1, baz = 3 } , er = 1} }\n"]]]]]]],[2133,27,2141,4,[1,"|>",0,[2133,27,2134,122,[1,"|>",0,[2133,27,2133,40,[2,[],"unsortedError"]],[2134,32,2134,122,[0,[[2134,32,2134,53,[2,["Review","Test"],"atExactly"]],[2134,54,2134,122,[8,[[2134,56,2134,88,[[2134,56,2134,61,"start"],[2134,64,2134,88,[8,[[2134,66,2134,73,[[2134,66,2134,69,"row"],[2134,72,2134,73,[3,5]]]],[2134,75,2134,87,[[2134,75,2134,81,"column"],[2134,84,2134,86,[3,33]]]]]]]]],[2134,90,2134,121,[[2134,90,2134,93,"end"],[2134,96,2134,120,[8,[[2134,98,2134,105,[[2134,98,2134,101,"row"],[2134,104,2134,105,[3,5]]]],[2134,107,2134,119,[[2134,107,2134,113,"column"],[2134,116,2134,118,[3,34]]]]]]]]]]]]]]]]],[2135,32,2141,4,[0,[[2135,32,2135,53,[2,["Review","Test"],"whenFixed"]],[2136,33,2141,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc = { outer = { er = 1, yi = { foo = 1, bar = 2, baz = 3 } } }\n"]]]]]]]]]]]]]]]]]]]],[2143,11,2162,26,[1,"<|",1,[2143,11,2143,79,[0,[[2143,11,2143,15,[2,[],"test"]],[2143,16,2143,79,[5,"are sorted by default in larger record with nested expression"]]]]],[2144,13,2162,26,[18,[[[2144,14,2144,16,[1]]],[2145,17,2162,26,[1,"|>",0,[2145,17,2151,55,[1,"|>",0,[2145,17,2150,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc = { yi = (0, [ { bar = 2, foo = 1, baz = 3 } ]), er = 1 }\n"]],[2151,24,2151,55,[0,[[2151,24,2151,39,[2,["Review","Test"],"run"]],[2151,40,2151,55,[7,[2151,41,2151,54,[0,[[2151,41,2151,45,[2,[],"rule"]],[2151,46,2151,54,[2,[],"defaults"]]]]]]]]]]]],[2152,24,2162,26,[0,[[2152,24,2152,48,[2,["Review","Test"],"expectErrors"]],[2153,25,2162,26,[9,[[2153,27,2161,4,[1,"|>",0,[2153,27,2154,122,[1,"|>",0,[2153,27,2153,40,[2,[],"unsortedError"]],[2154,32,2154,122,[0,[[2154,32,2154,53,[2,["Review","Test"],"atExactly"]],[2154,54,2154,122,[8,[[2154,56,2154,88,[[2154,56,2154,61,"start"],[2154,64,2154,88,[8,[[2154,66,2154,73,[[2154,66,2154,69,"row"],[2154,72,2154,73,[3,5]]]],[2154,75,2154,87,[[2154,75,2154,81,"column"],[2154,84,2154,86,[3,21]]]]]]]]],[2154,90,2154,121,[[2154,90,2154,93,"end"],[2154,96,2154,120,[8,[[2154,98,2154,105,[[2154,98,2154,101,"row"],[2154,104,2154,105,[3,5]]]],[2154,107,2154,119,[[2154,107,2154,113,"column"],[2154,116,2154,118,[3,22]]]]]]]]]]]]]]]]],[2155,32,2161,4,[0,[[2155,32,2155,53,[2,["Review","Test"],"whenFixed"]],[2156,33,2161,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc = { yi = (0, [ { foo = 1, bar = 2, baz = 3 } ]), er = 1 }\n"]]]]]]]]]]]]]]]]]]]],[2163,11,2194,26,[1,"<|",1,[2163,11,2163,59,[0,[[2163,11,2163,15,[2,[],"test"]],[2163,16,2163,59,[5,"are sorted by default in type annotations"]]]]],[2164,13,2194,26,[18,[[[2164,14,2164,16,[1]]],[2165,17,2194,26,[1,"|>",0,[2165,17,2172,55,[1,"|>",0,[2165,17,2171,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : { er : Int, yi : { bar : Int, foo : Int, baz : Int } }\nfunc = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 }\n"]],[2172,24,2172,55,[0,[[2172,24,2172,39,[2,["Review","Test"],"run"]],[2172,40,2172,55,[7,[2172,41,2172,54,[0,[[2172,41,2172,45,[2,[],"rule"]],[2172,46,2172,54,[2,[],"defaults"]]]]]]]]]]]],[2173,24,2194,26,[0,[[2173,24,2173,48,[2,["Review","Test"],"expectErrors"]],[2174,25,2194,26,[9,[[2174,27,2183,4,[1,"|>",0,[2174,27,2175,120,[1,"|>",0,[2174,27,2174,40,[2,[],"unsortedError"]],[2175,32,2175,120,[0,[[2175,32,2175,53,[2,["Review","Test"],"atExactly"]],[2175,54,2175,120,[8,[[2175,56,2175,87,[[2175,56,2175,61,"start"],[2175,64,2175,87,[8,[[2175,66,2175,73,[[2175,66,2175,69,"row"],[2175,72,2175,73,[3,5]]]],[2175,75,2175,86,[[2175,75,2175,81,"column"],[2175,84,2175,85,[3,8]]]]]]]]],[2175,89,2175,119,[[2175,89,2175,92,"end"],[2175,95,2175,118,[8,[[2175,97,2175,104,[[2175,97,2175,100,"row"],[2175,103,2175,104,[3,5]]]],[2175,106,2175,117,[[2175,106,2175,112,"column"],[2175,115,2175,116,[3,9]]]]]]]]]]]]]]]]],[2176,32,2183,4,[0,[[2176,32,2176,53,[2,["Review","Test"],"whenFixed"]],[2177,33,2183,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : { yi : { bar : Int, foo : Int, baz : Int } , er : Int}\nfunc = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 }\n"]]]]]]],[2184,27,2193,4,[1,"|>",0,[2184,27,2185,122,[1,"|>",0,[2184,27,2184,40,[2,[],"unsortedError"]],[2185,32,2185,122,[0,[[2185,32,2185,53,[2,["Review","Test"],"atExactly"]],[2185,54,2185,122,[8,[[2185,56,2185,88,[[2185,56,2185,61,"start"],[2185,64,2185,88,[8,[[2185,66,2185,73,[[2185,66,2185,69,"row"],[2185,72,2185,73,[3,5]]]],[2185,75,2185,87,[[2185,75,2185,81,"column"],[2185,84,2185,86,[3,25]]]]]]]]],[2185,90,2185,121,[[2185,90,2185,93,"end"],[2185,96,2185,120,[8,[[2185,98,2185,105,[[2185,98,2185,101,"row"],[2185,104,2185,105,[3,5]]]],[2185,107,2185,119,[[2185,107,2185,113,"column"],[2185,116,2185,118,[3,26]]]]]]]]]]]]]]]]],[2186,32,2193,4,[0,[[2186,32,2186,53,[2,["Review","Test"],"whenFixed"]],[2187,33,2193,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : { er : Int, yi : { foo : Int, bar : Int, baz : Int } }\nfunc = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 }\n"]]]]]]]]]]]]]]]]]]]],[2195,11,2226,26,[1,"<|",1,[2195,11,2195,76,[0,[[2195,11,2195,15,[2,[],"test"]],[2195,16,2195,76,[5,"are sorted by default in sub sub record of type annotation"]]]]],[2196,13,2226,26,[18,[[[2196,14,2196,16,[1]]],[2197,17,2226,26,[1,"|>",0,[2197,17,2204,55,[1,"|>",0,[2197,17,2203,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc : { outer : { er : Int, yi : { bar : Int, foo : Int, baz : Int } } }\nfunc = { outer = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 } }\n"]],[2204,24,2204,55,[0,[[2204,24,2204,39,[2,["Review","Test"],"run"]],[2204,40,2204,55,[7,[2204,41,2204,54,[0,[[2204,41,2204,45,[2,[],"rule"]],[2204,46,2204,54,[2,[],"defaults"]]]]]]]]]]]],[2205,24,2226,26,[0,[[2205,24,2205,48,[2,["Review","Test"],"expectErrors"]],[2206,25,2226,26,[9,[[2206,27,2215,4,[1,"|>",0,[2206,27,2207,122,[1,"|>",0,[2206,27,2206,40,[2,[],"unsortedError"]],[2207,32,2207,122,[0,[[2207,32,2207,53,[2,["Review","Test"],"atExactly"]],[2207,54,2207,122,[8,[[2207,56,2207,88,[[2207,56,2207,61,"start"],[2207,64,2207,88,[8,[[2207,66,2207,73,[[2207,66,2207,69,"row"],[2207,72,2207,73,[3,5]]]],[2207,75,2207,87,[[2207,75,2207,81,"column"],[2207,84,2207,86,[3,18]]]]]]]]],[2207,90,2207,121,[[2207,90,2207,93,"end"],[2207,96,2207,120,[8,[[2207,98,2207,105,[[2207,98,2207,101,"row"],[2207,104,2207,105,[3,5]]]],[2207,107,2207,119,[[2207,107,2207,113,"column"],[2207,116,2207,118,[3,19]]]]]]]]]]]]]]]]],[2208,32,2215,4,[0,[[2208,32,2208,53,[2,["Review","Test"],"whenFixed"]],[2209,33,2215,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc : { outer : { yi : { bar : Int, foo : Int, baz : Int } , er : Int} }\nfunc = { outer = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 } }\n"]]]]]]],[2216,27,2225,4,[1,"|>",0,[2216,27,2217,122,[1,"|>",0,[2216,27,2216,40,[2,[],"unsortedError"]],[2217,32,2217,122,[0,[[2217,32,2217,53,[2,["Review","Test"],"atExactly"]],[2217,54,2217,122,[8,[[2217,56,2217,88,[[2217,56,2217,61,"start"],[2217,64,2217,88,[8,[[2217,66,2217,73,[[2217,66,2217,69,"row"],[2217,72,2217,73,[3,5]]]],[2217,75,2217,87,[[2217,75,2217,81,"column"],[2217,84,2217,86,[3,35]]]]]]]]],[2217,90,2217,121,[[2217,90,2217,93,"end"],[2217,96,2217,120,[8,[[2217,98,2217,105,[[2217,98,2217,101,"row"],[2217,104,2217,105,[3,5]]]],[2217,107,2217,119,[[2217,107,2217,113,"column"],[2217,116,2217,118,[3,36]]]]]]]]]]]]]]]]],[2218,32,2225,4,[0,[[2218,32,2218,53,[2,["Review","Test"],"whenFixed"]],[2219,33,2225,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc : { outer : { er : Int, yi : { foo : Int, bar : Int, baz : Int } } }\nfunc = { outer = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 } }\n"]]]]]]]]]]]]]]]]]]]],[2227,11,2248,26,[1,"<|",1,[2227,11,2227,98,[0,[[2227,11,2227,15,[2,[],"test"]],[2227,16,2227,98,[5,"are sorted by default in larger record with nested expression in type annotation"]]]]],[2228,13,2248,26,[18,[[[2228,14,2228,16,[1]]],[2229,17,2248,26,[1,"|>",0,[2229,17,2236,55,[1,"|>",0,[2229,17,2235,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc : { yi : (Int, List { bar : Int, foo : Int, baz : Int }), er : Int }\nfunc = { yi = (0, []), er = 1 }\n"]],[2236,24,2236,55,[0,[[2236,24,2236,39,[2,["Review","Test"],"run"]],[2236,40,2236,55,[7,[2236,41,2236,54,[0,[[2236,41,2236,45,[2,[],"rule"]],[2236,46,2236,54,[2,[],"defaults"]]]]]]]]]]]],[2237,24,2248,26,[0,[[2237,24,2237,48,[2,["Review","Test"],"expectErrors"]],[2238,25,2248,26,[9,[[2238,27,2247,4,[1,"|>",0,[2238,27,2239,122,[1,"|>",0,[2238,27,2238,40,[2,[],"unsortedError"]],[2239,32,2239,122,[0,[[2239,32,2239,53,[2,["Review","Test"],"atExactly"]],[2239,54,2239,122,[8,[[2239,56,2239,88,[[2239,56,2239,61,"start"],[2239,64,2239,88,[8,[[2239,66,2239,73,[[2239,66,2239,69,"row"],[2239,72,2239,73,[3,5]]]],[2239,75,2239,87,[[2239,75,2239,81,"column"],[2239,84,2239,86,[3,26]]]]]]]]],[2239,90,2239,121,[[2239,90,2239,93,"end"],[2239,96,2239,120,[8,[[2239,98,2239,105,[[2239,98,2239,101,"row"],[2239,104,2239,105,[3,5]]]],[2239,107,2239,119,[[2239,107,2239,113,"column"],[2239,116,2239,118,[3,27]]]]]]]]]]]]]]]]],[2240,32,2247,4,[0,[[2240,32,2240,53,[2,["Review","Test"],"whenFixed"]],[2241,33,2247,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc : { yi : (Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\nfunc = { yi = (0, []), er = 1 }\n"]]]]]]]]]]]]]]]]]]]],[2249,11,2272,26,[1,"<|",1,[2249,11,2249,62,[0,[[2249,11,2249,15,[2,[],"test"]],[2249,16,2249,62,[5,"are not sorted with setting in larger record"]]]]],[2250,13,2272,26,[18,[[[2250,14,2250,16,[1]]],[2251,17,2272,26,[1,"|>",0,[2251,17,2261,26,[1,"|>",0,[2251,17,2256,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { er = 1, yi = { bar = 2, baz = 3, foo = 1 } }\n"]],[2257,24,2261,26,[0,[[2257,24,2257,39,[2,["Review","Test"],"run"]],[2258,25,2261,26,[7,[2258,26,2260,36,[1,"|>",0,[2258,26,2259,56,[1,"|>",0,[2258,26,2258,34,[2,[],"defaults"]],[2259,32,2259,56,[2,[],"treatSubrecordsAsUnknown"]]]],[2260,32,2260,36,[2,[],"rule"]]]]]]]]]]],[2262,24,2272,26,[0,[[2262,24,2262,48,[2,["Review","Test"],"expectErrors"]],[2263,25,2272,26,[9,[[2263,27,2271,4,[1,"|>",0,[2263,27,2264,120,[1,"|>",0,[2263,27,2263,40,[2,[],"unsortedError"]],[2264,32,2264,120,[0,[[2264,32,2264,53,[2,["Review","Test"],"atExactly"]],[2264,54,2264,120,[8,[[2264,56,2264,87,[[2264,56,2264,61,"start"],[2264,64,2264,87,[8,[[2264,66,2264,73,[[2264,66,2264,69,"row"],[2264,72,2264,73,[3,5]]]],[2264,75,2264,86,[[2264,75,2264,81,"column"],[2264,84,2264,85,[3,8]]]]]]]]],[2264,89,2264,119,[[2264,89,2264,92,"end"],[2264,95,2264,118,[8,[[2264,97,2264,104,[[2264,97,2264,100,"row"],[2264,103,2264,104,[3,5]]]],[2264,106,2264,117,[[2264,106,2264,112,"column"],[2264,115,2264,116,[3,9]]]]]]]]]]]]]]]]],[2265,32,2271,4,[0,[[2265,32,2265,53,[2,["Review","Test"],"whenFixed"]],[2266,33,2271,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { yi = { bar = 2, baz = 3, foo = 1 } , er = 1}\n"]]]]]]]]]]]]]]]]]]]],[2273,11,2298,26,[1,"<|",1,[2273,11,2273,83,[0,[[2273,11,2273,15,[2,[],"test"]],[2273,16,2273,83,[5,"are not sorted with setting in larger record with type annotation"]]]]],[2274,13,2298,26,[18,[[[2274,14,2274,16,[1]]],[2275,17,2298,26,[1,"|>",0,[2275,17,2286,26,[1,"|>",0,[2275,17,2281,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { er = 1, yi = { bar = 2, baz = 3, foo = 1 } }\n"]],[2282,24,2286,26,[0,[[2282,24,2282,39,[2,["Review","Test"],"run"]],[2283,25,2286,26,[7,[2283,26,2285,36,[1,"|>",0,[2283,26,2284,56,[1,"|>",0,[2283,26,2283,34,[2,[],"defaults"]],[2284,32,2284,56,[2,[],"treatSubrecordsAsUnknown"]]]],[2285,32,2285,36,[2,[],"rule"]]]]]]]]]]],[2287,24,2298,26,[0,[[2287,24,2287,48,[2,["Review","Test"],"expectErrors"]],[2288,25,2298,26,[9,[[2288,27,2297,4,[1,"|>",0,[2288,27,2289,120,[1,"|>",0,[2288,27,2288,40,[2,[],"unsortedError"]],[2289,32,2289,120,[0,[[2289,32,2289,53,[2,["Review","Test"],"atExactly"]],[2289,54,2289,120,[8,[[2289,56,2289,87,[[2289,56,2289,61,"start"],[2289,64,2289,87,[8,[[2289,66,2289,73,[[2289,66,2289,69,"row"],[2289,72,2289,73,[3,6]]]],[2289,75,2289,86,[[2289,75,2289,81,"column"],[2289,84,2289,85,[3,8]]]]]]]]],[2289,89,2289,119,[[2289,89,2289,92,"end"],[2289,95,2289,118,[8,[[2289,97,2289,104,[[2289,97,2289,100,"row"],[2289,103,2289,104,[3,6]]]],[2289,106,2289,117,[[2289,106,2289,112,"column"],[2289,115,2289,116,[3,9]]]]]]]]]]]]]]]]],[2290,32,2297,4,[0,[[2290,32,2290,53,[2,["Review","Test"],"whenFixed"]],[2291,33,2297,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { yi = { bar = 2, baz = 3, foo = 1 } , er = 1}\n"]]]]]]]]]]]]]]]]]]]],[2299,11,2314,50,[1,"<|",1,[2299,11,2299,62,[0,[[2299,11,2299,15,[2,[],"test"]],[2299,16,2299,62,[5,"are not sorted for custom types with setting"]]]]],[2300,13,2314,50,[18,[[[2300,14,2300,16,[1]]],[2301,17,2314,50,[1,"|>",0,[2301,17,2313,26,[1,"|>",0,[2301,17,2308,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = A { bar = 2, baz = 3, foo = 1 }\n"]],[2309,24,2313,26,[0,[[2309,24,2309,39,[2,["Review","Test"],"run"]],[2310,25,2313,26,[7,[2310,26,2312,36,[1,"|>",0,[2310,26,2311,56,[1,"|>",0,[2310,26,2310,34,[2,[],"defaults"]],[2311,32,2311,56,[2,[],"treatSubrecordsAsUnknown"]]]],[2312,32,2312,36,[2,[],"rule"]]]]]]]]]]],[2314,24,2314,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2315,11,2338,26,[1,"<|",1,[2315,11,2315,72,[0,[[2315,11,2315,15,[2,[],"test"]],[2315,16,2315,72,[5,"are sorted with setting when not in context from alias"]]]]],[2316,13,2338,26,[18,[[[2316,14,2316,16,[1]]],[2317,17,2338,26,[1,"|>",0,[2317,17,2327,26,[1,"|>",0,[2317,17,2322,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { bar = 2, baz = 3, foo = 1 }\n"]],[2323,24,2327,26,[0,[[2323,24,2323,39,[2,["Review","Test"],"run"]],[2324,25,2327,26,[7,[2324,26,2326,36,[1,"|>",0,[2324,26,2325,61,[1,"|>",0,[2324,26,2324,34,[2,[],"defaults"]],[2325,32,2325,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2326,32,2326,36,[2,[],"rule"]]]]]]]]]]],[2328,24,2338,26,[0,[[2328,24,2328,48,[2,["Review","Test"],"expectErrors"]],[2329,25,2338,26,[9,[[2329,27,2337,4,[1,"|>",0,[2329,27,2330,120,[1,"|>",0,[2329,27,2329,40,[2,[],"unsortedError"]],[2330,32,2330,120,[0,[[2330,32,2330,53,[2,["Review","Test"],"atExactly"]],[2330,54,2330,120,[8,[[2330,56,2330,87,[[2330,56,2330,61,"start"],[2330,64,2330,87,[8,[[2330,66,2330,73,[[2330,66,2330,69,"row"],[2330,72,2330,73,[3,5]]]],[2330,75,2330,86,[[2330,75,2330,81,"column"],[2330,84,2330,85,[3,8]]]]]]]]],[2330,89,2330,119,[[2330,89,2330,92,"end"],[2330,95,2330,118,[8,[[2330,97,2330,104,[[2330,97,2330,100,"row"],[2330,103,2330,104,[3,5]]]],[2330,106,2330,117,[[2330,106,2330,112,"column"],[2330,115,2330,116,[3,9]]]]]]]]]]]]]]]]],[2331,32,2337,4,[0,[[2331,32,2331,53,[2,["Review","Test"],"whenFixed"]],[2332,33,2337,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { foo = 1 , bar = 2, baz = 3}\n"]]]]]]]]]]]]]]]]]]]],[2339,11,2362,26,[1,"<|",1,[2339,11,2339,78,[0,[[2339,11,2339,15,[2,[],"test"]],[2339,16,2339,78,[5,"are sorted with setting when not in context from constructor"]]]]],[2340,13,2362,26,[18,[[[2340,14,2340,16,[1]]],[2341,17,2362,26,[1,"|>",0,[2341,17,2351,26,[1,"|>",0,[2341,17,2346,4,[5,"module A exposing (..)\n\ntype A = A { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { bar = 2, baz = 3, foo = 1 }\n"]],[2347,24,2351,26,[0,[[2347,24,2347,39,[2,["Review","Test"],"run"]],[2348,25,2351,26,[7,[2348,26,2350,36,[1,"|>",0,[2348,26,2349,61,[1,"|>",0,[2348,26,2348,34,[2,[],"defaults"]],[2349,32,2349,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2350,32,2350,36,[2,[],"rule"]]]]]]]]]]],[2352,24,2362,26,[0,[[2352,24,2352,48,[2,["Review","Test"],"expectErrors"]],[2353,25,2362,26,[9,[[2353,27,2361,4,[1,"|>",0,[2353,27,2354,120,[1,"|>",0,[2353,27,2353,40,[2,[],"unsortedError"]],[2354,32,2354,120,[0,[[2354,32,2354,53,[2,["Review","Test"],"atExactly"]],[2354,54,2354,120,[8,[[2354,56,2354,87,[[2354,56,2354,61,"start"],[2354,64,2354,87,[8,[[2354,66,2354,73,[[2354,66,2354,69,"row"],[2354,72,2354,73,[3,5]]]],[2354,75,2354,86,[[2354,75,2354,81,"column"],[2354,84,2354,85,[3,8]]]]]]]]],[2354,89,2354,119,[[2354,89,2354,92,"end"],[2354,95,2354,118,[8,[[2354,97,2354,104,[[2354,97,2354,100,"row"],[2354,103,2354,104,[3,5]]]],[2354,106,2354,117,[[2354,106,2354,112,"column"],[2354,115,2354,116,[3,9]]]]]]]]]]]]]]]]],[2355,32,2361,4,[0,[[2355,32,2355,53,[2,["Review","Test"],"whenFixed"]],[2356,33,2361,4,[5,"module A exposing (..)\n\ntype A = A { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { foo = 1 , bar = 2, baz = 3}\n"]]]]]]]]]]]]]]]]]]]],[2363,11,2381,26,[1,"<|",1,[2363,11,2363,63,[0,[[2363,11,2363,15,[2,[],"test"]],[2363,16,2363,63,[5,"handle ambiguity with subrecords with setting"]]]]],[2364,13,2381,26,[18,[[[2364,14,2364,16,[1]]],[2365,17,2381,26,[1,"|>",0,[2365,17,2378,26,[1,"|>",0,[2365,17,2372,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = { bar = 2, baz = 3, foo = 1 }\n"]],[2373,24,2378,26,[0,[[2373,24,2373,39,[2,["Review","Test"],"run"]],[2374,25,2378,26,[7,[2374,26,2377,36,[1,"|>",0,[2374,26,2376,64,[1,"|>",0,[2374,26,2375,61,[1,"|>",0,[2374,26,2374,34,[2,[],"defaults"]],[2375,32,2375,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2376,32,2376,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[2377,32,2377,36,[2,[],"rule"]]]]]]]]]]],[2379,24,2381,26,[0,[[2379,24,2379,48,[2,["Review","Test"],"expectErrors"]],[2380,25,2381,26,[9,[[2380,27,2380,106,[0,[[2380,27,2380,47,[2,[],"ambiguousRecordError"]],[2380,48,2380,74,[9,[[2380,50,2380,60,[5,"A.A arg0"]],[2380,62,2380,72,[5,"A.B arg0"]]]]],[2380,75,2380,106,[5,"{ bar = 2, baz = 3, foo = 1 }"]]]]]]]]]]]]]]]]]],[2382,11,2408,26,[1,"<|",1,[2382,11,2382,38,[0,[[2382,11,2382,15,[2,[],"test"]],[2382,16,2382,38,[5,"do not take priority"]]]]],[2383,13,2408,26,[18,[[[2383,14,2383,16,[1]]],[2384,17,2408,26,[1,"|>",0,[2384,17,2396,26,[1,"|>",0,[2384,17,2390,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\ntype alias B = { baz : Int, bar : Int, foo : Int }\n\nfunc = { foo = 1, bar = 2, baz = 3 }\n"]],[2391,24,2396,26,[0,[[2391,24,2391,39,[2,["Review","Test"],"run"]],[2392,25,2396,26,[7,[2392,26,2395,36,[1,"|>",0,[2392,26,2394,64,[1,"|>",0,[2392,26,2393,61,[1,"|>",0,[2392,26,2392,34,[2,[],"defaults"]],[2393,32,2393,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2394,32,2394,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[2395,32,2395,36,[2,[],"rule"]]]]]]]]]]],[2397,24,2408,26,[0,[[2397,24,2397,48,[2,["Review","Test"],"expectErrors"]],[2398,25,2408,26,[9,[[2398,27,2407,4,[1,"|>",0,[2398,27,2399,120,[1,"|>",0,[2398,27,2398,40,[2,[],"unsortedError"]],[2399,32,2399,120,[0,[[2399,32,2399,53,[2,["Review","Test"],"atExactly"]],[2399,54,2399,120,[8,[[2399,56,2399,87,[[2399,56,2399,61,"start"],[2399,64,2399,87,[8,[[2399,66,2399,73,[[2399,66,2399,69,"row"],[2399,72,2399,73,[3,6]]]],[2399,75,2399,86,[[2399,75,2399,81,"column"],[2399,84,2399,85,[3,8]]]]]]]]],[2399,89,2399,119,[[2399,89,2399,92,"end"],[2399,95,2399,118,[8,[[2399,97,2399,104,[[2399,97,2399,100,"row"],[2399,103,2399,104,[3,6]]]],[2399,106,2399,117,[[2399,106,2399,112,"column"],[2399,115,2399,116,[3,9]]]]]]]]]]]]]]]]],[2400,32,2407,4,[0,[[2400,32,2400,53,[2,["Review","Test"],"whenFixed"]],[2401,33,2407,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\ntype alias B = { baz : Int, bar : Int, foo : Int }\n\nfunc = { baz = 3 , bar = 2, foo = 1}\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2412,1,2565,10,[0,[[0],[1,[2412,1,2412,22,[[2412,1,2412,15,"typeVarSupport"],[2412,18,2412,22,[1,[2412,18,2412,22,[[],"Test"]],[]]]]]],[2413,1,2565,10,[[2413,1,2413,15,"typeVarSupport"],[],[2414,5,2565,10,[0,[[2414,5,2414,13,[2,[],"describe"]],[2414,14,2414,38,[5,"handles type variables"]],[2415,9,2565,10,[9,[[2415,11,2439,26,[1,"<|",1,[2415,11,2415,33,[0,[[2415,11,2415,15,[2,[],"test"]],[2415,16,2415,33,[5,"in custom types"]]]]],[2416,13,2439,26,[18,[[[2416,14,2416,16,[1]]],[2417,17,2439,26,[1,"|>",0,[2417,17,2426,55,[1,"|>",0,[2417,17,2425,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Maybe A\na = Just { bar = 2, foo = 1, baz = 3 }\n"]],[2426,24,2426,55,[0,[[2426,24,2426,39,[2,["Review","Test"],"run"]],[2426,40,2426,55,[7,[2426,41,2426,54,[0,[[2426,41,2426,45,[2,[],"rule"]],[2426,46,2426,54,[2,[],"defaults"]]]]]]]]]]]],[2427,24,2439,26,[0,[[2427,24,2427,48,[2,["Review","Test"],"expectErrors"]],[2428,25,2439,26,[9,[[2428,27,2438,4,[1,"|>",0,[2428,27,2429,122,[1,"|>",0,[2428,27,2428,40,[2,[],"unsortedError"]],[2429,32,2429,122,[0,[[2429,32,2429,53,[2,["Review","Test"],"atExactly"]],[2429,54,2429,122,[8,[[2429,56,2429,88,[[2429,56,2429,61,"start"],[2429,64,2429,88,[8,[[2429,66,2429,73,[[2429,66,2429,69,"row"],[2429,72,2429,73,[3,8]]]],[2429,75,2429,87,[[2429,75,2429,81,"column"],[2429,84,2429,86,[3,10]]]]]]]]],[2429,90,2429,121,[[2429,90,2429,93,"end"],[2429,96,2429,120,[8,[[2429,98,2429,105,[[2429,98,2429,101,"row"],[2429,104,2429,105,[3,8]]]],[2429,107,2429,119,[[2429,107,2429,113,"column"],[2429,116,2429,118,[3,11]]]]]]]]]]]]]]]]],[2430,32,2438,4,[0,[[2430,32,2430,53,[2,["Review","Test"],"whenFixed"]],[2430,54,2438,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Maybe A\na = Just { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2440,11,2468,26,[1,"<|",1,[2440,11,2440,48,[0,[[2440,11,2440,15,[2,[],"test"]],[2440,16,2440,48,[5,"in non-dependency custom types"]]]]],[2441,13,2468,26,[18,[[[2441,14,2441,16,[1]]],[2442,17,2468,26,[1,"|>",0,[2442,17,2453,55,[1,"|>",0,[2442,17,2452,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom a = Custom a\n\na : Custom A\na = Custom { bar = 2, foo = 1, baz = 3 }\n"]],[2453,24,2453,55,[0,[[2453,24,2453,39,[2,["Review","Test"],"run"]],[2453,40,2453,55,[7,[2453,41,2453,54,[0,[[2453,41,2453,45,[2,[],"rule"]],[2453,46,2453,54,[2,[],"defaults"]]]]]]]]]]]],[2454,24,2468,26,[0,[[2454,24,2454,48,[2,["Review","Test"],"expectErrors"]],[2455,25,2468,26,[9,[[2455,27,2467,4,[1,"|>",0,[2455,27,2456,124,[1,"|>",0,[2455,27,2455,40,[2,[],"unsortedError"]],[2456,32,2456,124,[0,[[2456,32,2456,53,[2,["Review","Test"],"atExactly"]],[2456,54,2456,124,[8,[[2456,56,2456,89,[[2456,56,2456,61,"start"],[2456,64,2456,89,[8,[[2456,66,2456,74,[[2456,66,2456,69,"row"],[2456,72,2456,74,[3,10]]]],[2456,76,2456,88,[[2456,76,2456,82,"column"],[2456,85,2456,87,[3,12]]]]]]]]],[2456,91,2456,123,[[2456,91,2456,94,"end"],[2456,97,2456,122,[8,[[2456,99,2456,107,[[2456,99,2456,102,"row"],[2456,105,2456,107,[3,10]]]],[2456,109,2456,121,[[2456,109,2456,115,"column"],[2456,118,2456,120,[3,13]]]]]]]]]]]]]]]]],[2457,32,2467,4,[0,[[2457,32,2457,53,[2,["Review","Test"],"whenFixed"]],[2457,54,2467,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom a = Custom a\n\na : Custom A\na = Custom { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2469,11,2497,26,[1,"<|",1,[2469,11,2469,28,[0,[[2469,11,2469,15,[2,[],"test"]],[2469,16,2469,28,[5,"in aliases"]]]]],[2470,13,2497,26,[18,[[[2470,14,2470,16,[1]]],[2471,17,2497,26,[1,"|>",0,[2471,17,2482,55,[1,"|>",0,[2471,17,2481,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias Mebbe a = a\n\na : Mebbe A\na = { bar = 2, foo = 1, baz = 3 }\n"]],[2482,24,2482,55,[0,[[2482,24,2482,39,[2,["Review","Test"],"run"]],[2482,40,2482,55,[7,[2482,41,2482,54,[0,[[2482,41,2482,45,[2,[],"rule"]],[2482,46,2482,54,[2,[],"defaults"]]]]]]]]]]]],[2483,24,2497,26,[0,[[2483,24,2483,48,[2,["Review","Test"],"expectErrors"]],[2484,25,2497,26,[9,[[2484,27,2496,4,[1,"|>",0,[2484,27,2485,122,[1,"|>",0,[2484,27,2484,40,[2,[],"unsortedError"]],[2485,32,2485,122,[0,[[2485,32,2485,53,[2,["Review","Test"],"atExactly"]],[2485,54,2485,122,[8,[[2485,56,2485,88,[[2485,56,2485,61,"start"],[2485,64,2485,88,[8,[[2485,66,2485,74,[[2485,66,2485,69,"row"],[2485,72,2485,74,[3,10]]]],[2485,76,2485,87,[[2485,76,2485,82,"column"],[2485,85,2485,86,[3,5]]]]]]]]],[2485,90,2485,121,[[2485,90,2485,93,"end"],[2485,96,2485,120,[8,[[2485,98,2485,106,[[2485,98,2485,101,"row"],[2485,104,2485,106,[3,10]]]],[2485,108,2485,119,[[2485,108,2485,114,"column"],[2485,117,2485,118,[3,6]]]]]]]]]]]]]]]]],[2486,32,2496,4,[0,[[2486,32,2486,53,[2,["Review","Test"],"whenFixed"]],[2486,54,2496,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias Mebbe a = a\n\na : Mebbe A\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2498,11,2522,26,[1,"<|",1,[2498,11,2498,42,[0,[[2498,11,2498,15,[2,[],"test"]],[2498,16,2498,42,[5,"can match with type vars"]]]]],[2499,13,2522,26,[18,[[[2499,14,2499,16,[1]]],[2500,17,2522,26,[1,"|>",0,[2500,17,2509,55,[1,"|>",0,[2500,17,2508,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { foo : String, bar : Int, baz : Int }\nfunc =\n    { bar = 1, foo = \"foo\", baz = 3 }\n"]],[2509,24,2509,55,[0,[[2509,24,2509,39,[2,["Review","Test"],"run"]],[2509,40,2509,55,[7,[2509,41,2509,54,[0,[[2509,41,2509,45,[2,[],"rule"]],[2509,46,2509,54,[2,[],"defaults"]]]]]]]]]]]],[2510,24,2522,26,[0,[[2510,24,2510,48,[2,["Review","Test"],"expectErrors"]],[2511,25,2522,26,[9,[[2511,27,2521,4,[1,"|>",0,[2511,27,2512,120,[1,"|>",0,[2511,27,2511,40,[2,[],"unsortedError"]],[2512,32,2512,120,[0,[[2512,32,2512,53,[2,["Review","Test"],"atExactly"]],[2512,54,2512,120,[8,[[2512,56,2512,87,[[2512,56,2512,61,"start"],[2512,64,2512,87,[8,[[2512,66,2512,73,[[2512,66,2512,69,"row"],[2512,72,2512,73,[3,8]]]],[2512,75,2512,86,[[2512,75,2512,81,"column"],[2512,84,2512,85,[3,5]]]]]]]]],[2512,89,2512,119,[[2512,89,2512,92,"end"],[2512,95,2512,118,[8,[[2512,97,2512,104,[[2512,97,2512,100,"row"],[2512,103,2512,104,[3,8]]]],[2512,106,2512,117,[[2512,106,2512,112,"column"],[2512,115,2512,116,[3,6]]]]]]]]]]]]]]]]],[2513,32,2521,4,[0,[[2513,32,2513,53,[2,["Review","Test"],"whenFixed"]],[2513,54,2521,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { foo : String, bar : Int, baz : Int }\nfunc =\n    { foo = \"foo\", bar = 1, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2523,11,2547,26,[1,"<|",1,[2523,11,2523,38,[0,[[2523,11,2523,15,[2,[],"test"]],[2523,16,2523,38,[5,"can assign type vars"]]]]],[2524,13,2547,26,[18,[[[2524,14,2524,16,[1]]],[2525,17,2547,26,[1,"|>",0,[2525,17,2534,55,[1,"|>",0,[2525,17,2533,4,[5,"module A exposing (..)\n\ntype alias A a b = { foo : a, bar : b, baz : Maybe Int }\ntype alias B a = { bar : a, foo : a, baz : Maybe Int }\n\nfunc : { foo : String, bar : Int, baz : Maybe a }\nfunc =\n    { bar = 1, foo = \"foo\", baz = Nothing }\n"]],[2534,24,2534,55,[0,[[2534,24,2534,39,[2,["Review","Test"],"run"]],[2534,40,2534,55,[7,[2534,41,2534,54,[0,[[2534,41,2534,45,[2,[],"rule"]],[2534,46,2534,54,[2,[],"defaults"]]]]]]]]]]]],[2535,24,2547,26,[0,[[2535,24,2535,48,[2,["Review","Test"],"expectErrors"]],[2536,25,2547,26,[9,[[2536,27,2546,4,[1,"|>",0,[2536,27,2537,120,[1,"|>",0,[2536,27,2536,40,[2,[],"unsortedError"]],[2537,32,2537,120,[0,[[2537,32,2537,53,[2,["Review","Test"],"atExactly"]],[2537,54,2537,120,[8,[[2537,56,2537,87,[[2537,56,2537,61,"start"],[2537,64,2537,87,[8,[[2537,66,2537,73,[[2537,66,2537,69,"row"],[2537,72,2537,73,[3,8]]]],[2537,75,2537,86,[[2537,75,2537,81,"column"],[2537,84,2537,85,[3,5]]]]]]]]],[2537,89,2537,119,[[2537,89,2537,92,"end"],[2537,95,2537,118,[8,[[2537,97,2537,104,[[2537,97,2537,100,"row"],[2537,103,2537,104,[3,8]]]],[2537,106,2537,117,[[2537,106,2537,112,"column"],[2537,115,2537,116,[3,6]]]]]]]]]]]]]]]]],[2538,32,2546,4,[0,[[2538,32,2538,53,[2,["Review","Test"],"whenFixed"]],[2538,54,2546,4,[5,"module A exposing (..)\n\ntype alias A a b = { foo : a, bar : b, baz : Maybe Int }\ntype alias B a = { bar : a, foo : a, baz : Maybe Int }\n\nfunc : { foo : String, bar : Int, baz : Maybe a }\nfunc =\n    { foo = \"foo\", bar = 1, baz = Nothing }\n"]]]]]]]]]]]]]]]]]]]],[2548,11,2564,50,[1,"<|",1,[2548,11,2548,83,[0,[[2548,11,2548,15,[2,[],"test"]],[2548,16,2548,83,[5,"does not recurse infinitely by a typevar being assigned to itself"]]]]],[2549,13,2564,50,[18,[[[2549,14,2549,16,[1]]],[2550,17,2564,50,[1,"|>",0,[2550,17,2563,55,[1,"|>",0,[2550,17,2562,4,[5,"module A exposing (..)\n\ntype alias C z = { y : z }\n\nc : C a -> a\nc = .y\n\nfoo : { a | field : Int } -> C x -> Int\nfoo _ _ = 0\n\nrecord =\n    { f = foo (c 1) (c 2) }\n"]],[2563,24,2563,55,[0,[[2563,24,2563,39,[2,["Review","Test"],"run"]],[2563,40,2563,55,[7,[2563,41,2563,54,[0,[[2563,41,2563,45,[2,[],"rule"]],[2563,46,2563,54,[2,[],"defaults"]]]]]]]]]]]],[2564,24,2564,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2568,1,2615,10,[0,[[0],[1,[2568,1,2568,28,[[2568,1,2568,21,"typecheckUnambiguous"],[2568,24,2568,28,[1,[2568,24,2568,28,[[],"Test"]],[]]]]]],[2569,1,2615,10,[[2569,1,2569,21,"typecheckUnambiguous"],[],[2570,5,2615,10,[0,[[2570,5,2570,13,[2,[],"describe"]],[2570,14,2570,35,[5,"unambiguous records"]],[2571,9,2615,10,[9,[[2571,11,2590,26,[1,"<|",1,[2571,11,2571,49,[0,[[2571,11,2571,15,[2,[],"test"]],[2571,16,2571,49,[5,"are not type-checked by default"]]]]],[2572,13,2590,26,[18,[[[2572,14,2572,16,[1]]],[2573,17,2590,26,[1,"|>",0,[2573,17,2579,55,[1,"|>",0,[2573,17,2578,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, foo = 1.1, baz = 3 }\n"]],[2579,24,2579,55,[0,[[2579,24,2579,39,[2,["Review","Test"],"run"]],[2579,40,2579,55,[7,[2579,41,2579,54,[0,[[2579,41,2579,45,[2,[],"rule"]],[2579,46,2579,54,[2,[],"defaults"]]]]]]]]]]]],[2580,24,2590,26,[0,[[2580,24,2580,48,[2,["Review","Test"],"expectErrors"]],[2581,25,2590,26,[9,[[2581,27,2589,4,[1,"|>",0,[2581,27,2582,120,[1,"|>",0,[2581,27,2581,40,[2,[],"unsortedError"]],[2582,32,2582,120,[0,[[2582,32,2582,53,[2,["Review","Test"],"atExactly"]],[2582,54,2582,120,[8,[[2582,56,2582,87,[[2582,56,2582,61,"start"],[2582,64,2582,87,[8,[[2582,66,2582,73,[[2582,66,2582,69,"row"],[2582,72,2582,73,[3,5]]]],[2582,75,2582,86,[[2582,75,2582,81,"column"],[2582,84,2582,85,[3,8]]]]]]]]],[2582,89,2582,119,[[2582,89,2582,92,"end"],[2582,95,2582,118,[8,[[2582,97,2582,104,[[2582,97,2582,100,"row"],[2582,103,2582,104,[3,5]]]],[2582,106,2582,117,[[2582,106,2582,112,"column"],[2582,115,2582,116,[3,9]]]]]]]]]]]]]]]]],[2583,32,2589,4,[0,[[2583,32,2583,53,[2,["Review","Test"],"whenFixed"]],[2584,33,2589,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { foo = 1.1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2591,11,2614,26,[1,"<|",1,[2591,11,2591,46,[0,[[2591,11,2591,15,[2,[],"test"]],[2591,16,2591,46,[5,"are type-checked with option"]]]]],[2592,13,2614,26,[18,[[[2592,14,2592,16,[1]]],[2593,17,2614,26,[1,"|>",0,[2593,17,2603,26,[1,"|>",0,[2593,17,2598,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, foo = 1.1, baz = 3 }\n"]],[2599,24,2603,26,[0,[[2599,24,2599,39,[2,["Review","Test"],"run"]],[2600,25,2603,26,[7,[2600,26,2602,36,[1,"|>",0,[2600,26,2601,51,[1,"|>",0,[2600,26,2600,34,[2,[],"defaults"]],[2601,32,2601,51,[2,[],"typecheckAllRecords"]]]],[2602,32,2602,36,[2,[],"rule"]]]]]]]]]]],[2604,24,2614,26,[0,[[2604,24,2604,48,[2,["Review","Test"],"expectErrors"]],[2605,25,2614,26,[9,[[2605,27,2613,4,[1,"|>",0,[2605,27,2606,120,[1,"|>",0,[2605,27,2605,40,[2,[],"unsortedError"]],[2606,32,2606,120,[0,[[2606,32,2606,53,[2,["Review","Test"],"atExactly"]],[2606,54,2606,120,[8,[[2606,56,2606,87,[[2606,56,2606,61,"start"],[2606,64,2606,87,[8,[[2606,66,2606,73,[[2606,66,2606,69,"row"],[2606,72,2606,73,[3,5]]]],[2606,75,2606,86,[[2606,75,2606,81,"column"],[2606,84,2606,85,[3,8]]]]]]]]],[2606,89,2606,119,[[2606,89,2606,92,"end"],[2606,95,2606,118,[8,[[2606,97,2606,104,[[2606,97,2606,100,"row"],[2606,103,2606,104,[3,5]]]],[2606,106,2606,117,[[2606,106,2606,112,"column"],[2606,115,2606,116,[3,9]]]]]]]]]]]]]]]]],[2607,32,2613,4,[0,[[2607,32,2607,53,[2,["Review","Test"],"whenFixed"]],[2608,33,2613,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, baz = 3 , foo = 1.1}\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2618,1,2627,10,[0,[[0],[1,[2618,1,2618,57,[[2618,1,2618,19,"unknownRecordError"],[2618,22,2618,57,[6,[2618,22,2618,28,[1,[2618,22,2618,28,[[],"String"]],[]]],[2618,32,2618,57,[1,[2618,32,2618,57,[["Review","Test"],"ExpectedError"]],[]]]]]]]],[2619,1,2627,10,[[2619,1,2619,19,"unknownRecordError"],[[2619,20,2619,25,[11,"under"]]],[2620,5,2627,10,[0,[[2620,5,2620,22,[2,["Review","Test"],"error"]],[2621,9,2627,10,[8,[[2621,11,2624,14,[[2621,11,2621,18,"details"],[2622,13,2624,14,[9,[[2622,15,2622,165,[5,"This record did not correspond with any known alias or custom type argument record, so whether or not its fields are sorted could not be determined!"]],[2623,15,2623,129,[5,"Create a type alias for this record type, or remove reportUnknownRecordsWithoutFix from your rule configuration."]]]]]]],[2625,11,2626,9,[[2625,11,2625,18,"message"],[2625,21,2625,50,[5,"Unknown record encountered."]]]],[2626,11,2627,9,[[2626,11,2626,16,"under"],[2626,19,2626,24,[2,[],"under"]]]]]]]]]]]]]]],[2630,1,2704,10,[0,[[0],[1,[2630,1,2630,22,[[2630,1,2630,15,"unknownRecords"],[2630,18,2630,22,[1,[2630,18,2630,22,[[],"Test"]],[]]]]]],[2631,1,2704,10,[[2631,1,2631,15,"unknownRecords"],[],[2632,5,2704,10,[0,[[2632,5,2632,13,[2,[],"describe"]],[2632,14,2632,31,[5,"unknown records"]],[2633,9,2704,10,[9,[[2633,11,2640,50,[1,"<|",1,[2633,11,2633,60,[0,[[2633,11,2633,15,[2,[],"test"]],[2633,16,2633,60,[5,"passes unknown record that is alphabetical"]]]]],[2634,13,2640,50,[18,[[[2634,14,2634,16,[1]]],[2635,17,2640,50,[1,"|>",0,[2635,17,2639,55,[1,"|>",0,[2635,17,2638,4,[5,"module A exposing (..)\n\na = { a = 1, b = 2, c = 3 }\n"]],[2639,24,2639,55,[0,[[2639,24,2639,39,[2,["Review","Test"],"run"]],[2639,40,2639,55,[7,[2639,41,2639,54,[0,[[2639,41,2639,45,[2,[],"rule"]],[2639,46,2639,54,[2,[],"defaults"]]]]]]]]]]]],[2640,24,2640,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2641,11,2654,26,[1,"<|",1,[2641,11,2641,63,[0,[[2641,11,2641,15,[2,[],"test"]],[2641,16,2641,63,[5,"fails unknown record that is not alphabetical"]]]]],[2642,13,2654,26,[18,[[[2642,14,2642,16,[1]]],[2643,17,2654,26,[1,"|>",0,[2643,17,2647,55,[1,"|>",0,[2643,17,2646,4,[5,"module A exposing (..)\n\na = { c = 3, b = 2, a = 1 }\n"]],[2647,24,2647,55,[0,[[2647,24,2647,39,[2,["Review","Test"],"run"]],[2647,40,2647,55,[7,[2647,41,2647,54,[0,[[2647,41,2647,45,[2,[],"rule"]],[2647,46,2647,54,[2,[],"defaults"]]]]]]]]]]]],[2648,24,2654,26,[0,[[2648,24,2648,48,[2,["Review","Test"],"expectErrors"]],[2649,25,2654,26,[9,[[2649,27,2653,4,[1,"|>",0,[2649,27,2649,40,[2,[],"unsortedError"]],[2650,32,2653,4,[0,[[2650,32,2650,53,[2,["Review","Test"],"whenFixed"]],[2650,54,2653,4,[5,"module A exposing (..)\n\na = { a = 1 , b = 2, c = 3}\n"]]]]]]]]]]]]]]]]]]]],[2655,11,2666,50,[1,"<|",1,[2655,11,2655,76,[0,[[2655,11,2655,15,[2,[],"test"]],[2655,16,2655,76,[5,"passes unknown record that is not alphabetical with option"]]]]],[2656,13,2666,50,[18,[[[2656,14,2656,16,[1]]],[2657,17,2666,50,[1,"|>",0,[2657,17,2665,26,[1,"|>",0,[2657,17,2660,4,[5,"module A exposing (..)\n\na = { c = 3, b = 2, a = 1 }\n"]],[2661,24,2665,26,[0,[[2661,24,2661,39,[2,["Review","Test"],"run"]],[2662,25,2665,26,[7,[2662,26,2664,36,[1,"|>",0,[2662,26,2663,55,[1,"|>",0,[2662,26,2662,34,[2,[],"defaults"]],[2663,32,2663,55,[2,[],"doNotSortUnknownRecords"]]]],[2664,32,2664,36,[2,[],"rule"]]]]]]]]]]],[2666,24,2666,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2667,11,2679,73,[1,"<|",1,[2667,11,2667,77,[0,[[2667,11,2667,15,[2,[],"test"]],[2667,16,2667,77,[5,"reports unknown record that is not alphabetical with option"]]]]],[2668,13,2679,73,[18,[[[2668,14,2668,16,[1]]],[2669,17,2679,73,[1,"|>",0,[2669,17,2677,26,[1,"|>",0,[2669,17,2672,4,[5,"module A exposing (..)\n\na = { c = 3, b = 2, a = 1 }\n"]],[2673,24,2677,26,[0,[[2673,24,2673,39,[2,["Review","Test"],"run"]],[2674,25,2677,26,[7,[2674,26,2676,36,[1,"|>",0,[2674,26,2675,62,[1,"|>",0,[2674,26,2674,34,[2,[],"defaults"]],[2675,32,2675,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[2676,32,2676,36,[2,[],"rule"]]]]]]]]]]],[2678,24,2679,73,[0,[[2678,24,2678,48,[2,["Review","Test"],"expectErrors"]],[2679,25,2679,73,[9,[[2679,27,2679,71,[0,[[2679,27,2679,45,[2,[],"unknownRecordError"]],[2679,46,2679,71,[5,"{ c = 3, b = 2, a = 1 }"]]]]]]]]]]]]]]]]]],[2680,11,2691,50,[1,"<|",1,[2680,11,2680,83,[0,[[2680,11,2680,15,[2,[],"test"]],[2680,16,2680,83,[5,"does not report unknown record with single field even with option"]]]]],[2681,13,2691,50,[18,[[[2681,14,2681,16,[1]]],[2682,17,2691,50,[1,"|>",0,[2682,17,2690,26,[1,"|>",0,[2682,17,2685,4,[5,"module A exposing (..)\n\na = { c = 3 }\n"]],[2686,24,2690,26,[0,[[2686,24,2686,39,[2,["Review","Test"],"run"]],[2687,25,2690,26,[7,[2687,26,2689,36,[1,"|>",0,[2687,26,2688,62,[1,"|>",0,[2687,26,2687,34,[2,[],"defaults"]],[2688,32,2688,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[2689,32,2689,36,[2,[],"rule"]]]]]]]]]]],[2691,24,2691,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2692,11,2703,50,[1,"<|",1,[2692,11,2692,62,[0,[[2692,11,2692,15,[2,[],"test"]],[2692,16,2692,62,[5,"does not report unit record even with option"]]]]],[2693,13,2703,50,[18,[[[2693,14,2693,16,[1]]],[2694,17,2703,50,[1,"|>",0,[2694,17,2702,26,[1,"|>",0,[2694,17,2697,4,[5,"module A exposing (..)\n\na = {}\n"]],[2698,24,2702,26,[0,[[2698,24,2698,39,[2,["Review","Test"],"run"]],[2699,25,2702,26,[7,[2699,26,2701,36,[1,"|>",0,[2699,26,2700,62,[1,"|>",0,[2699,26,2699,34,[2,[],"defaults"]],[2700,32,2700,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[2701,32,2701,36,[2,[],"rule"]]]]]]]]]]],[2703,24,2703,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2707,1,2715,10,[0,[[0],[1,[2707,1,2707,42,[[2707,1,2707,14,"unsortedError"],[2707,17,2707,42,[1,[2707,17,2707,42,[["Review","Test"],"ExpectedError"]],[]]]]]],[2708,1,2715,10,[[2708,1,2708,14,"unsortedError"],[],[2709,5,2715,10,[0,[[2709,5,2709,22,[2,["Review","Test"],"error"]],[2710,9,2715,10,[8,[[2710,11,2712,14,[[2710,11,2710,18,"details"],[2711,13,2712,14,[9,[[2711,15,2711,118,[5,"Record fields were found out of order.  They should be sorted as specified in the rule configuration."]]]]]]],[2713,11,2714,9,[[2713,11,2713,18,"message"],[2713,21,2713,52,[5,"Record fields are not sorted."]]]],[2714,11,2715,9,[[2714,11,2714,16,"under"],[2714,19,2714,22,[5,"{"]]]]]]]]]]]]]]],[2718,1,2912,10,[0,[[0],[1,[2718,1,2718,28,[[2718,1,2718,21,"usesRecordFieldTypes"],[2718,24,2718,28,[1,[2718,24,2718,28,[[],"Test"]],[]]]]]],[2719,1,2912,10,[[2719,1,2719,21,"usesRecordFieldTypes"],[],[2720,5,2912,10,[0,[[2720,5,2720,13,[2,[],"describe"]],[2720,14,2720,39,[5,"uses record field types"]],[2721,9,2912,10,[9,[[2721,11,2758,26,[1,"<|",1,[2721,11,2721,48,[0,[[2721,11,2721,15,[2,[],"test"]],[2721,16,2721,48,[5,"can disambiguate by field type"]]]]],[2722,13,2758,26,[18,[[[2722,14,2722,16,[1]]],[2723,17,2758,26,[1,"|>",0,[2723,17,2732,55,[1,"|>",0,[2723,17,2731,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : {a : A, b : B}\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]],[2732,24,2732,55,[0,[[2732,24,2732,39,[2,["Review","Test"],"run"]],[2732,40,2732,55,[7,[2732,41,2732,54,[0,[[2732,41,2732,45,[2,[],"rule"]],[2732,46,2732,54,[2,[],"defaults"]]]]]]]]]]]],[2733,24,2758,26,[0,[[2733,24,2733,48,[2,["Review","Test"],"expectErrors"]],[2734,25,2758,26,[9,[[2734,27,2745,4,[1,"|>",0,[2734,27,2735,122,[1,"|>",0,[2734,27,2734,40,[2,[],"unsortedError"]],[2735,32,2735,122,[0,[[2735,32,2735,53,[2,["Review","Test"],"atExactly"]],[2735,54,2735,122,[8,[[2735,56,2735,88,[[2735,56,2735,61,"start"],[2735,64,2735,88,[8,[[2735,66,2735,73,[[2735,66,2735,69,"row"],[2735,72,2735,73,[3,8]]]],[2735,75,2735,87,[[2735,75,2735,81,"column"],[2735,84,2735,86,[3,11]]]]]]]]],[2735,90,2735,121,[[2735,90,2735,93,"end"],[2735,96,2735,120,[8,[[2735,98,2735,105,[[2735,98,2735,101,"row"],[2735,104,2735,105,[3,8]]]],[2735,107,2735,119,[[2735,107,2735,113,"column"],[2735,116,2735,118,[3,12]]]]]]]]]]]]]]]]],[2736,32,2745,4,[0,[[2736,32,2736,53,[2,["Review","Test"],"whenFixed"]],[2737,33,2745,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : {a : A, b : B}\nfunc =\n    { a = { foo = 2, bar = 1, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]],[2746,27,2757,4,[1,"|>",0,[2746,27,2747,122,[1,"|>",0,[2746,27,2746,40,[2,[],"unsortedError"]],[2747,32,2747,122,[0,[[2747,32,2747,53,[2,["Review","Test"],"atExactly"]],[2747,54,2747,122,[8,[[2747,56,2747,88,[[2747,56,2747,61,"start"],[2747,64,2747,88,[8,[[2747,66,2747,73,[[2747,66,2747,69,"row"],[2747,72,2747,73,[3,8]]]],[2747,75,2747,87,[[2747,75,2747,81,"column"],[2747,84,2747,86,[3,46]]]]]]]]],[2747,90,2747,121,[[2747,90,2747,93,"end"],[2747,96,2747,120,[8,[[2747,98,2747,105,[[2747,98,2747,101,"row"],[2747,104,2747,105,[3,8]]]],[2747,107,2747,119,[[2747,107,2747,113,"column"],[2747,116,2747,118,[3,47]]]]]]]]]]]]]]]]],[2748,32,2757,4,[0,[[2748,32,2748,53,[2,["Review","Test"],"whenFixed"]],[2749,33,2757,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : {a : A, b : B}\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { bar = 2, foo = 1, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[2759,11,2793,26,[1,"<|",1,[2759,11,2759,62,[0,[[2759,11,2759,15,[2,[],"test"]],[2759,16,2759,62,[5,"can disambiguate by field type without alias"]]]]],[2760,13,2793,26,[18,[[[2760,14,2760,16,[1]]],[2761,17,2793,26,[1,"|>",0,[2761,17,2769,55,[1,"|>",0,[2761,17,2768,4,[5,"module A exposing (..)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int }, b : { bar : Int, foo : Int, baz : Int } }\n\nfunc : A\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]],[2769,24,2769,55,[0,[[2769,24,2769,39,[2,["Review","Test"],"run"]],[2769,40,2769,55,[7,[2769,41,2769,54,[0,[[2769,41,2769,45,[2,[],"rule"]],[2769,46,2769,54,[2,[],"defaults"]]]]]]]]]]]],[2770,24,2793,26,[0,[[2770,24,2770,48,[2,["Review","Test"],"expectErrors"]],[2771,25,2793,26,[9,[[2771,27,2781,4,[1,"|>",0,[2771,27,2772,122,[1,"|>",0,[2771,27,2771,40,[2,[],"unsortedError"]],[2772,32,2772,122,[0,[[2772,32,2772,53,[2,["Review","Test"],"atExactly"]],[2772,54,2772,122,[8,[[2772,56,2772,88,[[2772,56,2772,61,"start"],[2772,64,2772,88,[8,[[2772,66,2772,73,[[2772,66,2772,69,"row"],[2772,72,2772,73,[3,7]]]],[2772,75,2772,87,[[2772,75,2772,81,"column"],[2772,84,2772,86,[3,11]]]]]]]]],[2772,90,2772,121,[[2772,90,2772,93,"end"],[2772,96,2772,120,[8,[[2772,98,2772,105,[[2772,98,2772,101,"row"],[2772,104,2772,105,[3,7]]]],[2772,107,2772,119,[[2772,107,2772,113,"column"],[2772,116,2772,118,[3,12]]]]]]]]]]]]]]]]],[2773,32,2781,4,[0,[[2773,32,2773,53,[2,["Review","Test"],"whenFixed"]],[2774,33,2781,4,[5,"module A exposing (..)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int }, b : { bar : Int, foo : Int, baz : Int } }\n\nfunc : A\nfunc =\n    { a = { foo = 2, bar = 1, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]],[2782,27,2792,4,[1,"|>",0,[2782,27,2783,122,[1,"|>",0,[2782,27,2782,40,[2,[],"unsortedError"]],[2783,32,2783,122,[0,[[2783,32,2783,53,[2,["Review","Test"],"atExactly"]],[2783,54,2783,122,[8,[[2783,56,2783,88,[[2783,56,2783,61,"start"],[2783,64,2783,88,[8,[[2783,66,2783,73,[[2783,66,2783,69,"row"],[2783,72,2783,73,[3,7]]]],[2783,75,2783,87,[[2783,75,2783,81,"column"],[2783,84,2783,86,[3,46]]]]]]]]],[2783,90,2783,121,[[2783,90,2783,93,"end"],[2783,96,2783,120,[8,[[2783,98,2783,105,[[2783,98,2783,101,"row"],[2783,104,2783,105,[3,7]]]],[2783,107,2783,119,[[2783,107,2783,113,"column"],[2783,116,2783,118,[3,47]]]]]]]]]]]]]]]]],[2784,32,2792,4,[0,[[2784,32,2784,53,[2,["Review","Test"],"whenFixed"]],[2785,33,2792,4,[5,"module A exposing (..)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int }, b : { bar : Int, foo : Int, baz : Int } }\n\nfunc : A\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { bar = 2, foo = 1, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[2794,11,2828,26,[1,"<|",1,[2794,11,2794,42,[0,[[2794,11,2794,15,[2,[],"test"]],[2794,16,2794,42,[5,"can disambiguate by type"]]]]],[2795,13,2828,26,[18,[[[2795,14,2795,16,[1]]],[2796,17,2828,26,[1,"|>",0,[2796,17,2804,55,[1,"|>",0,[2796,17,2803,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : { bar : Int, foo : Int, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]],[2804,24,2804,55,[0,[[2804,24,2804,39,[2,["Review","Test"],"run"]],[2804,40,2804,55,[7,[2804,41,2804,54,[0,[[2804,41,2804,45,[2,[],"rule"]],[2804,46,2804,54,[2,[],"defaults"]]]]]]]]]]]],[2805,24,2828,26,[0,[[2805,24,2805,48,[2,["Review","Test"],"expectErrors"]],[2806,25,2828,26,[9,[[2806,27,2816,4,[1,"|>",0,[2806,27,2807,120,[1,"|>",0,[2806,27,2806,40,[2,[],"unsortedError"]],[2807,32,2807,120,[0,[[2807,32,2807,53,[2,["Review","Test"],"atExactly"]],[2807,54,2807,120,[8,[[2807,56,2807,87,[[2807,56,2807,61,"start"],[2807,64,2807,87,[8,[[2807,66,2807,73,[[2807,66,2807,69,"row"],[2807,72,2807,73,[3,6]]]],[2807,75,2807,86,[[2807,75,2807,81,"column"],[2807,84,2807,85,[3,8]]]]]]]]],[2807,89,2807,119,[[2807,89,2807,92,"end"],[2807,95,2807,118,[8,[[2807,97,2807,104,[[2807,97,2807,100,"row"],[2807,103,2807,104,[3,6]]]],[2807,106,2807,117,[[2807,106,2807,112,"column"],[2807,115,2807,116,[3,9]]]]]]]]]]]]]]]]],[2808,32,2816,4,[0,[[2808,32,2808,53,[2,["Review","Test"],"whenFixed"]],[2809,33,2816,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : { foo : Int, bar : Int, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]]]]]]],[2817,27,2827,4,[1,"|>",0,[2817,27,2818,120,[1,"|>",0,[2817,27,2817,40,[2,[],"unsortedError"]],[2818,32,2818,120,[0,[[2818,32,2818,53,[2,["Review","Test"],"atExactly"]],[2818,54,2818,120,[8,[[2818,56,2818,87,[[2818,56,2818,61,"start"],[2818,64,2818,87,[8,[[2818,66,2818,73,[[2818,66,2818,69,"row"],[2818,72,2818,73,[3,7]]]],[2818,75,2818,86,[[2818,75,2818,81,"column"],[2818,84,2818,85,[3,6]]]]]]]]],[2818,89,2818,119,[[2818,89,2818,92,"end"],[2818,95,2818,118,[8,[[2818,97,2818,104,[[2818,97,2818,100,"row"],[2818,103,2818,104,[3,7]]]],[2818,106,2818,117,[[2818,106,2818,112,"column"],[2818,115,2818,116,[3,7]]]]]]]]]]]]]]]]],[2819,32,2827,4,[0,[[2819,32,2819,53,[2,["Review","Test"],"whenFixed"]],[2820,33,2827,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : { bar : Int, foo : Int, baz : Int } -> Bool\nfunc { foo, bar, baz } = True\n"]]]]]]]]]]]]]]]]]]]],[2829,11,2852,26,[1,"<|",1,[2829,11,2829,60,[0,[[2829,11,2829,15,[2,[],"test"]],[2829,16,2829,60,[5,"can disambiguate by type via record access"]]]]],[2830,13,2852,26,[18,[[[2830,14,2830,16,[1]]],[2831,17,2852,26,[1,"|>",0,[2831,17,2839,55,[1,"|>",0,[2831,17,2838,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { bar = 1, foo = 2, baz = 3 }.bar\n"]],[2839,24,2839,55,[0,[[2839,24,2839,39,[2,["Review","Test"],"run"]],[2839,40,2839,55,[7,[2839,41,2839,54,[0,[[2839,41,2839,45,[2,[],"rule"]],[2839,46,2839,54,[2,[],"defaults"]]]]]]]]]]]],[2840,24,2852,26,[0,[[2840,24,2840,48,[2,["Review","Test"],"expectErrors"]],[2841,25,2852,26,[9,[[2841,27,2851,4,[1,"|>",0,[2841,27,2842,120,[1,"|>",0,[2841,27,2841,40,[2,[],"unsortedError"]],[2842,32,2842,120,[0,[[2842,32,2842,53,[2,["Review","Test"],"atExactly"]],[2842,54,2842,120,[8,[[2842,56,2842,87,[[2842,56,2842,61,"start"],[2842,64,2842,87,[8,[[2842,66,2842,73,[[2842,66,2842,69,"row"],[2842,72,2842,73,[3,7]]]],[2842,75,2842,86,[[2842,75,2842,81,"column"],[2842,84,2842,85,[3,8]]]]]]]]],[2842,89,2842,119,[[2842,89,2842,92,"end"],[2842,95,2842,118,[8,[[2842,97,2842,104,[[2842,97,2842,100,"row"],[2842,103,2842,104,[3,7]]]],[2842,106,2842,117,[[2842,106,2842,112,"column"],[2842,115,2842,116,[3,9]]]]]]]]]]]]]]]]],[2843,32,2851,4,[0,[[2843,32,2843,53,[2,["Review","Test"],"whenFixed"]],[2844,33,2851,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { foo = 2, bar = 1, baz = 3 }.bar\n"]]]]]]]]]]]]]]]]]]]],[2853,11,2876,26,[1,"<|",1,[2853,11,2853,69,[0,[[2853,11,2853,15,[2,[],"test"]],[2853,16,2853,69,[5,"can disambiguate by type via record access function"]]]]],[2854,13,2876,26,[18,[[[2854,14,2854,16,[1]]],[2855,17,2876,26,[1,"|>",0,[2855,17,2863,55,[1,"|>",0,[2855,17,2862,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { bar = 1, foo = 2, baz = 3 } |> .bar\n"]],[2863,24,2863,55,[0,[[2863,24,2863,39,[2,["Review","Test"],"run"]],[2863,40,2863,55,[7,[2863,41,2863,54,[0,[[2863,41,2863,45,[2,[],"rule"]],[2863,46,2863,54,[2,[],"defaults"]]]]]]]]]]]],[2864,24,2876,26,[0,[[2864,24,2864,48,[2,["Review","Test"],"expectErrors"]],[2865,25,2876,26,[9,[[2865,27,2875,4,[1,"|>",0,[2865,27,2866,120,[1,"|>",0,[2865,27,2865,40,[2,[],"unsortedError"]],[2866,32,2866,120,[0,[[2866,32,2866,53,[2,["Review","Test"],"atExactly"]],[2866,54,2866,120,[8,[[2866,56,2866,87,[[2866,56,2866,61,"start"],[2866,64,2866,87,[8,[[2866,66,2866,73,[[2866,66,2866,69,"row"],[2866,72,2866,73,[3,7]]]],[2866,75,2866,86,[[2866,75,2866,81,"column"],[2866,84,2866,85,[3,8]]]]]]]]],[2866,89,2866,119,[[2866,89,2866,92,"end"],[2866,95,2866,118,[8,[[2866,97,2866,104,[[2866,97,2866,100,"row"],[2866,103,2866,104,[3,7]]]],[2866,106,2866,117,[[2866,106,2866,112,"column"],[2866,115,2866,116,[3,9]]]]]]]]]]]]]]]]],[2867,32,2875,4,[0,[[2867,32,2867,53,[2,["Review","Test"],"whenFixed"]],[2868,33,2875,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { foo = 2, bar = 1, baz = 3 } |> .bar\n"]]]]]]]]]]]]]]]]]]]],[2877,11,2911,26,[1,"<|",1,[2877,11,2877,60,[0,[[2877,11,2877,15,[2,[],"test"]],[2877,16,2877,60,[5,"can disambiguate by type with record types"]]]]],[2878,13,2911,26,[18,[[[2878,14,2878,16,[1]]],[2879,17,2911,26,[1,"|>",0,[2879,17,2887,55,[1,"|>",0,[2879,17,2886,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc : { bar : Int, foo : { a : Int, b : String }, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]],[2887,24,2887,55,[0,[[2887,24,2887,39,[2,["Review","Test"],"run"]],[2887,40,2887,55,[7,[2887,41,2887,54,[0,[[2887,41,2887,45,[2,[],"rule"]],[2887,46,2887,54,[2,[],"defaults"]]]]]]]]]]]],[2888,24,2911,26,[0,[[2888,24,2888,48,[2,["Review","Test"],"expectErrors"]],[2889,25,2911,26,[9,[[2889,27,2899,4,[1,"|>",0,[2889,27,2890,120,[1,"|>",0,[2889,27,2889,40,[2,[],"unsortedError"]],[2890,32,2890,120,[0,[[2890,32,2890,53,[2,["Review","Test"],"atExactly"]],[2890,54,2890,120,[8,[[2890,56,2890,87,[[2890,56,2890,61,"start"],[2890,64,2890,87,[8,[[2890,66,2890,73,[[2890,66,2890,69,"row"],[2890,72,2890,73,[3,6]]]],[2890,75,2890,86,[[2890,75,2890,81,"column"],[2890,84,2890,85,[3,8]]]]]]]]],[2890,89,2890,119,[[2890,89,2890,92,"end"],[2890,95,2890,118,[8,[[2890,97,2890,104,[[2890,97,2890,100,"row"],[2890,103,2890,104,[3,6]]]],[2890,106,2890,117,[[2890,106,2890,112,"column"],[2890,115,2890,116,[3,9]]]]]]]]]]]]]]]]],[2891,32,2899,4,[0,[[2891,32,2891,53,[2,["Review","Test"],"whenFixed"]],[2892,33,2899,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc : { foo : { a : Int, b : String }, bar : Int, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]]]]]]],[2900,27,2910,4,[1,"|>",0,[2900,27,2901,120,[1,"|>",0,[2900,27,2900,40,[2,[],"unsortedError"]],[2901,32,2901,120,[0,[[2901,32,2901,53,[2,["Review","Test"],"atExactly"]],[2901,54,2901,120,[8,[[2901,56,2901,87,[[2901,56,2901,61,"start"],[2901,64,2901,87,[8,[[2901,66,2901,73,[[2901,66,2901,69,"row"],[2901,72,2901,73,[3,7]]]],[2901,75,2901,86,[[2901,75,2901,81,"column"],[2901,84,2901,85,[3,6]]]]]]]]],[2901,89,2901,119,[[2901,89,2901,92,"end"],[2901,95,2901,118,[8,[[2901,97,2901,104,[[2901,97,2901,100,"row"],[2901,103,2901,104,[3,7]]]],[2901,106,2901,117,[[2901,106,2901,112,"column"],[2901,115,2901,116,[3,7]]]]]]]]]]]]]]]]],[2902,32,2910,4,[0,[[2902,32,2902,53,[2,["Review","Test"],"whenFixed"]],[2903,33,2910,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc : { bar : Int, foo : { a : Int, b : String }, baz : Int } -> Bool\nfunc { foo, bar, baz } = True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2915,1,3036,10,[0,[[0],[1,[2915,1,2915,17,[[2915,1,2915,10,"withAlias"],[2915,13,2915,17,[1,[2915,13,2915,17,[[],"Test"]],[]]]]]],[2916,1,3036,10,[[2916,1,2916,10,"withAlias"],[],[2917,5,3036,10,[0,[[2917,5,2917,13,[2,[],"describe"]],[2917,14,2917,51,[5,"record corresponds to a known alias"]],[2918,9,3036,10,[9,[[2918,11,2928,50,[1,"<|",1,[2918,11,2918,65,[0,[[2918,11,2918,15,[2,[],"test"]],[2918,16,2918,65,[5,"fields are in sorted order with type annotation"]]]]],[2919,13,2928,50,[18,[[[2919,14,2919,16,[1]]],[2920,17,2928,50,[1,"|>",0,[2920,17,2927,55,[1,"|>",0,[2920,17,2926,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na : A\na = { foo = 1, bar = 2, baz = 3 }\n"]],[2927,24,2927,55,[0,[[2927,24,2927,39,[2,["Review","Test"],"run"]],[2927,40,2927,55,[7,[2927,41,2927,54,[0,[[2927,41,2927,45,[2,[],"rule"]],[2927,46,2927,54,[2,[],"defaults"]]]]]]]]]]]],[2928,24,2928,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2929,11,2938,50,[1,"<|",1,[2929,11,2929,68,[0,[[2929,11,2929,15,[2,[],"test"]],[2929,16,2929,68,[5,"fields are in sorted order without type annotation"]]]]],[2930,13,2938,50,[18,[[[2930,14,2930,16,[1]]],[2931,17,2938,50,[1,"|>",0,[2931,17,2937,55,[1,"|>",0,[2931,17,2936,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]],[2937,24,2937,55,[0,[[2937,24,2937,39,[2,["Review","Test"],"run"]],[2937,40,2937,55,[7,[2937,41,2937,54,[0,[[2937,41,2937,45,[2,[],"rule"]],[2937,46,2937,54,[2,[],"defaults"]]]]]]]]]]]],[2938,24,2938,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2939,11,2950,50,[1,"<|",1,[2939,11,2939,66,[0,[[2939,11,2939,15,[2,[],"test"]],[2939,16,2939,66,[5,"fields are in order to multiple matching aliases"]]]]],[2940,13,2950,50,[18,[[[2940,14,2940,16,[1]]],[2941,17,2950,50,[1,"|>",0,[2941,17,2949,55,[1,"|>",0,[2941,17,2948,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]],[2949,24,2949,55,[0,[[2949,24,2949,39,[2,["Review","Test"],"run"]],[2949,40,2949,55,[7,[2949,41,2949,54,[0,[[2949,41,2949,45,[2,[],"rule"]],[2949,46,2949,54,[2,[],"defaults"]]]]]]]]]]]],[2950,24,2950,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2951,11,2972,26,[1,"<|",1,[2951,11,2951,69,[0,[[2951,11,2951,15,[2,[],"test"]],[2951,16,2951,69,[5,"fields are not in sorted order with type annotation"]]]]],[2952,13,2972,26,[18,[[[2952,14,2952,16,[1]]],[2953,17,2972,26,[1,"|>",0,[2953,17,2960,55,[1,"|>",0,[2953,17,2959,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na : A\na = { bar = 2, foo = 1, baz = 3 }\n"]],[2960,24,2960,55,[0,[[2960,24,2960,39,[2,["Review","Test"],"run"]],[2960,40,2960,55,[7,[2960,41,2960,54,[0,[[2960,41,2960,45,[2,[],"rule"]],[2960,46,2960,54,[2,[],"defaults"]]]]]]]]]]]],[2961,24,2972,26,[0,[[2961,24,2961,48,[2,["Review","Test"],"expectErrors"]],[2962,25,2972,26,[9,[[2962,27,2971,4,[1,"|>",0,[2962,27,2963,120,[1,"|>",0,[2962,27,2962,40,[2,[],"unsortedError"]],[2963,32,2963,120,[0,[[2963,32,2963,53,[2,["Review","Test"],"atExactly"]],[2963,54,2963,120,[8,[[2963,56,2963,87,[[2963,56,2963,61,"start"],[2963,64,2963,87,[8,[[2963,66,2963,73,[[2963,66,2963,69,"row"],[2963,72,2963,73,[3,6]]]],[2963,75,2963,86,[[2963,75,2963,81,"column"],[2963,84,2963,85,[3,5]]]]]]]]],[2963,89,2963,119,[[2963,89,2963,92,"end"],[2963,95,2963,118,[8,[[2963,97,2963,104,[[2963,97,2963,100,"row"],[2963,103,2963,104,[3,6]]]],[2963,106,2963,117,[[2963,106,2963,112,"column"],[2963,115,2963,116,[3,6]]]]]]]]]]]]]]]]],[2964,32,2971,4,[0,[[2964,32,2964,53,[2,["Review","Test"],"whenFixed"]],[2965,33,2971,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na : A\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2973,11,2991,26,[1,"<|",1,[2973,11,2973,72,[0,[[2973,11,2973,15,[2,[],"test"]],[2973,16,2973,72,[5,"fields are not in sorted order without type annotation"]]]]],[2974,13,2991,26,[18,[[[2974,14,2974,16,[1]]],[2975,17,2991,26,[1,"|>",0,[2975,17,2981,55,[1,"|>",0,[2975,17,2980,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[2981,24,2981,55,[0,[[2981,24,2981,39,[2,["Review","Test"],"run"]],[2981,40,2981,55,[7,[2981,41,2981,54,[0,[[2981,41,2981,45,[2,[],"rule"]],[2981,46,2981,54,[2,[],"defaults"]]]]]]]]]]]],[2982,24,2991,26,[0,[[2982,24,2982,48,[2,["Review","Test"],"expectErrors"]],[2983,25,2991,26,[9,[[2983,27,2990,4,[1,"|>",0,[2983,27,2984,120,[1,"|>",0,[2983,27,2983,40,[2,[],"unsortedError"]],[2984,32,2984,120,[0,[[2984,32,2984,53,[2,["Review","Test"],"atExactly"]],[2984,54,2984,120,[8,[[2984,56,2984,87,[[2984,56,2984,61,"start"],[2984,64,2984,87,[8,[[2984,66,2984,73,[[2984,66,2984,69,"row"],[2984,72,2984,73,[3,5]]]],[2984,75,2984,86,[[2984,75,2984,81,"column"],[2984,84,2984,85,[3,5]]]]]]]]],[2984,89,2984,119,[[2984,89,2984,92,"end"],[2984,95,2984,118,[8,[[2984,97,2984,104,[[2984,97,2984,100,"row"],[2984,103,2984,104,[3,5]]]],[2984,106,2984,117,[[2984,106,2984,112,"column"],[2984,115,2984,116,[3,6]]]]]]]]]]]]]]]]],[2985,32,2990,4,[0,[[2985,32,2985,53,[2,["Review","Test"],"whenFixed"]],[2985,54,2990,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2992,11,3014,26,[1,"<|",1,[2992,11,2992,93,[0,[[2992,11,2992,15,[2,[],"test"]],[2992,16,2992,93,[5,"fields are not in order to multiple matching aliases with degenerate orders"]]]]],[2993,13,3014,26,[18,[[[2993,14,2993,16,[1]]],[2994,17,3014,26,[1,"|>",0,[2994,17,3002,55,[1,"|>",0,[2994,17,3001,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { foo : Int, bar : Int, baz : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[3002,24,3002,55,[0,[[3002,24,3002,39,[2,["Review","Test"],"run"]],[3002,40,3002,55,[7,[3002,41,3002,54,[0,[[3002,41,3002,45,[2,[],"rule"]],[3002,46,3002,54,[2,[],"defaults"]]]]]]]]]]]],[3003,24,3014,26,[0,[[3003,24,3003,48,[2,["Review","Test"],"expectErrors"]],[3004,25,3014,26,[9,[[3004,27,3013,4,[1,"|>",0,[3004,27,3005,120,[1,"|>",0,[3004,27,3004,40,[2,[],"unsortedError"]],[3005,32,3005,120,[0,[[3005,32,3005,53,[2,["Review","Test"],"atExactly"]],[3005,54,3005,120,[8,[[3005,56,3005,87,[[3005,56,3005,61,"start"],[3005,64,3005,87,[8,[[3005,66,3005,73,[[3005,66,3005,69,"row"],[3005,72,3005,73,[3,7]]]],[3005,75,3005,86,[[3005,75,3005,81,"column"],[3005,84,3005,85,[3,5]]]]]]]]],[3005,89,3005,119,[[3005,89,3005,92,"end"],[3005,95,3005,118,[8,[[3005,97,3005,104,[[3005,97,3005,100,"row"],[3005,103,3005,104,[3,7]]]],[3005,106,3005,117,[[3005,106,3005,112,"column"],[3005,115,3005,116,[3,6]]]]]]]]]]]]]]]]],[3006,32,3013,4,[0,[[3006,32,3006,53,[2,["Review","Test"],"whenFixed"]],[3006,54,3013,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[3015,11,3035,50,[1,"<|",1,[3015,11,3015,49,[0,[[3015,11,3015,15,[2,[],"test"]],[3015,16,3015,49,[5,"does not keep unexposed aliases"]]]]],[3016,13,3035,50,[18,[[[3016,14,3016,16,[1]]],[3017,17,3035,50,[1,"|>",0,[3017,17,3034,64,[1,"|>",0,[3017,17,3033,18,[9,[[3017,19,3023,4,[5,"module B exposing (foo)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[3024,19,3032,4,[5,"module A exposing (..)\n\nimport B\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = { bar = 2, foo = 1, baz = 3 }\n"]]]]],[3034,24,3034,64,[0,[[3034,24,3034,48,[2,["Review","Test"],"runOnModules"]],[3034,49,3034,64,[7,[3034,50,3034,63,[0,[[3034,50,3034,54,[2,[],"rule"]],[3034,55,3034,63,[2,[],"defaults"]]]]]]]]]]]],[3035,24,3035,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]]],[]]]
