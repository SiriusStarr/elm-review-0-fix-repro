[1,[[1,1,6,6,[0,[[1,8,1,38,["NoUnsortedTopLevelDeclarations"]],[1,39,6,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,43,[1,"sortTopLevelDeclarations"]],[4,7,4,21,[1,"alphabetically"]],[4,23,4,50,[1,"exposedOrderWithPrivateLast"]],[4,52,4,80,[1,"exposedOrderWithPrivateFirst"]],[4,82,4,92,[1,"typesFirst"]],[4,94,4,103,[1,"typesLast"]],[4,105,4,115,[1,"portsFirst"]],[4,117,4,126,[1,"portsLast"]],[5,7,5,24,[1,"glueHelpersBefore"]],[5,26,5,42,[1,"glueHelpersAfter"]],[5,44,5,80,[1,"glueDependenciesBeforeFirstDependent"]],[5,82,5,117,[1,"glueDependenciesAfterFirstDependent"]],[5,119,5,153,[1,"glueDependenciesAfterLastDependent"]],[5,155,5,190,[1,"glueDependenciesBeforeLastDependent"]]]]]]]],[[44,1,44,57,[[44,8,44,30,["Elm","Syntax","Declaration"]],[0],[1,[44,31,44,57,[1,[[44,41,44,56,[3,["Declaration",[1,[44,52,44,56]]]]]]]]]]],[45,1,45,69,[[45,8,45,27,["Elm","Syntax","Exposing"]],[1,[45,31,45,39,["Exposing"]]],[1,[45,40,45,69,[1,[[45,50,45,68,[3,["TopLevelExpose",[1,[45,64,45,68]]]]]]]]]]],[46,1,46,43,[[46,8,46,25,["Elm","Syntax","Import"]],[0],[1,[46,26,46,43,[1,[[46,36,46,42,[2,"Import"]]]]]]]],[47,1,47,53,[[47,8,47,25,["Elm","Syntax","Module"]],[1,[47,29,47,35,["Module"]]],[1,[47,36,47,53,[1,[[47,46,47,52,[2,"Module"]]]]]]]],[48,1,48,47,[[48,8,48,23,["Elm","Syntax","Node"]],[1,[48,27,48,31,["Node"]]],[1,[48,32,48,47,[1,[[48,42,48,46,[2,"Node"]]]]]]]],[49,1,49,50,[[49,8,49,24,["Elm","Syntax","Range"]],[1,[49,28,49,33,["Range"]]],[1,[49,34,49,50,[1,[[49,44,49,49,[2,"Range"]]]]]]]],[50,1,50,27,[[50,8,50,18,["List","Extra"]],[1,[50,22,50,27,["ListX"]]],[0]]],[51,1,51,29,[[51,8,51,19,["Maybe","Extra"]],[1,[51,23,51,29,["MaybeX"]]],[0]]],[52,1,52,50,[[52,8,52,19,["Review","Rule"]],[1,[52,23,52,27,["Rule"]]],[1,[52,28,52,50,[1,[[52,38,52,43,[2,"Error"]],[52,45,52,49,[2,"Rule"]]]]]]]],[53,1,53,26,[[53,8,53,11,["Set"]],[0],[1,[53,12,53,26,[1,[[53,22,53,25,[2,"Set"]]]]]]]],[54,1,54,31,[[54,8,54,20,["String","Extra"]],[1,[54,24,54,31,["StringX"]]],[0]]],[55,1,55,101,[[55,8,55,12,["Util"]],[0],[1,[55,13,55,101,[1,[[55,23,55,34,[3,["GluedTo",[1,[55,30,55,34]]]]],[55,36,55,56,[1,"checkSortingWithGlue"]],[55,58,55,72,[1,"findAllNamesIn"]],[55,74,55,90,[1,"findDependencies"]],[55,92,55,100,[1,"validate"]]]]]]]]],[[58,1,175,37,[0,[[1,[58,1,153,3,"{-| Reports top-level declarations that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the declarations.\n\nThe proper order of declarations is specified in the rule configuration. See the\n[Configuration](#configuration) section below for more information.\n\n    config =\n        [ NoUnsortedTopLevelDeclarations.rule\n            (NoUnsortedTopLevelDeclarations.sortTopLevelDeclarations\n                |> NoUnsortedTopLevelDeclarations.portsFirst\n                |> NoUnsortedTopLevelDeclarations.exposedOrderWithPrivateLast\n                |> NoUnsortedTopLevelDeclarations.alphabetically\n            )\n        ]\n\n\n## Fail\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    type A\n        = A\n\n    z =\n        zed\n\n    type alias Z =\n        A\n\n    a =\n        foo\n\n    b =\n        bar\n\n\n## Success\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    type A\n        = A\n\n    a =\n        foo\n\n    type alias Z =\n        A\n\n    b =\n        bar\n\n    z =\n        zed\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that your top-level declarations are\nin a consistent, predictable order.\n\nThis rule is not useful when you want to be able to write top-level declarations\nin varying orders throughout your codebase, e.g. if you want to emphasize what\nis most important on a case-by-case basis.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedTopLevelDeclarations\n```\n\n-}"]],[1,[154,1,154,28,[[154,1,154,5,"rule"],[154,8,154,28,[6,[154,8,154,20,[1,[154,8,154,18,[[],"RuleConfig"]],[[154,19,154,20,[0,"r"]]]]],[154,24,154,28,[1,[154,24,154,28,[[],"Rule"]],[]]]]]]]],[155,1,175,37,[[155,1,155,5,"rule"],[[155,6,155,20,[14,[155,7,155,19,[12,[[],"RuleConfig"],[[155,18,155,19,[11,"r"]]]]]]]],[156,5,175,37,[1,"|>",0,[156,5,174,43,[1,"|>",0,[156,5,173,14,[1,"|>",0,[156,5,159,90,[1,"|>",0,[156,5,158,95,[1,"|>",0,[156,5,157,83,[1,"|>",0,[156,5,156,96,[0,[[156,5,156,48,[2,["Rule"],"newModuleRuleSchemaUsingContextCreator"]],[156,49,156,81,[5,"NoUnsortedTopLevelDeclarations"]],[156,82,156,96,[2,[],"initialContext"]]]]],[157,12,157,83,[0,[[157,12,157,44,[2,["Rule"],"withModuleDefinitionVisitor"]],[157,45,157,83,[7,[157,46,157,82,[18,[[[157,47,157,48,[11,"m"]],[157,49,157,50,[11,"c"]]],[157,54,157,82,[6,[[157,56,157,58,[9,[]]],[157,60,157,80,[0,[[157,60,157,76,[2,[],"getModuleExports"]],[157,77,157,78,[2,[],"m"]],[157,79,157,80,[2,[],"c"]]]]]]]]]]]]]]]]]],[158,12,158,95,[0,[[158,12,158,36,[2,["Rule"],"withCommentsVisitor"]],[158,37,158,95,[7,[158,38,158,94,[18,[[[158,39,158,41,[11,"cs"]],[158,42,158,49,[11,"context"]]],[158,53,158,94,[6,[[158,55,158,57,[9,[]]],[158,59,158,92,[0,[[158,59,158,81,[2,[],"getUnparsedDocComments"]],[158,82,158,84,[2,[],"cs"]],[158,85,158,92,[2,[],"context"]]]]]]]]]]]]]]]]]],[159,12,159,90,[0,[[159,12,159,34,[2,["Rule"],"withImportVisitor"]],[159,35,159,90,[7,[159,36,159,89,[18,[[[159,37,159,38,[11,"i"]],[159,39,159,46,[11,"context"]]],[159,50,159,89,[6,[[159,52,159,54,[9,[]]],[159,56,159,87,[0,[[159,56,159,77,[2,[],"accumulateImportRange"]],[159,78,159,79,[2,[],"i"]],[159,80,159,87,[2,[],"context"]]]]]]]]]]]]]]]]]],[160,12,173,14,[0,[[160,12,160,43,[2,["Rule"],"withDeclarationListVisitor"]],[161,13,173,14,[7,[161,14,172,18,[18,[[[161,15,161,17,[11,"ds"]],[161,18,161,19,[11,"c"]]],[162,17,172,18,[6,[[162,19,170,22,[0,[[162,19,162,37,[2,[],"declarationVisitor"]],[163,21,168,22,[7,[163,22,167,26,[0,[[163,22,163,32,[2,[],"RuleConfig"]],[164,25,167,26,[21,[164,27,164,28,"r"],[[165,31,166,29,[[165,31,165,37,"sortBy"],[165,40,165,61,[0,[[165,40,165,52,[2,["List"],"reverse"]],[165,53,165,61,[19,[165,53,165,54,[2,[],"r"]],[165,55,165,61,"sortBy"]]]]]]]],[166,31,167,25,[[166,31,166,36,"glues"],[166,39,166,59,[0,[[166,39,166,51,[2,["List"],"reverse"]],[166,52,166,59,[19,[166,52,166,53,[2,[],"r"]],[166,54,166,59,"glues"]]]]]]]]]]]]]]]],[169,21,169,23,[2,[],"ds"]],[170,21,170,22,[2,[],"c"]]]]],[171,19,171,20,[2,[],"c"]]]]]]]]]]]]]]],[174,12,174,43,[2,["Rule"],"providesFixesForModuleRule"]]]],[175,12,175,37,[2,["Rule"],"fromModuleRuleSchema"]]]]]]]]],[178,1,185,10,[2,[[1,[178,1,180,3,"{-| Configuration for this rule. Create a new one with\n`sortTopLevelDeclarations` and use orderings to create a hierarchy of sorting.\n-}"]],[181,6,181,16,"RuleConfig"],[[181,17,181,18,"r"]],[[182,7,185,10,[[182,7,182,17,"RuleConfig"],[[183,9,185,10,[4,[[183,11,183,46,[[183,11,183,17,"sortBy"],[183,20,183,46,[1,[183,20,183,24,[[],"List"]],[[183,25,183,46,[6,[183,26,183,29,[1,[183,26,183,29,[[],"TLD"]],[]]],[183,33,183,45,[6,[183,33,183,36,[1,[183,33,183,36,[[],"TLD"]],[]]],[183,40,183,45,[1,[183,40,183,45,[[],"Order"]],[]]]]]]]]]]]],[184,11,185,9,[[184,11,184,16,"glues"],[184,19,184,28,[1,[184,19,184,23,[[],"List"]],[[184,24,184,28,[1,[184,24,184,28,[[],"Glue"]],[]]]]]]]]]]]]]]]]]],[188,1,193,43,[0,[[1,[188,1,190,3,"{-| Create a new `RuleConfig`. Use the various orderings to then specify\nprimary and fallback orderings.\n-}"]],[1,[191,1,191,138,[[191,1,191,25,"sortTopLevelDeclarations"],[191,28,191,138,[1,[191,28,191,38,[[],"RuleConfig"]],[[191,39,191,138,[4,[[191,41,191,60,[[191,41,191,55,"noAlphabetical"],[191,58,191,60,[2]]]],[191,62,191,79,[[191,62,191,74,"noDependency"],[191,77,191,79,[2]]]],[191,81,191,95,[[191,81,191,90,"noExposed"],[191,93,191,95,[2]]]],[191,97,191,110,[[191,97,191,105,"noHelper"],[191,108,191,110,[2]]]],[191,112,191,123,[[191,112,191,118,"noPort"],[191,121,191,123,[2]]]],[191,125,191,137,[[191,125,191,131,"noType"],[191,134,191,136,[2]]]]]]]]]]]]],[192,1,193,43,[[192,1,192,25,"sortTopLevelDeclarations"],[],[193,5,193,43,[0,[[193,5,193,15,[2,[],"RuleConfig"]],[193,16,193,43,[8,[[193,18,193,29,[[193,18,193,24,"sortBy"],[193,27,193,29,[9,[]]]]],[193,31,193,42,[[193,31,193,36,"glues"],[193,39,193,41,[9,[]]]]]]]]]]]]]]]],[196,1,223,10,[0,[[1,[196,1,215,3,"{-| Sort declarations alphabetically. Note that this decapitalizes the first\nletter before performing the comparison so as to treat types and functions the\nsame. For example, the following is sorted alphabetically:\n\n    type A\n        = A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    z =\n        zed\n\n    type alias Z =\n        A\n\n-}"]],[1,[216,1,216,72,[[216,1,216,15,"alphabetically"],[216,18,216,72,[6,[216,18,216,56,[1,[216,18,216,28,[[],"RuleConfig"]],[[216,29,216,56,[5,[216,31,216,32,"r"],[216,34,216,55,[[216,35,216,55,[[216,35,216,49,"noAlphabetical"],[216,52,216,54,[2]]]]]]]]]]],[216,60,216,72,[1,[216,60,216,70,[[],"RuleConfig"]],[[216,71,216,72,[0,"r"]]]]]]]]]],[217,1,223,10,[[217,1,217,15,"alphabetically"],[[217,16,217,30,[14,[217,17,217,29,[12,[[],"RuleConfig"],[[217,28,217,29,[11,"r"]]]]]]]],[218,5,223,10,[0,[[218,5,218,15,[2,[],"RuleConfig"]],[219,9,223,10,[21,[219,11,219,12,"r"],[[220,15,223,9,[[220,15,220,21,"sortBy"],[221,17,222,32,[1,"::",1,[221,17,221,154,[7,[221,18,221,153,[18,[[[221,19,221,21,[11,"d1"]],[221,22,221,24,[11,"d2"]]],[221,28,221,153,[0,[[221,28,221,35,[2,[],"compare"]],[221,36,221,94,[7,[221,37,221,93,[1,"<|",1,[221,37,221,47,[2,["Set"],"toList"]],[221,51,221,93,[0,[[221,51,221,58,[2,["Set"],"map"]],[221,59,221,79,[2,["StringX"],"decapitalize"]],[221,80,221,93,[19,[221,80,221,82,[2,[],"d1"]],[221,83,221,93,"namesBound"]]]]]]]]]],[221,95,221,153,[7,[221,96,221,152,[1,"<|",1,[221,96,221,106,[2,["Set"],"toList"]],[221,110,221,152,[0,[[221,110,221,117,[2,["Set"],"map"]],[221,118,221,138,[2,["StringX"],"decapitalize"]],[221,139,221,152,[19,[221,139,221,141,[2,[],"d2"]],[221,142,221,152,"namesBound"]]]]]]]]]]]]]]]]]],[222,24,222,32,[19,[222,24,222,25,[2,[],"r"]],[222,26,222,32,"sortBy"]]]]]]]]]]]]]]]]]],[226,1,278,10,[0,[[1,[226,1,257,3,"{-| Sort TLDs in the order they are exposed by the module, with private TLDs\ncoming after all those that are exposed. For example, the following is sorted\nby this and then alphabetically:\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    type A\n        = A\n\n    a =\n        foo\n\n    type alias Z =\n        A\n\n    b =\n        bar\n\n    z =\n        zed\n\n-}"]],[1,[258,1,258,80,[[258,1,258,28,"exposedOrderWithPrivateLast"],[258,31,258,80,[6,[258,31,258,64,[1,[258,31,258,41,[[],"RuleConfig"]],[[258,42,258,64,[5,[258,44,258,45,"r"],[258,47,258,63,[[258,48,258,63,[[258,48,258,57,"noExposed"],[258,60,258,62,[2]]]]]]]]]]],[258,68,258,80,[1,[258,68,258,78,[[],"RuleConfig"]],[[258,79,258,80,[0,"r"]]]]]]]]]],[259,1,278,10,[[259,1,259,28,"exposedOrderWithPrivateLast"],[[259,29,259,43,[14,[259,30,259,42,[12,[[],"RuleConfig"],[[259,41,259,42,[11,"r"]]]]]]]],[260,5,278,10,[0,[[260,5,260,15,[2,[],"RuleConfig"]],[261,9,278,10,[21,[261,11,261,12,"r"],[[262,15,278,9,[[262,15,262,21,"sortBy"],[263,17,277,32,[1,"::",1,[263,17,276,18,[7,[263,18,275,31,[18,[[[263,19,263,21,[11,"d1"]],[263,22,263,24,[11,"d2"]]],[264,21,275,31,[17,[[264,26,264,62,[6,[[264,28,264,43,[19,[264,28,264,30,[2,[],"d1"]],[264,31,264,43,"exposedOrder"]]],[264,45,264,60,[19,[264,45,264,47,[2,[],"d2"]],[264,48,264,60,"exposedOrder"]]]]]],[[[265,25,265,45,[7,[[265,27,265,34,[12,[[],"Just"],[[265,32,265,34,[11,"i1"]]]]],[265,36,265,43,[12,[[],"Just"],[[265,41,265,43,[11,"i2"]]]]]]]],[266,29,266,42,[0,[[266,29,266,36,[2,[],"compare"]],[266,37,266,39,[2,[],"i1"]],[266,40,266,42,[2,[],"i2"]]]]]],[[268,25,268,44,[7,[[268,27,268,33,[12,[[],"Just"],[[268,32,268,33,[0]]]]],[268,35,268,42,[12,[[],"Nothing"],[]]]]]],[269,29,269,31,[2,[],"LT"]]],[[271,25,271,44,[7,[[271,27,271,34,[12,[[],"Nothing"],[]]],[271,36,271,42,[12,[[],"Just"],[[271,41,271,42,[0]]]]]]]],[272,29,272,31,[2,[],"GT"]]],[[274,25,274,45,[7,[[274,27,274,34,[12,[[],"Nothing"],[]]],[274,36,274,43,[12,[[],"Nothing"],[]]]]]],[275,29,275,31,[2,[],"EQ"]]]]]]]]]]]],[277,24,277,32,[19,[277,24,277,25,[2,[],"r"]],[277,26,277,32,"sortBy"]]]]]]]]]]]]]]]]]],[281,1,333,10,[0,[[1,[281,1,312,3,"{-| Sort TLDs in the order they are exposed by the module, with private TLDs\ncoming before all those that are exposed. For example, the following is sorted\nby this and then alphabetically:\n\n    module A exposing\n        ( A, a\n        , Z\n        )\n\n    {-|\n\n    @docs A, a\n    @docs Z\n\n    -}\n\n    b =\n        bar\n\n    z =\n        zed\n\n    type A\n        = A\n\n    a =\n        foo\n\n    type alias Z =\n        A\n\n-}"]],[1,[313,1,313,81,[[313,1,313,29,"exposedOrderWithPrivateFirst"],[313,32,313,81,[6,[313,32,313,65,[1,[313,32,313,42,[[],"RuleConfig"]],[[313,43,313,65,[5,[313,45,313,46,"r"],[313,48,313,64,[[313,49,313,64,[[313,49,313,58,"noExposed"],[313,61,313,63,[2]]]]]]]]]]],[313,69,313,81,[1,[313,69,313,79,[[],"RuleConfig"]],[[313,80,313,81,[0,"r"]]]]]]]]]],[314,1,333,10,[[314,1,314,29,"exposedOrderWithPrivateFirst"],[[314,30,314,44,[14,[314,31,314,43,[12,[[],"RuleConfig"],[[314,42,314,43,[11,"r"]]]]]]]],[315,5,333,10,[0,[[315,5,315,15,[2,[],"RuleConfig"]],[316,9,333,10,[21,[316,11,316,12,"r"],[[317,15,333,9,[[317,15,317,21,"sortBy"],[318,17,332,32,[1,"::",1,[318,17,331,18,[7,[318,18,330,31,[18,[[[318,19,318,21,[11,"d1"]],[318,22,318,24,[11,"d2"]]],[319,21,330,31,[17,[[319,26,319,62,[6,[[319,28,319,43,[19,[319,28,319,30,[2,[],"d1"]],[319,31,319,43,"exposedOrder"]]],[319,45,319,60,[19,[319,45,319,47,[2,[],"d2"]],[319,48,319,60,"exposedOrder"]]]]]],[[[320,25,320,45,[7,[[320,27,320,34,[12,[[],"Just"],[[320,32,320,34,[11,"i1"]]]]],[320,36,320,43,[12,[[],"Just"],[[320,41,320,43,[11,"i2"]]]]]]]],[321,29,321,42,[0,[[321,29,321,36,[2,[],"compare"]],[321,37,321,39,[2,[],"i1"]],[321,40,321,42,[2,[],"i2"]]]]]],[[323,25,323,44,[7,[[323,27,323,33,[12,[[],"Just"],[[323,32,323,33,[0]]]]],[323,35,323,42,[12,[[],"Nothing"],[]]]]]],[324,29,324,31,[2,[],"GT"]]],[[326,25,326,44,[7,[[326,27,326,34,[12,[[],"Nothing"],[]]],[326,36,326,42,[12,[[],"Just"],[[326,41,326,42,[0]]]]]]]],[327,29,327,31,[2,[],"LT"]]],[[329,25,329,45,[7,[[329,27,329,34,[12,[[],"Nothing"],[]]],[329,36,329,43,[12,[[],"Nothing"],[]]]]]],[330,29,330,31,[2,[],"EQ"]]]]]]]]]]]],[332,24,332,32,[19,[332,24,332,25,[2,[],"r"]],[332,26,332,32,"sortBy"]]]]]]]]]]]]]]]]]],[336,1,376,10,[0,[[1,[336,1,355,3,"{-| Sort TLDs so that types and type aliases always come before functions (and\nports, if they haven't been sorted already). For example, the following is\nsorted by this order and then alphabetically:\n\n    type A\n        = A\n\n    type alias Z =\n        A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    z =\n        zed\n\n-}"]],[1,[356,1,356,60,[[356,1,356,11,"typesFirst"],[356,14,356,60,[6,[356,14,356,44,[1,[356,14,356,24,[[],"RuleConfig"]],[[356,25,356,44,[5,[356,27,356,28,"r"],[356,30,356,43,[[356,31,356,43,[[356,31,356,37,"noType"],[356,40,356,42,[2]]]]]]]]]]],[356,48,356,60,[1,[356,48,356,58,[[],"RuleConfig"]],[[356,59,356,60,[0,"r"]]]]]]]]]],[357,1,376,10,[[357,1,357,11,"typesFirst"],[[357,12,357,26,[14,[357,13,357,25,[12,[[],"RuleConfig"],[[357,24,357,25,[11,"r"]]]]]]]],[358,5,376,10,[0,[[358,5,358,15,[2,[],"RuleConfig"]],[359,9,376,10,[21,[359,11,359,12,"r"],[[360,15,376,9,[[360,15,360,21,"sortBy"],[361,17,375,32,[1,"::",1,[361,17,374,18,[7,[361,18,373,31,[18,[[[361,19,361,21,[11,"d1"]],[361,22,361,24,[11,"d2"]]],[362,21,373,31,[17,[[362,26,362,48,[6,[[362,28,362,36,[19,[362,28,362,30,[2,[],"d1"]],[362,31,362,36,"type_"]]],[362,38,362,46,[19,[362,38,362,40,[2,[],"d2"]],[362,41,362,46,"type_"]]]]]],[[[363,25,363,39,[7,[[363,27,363,31,[12,[[],"Type"],[]]],[363,33,363,37,[12,[[],"Type"],[]]]]]],[364,29,364,31,[2,[],"EQ"]]],[[366,25,366,36,[7,[[366,27,366,31,[12,[[],"Type"],[]]],[366,33,366,34,[0]]]]],[367,29,367,31,[2,[],"LT"]]],[[369,25,369,36,[7,[[369,27,369,28,[0]],[369,30,369,34,[12,[[],"Type"],[]]]]]],[370,29,370,31,[2,[],"GT"]]],[[372,25,372,26,[0]],[373,29,373,31,[2,[],"EQ"]]]]]]]]]]]],[375,24,375,32,[19,[375,24,375,25,[2,[],"r"]],[375,26,375,32,"sortBy"]]]]]]]]]]]]]]]]]],[379,1,419,10,[0,[[1,[379,1,398,3,"{-| Sort TLDs so that types and type aliases always come after functions (and\nports, if they haven't been sorted already). For example, the following is\nsorted by this order and then alphabetically:\n\n    a =\n        foo\n\n    b =\n        bar\n\n    z =\n        zed\n\n    type A\n        = A\n\n    type alias Z =\n        A\n\n-}"]],[1,[399,1,399,59,[[399,1,399,10,"typesLast"],[399,13,399,59,[6,[399,13,399,43,[1,[399,13,399,23,[[],"RuleConfig"]],[[399,24,399,43,[5,[399,26,399,27,"r"],[399,29,399,42,[[399,30,399,42,[[399,30,399,36,"noType"],[399,39,399,41,[2]]]]]]]]]]],[399,47,399,59,[1,[399,47,399,57,[[],"RuleConfig"]],[[399,58,399,59,[0,"r"]]]]]]]]]],[400,1,419,10,[[400,1,400,10,"typesLast"],[[400,11,400,25,[14,[400,12,400,24,[12,[[],"RuleConfig"],[[400,23,400,24,[11,"r"]]]]]]]],[401,5,419,10,[0,[[401,5,401,15,[2,[],"RuleConfig"]],[402,9,419,10,[21,[402,11,402,12,"r"],[[403,15,419,9,[[403,15,403,21,"sortBy"],[404,17,418,32,[1,"::",1,[404,17,417,18,[7,[404,18,416,31,[18,[[[404,19,404,21,[11,"d1"]],[404,22,404,24,[11,"d2"]]],[405,21,416,31,[17,[[405,26,405,48,[6,[[405,28,405,36,[19,[405,28,405,30,[2,[],"d1"]],[405,31,405,36,"type_"]]],[405,38,405,46,[19,[405,38,405,40,[2,[],"d2"]],[405,41,405,46,"type_"]]]]]],[[[406,25,406,39,[7,[[406,27,406,31,[12,[[],"Type"],[]]],[406,33,406,37,[12,[[],"Type"],[]]]]]],[407,29,407,31,[2,[],"EQ"]]],[[409,25,409,36,[7,[[409,27,409,31,[12,[[],"Type"],[]]],[409,33,409,34,[0]]]]],[410,29,410,31,[2,[],"GT"]]],[[412,25,412,36,[7,[[412,27,412,28,[0]],[412,30,412,34,[12,[[],"Type"],[]]]]]],[413,29,413,31,[2,[],"LT"]]],[[415,25,415,26,[0]],[416,29,416,31,[2,[],"EQ"]]]]]]]]]]]],[418,24,418,32,[19,[418,24,418,25,[2,[],"r"]],[418,26,418,32,"sortBy"]]]]]]]]]]]]]]]]]],[422,1,464,10,[0,[[1,[422,1,443,3,"{-| Sort TLDs so that ports always come before functions (and types, if they\nhaven't been sorted already). For example, the following is sorted by this order\nand then alphabetically:\n\n    port sendMessage : String -> Cmd msg\n\n    type A\n        = A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    type alias Z =\n        A\n\n    z =\n        zed\n\n-}"]],[1,[444,1,444,60,[[444,1,444,11,"portsFirst"],[444,14,444,60,[6,[444,14,444,44,[1,[444,14,444,24,[[],"RuleConfig"]],[[444,25,444,44,[5,[444,27,444,28,"r"],[444,30,444,43,[[444,31,444,43,[[444,31,444,37,"noPort"],[444,40,444,42,[2]]]]]]]]]]],[444,48,444,60,[1,[444,48,444,58,[[],"RuleConfig"]],[[444,59,444,60,[0,"r"]]]]]]]]]],[445,1,464,10,[[445,1,445,11,"portsFirst"],[[445,12,445,26,[14,[445,13,445,25,[12,[[],"RuleConfig"],[[445,24,445,25,[11,"r"]]]]]]]],[446,5,464,10,[0,[[446,5,446,15,[2,[],"RuleConfig"]],[447,9,464,10,[21,[447,11,447,12,"r"],[[448,15,464,9,[[448,15,448,21,"sortBy"],[449,17,463,32,[1,"::",1,[449,17,462,18,[7,[449,18,461,31,[18,[[[449,19,449,21,[11,"d1"]],[449,22,449,24,[11,"d2"]]],[450,21,461,31,[17,[[450,26,450,48,[6,[[450,28,450,36,[19,[450,28,450,30,[2,[],"d1"]],[450,31,450,36,"type_"]]],[450,38,450,46,[19,[450,38,450,40,[2,[],"d2"]],[450,41,450,46,"type_"]]]]]],[[[451,25,451,39,[7,[[451,27,451,31,[12,[[],"Port"],[]]],[451,33,451,37,[12,[[],"Port"],[]]]]]],[452,29,452,31,[2,[],"EQ"]]],[[454,25,454,36,[7,[[454,27,454,31,[12,[[],"Port"],[]]],[454,33,454,34,[0]]]]],[455,29,455,31,[2,[],"LT"]]],[[457,25,457,36,[7,[[457,27,457,28,[0]],[457,30,457,34,[12,[[],"Port"],[]]]]]],[458,29,458,31,[2,[],"GT"]]],[[460,25,460,26,[0]],[461,29,461,31,[2,[],"EQ"]]]]]]]]]]]],[463,24,463,32,[19,[463,24,463,25,[2,[],"r"]],[463,26,463,32,"sortBy"]]]]]]]]]]]]]]]]]],[467,1,509,10,[0,[[1,[467,1,488,3,"{-| Sort TLDs so that ports always come after functions (and types, if they\nhaven't been sorted already). For example, the following is sorted by this order\nand then alphabetically:\n\n    type A\n        = A\n\n    a =\n        foo\n\n    b =\n        bar\n\n    type alias Z =\n        A\n\n    z =\n        zed\n\n    port sendMessage : String -> Cmd msg\n\n-}"]],[1,[489,1,489,59,[[489,1,489,10,"portsLast"],[489,13,489,59,[6,[489,13,489,43,[1,[489,13,489,23,[[],"RuleConfig"]],[[489,24,489,43,[5,[489,26,489,27,"r"],[489,29,489,42,[[489,30,489,42,[[489,30,489,36,"noPort"],[489,39,489,41,[2]]]]]]]]]]],[489,47,489,59,[1,[489,47,489,57,[[],"RuleConfig"]],[[489,58,489,59,[0,"r"]]]]]]]]]],[490,1,509,10,[[490,1,490,10,"portsLast"],[[490,11,490,25,[14,[490,12,490,24,[12,[[],"RuleConfig"],[[490,23,490,24,[11,"r"]]]]]]]],[491,5,509,10,[0,[[491,5,491,15,[2,[],"RuleConfig"]],[492,9,509,10,[21,[492,11,492,12,"r"],[[493,15,509,9,[[493,15,493,21,"sortBy"],[494,17,508,32,[1,"::",1,[494,17,507,18,[7,[494,18,506,31,[18,[[[494,19,494,21,[11,"d1"]],[494,22,494,24,[11,"d2"]]],[495,21,506,31,[17,[[495,26,495,48,[6,[[495,28,495,36,[19,[495,28,495,30,[2,[],"d1"]],[495,31,495,36,"type_"]]],[495,38,495,46,[19,[495,38,495,40,[2,[],"d2"]],[495,41,495,46,"type_"]]]]]],[[[496,25,496,39,[7,[[496,27,496,31,[12,[[],"Port"],[]]],[496,33,496,37,[12,[[],"Port"],[]]]]]],[497,29,497,31,[2,[],"EQ"]]],[[499,25,499,36,[7,[[499,27,499,31,[12,[[],"Port"],[]]],[499,33,499,34,[0]]]]],[500,29,500,31,[2,[],"GT"]]],[[502,25,502,36,[7,[[502,27,502,28,[0]],[502,30,502,34,[12,[[],"Port"],[]]]]]],[503,29,503,31,[2,[],"LT"]]],[[505,25,505,26,[0]],[506,29,506,31,[2,[],"EQ"]]]]]]]]]]]],[508,24,508,32,[19,[508,24,508,25,[2,[],"r"]],[508,26,508,32,"sortBy"]]]]]]]]]]]]]]]]]],[512,1,550,10,[0,[[1,[512,1,533,3,"{-| Helpers are _unexposed_ functions that are used in exactly one other\nfunction. This glue attaches them immediately before the function they are used\nin.\n\nFor example:\n\n    foldrHelper : (a -> b -> b) -> b -> Int -> List a -> b\n    foldrHelper fn acc ctr ls =\n        case ls of\n            [] ->\n                acc\n\n            a :: r1 ->\n                ...\n\n    {-| Reduce a list from the right.\n    -}\n    foldr : (a -> b -> b) -> b -> List a -> b\n    foldr fn acc ls =\n        foldrHelper fn acc 0 ls\n\n-}"]],[1,[534,1,534,69,[[534,1,534,18,"glueHelpersBefore"],[534,21,534,69,[6,[534,21,534,53,[1,[534,21,534,31,[[],"RuleConfig"]],[[534,32,534,53,[5,[534,34,534,35,"r"],[534,37,534,52,[[534,38,534,52,[[534,38,534,46,"noHelper"],[534,49,534,51,[2]]]]]]]]]]],[534,57,534,69,[1,[534,57,534,67,[[],"RuleConfig"]],[[534,68,534,69,[0,"r"]]]]]]]]]],[535,1,550,10,[[535,1,535,18,"glueHelpersBefore"],[[535,19,535,33,[14,[535,20,535,32,[12,[[],"RuleConfig"],[[535,31,535,32,[11,"r"]]]]]]]],[536,5,550,10,[0,[[536,5,536,15,[2,[],"RuleConfig"]],[537,9,550,10,[21,[537,11,537,12,"r"],[[538,15,550,9,[[538,15,538,20,"glues"],[539,17,549,31,[1,"::",1,[539,17,548,18,[7,[539,18,547,32,[18,[[[539,19,539,27,[7,[[539,21,539,22,[11,"i"]],[539,24,539,25,[11,"d"]]]]],[539,28,539,30,[11,"ds"]]],[541,21,547,32,[11,[541,24,541,72,[1,"&&",1,[541,24,541,49,[1,"==",2,[541,24,541,38,[19,[541,24,541,25,[2,[],"d"]],[541,26,541,38,"exposedOrder"]]],[541,42,541,49,[2,[],"Nothing"]]]],[541,53,541,72,[1,"==",2,[541,53,541,60,[19,[541,53,541,54,[2,[],"d"]],[541,55,541,60,"type_"]]],[541,64,541,72,[2,[],"Function"]]]]]],[542,25,544,75,[1,"|>",0,[542,25,543,65,[1,"|>",0,[542,25,542,53,[0,[[542,25,542,41,[2,[],"findDependencies"]],[542,42,542,50,[6,[[542,44,542,45,[2,[],"i"]],[542,47,542,48,[2,[],"d"]]]]],[542,51,542,53,[2,[],"ds"]]]]],[543,32,543,65,[0,[[543,32,543,40,[2,[],"validate"]],[543,41,543,65,[7,[543,42,543,64,[1,"<<",0,[543,42,543,48,[0,[[543,42,543,46,[12,"=="]],[543,47,543,48,[3,1]]]]],[543,52,543,64,[2,["Tuple"],"second"]]]]]]]]]]],[544,32,544,75,[0,[[544,32,544,41,[2,["Maybe"],"map"]],[544,42,544,75,[7,[544,43,544,74,[1,"<<",0,[544,43,544,59,[2,[],"GluedBeforeFirst"]],[544,63,544,74,[2,["Tuple"],"first"]]]]]]]]]]],[547,25,547,32,[2,[],"Nothing"]]]]]]]]],[549,24,549,31,[19,[549,24,549,25,[2,[],"r"]],[549,26,549,31,"glues"]]]]]]]]]]]]]]]]]],[553,1,591,10,[0,[[1,[553,1,574,3,"{-| Helpers are _unexposed_ functions that are used in exactly one other\nfunction. This glue attaches them immediately after the function they are used\nin.\n\nFor example:\n\n    {-| Reduce a list from the right.\n    -}\n    foldr : (a -> b -> b) -> b -> List a -> b\n    foldr fn acc ls =\n        foldrHelper fn acc 0 ls\n\n    foldrHelper : (a -> b -> b) -> b -> Int -> List a -> b\n    foldrHelper fn acc ctr ls =\n        case ls of\n            [] ->\n                acc\n\n            a :: r1 ->\n                ...\n\n-}"]],[1,[575,1,575,68,[[575,1,575,17,"glueHelpersAfter"],[575,20,575,68,[6,[575,20,575,52,[1,[575,20,575,30,[[],"RuleConfig"]],[[575,31,575,52,[5,[575,33,575,34,"r"],[575,36,575,51,[[575,37,575,51,[[575,37,575,45,"noHelper"],[575,48,575,50,[2]]]]]]]]]]],[575,56,575,68,[1,[575,56,575,66,[[],"RuleConfig"]],[[575,67,575,68,[0,"r"]]]]]]]]]],[576,1,591,10,[[576,1,576,17,"glueHelpersAfter"],[[576,18,576,32,[14,[576,19,576,31,[12,[[],"RuleConfig"],[[576,30,576,31,[11,"r"]]]]]]]],[577,5,591,10,[0,[[577,5,577,15,[2,[],"RuleConfig"]],[578,9,591,10,[21,[578,11,578,12,"r"],[[579,15,591,9,[[579,15,579,20,"glues"],[580,17,590,31,[1,"::",1,[580,17,589,18,[7,[580,18,588,32,[18,[[[580,19,580,27,[7,[[580,21,580,22,[11,"i"]],[580,24,580,25,[11,"d"]]]]],[580,28,580,30,[11,"ds"]]],[582,21,588,32,[11,[582,24,582,72,[1,"&&",1,[582,24,582,49,[1,"==",2,[582,24,582,38,[19,[582,24,582,25,[2,[],"d"]],[582,26,582,38,"exposedOrder"]]],[582,42,582,49,[2,[],"Nothing"]]]],[582,53,582,72,[1,"==",2,[582,53,582,60,[19,[582,53,582,54,[2,[],"d"]],[582,55,582,60,"type_"]]],[582,64,582,72,[2,[],"Function"]]]]]],[583,25,585,74,[1,"|>",0,[583,25,584,65,[1,"|>",0,[583,25,583,53,[0,[[583,25,583,41,[2,[],"findDependencies"]],[583,42,583,50,[6,[[583,44,583,45,[2,[],"i"]],[583,47,583,48,[2,[],"d"]]]]],[583,51,583,53,[2,[],"ds"]]]]],[584,32,584,65,[0,[[584,32,584,40,[2,[],"validate"]],[584,41,584,65,[7,[584,42,584,64,[1,"<<",0,[584,42,584,48,[0,[[584,42,584,46,[12,"=="]],[584,47,584,48,[3,1]]]]],[584,52,584,64,[2,["Tuple"],"second"]]]]]]]]]]],[585,32,585,74,[0,[[585,32,585,41,[2,["Maybe"],"map"]],[585,42,585,74,[7,[585,43,585,73,[1,"<<",0,[585,43,585,58,[2,[],"GluedAfterFirst"]],[585,62,585,73,[2,["Tuple"],"first"]]]]]]]]]]],[588,25,588,32,[2,[],"Nothing"]]]]]]]]],[590,24,590,31,[19,[590,24,590,25,[2,[],"r"]],[590,26,590,31,"glues"]]]]]]]]]]]]]]]]]],[594,1,629,10,[0,[[1,[594,1,612,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately before the first function they\nare used in.\n\nFor example:\n\n    unwrap =\n        some func\n\n    a x =\n        unwrap x\n\n    b x =\n        unwrap x\n\n    c x =\n        unwrap x\n\n-}"]],[1,[613,1,613,92,[[613,1,613,37,"glueDependenciesBeforeFirstDependent"],[613,40,613,92,[6,[613,40,613,76,[1,[613,40,613,50,[[],"RuleConfig"]],[[613,51,613,76,[5,[613,53,613,54,"r"],[613,56,613,75,[[613,57,613,75,[[613,57,613,69,"noDependency"],[613,72,613,74,[2]]]]]]]]]]],[613,80,613,92,[1,[613,80,613,90,[[],"RuleConfig"]],[[613,91,613,92,[0,"r"]]]]]]]]]],[614,1,629,10,[[614,1,614,37,"glueDependenciesBeforeFirstDependent"],[[614,38,614,52,[14,[614,39,614,51,[12,[[],"RuleConfig"],[[614,50,614,51,[11,"r"]]]]]]]],[615,5,629,10,[0,[[615,5,615,15,[2,[],"RuleConfig"]],[616,9,629,10,[21,[616,11,616,12,"r"],[[617,15,629,9,[[617,15,617,20,"glues"],[618,17,628,31,[1,"::",1,[618,17,627,18,[7,[618,18,626,32,[18,[[[618,19,618,27,[7,[[618,21,618,22,[11,"i"]],[618,24,618,25,[11,"d"]]]]],[618,28,618,30,[11,"ds"]]],[620,21,626,32,[11,[620,24,620,72,[1,"&&",1,[620,24,620,49,[1,"==",2,[620,24,620,38,[19,[620,24,620,25,[2,[],"d"]],[620,26,620,38,"exposedOrder"]]],[620,42,620,49,[2,[],"Nothing"]]]],[620,53,620,72,[1,"==",2,[620,53,620,60,[19,[620,53,620,54,[2,[],"d"]],[620,55,620,60,"type_"]]],[620,64,620,72,[2,[],"Function"]]]]]],[621,25,623,75,[1,"|>",0,[621,25,622,83,[1,"|>",0,[621,25,621,53,[0,[[621,25,621,41,[2,[],"findDependencies"]],[621,42,621,50,[6,[[621,44,621,45,[2,[],"i"]],[621,47,621,48,[2,[],"d"]]]]],[621,51,621,53,[2,[],"ds"]]]]],[622,32,622,83,[0,[[622,32,622,40,[2,[],"validate"]],[622,41,622,83,[7,[622,42,622,82,[18,[[[622,43,622,62,[7,[[622,45,622,46,[0]],[622,48,622,60,[11,"numberUsedIn"]]]]]],[622,66,622,82,[1,">",2,[622,66,622,78,[2,[],"numberUsedIn"]],[622,81,622,82,[3,1]]]]]]]]]]]]]],[623,32,623,75,[0,[[623,32,623,41,[2,["Maybe"],"map"]],[623,42,623,75,[7,[623,43,623,74,[1,"<<",0,[623,43,623,59,[2,[],"GluedBeforeFirst"]],[623,63,623,74,[2,["Tuple"],"first"]]]]]]]]]]],[626,25,626,32,[2,[],"Nothing"]]]]]]]]],[628,24,628,31,[19,[628,24,628,25,[2,[],"r"]],[628,26,628,31,"glues"]]]]]]]]]]]]]]]]]],[632,1,667,10,[0,[[1,[632,1,650,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately after the first function they\nare used in.\n\nFor example:\n\n    a x =\n        unwrap x\n\n    unwrap =\n        some func\n\n    b x =\n        unwrap x\n\n    c x =\n        unwrap x\n\n-}"]],[1,[651,1,651,91,[[651,1,651,36,"glueDependenciesAfterFirstDependent"],[651,39,651,91,[6,[651,39,651,75,[1,[651,39,651,49,[[],"RuleConfig"]],[[651,50,651,75,[5,[651,52,651,53,"r"],[651,55,651,74,[[651,56,651,74,[[651,56,651,68,"noDependency"],[651,71,651,73,[2]]]]]]]]]]],[651,79,651,91,[1,[651,79,651,89,[[],"RuleConfig"]],[[651,90,651,91,[0,"r"]]]]]]]]]],[652,1,667,10,[[652,1,652,36,"glueDependenciesAfterFirstDependent"],[[652,37,652,51,[14,[652,38,652,50,[12,[[],"RuleConfig"],[[652,49,652,50,[11,"r"]]]]]]]],[653,5,667,10,[0,[[653,5,653,15,[2,[],"RuleConfig"]],[654,9,667,10,[21,[654,11,654,12,"r"],[[655,15,667,9,[[655,15,655,20,"glues"],[656,17,666,31,[1,"::",1,[656,17,665,18,[7,[656,18,664,32,[18,[[[656,19,656,27,[7,[[656,21,656,22,[11,"i"]],[656,24,656,25,[11,"d"]]]]],[656,28,656,30,[11,"ds"]]],[658,21,664,32,[11,[658,24,658,72,[1,"&&",1,[658,24,658,49,[1,"==",2,[658,24,658,38,[19,[658,24,658,25,[2,[],"d"]],[658,26,658,38,"exposedOrder"]]],[658,42,658,49,[2,[],"Nothing"]]]],[658,53,658,72,[1,"==",2,[658,53,658,60,[19,[658,53,658,54,[2,[],"d"]],[658,55,658,60,"type_"]]],[658,64,658,72,[2,[],"Function"]]]]]],[659,25,661,74,[1,"|>",0,[659,25,660,83,[1,"|>",0,[659,25,659,53,[0,[[659,25,659,41,[2,[],"findDependencies"]],[659,42,659,50,[6,[[659,44,659,45,[2,[],"i"]],[659,47,659,48,[2,[],"d"]]]]],[659,51,659,53,[2,[],"ds"]]]]],[660,32,660,83,[0,[[660,32,660,40,[2,[],"validate"]],[660,41,660,83,[7,[660,42,660,82,[18,[[[660,43,660,62,[7,[[660,45,660,46,[0]],[660,48,660,60,[11,"numberUsedIn"]]]]]],[660,66,660,82,[1,">",2,[660,66,660,78,[2,[],"numberUsedIn"]],[660,81,660,82,[3,1]]]]]]]]]]]]]],[661,32,661,74,[0,[[661,32,661,41,[2,["Maybe"],"map"]],[661,42,661,74,[7,[661,43,661,73,[1,"<<",0,[661,43,661,58,[2,[],"GluedAfterFirst"]],[661,62,661,73,[2,["Tuple"],"first"]]]]]]]]]]],[664,25,664,32,[2,[],"Nothing"]]]]]]]]],[666,24,666,31,[19,[666,24,666,25,[2,[],"r"]],[666,26,666,31,"glues"]]]]]]]]]]]]]]]]]],[670,1,705,10,[0,[[1,[670,1,688,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately after the last function they\nare used in.\n\nFor example:\n\n    a x =\n        unwrap x\n\n    b x =\n        unwrap x\n\n    c x =\n        unwrap x\n\n    unwrap =\n        some func\n\n-}"]],[1,[689,1,689,90,[[689,1,689,35,"glueDependenciesAfterLastDependent"],[689,38,689,90,[6,[689,38,689,74,[1,[689,38,689,48,[[],"RuleConfig"]],[[689,49,689,74,[5,[689,51,689,52,"r"],[689,54,689,73,[[689,55,689,73,[[689,55,689,67,"noDependency"],[689,70,689,72,[2]]]]]]]]]]],[689,78,689,90,[1,[689,78,689,88,[[],"RuleConfig"]],[[689,89,689,90,[0,"r"]]]]]]]]]],[690,1,705,10,[[690,1,690,35,"glueDependenciesAfterLastDependent"],[[690,36,690,50,[14,[690,37,690,49,[12,[[],"RuleConfig"],[[690,48,690,49,[11,"r"]]]]]]]],[691,5,705,10,[0,[[691,5,691,15,[2,[],"RuleConfig"]],[692,9,705,10,[21,[692,11,692,12,"r"],[[693,15,705,9,[[693,15,693,20,"glues"],[694,17,704,31,[1,"::",1,[694,17,703,18,[7,[694,18,702,32,[18,[[[694,19,694,27,[7,[[694,21,694,22,[11,"i"]],[694,24,694,25,[11,"d"]]]]],[694,28,694,30,[11,"ds"]]],[696,21,702,32,[11,[696,24,696,72,[1,"&&",1,[696,24,696,49,[1,"==",2,[696,24,696,38,[19,[696,24,696,25,[2,[],"d"]],[696,26,696,38,"exposedOrder"]]],[696,42,696,49,[2,[],"Nothing"]]]],[696,53,696,72,[1,"==",2,[696,53,696,60,[19,[696,53,696,54,[2,[],"d"]],[696,55,696,60,"type_"]]],[696,64,696,72,[2,[],"Function"]]]]]],[697,25,699,73,[1,"|>",0,[697,25,698,83,[1,"|>",0,[697,25,697,53,[0,[[697,25,697,41,[2,[],"findDependencies"]],[697,42,697,50,[6,[[697,44,697,45,[2,[],"i"]],[697,47,697,48,[2,[],"d"]]]]],[697,51,697,53,[2,[],"ds"]]]]],[698,32,698,83,[0,[[698,32,698,40,[2,[],"validate"]],[698,41,698,83,[7,[698,42,698,82,[18,[[[698,43,698,62,[7,[[698,45,698,46,[0]],[698,48,698,60,[11,"numberUsedIn"]]]]]],[698,66,698,82,[1,">",2,[698,66,698,78,[2,[],"numberUsedIn"]],[698,81,698,82,[3,1]]]]]]]]]]]]]],[699,32,699,73,[0,[[699,32,699,41,[2,["Maybe"],"map"]],[699,42,699,73,[7,[699,43,699,72,[1,"<<",0,[699,43,699,57,[2,[],"GluedAfterLast"]],[699,61,699,72,[2,["Tuple"],"first"]]]]]]]]]]],[702,25,702,32,[2,[],"Nothing"]]]]]]]]],[704,24,704,31,[19,[704,24,704,25,[2,[],"r"]],[704,26,704,31,"glues"]]]]]]]]]]]]]]]]]],[708,1,743,10,[0,[[1,[708,1,726,3,"{-| Dependencies are _unexposed_ functions that are used in multiple other\nfunctions. This glue attaches them immediately before the last function they\nare used in.\n\nFor example:\n\n    a x =\n        unwrap x\n\n    b x =\n        unwrap x\n\n    unwrap =\n        some func\n\n    c x =\n        unwrap x\n\n-}"]],[1,[727,1,727,91,[[727,1,727,36,"glueDependenciesBeforeLastDependent"],[727,39,727,91,[6,[727,39,727,75,[1,[727,39,727,49,[[],"RuleConfig"]],[[727,50,727,75,[5,[727,52,727,53,"r"],[727,55,727,74,[[727,56,727,74,[[727,56,727,68,"noDependency"],[727,71,727,73,[2]]]]]]]]]]],[727,79,727,91,[1,[727,79,727,89,[[],"RuleConfig"]],[[727,90,727,91,[0,"r"]]]]]]]]]],[728,1,743,10,[[728,1,728,36,"glueDependenciesBeforeLastDependent"],[[728,37,728,51,[14,[728,38,728,50,[12,[[],"RuleConfig"],[[728,49,728,50,[11,"r"]]]]]]]],[729,5,743,10,[0,[[729,5,729,15,[2,[],"RuleConfig"]],[730,9,743,10,[21,[730,11,730,12,"r"],[[731,15,743,9,[[731,15,731,20,"glues"],[732,17,742,31,[1,"::",1,[732,17,741,18,[7,[732,18,740,32,[18,[[[732,19,732,27,[7,[[732,21,732,22,[11,"i"]],[732,24,732,25,[11,"d"]]]]],[732,28,732,30,[11,"ds"]]],[734,21,740,32,[11,[734,24,734,72,[1,"&&",1,[734,24,734,49,[1,"==",2,[734,24,734,38,[19,[734,24,734,25,[2,[],"d"]],[734,26,734,38,"exposedOrder"]]],[734,42,734,49,[2,[],"Nothing"]]]],[734,53,734,72,[1,"==",2,[734,53,734,60,[19,[734,53,734,54,[2,[],"d"]],[734,55,734,60,"type_"]]],[734,64,734,72,[2,[],"Function"]]]]]],[735,25,737,74,[1,"|>",0,[735,25,736,83,[1,"|>",0,[735,25,735,53,[0,[[735,25,735,41,[2,[],"findDependencies"]],[735,42,735,50,[6,[[735,44,735,45,[2,[],"i"]],[735,47,735,48,[2,[],"d"]]]]],[735,51,735,53,[2,[],"ds"]]]]],[736,32,736,83,[0,[[736,32,736,40,[2,[],"validate"]],[736,41,736,83,[7,[736,42,736,82,[18,[[[736,43,736,62,[7,[[736,45,736,46,[0]],[736,48,736,60,[11,"numberUsedIn"]]]]]],[736,66,736,82,[1,">",2,[736,66,736,78,[2,[],"numberUsedIn"]],[736,81,736,82,[3,1]]]]]]]]]]]]]],[737,32,737,74,[0,[[737,32,737,41,[2,["Maybe"],"map"]],[737,42,737,74,[7,[737,43,737,73,[1,"<<",0,[737,43,737,58,[2,[],"GluedBeforeLast"]],[737,62,737,73,[2,["Tuple"],"first"]]]]]]]]]]],[740,25,740,32,[2,[],"Nothing"]]]]]]]]],[742,24,742,31,[19,[742,24,742,25,[2,[],"r"]],[742,26,742,31,"glues"]]]]]]]]]]]]]]]]]],[746,1,755,6,[0,[[1,[746,1,747,3,"{-| Collect the range of imports in the module.\n-}"]],[1,[748,1,748,58,[[748,1,748,22,"accumulateImportRange"],[748,25,748,58,[6,[748,25,748,36,[1,[748,25,748,29,[[],"Node"]],[[748,30,748,36,[1,[748,30,748,36,[[],"Import"]],[]]]]]],[748,40,748,58,[6,[748,40,748,47,[1,[748,40,748,47,[[],"Context"]],[]]],[748,51,748,58,[1,[748,51,748,58,[[],"Context"]],[]]]]]]]]]],[749,1,755,6,[[749,1,749,22,"accumulateImportRange"],[[749,23,749,24,[11,"i"]],[749,25,749,32,[11,"context"]]],[750,5,755,6,[21,[750,7,750,14,"context"],[[751,11,755,5,[[751,11,751,28,"moduleImportRange"],[752,13,754,42,[0,[[752,13,752,26,[2,["MaybeX"],"unpack"]],[752,27,752,56,[7,[752,28,752,55,[18,[[[752,29,752,31,[1]]],[752,35,752,55,[1,"<|",1,[752,35,752,39,[2,[],"Just"]],[752,43,752,55,[0,[[752,43,752,53,[2,["Node"],"range"]],[752,54,752,55,[2,[],"i"]]]]]]]]]]]],[753,17,753,66,[7,[753,18,753,65,[18,[[[753,19,753,20,[11,"r"]]],[753,24,753,65,[1,"<|",1,[753,24,753,28,[2,[],"Just"]],[753,32,753,65,[0,[[753,32,753,45,[2,["Range"],"combine"]],[753,46,753,65,[9,[[753,48,753,49,[2,[],"r"]],[753,51,753,63,[0,[[753,51,753,61,[2,["Node"],"range"]],[753,62,753,63,[2,[],"i"]]]]]]]]]]]]]]]]]],[754,17,754,42,[19,[754,17,754,24,[2,[],"context"]],[754,25,754,42,"moduleImportRange"]]]]]]]]]]]]]]]],[758,1,766,6,[1,[[1,[758,1,759,3,"{-| Info about the module, as well as the source extractor.\n-}"]],[760,12,760,19,"Context"],[],[761,5,766,6,[4,[[761,7,761,38,[[761,7,761,20,"extractSource"],[761,23,761,38,[6,[761,23,761,28,[1,[761,23,761,28,[[],"Range"]],[]]],[761,32,761,38,[1,[761,32,761,38,[[],"String"]],[]]]]]]],[762,7,763,5,[[762,7,762,14,"exports"],[762,17,762,36,[1,[762,17,762,22,[[],"Maybe"]],[[762,23,762,36,[1,[762,24,762,28,[[],"List"]],[[762,29,762,35,[1,[762,29,762,35,[[],"String"]],[]]]]]]]]]]],[763,7,764,5,[[763,7,763,17,"errorRange"],[763,20,763,25,[1,[763,20,763,25,[[],"Range"]],[]]]]],[764,7,765,5,[[764,7,764,26,"unparsedDocComments"],[764,29,764,47,[1,[764,29,764,33,[[],"List"]],[[764,34,764,47,[1,[764,35,764,39,[[],"Node"]],[[764,40,764,46,[1,[764,40,764,46,[[],"String"]],[]]]]]]]]]]],[765,7,766,5,[[765,7,765,24,"moduleImportRange"],[765,27,765,38,[1,[765,27,765,32,[[],"Maybe"]],[[765,33,765,38,[1,[765,33,765,38,[[],"Range"]],[]]]]]]]]]]]]]],[769,1,774,11,[2,[[1,[769,1,770,3,"{-| The type of TLD it is.\n-}"]],[771,6,771,21,"DeclarationType"],[],[[772,7,772,15,[[772,7,772,15,"Function"],[]]],[773,7,773,11,[[773,7,773,11,"Port"],[]]],[774,7,774,11,[[774,7,774,11,"Type"],[]]]]]]],[777,1,822,105,[0,[[1,[777,1,778,3,"{-| Generate declaration info for all TLDs and then check that they are sorted.\n-}"]],[1,[779,1,779,91,[[779,1,779,19,"declarationVisitor"],[779,22,779,91,[6,[779,22,779,34,[1,[779,22,779,32,[[],"RuleConfig"]],[[779,33,779,34,[0,"r"]]]]],[779,38,779,91,[6,[779,38,779,61,[1,[779,38,779,42,[[],"List"]],[[779,43,779,61,[1,[779,44,779,48,[[],"Node"]],[[779,49,779,60,[1,[779,49,779,60,[[],"Declaration"]],[]]]]]]]]],[779,65,779,91,[6,[779,65,779,72,[1,[779,65,779,72,[[],"Context"]],[]]],[779,76,779,91,[1,[779,76,779,80,[[],"List"]],[[779,81,779,91,[1,[779,82,779,87,[[],"Error"]],[[779,88,779,90,[4,[]]]]]]]]]]]]]]]]]],[780,1,822,105,[[780,1,780,19,"declarationVisitor"],[[780,20,780,50,[14,[780,21,780,49,[12,[[],"RuleConfig"],[[780,32,780,49,[8,[[780,34,780,40,"sortBy"],[780,42,780,47,"glues"]]]]]]]]],[780,51,780,55,[11,"decs"]],[780,56,780,63,[11,"context"]]],[781,5,822,105,[16,[[[782,9,784,70,[0,[[0],[1,[782,9,782,51,[[782,9,782,19,"applyGlues"],[782,22,782,51,[6,[782,22,782,30,[1,[782,22,782,26,[[],"List"]],[[782,27,782,30,[1,[782,27,782,30,[[],"TLD"]],[]]]]]],[782,34,782,51,[6,[782,34,782,37,[1,[782,34,782,37,[[],"Int"]],[]]],[782,41,782,51,[6,[782,41,782,44,[1,[782,41,782,44,[[],"TLD"]],[]]],[782,48,782,51,[1,[782,48,782,51,[[],"TLD"]],[]]]]]]]]]]]],[783,9,784,70,[[783,9,783,19,"applyGlues"],[[783,20,783,22,[11,"ds"]],[783,23,783,24,[11,"i"]],[783,25,783,26,[11,"d"]]],[784,13,784,70,[21,[784,15,784,16,"d"],[[784,19,784,69,[[784,19,784,24,"glued"],[784,27,784,68,[0,[[784,27,784,40,[2,["ListX"],"findMap"]],[784,41,784,62,[7,[784,42,784,61,[18,[[[784,43,784,44,[11,"g"]]],[784,48,784,61,[0,[[784,48,784,49,[2,[],"g"]],[784,50,784,58,[6,[[784,52,784,53,[2,[],"i"]],[784,55,784,56,[2,[],"d"]]]]],[784,59,784,61,[2,[],"ds"]]]]]]]]]],[784,63,784,68,[2,[],"glues"]]]]]]]]]]]]]]]],[786,5,822,105,[1,"|>",0,[786,5,821,55,[1,"|>",0,[786,5,820,24,[1,"|>",0,[786,5,819,23,[1,"|>",0,[786,5,818,13,[1,"|>",0,[786,5,815,14,[1,"|>",0,[786,5,786,45,[0,[[786,5,786,17,[2,["ListX"],"uncons"]],[786,18,786,45,[19,[786,18,786,25,[2,[],"context"]],[786,26,786,45,"unparsedDocComments"]]]]]],[787,12,815,14,[0,[[787,12,787,25,[2,["MaybeX"],"unwrap"]],[787,26,787,28,[9,[]]],[788,13,815,14,[7,[788,14,814,27,[18,[[[788,15,788,24,[7,[[788,17,788,18,[11,"c"]],[788,20,788,22,[11,"cs"]]]]]],[789,17,814,27,[17,[[789,22,789,88,[0,[[789,22,789,31,[2,["Maybe"],"map"]],[789,32,789,62,[7,[789,33,789,61,[0,[[789,33,789,46,[2,["Range"],"compare"]],[789,47,789,61,[7,[789,48,789,60,[0,[[789,48,789,58,[2,["Node"],"range"]],[789,59,789,60,[2,[],"c"]]]]]]]]]]]],[789,63,789,88,[19,[789,63,789,70,[2,[],"context"]],[789,71,789,88,"moduleImportRange"]]]]]],[[[790,21,790,28,[12,[[],"Just"],[[790,26,790,28,[12,[[],"GT"],[]]]]]],[792,25,792,52,[19,[792,25,792,32,[2,[],"context"]],[792,33,792,52,"unparsedDocComments"]]]],[[794,21,794,28,[12,[[],"Nothing"],[]]],[805,25,810,56,[11,[805,28,805,96,[1,"<|",1,[805,28,805,64,[0,[[805,28,805,36,[2,["List"],"any"]],[805,37,805,64,[7,[805,38,805,63,[0,[[805,38,805,55,[2,["String"],"startsWith"]],[805,56,805,63,[5,"@docs"]]]]]]]]]],[805,68,805,96,[1,"<|",1,[805,68,805,80,[2,["String"],"lines"]],[805,84,805,96,[0,[[805,84,805,94,[2,["Node"],"value"]],[805,95,805,96,[2,[],"c"]]]]]]]]],[806,29,806,31,[2,[],"cs"]],[810,29,810,56,[19,[810,29,810,36,[2,[],"context"]],[810,37,810,56,"unparsedDocComments"]]]]]],[[812,21,812,22,[0]],[814,25,814,27,[2,[],"cs"]]]]]]]]]]]]]]]]],[816,12,818,13,[7,[816,13,817,94,[18,[[[816,14,816,38,[11,"docCommentsWithoutModule"]]],[817,17,817,94,[0,[[817,17,817,27,[2,["List"],"foldl"]],[817,28,817,56,[7,[817,29,817,55,[0,[[817,29,817,39,[2,[],"getDecInfo"]],[817,40,817,55,[19,[817,40,817,47,[2,[],"context"]],[817,48,817,55,"exports"]]]]]]]],[817,57,817,89,[6,[[817,59,817,61,[9,[]]],[817,63,817,87,[2,[],"docCommentsWithoutModule"]]]]],[817,90,817,94,[2,[],"decs"]]]]]]]]]]]],[819,12,819,23,[2,["Tuple"],"first"]]]],[820,12,820,24,[2,["List"],"reverse"]]]],[821,12,821,55,[7,[821,13,821,54,[18,[[[821,14,821,16,[11,"ds"]]],[821,20,821,54,[0,[[821,20,821,35,[2,["List"],"indexedMap"]],[821,36,821,51,[7,[821,37,821,50,[0,[[821,37,821,47,[2,[],"applyGlues"]],[821,48,821,50,[2,[],"ds"]]]]]]],[821,52,821,54,[2,[],"ds"]]]]]]]]]]]],[822,12,822,105,[0,[[822,12,822,32,[2,[],"checkSortingWithGlue"]],[822,33,822,54,[19,[822,33,822,40,[2,[],"context"]],[822,41,822,54,"extractSource"]]],[822,55,822,79,[5,"Top-level declarations"]],[822,80,822,86,[2,[],"sortBy"]],[822,87,822,105,[19,[822,87,822,94,[2,[],"context"]],[822,95,822,105,"errorRange"]]]]]]]]]]]]]]]],[825,1,892,67,[0,[[1,[825,1,826,3,"{-| Given a list of module exports, generate TLD info from a `declaration`.\n-}"]],[1,[827,1,827,125,[[827,1,827,11,"getDecInfo"],[827,14,827,125,[6,[827,14,827,33,[1,[827,14,827,19,[[],"Maybe"]],[[827,20,827,33,[1,[827,21,827,25,[[],"List"]],[[827,26,827,32,[1,[827,26,827,32,[[],"String"]],[]]]]]]]]],[827,37,827,125,[6,[827,37,827,53,[1,[827,37,827,41,[[],"Node"]],[[827,42,827,53,[1,[827,42,827,53,[[],"Declaration"]],[]]]]]],[827,57,827,125,[6,[827,57,827,89,[3,[[827,59,827,67,[1,[827,59,827,63,[[],"List"]],[[827,64,827,67,[1,[827,64,827,67,[[],"TLD"]],[]]]]]],[827,69,827,87,[1,[827,69,827,73,[[],"List"]],[[827,74,827,87,[1,[827,75,827,79,[[],"Node"]],[[827,80,827,86,[1,[827,80,827,86,[[],"String"]],[]]]]]]]]]]]],[827,93,827,125,[3,[[827,95,827,103,[1,[827,95,827,99,[[],"List"]],[[827,100,827,103,[1,[827,100,827,103,[[],"TLD"]],[]]]]]],[827,105,827,123,[1,[827,105,827,109,[[],"List"]],[[827,110,827,123,[1,[827,111,827,115,[[],"Node"]],[[827,116,827,122,[1,[827,116,827,122,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]],[828,1,892,67,[[828,1,828,11,"getDecInfo"],[[828,12,828,19,[11,"exports"]],[828,20,828,21,[11,"d"]],[828,22,828,50,[7,[[828,24,828,27,[11,"acc"]],[828,29,828,48,[11,"unparsedDocComments"]]]]]],[829,5,892,67,[16,[[[830,9,835,45,[1,[830,9,830,64,[7,[[830,11,830,40,[11,"immediatelyPreviousDocComment"]],[830,42,830,62,[11,"remainingDocComments"]]]]],[831,13,835,45,[1,"|>",0,[831,13,834,48,[1,"|>",0,[831,13,831,106,[0,[[831,13,831,28,[2,["ListX"],"splitWhen"]],[831,29,831,86,[7,[831,30,831,85,[18,[[[831,31,831,32,[11,"c"]]],[831,36,831,85,[1,"==",2,[831,36,831,79,[0,[[831,36,831,49,[2,["Range"],"compare"]],[831,50,831,64,[7,[831,51,831,63,[0,[[831,51,831,61,[2,["Node"],"range"]],[831,62,831,63,[2,[],"c"]]]]]]],[831,65,831,79,[7,[831,66,831,78,[0,[[831,66,831,76,[2,["Node"],"range"]],[831,77,831,78,[2,[],"d"]]]]]]]]]],[831,83,831,85,[2,[],"GT"]]]]]]]]],[831,87,831,106,[2,[],"unparsedDocComments"]]]]],[832,20,834,48,[0,[[832,20,832,37,[2,["Maybe"],"withDefault"]],[834,21,834,48,[6,[[834,23,834,42,[2,[],"unparsedDocComments"]],[834,44,834,46,[9,[]]]]]]]]]]],[835,20,835,45,[0,[[835,20,835,34,[2,["Tuple"],"mapFirst"]],[835,35,835,45,[2,["ListX"],"last"]]]]]]]]]],[837,5,892,67,[1,"|>",0,[837,5,891,6,[6,[[837,7,889,20,[17,[[837,12,837,24,[0,[[837,12,837,22,[2,["Node"],"value"]],[837,23,837,24,[2,[],"d"]]]]],[[[838,9,838,44,[12,[[],"FunctionDeclaration"],[[838,29,838,44,[8,[[838,31,838,42,"declaration"]]]]]]],[839,13,849,24,[1,"|>",0,[839,13,848,21,[1,"|>",0,[839,13,839,35,[0,[[839,13,839,23,[2,["Node"],"value"]],[839,24,839,35,[2,[],"declaration"]]]]],[840,20,848,21,[7,[840,21,847,26,[18,[[[840,22,840,42,[8,[[840,24,840,28,"name"],[840,30,840,40,"expression"]]]]],[841,25,847,26,[8,[[841,27,841,43,[[841,27,841,32,"type_"],[841,35,841,43,[2,[],"Function"]]]],[842,27,843,25,[[842,27,842,37,"namesBound"],[842,40,842,72,[1,"<|",1,[842,40,842,53,[2,["Set"],"singleton"]],[842,57,842,72,[0,[[842,57,842,67,[2,["Node"],"value"]],[842,68,842,72,[2,[],"name"]]]]]]]]],[843,27,844,25,[[843,27,843,39,"exposedOrder"],[843,42,843,100,[0,[[843,42,843,55,[2,["Maybe"],"andThen"]],[843,56,843,92,[7,[843,57,843,91,[1,"<|",1,[843,57,843,72,[2,["ListX"],"elemIndex"]],[843,76,843,91,[0,[[843,76,843,86,[2,["Node"],"value"]],[843,87,843,91,[2,[],"name"]]]]]]]]],[843,93,843,100,[2,[],"exports"]]]]]]],[844,27,845,25,[[844,27,844,32,"range"],[844,35,844,47,[0,[[844,35,844,45,[2,["Node"],"range"]],[844,46,844,47,[2,[],"d"]]]]]]],[845,27,846,25,[[845,27,845,46,"dependentOnBindings"],[845,49,845,74,[0,[[845,49,845,63,[2,[],"findAllNamesIn"]],[845,64,845,74,[2,[],"expression"]]]]]]],[846,27,847,25,[[846,27,846,32,"glued"],[846,35,846,42,[2,[],"Nothing"]]]]]]]]]]]]]],[849,20,849,24,[2,[],"Just"]]]]],[[851,9,851,34,[12,[[],"AliasDeclaration"],[[851,26,851,34,[8,[[851,28,851,32,"name"]]]]]]],[852,13,859,18,[0,[[852,13,852,17,[2,[],"Just"]],[853,17,859,18,[8,[[853,19,853,31,[[853,19,853,24,"type_"],[853,27,853,31,[2,[],"Type"]]]],[854,19,855,17,[[854,19,854,29,"namesBound"],[854,32,854,64,[1,"<|",1,[854,32,854,45,[2,["Set"],"singleton"]],[854,49,854,64,[0,[[854,49,854,59,[2,["Node"],"value"]],[854,60,854,64,[2,[],"name"]]]]]]]]],[855,19,856,17,[[855,19,855,31,"exposedOrder"],[855,34,855,91,[0,[[855,34,855,47,[2,["Maybe"],"andThen"]],[855,48,855,83,[7,[855,49,855,82,[0,[[855,49,855,64,[2,["ListX"],"elemIndex"]],[855,65,855,82,[7,[855,66,855,81,[0,[[855,66,855,76,[2,["Node"],"value"]],[855,77,855,81,[2,[],"name"]]]]]]]]]]]],[855,84,855,91,[2,[],"exports"]]]]]]],[856,19,857,17,[[856,19,856,24,"range"],[856,27,856,39,[0,[[856,27,856,37,[2,["Node"],"range"]],[856,38,856,39,[2,[],"d"]]]]]]],[857,19,858,17,[[857,19,857,38,"dependentOnBindings"],[857,41,857,50,[2,["Set"],"empty"]]]],[858,19,859,17,[[858,19,858,24,"glued"],[858,27,858,34,[2,[],"Nothing"]]]]]]]]]]],[[861,9,861,39,[12,[[],"CustomTypeDeclaration"],[[861,31,861,39,[8,[[861,33,861,37,"name"]]]]]]],[862,13,869,18,[0,[[862,13,862,17,[2,[],"Just"]],[863,17,869,18,[8,[[863,19,863,31,[[863,19,863,24,"type_"],[863,27,863,31,[2,[],"Type"]]]],[864,19,865,17,[[864,19,864,29,"namesBound"],[864,32,864,64,[1,"<|",1,[864,32,864,45,[2,["Set"],"singleton"]],[864,49,864,64,[0,[[864,49,864,59,[2,["Node"],"value"]],[864,60,864,64,[2,[],"name"]]]]]]]]],[865,19,866,17,[[865,19,865,31,"exposedOrder"],[865,34,865,91,[0,[[865,34,865,47,[2,["Maybe"],"andThen"]],[865,48,865,83,[7,[865,49,865,82,[0,[[865,49,865,64,[2,["ListX"],"elemIndex"]],[865,65,865,82,[7,[865,66,865,81,[0,[[865,66,865,76,[2,["Node"],"value"]],[865,77,865,81,[2,[],"name"]]]]]]]]]]]],[865,84,865,91,[2,[],"exports"]]]]]]],[866,19,867,17,[[866,19,866,24,"range"],[866,27,866,39,[0,[[866,27,866,37,[2,["Node"],"range"]],[866,38,866,39,[2,[],"d"]]]]]]],[867,19,868,17,[[867,19,867,38,"dependentOnBindings"],[867,41,867,50,[2,["Set"],"empty"]]]],[868,19,869,17,[[868,19,868,24,"glued"],[868,27,868,34,[2,[],"Nothing"]]]]]]]]]]],[[871,9,871,33,[12,[[],"PortDeclaration"],[[871,25,871,33,[8,[[871,27,871,31,"name"]]]]]]],[872,13,883,18,[0,[[872,13,872,17,[2,[],"Just"]],[873,17,883,18,[8,[[873,19,873,31,[[873,19,873,24,"type_"],[873,27,873,31,[2,[],"Port"]]]],[874,19,877,17,[[874,19,874,29,"namesBound"],[874,32,874,64,[1,"<|",1,[874,32,874,45,[2,["Set"],"singleton"]],[874,49,874,64,[0,[[874,49,874,59,[2,["Node"],"value"]],[874,60,874,64,[2,[],"name"]]]]]]]]],[877,19,878,17,[[877,19,877,31,"exposedOrder"],[877,34,877,41,[2,[],"Nothing"]]]],[878,19,879,17,[[878,19,878,24,"range"],[878,27,878,138,[0,[[878,27,878,40,[2,["MaybeX"],"unwrap"]],[878,41,878,55,[7,[878,42,878,54,[0,[[878,42,878,52,[2,["Node"],"range"]],[878,53,878,54,[2,[],"d"]]]]]]],[878,56,878,108,[7,[878,57,878,107,[18,[[[878,58,878,59,[11,"c"]]],[878,63,878,107,[0,[[878,63,878,76,[2,["Range"],"combine"]],[878,77,878,107,[9,[[878,79,878,91,[0,[[878,79,878,89,[2,["Node"],"range"]],[878,90,878,91,[2,[],"c"]]]]],[878,93,878,105,[0,[[878,93,878,103,[2,["Node"],"range"]],[878,104,878,105,[2,[],"d"]]]]]]]]]]]]]]]],[878,109,878,138,[2,[],"immediatelyPreviousDocComment"]]]]]]],[879,19,880,17,[[879,19,879,38,"dependentOnBindings"],[879,41,879,50,[2,["Set"],"empty"]]]],[880,19,883,17,[[880,19,880,24,"glued"],[880,27,880,34,[2,[],"Nothing"]]]]]]]]]]],[[885,9,885,10,[0]],[889,13,889,20,[2,[],"Nothing"]]]]]]],[890,7,890,27,[2,[],"remainingDocComments"]]]]],[892,12,892,67,[0,[[892,12,892,26,[2,["Tuple"],"mapFirst"]],[892,27,892,67,[7,[892,28,892,66,[0,[[892,28,892,41,[2,["MaybeX"],"unwrap"]],[892,42,892,45,[2,[],"acc"]],[892,46,892,66,[7,[892,47,892,65,[18,[[[892,48,892,51,[11,"tld"]]],[892,55,892,65,[1,"::",1,[892,55,892,58,[2,[],"tld"]],[892,62,892,65,[2,[],"acc"]]]]]]]]]]]]]]]]]]]]]]]]]]],[895,1,941,14,[0,[[1,[895,1,896,3,"{-| Get an ordered list of all names exported by a module.\n-}"]],[1,[897,1,897,53,[[897,1,897,17,"getModuleExports"],[897,20,897,53,[6,[897,20,897,31,[1,[897,20,897,24,[[],"Node"]],[[897,25,897,31,[1,[897,25,897,31,[[],"Module"]],[]]]]]],[897,35,897,53,[6,[897,35,897,42,[1,[897,35,897,42,[[],"Context"]],[]]],[897,46,897,53,[1,[897,46,897,53,[[],"Context"]],[]]]]]]]]]],[898,1,941,14,[[898,1,898,17,"getModuleExports"],[[898,18,898,19,[11,"m"]],[898,20,898,27,[11,"context"]]],[899,5,941,14,[16,[[[900,9,910,85,[0,[[0],[1,[900,9,900,27,[[900,9,900,19,"errorRange"],[900,22,900,27,[1,[900,22,900,27,[[],"Range"]],[]]]]]],[901,9,910,85,[[901,9,901,19,"errorRange"],[],[902,13,910,85,[17,[[902,18,902,30,[0,[[902,18,902,28,[2,["Node"],"value"]],[902,29,902,30,[2,[],"m"]]]]],[[[903,17,903,36,[12,[["Module"],"PortModule"],[[903,35,903,36,[0]]]]],[905,21,905,86,[21,[905,23,905,24,"r"],[[905,27,905,85,[[905,27,905,30,"end"],[905,33,905,84,[8,[[905,35,905,52,[[905,35,905,38,"row"],[905,41,905,52,[19,[905,41,905,48,[19,[905,41,905,42,[2,[],"r"]],[905,43,905,48,"start"]]],[905,49,905,52,"row"]]]]],[905,54,905,83,[[905,54,905,60,"column"],[905,63,905,82,[1,"+",0,[905,63,905,77,[19,[905,63,905,70,[19,[905,63,905,64,[2,[],"r"]],[905,65,905,70,"start"]]],[905,71,905,77,"column"]]],[905,80,905,82,[3,11]]]]]]]]]]]]]]],[[907,17,907,18,[0]],[910,21,910,85,[21,[910,23,910,24,"r"],[[910,27,910,84,[[910,27,910,30,"end"],[910,33,910,83,[8,[[910,35,910,52,[[910,35,910,38,"row"],[910,41,910,52,[19,[910,41,910,48,[19,[910,41,910,42,[2,[],"r"]],[910,43,910,48,"start"]]],[910,49,910,52,"row"]]]]],[910,54,910,82,[[910,54,910,60,"column"],[910,63,910,81,[1,"+",0,[910,63,910,77,[19,[910,63,910,70,[19,[910,63,910,64,[2,[],"r"]],[910,65,910,70,"start"]]],[910,71,910,77,"column"]]],[910,80,910,81,[3,6]]]]]]]]]]]]]]]]]]]]]]]],[912,9,914,25,[0,[[0],[1,[912,9,912,18,[[912,9,912,10,"r"],[912,13,912,18,[1,[912,13,912,18,[[],"Range"]],[]]]]]],[913,9,914,25,[[913,9,913,10,"r"],[],[914,13,914,25,[0,[[914,13,914,23,[2,["Node"],"range"]],[914,24,914,25,[2,[],"m"]]]]]]]]]]],[916,5,941,14,[17,[[916,10,916,45,[1,"<|",1,[916,10,916,29,[2,["Module"],"exposingList"]],[916,33,916,45,[0,[[916,33,916,43,[2,["Node"],"value"]],[916,44,916,45,[2,[],"m"]]]]]]],[[[917,9,917,23,[12,[["Exposing"],"All"],[[917,22,917,23,[0]]]]],[918,13,918,50,[21,[918,15,918,22,"context"],[[918,25,918,49,[[918,25,918,35,"errorRange"],[918,38,918,48,[2,[],"errorRange"]]]]]]]],[[920,9,920,34,[12,[["Exposing"],"Explicit"],[[920,27,920,34,[11,"exports"]]]]],[921,13,941,14,[21,[921,15,921,22,"context"],[[922,19,940,17,[[922,19,922,26,"exports"],[923,21,939,36,[1,"<|",1,[923,21,923,25,[2,[],"Just"]],[924,25,939,36,[0,[[924,25,924,33,[2,["List"],"map"]],[925,29,938,30,[7,[925,30,937,45,[18,[[[925,31,925,32,[11,"e"]]],[926,33,937,45,[17,[[926,38,926,50,[0,[[926,38,926,48,[2,["Node"],"value"]],[926,49,926,50,[2,[],"e"]]]]],[[[927,37,927,50,[12,[[],"InfixExpose"],[[927,49,927,50,[11,"s"]]]]],[928,41,928,42,[2,[],"s"]]],[[930,37,930,53,[12,[[],"FunctionExpose"],[[930,52,930,53,[11,"s"]]]]],[931,41,931,42,[2,[],"s"]]],[[933,37,933,56,[12,[[],"TypeOrAliasExpose"],[[933,55,933,56,[11,"s"]]]]],[934,41,934,42,[2,[],"s"]]],[[936,37,936,56,[12,[[],"TypeExpose"],[[936,48,936,56,[8,[[936,50,936,54,"name"]]]]]]],[937,41,937,45,[2,[],"name"]]]]]]]]]]]],[939,29,939,36,[2,[],"exports"]]]]]]]]],[940,19,941,13,[[940,19,940,29,"errorRange"],[940,32,940,42,[2,[],"errorRange"]]]]]]]]]]]]]]]]]]]],[944,1,959,6,[0,[[1,[944,1,946,3,"{-| Get an ordered list of all doc comments in the module that were not parsed\nby `elm-syntax`.\n-}"]],[1,[947,1,947,66,[[947,1,947,23,"getUnparsedDocComments"],[947,26,947,66,[6,[947,26,947,44,[1,[947,26,947,30,[[],"List"]],[[947,31,947,44,[1,[947,32,947,36,[[],"Node"]],[[947,37,947,43,[1,[947,37,947,43,[[],"String"]],[]]]]]]]]],[947,48,947,66,[6,[947,48,947,55,[1,[947,48,947,55,[[],"Context"]],[]]],[947,59,947,66,[1,[947,59,947,66,[[],"Context"]],[]]]]]]]]]],[948,1,959,6,[[948,1,948,23,"getUnparsedDocComments"],[[948,24,948,32,[11,"comments"]],[948,33,948,40,[11,"context"]]],[949,5,959,6,[21,[949,7,949,14,"context"],[[950,11,959,5,[[950,11,950,30,"unparsedDocComments"],[951,13,958,25,[0,[[951,13,951,24,[2,["List"],"filter"]],[952,17,957,18,[7,[952,18,956,25,[1,">>",1,[952,18,952,28,[2,["Node"],"value"]],[953,24,956,25,[7,[953,25,955,58,[18,[[[953,26,953,27,[11,"c"]]],[954,29,955,58,[1,"&&",1,[954,29,954,54,[0,[[954,29,954,46,[2,["String"],"startsWith"]],[954,47,954,52,[5,"{-|"]],[954,53,954,54,[2,[],"c"]]]]],[955,36,955,58,[0,[[955,36,955,51,[2,["String"],"endsWith"]],[955,52,955,56,[5,"-}"]],[955,57,955,58,[2,[],"c"]]]]]]]]]]]]]]]],[958,17,958,25,[2,[],"comments"]]]]]]]]]]]]]]],[962,1,965,46,[1,[[1,[962,1,963,3,"{-| Given a `TLD` and a list of other `TLD`s,\n-}"]],[964,12,964,16,"Glue"],[],[965,5,965,46,[6,[965,5,965,17,[3,[[965,7,965,10,[1,[965,7,965,10,[[],"Int"]],[]]],[965,12,965,15,[1,[965,12,965,15,[[],"TLD"]],[]]]]]],[965,21,965,46,[6,[965,21,965,29,[1,[965,21,965,25,[[],"List"]],[[965,26,965,29,[1,[965,26,965,29,[[],"TLD"]],[]]]]]],[965,33,965,46,[1,[965,33,965,38,[[],"Maybe"]],[[965,39,965,46,[1,[965,39,965,46,[[],"GluedTo"]],[]]]]]]]]]]]]],[968,1,981,40,[0,[[1,[968,1,969,3,"{-| Create a context with a source extractor.\n-}"]],[1,[970,1,970,48,[[970,1,970,15,"initialContext"],[970,18,970,48,[1,[970,18,970,37,[["Rule"],"ContextCreator"]],[[970,38,970,40,[2]],[970,41,970,48,[1,[970,41,970,48,[[],"Context"]],[]]]]]]]]],[971,1,981,40,[[971,1,971,15,"initialContext"],[],[972,5,981,40,[1,"|>",0,[972,5,980,10,[0,[[972,5,972,28,[2,["Rule"],"initContextCreator"]],[973,9,980,10,[7,[973,10,979,14,[18,[[[973,11,973,24,[11,"extractSource"]],[973,25,973,27,[1]]],[974,13,979,14,[8,[[974,15,974,44,[[974,15,974,28,"extractSource"],[974,31,974,44,[2,[],"extractSource"]]]],[975,15,976,13,[[975,15,975,22,"exports"],[975,25,975,32,[2,[],"Nothing"]]]],[976,15,977,13,[[976,15,976,25,"errorRange"],[976,28,976,44,[2,["Range"],"emptyRange"]]]],[977,15,978,13,[[977,15,977,34,"unparsedDocComments"],[977,37,977,39,[9,[]]]]],[978,15,979,13,[[978,15,978,32,"moduleImportRange"],[978,35,978,42,[2,[],"Nothing"]]]]]]]]]]]]]]],[981,12,981,40,[2,["Rule"],"withSourceCodeExtractor"]]]]]]]]],[984,1,993,6,[1,[[1,[984,1,985,3,"{-| Information about a TLD.\n-}"]],[986,12,986,15,"TLD"],[],[987,5,993,6,[4,[[987,7,987,30,[[987,7,987,12,"type_"],[987,15,987,30,[1,[987,15,987,30,[[],"DeclarationType"]],[]]]]],[988,7,989,5,[[988,7,988,17,"namesBound"],[988,20,988,30,[1,[988,20,988,23,[[],"Set"]],[[988,24,988,30,[1,[988,24,988,30,[[],"String"]],[]]]]]]]],[989,7,990,5,[[989,7,989,19,"exposedOrder"],[989,22,989,31,[1,[989,22,989,27,[[],"Maybe"]],[[989,28,989,31,[1,[989,28,989,31,[[],"Int"]],[]]]]]]]],[990,7,991,5,[[990,7,990,12,"range"],[990,15,990,20,[1,[990,15,990,20,[[],"Range"]],[]]]]],[991,7,992,5,[[991,7,991,26,"dependentOnBindings"],[991,29,991,39,[1,[991,29,991,32,[[],"Set"]],[[991,33,991,39,[1,[991,33,991,39,[[],"String"]],[]]]]]]]],[992,7,993,5,[[992,7,992,12,"glued"],[992,15,992,28,[1,[992,15,992,20,[[],"Maybe"]],[[992,21,992,28,[1,[992,21,992,28,[[],"GluedTo"]],[]]]]]]]]]]]]]]],[[8,1,42,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, sortTopLevelDeclarations\n\n\n## Orderings\n\n@docs alphabetically, exposedOrderWithPrivateLast, exposedOrderWithPrivateFirst, typesFirst, typesLast, portsFirst, portsLast\n\n\n## Glues\n\nGlues provide a way to \"stick\" one declaration to another, i.e. to always sort\none declaration alongside another. Note that glues will chain, i.e. if `a` is\nglued before `b` and `b` is glued after `c`, then the result will be `c` -> `a`\n-> `b` (sorted wherever `c` is sorted to). Glues behave in the following ways:\n\n  - If multiple glues are specified, the first specified will be used.\n  - If multiple declarations are glued at the same place, they will be ordered\n    by the orderings specified.\n  - If glues are not acyclic (i.e. two declarations are glued to each other,\n    possibly via intermediates), then all of the involved declarations will not\n    be glued and will be sorted normally.\n\n@docs glueHelpersBefore, glueHelpersAfter, glueDependenciesBeforeFirstDependent, glueDependenciesAfterFirstDependent, glueDependenciesAfterLastDependent, glueDependenciesBeforeLastDependent\n\n-}"],[540,21,540,63,"-- Only unexposed functions can be helpers"],[581,21,581,63,"-- Only unexposed functions can be helpers"],[619,21,619,68,"-- Only unexposed functions can be dependencies"],[657,21,657,68,"-- Only unexposed functions can be dependencies"],[695,21,695,68,"-- Only unexposed functions can be dependencies"],[733,21,733,68,"-- Only unexposed functions can be dependencies"],[791,25,791,95,"-- First doc comment is after imports, so cannot be module-associated."],[795,25,795,80,"-- No module imports, so have to figure it out manually"],[796,25,796,80,"-- If there are two doc comments before first TLD, then"],[797,25,797,80,"-- the first must be module But do not need to test for"],[798,25,798,78,"-- this, because the first would get dropped anyways,"],[799,25,799,78,"-- since only the latter would possibly get attached."],[800,25,800,80,"-- Similarly, do not need to worry if the first TLD has"],[801,25,801,81,"-- a parsed doc comment, because it would get dropped by"],[802,25,802,81,"-- going past that TLD. If first is a doc comment with a"],[803,25,803,81,"-- line that begins with \"@docs\", then it is essentially"],[804,25,804,69,"-- guaranteed to be for the module, however."],[809,29,809,141,"-- There is no @docs in the comment, so this might be a doc comment belonging to the first TLD, if it is a port."],[813,25,813,105,"-- First doc comment is before imports, so is the module doc comment, so drop it"],[833,21,833,82,"-- No doc comments were after the TLD, so it must be the last"],[876,17,876,99,"-- Glue doc comment on, since port doc comments are not yet parsed by `elm-syntax`"],[882,17,882,69,"-- Ports can't be exposed or dependent on other TLDs"],[886,13,886,36,"-- These are impossible"],[887,13,887,62,"-- Destructuring (Node Pattern) (Node Expression)"],[888,13,888,38,"-- InfixDeclaration Infix"],[904,21,904,92,"-- Assume that the `port module` of a module is just the first 11 chars"],[908,21,908,86,"-- Assume that the `module` of a module is just the first 6 chars"],[909,21,909,53,"-- Effect modules aren't a thing"]]]]
