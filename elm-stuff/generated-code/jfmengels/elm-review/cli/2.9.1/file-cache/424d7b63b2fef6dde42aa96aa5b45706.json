[1,[[1,1,13,6,[0,[[1,8,1,12,["Util"]],[1,13,13,6,[1,[[2,7,2,18,[3,["GluedTo",[1,[2,14,2,18]]]]],[3,7,3,27,[1,"allBindingsInPattern"]],[4,7,4,19,[1,"checkSorting"]],[5,7,5,27,[1,"checkSortingWithGlue"]],[6,7,6,18,[1,"countUsesIn"]],[7,7,7,25,[1,"fallbackCompareFor"]],[8,7,8,39,[1,"fallbackCompareWithUnsortableFor"]],[9,7,9,21,[1,"findAllNamesIn"]],[10,7,10,23,[1,"findDependencies"]],[11,7,11,21,[1,"makeAccessFunc"]],[12,7,12,15,[1,"validate"]]]]]]]],[[18,1,18,28,[[18,8,18,12,["Dict"]],[0],[1,[18,13,18,28,[1,[[18,23,18,27,[2,"Dict"]]]]]]]],[19,1,19,27,[[19,8,19,18,["Dict","Extra"]],[1,[19,22,19,27,["DictX"]]],[0]]],[20,1,20,75,[[20,8,20,29,["Elm","Syntax","Expression"]],[0],[1,[20,30,20,75,[1,[[20,40,20,54,[3,["Expression",[1,[20,50,20,54]]]]],[20,56,20,74,[3,["LetDeclaration",[1,[20,70,20,74]]]]]]]]]]],[21,1,21,47,[[21,8,21,23,["Elm","Syntax","Node"]],[1,[21,27,21,31,["Node"]]],[1,[21,32,21,47,[1,[[21,42,21,46,[2,"Node"]]]]]]]],[22,1,22,49,[[22,8,22,26,["Elm","Syntax","Pattern"]],[0],[1,[22,27,22,49,[1,[[22,37,22,48,[3,["Pattern",[1,[22,44,22,48]]]]]]]]]]],[23,1,23,41,[[23,8,23,24,["Elm","Syntax","Range"]],[0],[1,[23,25,23,41,[1,[[23,35,23,40,[2,"Range"]]]]]]]],[24,1,24,63,[[24,8,24,13,["Graph"]],[0],[1,[24,14,24,63,[1,[[24,24,24,36,[2,"AcyclicGraph"]],[24,38,24,42,[2,"Edge"]],[24,44,24,49,[2,"Graph"]],[24,51,24,62,[2,"NodeContext"]]]]]]]],[25,1,25,27,[[25,8,25,18,["List","Extra"]],[1,[25,22,25,27,["ListX"]]],[0]]],[26,1,26,29,[[26,8,26,19,["Maybe","Extra"]],[1,[26,23,26,29,["MaybeX"]]],[0]]],[27,1,27,31,[[27,8,27,20,["Result","Extra"]],[1,[27,24,27,31,["ResultX"]]],[0]]],[28,1,28,40,[[28,8,28,18,["Review","Fix"]],[1,[28,22,28,25,["Fix"]]],[1,[28,26,28,40,[1,[[28,36,28,39,[2,"Fix"]]]]]]]],[29,1,29,44,[[29,8,29,19,["Review","Rule"]],[1,[29,23,29,27,["Rule"]]],[1,[29,28,29,44,[1,[[29,38,29,43,[2,"Error"]]]]]]]],[30,1,30,26,[[30,8,30,11,["Set"]],[0],[1,[30,12,30,26,[1,[[30,22,30,25,[2,"Set"]]]]]]]]],[[33,1,122,15,[0,[[1,[33,1,34,3,"{-| Get all immediate child expressions of an expression.\n-}"]],[1,[35,1,35,59,[[35,1,35,15,"subexpressions"],[35,18,35,59,[6,[35,18,35,33,[1,[35,18,35,22,[[],"Node"]],[[35,23,35,33,[1,[35,23,35,33,[[],"Expression"]],[]]]]]],[35,37,35,59,[1,[35,37,35,41,[[],"List"]],[[35,42,35,59,[1,[35,43,35,47,[[],"Node"]],[[35,48,35,58,[1,[35,48,35,58,[[],"Expression"]],[]]]]]]]]]]]]]],[36,1,122,15,[[36,1,36,15,"subexpressions"],[[36,16,36,20,[11,"expr"]]],[37,5,122,15,[17,[[37,10,37,25,[0,[[37,10,37,20,[2,["Node"],"value"]],[37,21,37,25,[2,[],"expr"]]]]],[[[38,9,38,31,[12,[[],"LetExpression"],[[38,23,38,31,[11,"letBlock"]]]]],[39,13,51,59,[16,[[[40,17,48,30,[0,[[0],[1,[40,17,40,66,[[40,17,40,25,"subExprs"],[40,28,40,66,[6,[40,28,40,47,[1,[40,28,40,32,[[],"Node"]],[[40,33,40,47,[1,[40,33,40,47,[[],"LetDeclaration"]],[]]]]]],[40,51,40,66,[1,[40,51,40,55,[[],"Node"]],[[40,56,40,66,[1,[40,56,40,66,[[],"Expression"]],[]]]]]]]]]]],[41,17,48,30,[[41,17,41,25,"subExprs"],[[41,26,41,27,[11,"n"]]],[42,21,48,30,[17,[[42,26,42,38,[0,[[42,26,42,36,[2,["Node"],"value"]],[42,37,42,38,[2,[],"n"]]]]],[[[43,25,43,52,[12,[[],"LetFunction"],[[43,37,43,52,[8,[[43,39,43,50,"declaration"]]]]]]],[44,29,45,47,[1,"|>",0,[44,29,44,51,[0,[[44,29,44,39,[2,["Node"],"value"]],[44,40,44,51,[2,[],"declaration"]]]]],[45,36,45,47,[20,".expression"]]]]],[[47,25,47,45,[12,[[],"LetDestructuring"],[[47,42,47,43,[0]],[47,44,47,45,[11,"e"]]]]],[48,29,48,30,[2,[],"e"]]]]]]]]]]]]],[50,13,51,59,[1,"::",1,[50,13,50,32,[19,[50,13,50,21,[2,[],"letBlock"]],[50,22,50,32,"expression"]]],[51,20,51,59,[0,[[51,20,51,28,[2,["List"],"map"]],[51,29,51,37,[2,[],"subExprs"]],[51,38,51,59,[19,[51,38,51,46,[2,[],"letBlock"]],[51,47,51,59,"declarations"]]]]]]]]]]]],[[53,9,53,20,[12,[[],"ListExpr"],[[53,18,53,20,[11,"es"]]]]],[54,13,54,15,[2,[],"es"]]],[[56,9,56,28,[12,[[],"TupledExpression"],[[56,26,56,28,[11,"es"]]]]],[57,13,57,15,[2,[],"es"]]],[[59,9,59,27,[12,[[],"RecordExpr"],[[59,20,59,27,[11,"setters"]]]]],[60,13,60,58,[0,[[60,13,60,21,[2,["List"],"map"]],[60,22,60,50,[7,[60,23,60,49,[1,"<<",0,[60,23,60,35,[2,["Tuple"],"second"]],[60,39,60,49,[2,["Node"],"value"]]]]]],[60,51,60,58,[2,[],"setters"]]]]]],[[62,9,62,47,[12,[[],"RecordUpdateExpression"],[[62,32,62,38,[11,"record"]],[62,39,62,47,[11,"updaters"]]]]],[63,13,64,66,[1,"::",1,[63,13,63,49,[0,[[63,13,63,21,[2,["Node"],"map"]],[63,22,63,42,[7,[63,23,63,41,[0,[[63,23,63,38,[2,[],"FunctionOrValue"]],[63,39,63,41,[9,[]]]]]]]],[63,43,63,49,[2,[],"record"]]]]],[64,20,64,66,[0,[[64,20,64,28,[2,["List"],"map"]],[64,29,64,57,[7,[64,30,64,56,[1,"<<",0,[64,30,64,42,[2,["Tuple"],"second"]],[64,46,64,56,[2,["Node"],"value"]]]]]],[64,58,64,66,[2,[],"updaters"]]]]]]]],[[66,9,66,23,[12,[[],"Application"],[[66,21,66,23,[11,"es"]]]]],[67,13,67,15,[2,[],"es"]]],[[69,9,69,33,[12,[[],"CaseExpression"],[[69,24,69,33,[11,"caseBlock"]]]]],[70,13,71,57,[1,"::",1,[70,13,70,33,[19,[70,13,70,22,[2,[],"caseBlock"]],[70,23,70,33,"expression"]]],[71,20,71,57,[0,[[71,20,71,28,[2,["List"],"map"]],[71,29,71,41,[2,["Tuple"],"second"]],[71,42,71,57,[19,[71,42,71,51,[2,[],"caseBlock"]],[71,52,71,57,"cases"]]]]]]]]],[[73,9,73,38,[12,[[],"OperatorApplication"],[[73,29,73,30,[0]],[73,31,73,32,[0]],[73,33,73,35,[11,"e1"]],[73,36,73,38,[11,"e2"]]]]],[74,13,74,23,[9,[[74,15,74,17,[2,[],"e1"]],[74,19,74,21,[2,[],"e2"]]]]]],[[76,9,76,43,[12,[[],"IfBlock"],[[76,17,76,25,[11,"predExpr"]],[76,26,76,34,[11,"thenExpr"]],[76,35,76,43,[11,"elseExpr"]]]]],[77,13,77,45,[9,[[77,15,77,23,[2,[],"predExpr"]],[77,25,77,33,[2,[],"thenExpr"]],[77,35,77,43,[2,[],"elseExpr"]]]]]],[[79,9,79,40,[12,[[],"LambdaExpression"],[[79,26,79,40,[8,[[79,28,79,38,"expression"]]]]]]],[80,13,80,27,[9,[[80,15,80,25,[2,[],"expression"]]]]]],[[82,9,82,30,[12,[[],"RecordAccess"],[[82,22,82,28,[11,"record"]],[82,29,82,30,[0]]]]],[83,13,83,23,[9,[[83,15,83,21,[2,[],"record"]]]]]],[[85,9,85,34,[12,[[],"ParenthesizedExpression"],[[85,33,85,34,[11,"e"]]]]],[86,13,86,18,[9,[[86,15,86,16,[2,[],"e"]]]]]],[[88,9,88,19,[12,[[],"Negation"],[[88,18,88,19,[11,"e"]]]]],[89,13,89,18,[9,[[89,15,89,16,[2,[],"e"]]]]]],[[91,9,91,17,[12,[[],"UnitExpr"],[]]],[92,13,92,15,[9,[]]]],[[94,9,94,18,[12,[[],"Integer"],[[94,17,94,18,[0]]]]],[95,13,95,15,[9,[]]]],[[97,9,97,14,[12,[[],"Hex"],[[97,13,97,14,[0]]]]],[98,13,98,15,[9,[]]]],[[100,9,100,20,[12,[[],"Floatable"],[[100,19,100,20,[0]]]]],[101,13,101,15,[9,[]]]],[[103,9,103,18,[12,[[],"Literal"],[[103,17,103,18,[0]]]]],[104,13,104,15,[9,[]]]],[[106,9,106,22,[12,[[],"CharLiteral"],[[106,21,106,22,[0]]]]],[107,13,107,15,[9,[]]]],[[109,9,109,25,[12,[[],"GLSLExpression"],[[109,24,109,25,[0]]]]],[110,13,110,15,[9,[]]]],[[112,9,112,31,[12,[[],"RecordAccessFunction"],[[112,30,112,31,[0]]]]],[113,13,113,15,[9,[]]]],[[115,9,115,28,[12,[[],"FunctionOrValue"],[[115,25,115,26,[0]],[115,27,115,28,[0]]]]],[116,13,116,15,[9,[]]]],[[118,9,118,19,[12,[[],"Operator"],[[118,18,118,19,[0]]]]],[119,13,119,15,[9,[]]]],[[121,9,121,25,[12,[[],"PrefixOperator"],[[121,24,121,25,[0]]]]],[122,13,122,15,[9,[]]]]]]]]]]]]],[125,1,178,15,[0,[[1,[125,1,126,3,"{-| Recursively find all bindings in a pattern.\n-}"]],[1,[127,1,127,51,[[127,1,127,21,"allBindingsInPattern"],[127,24,127,51,[6,[127,24,127,36,[1,[127,24,127,28,[[],"Node"]],[[127,29,127,36,[1,[127,29,127,36,[[],"Pattern"]],[]]]]]],[127,40,127,51,[1,[127,40,127,44,[[],"List"]],[[127,45,127,51,[1,[127,45,127,51,[[],"String"]],[]]]]]]]]]]],[128,1,178,15,[[128,1,128,21,"allBindingsInPattern"],[[128,22,128,29,[11,"pattern"]]],[129,5,178,15,[16,[[[130,9,132,48,[0,[[0],[1,[130,9,130,48,[[130,9,130,11,"go"],[130,14,130,48,[6,[130,14,130,33,[1,[130,14,130,18,[[],"List"]],[[130,19,130,33,[1,[130,20,130,24,[[],"Node"]],[[130,25,130,32,[1,[130,25,130,32,[[],"Pattern"]],[]]]]]]]]],[130,37,130,48,[1,[130,37,130,41,[[],"List"]],[[130,42,130,48,[1,[130,42,130,48,[[],"String"]],[]]]]]]]]]]],[131,9,132,48,[[131,9,131,11,"go"],[],[132,13,132,48,[0,[[132,13,132,27,[2,["List"],"concatMap"]],[132,28,132,48,[2,[],"allBindingsInPattern"]]]]]]]]]]],[134,5,178,15,[17,[[134,10,134,28,[0,[[134,10,134,20,[2,["Node"],"value"]],[134,21,134,28,[2,[],"pattern"]]]]],[[[135,9,135,23,[12,[[],"ListPattern"],[[135,21,135,23,[11,"ps"]]]]],[136,13,136,18,[0,[[136,13,136,15,[2,[],"go"]],[136,16,136,18,[2,[],"ps"]]]]]],[[138,9,138,24,[12,[[],"TuplePattern"],[[138,22,138,24,[11,"ps"]]]]],[139,13,139,18,[0,[[139,13,139,15,[2,[],"go"]],[139,16,139,18,[2,[],"ps"]]]]]],[[141,9,141,25,[12,[[],"RecordPattern"],[[141,23,141,25,[11,"ps"]]]]],[142,13,142,35,[0,[[142,13,142,21,[2,["List"],"map"]],[142,22,142,32,[2,["Node"],"value"]],[142,33,142,35,[2,[],"ps"]]]]]],[[144,9,144,26,[12,[[],"NamedPattern"],[[144,22,144,23,[0]],[144,24,144,26,[11,"ps"]]]]],[145,13,145,18,[0,[[145,13,145,15,[2,[],"go"]],[145,16,145,18,[2,[],"ps"]]]]]],[[147,9,147,27,[12,[[],"UnConsPattern"],[[147,23,147,24,[11,"p"]],[147,25,147,27,[11,"ps"]]]]],[148,13,148,25,[0,[[148,13,148,15,[2,[],"go"]],[148,16,148,25,[9,[[148,18,148,19,[2,[],"p"]],[148,21,148,23,[2,[],"ps"]]]]]]]]],[[150,9,150,24,[12,[[],"VarPattern"],[[150,20,150,24,[11,"name"]]]]],[151,13,151,21,[9,[[151,15,151,19,[2,[],"name"]]]]]],[[153,9,153,25,[12,[[],"AsPattern"],[[153,19,153,20,[11,"p"]],[153,21,153,25,[11,"name"]]]]],[154,13,154,40,[1,"::",1,[154,13,154,28,[0,[[154,13,154,23,[2,["Node"],"value"]],[154,24,154,28,[2,[],"name"]]]]],[154,32,154,40,[0,[[154,32,154,34,[2,[],"go"]],[154,35,154,40,[9,[[154,37,154,38,[2,[],"p"]]]]]]]]]]],[[156,9,156,31,[12,[[],"ParenthesizedPattern"],[[156,30,156,31,[11,"p"]]]]],[157,13,157,21,[0,[[157,13,157,15,[2,[],"go"]],[157,16,157,21,[9,[[157,18,157,19,[2,[],"p"]]]]]]]]],[[159,9,159,19,[12,[[],"AllPattern"],[]]],[160,13,160,15,[9,[]]]],[[162,9,162,20,[12,[[],"UnitPattern"],[]]],[163,13,163,15,[9,[]]]],[[165,9,165,22,[12,[[],"CharPattern"],[[165,21,165,22,[0]]]]],[166,13,166,15,[9,[]]]],[[168,9,168,24,[12,[[],"StringPattern"],[[168,23,168,24,[0]]]]],[169,13,169,15,[9,[]]]],[[171,9,171,21,[12,[[],"IntPattern"],[[171,20,171,21,[0]]]]],[172,13,172,15,[9,[]]]],[[174,9,174,21,[12,[[],"HexPattern"],[[174,20,174,21,[0]]]]],[175,13,175,15,[9,[]]]],[[177,9,177,23,[12,[[],"FloatPattern"],[[177,22,177,23,[0]]]]],[178,13,178,15,[9,[]]]]]]]]]]]]]]]],[181,1,197,65,[0,[[1,[181,1,182,3,"{-| Count the uses of a given name in the scope of an expression.\n-}"]],[1,[183,1,183,47,[[183,1,183,12,"countUsesIn"],[183,15,183,47,[6,[183,15,183,30,[1,[183,15,183,19,[[],"Node"]],[[183,20,183,30,[1,[183,20,183,30,[[],"Expression"]],[]]]]]],[183,34,183,47,[6,[183,34,183,40,[1,[183,34,183,40,[[],"String"]],[]]],[183,44,183,47,[1,[183,44,183,47,[[],"Int"]],[]]]]]]]]]],[184,1,197,65,[[184,1,184,12,"countUsesIn"],[[184,13,184,17,[11,"expr"]],[184,18,184,22,[11,"name"]]],[185,5,197,65,[17,[[185,10,185,25,[0,[[185,10,185,20,[2,["Node"],"value"]],[185,21,185,25,[2,[],"expr"]]]]],[[[187,9,187,29,[12,[[],"FunctionOrValue"],[[187,25,187,27,[10,[]]],[187,28,187,29,[11,"n"]]]]],[188,13,192,18,[11,[188,16,188,25,[1,"==",2,[188,16,188,17,[2,[],"n"]],[188,21,188,25,[2,[],"name"]]]],[189,17,189,18,[3,1]],[192,17,192,18,[3,0]]]]],[[194,9,194,10,[0]],[195,13,197,65,[1,"|>",0,[195,13,195,32,[0,[[195,13,195,27,[2,[],"subexpressions"]],[195,28,195,32,[2,[],"expr"]]]]],[197,20,197,65,[0,[[197,20,197,30,[2,["List"],"foldl"]],[197,31,197,63,[7,[197,32,197,62,[18,[[[197,33,197,34,[11,"e"]]],[197,38,197,62,[0,[[197,38,197,41,[12,"+"]],[197,42,197,62,[7,[197,43,197,61,[0,[[197,43,197,54,[2,[],"countUsesIn"]],[197,55,197,56,[2,[],"e"]],[197,57,197,61,[2,[],"name"]]]]]]]]]]]]]]],[197,64,197,65,[3,0]]]]]]]]]]]]]]]]],[200,1,211,77,[0,[[1,[200,1,201,3,"{-| Find all (local) names used in an expression.\n-}"]],[1,[202,1,202,47,[[202,1,202,15,"findAllNamesIn"],[202,18,202,47,[6,[202,18,202,33,[1,[202,18,202,22,[[],"Node"]],[[202,23,202,33,[1,[202,23,202,33,[[],"Expression"]],[]]]]]],[202,37,202,47,[1,[202,37,202,40,[[],"Set"]],[[202,41,202,47,[1,[202,41,202,47,[[],"String"]],[]]]]]]]]]]],[203,1,211,77,[[203,1,203,15,"findAllNamesIn"],[[203,16,203,20,[11,"expr"]]],[204,5,211,77,[17,[[204,10,204,25,[0,[[204,10,204,20,[2,["Node"],"value"]],[204,21,204,25,[2,[],"expr"]]]]],[[[206,9,206,29,[12,[[],"FunctionOrValue"],[[206,25,206,27,[10,[]]],[206,28,206,29,[11,"n"]]]]],[207,13,207,28,[0,[[207,13,207,26,[2,["Set"],"singleton"]],[207,27,207,28,[2,[],"n"]]]]]],[[209,9,209,10,[0]],[210,13,211,77,[1,"|>",0,[210,13,210,32,[0,[[210,13,210,27,[2,[],"subexpressions"]],[210,28,210,32,[2,[],"expr"]]]]],[211,20,211,77,[0,[[211,20,211,30,[2,["List"],"foldl"]],[211,31,211,67,[7,[211,32,211,66,[18,[[[211,33,211,34,[11,"e"]]],[211,38,211,66,[0,[[211,38,211,47,[2,["Set"],"union"]],[211,48,211,66,[7,[211,49,211,65,[0,[[211,49,211,63,[2,[],"findAllNamesIn"]],[211,64,211,65,[2,[],"e"]]]]]]]]]]]]]]],[211,68,211,77,[2,["Set"],"empty"]]]]]]]]]]]]]]]]],[214,1,224,28,[0,[[1,[214,1,216,3,"{-| Use the first order, or use the second order if the first is `Just EQ`. This\nis lazy in the second comparison and written for use in pipeline-style code.\n-}"]],[1,[217,1,217,85,[[217,1,217,33,"fallbackCompareWithUnsortableFor"],[217,36,217,85,[6,[217,36,217,47,[1,[217,36,217,41,[[],"Maybe"]],[[217,42,217,47,[1,[217,42,217,47,[[],"Order"]],[]]]]]],[217,51,217,85,[6,[217,51,217,70,[6,[217,52,217,54,[2]],[217,58,217,69,[1,[217,58,217,63,[[],"Maybe"]],[[217,64,217,69,[1,[217,64,217,69,[[],"Order"]],[]]]]]]]],[217,74,217,85,[1,[217,74,217,79,[[],"Maybe"]],[[217,80,217,85,[1,[217,80,217,85,[[],"Order"]],[]]]]]]]]]]]]],[218,1,224,28,[[218,1,218,33,"fallbackCompareWithUnsortableFor"],[[218,34,218,38,[11,"comp"]],[218,39,218,47,[11,"fallback"]]],[219,5,224,28,[17,[[219,10,219,14,[2,[],"comp"]],[[[220,9,220,16,[12,[[],"Just"],[[220,14,220,16,[12,[[],"EQ"],[]]]]]],[221,13,221,24,[0,[[221,13,221,21,[2,[],"fallback"]],[221,22,221,24,[10]]]]]],[[223,9,223,24,[11,"ltOrGtOrNothing"]],[224,13,224,28,[2,[],"ltOrGtOrNothing"]]]]]]]]]]]],[227,1,242,19,[0,[[1,[227,1,234,3,"{-| Use the first order, or use the second order if the first is `EQ`. This is\nlazy in the second comparison and written for use in pipeline-style code, e.g.\nin implementing a stable sort below:\n\n    (\\() -> compare index1 index2)\n        |> fallbackCompareFor (compare element1 element2)\n\n-}"]],[1,[235,1,235,53,[[235,1,235,19,"fallbackCompareFor"],[235,22,235,53,[6,[235,22,235,27,[1,[235,22,235,27,[[],"Order"]],[]]],[235,31,235,53,[6,[235,31,235,44,[6,[235,32,235,34,[2]],[235,38,235,43,[1,[235,38,235,43,[[],"Order"]],[]]]]],[235,48,235,53,[1,[235,48,235,53,[[],"Order"]],[]]]]]]]]]],[236,1,242,19,[[236,1,236,19,"fallbackCompareFor"],[[236,20,236,24,[11,"comp"]],[236,25,236,33,[11,"fallback"]]],[237,5,242,19,[17,[[237,10,237,14,[2,[],"comp"]],[[[238,9,238,11,[12,[[],"EQ"],[]]],[239,13,239,24,[0,[[239,13,239,21,[2,[],"fallback"]],[239,22,239,24,[10]]]]]],[[241,9,241,15,[11,"ltOrGt"]],[242,13,242,19,[2,[],"ltOrGt"]]]]]]]]]]]],[245,1,268,23,[0,[[1,[245,1,247,3,"{-| Given a source code extractor and a sorted list of ranges (with original\nindices), create fixes to resort the source code to the list.\n-}"]],[1,[248,1,248,65,[[248,1,248,10,"createFix"],[248,13,248,65,[6,[248,13,248,30,[6,[248,14,248,19,[1,[248,14,248,19,[[],"Range"]],[]]],[248,23,248,29,[1,[248,23,248,29,[[],"String"]],[]]]]],[248,34,248,65,[6,[248,34,248,53,[1,[248,34,248,38,[[],"List"]],[[248,39,248,53,[3,[[248,41,248,44,[1,[248,41,248,44,[[],"Int"]],[]]],[248,46,248,51,[1,[248,46,248,51,[[],"Range"]],[]]]]]]]]],[248,57,248,65,[1,[248,57,248,61,[[],"List"]],[[248,62,248,65,[1,[248,62,248,65,[[],"Fix"]],[]]]]]]]]]]]]],[249,1,268,23,[[249,1,249,10,"createFix"],[[249,11,249,24,[11,"extractSource"]],[249,25,249,31,[11,"sorted"]]],[250,5,268,23,[16,[[[251,9,265,44,[0,[[0],[1,[251,9,251,53,[[251,9,251,17,"applyFix"],[251,20,251,53,[6,[251,20,251,23,[1,[251,20,251,23,[[],"Int"]],[]]],[251,27,251,53,[6,[251,27,251,41,[3,[[251,29,251,32,[1,[251,29,251,32,[[],"Int"]],[]]],[251,34,251,39,[1,[251,34,251,39,[[],"Range"]],[]]]]]],[251,45,251,53,[1,[251,45,251,49,[[],"List"]],[[251,50,251,53,[1,[251,50,251,53,[[],"Fix"]],[]]]]]]]]]]]]],[252,9,265,44,[[252,9,252,17,"applyFix"],[[252,18,252,26,[11,"newIndex"]],[252,27,252,46,[7,[[252,29,252,37,[11,"oldIndex"]],[252,39,252,44,[11,"range"]]]]]],[253,13,265,44,[11,[253,16,253,36,[1,"==",2,[253,16,253,24,[2,[],"newIndex"]],[253,28,253,36,[2,[],"oldIndex"]]]],[254,17,254,19,[9,[]]],[257,17,265,44,[1,"|>",0,[257,17,264,26,[1,"|>",0,[257,17,258,46,[1,"|>",0,[257,17,257,65,[0,[[257,17,257,27,[2,["ListX"],"find"]],[257,28,257,58,[7,[257,29,257,57,[1,"<<",0,[257,29,257,42,[0,[[257,29,257,33,[12,"=="]],[257,34,257,42,[2,[],"newIndex"]]]]],[257,46,257,57,[2,["Tuple"],"first"]]]]]],[257,59,257,65,[2,[],"sorted"]]]]],[258,24,258,46,[0,[[258,24,258,33,[2,["Maybe"],"map"]],[258,34,258,46,[2,["Tuple"],"second"]]]]]]],[259,24,264,26,[0,[[259,24,259,33,[2,["Maybe"],"map"]],[260,25,264,26,[7,[260,26,263,50,[18,[[[260,27,260,35,[11,"oldRange"]]],[261,29,263,50,[1,"|>",0,[261,29,262,63,[1,"|>",0,[261,29,261,48,[0,[[261,29,261,42,[2,[],"extractSource"]],[261,43,261,48,[2,[],"range"]]]]],[262,36,262,63,[0,[[262,36,262,54,[2,["Fix"],"replaceRangeBy"]],[262,55,262,63,[2,[],"oldRange"]]]]]]],[263,36,263,50,[2,["List"],"singleton"]]]]]]]]]]]]]],[265,24,265,44,[0,[[265,24,265,41,[2,["Maybe"],"withDefault"]],[265,42,265,44,[9,[]]]]]]]]]]]]]]]],[267,5,268,23,[1,"|>",0,[267,5,267,36,[0,[[267,5,267,20,[2,["List"],"indexedMap"]],[267,21,267,29,[2,[],"applyFix"]],[267,30,267,36,[2,[],"sorted"]]]]],[268,12,268,23,[2,["List"],"concat"]]]]]]]]]]]],[271,1,315,13,[0,[[1,[271,1,276,3,"{-| Given context and a list of ordering functions, check if a list is sorted\nand generate errors if it isn't. Ordering functions are applied in order, with\nties being broken by the next function in the list. Earlier ordering functions\nwill never be invalidated by later ones (i.e. there is no transitivity\nassumptions made between ordering functions).\n-}"]],[1,[277,1,277,167,[[277,1,277,13,"checkSorting"],[277,16,277,167,[6,[277,16,277,33,[6,[277,17,277,22,[1,[277,17,277,22,[[],"Range"]],[]]],[277,26,277,32,[1,[277,26,277,32,[[],"String"]],[]]]]],[277,37,277,167,[6,[277,37,277,43,[1,[277,37,277,43,[[],"String"]],[]]],[277,47,277,167,[6,[277,47,277,109,[1,[277,47,277,51,[[],"List"]],[[277,52,277,109,[6,[277,53,277,74,[5,[277,55,277,56,"a"],[277,58,277,73,[[277,59,277,73,[[277,59,277,64,"range"],[277,67,277,72,[1,[277,67,277,72,[[],"Range"]],[]]]]]]]]],[277,78,277,108,[6,[277,78,277,99,[5,[277,80,277,81,"a"],[277,83,277,98,[[277,84,277,98,[[277,84,277,89,"range"],[277,92,277,97,[1,[277,92,277,97,[[],"Range"]],[]]]]]]]]],[277,103,277,108,[1,[277,103,277,108,[[],"Order"]],[]]]]]]]]]],[277,113,277,167,[6,[277,113,277,118,[1,[277,113,277,118,[[],"Range"]],[]]],[277,122,277,167,[6,[277,122,277,148,[1,[277,122,277,126,[[],"List"]],[[277,127,277,148,[5,[277,129,277,130,"a"],[277,132,277,147,[[277,133,277,147,[[277,133,277,138,"range"],[277,141,277,146,[1,[277,141,277,146,[[],"Range"]],[]]]]]]]]]]]],[277,152,277,167,[1,[277,152,277,156,[[],"List"]],[[277,157,277,167,[1,[277,158,277,163,[[],"Error"]],[[277,164,277,166,[4,[]]]]]]]]]]]]]]]]]]]]]],[278,1,315,13,[[278,1,278,13,"checkSorting"],[[278,14,278,27,[11,"extractSource"]],[278,28,278,41,[11,"errorConcerns"]],[278,42,278,51,[11,"orderings"]],[278,52,278,62,[11,"errorRange"]],[278,63,278,65,[11,"ds"]]],[279,5,315,13,[16,[[[280,9,282,63,[0,[[0],[1,[280,9,280,58,[[280,9,280,16,"indexed"],[280,19,280,58,[1,[280,19,280,23,[[],"List"]],[[280,24,280,58,[1,[280,25,280,35,[["Graph"],"Node"]],[[280,36,280,57,[5,[280,38,280,39,"a"],[280,41,280,56,[[280,42,280,56,[[280,42,280,47,"range"],[280,50,280,55,[1,[280,50,280,55,[[],"Range"]],[]]]]]]]]]]]]]]]]]],[281,9,282,63,[[281,9,281,16,"indexed"],[],[282,13,282,63,[0,[[282,13,282,28,[2,["List"],"indexedMap"]],[282,29,282,60,[7,[282,30,282,59,[18,[[[282,31,282,32,[11,"i"]],[282,33,282,34,[11,"d"]]],[282,38,282,59,[8,[[282,40,282,46,[[282,40,282,42,"id"],[282,45,282,46,[2,[],"i"]]]],[282,48,282,58,[[282,48,282,53,"label"],[282,56,282,57,[2,[],"d"]]]]]]]]]]]],[282,61,282,63,[2,[],"ds"]]]]]]]]]]],[284,5,315,13,[1,"|>",0,[284,5,303,6,[7,[284,6,302,34,[17,[[284,11,284,20,[2,[],"orderings"]],[[[285,9,285,14,[10,[[285,11,285,12,[11,"o"]]]]],[288,13,293,24,[0,[[288,13,288,26,[2,["List"],"sortWith"]],[289,17,292,18,[7,[289,18,291,68,[18,[[[289,19,289,21,[11,"d1"]],[289,22,289,24,[11,"d2"]]],[290,21,291,68,[1,"|>",0,[290,21,290,49,[7,[290,22,290,48,[18,[[[290,23,290,25,[1]]],[290,29,290,48,[0,[[290,29,290,36,[2,[],"compare"]],[290,37,290,42,[19,[290,37,290,39,[2,[],"d1"]],[290,40,290,42,"id"]]],[290,43,290,48,[19,[290,43,290,45,[2,[],"d2"]],[290,46,290,48,"id"]]]]]]]]]]],[291,28,291,68,[0,[[291,28,291,46,[2,[],"fallbackCompareFor"]],[291,47,291,68,[7,[291,48,291,67,[0,[[291,48,291,49,[2,[],"o"]],[291,50,291,58,[19,[291,50,291,52,[2,[],"d1"]],[291,53,291,58,"label"]]],[291,59,291,67,[19,[291,59,291,61,[2,[],"d2"]],[291,62,291,67,"label"]]]]]]]]]]]]]]]]]],[293,17,293,24,[2,[],"indexed"]]]]]],[[295,9,295,11,[11,"os"]],[298,13,302,34,[1,"|>",0,[298,13,301,41,[1,"|>",0,[298,13,300,43,[1,"|>",0,[298,13,299,51,[1,"|>",0,[298,13,298,32,[0,[[298,13,298,21,[2,[],"genEdges"]],[298,22,298,24,[2,[],"os"]],[298,25,298,32,[2,[],"indexed"]]]]],[299,20,299,51,[0,[[299,20,299,43,[2,["Graph"],"fromNodesAndEdges"]],[299,44,299,51,[2,[],"indexed"]]]]]]],[300,20,300,43,[0,[[300,20,300,35,[2,[],"eliminateCycles"]],[300,36,300,43,[2,[],"indexed"]]]]]]],[301,20,301,41,[2,["Graph"],"topologicalSort"]]]],[302,20,302,34,[0,[[302,20,302,28,[2,["List"],"map"]],[302,29,302,34,[20,".node"]]]]]]]]]]]]]],[305,12,315,13,[7,[305,13,314,23,[18,[[[305,14,305,20,[11,"sorted"]]],[306,17,314,23,[11,[306,20,306,63,[1,"/=",2,[306,20,306,39,[0,[[306,20,306,28,[2,["List"],"map"]],[306,29,306,32,[20,".id"]],[306,33,306,39,[2,[],"sorted"]]]]],[306,43,306,63,[0,[[306,43,306,51,[2,["List"],"map"]],[306,52,306,55,[20,".id"]],[306,56,306,63,[2,[],"indexed"]]]]]]],[308,21,311,42,[1,"|>",0,[308,21,310,66,[1,"|>",0,[308,21,309,51,[1,"|>",0,[308,21,308,76,[0,[[308,21,308,29,[2,["List"],"map"]],[308,30,308,69,[7,[308,31,308,68,[18,[[[308,32,308,45,[8,[[308,34,308,36,"id"],[308,38,308,43,"label"]]]]],[308,49,308,68,[6,[[308,51,308,53,[2,[],"id"]],[308,55,308,66,[19,[308,55,308,60,[2,[],"label"]],[308,61,308,66,"range"]]]]]]]]]]],[308,70,308,76,[2,[],"sorted"]]]]],[309,28,309,51,[0,[[309,28,309,37,[2,[],"createFix"]],[309,38,309,51,[2,[],"extractSource"]]]]]]],[310,28,310,66,[0,[[310,28,310,41,[2,[],"unsortedError"]],[310,42,310,55,[2,[],"errorConcerns"]],[310,56,310,66,[2,[],"errorRange"]]]]]]],[311,28,311,42,[2,["List"],"singleton"]]]],[314,21,314,23,[9,[]]]]]]]]]]]]]]]]]]]],[318,1,377,14,[0,[[1,[318,1,322,3,"{-| Given a graph with edges labeled by priority (larger number is lower\npriority, convert it to an acyclic graph by removing edges, with the guarantee\nthat all lower-priority edges will be removed before any of higher priority\nare.\n-}"]],[1,[323,1,323,75,[[323,1,323,16,"eliminateCycles"],[323,19,323,75,[6,[323,19,323,38,[1,[323,19,323,23,[[],"List"]],[[323,24,323,38,[1,[323,25,323,35,[["Graph"],"Node"]],[[323,36,323,37,[0,"a"]]]]]]]],[323,42,323,75,[6,[323,42,323,53,[1,[323,42,323,47,[[],"Graph"]],[[323,48,323,49,[0,"a"]],[323,50,323,53,[1,[323,50,323,53,[[],"Int"]],[]]]]]],[323,57,323,75,[1,[323,57,323,69,[[],"AcyclicGraph"]],[[323,70,323,71,[0,"a"]],[323,72,323,75,[1,[323,72,323,75,[[],"Int"]],[]]]]]]]]]]]]],[324,1,377,14,[[324,1,324,16,"eliminateCycles"],[[324,17,324,22,[11,"nodes"]],[324,23,324,24,[11,"g"]]],[326,5,377,14,[1,"|>",0,[326,5,326,40,[0,[[326,5,326,38,[2,["Graph"],"stronglyConnectedComponents"]],[326,39,326,40,[2,[],"g"]]]]],[327,12,377,14,[0,[[327,12,327,27,[2,["ResultX"],"extract"]],[328,13,377,14,[7,[328,14,376,21,[1,">>",1,[328,14,367,18,[0,[[328,14,328,22,[2,["List"],"map"]],[330,17,367,18,[7,[330,18,366,29,[18,[[[330,19,330,24,[11,"graph"]]],[331,21,366,29,[16,[[[332,25,334,46,[0,[[0],[1,[332,25,332,49,[[332,25,332,27,"ns"],[332,30,332,49,[1,[332,30,332,34,[[],"List"]],[[332,35,332,49,[1,[332,36,332,46,[["Graph"],"Node"]],[[332,47,332,48,[0,"a"]]]]]]]]]]],[333,25,334,46,[[333,25,333,27,"ns"],[],[334,29,334,46,[0,[[334,29,334,40,[2,["Graph"],"nodes"]],[334,41,334,46,[2,[],"graph"]]]]]]]]]],[336,25,349,48,[1,[336,25,336,69,[7,[[336,27,336,46,[11,"lowestPriorityEdges"]],[336,48,336,67,[11,"higherPriorityEdges"]]]]],[338,29,349,48,[1,"|>",0,[338,29,344,64,[1,"|>",0,[338,29,343,52,[1,"|>",0,[338,29,341,47,[1,"|>",0,[338,29,340,56,[1,"|>",0,[338,29,338,46,[0,[[338,29,338,40,[2,["Graph"],"edges"]],[338,41,338,46,[2,[],"graph"]]]]],[340,36,340,56,[0,[[340,36,340,49,[2,["DictX"],"groupBy"]],[340,50,340,56,[20,".label"]]]]]]],[341,36,341,47,[2,["Dict"],"values"]]]],[343,36,343,52,[2,["ListX"],"unconsLast"]]]],[344,36,344,64,[0,[[344,36,344,53,[2,["Maybe"],"withDefault"]],[344,54,344,64,[6,[[344,56,344,58,[9,[]]],[344,60,344,62,[9,[]]]]]]]]]]],[345,36,349,48,[0,[[345,36,345,49,[2,["Tuple"],"mapBoth"]],[346,37,348,38,[7,[346,38,347,56,[1,">>",1,[346,38,346,78,[0,[[346,38,346,46,[2,["List"],"map"]],[346,47,346,78,[7,[346,48,346,77,[18,[[[346,49,346,61,[8,[[346,51,346,55,"from"],[346,57,346,59,"to"]]]]],[346,65,346,77,[6,[[346,67,346,71,[2,[],"from"]],[346,73,346,75,[2,[],"to"]]]]]]]]]]]]],[347,44,347,56,[2,["Set"],"fromList"]]]]]],[349,37,349,48,[2,["List"],"concat"]]]]]]]]]],[351,21,366,29,[1,"|>",0,[351,21,358,44,[0,[[351,21,351,31,[2,["Set"],"filter"]],[353,25,357,26,[7,[353,26,356,49,[18,[[[353,27,353,39,[7,[[353,29,353,33,[11,"from"]],[353,35,353,37,[11,"to"]]]]]],[354,29,356,49,[1,"|>",0,[354,29,355,54,[1,"|>",0,[354,29,354,117,[0,[[354,29,354,52,[2,["Graph"],"fromNodesAndEdges"]],[354,53,354,55,[2,[],"ns"]],[354,56,354,117,[7,[354,57,354,116,[1,"::",1,[354,57,354,93,[8,[[354,59,354,70,[[354,59,354,63,"from"],[354,66,354,70,[2,[],"from"]]]],[354,72,354,79,[[354,72,354,74,"to"],[354,77,354,79,[2,[],"to"]]]],[354,81,354,92,[[354,81,354,86,"label"],[354,89,354,91,[14,[354,90,354,91,[3,1]]]]]]]]],[354,97,354,116,[2,[],"higherPriorityEdges"]]]]]]]]],[355,36,355,54,[2,["Graph"],"checkAcyclic"]]]],[356,36,356,49,[2,["ResultX"],"isErr"]]]]]]]]],[358,25,358,44,[2,[],"lowestPriorityEdges"]]]]],[359,28,366,29,[7,[359,29,365,38,[18,[[[359,30,359,31,[11,"s"]]],[360,33,365,38,[11,[360,36,360,49,[0,[[360,36,360,47,[2,["Set"],"isEmpty"]],[360,48,360,49,[2,[],"s"]]]]],[362,37,362,56,[2,[],"lowestPriorityEdges"]],[365,37,365,38,[2,[],"s"]]]]]]]]]]]]]]]]]]]]]],[368,20,376,21,[1,">>",1,[368,20,368,50,[0,[[368,20,368,30,[2,["List"],"foldl"]],[368,31,368,40,[2,["Set"],"union"]],[368,41,368,50,[2,["Set"],"empty"]]]]],[370,20,376,21,[7,[370,21,375,53,[18,[[[370,22,370,30,[11,"toRemove"]]],[371,25,375,53,[1,"|>",0,[371,25,373,61,[1,"|>",0,[371,25,372,102,[1,"|>",0,[371,25,371,38,[0,[[371,25,371,36,[2,["Graph"],"edges"]],[371,37,371,38,[2,[],"g"]]]]],[372,32,372,102,[0,[[372,32,372,43,[2,["List"],"filter"]],[372,44,372,102,[7,[372,45,372,101,[18,[[[372,46,372,58,[8,[[372,48,372,52,"from"],[372,54,372,56,"to"]]]]],[372,62,372,101,[1,"<|",1,[372,62,372,65,[2,[],"not"]],[372,69,372,101,[0,[[372,69,372,79,[2,["Set"],"member"]],[372,80,372,92,[6,[[372,82,372,86,[2,[],"from"]],[372,88,372,90,[2,[],"to"]]]]],[372,93,372,101,[2,[],"toRemove"]]]]]]]]]]]]]]]]],[373,32,373,61,[0,[[373,32,373,55,[2,["Graph"],"fromNodesAndEdges"]],[373,56,373,61,[2,[],"nodes"]]]]]]],[375,32,375,53,[0,[[375,32,375,47,[2,[],"eliminateCycles"]],[375,48,375,53,[2,[],"nodes"]]]]]]]]]]]]]]]]]]]]]]]]]]]],[380,1,414,76,[0,[[1,[380,1,382,3,"{-| Generate edges for every pairwise combination of nodes, along with their\npriority (lower number is higher priority).\n-}"]],[1,[383,1,383,136,[[383,1,383,9,"genEdges"],[383,12,383,136,[6,[383,12,383,74,[1,[383,12,383,16,[[],"List"]],[[383,17,383,74,[6,[383,18,383,39,[5,[383,20,383,21,"a"],[383,23,383,38,[[383,24,383,38,[[383,24,383,29,"range"],[383,32,383,37,[1,[383,32,383,37,[[],"Range"]],[]]]]]]]]],[383,43,383,73,[6,[383,43,383,64,[5,[383,45,383,46,"a"],[383,48,383,63,[[383,49,383,63,[[383,49,383,54,"range"],[383,57,383,62,[1,[383,57,383,62,[[],"Range"]],[]]]]]]]]],[383,68,383,73,[1,[383,68,383,73,[[],"Order"]],[]]]]]]]]]],[383,78,383,136,[6,[383,78,383,117,[1,[383,78,383,82,[[],"List"]],[[383,83,383,117,[1,[383,84,383,94,[["Graph"],"Node"]],[[383,95,383,116,[5,[383,97,383,98,"a"],[383,100,383,115,[[383,101,383,115,[[383,101,383,106,"range"],[383,109,383,114,[1,[383,109,383,114,[[],"Range"]],[]]]]]]]]]]]]]]],[383,121,383,136,[1,[383,121,383,125,[[],"List"]],[[383,126,383,136,[1,[383,127,383,131,[[],"Edge"]],[[383,132,383,135,[1,[383,132,383,135,[[],"Int"]],[]]]]]]]]]]]]]]]],[384,1,414,76,[[384,1,384,9,"genEdges"],[[384,10,384,19,[11,"orderings"]],[384,20,384,27,[11,"indexed"]]],[385,5,414,76,[16,[[[386,9,411,36,[0,[[0],[1,[386,9,386,182,[[386,9,386,16,"genEdge"],[386,19,386,182,[6,[386,19,386,88,[1,[386,19,386,23,[[],"List"]],[[386,24,386,88,[3,[[386,26,386,29,[1,[386,26,386,29,[[],"Int"]],[]]],[386,31,386,86,[6,[386,31,386,52,[5,[386,33,386,34,"a"],[386,36,386,51,[[386,37,386,51,[[386,37,386,42,"range"],[386,45,386,50,[1,[386,45,386,50,[[],"Range"]],[]]]]]]]]],[386,56,386,86,[6,[386,56,386,77,[5,[386,58,386,59,"a"],[386,61,386,76,[[386,62,386,76,[[386,62,386,67,"range"],[386,70,386,75,[1,[386,70,386,75,[[],"Range"]],[]]]]]]]]],[386,81,386,86,[1,[386,81,386,86,[[],"Order"]],[]]]]]]]]]]]]],[386,92,386,182,[6,[386,92,386,162,[3,[[386,94,386,126,[1,[386,94,386,104,[["Graph"],"Node"]],[[386,105,386,126,[5,[386,107,386,108,"a"],[386,110,386,125,[[386,111,386,125,[[386,111,386,116,"range"],[386,119,386,124,[1,[386,119,386,124,[[],"Range"]],[]]]]]]]]]]]],[386,128,386,160,[1,[386,128,386,138,[["Graph"],"Node"]],[[386,139,386,160,[5,[386,141,386,142,"a"],[386,144,386,159,[[386,145,386,159,[[386,145,386,150,"range"],[386,153,386,158,[1,[386,153,386,158,[[],"Range"]],[]]]]]]]]]]]]]]],[386,166,386,182,[1,[386,166,386,171,[[],"Maybe"]],[[386,172,386,182,[1,[386,173,386,177,[[],"Edge"]],[[386,178,386,181,[1,[386,178,386,181,[[],"Int"]],[]]]]]]]]]]]]]]]],[387,9,411,36,[[387,9,387,16,"genEdge"],[[387,17,387,19,[11,"os"]],[387,20,387,30,[7,[[387,22,387,24,[11,"d1"]],[387,26,387,28,[11,"d2"]]]]]],[388,13,411,36,[17,[[388,18,388,20,[2,[],"os"]],[[[389,17,389,39,[9,[389,17,389,32,[7,[[389,19,389,27,[11,"priority"]],[389,29,389,30,[11,"o"]]]]],[389,36,389,39,[11,"os_"]]]],[390,21,398,80,[17,[[390,26,390,45,[0,[[390,26,390,27,[2,[],"o"]],[390,28,390,36,[19,[390,28,390,30,[2,[],"d1"]],[390,31,390,36,"label"]]],[390,37,390,45,[19,[390,37,390,39,[2,[],"d2"]],[390,40,390,45,"label"]]]]]],[[[391,25,391,27,[12,[[],"EQ"],[]]],[392,29,392,51,[0,[[392,29,392,36,[2,[],"genEdge"]],[392,37,392,40,[2,[],"os_"]],[392,41,392,51,[6,[[392,43,392,45,[2,[],"d1"]],[392,47,392,49,[2,[],"d2"]]]]]]]]],[[394,25,394,27,[12,[[],"LT"],[]]],[395,29,395,80,[0,[[395,29,395,33,[2,[],"Just"]],[395,34,395,80,[8,[[395,36,395,48,[[395,36,395,40,"from"],[395,43,395,48,[19,[395,43,395,45,[2,[],"d1"]],[395,46,395,48,"id"]]]]],[395,50,395,60,[[395,50,395,52,"to"],[395,55,395,60,[19,[395,55,395,57,[2,[],"d2"]],[395,58,395,60,"id"]]]]],[395,62,395,79,[[395,62,395,67,"label"],[395,70,395,78,[2,[],"priority"]]]]]]]]]]],[[397,25,397,27,[12,[[],"GT"],[]]],[398,29,398,80,[0,[[398,29,398,33,[2,[],"Just"]],[398,34,398,80,[8,[[398,36,398,48,[[398,36,398,40,"from"],[398,43,398,48,[19,[398,43,398,45,[2,[],"d2"]],[398,46,398,48,"id"]]]]],[398,50,398,60,[[398,50,398,52,"to"],[398,55,398,60,[19,[398,55,398,57,[2,[],"d1"]],[398,58,398,60,"id"]]]]],[398,62,398,79,[[398,62,398,67,"label"],[398,70,398,78,[2,[],"priority"]]]]]]]]]]]]]]]],[[400,17,400,19,[10,[]]],[402,21,411,36,[17,[[402,26,402,45,[0,[[402,26,402,33,[2,[],"compare"]],[402,34,402,39,[19,[402,34,402,36,[2,[],"d1"]],[402,37,402,39,"id"]]],[402,40,402,45,[19,[402,40,402,42,[2,[],"d2"]],[402,43,402,45,"id"]]]]]],[[[403,25,403,27,[12,[[],"LT"],[]]],[404,29,404,73,[0,[[404,29,404,33,[2,[],"Just"]],[404,34,404,73,[8,[[404,36,404,48,[[404,36,404,40,"from"],[404,43,404,48,[19,[404,43,404,45,[2,[],"d1"]],[404,46,404,48,"id"]]]]],[404,50,404,60,[[404,50,404,52,"to"],[404,55,404,60,[19,[404,55,404,57,[2,[],"d2"]],[404,58,404,60,"id"]]]]],[404,62,404,72,[[404,62,404,67,"label"],[404,70,404,71,[3,0]]]]]]]]]]],[[406,25,406,27,[12,[[],"GT"],[]]],[407,29,407,73,[0,[[407,29,407,33,[2,[],"Just"]],[407,34,407,73,[8,[[407,36,407,48,[[407,36,407,40,"from"],[407,43,407,48,[19,[407,43,407,45,[2,[],"d2"]],[407,46,407,48,"id"]]]]],[407,50,407,60,[[407,50,407,52,"to"],[407,55,407,60,[19,[407,55,407,57,[2,[],"d1"]],[407,58,407,60,"id"]]]]],[407,62,407,72,[[407,62,407,67,"label"],[407,70,407,71,[3,0]]]]]]]]]]],[[409,25,409,27,[12,[[],"EQ"],[]]],[411,29,411,36,[2,[],"Nothing"]]]]]]]]]]]]]]]]]],[413,5,414,76,[1,"|>",0,[413,5,413,30,[0,[[413,5,413,22,[2,["ListX"],"uniquePairs"]],[413,23,413,30,[2,[],"indexed"]]]]],[414,12,414,76,[0,[[414,12,414,26,[2,["List"],"filterMap"]],[414,27,414,76,[7,[414,28,414,75,[1,"<|",1,[414,28,414,35,[2,[],"genEdge"]],[414,39,414,75,[0,[[414,39,414,54,[2,["List"],"indexedMap"]],[414,55,414,65,[2,["Tuple"],"pair"]],[414,66,414,75,[2,[],"orderings"]]]]]]]]]]]]]]]]]]]]]],[417,1,432,17,[0,[[1,[417,1,418,3,"{-| Given a list of ordering functions for breaking ties, order to things.\n-}"]],[1,[419,1,419,63,[[419,1,419,19,"compareByOrderings"],[419,22,419,63,[6,[419,22,419,44,[1,[419,22,419,26,[[],"List"]],[[419,27,419,44,[6,[419,28,419,29,[0,"a"]],[419,33,419,43,[6,[419,33,419,34,[0,"a"]],[419,38,419,43,[1,[419,38,419,43,[[],"Order"]],[]]]]]]]]]],[419,48,419,63,[6,[419,48,419,49,[0,"a"]],[419,53,419,63,[6,[419,53,419,54,[0,"a"]],[419,58,419,63,[1,[419,58,419,63,[[],"Order"]],[]]]]]]]]]]]],[420,1,432,17,[[420,1,420,19,"compareByOrderings"],[[420,20,420,29,[11,"orderings"]],[420,30,420,32,[11,"d1"]],[420,33,420,35,[11,"d2"]]],[421,5,432,17,[16,[[[422,9,430,56,[0,[[0],[1,[422,9,422,45,[[422,9,422,11,"go"],[422,14,422,45,[6,[422,14,422,36,[1,[422,14,422,18,[[],"List"]],[[422,19,422,36,[6,[422,20,422,21,[0,"a"]],[422,25,422,35,[6,[422,25,422,26,[0,"a"]],[422,30,422,35,[1,[422,30,422,35,[[],"Order"]],[]]]]]]]]]],[422,40,422,45,[1,[422,40,422,45,[[],"Order"]],[]]]]]]]],[423,9,430,56,[[423,9,423,11,"go"],[[423,12,423,14,[11,"os"]]],[424,13,430,56,[17,[[424,18,424,20,[2,[],"os"]],[[[425,17,425,19,[10,[]]],[426,21,426,23,[2,[],"EQ"]]],[[428,17,428,25,[9,[428,17,428,18,[11,"o"]],[428,22,428,25,[11,"os_"]]]],[429,21,430,56,[1,"|>",0,[429,21,429,36,[7,[429,22,429,35,[18,[[[429,23,429,25,[1]]],[429,29,429,35,[0,[[429,29,429,31,[2,[],"go"]],[429,32,429,35,[2,[],"os_"]]]]]]]]]],[430,28,430,56,[0,[[430,28,430,46,[2,[],"fallbackCompareFor"]],[430,47,430,56,[7,[430,48,430,55,[0,[[430,48,430,49,[2,[],"o"]],[430,50,430,52,[2,[],"d1"]],[430,53,430,55,[2,[],"d2"]]]]]]]]]]]]]]]]]]]]]]],[432,5,432,17,[0,[[432,5,432,7,[2,[],"go"]],[432,8,432,17,[2,[],"orderings"]]]]]]]]]]]]],[435,1,441,34,[2,[[1,[435,1,436,3,"{-| Specify how something is glued to another (by name).\n-}"]],[437,6,437,13,"GluedTo"],[],[[438,7,438,36,[[438,7,438,23,"GluedBeforeFirst"],[[438,24,438,36,[1,[438,25,438,28,[[],"Set"]],[[438,29,438,35,[1,[438,29,438,35,[[],"String"]],[]]]]]]]]],[439,7,439,35,[[439,7,439,22,"GluedAfterFirst"],[[439,23,439,35,[1,[439,24,439,27,[[],"Set"]],[[439,28,439,34,[1,[439,28,439,34,[[],"String"]],[]]]]]]]]],[440,7,440,35,[[440,7,440,22,"GluedBeforeLast"],[[440,23,440,35,[1,[440,24,440,27,[[],"Set"]],[[440,28,440,34,[1,[440,28,440,34,[[],"String"]],[]]]]]]]]],[441,7,441,34,[[441,7,441,21,"GluedAfterLast"],[[441,22,441,34,[1,[441,23,441,26,[[],"Set"]],[[441,27,441,33,[1,[441,27,441,33,[[],"String"]],[]]]]]]]]]]]]],[444,1,533,13,[0,[[1,[444,1,446,3,"{-| Given context and a list of ordering functions, check if a list is sorted\nand generate errors if it isn't.\n-}"]],[1,[447,1,447,319,[[447,1,447,21,"checkSortingWithGlue"],[447,24,447,319,[6,[447,24,447,41,[6,[447,25,447,30,[1,[447,25,447,30,[[],"Range"]],[]]],[447,34,447,40,[1,[447,34,447,40,[[],"String"]],[]]]]],[447,45,447,319,[6,[447,45,447,51,[1,[447,45,447,51,[[],"String"]],[]]],[447,55,447,319,[6,[447,55,447,213,[1,[447,55,447,59,[[],"List"]],[[447,60,447,213,[6,[447,61,447,130,[5,[447,63,447,64,"a"],[447,66,447,129,[[447,67,447,90,[[447,67,447,77,"namesBound"],[447,80,447,90,[1,[447,80,447,83,[[],"Set"]],[[447,84,447,90,[1,[447,84,447,90,[[],"String"]],[]]]]]]]],[447,92,447,113,[[447,92,447,97,"glued"],[447,100,447,113,[1,[447,100,447,105,[[],"Maybe"]],[[447,106,447,113,[1,[447,106,447,113,[[],"GluedTo"]],[]]]]]]]],[447,115,447,129,[[447,115,447,120,"range"],[447,123,447,128,[1,[447,123,447,128,[[],"Range"]],[]]]]]]]]],[447,134,447,212,[6,[447,134,447,203,[5,[447,136,447,137,"a"],[447,139,447,202,[[447,140,447,163,[[447,140,447,150,"namesBound"],[447,153,447,163,[1,[447,153,447,156,[[],"Set"]],[[447,157,447,163,[1,[447,157,447,163,[[],"String"]],[]]]]]]]],[447,165,447,186,[[447,165,447,170,"glued"],[447,173,447,186,[1,[447,173,447,178,[[],"Maybe"]],[[447,179,447,186,[1,[447,179,447,186,[[],"GluedTo"]],[]]]]]]]],[447,188,447,202,[[447,188,447,193,"range"],[447,196,447,201,[1,[447,196,447,201,[[],"Range"]],[]]]]]]]]],[447,207,447,212,[1,[447,207,447,212,[[],"Order"]],[]]]]]]]]]],[447,217,447,319,[6,[447,217,447,222,[1,[447,217,447,222,[[],"Range"]],[]]],[447,226,447,319,[6,[447,226,447,300,[1,[447,226,447,230,[[],"List"]],[[447,231,447,300,[5,[447,233,447,234,"a"],[447,236,447,299,[[447,237,447,260,[[447,237,447,247,"namesBound"],[447,250,447,260,[1,[447,250,447,253,[[],"Set"]],[[447,254,447,260,[1,[447,254,447,260,[[],"String"]],[]]]]]]]],[447,262,447,283,[[447,262,447,267,"glued"],[447,270,447,283,[1,[447,270,447,275,[[],"Maybe"]],[[447,276,447,283,[1,[447,276,447,283,[[],"GluedTo"]],[]]]]]]]],[447,285,447,299,[[447,285,447,290,"range"],[447,293,447,298,[1,[447,293,447,298,[[],"Range"]],[]]]]]]]]]]]],[447,304,447,319,[1,[447,304,447,308,[[],"List"]],[[447,309,447,319,[1,[447,310,447,315,[[],"Error"]],[[447,316,447,318,[4,[]]]]]]]]]]]]]]]]]]]]]],[448,1,533,13,[[448,1,448,21,"checkSortingWithGlue"],[[448,22,448,35,[11,"extractSource"]],[448,36,448,49,[11,"errorConcerns"]],[448,50,448,59,[11,"orderings"]],[448,60,448,70,[11,"errorRange"]],[448,71,448,73,[11,"ds"]]],[449,5,533,13,[16,[[[450,9,462,130,[0,[[0],[1,[450,9,450,398,[[450,9,450,20,"insertGlued"],[450,23,450,398,[6,[450,23,450,110,[1,[450,23,450,27,[[],"List"]],[[450,28,450,110,[1,[450,29,450,39,[["Graph"],"Node"]],[[450,40,450,109,[5,[450,42,450,43,"a"],[450,45,450,108,[[450,46,450,69,[[450,46,450,56,"namesBound"],[450,59,450,69,[1,[450,59,450,62,[[],"Set"]],[[450,63,450,69,[1,[450,63,450,69,[[],"String"]],[]]]]]]]],[450,71,450,92,[[450,71,450,76,"glued"],[450,79,450,92,[1,[450,79,450,84,[[],"Maybe"]],[[450,85,450,92,[1,[450,85,450,92,[[],"GluedTo"]],[]]]]]]]],[450,94,450,108,[[450,94,450,99,"range"],[450,102,450,107,[1,[450,102,450,107,[[],"Range"]],[]]]]]]]]]]]]]]],[450,114,450,398,[6,[450,114,450,194,[1,[450,114,450,124,[["Graph"],"Node"]],[[450,125,450,194,[5,[450,127,450,128,"a"],[450,130,450,193,[[450,131,450,154,[[450,131,450,141,"namesBound"],[450,144,450,154,[1,[450,144,450,147,[[],"Set"]],[[450,148,450,154,[1,[450,148,450,154,[[],"String"]],[]]]]]]]],[450,156,450,177,[[450,156,450,161,"glued"],[450,164,450,177,[1,[450,164,450,169,[[],"Maybe"]],[[450,170,450,177,[1,[450,170,450,177,[[],"GluedTo"]],[]]]]]]]],[450,179,450,193,[[450,179,450,184,"range"],[450,187,450,192,[1,[450,187,450,192,[[],"Range"]],[]]]]]]]]]]]],[450,198,450,398,[4,[[450,200,450,296,[[450,200,450,206,"toGlue"],[450,209,450,296,[1,[450,209,450,213,[[],"List"]],[[450,214,450,296,[1,[450,215,450,225,[["Graph"],"Node"]],[[450,226,450,295,[5,[450,228,450,229,"a"],[450,231,450,294,[[450,232,450,255,[[450,232,450,242,"namesBound"],[450,245,450,255,[1,[450,245,450,248,[[],"Set"]],[[450,249,450,255,[1,[450,249,450,255,[[],"String"]],[]]]]]]]],[450,257,450,278,[[450,257,450,262,"glued"],[450,265,450,278,[1,[450,265,450,270,[[],"Maybe"]],[[450,271,450,278,[1,[450,271,450,278,[[],"GluedTo"]],[]]]]]]]],[450,280,450,294,[[450,280,450,285,"range"],[450,288,450,293,[1,[450,288,450,293,[[],"Range"]],[]]]]]]]]]]]]]]]]],[450,298,450,397,[[450,298,450,306,"inserted"],[450,309,450,396,[1,[450,309,450,313,[[],"List"]],[[450,314,450,396,[1,[450,315,450,325,[["Graph"],"Node"]],[[450,326,450,395,[5,[450,328,450,329,"a"],[450,331,450,394,[[450,332,450,355,[[450,332,450,342,"namesBound"],[450,345,450,355,[1,[450,345,450,348,[[],"Set"]],[[450,349,450,355,[1,[450,349,450,355,[[],"String"]],[]]]]]]]],[450,357,450,378,[[450,357,450,362,"glued"],[450,365,450,378,[1,[450,365,450,370,[[],"Maybe"]],[[450,371,450,378,[1,[450,371,450,378,[[],"GluedTo"]],[]]]]]]]],[450,380,450,394,[[450,380,450,385,"range"],[450,388,450,393,[1,[450,388,450,393,[[],"Range"]],[]]]]]]]]]]]]]]]]]]]]]]]]]]],[451,9,462,130,[[451,9,451,20,"insertGlued"],[[451,21,451,26,[11,"glued"]],[451,27,451,45,[14,[451,28,451,44,[13,[451,28,451,37,[8,[[451,30,451,35,"label"]]]],[451,41,451,44,"dec"]]]]]],[453,13,462,130,[1,"|>",0,[453,13,460,107,[1,"|>",0,[453,13,458,22,[0,[[453,13,453,27,[2,["List"],"partition"]],[454,17,457,18,[7,[454,18,456,109,[1,">>",1,[454,18,454,24,[20,".label"]],[455,24,456,109,[1,">>",1,[455,24,455,30,[20,".glued"]],[456,24,456,109,[0,[[456,24,456,37,[2,["MaybeX"],"unwrap"]],[456,38,456,43,[2,[],"False"]],[456,44,456,109,[7,[456,45,456,108,[1,"<<",0,[456,45,456,97,[1,"<<",0,[456,45,456,63,[1,"<<",0,[456,45,456,48,[2,[],"not"]],[456,52,456,63,[2,["Set"],"isEmpty"]]]],[456,67,456,97,[0,[[456,67,456,80,[2,["Set"],"intersect"]],[456,81,456,97,[19,[456,81,456,86,[2,[],"label"]],[456,87,456,97,"namesBound"]]]]]]]],[456,101,456,108,[2,[],"gluedTo"]]]]]]]]]]]]]]],[458,17,458,22,[2,[],"glued"]]]]],[460,20,460,107,[0,[[460,20,460,34,[2,["Tuple"],"mapFirst"]],[460,35,460,107,[7,[460,36,460,106,[0,[[460,36,460,50,[2,["List"],"partition"]],[460,51,460,106,[7,[460,52,460,105,[1,"<<",0,[460,52,460,95,[1,"<<",0,[460,52,460,85,[0,[[460,52,460,65,[2,["MaybeX"],"unwrap"]],[460,66,460,71,[2,[],"False"]],[460,72,460,85,[2,[],"isGluedBefore"]]]]],[460,89,460,95,[20,".glued"]]]],[460,99,460,105,[20,".label"]]]]]]]]]]]]]]]],[462,20,462,130,[7,[462,21,462,129,[18,[[[462,22,462,61,[7,[[462,24,462,51,[7,[[462,26,462,37,[11,"gluedBefore"]],[462,39,462,49,[11,"gluedAfter"]]]]],[462,53,462,59,[11,"toGlue"]]]]]],[462,65,462,129,[8,[[462,67,462,82,[[462,67,462,73,"toGlue"],[462,76,462,82,[2,[],"toGlue"]]]],[462,84,462,128,[[462,84,462,92,"inserted"],[462,95,462,127,[1,"++",1,[462,95,462,106,[2,[],"gluedBefore"]],[462,110,462,127,[1,"::",1,[462,110,462,113,[2,[],"dec"]],[462,117,462,127,[2,[],"gluedAfter"]]]]]]]]]]]]]]]]]]]]]]],[464,9,466,63,[0,[[0],[1,[464,9,464,106,[[464,9,464,16,"indexed"],[464,19,464,106,[1,[464,19,464,23,[[],"List"]],[[464,24,464,106,[1,[464,25,464,35,[["Graph"],"Node"]],[[464,36,464,105,[5,[464,38,464,39,"a"],[464,41,464,104,[[464,42,464,65,[[464,42,464,52,"namesBound"],[464,55,464,65,[1,[464,55,464,58,[[],"Set"]],[[464,59,464,65,[1,[464,59,464,65,[[],"String"]],[]]]]]]]],[464,67,464,88,[[464,67,464,72,"glued"],[464,75,464,88,[1,[464,75,464,80,[[],"Maybe"]],[[464,81,464,88,[1,[464,81,464,88,[[],"GluedTo"]],[]]]]]]]],[464,90,464,104,[[464,90,464,95,"range"],[464,98,464,103,[1,[464,98,464,103,[[],"Range"]],[]]]]]]]]]]]]]]]]]],[465,9,466,63,[[465,9,465,16,"indexed"],[],[466,13,466,63,[0,[[466,13,466,28,[2,["List"],"indexedMap"]],[466,29,466,60,[7,[466,30,466,59,[18,[[[466,31,466,32,[11,"i"]],[466,33,466,34,[11,"d"]]],[466,38,466,59,[8,[[466,40,466,46,[[466,40,466,42,"id"],[466,45,466,46,[2,[],"i"]]]],[466,48,466,58,[[466,48,466,53,"label"],[466,56,466,57,[2,[],"d"]]]]]]]]]]]],[466,61,466,63,[2,[],"ds"]]]]]]]]]],[468,9,475,18,[0,[[0],[1,[468,9,468,194,[[468,9,468,13,"sort"],[468,16,468,194,[6,[468,16,468,103,[1,[468,16,468,20,[[],"List"]],[[468,21,468,103,[1,[468,22,468,32,[["Graph"],"Node"]],[[468,33,468,102,[5,[468,35,468,36,"a"],[468,38,468,101,[[468,39,468,62,[[468,39,468,49,"namesBound"],[468,52,468,62,[1,[468,52,468,55,[[],"Set"]],[[468,56,468,62,[1,[468,56,468,62,[[],"String"]],[]]]]]]]],[468,64,468,85,[[468,64,468,69,"glued"],[468,72,468,85,[1,[468,72,468,77,[[],"Maybe"]],[[468,78,468,85,[1,[468,78,468,85,[[],"GluedTo"]],[]]]]]]]],[468,87,468,101,[[468,87,468,92,"range"],[468,95,468,100,[1,[468,95,468,100,[[],"Range"]],[]]]]]]]]]]]]]]],[468,107,468,194,[1,[468,107,468,111,[[],"List"]],[[468,112,468,194,[1,[468,113,468,123,[["Graph"],"Node"]],[[468,124,468,193,[5,[468,126,468,127,"a"],[468,129,468,192,[[468,130,468,153,[[468,130,468,140,"namesBound"],[468,143,468,153,[1,[468,143,468,146,[[],"Set"]],[[468,147,468,153,[1,[468,147,468,153,[[],"String"]],[]]]]]]]],[468,155,468,176,[[468,155,468,160,"glued"],[468,163,468,176,[1,[468,163,468,168,[[],"Maybe"]],[[468,169,468,176,[1,[468,169,468,176,[[],"GluedTo"]],[]]]]]]]],[468,178,468,192,[[468,178,468,183,"range"],[468,186,468,191,[1,[468,186,468,191,[[],"Range"]],[]]]]]]]]]]]]]]]]]]]],[469,9,475,18,[[469,9,469,13,"sort"],[],[470,13,475,18,[0,[[470,13,470,26,[2,["List"],"sortWith"]],[471,17,475,18,[7,[471,18,474,95,[18,[[[471,19,471,21,[11,"d1"]],[471,22,471,24,[11,"d2"]]],[473,21,474,95,[1,"|>",0,[473,21,473,49,[7,[473,22,473,48,[18,[[[473,23,473,25,[1]]],[473,29,473,48,[0,[[473,29,473,36,[2,[],"compare"]],[473,37,473,42,[19,[473,37,473,39,[2,[],"d1"]],[473,40,473,42,"id"]]],[473,43,473,48,[19,[473,43,473,45,[2,[],"d2"]],[473,46,473,48,"id"]]]]]]]]]]],[474,28,474,95,[0,[[474,28,474,46,[2,[],"fallbackCompareFor"]],[474,47,474,95,[7,[474,48,474,94,[0,[[474,48,474,66,[2,[],"compareByOrderings"]],[474,67,474,76,[2,[],"orderings"]],[474,77,474,85,[19,[474,77,474,79,[2,[],"d1"]],[474,80,474,85,"label"]]],[474,86,474,94,[19,[474,86,474,88,[2,[],"d2"]],[474,89,474,94,"label"]]]]]]]]]]]]]]]]]]]]]]]]]],[477,9,515,62,[0,[[0],[1,[477,9,477,302,[[477,9,477,18,"glueLevel"],[477,21,477,302,[6,[477,21,477,108,[1,[477,21,477,25,[[],"List"]],[[477,26,477,108,[1,[477,27,477,37,[["Graph"],"Node"]],[[477,38,477,107,[5,[477,40,477,41,"a"],[477,43,477,106,[[477,44,477,67,[[477,44,477,54,"namesBound"],[477,57,477,67,[1,[477,57,477,60,[[],"Set"]],[[477,61,477,67,[1,[477,61,477,67,[[],"String"]],[]]]]]]]],[477,69,477,90,[[477,69,477,74,"glued"],[477,77,477,90,[1,[477,77,477,82,[[],"Maybe"]],[[477,83,477,90,[1,[477,83,477,90,[[],"GluedTo"]],[]]]]]]]],[477,92,477,106,[[477,92,477,97,"range"],[477,100,477,105,[1,[477,100,477,105,[[],"Range"]],[]]]]]]]]]]]]]]],[477,112,477,302,[6,[477,112,477,211,[1,[477,112,477,116,[[],"List"]],[[477,117,477,211,[1,[477,118,477,122,[[],"List"]],[[477,123,477,210,[1,[477,124,477,135,[[],"NodeContext"]],[[477,136,477,205,[5,[477,138,477,139,"a"],[477,141,477,204,[[477,142,477,165,[[477,142,477,152,"namesBound"],[477,155,477,165,[1,[477,155,477,158,[[],"Set"]],[[477,159,477,165,[1,[477,159,477,165,[[],"String"]],[]]]]]]]],[477,167,477,188,[[477,167,477,172,"glued"],[477,175,477,188,[1,[477,175,477,180,[[],"Maybe"]],[[477,181,477,188,[1,[477,181,477,188,[[],"GluedTo"]],[]]]]]]]],[477,190,477,204,[[477,190,477,195,"range"],[477,198,477,203,[1,[477,198,477,203,[[],"Range"]],[]]]]]]]]],[477,206,477,209,[1,[477,206,477,209,[[],"Int"]],[]]]]]]]]]]]],[477,215,477,302,[1,[477,215,477,219,[[],"List"]],[[477,220,477,302,[1,[477,221,477,231,[["Graph"],"Node"]],[[477,232,477,301,[5,[477,234,477,235,"a"],[477,237,477,300,[[477,238,477,261,[[477,238,477,248,"namesBound"],[477,251,477,261,[1,[477,251,477,254,[[],"Set"]],[[477,255,477,261,[1,[477,255,477,261,[[],"String"]],[]]]]]]]],[477,263,477,284,[[477,263,477,268,"glued"],[477,271,477,284,[1,[477,271,477,276,[[],"Maybe"]],[[477,277,477,284,[1,[477,277,477,284,[[],"GluedTo"]],[]]]]]]]],[477,286,477,300,[[477,286,477,291,"range"],[477,294,477,299,[1,[477,294,477,299,[[],"Range"]],[]]]]]]]]]]]]]]]]]]]]]],[478,9,515,62,[[478,9,478,18,"glueLevel"],[[478,19,478,25,[11,"sorted"]],[478,26,478,31,[11,"glued"]]],[479,13,515,62,[17,[[479,18,479,23,[2,[],"glued"]],[[[480,17,480,19,[10,[]]],[481,21,481,27,[2,[],"sorted"]]],[[483,17,483,24,[9,[483,17,483,18,[11,"g"]],[483,22,483,24,[11,"gs"]]]],[484,21,515,62,[16,[[[485,25,488,40,[0,[[0],[1,[485,25,485,121,[[485,25,485,31,"asList"],[485,34,485,121,[1,[485,34,485,38,[[],"List"]],[[485,39,485,121,[1,[485,40,485,50,[["Graph"],"Node"]],[[485,51,485,120,[5,[485,53,485,54,"a"],[485,56,485,119,[[485,57,485,80,[[485,57,485,67,"namesBound"],[485,70,485,80,[1,[485,70,485,73,[[],"Set"]],[[485,74,485,80,[1,[485,74,485,80,[[],"String"]],[]]]]]]]],[485,82,485,103,[[485,82,485,87,"glued"],[485,90,485,103,[1,[485,90,485,95,[[],"Maybe"]],[[485,96,485,103,[1,[485,96,485,103,[[],"GluedTo"]],[]]]]]]]],[485,105,485,119,[[485,105,485,110,"range"],[485,113,485,118,[1,[485,113,485,118,[[],"Range"]],[]]]]]]]]]]]]]]]]]],[486,25,488,40,[[486,25,486,31,"asList"],[],[487,29,488,40,[1,"|>",0,[487,29,487,45,[0,[[487,29,487,37,[2,["List"],"map"]],[487,38,487,43,[20,".node"]],[487,44,487,45,[2,[],"g"]]]]],[488,36,488,40,[2,[],"sort"]]]]]]]]]],[490,21,515,62,[1,"|>",0,[490,21,514,22,[7,[490,22,513,33,[11,[490,25,490,44,[0,[[490,25,490,37,[2,["List"],"isEmpty"]],[490,38,490,44,[2,[],"sorted"]]]]],[492,25,492,31,[2,[],"asList"]],[496,25,513,33,[1,"|>",0,[496,25,496,103,[0,[[496,25,496,39,[2,["List"],"partition"]],[496,40,496,96,[7,[496,41,496,95,[1,"<<",0,[496,41,496,85,[1,"<<",0,[496,41,496,75,[0,[[496,41,496,54,[2,["MaybeX"],"unwrap"]],[496,55,496,60,[2,[],"False"]],[496,61,496,75,[2,[],"isGluedToFirst"]]]]],[496,79,496,85,[20,".glued"]]]],[496,89,496,95,[20,".label"]]]]]],[496,97,496,103,[2,[],"asList"]]]]],[497,32,513,33,[7,[497,33,512,53,[18,[[[497,34,497,53,[7,[[497,36,497,43,[11,"toFirst"]],[497,45,497,51,[11,"toLast"]]]]]],[498,37,512,53,[1,"|>",0,[498,37,511,79,[1,"|>",0,[498,37,505,53,[1,"|>",0,[498,37,504,47,[0,[[498,37,498,47,[2,["List"],"foldl"]],[499,41,502,42,[7,[499,42,501,101,[18,[[[499,43,499,44,[11,"d"]],[499,45,499,65,[8,[[499,47,499,53,"toGlue"],[499,55,499,63,"inserted"]]]]],[500,45,501,101,[1,"|>",0,[500,45,500,65,[0,[[500,45,500,56,[2,[],"insertGlued"]],[500,57,500,63,[2,[],"toGlue"]],[500,64,500,65,[2,[],"d"]]]]],[501,52,501,101,[7,[501,53,501,100,[18,[[[501,54,501,55,[11,"r"]]],[501,59,501,100,[21,[501,61,501,62,"r"],[[501,65,501,99,[[501,65,501,73,"inserted"],[501,76,501,98,[1,"++",1,[501,76,501,84,[2,[],"inserted"]],[501,88,501,98,[19,[501,88,501,89,[2,[],"r"]],[501,90,501,98,"inserted"]]]]]]]]]]]]]]]]]]]]]],[503,41,503,76,[8,[[503,43,503,59,[[503,43,503,49,"toGlue"],[503,52,503,59,[2,[],"toFirst"]]]],[503,61,503,75,[[503,61,503,69,"inserted"],[503,72,503,74,[9,[]]]]]]]],[504,41,504,47,[2,[],"sorted"]]]]],[505,44,505,53,[20,".inserted"]]]],[506,44,511,79,[0,[[506,44,506,54,[2,["List"],"foldr"]],[507,45,510,46,[7,[507,46,509,105,[18,[[[507,47,507,48,[11,"d"]],[507,49,507,69,[8,[[507,51,507,57,"toGlue"],[507,59,507,67,"inserted"]]]]],[508,49,509,105,[1,"|>",0,[508,49,508,69,[0,[[508,49,508,60,[2,[],"insertGlued"]],[508,61,508,67,[2,[],"toGlue"]],[508,68,508,69,[2,[],"d"]]]]],[509,56,509,105,[7,[509,57,509,104,[18,[[[509,58,509,59,[11,"r"]]],[509,63,509,104,[21,[509,65,509,66,"r"],[[509,69,509,103,[[509,69,509,77,"inserted"],[509,80,509,102,[1,"++",1,[509,80,509,90,[19,[509,80,509,81,[2,[],"r"]],[509,82,509,90,"inserted"]]],[509,94,509,102,[2,[],"inserted"]]]]]]]]]]]]]]]]]]]]],[511,45,511,79,[8,[[511,47,511,62,[[511,47,511,53,"toGlue"],[511,56,511,62,[2,[],"toLast"]]]],[511,64,511,78,[[511,64,511,72,"inserted"],[511,75,511,77,[9,[]]]]]]]]]]]]],[512,44,512,53,[20,".inserted"]]]]]]]]]]]]]]],[515,28,515,62,[7,[515,29,515,61,[18,[[[515,30,515,37,[11,"sorted_"]]],[515,41,515,61,[0,[[515,41,515,50,[2,[],"glueLevel"]],[515,51,515,58,[2,[],"sorted_"]],[515,59,515,61,[2,[],"gs"]]]]]]]]]]]]]]]]]]]]]]]]]],[517,5,533,13,[1,"|>",0,[517,5,521,24,[1,"|>",0,[517,5,519,30,[1,"|>",0,[517,5,517,27,[0,[[517,5,517,19,[2,[],"gluedListToDAG"]],[517,20,517,27,[2,[],"indexed"]]]]],[519,12,519,30,[2,["Graph"],"heightLevels"]]]],[521,12,521,24,[0,[[521,12,521,21,[2,[],"glueLevel"]],[521,22,521,24,[9,[]]]]]]]],[523,12,533,13,[7,[523,13,532,23,[18,[[[523,14,523,20,[11,"sorted"]]],[524,17,532,23,[11,[524,20,524,63,[1,"/=",2,[524,20,524,39,[0,[[524,20,524,28,[2,["List"],"map"]],[524,29,524,32,[20,".id"]],[524,33,524,39,[2,[],"sorted"]]]]],[524,43,524,63,[0,[[524,43,524,51,[2,["List"],"map"]],[524,52,524,55,[20,".id"]],[524,56,524,63,[2,[],"indexed"]]]]]]],[526,21,529,42,[1,"|>",0,[526,21,528,66,[1,"|>",0,[526,21,527,51,[1,"|>",0,[526,21,526,76,[0,[[526,21,526,29,[2,["List"],"map"]],[526,30,526,69,[7,[526,31,526,68,[18,[[[526,32,526,45,[8,[[526,34,526,36,"id"],[526,38,526,43,"label"]]]]],[526,49,526,68,[6,[[526,51,526,53,[2,[],"id"]],[526,55,526,66,[19,[526,55,526,60,[2,[],"label"]],[526,61,526,66,"range"]]]]]]]]]]],[526,70,526,76,[2,[],"sorted"]]]]],[527,28,527,51,[0,[[527,28,527,37,[2,[],"createFix"]],[527,38,527,51,[2,[],"extractSource"]]]]]]],[528,28,528,66,[0,[[528,28,528,41,[2,[],"unsortedError"]],[528,42,528,55,[2,[],"errorConcerns"]],[528,56,528,66,[2,[],"errorRange"]]]]]]],[529,28,529,42,[2,["List"],"singleton"]]]],[532,21,532,23,[9,[]]]]]]]]]]]]]]]]]]]],[536,1,551,15,[0,[[1,[536,1,537,3,"{-| Extract what names something is glued to.\n-}"]],[1,[538,1,538,32,[[538,1,538,8,"gluedTo"],[538,11,538,32,[6,[538,11,538,18,[1,[538,11,538,18,[[],"GluedTo"]],[]]],[538,22,538,32,[1,[538,22,538,25,[[],"Set"]],[[538,26,538,32,[1,[538,26,538,32,[[],"String"]],[]]]]]]]]]]],[539,1,551,15,[[539,1,539,8,"gluedTo"],[[539,9,539,10,[11,"g"]]],[540,5,551,15,[17,[[540,10,540,11,[2,[],"g"]],[[[541,9,541,28,[12,[[],"GluedBeforeFirst"],[[541,26,541,28,[11,"ns"]]]]],[542,13,542,15,[2,[],"ns"]]],[[544,9,544,27,[12,[[],"GluedAfterFirst"],[[544,25,544,27,[11,"ns"]]]]],[545,13,545,15,[2,[],"ns"]]],[[547,9,547,27,[12,[[],"GluedBeforeLast"],[[547,25,547,27,[11,"ns"]]]]],[548,13,548,15,[2,[],"ns"]]],[[550,9,550,26,[12,[[],"GluedAfterLast"],[[550,24,550,26,[11,"ns"]]]]],[551,13,551,15,[2,[],"ns"]]]]]]]]]]]],[554,1,569,18,[0,[[1,[554,1,555,3,"{-| Check if something is glued to the first or last of its glued list.\n-}"]],[1,[556,1,556,33,[[556,1,556,15,"isGluedToFirst"],[556,18,556,33,[6,[556,18,556,25,[1,[556,18,556,25,[[],"GluedTo"]],[]]],[556,29,556,33,[1,[556,29,556,33,[[],"Bool"]],[]]]]]]]],[557,1,569,18,[[557,1,557,15,"isGluedToFirst"],[[557,16,557,17,[11,"g"]]],[558,5,569,18,[17,[[558,10,558,11,[2,[],"g"]],[[[559,9,559,27,[12,[[],"GluedBeforeFirst"],[[559,26,559,27,[0]]]]],[560,13,560,17,[2,[],"True"]]],[[562,9,562,26,[12,[[],"GluedAfterFirst"],[[562,25,562,26,[0]]]]],[563,13,563,17,[2,[],"True"]]],[[565,9,565,26,[12,[[],"GluedBeforeLast"],[[565,25,565,26,[0]]]]],[566,13,566,18,[2,[],"False"]]],[[568,9,568,25,[12,[[],"GluedAfterLast"],[[568,24,568,25,[0]]]]],[569,13,569,18,[2,[],"False"]]]]]]]]]]]],[572,1,587,18,[0,[[1,[572,1,573,3,"{-| Check if something is glued before or after that to which it is glued.\n-}"]],[1,[574,1,574,32,[[574,1,574,14,"isGluedBefore"],[574,17,574,32,[6,[574,17,574,24,[1,[574,17,574,24,[[],"GluedTo"]],[]]],[574,28,574,32,[1,[574,28,574,32,[[],"Bool"]],[]]]]]]]],[575,1,587,18,[[575,1,575,14,"isGluedBefore"],[[575,15,575,16,[11,"g"]]],[576,5,587,18,[17,[[576,10,576,11,[2,[],"g"]],[[[577,9,577,27,[12,[[],"GluedBeforeFirst"],[[577,26,577,27,[0]]]]],[578,13,578,17,[2,[],"True"]]],[[580,9,580,26,[12,[[],"GluedAfterFirst"],[[580,25,580,26,[0]]]]],[581,13,581,18,[2,[],"False"]]],[[583,9,583,26,[12,[[],"GluedBeforeLast"],[[583,25,583,26,[0]]]]],[584,13,584,17,[2,[],"True"]]],[[586,9,586,25,[12,[[],"GluedAfterLast"],[[586,24,586,25,[0]]]]],[587,13,587,18,[2,[],"False"]]]]]]]]]]]],[590,1,617,30,[0,[[1,[590,1,593,3,"{-| Given a list of glued TLDs, remove any glues that are cyclic by converting\nit to a directed acyclic graph, where edges indicate gluing dependencies (i.e.\nA -> B means B is glued to A).\n-}"]],[1,[594,1,594,165,[[594,1,594,15,"gluedListToDAG"],[594,18,594,165,[6,[594,18,594,90,[1,[594,18,594,22,[[],"List"]],[[594,23,594,90,[1,[594,24,594,34,[["Graph"],"Node"]],[[594,35,594,89,[5,[594,37,594,38,"a"],[594,40,594,88,[[594,41,594,64,[[594,41,594,51,"namesBound"],[594,54,594,64,[1,[594,54,594,57,[[],"Set"]],[[594,58,594,64,[1,[594,58,594,64,[[],"String"]],[]]]]]]]],[594,66,594,88,[[594,66,594,71,"glued"],[594,74,594,87,[1,[594,74,594,79,[[],"Maybe"]],[[594,80,594,87,[1,[594,80,594,87,[[],"GluedTo"]],[]]]]]]]]]]]]]]]]]],[594,94,594,165,[1,[594,94,594,106,[[],"AcyclicGraph"]],[[594,107,594,161,[5,[594,109,594,110,"a"],[594,112,594,160,[[594,113,594,136,[[594,113,594,123,"namesBound"],[594,126,594,136,[1,[594,126,594,129,[[],"Set"]],[[594,130,594,136,[1,[594,130,594,136,[[],"String"]],[]]]]]]]],[594,138,594,160,[[594,138,594,143,"glued"],[594,146,594,159,[1,[594,146,594,151,[[],"Maybe"]],[[594,152,594,159,[1,[594,152,594,159,[[],"GluedTo"]],[]]]]]]]]]]]],[594,162,594,165,[1,[594,162,594,165,[[],"Int"]],[]]]]]]]]]]],[595,1,617,30,[[595,1,595,15,"gluedListToDAG"],[[595,16,595,18,[11,"ds"]]],[596,5,617,30,[16,[[[597,9,600,33,[0,[[0],[1,[597,9,597,40,[[597,9,597,22,"namesToNodeId"],[597,25,597,40,[1,[597,25,597,29,[[],"Dict"]],[[597,30,597,36,[1,[597,30,597,36,[[],"String"]],[]]],[597,37,597,40,[1,[597,37,597,40,[[],"Int"]],[]]]]]]]]],[598,9,600,33,[[598,9,598,22,"namesToNodeId"],[],[599,13,600,33,[1,"|>",0,[599,13,599,108,[0,[[599,13,599,27,[2,["List"],"concatMap"]],[599,28,599,105,[7,[599,29,599,104,[18,[[[599,30,599,43,[8,[[599,32,599,34,"id"],[599,36,599,41,"label"]]]]],[599,47,599,104,[1,"<|",1,[599,47,599,73,[0,[[599,47,599,55,[2,["List"],"map"]],[599,56,599,73,[7,[599,57,599,72,[18,[[[599,58,599,59,[11,"n"]]],[599,63,599,72,[6,[[599,65,599,66,[2,[],"n"]],[599,68,599,70,[2,[],"id"]]]]]]]]]]]]],[599,77,599,104,[0,[[599,77,599,87,[2,["Set"],"toList"]],[599,88,599,104,[19,[599,88,599,93,[2,[],"label"]],[599,94,599,104,"namesBound"]]]]]]]]]]]]],[599,106,599,108,[2,[],"ds"]]]]],[600,20,600,33,[2,["Dict"],"fromList"]]]]]]]]],[602,9,614,19,[0,[[0],[1,[602,9,602,32,[[602,9,602,14,"edges"],[602,17,602,32,[1,[602,17,602,21,[[],"List"]],[[602,22,602,32,[1,[602,23,602,27,[[],"Edge"]],[[602,28,602,31,[1,[602,28,602,31,[[],"Int"]],[]]]]]]]]]]]],[603,9,614,19,[[603,9,603,14,"edges"],[],[605,13,614,19,[0,[[605,13,605,27,[2,["List"],"concatMap"]],[606,17,613,18,[7,[606,18,612,30,[18,[[[606,19,606,32,[8,[[606,21,606,23,"id"],[606,25,606,30,"label"]]]]],[607,21,612,30,[1,"|>",0,[607,21,607,73,[0,[[607,21,607,34,[2,["MaybeX"],"unwrap"]],[607,35,607,37,[9,[]]],[607,38,607,61,[7,[607,39,607,60,[1,"<<",0,[607,39,607,49,[2,["Set"],"toList"]],[607,53,607,60,[2,[],"gluedTo"]]]]]],[607,62,607,73,[19,[607,62,607,67,[2,[],"label"]],[607,68,607,73,"glued"]]]]]],[608,28,612,30,[0,[[608,28,608,42,[2,["List"],"filterMap"]],[609,29,612,30,[7,[609,30,611,96,[18,[[[609,31,609,32,[11,"n"]]],[610,33,611,96,[1,"|>",0,[610,33,610,57,[0,[[610,33,610,41,[2,["Dict"],"get"]],[610,42,610,43,[2,[],"n"]],[610,44,610,57,[2,[],"namesToNodeId"]]]]],[611,40,611,96,[0,[[611,40,611,49,[2,["Maybe"],"map"]],[611,50,611,96,[7,[611,51,611,95,[18,[[[611,52,611,56,[11,"from"]]],[611,60,611,95,[8,[[611,62,611,73,[[611,62,611,66,"from"],[611,69,611,73,[2,[],"from"]]]],[611,75,611,82,[[611,75,611,77,"to"],[611,80,611,82,[2,[],"id"]]]],[611,84,611,94,[[611,84,611,89,"label"],[611,92,611,93,[3,0]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[614,17,614,19,[2,[],"ds"]]]]]]]]]]],[616,5,617,30,[1,"|>",0,[616,5,616,37,[0,[[616,5,616,28,[2,["Graph"],"fromNodesAndEdges"]],[616,29,616,31,[2,[],"ds"]],[616,32,616,37,[2,[],"edges"]]]]],[617,12,617,30,[0,[[617,12,617,27,[2,[],"eliminateCycles"]],[617,28,617,30,[2,[],"ds"]]]]]]]]]]]]]]],[620,1,634,11,[0,[[1,[620,1,621,3,"{-| Find all dependencies of a declaration.\n-}"]],[1,[622,1,622,191,[[622,1,622,17,"findDependencies"],[622,20,622,191,[6,[622,20,622,94,[3,[[622,22,622,25,[1,[622,22,622,25,[[],"Int"]],[]]],[622,27,622,92,[5,[622,29,622,30,"a"],[622,32,622,91,[[622,33,622,65,[[622,33,622,52,"dependentOnBindings"],[622,55,622,65,[1,[622,55,622,58,[[],"Set"]],[[622,59,622,65,[1,[622,59,622,65,[[],"String"]],[]]]]]]]],[622,67,622,91,[[622,67,622,77,"namesBound"],[622,80,622,90,[1,[622,80,622,83,[[],"Set"]],[[622,84,622,90,[1,[622,84,622,90,[[],"String"]],[]]]]]]]]]]]]]]],[622,98,622,191,[6,[622,98,622,168,[1,[622,98,622,102,[[],"List"]],[[622,103,622,168,[5,[622,105,622,106,"a"],[622,108,622,167,[[622,109,622,141,[[622,109,622,128,"dependentOnBindings"],[622,131,622,141,[1,[622,131,622,134,[[],"Set"]],[[622,135,622,141,[1,[622,135,622,141,[[],"String"]],[]]]]]]]],[622,143,622,167,[[622,143,622,153,"namesBound"],[622,156,622,166,[1,[622,156,622,159,[[],"Set"]],[[622,160,622,166,[1,[622,160,622,166,[[],"String"]],[]]]]]]]]]]]]]]],[622,172,622,191,[3,[[622,174,622,184,[1,[622,174,622,177,[[],"Set"]],[[622,178,622,184,[1,[622,178,622,184,[[],"String"]],[]]]]]],[622,186,622,189,[1,[622,186,622,189,[[],"Int"]],[]]]]]]]]]]]]],[623,1,634,11,[[623,1,623,17,"findDependencies"],[[623,18,623,29,[7,[[623,20,623,24,[11,"decI"]],[623,26,623,27,[11,"d"]]]]],[623,30,623,32,[11,"ds"]]],[624,5,634,11,[0,[[624,5,624,23,[2,["ListX"],"indexedFoldl"]],[625,9,632,10,[7,[625,10,631,67,[18,[[[625,11,625,12,[11,"i"]],[625,13,625,48,[8,[[625,15,625,34,"dependentOnBindings"],[625,36,625,46,"namesBound"]]]],[625,49,625,83,[14,[625,50,625,82,[13,[625,50,625,75,[7,[[625,52,625,59,[11,"glueAcc"]],[625,61,625,73,[11,"numberUsedIn"]]]]],[625,79,625,82,"acc"]]]]]],[627,13,631,67,[11,[627,16,627,92,[1,"||",1,[627,16,627,25,[1,"==",2,[627,16,627,17,[2,[],"i"]],[627,21,627,25,[2,[],"decI"]]]],[627,29,627,92,[7,[627,30,627,91,[1,"<|",1,[627,30,627,41,[2,["Set"],"isEmpty"]],[627,45,627,91,[0,[[627,45,627,58,[2,["Set"],"intersect"]],[627,59,627,71,[19,[627,59,627,60,[2,[],"d"]],[627,61,627,71,"namesBound"]]],[627,72,627,91,[2,[],"dependentOnBindings"]]]]]]]]]]],[628,17,628,20,[2,[],"acc"]],[631,17,631,67,[6,[[631,19,631,47,[0,[[631,19,631,28,[2,["Set"],"union"]],[631,29,631,36,[2,[],"glueAcc"]],[631,37,631,47,[2,[],"namesBound"]]]]],[631,49,631,65,[1,"+",0,[631,49,631,61,[2,[],"numberUsedIn"]],[631,64,631,65,[3,1]]]]]]]]]]]]]],[633,9,633,25,[6,[[633,11,633,20,[2,["Set"],"empty"]],[633,22,633,23,[3,0]]]]],[634,9,634,11,[2,[],"ds"]]]]]]]]]],[637,1,646,10,[0,[[1,[637,1,638,3,"{-| Given a range and a fix, create an unsorted case error.\n-}"]],[1,[639,1,639,56,[[639,1,639,14,"unsortedError"],[639,17,639,56,[6,[639,17,639,23,[1,[639,17,639,23,[[],"String"]],[]]],[639,27,639,56,[6,[639,27,639,32,[1,[639,27,639,32,[[],"Range"]],[]]],[639,36,639,56,[6,[639,36,639,44,[1,[639,36,639,40,[[],"List"]],[[639,41,639,44,[1,[639,41,639,44,[[],"Fix"]],[]]]]]],[639,48,639,56,[1,[639,48,639,53,[[],"Error"]],[[639,54,639,56,[4,[]]]]]]]]]]]]]]],[640,1,646,10,[[640,1,640,14,"unsortedError"],[[640,15,640,28,[11,"errorConcerns"]]],[641,5,646,10,[0,[[641,5,641,22,[2,["Rule"],"errorWithFix"]],[642,9,646,10,[8,[[642,11,642,56,[[642,11,642,18,"message"],[642,21,642,56,[1,"++",1,[642,21,642,34,[2,[],"errorConcerns"]],[642,38,642,56,[5," are not sorted."]]]]]],[643,11,646,9,[[643,11,643,18,"details"],[644,13,645,14,[9,[[644,15,644,122,[1,"++",1,[644,15,644,28,[2,[],"errorConcerns"]],[644,32,644,122,[5," were found out of order.  They should be sorted as specified in the rule configuration."]]]]]]]]]]]]]]]]]]]],[649,1,658,16,[0,[[1,[649,1,651,3,"{-| Keep a value only if it passes a predicate. Like `Maybe.Extra.filter`, but\ndoes not take a `Maybe` as input.\n-}"]],[1,[652,1,652,39,[[652,1,652,9,"validate"],[652,12,652,39,[6,[652,12,652,23,[6,[652,13,652,14,[0,"a"]],[652,18,652,22,[1,[652,18,652,22,[[],"Bool"]],[]]]]],[652,27,652,39,[6,[652,27,652,28,[0,"a"]],[652,32,652,39,[1,[652,32,652,37,[[],"Maybe"]],[[652,38,652,39,[0,"a"]]]]]]]]]]]],[653,1,658,16,[[653,1,653,9,"validate"],[[653,10,653,14,[11,"pred"]],[653,15,653,16,[11,"x"]]],[654,5,658,16,[11,[654,8,654,14,[0,[[654,8,654,12,[2,[],"pred"]],[654,13,654,14,[2,[],"x"]]]]],[655,9,655,15,[0,[[655,9,655,13,[2,[],"Just"]],[655,14,655,15,[2,[],"x"]]]]],[658,9,658,16,[2,[],"Nothing"]]]]]]]]],[661,1,671,19,[0,[[1,[661,1,663,3,"{-| Work around `elm-syntax` sometimes including a period in record access\nfunctions.\n-}"]],[1,[664,1,664,34,[[664,1,664,15,"makeAccessFunc"],[664,18,664,34,[6,[664,18,664,24,[1,[664,18,664,24,[[],"String"]],[]]],[664,28,664,34,[1,[664,28,664,34,[[],"String"]],[]]]]]]]],[665,1,671,19,[[665,1,665,15,"makeAccessFunc"],[[665,16,665,26,[11,"accessFunc"]]],[666,5,671,19,[11,[666,8,666,40,[0,[[666,8,666,25,[2,["String"],"startsWith"]],[666,26,666,29,[5,"."]],[666,30,666,40,[2,[],"accessFunc"]]]]],[668,9,668,37,[0,[[668,9,668,24,[2,["String"],"dropLeft"]],[668,25,668,26,[3,1]],[668,27,668,37,[2,[],"accessFunc"]]]]],[671,9,671,19,[2,[],"accessFunc"]]]]]]]]]],[[15,1,16,3,"{-| Utility functions used by other modules but not specific to them.\n-}"],[196,17,196,45,"-- Count and sum in one pass"],[186,9,186,57,"-- If the name is qualified, it isn't a variable"],[205,9,205,57,"-- If the name is qualified, it isn't a variable"],[307,21,307,50,"-- Generate a fix if unsorted"],[304,9,304,27,"-- Check if sorted"],[297,13,297,52,"-- ignoring lower priority sorts first."],[296,13,296,80,"-- Otherwise, generate all pairwise edges, then eliminate cycles by"],[287,13,287,65,"-- weird transitivity issues, so simply sort stably."],[286,13,286,77,"-- If there is only one sorting function, we needn't worry about"],[374,29,374,63,"-- Repeat the process if necessary"],[369,17,369,68,"-- Eliminate all identified edges and rebuild graph"],[361,37,361,133,"-- Don't risk the infinite loop and delete them all if none of them appeared cyclic individually"],[352,25,352,134,"-- Filter low priority edges by removing any that by the insertion of just that edge create a cyclic subgraph"],[342,33,342,64,"-- Select lowest priority edges"],[339,33,339,58,"-- Group them by priority"],[337,29,337,45,"-- Get all edges"],[329,17,329,64,"-- If not, for each strongly-connected subgraph"],[325,5,325,30,"-- Check if it is acyclic"],[410,29,410,56,"-- This should never happen"],[401,21,401,64,"-- Unsortable, so simply use original order"],[525,21,525,50,"-- Generate a fix if unsorted"],[522,9,522,27,"-- Check if sorted"],[520,9,520,27,"-- Glue each level"],[518,9,518,39,"-- Sort by dependency (gluing)"],[495,25,495,38,"-- Glue items"],[491,25,491,49,"-- Initial unglued items"],[472,21,472,35,"-- Sort stably"],[461,17,461,27,"-- Flatten"],[459,17,459,53,"-- Split into glued before and after"],[452,13,452,59,"-- Keep only glued that are glued to this name"],[604,13,604,94,"-- There can be duplicate edges, but that is fine, since the graph only keeps one"],[626,13,626,37,"-- Cannot glue to itself"],[667,9,667,43,"-- Work around elm-syntax behavior"]]]]
