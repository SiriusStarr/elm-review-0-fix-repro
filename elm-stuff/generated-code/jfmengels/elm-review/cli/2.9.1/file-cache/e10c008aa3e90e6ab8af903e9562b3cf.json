[1,[[1,1,1,44,[0,[[1,8,1,29,["NoUnsortedRecordsTest"]],[1,30,1,44,[1,[[1,40,1,43,[1,"all"]]]]]]]],[[3,1,16,10,[[3,8,3,25,["NoUnsortedRecords"]],[0],[1,[4,5,16,10,[1,[[5,11,5,19,[1,"defaults"]],[6,11,6,36,[1,"doNotSortAmbiguousRecords"]],[7,11,7,34,[1,"doNotSortUnknownRecords"]],[8,11,8,43,[1,"reportAmbiguousRecordsWithoutFix"]],[9,11,9,41,[1,"reportUnknownRecordsWithoutFix"]],[10,11,10,15,[1,"rule"]],[11,11,11,32,[1,"sortGenericFieldsLast"]],[12,11,12,40,[1,"treatAllSubrecordsAsCanonical"]],[13,11,13,44,[1,"treatCustomTypeRecordsAsCanonical"]],[14,11,14,35,[1,"treatSubrecordsAsUnknown"]],[15,11,15,30,[1,"typecheckAllRecords"]]]]]]]],[17,1,17,47,[[17,8,17,22,["Review","Project"]],[0],[1,[17,23,17,47,[1,[[17,33,17,46,[1,"addDependency"]]]]]]]],[18,1,18,19,[[18,8,18,19,["Review","Test"]],[0],[0]]],[19,1,19,73,[[19,8,19,32,["Review","Test","Dependencies"]],[0],[1,[19,33,19,73,[1,[[19,43,19,52,[1,"elmParser"]],[19,54,19,72,[1,"projectWithElmCore"]]]]]]]],[20,1,20,44,[[20,8,20,12,["Test"]],[0],[1,[20,13,20,44,[1,[[20,23,20,27,[2,"Test"]],[20,29,20,37,[1,"describe"]],[20,39,20,43,[1,"test"]]]]]]]]],[[23,1,47,10,[0,[[0],[1,[23,1,23,11,[[23,1,23,4,"all"],[23,7,23,11,[1,[23,7,23,11,[[],"Test"]],[]]]]]],[24,1,47,10,[[24,1,24,4,"all"],[],[25,5,47,10,[0,[[25,5,25,13,[2,[],"describe"]],[25,14,25,33,[5,"NoUnsortedRecords"]],[26,9,47,10,[9,[[26,11,26,25,[2,[],"unknownRecords"]],[27,11,27,27,[2,[],"ambiguousRecords"]],[28,11,28,20,[2,[],"withAlias"]],[29,11,29,28,[2,[],"inTypeAnnotations"]],[30,11,30,24,[2,[],"inExpressions"]],[31,11,31,21,[2,[],"inPatterns"]],[32,11,32,24,[2,[],"avoidBadFixes"]],[33,11,33,38,[2,[],"disambiguatesByHasAllFields"]],[34,11,34,40,[2,[],"disambiguatesByTypeAnnotation"]],[35,11,35,25,[2,[],"customTypeArgs"]],[36,11,36,47,[2,[],"disambiguatesByKnownFunctionArgTypes"]],[37,11,37,25,[2,[],"typeVarSupport"]],[38,11,38,35,[2,[],"recordConstructorSupport"]],[39,11,39,31,[2,[],"usesRecordFieldTypes"]],[40,11,40,26,[2,[],"operatorSupport"]],[41,11,41,28,[2,[],"dependencySupport"]],[42,11,42,31,[2,[],"genericRecordSupport"]],[43,11,43,30,[2,[],"localBindingSupport"]],[44,11,44,37,[2,[],"simpleTypeInferenceSupport"]],[45,11,45,21,[2,[],"subrecords"]],[46,11,46,31,[2,[],"typecheckUnambiguous"]]]]]]]]]]]]],[50,1,124,10,[0,[[0],[1,[50,1,50,22,[[50,1,50,15,"unknownRecords"],[50,18,50,22,[1,[50,18,50,22,[[],"Test"]],[]]]]]],[51,1,124,10,[[51,1,51,15,"unknownRecords"],[],[52,5,124,10,[0,[[52,5,52,13,[2,[],"describe"]],[52,14,52,31,[5,"unknown records"]],[53,9,124,10,[9,[[53,11,60,50,[1,"<|",1,[53,11,53,60,[0,[[53,11,53,15,[2,[],"test"]],[53,16,53,60,[5,"passes unknown record that is alphabetical"]]]]],[54,13,60,50,[18,[[[54,14,54,16,[1]]],[55,17,60,50,[1,"|>",0,[55,17,59,55,[1,"|>",0,[55,17,58,4,[5,"module A exposing (..)\n\na = { a = 1, b = 2, c = 3 }\n"]],[59,24,59,55,[0,[[59,24,59,39,[2,["Review","Test"],"run"]],[59,40,59,55,[7,[59,41,59,54,[0,[[59,41,59,45,[2,[],"rule"]],[59,46,59,54,[2,[],"defaults"]]]]]]]]]]]],[60,24,60,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[61,11,74,26,[1,"<|",1,[61,11,61,63,[0,[[61,11,61,15,[2,[],"test"]],[61,16,61,63,[5,"fails unknown record that is not alphabetical"]]]]],[62,13,74,26,[18,[[[62,14,62,16,[1]]],[63,17,74,26,[1,"|>",0,[63,17,67,55,[1,"|>",0,[63,17,66,4,[5,"module A exposing (..)\n\na = { c = 3, b = 2, a = 1 }\n"]],[67,24,67,55,[0,[[67,24,67,39,[2,["Review","Test"],"run"]],[67,40,67,55,[7,[67,41,67,54,[0,[[67,41,67,45,[2,[],"rule"]],[67,46,67,54,[2,[],"defaults"]]]]]]]]]]]],[68,24,74,26,[0,[[68,24,68,48,[2,["Review","Test"],"expectErrors"]],[69,25,74,26,[9,[[69,27,73,4,[1,"|>",0,[69,27,69,40,[2,[],"unsortedError"]],[70,32,73,4,[0,[[70,32,70,53,[2,["Review","Test"],"whenFixed"]],[70,54,73,4,[5,"module A exposing (..)\n\na = { a = 1 , b = 2, c = 3}\n"]]]]]]]]]]]]]]]]]]]],[75,11,86,50,[1,"<|",1,[75,11,75,76,[0,[[75,11,75,15,[2,[],"test"]],[75,16,75,76,[5,"passes unknown record that is not alphabetical with option"]]]]],[76,13,86,50,[18,[[[76,14,76,16,[1]]],[77,17,86,50,[1,"|>",0,[77,17,85,26,[1,"|>",0,[77,17,80,4,[5,"module A exposing (..)\n\na = { c = 3, b = 2, a = 1 }\n"]],[81,24,85,26,[0,[[81,24,81,39,[2,["Review","Test"],"run"]],[82,25,85,26,[7,[82,26,84,36,[1,"|>",0,[82,26,83,55,[1,"|>",0,[82,26,82,34,[2,[],"defaults"]],[83,32,83,55,[2,[],"doNotSortUnknownRecords"]]]],[84,32,84,36,[2,[],"rule"]]]]]]]]]]],[86,24,86,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[87,11,99,73,[1,"<|",1,[87,11,87,77,[0,[[87,11,87,15,[2,[],"test"]],[87,16,87,77,[5,"reports unknown record that is not alphabetical with option"]]]]],[88,13,99,73,[18,[[[88,14,88,16,[1]]],[89,17,99,73,[1,"|>",0,[89,17,97,26,[1,"|>",0,[89,17,92,4,[5,"module A exposing (..)\n\na = { c = 3, b = 2, a = 1 }\n"]],[93,24,97,26,[0,[[93,24,93,39,[2,["Review","Test"],"run"]],[94,25,97,26,[7,[94,26,96,36,[1,"|>",0,[94,26,95,62,[1,"|>",0,[94,26,94,34,[2,[],"defaults"]],[95,32,95,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[96,32,96,36,[2,[],"rule"]]]]]]]]]]],[98,24,99,73,[0,[[98,24,98,48,[2,["Review","Test"],"expectErrors"]],[99,25,99,73,[9,[[99,27,99,71,[0,[[99,27,99,45,[2,[],"unknownRecordError"]],[99,46,99,71,[5,"{ c = 3, b = 2, a = 1 }"]]]]]]]]]]]]]]]]]],[100,11,111,50,[1,"<|",1,[100,11,100,83,[0,[[100,11,100,15,[2,[],"test"]],[100,16,100,83,[5,"does not report unknown record with single field even with option"]]]]],[101,13,111,50,[18,[[[101,14,101,16,[1]]],[102,17,111,50,[1,"|>",0,[102,17,110,26,[1,"|>",0,[102,17,105,4,[5,"module A exposing (..)\n\na = { c = 3 }\n"]],[106,24,110,26,[0,[[106,24,106,39,[2,["Review","Test"],"run"]],[107,25,110,26,[7,[107,26,109,36,[1,"|>",0,[107,26,108,62,[1,"|>",0,[107,26,107,34,[2,[],"defaults"]],[108,32,108,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[109,32,109,36,[2,[],"rule"]]]]]]]]]]],[111,24,111,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[112,11,123,50,[1,"<|",1,[112,11,112,62,[0,[[112,11,112,15,[2,[],"test"]],[112,16,112,62,[5,"does not report unit record even with option"]]]]],[113,13,123,50,[18,[[[113,14,113,16,[1]]],[114,17,123,50,[1,"|>",0,[114,17,122,26,[1,"|>",0,[114,17,117,4,[5,"module A exposing (..)\n\na = {}\n"]],[118,24,122,26,[0,[[118,24,118,39,[2,["Review","Test"],"run"]],[119,25,122,26,[7,[119,26,121,36,[1,"|>",0,[119,26,120,62,[1,"|>",0,[119,26,119,34,[2,[],"defaults"]],[120,32,120,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[121,32,121,36,[2,[],"rule"]]]]]]]]]]],[123,24,123,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[127,1,221,10,[0,[[0],[1,[127,1,127,24,[[127,1,127,17,"ambiguousRecords"],[127,20,127,24,[1,[127,20,127,24,[[],"Test"]],[]]]]]],[128,1,221,10,[[128,1,128,17,"ambiguousRecords"],[],[129,5,221,10,[0,[[129,5,129,13,[2,[],"describe"]],[129,14,129,33,[5,"ambiguous records"]],[130,9,221,10,[9,[[130,11,140,50,[1,"<|",1,[130,11,130,62,[0,[[130,11,130,15,[2,[],"test"]],[130,16,130,62,[5,"passes ambiguous record that is alphabetical"]]]]],[131,13,140,50,[18,[[[131,14,131,16,[1]]],[132,17,140,50,[1,"|>",0,[132,17,139,55,[1,"|>",0,[132,17,138,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { a = 1, b = 2, c = 3 }\n"]],[139,24,139,55,[0,[[139,24,139,39,[2,["Review","Test"],"run"]],[139,40,139,55,[7,[139,41,139,54,[0,[[139,41,139,45,[2,[],"rule"]],[139,46,139,54,[2,[],"defaults"]]]]]]]]]]]],[140,24,140,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[141,11,161,26,[1,"<|",1,[141,11,141,65,[0,[[141,11,141,15,[2,[],"test"]],[141,16,141,65,[5,"fails ambiguous record that is not alphabetical"]]]]],[142,13,161,26,[18,[[[142,14,142,16,[1]]],[143,17,161,26,[1,"|>",0,[143,17,150,55,[1,"|>",0,[143,17,149,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { b = 2, a = 1, c = 3 }\n"]],[150,24,150,55,[0,[[150,24,150,39,[2,["Review","Test"],"run"]],[150,40,150,55,[7,[150,41,150,54,[0,[[150,41,150,45,[2,[],"rule"]],[150,46,150,54,[2,[],"defaults"]]]]]]]]]]]],[151,24,161,26,[0,[[151,24,151,48,[2,["Review","Test"],"expectErrors"]],[152,25,161,26,[9,[[152,27,160,4,[1,"|>",0,[152,27,153,120,[1,"|>",0,[152,27,152,40,[2,[],"unsortedError"]],[153,32,153,120,[0,[[153,32,153,53,[2,["Review","Test"],"atExactly"]],[153,54,153,120,[8,[[153,56,153,87,[[153,56,153,61,"start"],[153,64,153,87,[8,[[153,66,153,73,[[153,66,153,69,"row"],[153,72,153,73,[3,6]]]],[153,75,153,86,[[153,75,153,81,"column"],[153,84,153,85,[3,5]]]]]]]]],[153,89,153,119,[[153,89,153,92,"end"],[153,95,153,118,[8,[[153,97,153,104,[[153,97,153,100,"row"],[153,103,153,104,[3,6]]]],[153,106,153,117,[[153,106,153,112,"column"],[153,115,153,116,[3,6]]]]]]]]]]]]]]]]],[154,32,160,4,[0,[[154,32,154,53,[2,["Review","Test"],"whenFixed"]],[154,54,160,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { a = 1, b = 2, c = 3 }\n"]]]]]]]]]]]]]]]]]]]],[162,11,176,50,[1,"<|",1,[162,11,162,78,[0,[[162,11,162,15,[2,[],"test"]],[162,16,162,78,[5,"passes ambiguous record that is not alphabetical with option"]]]]],[163,13,176,50,[18,[[[163,14,163,16,[1]]],[164,17,176,50,[1,"|>",0,[164,17,175,26,[1,"|>",0,[164,17,170,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { b = 2, a = 1, c = 3 }\n"]],[171,24,175,26,[0,[[171,24,171,39,[2,["Review","Test"],"run"]],[172,25,175,26,[7,[172,26,174,36,[1,"|>",0,[172,26,173,57,[1,"|>",0,[172,26,172,34,[2,[],"defaults"]],[173,32,173,57,[2,[],"doNotSortAmbiguousRecords"]]]],[174,32,174,36,[2,[],"rule"]]]]]]]]]]],[176,24,176,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[177,11,187,50,[1,"<|",1,[177,11,177,78,[0,[[177,11,177,15,[2,[],"test"]],[177,16,177,78,[5,"passes unambiguous record (because of identical field orders"]]]]],[178,13,187,50,[18,[[[178,14,178,16,[1]]],[179,17,187,50,[1,"|>",0,[179,17,186,55,[1,"|>",0,[179,17,185,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { b : Int, c : Int, a : Int }\n\na = { b = 2, c = 3, a = 1 }\n"]],[186,24,186,55,[0,[[186,24,186,39,[2,["Review","Test"],"run"]],[186,40,186,55,[7,[186,41,186,54,[0,[[186,41,186,45,[2,[],"rule"]],[186,46,186,54,[2,[],"defaults"]]]]]]]]]]]],[187,24,187,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[188,11,202,116,[1,"<|",1,[188,11,188,79,[0,[[188,11,188,15,[2,[],"test"]],[188,16,188,79,[5,"reports ambiguous record that is not alphabetical with option"]]]]],[189,13,202,116,[18,[[[189,14,189,16,[1]]],[190,17,202,116,[1,"|>",0,[190,17,201,26,[1,"|>",0,[190,17,196,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na = { b = 2, a = 1, c = 3 }\n"]],[197,24,201,26,[0,[[197,24,197,39,[2,["Review","Test"],"run"]],[198,25,201,26,[7,[198,26,200,36,[1,"|>",0,[198,26,199,64,[1,"|>",0,[198,26,198,34,[2,[],"defaults"]],[199,32,199,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[200,32,200,36,[2,[],"rule"]]]]]]]]]]],[202,24,202,116,[0,[[202,24,202,48,[2,["Review","Test"],"expectErrors"]],[202,49,202,116,[9,[[202,51,202,114,[0,[[202,51,202,71,[2,[],"ambiguousRecordError"]],[202,72,202,88,[9,[[202,74,202,79,[5,"A.A"]],[202,81,202,86,[5,"A.B"]]]]],[202,89,202,114,[5,"{ b = 2, a = 1, c = 3 }"]]]]]]]]]]]]]]]]]],[203,11,220,50,[1,"<|",1,[203,11,203,88,[0,[[203,11,203,15,[2,[],"test"]],[203,16,203,88,[5,"does not report ambiguous records with a single field even with option"]]]]],[204,13,220,50,[18,[[[204,14,204,16,[1]]],[205,17,220,50,[1,"|>",0,[205,17,219,26,[1,"|>",0,[205,17,214,4,[5,"module A exposing (..)\n\ntype alias A = { b : Int, c : Int, a : Int }\ntype alias B = { c : Int, a : Int, b : Int }\n\na r =\n    case r of\n        { b } ->\n            True\n"]],[215,24,219,26,[0,[[215,24,215,39,[2,["Review","Test"],"run"]],[216,25,219,26,[7,[216,26,218,36,[1,"|>",0,[216,26,217,64,[1,"|>",0,[216,26,216,34,[2,[],"defaults"]],[217,32,217,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[218,32,218,36,[2,[],"rule"]]]]]]]]]]],[220,24,220,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[224,1,345,10,[0,[[0],[1,[224,1,224,17,[[224,1,224,10,"withAlias"],[224,13,224,17,[1,[224,13,224,17,[[],"Test"]],[]]]]]],[225,1,345,10,[[225,1,225,10,"withAlias"],[],[226,5,345,10,[0,[[226,5,226,13,[2,[],"describe"]],[226,14,226,51,[5,"record corresponds to a known alias"]],[227,9,345,10,[9,[[227,11,237,50,[1,"<|",1,[227,11,227,65,[0,[[227,11,227,15,[2,[],"test"]],[227,16,227,65,[5,"fields are in sorted order with type annotation"]]]]],[228,13,237,50,[18,[[[228,14,228,16,[1]]],[229,17,237,50,[1,"|>",0,[229,17,236,55,[1,"|>",0,[229,17,235,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na : A\na = { foo = 1, bar = 2, baz = 3 }\n"]],[236,24,236,55,[0,[[236,24,236,39,[2,["Review","Test"],"run"]],[236,40,236,55,[7,[236,41,236,54,[0,[[236,41,236,45,[2,[],"rule"]],[236,46,236,54,[2,[],"defaults"]]]]]]]]]]]],[237,24,237,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[238,11,247,50,[1,"<|",1,[238,11,238,68,[0,[[238,11,238,15,[2,[],"test"]],[238,16,238,68,[5,"fields are in sorted order without type annotation"]]]]],[239,13,247,50,[18,[[[239,14,239,16,[1]]],[240,17,247,50,[1,"|>",0,[240,17,246,55,[1,"|>",0,[240,17,245,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]],[246,24,246,55,[0,[[246,24,246,39,[2,["Review","Test"],"run"]],[246,40,246,55,[7,[246,41,246,54,[0,[[246,41,246,45,[2,[],"rule"]],[246,46,246,54,[2,[],"defaults"]]]]]]]]]]]],[247,24,247,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[248,11,259,50,[1,"<|",1,[248,11,248,66,[0,[[248,11,248,15,[2,[],"test"]],[248,16,248,66,[5,"fields are in order to multiple matching aliases"]]]]],[249,13,259,50,[18,[[[249,14,249,16,[1]]],[250,17,259,50,[1,"|>",0,[250,17,258,55,[1,"|>",0,[250,17,257,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]],[258,24,258,55,[0,[[258,24,258,39,[2,["Review","Test"],"run"]],[258,40,258,55,[7,[258,41,258,54,[0,[[258,41,258,45,[2,[],"rule"]],[258,46,258,54,[2,[],"defaults"]]]]]]]]]]]],[259,24,259,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[260,11,281,26,[1,"<|",1,[260,11,260,69,[0,[[260,11,260,15,[2,[],"test"]],[260,16,260,69,[5,"fields are not in sorted order with type annotation"]]]]],[261,13,281,26,[18,[[[261,14,261,16,[1]]],[262,17,281,26,[1,"|>",0,[262,17,269,55,[1,"|>",0,[262,17,268,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na : A\na = { bar = 2, foo = 1, baz = 3 }\n"]],[269,24,269,55,[0,[[269,24,269,39,[2,["Review","Test"],"run"]],[269,40,269,55,[7,[269,41,269,54,[0,[[269,41,269,45,[2,[],"rule"]],[269,46,269,54,[2,[],"defaults"]]]]]]]]]]]],[270,24,281,26,[0,[[270,24,270,48,[2,["Review","Test"],"expectErrors"]],[271,25,281,26,[9,[[271,27,280,4,[1,"|>",0,[271,27,272,120,[1,"|>",0,[271,27,271,40,[2,[],"unsortedError"]],[272,32,272,120,[0,[[272,32,272,53,[2,["Review","Test"],"atExactly"]],[272,54,272,120,[8,[[272,56,272,87,[[272,56,272,61,"start"],[272,64,272,87,[8,[[272,66,272,73,[[272,66,272,69,"row"],[272,72,272,73,[3,6]]]],[272,75,272,86,[[272,75,272,81,"column"],[272,84,272,85,[3,5]]]]]]]]],[272,89,272,119,[[272,89,272,92,"end"],[272,95,272,118,[8,[[272,97,272,104,[[272,97,272,100,"row"],[272,103,272,104,[3,6]]]],[272,106,272,117,[[272,106,272,112,"column"],[272,115,272,116,[3,6]]]]]]]]]]]]]]]]],[273,32,280,4,[0,[[273,32,273,53,[2,["Review","Test"],"whenFixed"]],[274,33,280,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na : A\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[282,11,300,26,[1,"<|",1,[282,11,282,72,[0,[[282,11,282,15,[2,[],"test"]],[282,16,282,72,[5,"fields are not in sorted order without type annotation"]]]]],[283,13,300,26,[18,[[[283,14,283,16,[1]]],[284,17,300,26,[1,"|>",0,[284,17,290,55,[1,"|>",0,[284,17,289,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[290,24,290,55,[0,[[290,24,290,39,[2,["Review","Test"],"run"]],[290,40,290,55,[7,[290,41,290,54,[0,[[290,41,290,45,[2,[],"rule"]],[290,46,290,54,[2,[],"defaults"]]]]]]]]]]]],[291,24,300,26,[0,[[291,24,291,48,[2,["Review","Test"],"expectErrors"]],[292,25,300,26,[9,[[292,27,299,4,[1,"|>",0,[292,27,293,120,[1,"|>",0,[292,27,292,40,[2,[],"unsortedError"]],[293,32,293,120,[0,[[293,32,293,53,[2,["Review","Test"],"atExactly"]],[293,54,293,120,[8,[[293,56,293,87,[[293,56,293,61,"start"],[293,64,293,87,[8,[[293,66,293,73,[[293,66,293,69,"row"],[293,72,293,73,[3,5]]]],[293,75,293,86,[[293,75,293,81,"column"],[293,84,293,85,[3,5]]]]]]]]],[293,89,293,119,[[293,89,293,92,"end"],[293,95,293,118,[8,[[293,97,293,104,[[293,97,293,100,"row"],[293,103,293,104,[3,5]]]],[293,106,293,117,[[293,106,293,112,"column"],[293,115,293,116,[3,6]]]]]]]]]]]]]]]]],[294,32,299,4,[0,[[294,32,294,53,[2,["Review","Test"],"whenFixed"]],[294,54,299,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[301,11,323,26,[1,"<|",1,[301,11,301,93,[0,[[301,11,301,15,[2,[],"test"]],[301,16,301,93,[5,"fields are not in order to multiple matching aliases with degenerate orders"]]]]],[302,13,323,26,[18,[[[302,14,302,16,[1]]],[303,17,323,26,[1,"|>",0,[303,17,311,55,[1,"|>",0,[303,17,310,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { foo : Int, bar : Int, baz : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[311,24,311,55,[0,[[311,24,311,39,[2,["Review","Test"],"run"]],[311,40,311,55,[7,[311,41,311,54,[0,[[311,41,311,45,[2,[],"rule"]],[311,46,311,54,[2,[],"defaults"]]]]]]]]]]]],[312,24,323,26,[0,[[312,24,312,48,[2,["Review","Test"],"expectErrors"]],[313,25,323,26,[9,[[313,27,322,4,[1,"|>",0,[313,27,314,120,[1,"|>",0,[313,27,313,40,[2,[],"unsortedError"]],[314,32,314,120,[0,[[314,32,314,53,[2,["Review","Test"],"atExactly"]],[314,54,314,120,[8,[[314,56,314,87,[[314,56,314,61,"start"],[314,64,314,87,[8,[[314,66,314,73,[[314,66,314,69,"row"],[314,72,314,73,[3,7]]]],[314,75,314,86,[[314,75,314,81,"column"],[314,84,314,85,[3,5]]]]]]]]],[314,89,314,119,[[314,89,314,92,"end"],[314,95,314,118,[8,[[314,97,314,104,[[314,97,314,100,"row"],[314,103,314,104,[3,7]]]],[314,106,314,117,[[314,106,314,112,"column"],[314,115,314,116,[3,6]]]]]]]]]]]]]]]]],[315,32,322,4,[0,[[315,32,315,53,[2,["Review","Test"],"whenFixed"]],[315,54,322,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[324,11,344,50,[1,"<|",1,[324,11,324,49,[0,[[324,11,324,15,[2,[],"test"]],[324,16,324,49,[5,"does not keep unexposed aliases"]]]]],[325,13,344,50,[18,[[[325,14,325,16,[1]]],[326,17,344,50,[1,"|>",0,[326,17,343,64,[1,"|>",0,[326,17,342,18,[9,[[326,19,332,4,[5,"module B exposing (foo)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[333,19,341,4,[5,"module A exposing (..)\n\nimport B\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = { bar = 2, foo = 1, baz = 3 }\n"]]]]],[343,24,343,64,[0,[[343,24,343,48,[2,["Review","Test"],"runOnModules"]],[343,49,343,64,[7,[343,50,343,63,[0,[[343,50,343,54,[2,[],"rule"]],[343,55,343,63,[2,[],"defaults"]]]]]]]]]]]],[344,24,344,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[348,1,387,10,[0,[[0],[1,[348,1,348,21,[[348,1,348,14,"inExpressions"],[348,17,348,21,[1,[348,17,348,21,[[],"Test"]],[]]]]]],[349,1,387,10,[[349,1,349,14,"inExpressions"],[],[350,5,387,10,[0,[[350,5,350,13,[2,[],"describe"]],[350,14,350,38,[5,"expressions are sorted"]],[351,9,387,10,[9,[[351,11,364,26,[1,"<|",1,[351,11,351,35,[0,[[351,11,351,15,[2,[],"test"]],[351,16,351,35,[5,"sorts expressions"]]]]],[352,13,364,26,[18,[[[352,14,352,16,[1]]],[353,17,364,26,[1,"|>",0,[353,17,357,55,[1,"|>",0,[353,17,356,4,[5,"module A exposing (..)\n\na = { b = 1, c = 2, a = 3 }\n"]],[357,24,357,55,[0,[[357,24,357,39,[2,["Review","Test"],"run"]],[357,40,357,55,[7,[357,41,357,54,[0,[[357,41,357,45,[2,[],"rule"]],[357,46,357,54,[2,[],"defaults"]]]]]]]]]]]],[358,24,364,26,[0,[[358,24,358,48,[2,["Review","Test"],"expectErrors"]],[359,25,364,26,[9,[[359,27,363,4,[1,"|>",0,[359,27,359,40,[2,[],"unsortedError"]],[360,32,363,4,[0,[[360,32,360,53,[2,["Review","Test"],"whenFixed"]],[360,54,363,4,[5,"module A exposing (..)\n\na = { a = 3 , b = 1, c = 2}\n"]]]]]]]]]]]]]]]]]]]],[365,11,386,26,[1,"<|",1,[365,11,365,45,[0,[[365,11,365,15,[2,[],"test"]],[365,16,365,45,[5,"sorts multiline expressions"]]]]],[366,13,386,26,[18,[[[366,14,366,16,[1]]],[367,17,386,26,[1,"|>",0,[367,17,375,55,[1,"|>",0,[367,17,374,4,[5,"module A exposing (..)\n\na =\n    { b = 1\n    , c = 2\n    , a = 3\n    }\n"]],[375,24,375,55,[0,[[375,24,375,39,[2,["Review","Test"],"run"]],[375,40,375,55,[7,[375,41,375,54,[0,[[375,41,375,45,[2,[],"rule"]],[375,46,375,54,[2,[],"defaults"]]]]]]]]]]]],[376,24,386,26,[0,[[376,24,376,48,[2,["Review","Test"],"expectErrors"]],[377,25,386,26,[9,[[377,27,385,4,[1,"|>",0,[377,27,377,40,[2,[],"unsortedError"]],[378,32,385,4,[0,[[378,32,378,53,[2,["Review","Test"],"whenFixed"]],[378,54,385,4,[5,"module A exposing (..)\n\na =\n    { a = 3\n    \n    , b = 1, c = 2\n    }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[390,1,437,10,[0,[[0],[1,[390,1,390,25,[[390,1,390,18,"inTypeAnnotations"],[390,21,390,25,[1,[390,21,390,25,[[],"Test"]],[]]]]]],[391,1,437,10,[[391,1,391,18,"inTypeAnnotations"],[],[392,5,437,10,[0,[[392,5,392,13,[2,[],"describe"]],[392,14,392,83,[5,"type annotations are sorted (when not custom types or type aliases)"]],[393,9,437,10,[9,[[393,11,408,26,[1,"<|",1,[393,11,393,40,[0,[[393,11,393,15,[2,[],"test"]],[393,16,393,40,[5,"sorts type annotations"]]]]],[394,13,408,26,[18,[[[394,14,394,16,[1]]],[395,17,408,26,[1,"|>",0,[395,17,400,55,[1,"|>",0,[395,17,399,4,[5,"module A exposing (..)\n\na : { b : Int, c : Int, a : Int } -> Bool\na _ = True\n"]],[400,24,400,55,[0,[[400,24,400,39,[2,["Review","Test"],"run"]],[400,40,400,55,[7,[400,41,400,54,[0,[[400,41,400,45,[2,[],"rule"]],[400,46,400,54,[2,[],"defaults"]]]]]]]]]]]],[401,24,408,26,[0,[[401,24,401,48,[2,["Review","Test"],"expectErrors"]],[402,25,408,26,[9,[[402,27,407,4,[1,"|>",0,[402,27,402,40,[2,[],"unsortedError"]],[403,32,407,4,[0,[[403,32,403,53,[2,["Review","Test"],"whenFixed"]],[403,54,407,4,[5,"module A exposing (..)\n\na : { a : Int , b : Int, c : Int} -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[409,11,436,26,[1,"<|",1,[409,11,409,50,[0,[[409,11,409,15,[2,[],"test"]],[409,16,409,50,[5,"sorts multiline type annotations"]]]]],[410,13,436,26,[18,[[[410,14,410,16,[1]]],[411,17,436,26,[1,"|>",0,[411,17,422,55,[1,"|>",0,[411,17,421,4,[5,"module A exposing (..)\n\na :\n    { b : Int\n    , c : Int\n    , a : Int\n    }\n    -> Bool\na _ =\n    True\n"]],[422,24,422,55,[0,[[422,24,422,39,[2,["Review","Test"],"run"]],[422,40,422,55,[7,[422,41,422,54,[0,[[422,41,422,45,[2,[],"rule"]],[422,46,422,54,[2,[],"defaults"]]]]]]]]]]]],[423,24,436,26,[0,[[423,24,423,48,[2,["Review","Test"],"expectErrors"]],[424,25,436,26,[9,[[424,27,435,4,[1,"|>",0,[424,27,424,40,[2,[],"unsortedError"]],[425,32,435,4,[0,[[425,32,425,53,[2,["Review","Test"],"whenFixed"]],[425,54,435,4,[5,"module A exposing (..)\n\na :\n    { a : Int\n    \n    , b : Int, c : Int\n    }\n    -> Bool\na _ =\n    True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[440,1,457,10,[0,[[0],[1,[440,1,440,18,[[440,1,440,11,"inPatterns"],[440,14,440,18,[1,[440,14,440,18,[[],"Test"]],[]]]]]],[441,1,457,10,[[441,1,441,11,"inPatterns"],[],[442,5,457,10,[0,[[442,5,442,13,[2,[],"describe"]],[442,14,442,35,[5,"patterns are sorted"]],[443,9,457,10,[9,[[443,11,456,26,[1,"<|",1,[443,11,443,32,[0,[[443,11,443,15,[2,[],"test"]],[443,16,443,32,[5,"sorts patterns"]]]]],[444,13,456,26,[18,[[[444,14,444,16,[1]]],[445,17,456,26,[1,"|>",0,[445,17,449,55,[1,"|>",0,[445,17,448,4,[5,"module A exposing (..)\n\na { foo, baz, bar } = True\n"]],[449,24,449,55,[0,[[449,24,449,39,[2,["Review","Test"],"run"]],[449,40,449,55,[7,[449,41,449,54,[0,[[449,41,449,45,[2,[],"rule"]],[449,46,449,54,[2,[],"defaults"]]]]]]]]]]]],[450,24,456,26,[0,[[450,24,450,48,[2,["Review","Test"],"expectErrors"]],[451,25,456,26,[9,[[451,27,455,4,[1,"|>",0,[451,27,451,40,[2,[],"unsortedError"]],[452,32,455,4,[0,[[452,32,452,53,[2,["Review","Test"],"whenFixed"]],[452,54,455,4,[5,"module A exposing (..)\n\na { bar, baz, foo } = True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[460,1,504,10,[0,[[0],[1,[460,1,460,21,[[460,1,460,14,"avoidBadFixes"],[460,17,460,21,[1,[460,17,460,21,[[],"Test"]],[]]]]]],[461,1,504,10,[[461,1,461,14,"avoidBadFixes"],[],[462,5,504,10,[0,[[462,5,462,13,[2,[],"describe"]],[462,14,462,32,[5,"avoids bad fixes"]],[463,9,504,10,[9,[[463,11,503,26,[1,"<|",1,[463,11,463,57,[0,[[463,11,463,15,[2,[],"test"]],[463,16,463,57,[5,"do not splice onto the ends of comments"]]]]],[464,13,503,26,[18,[[[464,14,464,16,[1]]],[465,17,503,26,[1,"|>",0,[465,17,482,55,[1,"|>",0,[465,17,481,4,[5,"module A exposing (..)\n\ntype alias Rec =\n    { foo : Int\n    , bar : Int\n    , baz : Int\n    }\n\ntest : Rec -> Rec\ntest r =\n    { r\n        | bar = 1\n        -- comment\n        , foo = 2\n        , baz = 3\n    }\n"]],[482,24,482,55,[0,[[482,24,482,39,[2,["Review","Test"],"run"]],[482,40,482,55,[7,[482,41,482,54,[0,[[482,41,482,45,[2,[],"rule"]],[482,46,482,54,[2,[],"defaults"]]]]]]]]]]]],[483,24,503,26,[0,[[483,24,483,48,[2,["Review","Test"],"expectErrors"]],[484,25,503,26,[9,[[484,27,502,4,[1,"|>",0,[484,27,485,122,[1,"|>",0,[484,27,484,40,[2,[],"unsortedError"]],[485,32,485,122,[0,[[485,32,485,53,[2,["Review","Test"],"atExactly"]],[485,54,485,122,[8,[[485,56,485,88,[[485,56,485,61,"start"],[485,64,485,88,[8,[[485,66,485,74,[[485,66,485,69,"row"],[485,72,485,74,[3,11]]]],[485,76,485,87,[[485,76,485,82,"column"],[485,85,485,86,[3,5]]]]]]]]],[485,90,485,121,[[485,90,485,93,"end"],[485,96,485,120,[8,[[485,98,485,106,[[485,98,485,101,"row"],[485,104,485,106,[3,11]]]],[485,108,485,119,[[485,108,485,114,"column"],[485,117,485,118,[3,6]]]]]]]]]]]]]]]]],[486,32,502,4,[0,[[486,32,486,53,[2,["Review","Test"],"whenFixed"]],[486,54,502,4,[5,"module A exposing (..)\n\ntype alias Rec =\n    { foo : Int\n    , bar : Int\n    , baz : Int\n    }\n\ntest : Rec -> Rec\ntest r =\n    { r\n        | foo = 2\n        , bar = 1\n        -- comment\n        , baz = 3\n    }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[507,1,699,10,[0,[[0],[1,[507,1,507,35,[[507,1,507,28,"disambiguatesByHasAllFields"],[507,31,507,35,[1,[507,31,507,35,[[],"Test"]],[]]]]]],[508,1,699,10,[[508,1,508,28,"disambiguatesByHasAllFields"],[],[509,5,699,10,[0,[[509,5,509,13,[2,[],"describe"]],[509,14,509,67,[5,"disambiguates by whether all fields must be present"]],[510,9,699,10,[9,[[510,11,521,50,[1,"<|",1,[510,11,510,24,[0,[[510,11,510,15,[2,[],"test"]],[510,16,510,24,[5,"passes"]]]]],[511,13,521,50,[18,[[[511,14,511,16,[1]]],[512,17,521,50,[1,"|>",0,[512,17,520,55,[1,"|>",0,[512,17,519,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int, extra : Int }\n\na = { foo = 1, bar = 2, baz = 3}\n"]],[520,24,520,55,[0,[[520,24,520,39,[2,["Review","Test"],"run"]],[520,40,520,55,[7,[520,41,520,54,[0,[[520,41,520,45,[2,[],"rule"]],[520,46,520,54,[2,[],"defaults"]]]]]]]]]]]],[521,24,521,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[522,11,544,26,[1,"<|",1,[522,11,522,23,[0,[[522,11,522,15,[2,[],"test"]],[522,16,522,23,[5,"fails"]]]]],[523,13,544,26,[18,[[[523,14,523,16,[1]]],[524,17,544,26,[1,"|>",0,[524,17,532,55,[1,"|>",0,[524,17,531,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int, extra : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[532,24,532,55,[0,[[532,24,532,39,[2,["Review","Test"],"run"]],[532,40,532,55,[7,[532,41,532,54,[0,[[532,41,532,45,[2,[],"rule"]],[532,46,532,54,[2,[],"defaults"]]]]]]]]]]]],[533,24,544,26,[0,[[533,24,533,48,[2,["Review","Test"],"expectErrors"]],[534,25,544,26,[9,[[534,27,543,4,[1,"|>",0,[534,27,535,120,[1,"|>",0,[534,27,534,40,[2,[],"unsortedError"]],[535,32,535,120,[0,[[535,32,535,53,[2,["Review","Test"],"atExactly"]],[535,54,535,120,[8,[[535,56,535,87,[[535,56,535,61,"start"],[535,64,535,87,[8,[[535,66,535,73,[[535,66,535,69,"row"],[535,72,535,73,[3,7]]]],[535,75,535,86,[[535,75,535,81,"column"],[535,84,535,85,[3,5]]]]]]]]],[535,89,535,119,[[535,89,535,92,"end"],[535,95,535,118,[8,[[535,97,535,104,[[535,97,535,100,"row"],[535,103,535,104,[3,7]]]],[535,106,535,117,[[535,106,535,112,"column"],[535,115,535,116,[3,6]]]]]]]]]]]]]]]]],[536,32,543,4,[0,[[536,32,536,53,[2,["Review","Test"],"whenFixed"]],[536,54,543,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int, extra : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[545,11,567,26,[1,"<|",1,[545,11,545,68,[0,[[545,11,545,15,[2,[],"test"]],[545,16,545,68,[5,"does not match any when all fields must be present"]]]]],[546,13,567,26,[18,[[[546,14,546,16,[1]]],[547,17,567,26,[1,"|>",0,[547,17,555,55,[1,"|>",0,[547,17,554,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na = { baz = 3, bar = 2 }\n"]],[555,24,555,55,[0,[[555,24,555,39,[2,["Review","Test"],"run"]],[555,40,555,55,[7,[555,41,555,54,[0,[[555,41,555,45,[2,[],"rule"]],[555,46,555,54,[2,[],"defaults"]]]]]]]]]]]],[556,24,567,26,[0,[[556,24,556,48,[2,["Review","Test"],"expectErrors"]],[557,25,567,26,[9,[[557,27,566,4,[1,"|>",0,[557,27,558,120,[1,"|>",0,[557,27,557,40,[2,[],"unsortedError"]],[558,32,558,120,[0,[[558,32,558,53,[2,["Review","Test"],"atExactly"]],[558,54,558,120,[8,[[558,56,558,87,[[558,56,558,61,"start"],[558,64,558,87,[8,[[558,66,558,73,[[558,66,558,69,"row"],[558,72,558,73,[3,7]]]],[558,75,558,86,[[558,75,558,81,"column"],[558,84,558,85,[3,5]]]]]]]]],[558,89,558,119,[[558,89,558,92,"end"],[558,95,558,118,[8,[[558,97,558,104,[[558,97,558,100,"row"],[558,103,558,104,[3,7]]]],[558,106,558,117,[[558,106,558,112,"column"],[558,115,558,116,[3,6]]]]]]]]]]]]]]]]],[559,32,566,4,[0,[[559,32,559,53,[2,["Review","Test"],"whenFixed"]],[559,54,566,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na = { bar = 2 , baz = 3}\n"]]]]]]]]]]]]]]]]]]]],[568,11,590,26,[1,"<|",1,[568,11,568,50,[0,[[568,11,568,15,[2,[],"test"]],[568,16,568,50,[5,"is ambiguous with record updates"]]]]],[569,13,590,26,[18,[[[569,14,569,16,[1]]],[570,17,590,26,[1,"|>",0,[570,17,578,55,[1,"|>",0,[570,17,577,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na r = { r | baz = 3, bar = 2, foo = 1 }\n"]],[578,24,578,55,[0,[[578,24,578,39,[2,["Review","Test"],"run"]],[578,40,578,55,[7,[578,41,578,54,[0,[[578,41,578,45,[2,[],"rule"]],[578,46,578,54,[2,[],"defaults"]]]]]]]]]]]],[579,24,590,26,[0,[[579,24,579,48,[2,["Review","Test"],"expectErrors"]],[580,25,590,26,[9,[[580,27,589,4,[1,"|>",0,[580,27,581,120,[1,"|>",0,[580,27,580,40,[2,[],"unsortedError"]],[581,32,581,120,[0,[[581,32,581,53,[2,["Review","Test"],"atExactly"]],[581,54,581,120,[8,[[581,56,581,87,[[581,56,581,61,"start"],[581,64,581,87,[8,[[581,66,581,73,[[581,66,581,69,"row"],[581,72,581,73,[3,7]]]],[581,75,581,86,[[581,75,581,81,"column"],[581,84,581,85,[3,7]]]]]]]]],[581,89,581,119,[[581,89,581,92,"end"],[581,95,581,118,[8,[[581,97,581,104,[[581,97,581,100,"row"],[581,103,581,104,[3,7]]]],[581,106,581,117,[[581,106,581,112,"column"],[581,115,581,116,[3,8]]]]]]]]]]]]]]]]],[582,32,589,4,[0,[[582,32,582,53,[2,["Review","Test"],"whenFixed"]],[582,54,589,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na r = { r | bar = 2, baz = 3, foo = 1 }\n"]]]]]]]]]]]]]]]]]]]],[591,11,606,50,[1,"<|",1,[591,11,591,62,[0,[[591,11,591,15,[2,[],"test"]],[591,16,591,62,[5,"is ambiguous with record updates not sorting"]]]]],[592,13,606,50,[18,[[[592,14,592,16,[1]]],[593,17,606,50,[1,"|>",0,[593,17,605,26,[1,"|>",0,[593,17,600,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na r = { r | baz = 3, bar = 2, foo = 1 }\n"]],[601,24,605,26,[0,[[601,24,601,39,[2,["Review","Test"],"run"]],[602,25,605,26,[7,[602,26,604,36,[1,"|>",0,[602,26,603,57,[1,"|>",0,[602,26,602,34,[2,[],"defaults"]],[603,32,603,57,[2,[],"doNotSortAmbiguousRecords"]]]],[604,32,604,36,[2,[],"rule"]]]]]]]]]]],[606,24,606,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[607,11,631,26,[1,"<|",1,[607,11,607,75,[0,[[607,11,607,15,[2,[],"test"]],[607,16,607,75,[5,"patterns do not match any when all fields must be present"]]]]],[608,13,631,26,[18,[[[608,14,608,16,[1]]],[609,17,631,26,[1,"|>",0,[609,17,618,55,[1,"|>",0,[609,17,617,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { baz : Int, bar : Int } -> Bool\na _ = True\n"]],[618,24,618,55,[0,[[618,24,618,39,[2,["Review","Test"],"run"]],[618,40,618,55,[7,[618,41,618,54,[0,[[618,41,618,45,[2,[],"rule"]],[618,46,618,54,[2,[],"defaults"]]]]]]]]]]]],[619,24,631,26,[0,[[619,24,619,48,[2,["Review","Test"],"expectErrors"]],[620,25,631,26,[9,[[620,27,630,4,[1,"|>",0,[620,27,621,120,[1,"|>",0,[620,27,620,40,[2,[],"unsortedError"]],[621,32,621,120,[0,[[621,32,621,53,[2,["Review","Test"],"atExactly"]],[621,54,621,120,[8,[[621,56,621,87,[[621,56,621,61,"start"],[621,64,621,87,[8,[[621,66,621,73,[[621,66,621,69,"row"],[621,72,621,73,[3,7]]]],[621,75,621,86,[[621,75,621,81,"column"],[621,84,621,85,[3,5]]]]]]]]],[621,89,621,119,[[621,89,621,92,"end"],[621,95,621,118,[8,[[621,97,621,104,[[621,97,621,100,"row"],[621,103,621,104,[3,7]]]],[621,106,621,117,[[621,106,621,112,"column"],[621,115,621,116,[3,6]]]]]]]]]]]]]]]]],[622,32,630,4,[0,[[622,32,622,53,[2,["Review","Test"],"whenFixed"]],[622,54,630,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { bar : Int , baz : Int} -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[632,11,656,26,[1,"<|",1,[632,11,632,64,[0,[[632,11,632,15,[2,[],"test"]],[632,16,632,64,[5,"patterns match when all fields must be present"]]]]],[633,13,656,26,[18,[[[633,14,633,16,[1]]],[634,17,656,26,[1,"|>",0,[634,17,643,55,[1,"|>",0,[634,17,642,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { bar : Int, foo : Int, baz : Int } -> Bool\na _ = True\n"]],[643,24,643,55,[0,[[643,24,643,39,[2,["Review","Test"],"run"]],[643,40,643,55,[7,[643,41,643,54,[0,[[643,41,643,45,[2,[],"rule"]],[643,46,643,54,[2,[],"defaults"]]]]]]]]]]]],[644,24,656,26,[0,[[644,24,644,48,[2,["Review","Test"],"expectErrors"]],[645,25,656,26,[9,[[645,27,655,4,[1,"|>",0,[645,27,646,120,[1,"|>",0,[645,27,645,40,[2,[],"unsortedError"]],[646,32,646,120,[0,[[646,32,646,53,[2,["Review","Test"],"atExactly"]],[646,54,646,120,[8,[[646,56,646,87,[[646,56,646,61,"start"],[646,64,646,87,[8,[[646,66,646,73,[[646,66,646,69,"row"],[646,72,646,73,[3,7]]]],[646,75,646,86,[[646,75,646,81,"column"],[646,84,646,85,[3,5]]]]]]]]],[646,89,646,119,[[646,89,646,92,"end"],[646,95,646,118,[8,[[646,97,646,104,[[646,97,646,100,"row"],[646,103,646,104,[3,7]]]],[646,106,646,117,[[646,106,646,112,"column"],[646,115,646,116,[3,6]]]]]]]]]]]]]]]]],[647,32,655,4,[0,[[647,32,647,53,[2,["Review","Test"],"whenFixed"]],[647,54,655,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { foo : Int, baz : Int , bar : Int} -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[657,11,681,26,[1,"<|",1,[657,11,657,51,[0,[[657,11,657,15,[2,[],"test"]],[657,16,657,51,[5,"is ambiguous with generic records"]]]]],[658,13,681,26,[18,[[[658,14,658,16,[1]]],[659,17,681,26,[1,"|>",0,[659,17,668,55,[1,"|>",0,[659,17,667,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { r | baz : Int, bar : Int, foo : Int } -> Bool\na _ = True\n"]],[668,24,668,55,[0,[[668,24,668,39,[2,["Review","Test"],"run"]],[668,40,668,55,[7,[668,41,668,54,[0,[[668,41,668,45,[2,[],"rule"]],[668,46,668,54,[2,[],"defaults"]]]]]]]]]]]],[669,24,681,26,[0,[[669,24,669,48,[2,["Review","Test"],"expectErrors"]],[670,25,681,26,[9,[[670,27,680,4,[1,"|>",0,[670,27,671,120,[1,"|>",0,[670,27,670,40,[2,[],"unsortedError"]],[671,32,671,120,[0,[[671,32,671,53,[2,["Review","Test"],"atExactly"]],[671,54,671,120,[8,[[671,56,671,87,[[671,56,671,61,"start"],[671,64,671,87,[8,[[671,66,671,73,[[671,66,671,69,"row"],[671,72,671,73,[3,7]]]],[671,75,671,86,[[671,75,671,81,"column"],[671,84,671,85,[3,5]]]]]]]]],[671,89,671,119,[[671,89,671,92,"end"],[671,95,671,118,[8,[[671,97,671,104,[[671,97,671,100,"row"],[671,103,671,104,[3,7]]]],[671,106,671,117,[[671,106,671,112,"column"],[671,115,671,116,[3,6]]]]]]]]]]]]]]]]],[672,32,680,4,[0,[[672,32,672,53,[2,["Review","Test"],"whenFixed"]],[672,54,680,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { r | bar : Int, baz : Int, foo : Int } -> Bool\na _ = True\n"]]]]]]]]]]]]]]]]]]]],[682,11,698,50,[1,"<|",1,[682,11,682,63,[0,[[682,11,682,15,[2,[],"test"]],[682,16,682,63,[5,"is ambiguous with generic records not sorting"]]]]],[683,13,698,50,[18,[[[683,14,683,16,[1]]],[684,17,698,50,[1,"|>",0,[684,17,697,26,[1,"|>",0,[684,17,692,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, baz : Int, bar : Int }\n\ntype alias B = { baz : Int, bar : Int, foo : Int, extra : Int }\n\na : { r | baz : Int, bar : Int, foo : Int } -> Bool\na _ = True\n"]],[693,24,697,26,[0,[[693,24,693,39,[2,["Review","Test"],"run"]],[694,25,697,26,[7,[694,26,696,36,[1,"|>",0,[694,26,695,57,[1,"|>",0,[694,26,694,34,[2,[],"defaults"]],[695,32,695,57,[2,[],"doNotSortAmbiguousRecords"]]]],[696,32,696,36,[2,[],"rule"]]]]]]]]]]],[698,24,698,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[702,1,805,10,[0,[[0],[1,[702,1,702,37,[[702,1,702,30,"disambiguatesByTypeAnnotation"],[702,33,702,37,[1,[702,33,702,37,[[],"Test"]],[]]]]]],[703,1,805,10,[[703,1,703,30,"disambiguatesByTypeAnnotation"],[],[704,5,805,10,[0,[[704,5,704,13,[2,[],"describe"]],[704,14,704,51,[5,"disambiguates using type annotation"]],[705,9,805,10,[9,[[705,11,729,26,[1,"<|",1,[705,11,705,71,[0,[[705,11,705,15,[2,[],"test"]],[705,16,705,71,[5,"disambiguation is possible because of type annotation"]]]]],[706,13,729,26,[18,[[[706,14,706,16,[1]]],[707,17,729,26,[1,"|>",0,[707,17,716,55,[1,"|>",0,[707,17,715,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : A\na = { bar = 2, foo = 1, baz = 3 }\n"]],[716,24,716,55,[0,[[716,24,716,39,[2,["Review","Test"],"run"]],[716,40,716,55,[7,[716,41,716,54,[0,[[716,41,716,45,[2,[],"rule"]],[716,46,716,54,[2,[],"defaults"]]]]]]]]]]]],[717,24,729,26,[0,[[717,24,717,48,[2,["Review","Test"],"expectErrors"]],[718,25,729,26,[9,[[718,27,728,4,[1,"|>",0,[718,27,719,120,[1,"|>",0,[718,27,718,40,[2,[],"unsortedError"]],[719,32,719,120,[0,[[719,32,719,53,[2,["Review","Test"],"atExactly"]],[719,54,719,120,[8,[[719,56,719,87,[[719,56,719,61,"start"],[719,64,719,87,[8,[[719,66,719,73,[[719,66,719,69,"row"],[719,72,719,73,[3,8]]]],[719,75,719,86,[[719,75,719,81,"column"],[719,84,719,85,[3,5]]]]]]]]],[719,89,719,119,[[719,89,719,92,"end"],[719,95,719,118,[8,[[719,97,719,104,[[719,97,719,100,"row"],[719,103,719,104,[3,8]]]],[719,106,719,117,[[719,106,719,112,"column"],[719,115,719,116,[3,6]]]]]]]]]]]]]]]]],[720,32,728,4,[0,[[720,32,720,53,[2,["Review","Test"],"whenFixed"]],[720,54,728,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : A\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[730,11,754,26,[1,"<|",1,[730,11,730,86,[0,[[730,11,730,15,[2,[],"test"]],[730,16,730,86,[5,"disambiguation is possible because of type annotation with type vars"]]]]],[731,13,754,26,[18,[[[731,14,731,16,[1]]],[732,17,754,26,[1,"|>",0,[732,17,741,55,[1,"|>",0,[732,17,740,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\n\ntype alias B a = { bar : Int, foo : a, baz : Int }\n\na : A Int\na = { bar = 2, foo = 1, baz = 3 }\n"]],[741,24,741,55,[0,[[741,24,741,39,[2,["Review","Test"],"run"]],[741,40,741,55,[7,[741,41,741,54,[0,[[741,41,741,45,[2,[],"rule"]],[741,46,741,54,[2,[],"defaults"]]]]]]]]]]]],[742,24,754,26,[0,[[742,24,742,48,[2,["Review","Test"],"expectErrors"]],[743,25,754,26,[9,[[743,27,753,4,[1,"|>",0,[743,27,744,120,[1,"|>",0,[743,27,743,40,[2,[],"unsortedError"]],[744,32,744,120,[0,[[744,32,744,53,[2,["Review","Test"],"atExactly"]],[744,54,744,120,[8,[[744,56,744,87,[[744,56,744,61,"start"],[744,64,744,87,[8,[[744,66,744,73,[[744,66,744,69,"row"],[744,72,744,73,[3,8]]]],[744,75,744,86,[[744,75,744,81,"column"],[744,84,744,85,[3,5]]]]]]]]],[744,89,744,119,[[744,89,744,92,"end"],[744,95,744,118,[8,[[744,97,744,104,[[744,97,744,100,"row"],[744,103,744,104,[3,8]]]],[744,106,744,117,[[744,106,744,112,"column"],[744,115,744,116,[3,6]]]]]]]]]]]]]]]]],[745,32,753,4,[0,[[745,32,745,53,[2,["Review","Test"],"whenFixed"]],[745,54,753,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\n\ntype alias B a = { bar : Int, foo : a, baz : Int }\n\na : A Int\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[755,11,779,26,[1,"<|",1,[755,11,755,79,[0,[[755,11,755,15,[2,[],"test"]],[755,16,755,79,[5,"disambiguation is possible because of complex type annotation"]]]]],[756,13,779,26,[18,[[[756,14,756,16,[1]]],[757,17,779,26,[1,"|>",0,[757,17,766,55,[1,"|>",0,[757,17,765,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> String -> ( Int, String, List A )\na i s = ( i, s, [ { bar = 2, foo = 1, baz = 3 } ] )\n"]],[766,24,766,55,[0,[[766,24,766,39,[2,["Review","Test"],"run"]],[766,40,766,55,[7,[766,41,766,54,[0,[[766,41,766,45,[2,[],"rule"]],[766,46,766,54,[2,[],"defaults"]]]]]]]]]]]],[767,24,779,26,[0,[[767,24,767,48,[2,["Review","Test"],"expectErrors"]],[768,25,779,26,[9,[[768,27,778,4,[1,"|>",0,[768,27,769,122,[1,"|>",0,[768,27,768,40,[2,[],"unsortedError"]],[769,32,769,122,[0,[[769,32,769,53,[2,["Review","Test"],"atExactly"]],[769,54,769,122,[8,[[769,56,769,88,[[769,56,769,61,"start"],[769,64,769,88,[8,[[769,66,769,73,[[769,66,769,69,"row"],[769,72,769,73,[3,8]]]],[769,75,769,87,[[769,75,769,81,"column"],[769,84,769,86,[3,19]]]]]]]]],[769,90,769,121,[[769,90,769,93,"end"],[769,96,769,120,[8,[[769,98,769,105,[[769,98,769,101,"row"],[769,104,769,105,[3,8]]]],[769,107,769,119,[[769,107,769,113,"column"],[769,116,769,118,[3,20]]]]]]]]]]]]]]]]],[770,32,778,4,[0,[[770,32,770,53,[2,["Review","Test"],"whenFixed"]],[770,54,778,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> String -> ( Int, String, List A )\na i s = ( i, s, [ { foo = 1, bar = 2, baz = 3 } ] )\n"]]]]]]]]]]]]]]]]]]]],[780,11,804,26,[1,"<|",1,[780,11,780,82,[0,[[780,11,780,15,[2,[],"test"]],[780,16,780,82,[5,"disambiguation of pattern is possible because of type annotation"]]]]],[781,13,804,26,[18,[[[781,14,781,16,[1]]],[782,17,804,26,[1,"|>",0,[782,17,791,55,[1,"|>",0,[782,17,790,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> A -> Int -> Bool\na i1 { bar, foo, baz } i2 = True\n"]],[791,24,791,55,[0,[[791,24,791,39,[2,["Review","Test"],"run"]],[791,40,791,55,[7,[791,41,791,54,[0,[[791,41,791,45,[2,[],"rule"]],[791,46,791,54,[2,[],"defaults"]]]]]]]]]]]],[792,24,804,26,[0,[[792,24,792,48,[2,["Review","Test"],"expectErrors"]],[793,25,804,26,[9,[[793,27,803,4,[1,"|>",0,[793,27,794,120,[1,"|>",0,[793,27,793,40,[2,[],"unsortedError"]],[794,32,794,120,[0,[[794,32,794,53,[2,["Review","Test"],"atExactly"]],[794,54,794,120,[8,[[794,56,794,87,[[794,56,794,61,"start"],[794,64,794,87,[8,[[794,66,794,73,[[794,66,794,69,"row"],[794,72,794,73,[3,8]]]],[794,75,794,86,[[794,75,794,81,"column"],[794,84,794,85,[3,6]]]]]]]]],[794,89,794,119,[[794,89,794,92,"end"],[794,95,794,118,[8,[[794,97,794,104,[[794,97,794,100,"row"],[794,103,794,104,[3,8]]]],[794,106,794,117,[[794,106,794,112,"column"],[794,115,794,116,[3,7]]]]]]]]]]]]]]]]],[795,32,803,4,[0,[[795,32,795,53,[2,["Review","Test"],"whenFixed"]],[795,54,803,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Int -> A -> Int -> Bool\na i1 { foo, bar, baz } i2 = True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[808,1,932,10,[0,[[0],[1,[808,1,808,22,[[808,1,808,15,"customTypeArgs"],[808,18,808,22,[1,[808,18,808,22,[[],"Test"]],[]]]]]],[809,1,932,10,[[809,1,809,15,"customTypeArgs"],[],[810,5,932,10,[0,[[810,5,810,13,[2,[],"describe"]],[810,14,810,47,[5,"record is an argument of a type"]],[811,9,932,10,[9,[[811,11,820,50,[1,"<|",1,[811,11,811,44,[0,[[811,11,811,15,[2,[],"test"]],[811,16,811,44,[5,"fields are in sorted order"]]]]],[812,13,820,50,[18,[[[812,14,812,16,[1]]],[813,17,820,50,[1,"|>",0,[813,17,819,55,[1,"|>",0,[813,17,818,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\na = A { foo = 1, bar = 2, baz = 3 }\n"]],[819,24,819,55,[0,[[819,24,819,39,[2,["Review","Test"],"run"]],[819,40,819,55,[7,[819,41,819,54,[0,[[819,41,819,45,[2,[],"rule"]],[819,46,819,54,[2,[],"defaults"]]]]]]]]]]]],[820,24,820,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[821,11,839,26,[1,"<|",1,[821,11,821,48,[0,[[821,11,821,15,[2,[],"test"]],[821,16,821,48,[5,"fields are not in sorted order"]]]]],[822,13,839,26,[18,[[[822,14,822,16,[1]]],[823,17,839,26,[1,"|>",0,[823,17,829,55,[1,"|>",0,[823,17,828,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\na = A { bar = 2, foo = 1, baz = 3 }\n"]],[829,24,829,55,[0,[[829,24,829,39,[2,["Review","Test"],"run"]],[829,40,829,55,[7,[829,41,829,54,[0,[[829,41,829,45,[2,[],"rule"]],[829,46,829,54,[2,[],"defaults"]]]]]]]]]]]],[830,24,839,26,[0,[[830,24,830,48,[2,["Review","Test"],"expectErrors"]],[831,25,839,26,[9,[[831,27,838,4,[1,"|>",0,[831,27,832,120,[1,"|>",0,[831,27,831,40,[2,[],"unsortedError"]],[832,32,832,120,[0,[[832,32,832,53,[2,["Review","Test"],"atExactly"]],[832,54,832,120,[8,[[832,56,832,87,[[832,56,832,61,"start"],[832,64,832,87,[8,[[832,66,832,73,[[832,66,832,69,"row"],[832,72,832,73,[3,5]]]],[832,75,832,86,[[832,75,832,81,"column"],[832,84,832,85,[3,7]]]]]]]]],[832,89,832,119,[[832,89,832,92,"end"],[832,95,832,118,[8,[[832,97,832,104,[[832,97,832,100,"row"],[832,103,832,104,[3,5]]]],[832,106,832,117,[[832,106,832,112,"column"],[832,115,832,116,[3,8]]]]]]]]]]]]]]]]],[833,32,838,4,[0,[[833,32,833,53,[2,["Review","Test"],"whenFixed"]],[833,54,838,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\na = A { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[840,11,862,26,[1,"<|",1,[840,11,840,62,[0,[[840,11,840,15,[2,[],"test"]],[840,16,840,62,[5,"disambiguates by constructor for expressions"]]]]],[841,13,862,26,[18,[[[841,14,841,16,[1]]],[842,17,862,26,[1,"|>",0,[842,17,850,55,[1,"|>",0,[842,17,849,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = A { bar = 2, foo = 1, baz = 3 }\n"]],[850,24,850,55,[0,[[850,24,850,39,[2,["Review","Test"],"run"]],[850,40,850,55,[7,[850,41,850,54,[0,[[850,41,850,45,[2,[],"rule"]],[850,46,850,54,[2,[],"defaults"]]]]]]]]]]]],[851,24,862,26,[0,[[851,24,851,48,[2,["Review","Test"],"expectErrors"]],[852,25,862,26,[9,[[852,27,861,4,[1,"|>",0,[852,27,853,120,[1,"|>",0,[852,27,852,40,[2,[],"unsortedError"]],[853,32,853,120,[0,[[853,32,853,53,[2,["Review","Test"],"atExactly"]],[853,54,853,120,[8,[[853,56,853,87,[[853,56,853,61,"start"],[853,64,853,87,[8,[[853,66,853,73,[[853,66,853,69,"row"],[853,72,853,73,[3,7]]]],[853,75,853,86,[[853,75,853,81,"column"],[853,84,853,85,[3,7]]]]]]]]],[853,89,853,119,[[853,89,853,92,"end"],[853,95,853,118,[8,[[853,97,853,104,[[853,97,853,100,"row"],[853,103,853,104,[3,7]]]],[853,106,853,117,[[853,106,853,112,"column"],[853,115,853,116,[3,8]]]]]]]]]]]]]]]]],[854,32,861,4,[0,[[854,32,854,53,[2,["Review","Test"],"whenFixed"]],[854,54,861,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = A { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[863,11,892,26,[1,"<|",1,[863,11,863,72,[0,[[863,11,863,15,[2,[],"test"]],[863,16,863,72,[5,"disambiguates by constructor arg index for expressions"]]]]],[864,13,892,26,[18,[[[864,14,864,16,[1]]],[865,17,892,26,[1,"|>",0,[865,17,872,55,[1,"|>",0,[865,17,871,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\na = A 3 { bar = 1, foo = 2, baz = 3 } \"hello\" { foo = 1, bar = 2, baz = 3 }\n"]],[872,24,872,55,[0,[[872,24,872,39,[2,["Review","Test"],"run"]],[872,40,872,55,[7,[872,41,872,54,[0,[[872,41,872,45,[2,[],"rule"]],[872,46,872,54,[2,[],"defaults"]]]]]]]]]]]],[873,24,892,26,[0,[[873,24,873,48,[2,["Review","Test"],"expectErrors"]],[874,25,892,26,[9,[[874,27,882,4,[1,"|>",0,[874,27,875,121,[1,"|>",0,[874,27,874,40,[2,[],"unsortedError"]],[875,32,875,121,[0,[[875,32,875,53,[2,["Review","Test"],"atExactly"]],[875,54,875,121,[8,[[875,56,875,87,[[875,56,875,61,"start"],[875,64,875,87,[8,[[875,66,875,73,[[875,66,875,69,"row"],[875,72,875,73,[3,6]]]],[875,75,875,86,[[875,75,875,81,"column"],[875,84,875,85,[3,9]]]]]]]]],[875,89,875,120,[[875,89,875,92,"end"],[875,95,875,119,[8,[[875,97,875,104,[[875,97,875,100,"row"],[875,103,875,104,[3,6]]]],[875,106,875,118,[[875,106,875,112,"column"],[875,115,875,117,[3,10]]]]]]]]]]]]]]]]],[876,32,882,4,[0,[[876,32,876,53,[2,["Review","Test"],"whenFixed"]],[876,54,882,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\na = A 3 { foo = 2, bar = 1, baz = 3 } \"hello\" { foo = 1, bar = 2, baz = 3 }\n"]]]]]]],[883,27,891,4,[1,"|>",0,[883,27,884,122,[1,"|>",0,[883,27,883,40,[2,[],"unsortedError"]],[884,32,884,122,[0,[[884,32,884,53,[2,["Review","Test"],"atExactly"]],[884,54,884,122,[8,[[884,56,884,88,[[884,56,884,61,"start"],[884,64,884,88,[8,[[884,66,884,73,[[884,66,884,69,"row"],[884,72,884,73,[3,6]]]],[884,75,884,87,[[884,75,884,81,"column"],[884,84,884,86,[3,47]]]]]]]]],[884,90,884,121,[[884,90,884,93,"end"],[884,96,884,120,[8,[[884,98,884,105,[[884,98,884,101,"row"],[884,104,884,105,[3,6]]]],[884,107,884,119,[[884,107,884,113,"column"],[884,116,884,118,[3,48]]]]]]]]]]]]]]]]],[885,32,891,4,[0,[[885,32,885,53,[2,["Review","Test"],"whenFixed"]],[885,54,891,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\na = A 3 { bar = 1, foo = 2, baz = 3 } \"hello\" { bar = 2, foo = 1, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[893,11,931,26,[1,"<|",1,[893,11,893,69,[0,[[893,11,893,15,[2,[],"test"]],[893,16,893,69,[5,"disambiguates by constructor arg index for patterns"]]]]],[894,13,931,26,[18,[[[894,14,894,16,[1]]],[895,17,931,26,[1,"|>",0,[895,17,905,55,[1,"|>",0,[895,17,904,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\n\na custom =\n    case custom of\n        A _ { bar, foo } _ {foo, bar} -> False\n"]],[905,24,905,55,[0,[[905,24,905,39,[2,["Review","Test"],"run"]],[905,40,905,55,[7,[905,41,905,54,[0,[[905,41,905,45,[2,[],"rule"]],[905,46,905,54,[2,[],"defaults"]]]]]]]]]]]],[906,24,931,26,[0,[[906,24,906,48,[2,["Review","Test"],"expectErrors"]],[907,25,931,26,[9,[[907,27,918,4,[1,"|>",0,[907,27,908,122,[1,"|>",0,[907,27,907,40,[2,[],"unsortedError"]],[908,32,908,122,[0,[[908,32,908,53,[2,["Review","Test"],"atExactly"]],[908,54,908,122,[8,[[908,56,908,88,[[908,56,908,61,"start"],[908,64,908,88,[8,[[908,66,908,73,[[908,66,908,69,"row"],[908,72,908,73,[3,9]]]],[908,75,908,87,[[908,75,908,81,"column"],[908,84,908,86,[3,13]]]]]]]]],[908,90,908,121,[[908,90,908,93,"end"],[908,96,908,120,[8,[[908,98,908,105,[[908,98,908,101,"row"],[908,104,908,105,[3,9]]]],[908,107,908,119,[[908,107,908,113,"column"],[908,116,908,118,[3,14]]]]]]]]]]]]]]]]],[909,32,918,4,[0,[[909,32,909,53,[2,["Review","Test"],"whenFixed"]],[909,54,918,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\n\na custom =\n    case custom of\n        A _ { foo, bar } _ {foo, bar} -> False\n"]]]]]]],[919,27,930,4,[1,"|>",0,[919,27,920,122,[1,"|>",0,[919,27,919,40,[2,[],"unsortedError"]],[920,32,920,122,[0,[[920,32,920,53,[2,["Review","Test"],"atExactly"]],[920,54,920,122,[8,[[920,56,920,88,[[920,56,920,61,"start"],[920,64,920,88,[8,[[920,66,920,73,[[920,66,920,69,"row"],[920,72,920,73,[3,9]]]],[920,75,920,87,[[920,75,920,81,"column"],[920,84,920,86,[3,28]]]]]]]]],[920,90,920,121,[[920,90,920,93,"end"],[920,96,920,120,[8,[[920,98,920,105,[[920,98,920,101,"row"],[920,104,920,105,[3,9]]]],[920,107,920,119,[[920,107,920,113,"column"],[920,116,920,118,[3,29]]]]]]]]]]]]]]]]],[921,32,930,4,[0,[[921,32,921,53,[2,["Review","Test"],"whenFixed"]],[921,54,930,4,[5,"module A exposing (..)\n\ntype Custom\n    = A Int { foo : Int, bar : Int, baz : Int } String { bar : Int, foo : Int, baz : Int }\n\n\na custom =\n    case custom of\n        A _ { bar, foo } _ {bar, foo} -> False\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[935,1,1140,10,[0,[[0],[1,[935,1,935,44,[[935,1,935,37,"disambiguatesByKnownFunctionArgTypes"],[935,40,935,44,[1,[935,40,935,44,[[],"Test"]],[]]]]]],[936,1,1140,10,[[936,1,936,37,"disambiguatesByKnownFunctionArgTypes"],[],[937,5,1140,10,[0,[[937,5,937,13,[2,[],"describe"]],[937,14,937,57,[5,"disambiguates by known function arg types"]],[938,9,1140,10,[9,[[938,11,966,26,[1,"<|",1,[938,11,938,68,[0,[[938,11,938,15,[2,[],"test"]],[938,16,938,68,[5,"possible because of type annotation in same module"]]]]],[939,13,966,26,[18,[[[939,14,939,16,[1]]],[940,17,966,26,[1,"|>",0,[940,17,951,55,[1,"|>",0,[940,17,950,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo { bar = 2, foo = 1, baz = 3 }\n"]],[951,24,951,55,[0,[[951,24,951,39,[2,["Review","Test"],"run"]],[951,40,951,55,[7,[951,41,951,54,[0,[[951,41,951,45,[2,[],"rule"]],[951,46,951,54,[2,[],"defaults"]]]]]]]]]]]],[952,24,966,26,[0,[[952,24,952,48,[2,["Review","Test"],"expectErrors"]],[953,25,966,26,[9,[[953,27,965,4,[1,"|>",0,[953,27,954,124,[1,"|>",0,[953,27,953,40,[2,[],"unsortedError"]],[954,32,954,124,[0,[[954,32,954,53,[2,["Review","Test"],"atExactly"]],[954,54,954,124,[8,[[954,56,954,89,[[954,56,954,61,"start"],[954,64,954,89,[8,[[954,66,954,74,[[954,66,954,69,"row"],[954,72,954,74,[3,10]]]],[954,76,954,88,[[954,76,954,82,"column"],[954,85,954,87,[3,12]]]]]]]]],[954,91,954,123,[[954,91,954,94,"end"],[954,97,954,122,[8,[[954,99,954,107,[[954,99,954,102,"row"],[954,105,954,107,[3,10]]]],[954,109,954,121,[[954,109,954,115,"column"],[954,118,954,120,[3,13]]]]]]]]]]]]]]]]],[955,32,965,4,[0,[[955,32,955,53,[2,["Review","Test"],"whenFixed"]],[955,54,965,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[967,11,1002,26,[1,"<|",1,[967,11,967,69,[0,[[967,11,967,15,[2,[],"test"]],[967,16,967,69,[5,"possible because of type annotation in other module"]]]]],[968,13,1002,26,[18,[[[968,14,968,16,[1]]],[969,17,1002,26,[1,"|>",0,[969,17,986,64,[1,"|>",0,[969,17,985,18,[9,[[969,19,975,4,[5,"module B exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[976,19,984,4,[5,"module A exposing (..)\n\nimport B exposing (foo)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = foo { bar = 2, foo = 1, baz = 3 }\n"]]]]],[986,24,986,64,[0,[[986,24,986,48,[2,["Review","Test"],"runOnModules"]],[986,49,986,64,[7,[986,50,986,63,[0,[[986,50,986,54,[2,[],"rule"]],[986,55,986,63,[2,[],"defaults"]]]]]]]]]]]],[987,24,1002,26,[0,[[987,24,987,58,[2,["Review","Test"],"expectErrorsForModules"]],[988,25,1002,26,[9,[[988,27,1001,28,[6,[[988,29,988,32,[5,"A"]],[989,29,1000,30,[9,[[989,31,999,4,[1,"|>",0,[989,31,990,126,[1,"|>",0,[989,31,989,44,[2,[],"unsortedError"]],[990,36,990,126,[0,[[990,36,990,57,[2,["Review","Test"],"atExactly"]],[990,58,990,126,[8,[[990,60,990,92,[[990,60,990,65,"start"],[990,68,990,92,[8,[[990,70,990,77,[[990,70,990,73,"row"],[990,76,990,77,[3,8]]]],[990,79,990,91,[[990,79,990,85,"column"],[990,88,990,90,[3,12]]]]]]]]],[990,94,990,125,[[990,94,990,97,"end"],[990,100,990,124,[8,[[990,102,990,109,[[990,102,990,105,"row"],[990,108,990,109,[3,8]]]],[990,111,990,123,[[990,111,990,117,"column"],[990,120,990,122,[3,13]]]]]]]]]]]]]]]]],[991,36,999,4,[0,[[991,36,991,57,[2,["Review","Test"],"whenFixed"]],[991,58,999,4,[5,"module A exposing (..)\n\nimport B exposing (foo)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1003,11,1027,50,[1,"<|",1,[1003,11,1003,51,[0,[[1003,11,1003,15,[2,[],"test"]],[1003,16,1003,51,[5,"does not keep unexposed functions"]]]]],[1004,13,1027,50,[18,[[[1004,14,1004,16,[1]]],[1005,17,1027,50,[1,"|>",0,[1005,17,1026,26,[1,"|>",0,[1005,17,1021,18,[9,[[1005,19,1011,4,[5,"module B exposing (A)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[1012,19,1020,4,[5,"module A exposing (..)\n\nimport B\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = B.foo { bar = 2, foo = 1, baz = 3 }\n"]]]]],[1022,24,1026,26,[0,[[1022,24,1022,48,[2,["Review","Test"],"runOnModules"]],[1023,25,1026,26,[7,[1023,26,1025,36,[1,"|>",0,[1023,26,1024,57,[1,"|>",0,[1023,26,1023,34,[2,[],"defaults"]],[1024,32,1024,57,[2,[],"doNotSortAmbiguousRecords"]]]],[1025,32,1025,36,[2,[],"rule"]]]]]]]]]]],[1027,24,1027,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1028,11,1048,50,[1,"<|",1,[1028,11,1028,74,[0,[[1028,11,1028,15,[2,[],"test"]],[1028,16,1028,74,[5,"does understand unexposed alias from an exposed function"]]]]],[1029,13,1048,50,[18,[[[1029,14,1029,16,[1]]],[1030,17,1048,50,[1,"|>",0,[1030,17,1047,64,[1,"|>",0,[1030,17,1046,18,[9,[[1030,19,1036,4,[5,"module B exposing (foo)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n"]],[1037,19,1045,4,[5,"module A exposing (..)\n\nimport B exposing (foo)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]],[1047,24,1047,64,[0,[[1047,24,1047,48,[2,["Review","Test"],"runOnModules"]],[1047,49,1047,64,[7,[1047,50,1047,63,[0,[[1047,50,1047,54,[2,[],"rule"]],[1047,55,1047,63,[2,[],"defaults"]]]]]]]]]]]],[1048,24,1048,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1049,11,1079,26,[1,"<|",1,[1049,11,1049,76,[0,[[1049,11,1049,15,[2,[],"test"]],[1049,16,1049,76,[5,"possible because of type annotation in custom type pattern"]]]]],[1050,13,1079,26,[18,[[[1050,14,1050,16,[1]]],[1051,17,1079,26,[1,"|>",0,[1051,17,1063,55,[1,"|>",0,[1051,17,1062,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom = Custom A\n\nfunc : Custom -> Bool\nfunc c =\n    case c of\n        Custom { bar, foo, baz } -> True\n"]],[1063,24,1063,55,[0,[[1063,24,1063,39,[2,["Review","Test"],"run"]],[1063,40,1063,55,[7,[1063,41,1063,54,[0,[[1063,41,1063,45,[2,[],"rule"]],[1063,46,1063,54,[2,[],"defaults"]]]]]]]]]]]],[1064,24,1079,26,[0,[[1064,24,1064,48,[2,["Review","Test"],"expectErrors"]],[1065,25,1079,26,[9,[[1065,27,1078,4,[1,"|>",0,[1065,27,1066,124,[1,"|>",0,[1065,27,1065,40,[2,[],"unsortedError"]],[1066,32,1066,124,[0,[[1066,32,1066,53,[2,["Review","Test"],"atExactly"]],[1066,54,1066,124,[8,[[1066,56,1066,89,[[1066,56,1066,61,"start"],[1066,64,1066,89,[8,[[1066,66,1066,74,[[1066,66,1066,69,"row"],[1066,72,1066,74,[3,11]]]],[1066,76,1066,88,[[1066,76,1066,82,"column"],[1066,85,1066,87,[3,16]]]]]]]]],[1066,91,1066,123,[[1066,91,1066,94,"end"],[1066,97,1066,122,[8,[[1066,99,1066,107,[[1066,99,1066,102,"row"],[1066,105,1066,107,[3,11]]]],[1066,109,1066,121,[[1066,109,1066,115,"column"],[1066,118,1066,120,[3,17]]]]]]]]]]]]]]]]],[1067,32,1078,4,[0,[[1067,32,1067,53,[2,["Review","Test"],"whenFixed"]],[1067,54,1078,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom = Custom A\n\nfunc : Custom -> Bool\nfunc c =\n    case c of\n        Custom { foo, bar, baz } -> True\n"]]]]]]]]]]]]]]]]]]]],[1080,11,1099,50,[1,"<|",1,[1080,11,1080,77,[0,[[1080,11,1080,15,[2,[],"test"]],[1080,16,1080,77,[5,"does understand unexposed alias from an exposed constructor"]]]]],[1081,13,1099,50,[18,[[[1081,14,1081,16,[1]]],[1082,17,1099,50,[1,"|>",0,[1082,17,1098,64,[1,"|>",0,[1082,17,1097,18,[9,[[1082,19,1087,4,[5,"module B exposing (Custom(..))\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype Custom = Custom A\n"]],[1088,19,1096,4,[5,"module A exposing (..)\n\nimport B exposing (Custom(..))\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = Custom { foo = 1, bar = 2, baz = 3 }\n"]]]]],[1098,24,1098,64,[0,[[1098,24,1098,48,[2,["Review","Test"],"runOnModules"]],[1098,49,1098,64,[7,[1098,50,1098,63,[0,[[1098,50,1098,54,[2,[],"rule"]],[1098,55,1098,63,[2,[],"defaults"]]]]]]]]]]]],[1099,24,1099,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1100,11,1119,50,[1,"<|",1,[1100,11,1100,59,[0,[[1100,11,1100,15,[2,[],"test"]],[1100,16,1100,59,[5,"does not understand unexposed constructor"]]]]],[1101,13,1119,50,[18,[[[1101,14,1101,16,[1]]],[1102,17,1119,50,[1,"|>",0,[1102,17,1118,64,[1,"|>",0,[1102,17,1117,18,[9,[[1102,19,1107,4,[5,"module B exposing (A)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype Custom = Custom A\n"]],[1108,19,1116,4,[5,"module A exposing (..)\n\nimport B\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = B.Custom { bar = 2, baz = 3, foo = 1}\n"]]]]],[1118,24,1118,64,[0,[[1118,24,1118,48,[2,["Review","Test"],"runOnModules"]],[1118,49,1118,64,[7,[1118,50,1118,63,[0,[[1118,50,1118,54,[2,[],"rule"]],[1118,55,1118,63,[2,[],"defaults"]]]]]]]]]]]],[1119,24,1119,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1120,11,1139,50,[1,"<|",1,[1120,11,1120,61,[0,[[1120,11,1120,15,[2,[],"test"]],[1120,16,1120,61,[5,"does understand imported record constructor"]]]]],[1121,13,1139,50,[18,[[[1121,14,1121,16,[1]]],[1122,17,1139,50,[1,"|>",0,[1122,17,1138,64,[1,"|>",0,[1122,17,1137,18,[9,[[1122,19,1127,4,[5,"module B exposing (A)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int } }\n\ntype Custom = Custom A\n"]],[1128,19,1136,4,[5,"module A exposing (..)\n\nimport B exposing (A)\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc = A { foo = 1, bar = 2, baz = 3}\n"]]]]],[1138,24,1138,64,[0,[[1138,24,1138,48,[2,["Review","Test"],"runOnModules"]],[1138,49,1138,64,[7,[1138,50,1138,63,[0,[[1138,50,1138,54,[2,[],"rule"]],[1138,55,1138,63,[2,[],"defaults"]]]]]]]]]]]],[1139,24,1139,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[1143,1,1296,10,[0,[[0],[1,[1143,1,1143,22,[[1143,1,1143,15,"typeVarSupport"],[1143,18,1143,22,[1,[1143,18,1143,22,[[],"Test"]],[]]]]]],[1144,1,1296,10,[[1144,1,1144,15,"typeVarSupport"],[],[1145,5,1296,10,[0,[[1145,5,1145,13,[2,[],"describe"]],[1145,14,1145,38,[5,"handles type variables"]],[1146,9,1296,10,[9,[[1146,11,1170,26,[1,"<|",1,[1146,11,1146,33,[0,[[1146,11,1146,15,[2,[],"test"]],[1146,16,1146,33,[5,"in custom types"]]]]],[1147,13,1170,26,[18,[[[1147,14,1147,16,[1]]],[1148,17,1170,26,[1,"|>",0,[1148,17,1157,55,[1,"|>",0,[1148,17,1156,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Maybe A\na = Just { bar = 2, foo = 1, baz = 3 }\n"]],[1157,24,1157,55,[0,[[1157,24,1157,39,[2,["Review","Test"],"run"]],[1157,40,1157,55,[7,[1157,41,1157,54,[0,[[1157,41,1157,45,[2,[],"rule"]],[1157,46,1157,54,[2,[],"defaults"]]]]]]]]]]]],[1158,24,1170,26,[0,[[1158,24,1158,48,[2,["Review","Test"],"expectErrors"]],[1159,25,1170,26,[9,[[1159,27,1169,4,[1,"|>",0,[1159,27,1160,122,[1,"|>",0,[1159,27,1159,40,[2,[],"unsortedError"]],[1160,32,1160,122,[0,[[1160,32,1160,53,[2,["Review","Test"],"atExactly"]],[1160,54,1160,122,[8,[[1160,56,1160,88,[[1160,56,1160,61,"start"],[1160,64,1160,88,[8,[[1160,66,1160,73,[[1160,66,1160,69,"row"],[1160,72,1160,73,[3,8]]]],[1160,75,1160,87,[[1160,75,1160,81,"column"],[1160,84,1160,86,[3,10]]]]]]]]],[1160,90,1160,121,[[1160,90,1160,93,"end"],[1160,96,1160,120,[8,[[1160,98,1160,105,[[1160,98,1160,101,"row"],[1160,104,1160,105,[3,8]]]],[1160,107,1160,119,[[1160,107,1160,113,"column"],[1160,116,1160,118,[3,11]]]]]]]]]]]]]]]]],[1161,32,1169,4,[0,[[1161,32,1161,53,[2,["Review","Test"],"whenFixed"]],[1161,54,1169,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\na : Maybe A\na = Just { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1171,11,1199,26,[1,"<|",1,[1171,11,1171,48,[0,[[1171,11,1171,15,[2,[],"test"]],[1171,16,1171,48,[5,"in non-dependency custom types"]]]]],[1172,13,1199,26,[18,[[[1172,14,1172,16,[1]]],[1173,17,1199,26,[1,"|>",0,[1173,17,1184,55,[1,"|>",0,[1173,17,1183,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom a = Custom a\n\na : Custom A\na = Custom { bar = 2, foo = 1, baz = 3 }\n"]],[1184,24,1184,55,[0,[[1184,24,1184,39,[2,["Review","Test"],"run"]],[1184,40,1184,55,[7,[1184,41,1184,54,[0,[[1184,41,1184,45,[2,[],"rule"]],[1184,46,1184,54,[2,[],"defaults"]]]]]]]]]]]],[1185,24,1199,26,[0,[[1185,24,1185,48,[2,["Review","Test"],"expectErrors"]],[1186,25,1199,26,[9,[[1186,27,1198,4,[1,"|>",0,[1186,27,1187,124,[1,"|>",0,[1186,27,1186,40,[2,[],"unsortedError"]],[1187,32,1187,124,[0,[[1187,32,1187,53,[2,["Review","Test"],"atExactly"]],[1187,54,1187,124,[8,[[1187,56,1187,89,[[1187,56,1187,61,"start"],[1187,64,1187,89,[8,[[1187,66,1187,74,[[1187,66,1187,69,"row"],[1187,72,1187,74,[3,10]]]],[1187,76,1187,88,[[1187,76,1187,82,"column"],[1187,85,1187,87,[3,12]]]]]]]]],[1187,91,1187,123,[[1187,91,1187,94,"end"],[1187,97,1187,122,[8,[[1187,99,1187,107,[[1187,99,1187,102,"row"],[1187,105,1187,107,[3,10]]]],[1187,109,1187,121,[[1187,109,1187,115,"column"],[1187,118,1187,120,[3,13]]]]]]]]]]]]]]]]],[1188,32,1198,4,[0,[[1188,32,1188,53,[2,["Review","Test"],"whenFixed"]],[1188,54,1198,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype Custom a = Custom a\n\na : Custom A\na = Custom { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1200,11,1228,26,[1,"<|",1,[1200,11,1200,28,[0,[[1200,11,1200,15,[2,[],"test"]],[1200,16,1200,28,[5,"in aliases"]]]]],[1201,13,1228,26,[18,[[[1201,14,1201,16,[1]]],[1202,17,1228,26,[1,"|>",0,[1202,17,1213,55,[1,"|>",0,[1202,17,1212,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias Mebbe a = a\n\na : Mebbe A\na = { bar = 2, foo = 1, baz = 3 }\n"]],[1213,24,1213,55,[0,[[1213,24,1213,39,[2,["Review","Test"],"run"]],[1213,40,1213,55,[7,[1213,41,1213,54,[0,[[1213,41,1213,45,[2,[],"rule"]],[1213,46,1213,54,[2,[],"defaults"]]]]]]]]]]]],[1214,24,1228,26,[0,[[1214,24,1214,48,[2,["Review","Test"],"expectErrors"]],[1215,25,1228,26,[9,[[1215,27,1227,4,[1,"|>",0,[1215,27,1216,122,[1,"|>",0,[1215,27,1215,40,[2,[],"unsortedError"]],[1216,32,1216,122,[0,[[1216,32,1216,53,[2,["Review","Test"],"atExactly"]],[1216,54,1216,122,[8,[[1216,56,1216,88,[[1216,56,1216,61,"start"],[1216,64,1216,88,[8,[[1216,66,1216,74,[[1216,66,1216,69,"row"],[1216,72,1216,74,[3,10]]]],[1216,76,1216,87,[[1216,76,1216,82,"column"],[1216,85,1216,86,[3,5]]]]]]]]],[1216,90,1216,121,[[1216,90,1216,93,"end"],[1216,96,1216,120,[8,[[1216,98,1216,106,[[1216,98,1216,101,"row"],[1216,104,1216,106,[3,10]]]],[1216,108,1216,119,[[1216,108,1216,114,"column"],[1216,117,1216,118,[3,6]]]]]]]]]]]]]]]]],[1217,32,1227,4,[0,[[1217,32,1217,53,[2,["Review","Test"],"whenFixed"]],[1217,54,1227,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias Mebbe a = a\n\na : Mebbe A\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1229,11,1253,26,[1,"<|",1,[1229,11,1229,42,[0,[[1229,11,1229,15,[2,[],"test"]],[1229,16,1229,42,[5,"can match with type vars"]]]]],[1230,13,1253,26,[18,[[[1230,14,1230,16,[1]]],[1231,17,1253,26,[1,"|>",0,[1231,17,1240,55,[1,"|>",0,[1231,17,1239,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { foo : String, bar : Int, baz : Int }\nfunc =\n    { bar = 1, foo = \"foo\", baz = 3 }\n"]],[1240,24,1240,55,[0,[[1240,24,1240,39,[2,["Review","Test"],"run"]],[1240,40,1240,55,[7,[1240,41,1240,54,[0,[[1240,41,1240,45,[2,[],"rule"]],[1240,46,1240,54,[2,[],"defaults"]]]]]]]]]]]],[1241,24,1253,26,[0,[[1241,24,1241,48,[2,["Review","Test"],"expectErrors"]],[1242,25,1253,26,[9,[[1242,27,1252,4,[1,"|>",0,[1242,27,1243,120,[1,"|>",0,[1242,27,1242,40,[2,[],"unsortedError"]],[1243,32,1243,120,[0,[[1243,32,1243,53,[2,["Review","Test"],"atExactly"]],[1243,54,1243,120,[8,[[1243,56,1243,87,[[1243,56,1243,61,"start"],[1243,64,1243,87,[8,[[1243,66,1243,73,[[1243,66,1243,69,"row"],[1243,72,1243,73,[3,8]]]],[1243,75,1243,86,[[1243,75,1243,81,"column"],[1243,84,1243,85,[3,5]]]]]]]]],[1243,89,1243,119,[[1243,89,1243,92,"end"],[1243,95,1243,118,[8,[[1243,97,1243,104,[[1243,97,1243,100,"row"],[1243,103,1243,104,[3,8]]]],[1243,106,1243,117,[[1243,106,1243,112,"column"],[1243,115,1243,116,[3,6]]]]]]]]]]]]]]]]],[1244,32,1252,4,[0,[[1244,32,1244,53,[2,["Review","Test"],"whenFixed"]],[1244,54,1252,4,[5,"module A exposing (..)\n\ntype alias A a = { foo : a, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { foo : String, bar : Int, baz : Int }\nfunc =\n    { foo = \"foo\", bar = 1, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1254,11,1278,26,[1,"<|",1,[1254,11,1254,38,[0,[[1254,11,1254,15,[2,[],"test"]],[1254,16,1254,38,[5,"can assign type vars"]]]]],[1255,13,1278,26,[18,[[[1255,14,1255,16,[1]]],[1256,17,1278,26,[1,"|>",0,[1256,17,1265,55,[1,"|>",0,[1256,17,1264,4,[5,"module A exposing (..)\n\ntype alias A a b = { foo : a, bar : b, baz : Maybe Int }\ntype alias B a = { bar : a, foo : a, baz : Maybe Int }\n\nfunc : { foo : String, bar : Int, baz : Maybe a }\nfunc =\n    { bar = 1, foo = \"foo\", baz = Nothing }\n"]],[1265,24,1265,55,[0,[[1265,24,1265,39,[2,["Review","Test"],"run"]],[1265,40,1265,55,[7,[1265,41,1265,54,[0,[[1265,41,1265,45,[2,[],"rule"]],[1265,46,1265,54,[2,[],"defaults"]]]]]]]]]]]],[1266,24,1278,26,[0,[[1266,24,1266,48,[2,["Review","Test"],"expectErrors"]],[1267,25,1278,26,[9,[[1267,27,1277,4,[1,"|>",0,[1267,27,1268,120,[1,"|>",0,[1267,27,1267,40,[2,[],"unsortedError"]],[1268,32,1268,120,[0,[[1268,32,1268,53,[2,["Review","Test"],"atExactly"]],[1268,54,1268,120,[8,[[1268,56,1268,87,[[1268,56,1268,61,"start"],[1268,64,1268,87,[8,[[1268,66,1268,73,[[1268,66,1268,69,"row"],[1268,72,1268,73,[3,8]]]],[1268,75,1268,86,[[1268,75,1268,81,"column"],[1268,84,1268,85,[3,5]]]]]]]]],[1268,89,1268,119,[[1268,89,1268,92,"end"],[1268,95,1268,118,[8,[[1268,97,1268,104,[[1268,97,1268,100,"row"],[1268,103,1268,104,[3,8]]]],[1268,106,1268,117,[[1268,106,1268,112,"column"],[1268,115,1268,116,[3,6]]]]]]]]]]]]]]]]],[1269,32,1277,4,[0,[[1269,32,1269,53,[2,["Review","Test"],"whenFixed"]],[1269,54,1277,4,[5,"module A exposing (..)\n\ntype alias A a b = { foo : a, bar : b, baz : Maybe Int }\ntype alias B a = { bar : a, foo : a, baz : Maybe Int }\n\nfunc : { foo : String, bar : Int, baz : Maybe a }\nfunc =\n    { foo = \"foo\", bar = 1, baz = Nothing }\n"]]]]]]]]]]]]]]]]]]]],[1279,11,1295,50,[1,"<|",1,[1279,11,1279,83,[0,[[1279,11,1279,15,[2,[],"test"]],[1279,16,1279,83,[5,"does not recurse infinitely by a typevar being assigned to itself"]]]]],[1280,13,1295,50,[18,[[[1280,14,1280,16,[1]]],[1281,17,1295,50,[1,"|>",0,[1281,17,1294,55,[1,"|>",0,[1281,17,1293,4,[5,"module A exposing (..)\n\ntype alias C z = { y : z }\n\nc : C a -> a\nc = .y\n\nfoo : { a | field : Int } -> C x -> Int\nfoo _ _ = 0\n\nrecord =\n    { f = foo (c 1) (c 2) }\n"]],[1294,24,1294,55,[0,[[1294,24,1294,39,[2,["Review","Test"],"run"]],[1294,40,1294,55,[7,[1294,41,1294,54,[0,[[1294,41,1294,45,[2,[],"rule"]],[1294,46,1294,54,[2,[],"defaults"]]]]]]]]]]]],[1295,24,1295,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[1299,1,1341,10,[0,[[0],[1,[1299,1,1299,32,[[1299,1,1299,25,"recordConstructorSupport"],[1299,28,1299,32,[1,[1299,28,1299,32,[[],"Test"]],[]]]]]],[1300,1,1341,10,[[1300,1,1300,25,"recordConstructorSupport"],[],[1301,5,1341,10,[0,[[1301,5,1301,13,[2,[],"describe"]],[1301,14,1301,41,[5,"using record constructors"]],[1302,9,1341,10,[9,[[1302,11,1340,26,[1,"<|",1,[1302,11,1302,85,[0,[[1302,11,1302,15,[2,[],"test"]],[1302,16,1302,85,[5,"possible because of type annotation of field for record constructor"]]]]],[1303,13,1340,26,[18,[[[1303,14,1303,16,[1]]],[1304,17,1340,26,[1,"|>",0,[1304,17,1314,55,[1,"|>",0,[1304,17,1313,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias C = { a : A, b : B }\n\nfunc =\n    C { bar = 1, foo = 2, baz = 3 } { foo = 2, bar = 1, baz = 3 }\n"]],[1314,24,1314,55,[0,[[1314,24,1314,39,[2,["Review","Test"],"run"]],[1314,40,1314,55,[7,[1314,41,1314,54,[0,[[1314,41,1314,45,[2,[],"rule"]],[1314,46,1314,54,[2,[],"defaults"]]]]]]]]]]]],[1315,24,1340,26,[0,[[1315,24,1315,48,[2,["Review","Test"],"expectErrors"]],[1316,25,1340,26,[9,[[1316,27,1327,4,[1,"|>",0,[1316,27,1317,120,[1,"|>",0,[1316,27,1316,40,[2,[],"unsortedError"]],[1317,32,1317,120,[0,[[1317,32,1317,53,[2,["Review","Test"],"atExactly"]],[1317,54,1317,120,[8,[[1317,56,1317,87,[[1317,56,1317,61,"start"],[1317,64,1317,87,[8,[[1317,66,1317,73,[[1317,66,1317,69,"row"],[1317,72,1317,73,[3,9]]]],[1317,75,1317,86,[[1317,75,1317,81,"column"],[1317,84,1317,85,[3,7]]]]]]]]],[1317,89,1317,119,[[1317,89,1317,92,"end"],[1317,95,1317,118,[8,[[1317,97,1317,104,[[1317,97,1317,100,"row"],[1317,103,1317,104,[3,9]]]],[1317,106,1317,117,[[1317,106,1317,112,"column"],[1317,115,1317,116,[3,8]]]]]]]]]]]]]]]]],[1318,32,1327,4,[0,[[1318,32,1318,53,[2,["Review","Test"],"whenFixed"]],[1318,54,1327,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias C = { a : A, b : B }\n\nfunc =\n    C { foo = 2, bar = 1, baz = 3 } { foo = 2, bar = 1, baz = 3 }\n"]]]]]]],[1328,27,1339,4,[1,"|>",0,[1328,27,1329,122,[1,"|>",0,[1328,27,1328,40,[2,[],"unsortedError"]],[1329,32,1329,122,[0,[[1329,32,1329,53,[2,["Review","Test"],"atExactly"]],[1329,54,1329,122,[8,[[1329,56,1329,88,[[1329,56,1329,61,"start"],[1329,64,1329,88,[8,[[1329,66,1329,73,[[1329,66,1329,69,"row"],[1329,72,1329,73,[3,9]]]],[1329,75,1329,87,[[1329,75,1329,81,"column"],[1329,84,1329,86,[3,37]]]]]]]]],[1329,90,1329,121,[[1329,90,1329,93,"end"],[1329,96,1329,120,[8,[[1329,98,1329,105,[[1329,98,1329,101,"row"],[1329,104,1329,105,[3,9]]]],[1329,107,1329,119,[[1329,107,1329,113,"column"],[1329,116,1329,118,[3,38]]]]]]]]]]]]]]]]],[1330,32,1339,4,[0,[[1330,32,1330,53,[2,["Review","Test"],"whenFixed"]],[1330,54,1339,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\ntype alias C = { a : A, b : B }\n\nfunc =\n    C { bar = 1, foo = 2, baz = 3 } { bar = 1, foo = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1344,1,1538,10,[0,[[0],[1,[1344,1,1344,28,[[1344,1,1344,21,"usesRecordFieldTypes"],[1344,24,1344,28,[1,[1344,24,1344,28,[[],"Test"]],[]]]]]],[1345,1,1538,10,[[1345,1,1345,21,"usesRecordFieldTypes"],[],[1346,5,1538,10,[0,[[1346,5,1346,13,[2,[],"describe"]],[1346,14,1346,39,[5,"uses record field types"]],[1347,9,1538,10,[9,[[1347,11,1384,26,[1,"<|",1,[1347,11,1347,48,[0,[[1347,11,1347,15,[2,[],"test"]],[1347,16,1347,48,[5,"can disambiguate by field type"]]]]],[1348,13,1384,26,[18,[[[1348,14,1348,16,[1]]],[1349,17,1384,26,[1,"|>",0,[1349,17,1358,55,[1,"|>",0,[1349,17,1357,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : {a : A, b : B}\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]],[1358,24,1358,55,[0,[[1358,24,1358,39,[2,["Review","Test"],"run"]],[1358,40,1358,55,[7,[1358,41,1358,54,[0,[[1358,41,1358,45,[2,[],"rule"]],[1358,46,1358,54,[2,[],"defaults"]]]]]]]]]]]],[1359,24,1384,26,[0,[[1359,24,1359,48,[2,["Review","Test"],"expectErrors"]],[1360,25,1384,26,[9,[[1360,27,1371,4,[1,"|>",0,[1360,27,1361,122,[1,"|>",0,[1360,27,1360,40,[2,[],"unsortedError"]],[1361,32,1361,122,[0,[[1361,32,1361,53,[2,["Review","Test"],"atExactly"]],[1361,54,1361,122,[8,[[1361,56,1361,88,[[1361,56,1361,61,"start"],[1361,64,1361,88,[8,[[1361,66,1361,73,[[1361,66,1361,69,"row"],[1361,72,1361,73,[3,8]]]],[1361,75,1361,87,[[1361,75,1361,81,"column"],[1361,84,1361,86,[3,11]]]]]]]]],[1361,90,1361,121,[[1361,90,1361,93,"end"],[1361,96,1361,120,[8,[[1361,98,1361,105,[[1361,98,1361,101,"row"],[1361,104,1361,105,[3,8]]]],[1361,107,1361,119,[[1361,107,1361,113,"column"],[1361,116,1361,118,[3,12]]]]]]]]]]]]]]]]],[1362,32,1371,4,[0,[[1362,32,1362,53,[2,["Review","Test"],"whenFixed"]],[1363,33,1371,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : {a : A, b : B}\nfunc =\n    { a = { foo = 2, bar = 1, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]],[1372,27,1383,4,[1,"|>",0,[1372,27,1373,122,[1,"|>",0,[1372,27,1372,40,[2,[],"unsortedError"]],[1373,32,1373,122,[0,[[1373,32,1373,53,[2,["Review","Test"],"atExactly"]],[1373,54,1373,122,[8,[[1373,56,1373,88,[[1373,56,1373,61,"start"],[1373,64,1373,88,[8,[[1373,66,1373,73,[[1373,66,1373,69,"row"],[1373,72,1373,73,[3,8]]]],[1373,75,1373,87,[[1373,75,1373,81,"column"],[1373,84,1373,86,[3,46]]]]]]]]],[1373,90,1373,121,[[1373,90,1373,93,"end"],[1373,96,1373,120,[8,[[1373,98,1373,105,[[1373,98,1373,101,"row"],[1373,104,1373,105,[3,8]]]],[1373,107,1373,119,[[1373,107,1373,113,"column"],[1373,116,1373,118,[3,47]]]]]]]]]]]]]]]]],[1374,32,1383,4,[0,[[1374,32,1374,53,[2,["Review","Test"],"whenFixed"]],[1375,33,1383,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : {a : A, b : B}\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { bar = 2, foo = 1, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[1385,11,1419,26,[1,"<|",1,[1385,11,1385,62,[0,[[1385,11,1385,15,[2,[],"test"]],[1385,16,1385,62,[5,"can disambiguate by field type without alias"]]]]],[1386,13,1419,26,[18,[[[1386,14,1386,16,[1]]],[1387,17,1419,26,[1,"|>",0,[1387,17,1395,55,[1,"|>",0,[1387,17,1394,4,[5,"module A exposing (..)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int }, b : { bar : Int, foo : Int, baz : Int } }\n\nfunc : A\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]],[1395,24,1395,55,[0,[[1395,24,1395,39,[2,["Review","Test"],"run"]],[1395,40,1395,55,[7,[1395,41,1395,54,[0,[[1395,41,1395,45,[2,[],"rule"]],[1395,46,1395,54,[2,[],"defaults"]]]]]]]]]]]],[1396,24,1419,26,[0,[[1396,24,1396,48,[2,["Review","Test"],"expectErrors"]],[1397,25,1419,26,[9,[[1397,27,1407,4,[1,"|>",0,[1397,27,1398,122,[1,"|>",0,[1397,27,1397,40,[2,[],"unsortedError"]],[1398,32,1398,122,[0,[[1398,32,1398,53,[2,["Review","Test"],"atExactly"]],[1398,54,1398,122,[8,[[1398,56,1398,88,[[1398,56,1398,61,"start"],[1398,64,1398,88,[8,[[1398,66,1398,73,[[1398,66,1398,69,"row"],[1398,72,1398,73,[3,7]]]],[1398,75,1398,87,[[1398,75,1398,81,"column"],[1398,84,1398,86,[3,11]]]]]]]]],[1398,90,1398,121,[[1398,90,1398,93,"end"],[1398,96,1398,120,[8,[[1398,98,1398,105,[[1398,98,1398,101,"row"],[1398,104,1398,105,[3,7]]]],[1398,107,1398,119,[[1398,107,1398,113,"column"],[1398,116,1398,118,[3,12]]]]]]]]]]]]]]]]],[1399,32,1407,4,[0,[[1399,32,1399,53,[2,["Review","Test"],"whenFixed"]],[1400,33,1407,4,[5,"module A exposing (..)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int }, b : { bar : Int, foo : Int, baz : Int } }\n\nfunc : A\nfunc =\n    { a = { foo = 2, bar = 1, baz = 3 }, b = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]],[1408,27,1418,4,[1,"|>",0,[1408,27,1409,122,[1,"|>",0,[1408,27,1408,40,[2,[],"unsortedError"]],[1409,32,1409,122,[0,[[1409,32,1409,53,[2,["Review","Test"],"atExactly"]],[1409,54,1409,122,[8,[[1409,56,1409,88,[[1409,56,1409,61,"start"],[1409,64,1409,88,[8,[[1409,66,1409,73,[[1409,66,1409,69,"row"],[1409,72,1409,73,[3,7]]]],[1409,75,1409,87,[[1409,75,1409,81,"column"],[1409,84,1409,86,[3,46]]]]]]]]],[1409,90,1409,121,[[1409,90,1409,93,"end"],[1409,96,1409,120,[8,[[1409,98,1409,105,[[1409,98,1409,101,"row"],[1409,104,1409,105,[3,7]]]],[1409,107,1409,119,[[1409,107,1409,113,"column"],[1409,116,1409,118,[3,47]]]]]]]]]]]]]]]]],[1410,32,1418,4,[0,[[1410,32,1410,53,[2,["Review","Test"],"whenFixed"]],[1411,33,1418,4,[5,"module A exposing (..)\n\ntype alias A = { a : { foo : Int, bar : Int, baz : Int }, b : { bar : Int, foo : Int, baz : Int } }\n\nfunc : A\nfunc =\n    { a = { bar = 1, foo = 2, baz = 3 }, b = { bar = 2, foo = 1, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[1420,11,1454,26,[1,"<|",1,[1420,11,1420,42,[0,[[1420,11,1420,15,[2,[],"test"]],[1420,16,1420,42,[5,"can disambiguate by type"]]]]],[1421,13,1454,26,[18,[[[1421,14,1421,16,[1]]],[1422,17,1454,26,[1,"|>",0,[1422,17,1430,55,[1,"|>",0,[1422,17,1429,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : { bar : Int, foo : Int, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]],[1430,24,1430,55,[0,[[1430,24,1430,39,[2,["Review","Test"],"run"]],[1430,40,1430,55,[7,[1430,41,1430,54,[0,[[1430,41,1430,45,[2,[],"rule"]],[1430,46,1430,54,[2,[],"defaults"]]]]]]]]]]]],[1431,24,1454,26,[0,[[1431,24,1431,48,[2,["Review","Test"],"expectErrors"]],[1432,25,1454,26,[9,[[1432,27,1442,4,[1,"|>",0,[1432,27,1433,120,[1,"|>",0,[1432,27,1432,40,[2,[],"unsortedError"]],[1433,32,1433,120,[0,[[1433,32,1433,53,[2,["Review","Test"],"atExactly"]],[1433,54,1433,120,[8,[[1433,56,1433,87,[[1433,56,1433,61,"start"],[1433,64,1433,87,[8,[[1433,66,1433,73,[[1433,66,1433,69,"row"],[1433,72,1433,73,[3,6]]]],[1433,75,1433,86,[[1433,75,1433,81,"column"],[1433,84,1433,85,[3,8]]]]]]]]],[1433,89,1433,119,[[1433,89,1433,92,"end"],[1433,95,1433,118,[8,[[1433,97,1433,104,[[1433,97,1433,100,"row"],[1433,103,1433,104,[3,6]]]],[1433,106,1433,117,[[1433,106,1433,112,"column"],[1433,115,1433,116,[3,9]]]]]]]]]]]]]]]]],[1434,32,1442,4,[0,[[1434,32,1434,53,[2,["Review","Test"],"whenFixed"]],[1435,33,1442,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : { foo : Int, bar : Int, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]]]]]]],[1443,27,1453,4,[1,"|>",0,[1443,27,1444,120,[1,"|>",0,[1443,27,1443,40,[2,[],"unsortedError"]],[1444,32,1444,120,[0,[[1444,32,1444,53,[2,["Review","Test"],"atExactly"]],[1444,54,1444,120,[8,[[1444,56,1444,87,[[1444,56,1444,61,"start"],[1444,64,1444,87,[8,[[1444,66,1444,73,[[1444,66,1444,69,"row"],[1444,72,1444,73,[3,7]]]],[1444,75,1444,86,[[1444,75,1444,81,"column"],[1444,84,1444,85,[3,6]]]]]]]]],[1444,89,1444,119,[[1444,89,1444,92,"end"],[1444,95,1444,118,[8,[[1444,97,1444,104,[[1444,97,1444,100,"row"],[1444,103,1444,104,[3,7]]]],[1444,106,1444,117,[[1444,106,1444,112,"column"],[1444,115,1444,116,[3,7]]]]]]]]]]]]]]]]],[1445,32,1453,4,[0,[[1445,32,1445,53,[2,["Review","Test"],"whenFixed"]],[1446,33,1453,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : { bar : Int, foo : Int, baz : Int } -> Bool\nfunc { foo, bar, baz } = True\n"]]]]]]]]]]]]]]]]]]]],[1455,11,1478,26,[1,"<|",1,[1455,11,1455,60,[0,[[1455,11,1455,15,[2,[],"test"]],[1455,16,1455,60,[5,"can disambiguate by type via record access"]]]]],[1456,13,1478,26,[18,[[[1456,14,1456,16,[1]]],[1457,17,1478,26,[1,"|>",0,[1457,17,1465,55,[1,"|>",0,[1457,17,1464,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { bar = 1, foo = 2, baz = 3 }.bar\n"]],[1465,24,1465,55,[0,[[1465,24,1465,39,[2,["Review","Test"],"run"]],[1465,40,1465,55,[7,[1465,41,1465,54,[0,[[1465,41,1465,45,[2,[],"rule"]],[1465,46,1465,54,[2,[],"defaults"]]]]]]]]]]]],[1466,24,1478,26,[0,[[1466,24,1466,48,[2,["Review","Test"],"expectErrors"]],[1467,25,1478,26,[9,[[1467,27,1477,4,[1,"|>",0,[1467,27,1468,120,[1,"|>",0,[1467,27,1467,40,[2,[],"unsortedError"]],[1468,32,1468,120,[0,[[1468,32,1468,53,[2,["Review","Test"],"atExactly"]],[1468,54,1468,120,[8,[[1468,56,1468,87,[[1468,56,1468,61,"start"],[1468,64,1468,87,[8,[[1468,66,1468,73,[[1468,66,1468,69,"row"],[1468,72,1468,73,[3,7]]]],[1468,75,1468,86,[[1468,75,1468,81,"column"],[1468,84,1468,85,[3,8]]]]]]]]],[1468,89,1468,119,[[1468,89,1468,92,"end"],[1468,95,1468,118,[8,[[1468,97,1468,104,[[1468,97,1468,100,"row"],[1468,103,1468,104,[3,7]]]],[1468,106,1468,117,[[1468,106,1468,112,"column"],[1468,115,1468,116,[3,9]]]]]]]]]]]]]]]]],[1469,32,1477,4,[0,[[1469,32,1469,53,[2,["Review","Test"],"whenFixed"]],[1470,33,1477,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { foo = 2, bar = 1, baz = 3 }.bar\n"]]]]]]]]]]]]]]]]]]]],[1479,11,1502,26,[1,"<|",1,[1479,11,1479,69,[0,[[1479,11,1479,15,[2,[],"test"]],[1479,16,1479,69,[5,"can disambiguate by type via record access function"]]]]],[1480,13,1502,26,[18,[[[1480,14,1480,16,[1]]],[1481,17,1502,26,[1,"|>",0,[1481,17,1489,55,[1,"|>",0,[1481,17,1488,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { bar = 1, foo = 2, baz = 3 } |> .bar\n"]],[1489,24,1489,55,[0,[[1489,24,1489,39,[2,["Review","Test"],"run"]],[1489,40,1489,55,[7,[1489,41,1489,54,[0,[[1489,41,1489,45,[2,[],"rule"]],[1489,46,1489,54,[2,[],"defaults"]]]]]]]]]]]],[1490,24,1502,26,[0,[[1490,24,1490,48,[2,["Review","Test"],"expectErrors"]],[1491,25,1502,26,[9,[[1491,27,1501,4,[1,"|>",0,[1491,27,1492,120,[1,"|>",0,[1491,27,1491,40,[2,[],"unsortedError"]],[1492,32,1492,120,[0,[[1492,32,1492,53,[2,["Review","Test"],"atExactly"]],[1492,54,1492,120,[8,[[1492,56,1492,87,[[1492,56,1492,61,"start"],[1492,64,1492,87,[8,[[1492,66,1492,73,[[1492,66,1492,69,"row"],[1492,72,1492,73,[3,7]]]],[1492,75,1492,86,[[1492,75,1492,81,"column"],[1492,84,1492,85,[3,8]]]]]]]]],[1492,89,1492,119,[[1492,89,1492,92,"end"],[1492,95,1492,118,[8,[[1492,97,1492,104,[[1492,97,1492,100,"row"],[1492,103,1492,104,[3,7]]]],[1492,106,1492,117,[[1492,106,1492,112,"column"],[1492,115,1492,116,[3,9]]]]]]]]]]]]]]]]],[1493,32,1501,4,[0,[[1493,32,1493,53,[2,["Review","Test"],"whenFixed"]],[1494,33,1501,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : String, foo : Int, baz : Int }\n\nfunc : Int\nfunc = { foo = 2, bar = 1, baz = 3 } |> .bar\n"]]]]]]]]]]]]]]]]]]]],[1503,11,1537,26,[1,"<|",1,[1503,11,1503,60,[0,[[1503,11,1503,15,[2,[],"test"]],[1503,16,1503,60,[5,"can disambiguate by type with record types"]]]]],[1504,13,1537,26,[18,[[[1504,14,1504,16,[1]]],[1505,17,1537,26,[1,"|>",0,[1505,17,1513,55,[1,"|>",0,[1505,17,1512,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc : { bar : Int, foo : { a : Int, b : String }, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]],[1513,24,1513,55,[0,[[1513,24,1513,39,[2,["Review","Test"],"run"]],[1513,40,1513,55,[7,[1513,41,1513,54,[0,[[1513,41,1513,45,[2,[],"rule"]],[1513,46,1513,54,[2,[],"defaults"]]]]]]]]]]]],[1514,24,1537,26,[0,[[1514,24,1514,48,[2,["Review","Test"],"expectErrors"]],[1515,25,1537,26,[9,[[1515,27,1525,4,[1,"|>",0,[1515,27,1516,120,[1,"|>",0,[1515,27,1515,40,[2,[],"unsortedError"]],[1516,32,1516,120,[0,[[1516,32,1516,53,[2,["Review","Test"],"atExactly"]],[1516,54,1516,120,[8,[[1516,56,1516,87,[[1516,56,1516,61,"start"],[1516,64,1516,87,[8,[[1516,66,1516,73,[[1516,66,1516,69,"row"],[1516,72,1516,73,[3,6]]]],[1516,75,1516,86,[[1516,75,1516,81,"column"],[1516,84,1516,85,[3,8]]]]]]]]],[1516,89,1516,119,[[1516,89,1516,92,"end"],[1516,95,1516,118,[8,[[1516,97,1516,104,[[1516,97,1516,100,"row"],[1516,103,1516,104,[3,6]]]],[1516,106,1516,117,[[1516,106,1516,112,"column"],[1516,115,1516,116,[3,9]]]]]]]]]]]]]]]]],[1517,32,1525,4,[0,[[1517,32,1517,53,[2,["Review","Test"],"whenFixed"]],[1518,33,1525,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc : { foo : { a : Int, b : String }, bar : Int, baz : Int } -> Bool\nfunc { bar, foo, baz } = True\n"]]]]]]],[1526,27,1536,4,[1,"|>",0,[1526,27,1527,120,[1,"|>",0,[1526,27,1526,40,[2,[],"unsortedError"]],[1527,32,1527,120,[0,[[1527,32,1527,53,[2,["Review","Test"],"atExactly"]],[1527,54,1527,120,[8,[[1527,56,1527,87,[[1527,56,1527,61,"start"],[1527,64,1527,87,[8,[[1527,66,1527,73,[[1527,66,1527,69,"row"],[1527,72,1527,73,[3,7]]]],[1527,75,1527,86,[[1527,75,1527,81,"column"],[1527,84,1527,85,[3,6]]]]]]]]],[1527,89,1527,119,[[1527,89,1527,92,"end"],[1527,95,1527,118,[8,[[1527,97,1527,104,[[1527,97,1527,100,"row"],[1527,103,1527,104,[3,7]]]],[1527,106,1527,117,[[1527,106,1527,112,"column"],[1527,115,1527,116,[3,7]]]]]]]]]]]]]]]]],[1528,32,1536,4,[0,[[1528,32,1528,53,[2,["Review","Test"],"whenFixed"]],[1529,33,1536,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc : { bar : Int, foo : { a : Int, b : String }, baz : Int } -> Bool\nfunc { foo, bar, baz } = True\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1541,1,1631,10,[0,[[0],[1,[1541,1,1541,23,[[1541,1,1541,16,"operatorSupport"],[1541,19,1541,23,[1,[1541,19,1541,23,[[],"Test"]],[]]]]]],[1542,1,1631,10,[[1542,1,1542,16,"operatorSupport"],[],[1543,5,1631,10,[0,[[1543,5,1543,13,[2,[],"describe"]],[1543,14,1543,32,[5,"operator support"]],[1544,9,1631,10,[9,[[1544,11,1572,26,[1,"<|",1,[1544,11,1544,53,[0,[[1544,11,1544,15,[2,[],"test"]],[1544,16,1544,53,[5,"understands |> operator application"]]]]],[1545,13,1572,26,[18,[[[1545,14,1545,16,[1]]],[1546,17,1572,26,[1,"|>",0,[1546,17,1557,55,[1,"|>",0,[1546,17,1556,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { bar = 2, foo = 1, baz = 3 } |> foo\n"]],[1557,24,1557,55,[0,[[1557,24,1557,39,[2,["Review","Test"],"run"]],[1557,40,1557,55,[7,[1557,41,1557,54,[0,[[1557,41,1557,45,[2,[],"rule"]],[1557,46,1557,54,[2,[],"defaults"]]]]]]]]]]]],[1558,24,1572,26,[0,[[1558,24,1558,48,[2,["Review","Test"],"expectErrors"]],[1559,25,1572,26,[9,[[1559,27,1571,4,[1,"|>",0,[1559,27,1560,122,[1,"|>",0,[1559,27,1559,40,[2,[],"unsortedError"]],[1560,32,1560,122,[0,[[1560,32,1560,53,[2,["Review","Test"],"atExactly"]],[1560,54,1560,122,[8,[[1560,56,1560,88,[[1560,56,1560,61,"start"],[1560,64,1560,88,[8,[[1560,66,1560,74,[[1560,66,1560,69,"row"],[1560,72,1560,74,[3,10]]]],[1560,76,1560,87,[[1560,76,1560,82,"column"],[1560,85,1560,86,[3,8]]]]]]]]],[1560,90,1560,121,[[1560,90,1560,93,"end"],[1560,96,1560,120,[8,[[1560,98,1560,106,[[1560,98,1560,101,"row"],[1560,104,1560,106,[3,10]]]],[1560,108,1560,119,[[1560,108,1560,114,"column"],[1560,117,1560,118,[3,9]]]]]]]]]]]]]]]]],[1561,32,1571,4,[0,[[1561,32,1561,53,[2,["Review","Test"],"whenFixed"]],[1561,54,1571,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { foo = 1, bar = 2, baz = 3 } |> foo\n"]]]]]]]]]]]]]]]]]]]],[1573,11,1601,26,[1,"<|",1,[1573,11,1573,37,[0,[[1573,11,1573,15,[2,[],"test"]],[1573,16,1573,37,[5,"handles parentheses"]]]]],[1574,13,1601,26,[18,[[[1574,14,1574,16,[1]]],[1575,17,1601,26,[1,"|>",0,[1575,17,1586,55,[1,"|>",0,[1575,17,1585,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { bar = 2, foo = 1, baz = 3 } |> (foo)\n"]],[1586,24,1586,55,[0,[[1586,24,1586,39,[2,["Review","Test"],"run"]],[1586,40,1586,55,[7,[1586,41,1586,54,[0,[[1586,41,1586,45,[2,[],"rule"]],[1586,46,1586,54,[2,[],"defaults"]]]]]]]]]]]],[1587,24,1601,26,[0,[[1587,24,1587,48,[2,["Review","Test"],"expectErrors"]],[1588,25,1601,26,[9,[[1588,27,1600,4,[1,"|>",0,[1588,27,1589,122,[1,"|>",0,[1588,27,1588,40,[2,[],"unsortedError"]],[1589,32,1589,122,[0,[[1589,32,1589,53,[2,["Review","Test"],"atExactly"]],[1589,54,1589,122,[8,[[1589,56,1589,88,[[1589,56,1589,61,"start"],[1589,64,1589,88,[8,[[1589,66,1589,74,[[1589,66,1589,69,"row"],[1589,72,1589,74,[3,10]]]],[1589,76,1589,87,[[1589,76,1589,82,"column"],[1589,85,1589,86,[3,8]]]]]]]]],[1589,90,1589,121,[[1589,90,1589,93,"end"],[1589,96,1589,120,[8,[[1589,98,1589,106,[[1589,98,1589,101,"row"],[1589,104,1589,106,[3,10]]]],[1589,108,1589,119,[[1589,108,1589,114,"column"],[1589,117,1589,118,[3,9]]]]]]]]]]]]]]]]],[1590,32,1600,4,[0,[[1590,32,1590,53,[2,["Review","Test"],"whenFixed"]],[1590,54,1600,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = { foo = 1, bar = 2, baz = 3 } |> (foo)\n"]]]]]]]]]]]]]]]]]]]],[1602,11,1630,26,[1,"<|",1,[1602,11,1602,53,[0,[[1602,11,1602,15,[2,[],"test"]],[1602,16,1602,53,[5,"understands <| operator application"]]]]],[1603,13,1630,26,[18,[[[1603,14,1603,16,[1]]],[1604,17,1630,26,[1,"|>",0,[1604,17,1615,55,[1,"|>",0,[1604,17,1614,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo <| { bar = 2, foo = 1, baz = 3 }\n"]],[1615,24,1615,55,[0,[[1615,24,1615,39,[2,["Review","Test"],"run"]],[1615,40,1615,55,[7,[1615,41,1615,54,[0,[[1615,41,1615,45,[2,[],"rule"]],[1615,46,1615,54,[2,[],"defaults"]]]]]]]]]]]],[1616,24,1630,26,[0,[[1616,24,1616,48,[2,["Review","Test"],"expectErrors"]],[1617,25,1630,26,[9,[[1617,27,1629,4,[1,"|>",0,[1617,27,1618,124,[1,"|>",0,[1617,27,1617,40,[2,[],"unsortedError"]],[1618,32,1618,124,[0,[[1618,32,1618,53,[2,["Review","Test"],"atExactly"]],[1618,54,1618,124,[8,[[1618,56,1618,89,[[1618,56,1618,61,"start"],[1618,64,1618,89,[8,[[1618,66,1618,74,[[1618,66,1618,69,"row"],[1618,72,1618,74,[3,10]]]],[1618,76,1618,88,[[1618,76,1618,82,"column"],[1618,85,1618,87,[3,15]]]]]]]]],[1618,91,1618,123,[[1618,91,1618,94,"end"],[1618,97,1618,122,[8,[[1618,99,1618,107,[[1618,99,1618,102,"row"],[1618,105,1618,107,[3,10]]]],[1618,109,1618,121,[[1618,109,1618,115,"column"],[1618,118,1618,120,[3,16]]]]]]]]]]]]]]]]],[1619,32,1629,4,[0,[[1619,32,1619,53,[2,["Review","Test"],"whenFixed"]],[1619,54,1629,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a = True\n\nfunc : Bool\nfunc = foo <| { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1634,1,1739,10,[0,[[0],[1,[1634,1,1634,25,[[1634,1,1634,18,"dependencySupport"],[1634,21,1634,25,[1,[1634,21,1634,25,[[],"Test"]],[]]]]]],[1635,1,1739,10,[[1635,1,1635,18,"dependencySupport"],[],[1636,5,1739,10,[0,[[1636,5,1636,13,[2,[],"describe"]],[1636,14,1636,34,[5,"dependency support"]],[1637,9,1739,10,[9,[[1637,11,1657,26,[1,"<|",1,[1637,11,1637,77,[0,[[1637,11,1637,15,[2,[],"test"]],[1637,16,1637,77,[5,"will sort based on type alias in dependency with annotation"]]]]],[1638,13,1657,26,[18,[[[1638,14,1638,16,[1]]],[1639,17,1657,26,[1,"|>",0,[1639,17,1646,118,[1,"|>",0,[1639,17,1645,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na : DeadEnd\na = { problem = BadRepeat, col = 1, row = 2 }\n"]],[1646,24,1646,118,[0,[[1646,24,1646,54,[2,["Review","Test"],"runWithProjectData"]],[1646,55,1646,102,[7,[1646,56,1646,101,[1,"|>",0,[1646,56,1646,74,[2,[],"projectWithElmCore"]],[1646,78,1646,101,[0,[[1646,78,1646,91,[2,[],"addDependency"]],[1646,92,1646,101,[2,[],"elmParser"]]]]]]]]],[1646,103,1646,118,[7,[1646,104,1646,117,[0,[[1646,104,1646,108,[2,[],"rule"]],[1646,109,1646,117,[2,[],"defaults"]]]]]]]]]]]],[1647,24,1657,26,[0,[[1647,24,1647,48,[2,["Review","Test"],"expectErrors"]],[1648,25,1657,26,[9,[[1648,27,1656,4,[1,"|>",0,[1648,27,1648,40,[2,[],"unsortedError"]],[1649,32,1656,4,[0,[[1649,32,1649,53,[2,["Review","Test"],"whenFixed"]],[1650,33,1656,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na : DeadEnd\na = { row = 2 , col = 1, problem = BadRepeat}\n"]]]]]]]]]]]]]]]]]]]],[1658,11,1676,26,[1,"<|",1,[1658,11,1658,69,[0,[[1658,11,1658,15,[2,[],"test"]],[1658,16,1658,69,[5,"will sort based on type alias in dependency without"]]]]],[1659,13,1676,26,[18,[[[1659,14,1659,16,[1]]],[1660,17,1676,26,[1,"|>",0,[1660,17,1666,118,[1,"|>",0,[1660,17,1665,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na = { problem = BadRepeat, col = 1, row = 2 }\n"]],[1666,24,1666,118,[0,[[1666,24,1666,54,[2,["Review","Test"],"runWithProjectData"]],[1666,55,1666,102,[7,[1666,56,1666,101,[1,"|>",0,[1666,56,1666,74,[2,[],"projectWithElmCore"]],[1666,78,1666,101,[0,[[1666,78,1666,91,[2,[],"addDependency"]],[1666,92,1666,101,[2,[],"elmParser"]]]]]]]]],[1666,103,1666,118,[7,[1666,104,1666,117,[0,[[1666,104,1666,108,[2,[],"rule"]],[1666,109,1666,117,[2,[],"defaults"]]]]]]]]]]]],[1667,24,1676,26,[0,[[1667,24,1667,48,[2,["Review","Test"],"expectErrors"]],[1668,25,1676,26,[9,[[1668,27,1675,4,[1,"|>",0,[1668,27,1668,40,[2,[],"unsortedError"]],[1669,32,1675,4,[0,[[1669,32,1669,53,[2,["Review","Test"],"whenFixed"]],[1670,33,1675,4,[5,"module A exposing (..)\n\nimport Parser exposing (DeadEnd, Problem (..))\n\na = { row = 2 , col = 1, problem = BadRepeat}\n"]]]]]]]]]]]]]]]]]]]],[1677,11,1700,26,[1,"<|",1,[1677,11,1677,96,[0,[[1677,11,1677,15,[2,[],"test"]],[1677,16,1677,96,[5,"will disambiguate based on dependency function signature (including list type)"]]]]],[1678,13,1700,26,[18,[[[1678,14,1678,16,[1]]],[1679,17,1700,26,[1,"|>",0,[1679,17,1687,118,[1,"|>",0,[1679,17,1686,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : Problem }\n\na = deadEndsToString [ { problem = BadRepeat, col = 1, row = 2 } ]\n"]],[1687,24,1687,118,[0,[[1687,24,1687,54,[2,["Review","Test"],"runWithProjectData"]],[1687,55,1687,102,[7,[1687,56,1687,101,[1,"|>",0,[1687,56,1687,74,[2,[],"projectWithElmCore"]],[1687,78,1687,101,[0,[[1687,78,1687,91,[2,[],"addDependency"]],[1687,92,1687,101,[2,[],"elmParser"]]]]]]]]],[1687,103,1687,118,[7,[1687,104,1687,117,[0,[[1687,104,1687,108,[2,[],"rule"]],[1687,109,1687,117,[2,[],"defaults"]]]]]]]]]]]],[1688,24,1700,26,[0,[[1688,24,1688,48,[2,["Review","Test"],"expectErrors"]],[1689,25,1700,26,[9,[[1689,27,1699,4,[1,"|>",0,[1689,27,1690,122,[1,"|>",0,[1689,27,1689,40,[2,[],"unsortedError"]],[1690,32,1690,122,[0,[[1690,32,1690,53,[2,["Review","Test"],"atExactly"]],[1690,54,1690,122,[8,[[1690,56,1690,88,[[1690,56,1690,61,"start"],[1690,64,1690,88,[8,[[1690,66,1690,73,[[1690,66,1690,69,"row"],[1690,72,1690,73,[3,7]]]],[1690,75,1690,87,[[1690,75,1690,81,"column"],[1690,84,1690,86,[3,24]]]]]]]]],[1690,90,1690,121,[[1690,90,1690,93,"end"],[1690,96,1690,120,[8,[[1690,98,1690,105,[[1690,98,1690,101,"row"],[1690,104,1690,105,[3,7]]]],[1690,107,1690,119,[[1690,107,1690,113,"column"],[1690,116,1690,118,[3,25]]]]]]]]]]]]]]]]],[1691,32,1699,4,[0,[[1691,32,1691,53,[2,["Review","Test"],"whenFixed"]],[1692,33,1699,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : Problem }\n\na = deadEndsToString [ { row = 2 , col = 1, problem = BadRepeat} ]\n"]]]]]]]]]]]]]]]]]]]],[1701,11,1738,26,[1,"<|",1,[1701,11,1701,55,[0,[[1701,11,1701,15,[2,[],"test"]],[1701,16,1701,55,[5,"will disambiguate based on field type"]]]]],[1702,13,1738,26,[18,[[[1702,14,1702,16,[1]]],[1703,17,1738,26,[1,"|>",0,[1703,17,1712,118,[1,"|>",0,[1703,17,1711,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : String }\n\na : { col : Int, row : Int, problem : Problem }\na = { problem = BadRepeat, col = 1, row = 2 }\n"]],[1712,24,1712,118,[0,[[1712,24,1712,54,[2,["Review","Test"],"runWithProjectData"]],[1712,55,1712,102,[7,[1712,56,1712,101,[1,"|>",0,[1712,56,1712,74,[2,[],"projectWithElmCore"]],[1712,78,1712,101,[0,[[1712,78,1712,91,[2,[],"addDependency"]],[1712,92,1712,101,[2,[],"elmParser"]]]]]]]]],[1712,103,1712,118,[7,[1712,104,1712,117,[0,[[1712,104,1712,108,[2,[],"rule"]],[1712,109,1712,117,[2,[],"defaults"]]]]]]]]]]]],[1713,24,1738,26,[0,[[1713,24,1713,48,[2,["Review","Test"],"expectErrors"]],[1714,25,1738,26,[9,[[1714,27,1725,4,[1,"|>",0,[1714,27,1715,120,[1,"|>",0,[1714,27,1714,40,[2,[],"unsortedError"]],[1715,32,1715,120,[0,[[1715,32,1715,53,[2,["Review","Test"],"atExactly"]],[1715,54,1715,120,[8,[[1715,56,1715,87,[[1715,56,1715,61,"start"],[1715,64,1715,87,[8,[[1715,66,1715,73,[[1715,66,1715,69,"row"],[1715,72,1715,73,[3,8]]]],[1715,75,1715,86,[[1715,75,1715,81,"column"],[1715,84,1715,85,[3,5]]]]]]]]],[1715,89,1715,119,[[1715,89,1715,92,"end"],[1715,95,1715,118,[8,[[1715,97,1715,104,[[1715,97,1715,100,"row"],[1715,103,1715,104,[3,8]]]],[1715,106,1715,117,[[1715,106,1715,112,"column"],[1715,115,1715,116,[3,6]]]]]]]]]]]]]]]]],[1716,32,1725,4,[0,[[1716,32,1716,53,[2,["Review","Test"],"whenFixed"]],[1717,33,1725,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : String }\n\na : { col : Int, row : Int, problem : Problem }\na = { row = 2 , col = 1, problem = BadRepeat}\n"]]]]]]],[1726,27,1737,4,[1,"|>",0,[1726,27,1727,120,[1,"|>",0,[1726,27,1726,40,[2,[],"unsortedError"]],[1727,32,1727,120,[0,[[1727,32,1727,53,[2,["Review","Test"],"atExactly"]],[1727,54,1727,120,[8,[[1727,56,1727,87,[[1727,56,1727,61,"start"],[1727,64,1727,87,[8,[[1727,66,1727,73,[[1727,66,1727,69,"row"],[1727,72,1727,73,[3,7]]]],[1727,75,1727,86,[[1727,75,1727,81,"column"],[1727,84,1727,85,[3,5]]]]]]]]],[1727,89,1727,119,[[1727,89,1727,92,"end"],[1727,95,1727,118,[8,[[1727,97,1727,104,[[1727,97,1727,100,"row"],[1727,103,1727,104,[3,7]]]],[1727,106,1727,117,[[1727,106,1727,112,"column"],[1727,115,1727,116,[3,6]]]]]]]]]]]]]]]]],[1728,32,1737,4,[0,[[1728,32,1728,53,[2,["Review","Test"],"whenFixed"]],[1729,33,1737,4,[5,"module A exposing (..)\n\nimport Parser exposing (deadEndsToString, DeadEnd, Problem (..))\n\ntype alias MyDeadEnd = { col : Int, row : Int, problem : String }\n\na : { row : Int, col : Int, problem : Problem }\na = { problem = BadRepeat, col = 1, row = 2 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1742,1,2166,10,[0,[[0],[1,[1742,1,1742,28,[[1742,1,1742,21,"genericRecordSupport"],[1742,24,1742,28,[1,[1742,24,1742,28,[[],"Test"]],[]]]]]],[1743,1,2166,10,[[1743,1,1743,21,"genericRecordSupport"],[],[1744,5,2166,10,[0,[[1744,5,1744,13,[2,[],"describe"]],[1744,14,1744,31,[5,"generic records"]],[1745,9,2166,10,[9,[[1745,11,1766,26,[1,"<|",1,[1745,11,1745,43,[0,[[1745,11,1745,15,[2,[],"test"]],[1745,16,1745,43,[5,"without additional fields"]]]]],[1746,13,1766,26,[18,[[[1746,14,1746,16,[1]]],[1747,17,1766,26,[1,"|>",0,[1747,17,1754,55,[1,"|>",0,[1747,17,1753,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic {}\na = { bar = 2, foo = 1, baz = 3 }\n"]],[1754,24,1754,55,[0,[[1754,24,1754,39,[2,["Review","Test"],"run"]],[1754,40,1754,55,[7,[1754,41,1754,54,[0,[[1754,41,1754,45,[2,[],"rule"]],[1754,46,1754,54,[2,[],"defaults"]]]]]]]]]]]],[1755,24,1766,26,[0,[[1755,24,1755,48,[2,["Review","Test"],"expectErrors"]],[1756,25,1766,26,[9,[[1756,27,1765,4,[1,"|>",0,[1756,27,1757,120,[1,"|>",0,[1756,27,1756,40,[2,[],"unsortedError"]],[1757,32,1757,120,[0,[[1757,32,1757,53,[2,["Review","Test"],"atExactly"]],[1757,54,1757,120,[8,[[1757,56,1757,87,[[1757,56,1757,61,"start"],[1757,64,1757,87,[8,[[1757,66,1757,73,[[1757,66,1757,69,"row"],[1757,72,1757,73,[3,6]]]],[1757,75,1757,86,[[1757,75,1757,81,"column"],[1757,84,1757,85,[3,5]]]]]]]]],[1757,89,1757,119,[[1757,89,1757,92,"end"],[1757,95,1757,118,[8,[[1757,97,1757,104,[[1757,97,1757,100,"row"],[1757,103,1757,104,[3,6]]]],[1757,106,1757,117,[[1757,106,1757,112,"column"],[1757,115,1757,116,[3,6]]]]]]]]]]]]]]]]],[1758,32,1765,4,[0,[[1758,32,1758,53,[2,["Review","Test"],"whenFixed"]],[1759,33,1765,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic {}\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1767,11,1786,26,[1,"<|",1,[1767,11,1767,67,[0,[[1767,11,1767,15,[2,[],"test"]],[1767,16,1767,67,[5,"without additional fields without type annotation"]]]]],[1768,13,1786,26,[18,[[[1768,14,1768,16,[1]]],[1769,17,1786,26,[1,"|>",0,[1769,17,1775,55,[1,"|>",0,[1769,17,1774,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[1775,24,1775,55,[0,[[1775,24,1775,39,[2,["Review","Test"],"run"]],[1775,40,1775,55,[7,[1775,41,1775,54,[0,[[1775,41,1775,45,[2,[],"rule"]],[1775,46,1775,54,[2,[],"defaults"]]]]]]]]]]]],[1776,24,1786,26,[0,[[1776,24,1776,48,[2,["Review","Test"],"expectErrors"]],[1777,25,1786,26,[9,[[1777,27,1785,4,[1,"|>",0,[1777,27,1778,120,[1,"|>",0,[1777,27,1777,40,[2,[],"unsortedError"]],[1778,32,1778,120,[0,[[1778,32,1778,53,[2,["Review","Test"],"atExactly"]],[1778,54,1778,120,[8,[[1778,56,1778,87,[[1778,56,1778,61,"start"],[1778,64,1778,87,[8,[[1778,66,1778,73,[[1778,66,1778,69,"row"],[1778,72,1778,73,[3,5]]]],[1778,75,1778,86,[[1778,75,1778,81,"column"],[1778,84,1778,85,[3,5]]]]]]]]],[1778,89,1778,119,[[1778,89,1778,92,"end"],[1778,95,1778,118,[8,[[1778,97,1778,104,[[1778,97,1778,100,"row"],[1778,103,1778,104,[3,5]]]],[1778,106,1778,117,[[1778,106,1778,112,"column"],[1778,115,1778,116,[3,6]]]]]]]]]]]]]]]]],[1779,32,1785,4,[0,[[1779,32,1779,53,[2,["Review","Test"],"whenFixed"]],[1780,33,1785,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1787,11,1808,26,[1,"<|",1,[1787,11,1787,40,[0,[[1787,11,1787,15,[2,[],"test"]],[1787,16,1787,40,[5,"with additional fields"]]]]],[1788,13,1808,26,[18,[[[1788,14,1788,16,[1]]],[1789,17,1808,26,[1,"|>",0,[1789,17,1796,55,[1,"|>",0,[1789,17,1795,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { x = 0, bar = 2, z = 3, y = 2, foo = 1, baz = 3 }\n"]],[1796,24,1796,55,[0,[[1796,24,1796,39,[2,["Review","Test"],"run"]],[1796,40,1796,55,[7,[1796,41,1796,54,[0,[[1796,41,1796,45,[2,[],"rule"]],[1796,46,1796,54,[2,[],"defaults"]]]]]]]]]]]],[1797,24,1808,26,[0,[[1797,24,1797,48,[2,["Review","Test"],"expectErrors"]],[1798,25,1808,26,[9,[[1798,27,1807,4,[1,"|>",0,[1798,27,1799,120,[1,"|>",0,[1798,27,1798,40,[2,[],"unsortedError"]],[1799,32,1799,120,[0,[[1799,32,1799,53,[2,["Review","Test"],"atExactly"]],[1799,54,1799,120,[8,[[1799,56,1799,87,[[1799,56,1799,61,"start"],[1799,64,1799,87,[8,[[1799,66,1799,73,[[1799,66,1799,69,"row"],[1799,72,1799,73,[3,6]]]],[1799,75,1799,86,[[1799,75,1799,81,"column"],[1799,84,1799,85,[3,5]]]]]]]]],[1799,89,1799,119,[[1799,89,1799,92,"end"],[1799,95,1799,118,[8,[[1799,97,1799,104,[[1799,97,1799,100,"row"],[1799,103,1799,104,[3,6]]]],[1799,106,1799,117,[[1799,106,1799,112,"column"],[1799,115,1799,116,[3,6]]]]]]]]]]]]]]]]],[1800,32,1807,4,[0,[[1800,32,1800,53,[2,["Review","Test"],"whenFixed"]],[1801,33,1807,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { x = 0, y = 2, z = 3, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1809,11,1834,26,[1,"<|",1,[1809,11,1809,45,[0,[[1809,11,1809,15,[2,[],"test"]],[1809,16,1809,45,[5,"with additional fields last"]]]]],[1810,13,1834,26,[18,[[[1810,14,1810,16,[1]]],[1811,17,1834,26,[1,"|>",0,[1811,17,1822,26,[1,"|>",0,[1811,17,1817,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { x = 0, bar = 2, z = 3, y = 2, foo = 1, baz = 3 }\n"]],[1818,24,1822,26,[0,[[1818,24,1818,39,[2,["Review","Test"],"run"]],[1819,25,1822,26,[7,[1819,26,1821,36,[1,"|>",0,[1819,26,1820,53,[1,"|>",0,[1819,26,1819,34,[2,[],"defaults"]],[1820,32,1820,53,[2,[],"sortGenericFieldsLast"]]]],[1821,32,1821,36,[2,[],"rule"]]]]]]]]]]],[1823,24,1834,26,[0,[[1823,24,1823,48,[2,["Review","Test"],"expectErrors"]],[1824,25,1834,26,[9,[[1824,27,1833,4,[1,"|>",0,[1824,27,1825,120,[1,"|>",0,[1824,27,1824,40,[2,[],"unsortedError"]],[1825,32,1825,120,[0,[[1825,32,1825,53,[2,["Review","Test"],"atExactly"]],[1825,54,1825,120,[8,[[1825,56,1825,87,[[1825,56,1825,61,"start"],[1825,64,1825,87,[8,[[1825,66,1825,73,[[1825,66,1825,69,"row"],[1825,72,1825,73,[3,6]]]],[1825,75,1825,86,[[1825,75,1825,81,"column"],[1825,84,1825,85,[3,5]]]]]]]]],[1825,89,1825,119,[[1825,89,1825,92,"end"],[1825,95,1825,118,[8,[[1825,97,1825,104,[[1825,97,1825,100,"row"],[1825,103,1825,104,[3,6]]]],[1825,106,1825,117,[[1825,106,1825,112,"column"],[1825,115,1825,116,[3,6]]]]]]]]]]]]]]]]],[1826,32,1833,4,[0,[[1826,32,1826,53,[2,["Review","Test"],"whenFixed"]],[1827,33,1833,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na : Generic { x : Int, y : Int, z : Int }\na = { foo = 1, bar = 2, baz = 3 , x = 0, y = 2, z = 3}\n"]]]]]]]]]]]]]]]]]]]],[1835,11,1854,26,[1,"<|",1,[1835,11,1835,63,[0,[[1835,11,1835,15,[2,[],"test"]],[1835,16,1835,63,[5,"with additional fields without type signature"]]]]],[1836,13,1854,26,[18,[[[1836,14,1836,16,[1]]],[1837,17,1854,26,[1,"|>",0,[1837,17,1843,55,[1,"|>",0,[1837,17,1842,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { x = 0, bar = 2, z = 3, y = 2, foo = 1, baz = 3 }\n"]],[1843,24,1843,55,[0,[[1843,24,1843,39,[2,["Review","Test"],"run"]],[1843,40,1843,55,[7,[1843,41,1843,54,[0,[[1843,41,1843,45,[2,[],"rule"]],[1843,46,1843,54,[2,[],"defaults"]]]]]]]]]]]],[1844,24,1854,26,[0,[[1844,24,1844,48,[2,["Review","Test"],"expectErrors"]],[1845,25,1854,26,[9,[[1845,27,1853,4,[1,"|>",0,[1845,27,1846,120,[1,"|>",0,[1845,27,1845,40,[2,[],"unsortedError"]],[1846,32,1846,120,[0,[[1846,32,1846,53,[2,["Review","Test"],"atExactly"]],[1846,54,1846,120,[8,[[1846,56,1846,87,[[1846,56,1846,61,"start"],[1846,64,1846,87,[8,[[1846,66,1846,73,[[1846,66,1846,69,"row"],[1846,72,1846,73,[3,5]]]],[1846,75,1846,86,[[1846,75,1846,81,"column"],[1846,84,1846,85,[3,5]]]]]]]]],[1846,89,1846,119,[[1846,89,1846,92,"end"],[1846,95,1846,118,[8,[[1846,97,1846,104,[[1846,97,1846,100,"row"],[1846,103,1846,104,[3,5]]]],[1846,106,1846,117,[[1846,106,1846,112,"column"],[1846,115,1846,116,[3,6]]]]]]]]]]]]]]]]],[1847,32,1853,4,[0,[[1847,32,1847,53,[2,["Review","Test"],"whenFixed"]],[1848,33,1853,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\n\na = { x = 0, y = 2, z = 3, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1855,11,1878,26,[1,"<|",1,[1855,11,1855,66,[0,[[1855,11,1855,15,[2,[],"test"]],[1855,16,1855,66,[5,"with additional fields that have canonical order"]]]]],[1856,13,1878,26,[18,[[[1856,14,1856,16,[1]]],[1857,17,1878,26,[1,"|>",0,[1857,17,1865,55,[1,"|>",0,[1857,17,1864,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1865,24,1865,55,[0,[[1865,24,1865,39,[2,["Review","Test"],"run"]],[1865,40,1865,55,[7,[1865,41,1865,54,[0,[[1865,41,1865,45,[2,[],"rule"]],[1865,46,1865,54,[2,[],"defaults"]]]]]]]]]]]],[1866,24,1878,26,[0,[[1866,24,1866,48,[2,["Review","Test"],"expectErrors"]],[1867,25,1878,26,[9,[[1867,27,1877,4,[1,"|>",0,[1867,27,1868,120,[1,"|>",0,[1867,27,1867,40,[2,[],"unsortedError"]],[1868,32,1868,120,[0,[[1868,32,1868,53,[2,["Review","Test"],"atExactly"]],[1868,54,1868,120,[8,[[1868,56,1868,87,[[1868,56,1868,61,"start"],[1868,64,1868,87,[8,[[1868,66,1868,73,[[1868,66,1868,69,"row"],[1868,72,1868,73,[3,7]]]],[1868,75,1868,86,[[1868,75,1868,81,"column"],[1868,84,1868,85,[3,5]]]]]]]]],[1868,89,1868,119,[[1868,89,1868,92,"end"],[1868,95,1868,118,[8,[[1868,97,1868,104,[[1868,97,1868,100,"row"],[1868,103,1868,104,[3,7]]]],[1868,106,1868,117,[[1868,106,1868,112,"column"],[1868,115,1868,116,[3,6]]]]]]]]]]]]]]]]],[1869,32,1877,4,[0,[[1869,32,1869,53,[2,["Review","Test"],"whenFixed"]],[1870,33,1877,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1879,11,1906,26,[1,"<|",1,[1879,11,1879,71,[0,[[1879,11,1879,15,[2,[],"test"]],[1879,16,1879,71,[5,"with additional fields that have canonical order last"]]]]],[1880,13,1906,26,[18,[[[1880,14,1880,16,[1]]],[1881,17,1906,26,[1,"|>",0,[1881,17,1893,26,[1,"|>",0,[1881,17,1888,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1889,24,1893,26,[0,[[1889,24,1889,39,[2,["Review","Test"],"run"]],[1890,25,1893,26,[7,[1890,26,1892,36,[1,"|>",0,[1890,26,1891,53,[1,"|>",0,[1890,26,1890,34,[2,[],"defaults"]],[1891,32,1891,53,[2,[],"sortGenericFieldsLast"]]]],[1892,32,1892,36,[2,[],"rule"]]]]]]]]]]],[1894,24,1906,26,[0,[[1894,24,1894,48,[2,["Review","Test"],"expectErrors"]],[1895,25,1906,26,[9,[[1895,27,1905,4,[1,"|>",0,[1895,27,1896,120,[1,"|>",0,[1895,27,1895,40,[2,[],"unsortedError"]],[1896,32,1896,120,[0,[[1896,32,1896,53,[2,["Review","Test"],"atExactly"]],[1896,54,1896,120,[8,[[1896,56,1896,87,[[1896,56,1896,61,"start"],[1896,64,1896,87,[8,[[1896,66,1896,73,[[1896,66,1896,69,"row"],[1896,72,1896,73,[3,7]]]],[1896,75,1896,86,[[1896,75,1896,81,"column"],[1896,84,1896,85,[3,5]]]]]]]]],[1896,89,1896,119,[[1896,89,1896,92,"end"],[1896,95,1896,118,[8,[[1896,97,1896,104,[[1896,97,1896,100,"row"],[1896,103,1896,104,[3,7]]]],[1896,106,1896,117,[[1896,106,1896,112,"column"],[1896,115,1896,116,[3,6]]]]]]]]]]]]]]]]],[1897,32,1905,4,[0,[[1897,32,1897,53,[2,["Review","Test"],"whenFixed"]],[1898,33,1905,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na : Generic A\na = { foo = 1, bar = 2, baz = 3 , yi = 3, er = 2, san = 0}\n"]]]]]]]]]]]]]]]]]]]],[1907,11,1928,26,[1,"<|",1,[1907,11,1907,85,[0,[[1907,11,1907,15,[2,[],"test"]],[1907,16,1907,85,[5,"with additional fields that have canonical order without annotation"]]]]],[1908,13,1928,26,[18,[[[1908,14,1908,16,[1]]],[1909,17,1928,26,[1,"|>",0,[1909,17,1916,55,[1,"|>",0,[1909,17,1915,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1916,24,1916,55,[0,[[1916,24,1916,39,[2,["Review","Test"],"run"]],[1916,40,1916,55,[7,[1916,41,1916,54,[0,[[1916,41,1916,45,[2,[],"rule"]],[1916,46,1916,54,[2,[],"defaults"]]]]]]]]]]]],[1917,24,1928,26,[0,[[1917,24,1917,48,[2,["Review","Test"],"expectErrors"]],[1918,25,1928,26,[9,[[1918,27,1927,4,[1,"|>",0,[1918,27,1919,120,[1,"|>",0,[1918,27,1918,40,[2,[],"unsortedError"]],[1919,32,1919,120,[0,[[1919,32,1919,53,[2,["Review","Test"],"atExactly"]],[1919,54,1919,120,[8,[[1919,56,1919,87,[[1919,56,1919,61,"start"],[1919,64,1919,87,[8,[[1919,66,1919,73,[[1919,66,1919,69,"row"],[1919,72,1919,73,[3,6]]]],[1919,75,1919,86,[[1919,75,1919,81,"column"],[1919,84,1919,85,[3,5]]]]]]]]],[1919,89,1919,119,[[1919,89,1919,92,"end"],[1919,95,1919,118,[8,[[1919,97,1919,104,[[1919,97,1919,100,"row"],[1919,103,1919,104,[3,6]]]],[1919,106,1919,117,[[1919,106,1919,112,"column"],[1919,115,1919,116,[3,6]]]]]]]]]]]]]]]]],[1920,32,1927,4,[0,[[1920,32,1920,53,[2,["Review","Test"],"whenFixed"]],[1921,33,1927,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias A = { yi : Int, er : Int, san : Int }\n\na = { yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1929,11,1952,26,[1,"<|",1,[1929,11,1929,59,[0,[[1929,11,1929,15,[2,[],"test"]],[1929,16,1929,59,[5,"nested generics that have canonical order"]]]]],[1930,13,1952,26,[18,[[[1930,14,1930,16,[1]]],[1931,17,1952,26,[1,"|>",0,[1931,17,1939,55,[1,"|>",0,[1931,17,1938,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 {})\na = { san = 0, bar = 2, yi = 3, er = 2, foo = 1, baz = 3 }\n"]],[1939,24,1939,55,[0,[[1939,24,1939,39,[2,["Review","Test"],"run"]],[1939,40,1939,55,[7,[1939,41,1939,54,[0,[[1939,41,1939,45,[2,[],"rule"]],[1939,46,1939,54,[2,[],"defaults"]]]]]]]]]]]],[1940,24,1952,26,[0,[[1940,24,1940,48,[2,["Review","Test"],"expectErrors"]],[1941,25,1952,26,[9,[[1941,27,1951,4,[1,"|>",0,[1941,27,1942,120,[1,"|>",0,[1941,27,1941,40,[2,[],"unsortedError"]],[1942,32,1942,120,[0,[[1942,32,1942,53,[2,["Review","Test"],"atExactly"]],[1942,54,1942,120,[8,[[1942,56,1942,87,[[1942,56,1942,61,"start"],[1942,64,1942,87,[8,[[1942,66,1942,73,[[1942,66,1942,69,"row"],[1942,72,1942,73,[3,7]]]],[1942,75,1942,86,[[1942,75,1942,81,"column"],[1942,84,1942,85,[3,5]]]]]]]]],[1942,89,1942,119,[[1942,89,1942,92,"end"],[1942,95,1942,118,[8,[[1942,97,1942,104,[[1942,97,1942,100,"row"],[1942,103,1942,104,[3,7]]]],[1942,106,1942,117,[[1942,106,1942,112,"column"],[1942,115,1942,116,[3,6]]]]]]]]]]]]]]]]],[1943,32,1951,4,[0,[[1943,32,1943,53,[2,["Review","Test"],"whenFixed"]],[1944,33,1951,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 {})\na = { yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1953,11,1978,26,[1,"<|",1,[1953,11,1953,83,[0,[[1953,11,1953,15,[2,[],"test"]],[1953,16,1953,83,[5,"nested generics that have canonical order with additional nesting"]]]]],[1954,13,1978,26,[18,[[[1954,14,1954,16,[1]]],[1955,17,1978,26,[1,"|>",0,[1955,17,1964,55,[1,"|>",0,[1955,17,1963,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[1964,24,1964,55,[0,[[1964,24,1964,39,[2,["Review","Test"],"run"]],[1964,40,1964,55,[7,[1964,41,1964,54,[0,[[1964,41,1964,45,[2,[],"rule"]],[1964,46,1964,54,[2,[],"defaults"]]]]]]]]]]]],[1965,24,1978,26,[0,[[1965,24,1965,48,[2,["Review","Test"],"expectErrors"]],[1966,25,1978,26,[9,[[1966,27,1977,4,[1,"|>",0,[1966,27,1967,120,[1,"|>",0,[1966,27,1966,40,[2,[],"unsortedError"]],[1967,32,1967,120,[0,[[1967,32,1967,53,[2,["Review","Test"],"atExactly"]],[1967,54,1967,120,[8,[[1967,56,1967,87,[[1967,56,1967,61,"start"],[1967,64,1967,87,[8,[[1967,66,1967,73,[[1967,66,1967,69,"row"],[1967,72,1967,73,[3,8]]]],[1967,75,1967,86,[[1967,75,1967,81,"column"],[1967,84,1967,85,[3,5]]]]]]]]],[1967,89,1967,119,[[1967,89,1967,92,"end"],[1967,95,1967,118,[8,[[1967,97,1967,104,[[1967,97,1967,100,"row"],[1967,103,1967,104,[3,8]]]],[1967,106,1967,117,[[1967,106,1967,112,"column"],[1967,115,1967,116,[3,6]]]]]]]]]]]]]]]]],[1968,32,1977,4,[0,[[1968,32,1968,53,[2,["Review","Test"],"whenFixed"]],[1969,33,1977,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { y = 2, x = 6, yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[1979,11,2008,26,[1,"<|",1,[1979,11,1979,90,[0,[[1979,11,1979,15,[2,[],"test"]],[1979,16,1979,90,[5,"nested generics that have canonical order with additional nesting at end"]]]]],[1980,13,2008,26,[18,[[[1980,14,1980,16,[1]]],[1981,17,2008,26,[1,"|>",0,[1981,17,1994,26,[1,"|>",0,[1981,17,1989,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[1990,24,1994,26,[0,[[1990,24,1990,39,[2,["Review","Test"],"run"]],[1991,25,1994,26,[7,[1991,26,1993,36,[1,"|>",0,[1991,26,1992,53,[1,"|>",0,[1991,26,1991,34,[2,[],"defaults"]],[1992,32,1992,53,[2,[],"sortGenericFieldsLast"]]]],[1993,32,1993,36,[2,[],"rule"]]]]]]]]]]],[1995,24,2008,26,[0,[[1995,24,1995,48,[2,["Review","Test"],"expectErrors"]],[1996,25,2008,26,[9,[[1996,27,2007,4,[1,"|>",0,[1996,27,1997,120,[1,"|>",0,[1996,27,1996,40,[2,[],"unsortedError"]],[1997,32,1997,120,[0,[[1997,32,1997,53,[2,["Review","Test"],"atExactly"]],[1997,54,1997,120,[8,[[1997,56,1997,87,[[1997,56,1997,61,"start"],[1997,64,1997,87,[8,[[1997,66,1997,73,[[1997,66,1997,69,"row"],[1997,72,1997,73,[3,8]]]],[1997,75,1997,86,[[1997,75,1997,81,"column"],[1997,84,1997,85,[3,5]]]]]]]]],[1997,89,1997,119,[[1997,89,1997,92,"end"],[1997,95,1997,118,[8,[[1997,97,1997,104,[[1997,97,1997,100,"row"],[1997,103,1997,104,[3,8]]]],[1997,106,1997,117,[[1997,106,1997,112,"column"],[1997,115,1997,116,[3,6]]]]]]]]]]]]]]]]],[1998,32,2007,4,[0,[[1998,32,1998,53,[2,["Review","Test"],"whenFixed"]],[1999,33,2007,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\ntype alias A = { y : Int, x : Int }\n\na : Generic (Generic2 A)\na = { foo = 1, bar = 2, baz = 3 , yi = 3, er = 2, san = 0, y = 2, x = 6}\n"]]]]]]]]]]]]]]]]]]]],[2009,11,2032,26,[1,"<|",1,[2009,11,2009,57,[0,[[2009,11,2009,15,[2,[],"test"]],[2009,16,2009,57,[5,"nested generics without canonical order"]]]]],[2010,13,2032,26,[18,[[[2010,14,2010,16,[1]]],[2011,17,2032,26,[1,"|>",0,[2011,17,2019,55,[1,"|>",0,[2011,17,2018,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 { x : Int, y : Int })\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[2019,24,2019,55,[0,[[2019,24,2019,39,[2,["Review","Test"],"run"]],[2019,40,2019,55,[7,[2019,41,2019,54,[0,[[2019,41,2019,45,[2,[],"rule"]],[2019,46,2019,54,[2,[],"defaults"]]]]]]]]]]]],[2020,24,2032,26,[0,[[2020,24,2020,48,[2,["Review","Test"],"expectErrors"]],[2021,25,2032,26,[9,[[2021,27,2031,4,[1,"|>",0,[2021,27,2022,120,[1,"|>",0,[2021,27,2021,40,[2,[],"unsortedError"]],[2022,32,2022,120,[0,[[2022,32,2022,53,[2,["Review","Test"],"atExactly"]],[2022,54,2022,120,[8,[[2022,56,2022,87,[[2022,56,2022,61,"start"],[2022,64,2022,87,[8,[[2022,66,2022,73,[[2022,66,2022,69,"row"],[2022,72,2022,73,[3,7]]]],[2022,75,2022,86,[[2022,75,2022,81,"column"],[2022,84,2022,85,[3,5]]]]]]]]],[2022,89,2022,119,[[2022,89,2022,92,"end"],[2022,95,2022,118,[8,[[2022,97,2022,104,[[2022,97,2022,100,"row"],[2022,103,2022,104,[3,7]]]],[2022,106,2022,117,[[2022,106,2022,112,"column"],[2022,115,2022,116,[3,6]]]]]]]]]]]]]]]]],[2023,32,2031,4,[0,[[2023,32,2023,53,[2,["Review","Test"],"whenFixed"]],[2024,33,2031,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 { x : Int, y : Int })\na = { x = 6, y = 2, yi = 3, er = 2, san = 0, foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2033,11,2051,26,[1,"<|",1,[2033,11,2033,67,[0,[[2033,11,2033,15,[2,[],"test"]],[2033,16,2033,67,[5,"nested generics without canonical order ambiguous"]]]]],[2034,13,2051,26,[18,[[[2034,14,2034,16,[1]]],[2035,17,2051,26,[1,"|>",0,[2035,17,2046,26,[1,"|>",0,[2035,17,2041,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[2042,24,2046,26,[0,[[2042,24,2042,39,[2,["Review","Test"],"run"]],[2043,25,2046,26,[7,[2043,26,2045,36,[1,"|>",0,[2043,26,2044,64,[1,"|>",0,[2043,26,2043,34,[2,[],"defaults"]],[2044,32,2044,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[2045,32,2045,36,[2,[],"rule"]]]]]]]]]]],[2047,24,2051,26,[0,[[2047,24,2047,48,[2,["Review","Test"],"expectErrors"]],[2048,25,2051,26,[9,[[2048,27,2050,99,[0,[[2048,27,2048,47,[2,[],"ambiguousRecordError"]],[2049,29,2049,83,[9,[[2049,31,2049,55,[5,"A.Generic (A.Generic2)"]],[2049,57,2049,81,[5,"A.Generic2 (A.Generic)"]]]]],[2050,29,2050,99,[5,"{ san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }"]]]]]]]]]]]]]]]]]],[2052,11,2070,26,[1,"<|",1,[2052,11,2052,69,[0,[[2052,11,2052,15,[2,[],"test"]],[2052,16,2052,69,[5,"nested generics without canonical order report only"]]]]],[2053,13,2070,26,[18,[[[2053,14,2053,16,[1]]],[2054,17,2070,26,[1,"|>",0,[2054,17,2066,26,[1,"|>",0,[2054,17,2061,4,[5,"module A exposing (..)\n\ntype alias Generic rec = { rec | foo : Int, bar : Int, baz : Int }\ntype alias Generic2 rec = { rec | yi : Int, er : Int, san : Int }\n\na : Generic (Generic2 { x : Int, y : Int })\na = { san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }\n"]],[2062,24,2066,26,[0,[[2062,24,2062,39,[2,["Review","Test"],"run"]],[2063,25,2066,26,[7,[2063,26,2065,36,[1,"|>",0,[2063,26,2064,62,[1,"|>",0,[2063,26,2063,34,[2,[],"defaults"]],[2064,32,2064,62,[2,[],"reportUnknownRecordsWithoutFix"]]]],[2065,32,2065,36,[2,[],"rule"]]]]]]]]]]],[2067,24,2070,26,[0,[[2067,24,2067,48,[2,["Review","Test"],"expectErrors"]],[2068,25,2070,26,[9,[[2068,27,2068,116,[0,[[2068,27,2068,45,[2,[],"unknownRecordError"]],[2068,46,2068,116,[5,"{ san = 0, bar = 2, x = 6, yi = 3, er = 2, y = 2, foo = 1, baz = 3 }"]]]]],[2069,27,2069,68,[0,[[2069,27,2069,45,[2,[],"unknownRecordError"]],[2069,46,2069,68,[5,"{ x : Int, y : Int }"]]]]]]]]]]]]]]]]]],[2071,11,2092,26,[1,"<|",1,[2071,11,2071,64,[0,[[2071,11,2071,15,[2,[],"test"]],[2071,16,2071,64,[5,"prefers canonical match over generic + unknown"]]]]],[2072,13,2092,26,[18,[[[2072,14,2072,16,[1]]],[2073,17,2092,26,[1,"|>",0,[2073,17,2080,55,[1,"|>",0,[2073,17,2079,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias Generic rec = { rec | bar : Int, foo : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[2080,24,2080,55,[0,[[2080,24,2080,39,[2,["Review","Test"],"run"]],[2080,40,2080,55,[7,[2080,41,2080,54,[0,[[2080,41,2080,45,[2,[],"rule"]],[2080,46,2080,54,[2,[],"defaults"]]]]]]]]]]]],[2081,24,2092,26,[0,[[2081,24,2081,48,[2,["Review","Test"],"expectErrors"]],[2082,25,2092,26,[9,[[2082,27,2091,4,[1,"|>",0,[2082,27,2083,120,[1,"|>",0,[2082,27,2082,40,[2,[],"unsortedError"]],[2083,32,2083,120,[0,[[2083,32,2083,53,[2,["Review","Test"],"atExactly"]],[2083,54,2083,120,[8,[[2083,56,2083,87,[[2083,56,2083,61,"start"],[2083,64,2083,87,[8,[[2083,66,2083,73,[[2083,66,2083,69,"row"],[2083,72,2083,73,[3,6]]]],[2083,75,2083,86,[[2083,75,2083,81,"column"],[2083,84,2083,85,[3,5]]]]]]]]],[2083,89,2083,119,[[2083,89,2083,92,"end"],[2083,95,2083,118,[8,[[2083,97,2083,104,[[2083,97,2083,100,"row"],[2083,103,2083,104,[3,6]]]],[2083,106,2083,117,[[2083,106,2083,112,"column"],[2083,115,2083,116,[3,6]]]]]]]]]]]]]]]]],[2084,32,2091,4,[0,[[2084,32,2084,53,[2,["Review","Test"],"whenFixed"]],[2085,33,2091,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias Generic rec = { rec | bar : Int, foo : Int }\n\na = { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2093,11,2109,110,[1,"<|",1,[2093,11,2093,74,[0,[[2093,11,2093,15,[2,[],"test"]],[2093,16,2093,74,[5,"does not prefer canonical match over generic + canonical"]]]]],[2094,13,2109,110,[18,[[[2094,14,2094,16,[1]]],[2095,17,2109,110,[1,"|>",0,[2095,17,2107,26,[1,"|>",0,[2095,17,2102,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { baz : Int }\ntype alias Generic rec = { rec | bar : Int, foo : Int }\n\na = { bar = 2, foo = 1, baz = 3 }\n"]],[2103,24,2107,26,[0,[[2103,24,2103,39,[2,["Review","Test"],"run"]],[2104,25,2107,26,[7,[2104,26,2106,36,[1,"|>",0,[2104,26,2105,64,[1,"|>",0,[2104,26,2104,34,[2,[],"defaults"]],[2105,32,2105,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[2106,32,2106,36,[2,[],"rule"]]]]]]]]]]],[2108,24,2109,110,[0,[[2108,24,2108,48,[2,["Review","Test"],"expectErrors"]],[2109,25,2109,110,[9,[[2109,27,2109,108,[0,[[2109,27,2109,47,[2,[],"ambiguousRecordError"]],[2109,48,2109,76,[9,[[2109,50,2109,55,[5,"A.A"]],[2109,57,2109,74,[5,"A.Generic (A.B)"]]]]],[2109,77,2109,108,[5,"{ bar = 2, foo = 1, baz = 3 }"]]]]]]]]]]]]]]]]]],[2110,11,2123,50,[1,"<|",1,[2110,11,2110,81,[0,[[2110,11,2110,15,[2,[],"test"]],[2110,16,2110,81,[5,"does not recurse infinitely when not all fields must be present"]]]]],[2111,13,2123,50,[18,[[[2111,14,2111,16,[1]]],[2112,17,2123,50,[1,"|>",0,[2112,17,2122,55,[1,"|>",0,[2112,17,2121,4,[5,"module A exposing (..)\n\ntype alias Generic a =\n    { a | unrelated : Int, foo : Int }\n\nfunc x =\n    case x of\n        { bar, baz, foo } ->\n            True\n"]],[2122,24,2122,55,[0,[[2122,24,2122,39,[2,["Review","Test"],"run"]],[2122,40,2122,55,[7,[2122,41,2122,54,[0,[[2122,41,2122,45,[2,[],"rule"]],[2122,46,2122,54,[2,[],"defaults"]]]]]]]]]]]],[2123,24,2123,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2124,11,2165,26,[1,"<|",1,[2124,11,2124,59,[0,[[2124,11,2124,15,[2,[],"test"]],[2124,16,2124,59,[5,"handles weird Elm nested generic behavior"]]]]],[2125,13,2165,26,[18,[[[2125,14,2125,16,[1]]],[2126,17,2165,26,[1,"|>",0,[2126,17,2145,26,[1,"|>",0,[2126,17,2140,4,[5,"module A exposing (..)\n\ntype alias Gen1 a =\n    { a | y : Int, x : Int }\n\n\ntype alias Gen2 b =\n    { b | x : Char, y : String }\n\ntype alias OtherRec = { y : String, x : Char }\n\na : Gen2 (Gen1 { x : String, y : Float })\na =\n    { y = \"bar\", x = 'a' }\n"]],[2141,24,2145,26,[0,[[2141,24,2141,39,[2,["Review","Test"],"run"]],[2142,25,2145,26,[7,[2142,26,2144,36,[1,"|>",0,[2142,26,2143,64,[1,"|>",0,[2142,26,2142,34,[2,[],"defaults"]],[2143,32,2143,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[2144,32,2144,36,[2,[],"rule"]]]]]]]]]]],[2146,24,2165,26,[0,[[2146,24,2146,48,[2,["Review","Test"],"expectErrors"]],[2147,25,2165,26,[9,[[2147,27,2164,4,[1,"|>",0,[2147,27,2148,122,[1,"|>",0,[2147,27,2147,40,[2,[],"unsortedError"]],[2148,32,2148,122,[0,[[2148,32,2148,53,[2,["Review","Test"],"atExactly"]],[2148,54,2148,122,[8,[[2148,56,2148,88,[[2148,56,2148,61,"start"],[2148,64,2148,88,[8,[[2148,66,2148,74,[[2148,66,2148,69,"row"],[2148,72,2148,74,[3,14]]]],[2148,76,2148,87,[[2148,76,2148,82,"column"],[2148,85,2148,86,[3,5]]]]]]]]],[2148,90,2148,121,[[2148,90,2148,93,"end"],[2148,96,2148,120,[8,[[2148,98,2148,106,[[2148,98,2148,101,"row"],[2148,104,2148,106,[3,14]]]],[2148,108,2148,119,[[2148,108,2148,114,"column"],[2148,117,2148,118,[3,6]]]]]]]]]]]]]]]]],[2149,32,2164,4,[0,[[2149,32,2149,53,[2,["Review","Test"],"whenFixed"]],[2150,33,2164,4,[5,"module A exposing (..)\n\ntype alias Gen1 a =\n    { a | y : Int, x : Int }\n\n\ntype alias Gen2 b =\n    { b | x : Char, y : String }\n\ntype alias OtherRec = { y : String, x : Char }\n\na : Gen2 (Gen1 { x : String, y : Float })\na =\n    { x = 'a' , y = \"bar\"}\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2169,1,2299,10,[0,[[0],[1,[2169,1,2169,27,[[2169,1,2169,20,"localBindingSupport"],[2169,23,2169,27,[1,[2169,23,2169,27,[[],"Test"]],[]]]]]],[2170,1,2299,10,[[2170,1,2170,20,"localBindingSupport"],[],[2171,5,2299,10,[0,[[2171,5,2171,13,[2,[],"describe"]],[2171,14,2171,50,[5,"disambiguates using local bindings"]],[2172,9,2299,10,[9,[[2172,11,2204,26,[1,"<|",1,[2172,11,2172,66,[0,[[2172,11,2172,15,[2,[],"test"]],[2172,16,2172,66,[5,"possible because of type annotation in let block"]]]]],[2173,13,2204,26,[18,[[[2173,14,2173,16,[1]]],[2174,17,2204,26,[1,"|>",0,[2174,17,2187,55,[1,"|>",0,[2174,17,2186,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc =\n    let\n        foo : A -> Bool\n        foo _ = True\n    in\n    foo { bar = 2, foo = 1, baz = 3 }\n"]],[2187,24,2187,55,[0,[[2187,24,2187,39,[2,["Review","Test"],"run"]],[2187,40,2187,55,[7,[2187,41,2187,54,[0,[[2187,41,2187,45,[2,[],"rule"]],[2187,46,2187,54,[2,[],"defaults"]]]]]]]]]]]],[2188,24,2204,26,[0,[[2188,24,2188,48,[2,["Review","Test"],"expectErrors"]],[2189,25,2204,26,[9,[[2189,27,2203,4,[1,"|>",0,[2189,27,2190,123,[1,"|>",0,[2189,27,2189,40,[2,[],"unsortedError"]],[2190,32,2190,123,[0,[[2190,32,2190,53,[2,["Review","Test"],"atExactly"]],[2190,54,2190,123,[8,[[2190,56,2190,88,[[2190,56,2190,61,"start"],[2190,64,2190,88,[8,[[2190,66,2190,74,[[2190,66,2190,69,"row"],[2190,72,2190,74,[3,12]]]],[2190,76,2190,87,[[2190,76,2190,82,"column"],[2190,85,2190,86,[3,9]]]]]]]]],[2190,90,2190,122,[[2190,90,2190,93,"end"],[2190,96,2190,121,[8,[[2190,98,2190,106,[[2190,98,2190,101,"row"],[2190,104,2190,106,[3,12]]]],[2190,108,2190,120,[[2190,108,2190,114,"column"],[2190,117,2190,119,[3,10]]]]]]]]]]]]]]]]],[2191,32,2203,4,[0,[[2191,32,2191,53,[2,["Review","Test"],"whenFixed"]],[2191,54,2203,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : Bool\nfunc =\n    let\n        foo : A -> Bool\n        foo _ = True\n    in\n    foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2205,11,2227,26,[1,"<|",1,[2205,11,2205,69,[0,[[2205,11,2205,15,[2,[],"test"]],[2205,16,2205,69,[5,"possible because of type annotation on function arg"]]]]],[2206,13,2227,26,[18,[[[2206,14,2206,16,[1]]],[2207,17,2227,26,[1,"|>",0,[2207,17,2215,55,[1,"|>",0,[2207,17,2214,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc foo = foo { bar = 2, foo = 1, baz = 3 }\n"]],[2215,24,2215,55,[0,[[2215,24,2215,39,[2,["Review","Test"],"run"]],[2215,40,2215,55,[7,[2215,41,2215,54,[0,[[2215,41,2215,45,[2,[],"rule"]],[2215,46,2215,54,[2,[],"defaults"]]]]]]]]]]]],[2216,24,2227,26,[0,[[2216,24,2216,48,[2,["Review","Test"],"expectErrors"]],[2217,25,2227,26,[9,[[2217,27,2226,4,[1,"|>",0,[2217,27,2218,122,[1,"|>",0,[2217,27,2217,40,[2,[],"unsortedError"]],[2218,32,2218,122,[0,[[2218,32,2218,53,[2,["Review","Test"],"atExactly"]],[2218,54,2218,122,[8,[[2218,56,2218,88,[[2218,56,2218,61,"start"],[2218,64,2218,88,[8,[[2218,66,2218,73,[[2218,66,2218,69,"row"],[2218,72,2218,73,[3,7]]]],[2218,75,2218,87,[[2218,75,2218,81,"column"],[2218,84,2218,86,[3,16]]]]]]]]],[2218,90,2218,121,[[2218,90,2218,93,"end"],[2218,96,2218,120,[8,[[2218,98,2218,105,[[2218,98,2218,101,"row"],[2218,104,2218,105,[3,7]]]],[2218,107,2218,119,[[2218,107,2218,113,"column"],[2218,116,2218,118,[3,17]]]]]]]]]]]]]]]]],[2219,32,2226,4,[0,[[2219,32,2219,53,[2,["Review","Test"],"whenFixed"]],[2219,54,2226,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc foo = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2228,11,2250,26,[1,"<|",1,[2228,11,2228,48,[0,[[2228,11,2228,15,[2,[],"test"]],[2228,16,2228,48,[5,"possible because of lambda arg"]]]]],[2229,13,2250,26,[18,[[[2229,14,2229,16,[1]]],[2230,17,2250,26,[1,"|>",0,[2230,17,2238,55,[1,"|>",0,[2230,17,2237,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc = \\foo -> foo { bar = 2, foo = 1, baz = 3 }\n"]],[2238,24,2238,55,[0,[[2238,24,2238,39,[2,["Review","Test"],"run"]],[2238,40,2238,55,[7,[2238,41,2238,54,[0,[[2238,41,2238,45,[2,[],"rule"]],[2238,46,2238,54,[2,[],"defaults"]]]]]]]]]]]],[2239,24,2250,26,[0,[[2239,24,2239,48,[2,["Review","Test"],"expectErrors"]],[2240,25,2250,26,[9,[[2240,27,2249,4,[1,"|>",0,[2240,27,2241,122,[1,"|>",0,[2240,27,2240,40,[2,[],"unsortedError"]],[2241,32,2241,122,[0,[[2241,32,2241,53,[2,["Review","Test"],"atExactly"]],[2241,54,2241,122,[8,[[2241,56,2241,88,[[2241,56,2241,61,"start"],[2241,64,2241,88,[8,[[2241,66,2241,73,[[2241,66,2241,69,"row"],[2241,72,2241,73,[3,7]]]],[2241,75,2241,87,[[2241,75,2241,81,"column"],[2241,84,2241,86,[3,20]]]]]]]]],[2241,90,2241,121,[[2241,90,2241,93,"end"],[2241,96,2241,120,[8,[[2241,98,2241,105,[[2241,98,2241,101,"row"],[2241,104,2241,105,[3,7]]]],[2241,107,2241,119,[[2241,107,2241,113,"column"],[2241,116,2241,118,[3,21]]]]]]]]]]]]]]]]],[2242,32,2249,4,[0,[[2242,32,2242,53,[2,["Review","Test"],"whenFixed"]],[2242,54,2249,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : (A -> Bool) -> Bool\nfunc = \\foo -> foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2251,11,2273,26,[1,"<|",1,[2251,11,2251,43,[0,[[2251,11,2251,15,[2,[],"test"]],[2251,16,2251,43,[5,"works with record pattern"]]]]],[2252,13,2273,26,[18,[[[2252,14,2252,16,[1]]],[2253,17,2273,26,[1,"|>",0,[2253,17,2261,55,[1,"|>",0,[2253,17,2260,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { field : Int, foo : (A -> Bool) } -> Bool\nfunc { field, foo } = foo { bar = 2, foo = 1, baz = 3 }\n"]],[2261,24,2261,55,[0,[[2261,24,2261,39,[2,["Review","Test"],"run"]],[2261,40,2261,55,[7,[2261,41,2261,54,[0,[[2261,41,2261,45,[2,[],"rule"]],[2261,46,2261,54,[2,[],"defaults"]]]]]]]]]]]],[2262,24,2273,26,[0,[[2262,24,2262,48,[2,["Review","Test"],"expectErrors"]],[2263,25,2273,26,[9,[[2263,27,2272,4,[1,"|>",0,[2263,27,2264,122,[1,"|>",0,[2263,27,2263,40,[2,[],"unsortedError"]],[2264,32,2264,122,[0,[[2264,32,2264,53,[2,["Review","Test"],"atExactly"]],[2264,54,2264,122,[8,[[2264,56,2264,88,[[2264,56,2264,61,"start"],[2264,64,2264,88,[8,[[2264,66,2264,73,[[2264,66,2264,69,"row"],[2264,72,2264,73,[3,7]]]],[2264,75,2264,87,[[2264,75,2264,81,"column"],[2264,84,2264,86,[3,27]]]]]]]]],[2264,90,2264,121,[[2264,90,2264,93,"end"],[2264,96,2264,120,[8,[[2264,98,2264,105,[[2264,98,2264,101,"row"],[2264,104,2264,105,[3,7]]]],[2264,107,2264,119,[[2264,107,2264,113,"column"],[2264,116,2264,118,[3,28]]]]]]]]]]]]]]]]],[2265,32,2272,4,[0,[[2265,32,2265,53,[2,["Review","Test"],"whenFixed"]],[2265,54,2272,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : { field : Int, foo : (A -> Bool) } -> Bool\nfunc { field, foo } = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2274,11,2298,26,[1,"<|",1,[2274,11,2274,42,[0,[[2274,11,2274,15,[2,[],"test"]],[2274,16,2274,42,[5,"works with named pattern"]]]]],[2275,13,2298,26,[18,[[[2275,14,2275,16,[1]]],[2276,17,2298,26,[1,"|>",0,[2276,17,2285,55,[1,"|>",0,[2276,17,2284,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\ntype Custom = Custom In (A -> Bool)\n\nfunc : Custom -> Bool\nfunc (Custom field foo) = foo { bar = 2, foo = 1, baz = 3 }\n"]],[2285,24,2285,55,[0,[[2285,24,2285,39,[2,["Review","Test"],"run"]],[2285,40,2285,55,[7,[2285,41,2285,54,[0,[[2285,41,2285,45,[2,[],"rule"]],[2285,46,2285,54,[2,[],"defaults"]]]]]]]]]]]],[2286,24,2298,26,[0,[[2286,24,2286,48,[2,["Review","Test"],"expectErrors"]],[2287,25,2298,26,[9,[[2287,27,2297,4,[1,"|>",0,[2287,27,2288,122,[1,"|>",0,[2287,27,2287,40,[2,[],"unsortedError"]],[2288,32,2288,122,[0,[[2288,32,2288,53,[2,["Review","Test"],"atExactly"]],[2288,54,2288,122,[8,[[2288,56,2288,88,[[2288,56,2288,61,"start"],[2288,64,2288,88,[8,[[2288,66,2288,73,[[2288,66,2288,69,"row"],[2288,72,2288,73,[3,8]]]],[2288,75,2288,87,[[2288,75,2288,81,"column"],[2288,84,2288,86,[3,31]]]]]]]]],[2288,90,2288,121,[[2288,90,2288,93,"end"],[2288,96,2288,120,[8,[[2288,98,2288,105,[[2288,98,2288,101,"row"],[2288,104,2288,105,[3,8]]]],[2288,107,2288,119,[[2288,107,2288,113,"column"],[2288,116,2288,118,[3,32]]]]]]]]]]]]]]]]],[2289,32,2297,4,[0,[[2289,32,2289,53,[2,["Review","Test"],"whenFixed"]],[2289,54,2297,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\ntype Custom = Custom In (A -> Bool)\n\nfunc : Custom -> Bool\nfunc (Custom field foo) = foo { foo = 1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2302,1,2562,10,[0,[[0],[1,[2302,1,2302,34,[[2302,1,2302,27,"simpleTypeInferenceSupport"],[2302,30,2302,34,[1,[2302,30,2302,34,[[],"Test"]],[]]]]]],[2303,1,2562,10,[[2303,1,2303,27,"simpleTypeInferenceSupport"],[],[2304,5,2562,10,[0,[[2304,5,2304,13,[2,[],"describe"]],[2304,14,2304,41,[5,"infers record field types"]],[2305,9,2562,10,[9,[[2305,11,2326,26,[1,"<|",1,[2305,11,2305,42,[0,[[2305,11,2305,15,[2,[],"test"]],[2305,16,2305,42,[5,"can disambiguate by type"]]]]],[2306,13,2326,26,[18,[[[2306,14,2306,16,[1]]],[2307,17,2326,26,[1,"|>",0,[2307,17,2314,55,[1,"|>",0,[2307,17,2313,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : List (List Int), baz : Char }\ntype alias B = { bar : List (List String), foo : Int, baz : Char }\n\nfunc = { bar = [ [], ([3, 4]) ], foo = 3, baz = '2' }\n"]],[2314,24,2314,55,[0,[[2314,24,2314,39,[2,["Review","Test"],"run"]],[2314,40,2314,55,[7,[2314,41,2314,54,[0,[[2314,41,2314,45,[2,[],"rule"]],[2314,46,2314,54,[2,[],"defaults"]]]]]]]]]]]],[2315,24,2326,26,[0,[[2315,24,2315,48,[2,["Review","Test"],"expectErrors"]],[2316,25,2326,26,[9,[[2316,27,2325,4,[1,"|>",0,[2316,27,2317,120,[1,"|>",0,[2316,27,2316,40,[2,[],"unsortedError"]],[2317,32,2317,120,[0,[[2317,32,2317,53,[2,["Review","Test"],"atExactly"]],[2317,54,2317,120,[8,[[2317,56,2317,87,[[2317,56,2317,61,"start"],[2317,64,2317,87,[8,[[2317,66,2317,73,[[2317,66,2317,69,"row"],[2317,72,2317,73,[3,6]]]],[2317,75,2317,86,[[2317,75,2317,81,"column"],[2317,84,2317,85,[3,8]]]]]]]]],[2317,89,2317,119,[[2317,89,2317,92,"end"],[2317,95,2317,118,[8,[[2317,97,2317,104,[[2317,97,2317,100,"row"],[2317,103,2317,104,[3,6]]]],[2317,106,2317,117,[[2317,106,2317,112,"column"],[2317,115,2317,116,[3,9]]]]]]]]]]]]]]]]],[2318,32,2325,4,[0,[[2318,32,2318,53,[2,["Review","Test"],"whenFixed"]],[2319,33,2325,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : List (List Int), baz : Char }\ntype alias B = { bar : List (List String), foo : Int, baz : Char }\n\nfunc = { foo = 3, bar = [ [], ([3, 4]) ], baz = '2' }\n"]]]]]]]]]]]]]]]]]]]],[2327,11,2336,50,[1,"<|",1,[2327,11,2327,53,[0,[[2327,11,2327,15,[2,[],"test"]],[2327,16,2327,53,[5,"does not incorrectly infer Nothings"]]]]],[2328,13,2336,50,[18,[[[2328,14,2328,16,[1]]],[2329,17,2336,50,[1,"|>",0,[2329,17,2335,55,[1,"|>",0,[2329,17,2334,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Maybe Int, bar : Maybe Float }\n\na = { foo = Nothing, bar = Nothing }\n"]],[2335,24,2335,55,[0,[[2335,24,2335,39,[2,["Review","Test"],"run"]],[2335,40,2335,55,[7,[2335,41,2335,54,[0,[[2335,41,2335,45,[2,[],"rule"]],[2335,46,2335,54,[2,[],"defaults"]]]]]]]]]]]],[2336,24,2336,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2337,11,2346,50,[1,"<|",1,[2337,11,2337,60,[0,[[2337,11,2337,15,[2,[],"test"]],[2337,16,2337,60,[5,"does not incorrectly infer nested Nothings"]]]]],[2338,13,2346,50,[18,[[[2338,14,2338,16,[1]]],[2339,17,2346,50,[1,"|>",0,[2339,17,2345,55,[1,"|>",0,[2339,17,2344,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Maybe Int, bar : Maybe Float }, er : Int }\n\na = { yi = { foo = Nothing, bar = Nothing }, er = 2 }\n"]],[2345,24,2345,55,[0,[[2345,24,2345,39,[2,["Review","Test"],"run"]],[2345,40,2345,55,[7,[2345,41,2345,54,[0,[[2345,41,2345,45,[2,[],"rule"]],[2345,46,2345,54,[2,[],"defaults"]]]]]]]]]]]],[2346,24,2346,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2347,11,2368,26,[1,"<|",1,[2347,11,2347,32,[0,[[2347,11,2347,15,[2,[],"test"]],[2347,16,2347,32,[5,"infers lambdas"]]]]],[2348,13,2368,26,[18,[[[2348,14,2348,16,[1]]],[2349,17,2368,26,[1,"|>",0,[2349,17,2356,55,[1,"|>",0,[2349,17,2355,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int -> Int, baz : Char }\ntype alias B = { bar : Int, foo : Int, baz : Char }\n\nfunc = { bar = \\i -> i + 1, foo = 3, baz = '2' }\n"]],[2356,24,2356,55,[0,[[2356,24,2356,39,[2,["Review","Test"],"run"]],[2356,40,2356,55,[7,[2356,41,2356,54,[0,[[2356,41,2356,45,[2,[],"rule"]],[2356,46,2356,54,[2,[],"defaults"]]]]]]]]]]]],[2357,24,2368,26,[0,[[2357,24,2357,48,[2,["Review","Test"],"expectErrors"]],[2358,25,2368,26,[9,[[2358,27,2367,4,[1,"|>",0,[2358,27,2359,120,[1,"|>",0,[2358,27,2358,40,[2,[],"unsortedError"]],[2359,32,2359,120,[0,[[2359,32,2359,53,[2,["Review","Test"],"atExactly"]],[2359,54,2359,120,[8,[[2359,56,2359,87,[[2359,56,2359,61,"start"],[2359,64,2359,87,[8,[[2359,66,2359,73,[[2359,66,2359,69,"row"],[2359,72,2359,73,[3,6]]]],[2359,75,2359,86,[[2359,75,2359,81,"column"],[2359,84,2359,85,[3,8]]]]]]]]],[2359,89,2359,119,[[2359,89,2359,92,"end"],[2359,95,2359,118,[8,[[2359,97,2359,104,[[2359,97,2359,100,"row"],[2359,103,2359,104,[3,6]]]],[2359,106,2359,117,[[2359,106,2359,112,"column"],[2359,115,2359,116,[3,9]]]]]]]]]]]]]]]]],[2360,32,2367,4,[0,[[2360,32,2360,53,[2,["Review","Test"],"whenFixed"]],[2361,33,2367,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int -> Int, baz : Char }\ntype alias B = { bar : Int, foo : Int, baz : Char }\n\nfunc = { foo = 3, bar = \\i -> i + 1, baz = '2' }\n"]]]]]]]]]]]]]]]]]]]],[2369,11,2390,26,[1,"<|",1,[2369,11,2369,60,[0,[[2369,11,2369,15,[2,[],"test"]],[2369,16,2369,60,[5,"can disambiguate by type with record types"]]]]],[2370,13,2390,26,[18,[[[2370,14,2370,16,[1]]],[2371,17,2390,26,[1,"|>",0,[2371,17,2378,55,[1,"|>",0,[2371,17,2377,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc = { bar = 2, foo = { a = 3, b = \"b\" }, baz = { a = 2, b = \"r\" }.a }\n"]],[2378,24,2378,55,[0,[[2378,24,2378,39,[2,["Review","Test"],"run"]],[2378,40,2378,55,[7,[2378,41,2378,54,[0,[[2378,41,2378,45,[2,[],"rule"]],[2378,46,2378,54,[2,[],"defaults"]]]]]]]]]]]],[2379,24,2390,26,[0,[[2379,24,2379,48,[2,["Review","Test"],"expectErrors"]],[2380,25,2390,26,[9,[[2380,27,2389,4,[1,"|>",0,[2380,27,2381,120,[1,"|>",0,[2380,27,2380,40,[2,[],"unsortedError"]],[2381,32,2381,120,[0,[[2381,32,2381,53,[2,["Review","Test"],"atExactly"]],[2381,54,2381,120,[8,[[2381,56,2381,87,[[2381,56,2381,61,"start"],[2381,64,2381,87,[8,[[2381,66,2381,73,[[2381,66,2381,69,"row"],[2381,72,2381,73,[3,6]]]],[2381,75,2381,86,[[2381,75,2381,81,"column"],[2381,84,2381,85,[3,8]]]]]]]]],[2381,89,2381,119,[[2381,89,2381,92,"end"],[2381,95,2381,118,[8,[[2381,97,2381,104,[[2381,97,2381,100,"row"],[2381,103,2381,104,[3,6]]]],[2381,106,2381,117,[[2381,106,2381,112,"column"],[2381,115,2381,116,[3,9]]]]]]]]]]]]]]]]],[2382,32,2389,4,[0,[[2382,32,2382,53,[2,["Review","Test"],"whenFixed"]],[2383,33,2389,4,[5,"module A exposing (..)\n\ntype alias A = { foo : { a : Int, b : String }, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : {a : String, b : String }, baz : Int }\n\nfunc = { foo = { a = 3, b = \"b\" }, bar = 2, baz = { a = 2, b = \"r\" }.a }\n"]]]]]]]]]]]]]]]]]]]],[2391,11,2419,26,[1,"<|",1,[2391,11,2391,48,[0,[[2391,11,2391,15,[2,[],"test"]],[2391,16,2391,48,[5,"infers let destructuring types"]]]]],[2392,13,2419,26,[18,[[[2392,14,2392,16,[1]]],[2393,17,2419,26,[1,"|>",0,[2393,17,2404,55,[1,"|>",0,[2393,17,2403,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc =\n    let\n        { bar, foo, baz } = A 1 \"string\" 3\n    in\n    { foo = foo, bar = bar, baz = baz }\n"]],[2404,24,2404,55,[0,[[2404,24,2404,39,[2,["Review","Test"],"run"]],[2404,40,2404,55,[7,[2404,41,2404,54,[0,[[2404,41,2404,45,[2,[],"rule"]],[2404,46,2404,54,[2,[],"defaults"]]]]]]]]]]]],[2405,24,2419,26,[0,[[2405,24,2405,48,[2,["Review","Test"],"expectErrors"]],[2406,25,2419,26,[9,[[2406,27,2418,4,[1,"|>",0,[2406,27,2407,121,[1,"|>",0,[2406,27,2406,40,[2,[],"unsortedError"]],[2407,32,2407,121,[0,[[2407,32,2407,53,[2,["Review","Test"],"atExactly"]],[2407,54,2407,121,[8,[[2407,56,2407,87,[[2407,56,2407,61,"start"],[2407,64,2407,87,[8,[[2407,66,2407,73,[[2407,66,2407,69,"row"],[2407,72,2407,73,[3,8]]]],[2407,75,2407,86,[[2407,75,2407,81,"column"],[2407,84,2407,85,[3,9]]]]]]]]],[2407,89,2407,120,[[2407,89,2407,92,"end"],[2407,95,2407,119,[8,[[2407,97,2407,104,[[2407,97,2407,100,"row"],[2407,103,2407,104,[3,8]]]],[2407,106,2407,118,[[2407,106,2407,112,"column"],[2407,115,2407,117,[3,10]]]]]]]]]]]]]]]]],[2408,32,2418,4,[0,[[2408,32,2408,53,[2,["Review","Test"],"whenFixed"]],[2408,54,2418,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc =\n    let\n        { foo, bar, baz } = A 1 \"string\" 3\n    in\n    { foo = foo, bar = bar, baz = baz }\n"]]]]]]]]]]]]]]]]]]]],[2420,11,2448,26,[1,"<|",1,[2420,11,2420,43,[0,[[2420,11,2420,15,[2,[],"test"]],[2420,16,2420,43,[5,"infers case pattern types"]]]]],[2421,13,2448,26,[18,[[[2421,14,2421,16,[1]]],[2422,17,2448,26,[1,"|>",0,[2422,17,2433,55,[1,"|>",0,[2422,17,2432,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case {foo = 1, bar = s, baz = 2} of\n        {bar, foo, baz} ->\n            True\n"]],[2433,24,2433,55,[0,[[2433,24,2433,39,[2,["Review","Test"],"run"]],[2433,40,2433,55,[7,[2433,41,2433,54,[0,[[2433,41,2433,45,[2,[],"rule"]],[2433,46,2433,54,[2,[],"defaults"]]]]]]]]]]]],[2434,24,2448,26,[0,[[2434,24,2434,48,[2,["Review","Test"],"expectErrors"]],[2435,25,2448,26,[9,[[2435,27,2447,4,[1,"|>",0,[2435,27,2436,121,[1,"|>",0,[2435,27,2435,40,[2,[],"unsortedError"]],[2436,32,2436,121,[0,[[2436,32,2436,53,[2,["Review","Test"],"atExactly"]],[2436,54,2436,121,[8,[[2436,56,2436,87,[[2436,56,2436,61,"start"],[2436,64,2436,87,[8,[[2436,66,2436,73,[[2436,66,2436,69,"row"],[2436,72,2436,73,[3,9]]]],[2436,75,2436,86,[[2436,75,2436,81,"column"],[2436,84,2436,85,[3,9]]]]]]]]],[2436,89,2436,120,[[2436,89,2436,92,"end"],[2436,95,2436,119,[8,[[2436,97,2436,104,[[2436,97,2436,100,"row"],[2436,103,2436,104,[3,9]]]],[2436,106,2436,118,[[2436,106,2436,112,"column"],[2436,115,2436,117,[3,10]]]]]]]]]]]]]]]]],[2437,32,2447,4,[0,[[2437,32,2437,53,[2,["Review","Test"],"whenFixed"]],[2437,54,2447,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case {foo = 1, bar = s, baz = 2} of\n        {foo, bar, baz} ->\n            True\n"]]]]]]]]]]]]]]]]]]]],[2449,11,2479,26,[1,"<|",1,[2449,11,2449,47,[0,[[2449,11,2449,15,[2,[],"test"]],[2449,16,2449,47,[5,"assigns case pattern bindings"]]]]],[2450,13,2479,26,[18,[[[2450,14,2450,16,[1]]],[2451,17,2479,26,[1,"|>",0,[2451,17,2463,55,[1,"|>",0,[2451,17,2462,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case s of\n        \"True\" -> True\n        \"False\" -> False\n        str -> {bar = str, foo = 1, baz = 2}\n"]],[2463,24,2463,55,[0,[[2463,24,2463,39,[2,["Review","Test"],"run"]],[2463,40,2463,55,[7,[2463,41,2463,54,[0,[[2463,41,2463,45,[2,[],"rule"]],[2463,46,2463,54,[2,[],"defaults"]]]]]]]]]]]],[2464,24,2479,26,[0,[[2464,24,2464,48,[2,["Review","Test"],"expectErrors"]],[2465,25,2479,26,[9,[[2465,27,2478,4,[1,"|>",0,[2465,27,2466,124,[1,"|>",0,[2465,27,2465,40,[2,[],"unsortedError"]],[2466,32,2466,124,[0,[[2466,32,2466,53,[2,["Review","Test"],"atExactly"]],[2466,54,2466,124,[8,[[2466,56,2466,89,[[2466,56,2466,61,"start"],[2466,64,2466,89,[8,[[2466,66,2466,74,[[2466,66,2466,69,"row"],[2466,72,2466,74,[3,11]]]],[2466,76,2466,88,[[2466,76,2466,82,"column"],[2466,85,2466,87,[3,16]]]]]]]]],[2466,91,2466,123,[[2466,91,2466,94,"end"],[2466,97,2466,122,[8,[[2466,99,2466,107,[[2466,99,2466,102,"row"],[2466,105,2466,107,[3,11]]]],[2466,109,2466,121,[[2466,109,2466,115,"column"],[2466,118,2466,120,[3,17]]]]]]]]]]]]]]]]],[2467,32,2478,4,[0,[[2467,32,2467,53,[2,["Review","Test"],"whenFixed"]],[2467,54,2478,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : String, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : String -> Bool\nfunc s =\n    case s of\n        \"True\" -> True\n        \"False\" -> False\n        str -> {foo = 1, bar = str, baz = 2}\n"]]]]]]]]]]]]]]]]]]]],[2480,11,2508,26,[1,"<|",1,[2480,11,2480,51,[0,[[2480,11,2480,15,[2,[],"test"]],[2480,16,2480,51,[5,"infers record update with binding"]]]]],[2481,13,2508,26,[18,[[[2481,14,2481,16,[1]]],[2482,17,2508,26,[1,"|>",0,[2482,17,2493,55,[1,"|>",0,[2482,17,2492,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nr : A\nr = { foo = 1, bar = 2, baz = 3 }\n\nfunc =\n    { r | baz = 1, foo = 2 }\n"]],[2493,24,2493,55,[0,[[2493,24,2493,39,[2,["Review","Test"],"run"]],[2493,40,2493,55,[7,[2493,41,2493,54,[0,[[2493,41,2493,45,[2,[],"rule"]],[2493,46,2493,54,[2,[],"defaults"]]]]]]]]]]]],[2494,24,2508,26,[0,[[2494,24,2494,48,[2,["Review","Test"],"expectErrors"]],[2495,25,2508,26,[9,[[2495,27,2507,4,[1,"|>",0,[2495,27,2496,122,[1,"|>",0,[2495,27,2495,40,[2,[],"unsortedError"]],[2496,32,2496,122,[0,[[2496,32,2496,53,[2,["Review","Test"],"atExactly"]],[2496,54,2496,122,[8,[[2496,56,2496,88,[[2496,56,2496,61,"start"],[2496,64,2496,88,[8,[[2496,66,2496,74,[[2496,66,2496,69,"row"],[2496,72,2496,74,[3,10]]]],[2496,76,2496,87,[[2496,76,2496,82,"column"],[2496,85,2496,86,[3,5]]]]]]]]],[2496,90,2496,121,[[2496,90,2496,93,"end"],[2496,96,2496,120,[8,[[2496,98,2496,106,[[2496,98,2496,101,"row"],[2496,104,2496,106,[3,10]]]],[2496,108,2496,119,[[2496,108,2496,114,"column"],[2496,117,2496,118,[3,6]]]]]]]]]]]]]]]]],[2497,32,2507,4,[0,[[2497,32,2497,53,[2,["Review","Test"],"whenFixed"]],[2497,54,2507,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nr : A\nr = { foo = 1, bar = 2, baz = 3 }\n\nfunc =\n    { r | foo = 2 , baz = 1}\n"]]]]]]]]]]]]]]]]]]]],[2509,11,2535,26,[1,"<|",1,[2509,11,2509,38,[0,[[2509,11,2509,15,[2,[],"test"]],[2509,16,2509,38,[5,"unifies record types"]]]]],[2510,13,2535,26,[18,[[[2510,14,2510,16,[1]]],[2511,17,2535,26,[1,"|>",0,[2511,17,2521,55,[1,"|>",0,[2511,17,2520,4,[5,"module A exposing (..)\n\ntype alias A = { foo : String, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc r =\n    case List.head [ { r | baz = 1 }, { r | bar = 1 }, { r | foo = \"string\" } ] of\n        Just { bar, baz, foo } -> True\n        Nothing -> False\n"]],[2521,24,2521,55,[0,[[2521,24,2521,39,[2,["Review","Test"],"run"]],[2521,40,2521,55,[7,[2521,41,2521,54,[0,[[2521,41,2521,45,[2,[],"rule"]],[2521,46,2521,54,[2,[],"defaults"]]]]]]]]]]]],[2522,24,2535,26,[0,[[2522,24,2522,48,[2,["Review","Test"],"expectErrors"]],[2523,25,2535,26,[9,[[2523,27,2534,4,[1,"|>",0,[2523,27,2524,122,[1,"|>",0,[2523,27,2523,40,[2,[],"unsortedError"]],[2524,32,2524,122,[0,[[2524,32,2524,53,[2,["Review","Test"],"atExactly"]],[2524,54,2524,122,[8,[[2524,56,2524,88,[[2524,56,2524,61,"start"],[2524,64,2524,88,[8,[[2524,66,2524,73,[[2524,66,2524,69,"row"],[2524,72,2524,73,[3,8]]]],[2524,75,2524,87,[[2524,75,2524,81,"column"],[2524,84,2524,86,[3,14]]]]]]]]],[2524,90,2524,121,[[2524,90,2524,93,"end"],[2524,96,2524,120,[8,[[2524,98,2524,105,[[2524,98,2524,101,"row"],[2524,104,2524,105,[3,8]]]],[2524,107,2524,119,[[2524,107,2524,113,"column"],[2524,116,2524,118,[3,15]]]]]]]]]]]]]]]]],[2525,32,2534,4,[0,[[2525,32,2525,53,[2,["Review","Test"],"whenFixed"]],[2525,54,2534,4,[5,"module A exposing (..)\n\ntype alias A = { foo : String, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc r =\n    case List.head [ { r | baz = 1 }, { r | bar = 1 }, { r | foo = \"string\" } ] of\n        Just { foo, bar, baz } -> True\n        Nothing -> False\n"]]]]]]]]]]]]]]]]]]]],[2536,11,2548,50,[1,"<|",1,[2536,11,2536,50,[0,[[2536,11,2536,15,[2,[],"test"]],[2536,16,2536,50,[5,"assigns type vars when necessary"]]]]],[2537,13,2548,50,[18,[[[2537,14,2537,16,[1]]],[2538,17,2548,50,[1,"|>",0,[2538,17,2547,55,[1,"|>",0,[2538,17,2546,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : A\nfunc =\n    identity { foo = 1, bar = 2, baz = 3}\n"]],[2547,24,2547,55,[0,[[2547,24,2547,39,[2,["Review","Test"],"run"]],[2547,40,2547,55,[7,[2547,41,2547,54,[0,[[2547,41,2547,45,[2,[],"rule"]],[2547,46,2547,54,[2,[],"defaults"]]]]]]]]]]]],[2548,24,2548,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2549,11,2561,50,[1,"<|",1,[2549,11,2549,52,[0,[[2549,11,2549,15,[2,[],"test"]],[2549,16,2549,52,[5,"assigns type vars when necessary 2"]]]]],[2550,13,2561,50,[18,[[[2550,14,2550,16,[1]]],[2551,17,2561,50,[1,"|>",0,[2551,17,2560,55,[1,"|>",0,[2551,17,2559,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\ntype alias B = { bar : Int, foo : Int, baz : Int }\n\nfunc : a -> A\nfunc =\n    always { foo = 1, bar = 2, baz = 3}\n"]],[2560,24,2560,55,[0,[[2560,24,2560,39,[2,["Review","Test"],"run"]],[2560,40,2560,55,[7,[2560,41,2560,54,[0,[[2560,41,2560,45,[2,[],"rule"]],[2560,46,2560,54,[2,[],"defaults"]]]]]]]]]]]],[2561,24,2561,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2565,1,2950,10,[0,[[0],[1,[2565,1,2565,18,[[2565,1,2565,11,"subrecords"],[2565,14,2565,18,[1,[2565,14,2565,18,[[],"Test"]],[]]]]]],[2566,1,2950,10,[[2566,1,2566,11,"subrecords"],[],[2567,5,2950,10,[0,[[2567,5,2567,13,[2,[],"describe"]],[2567,14,2567,26,[5,"subrecords"]],[2568,9,2950,10,[9,[[2568,11,2596,26,[1,"<|",1,[2568,11,2568,56,[0,[[2568,11,2568,15,[2,[],"test"]],[2568,16,2568,56,[5,"are sorted by default in larger record"]]]]],[2569,13,2596,26,[18,[[[2569,14,2569,16,[1]]],[2570,17,2596,26,[1,"|>",0,[2570,17,2576,55,[1,"|>",0,[2570,17,2575,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { er = 1, yi = { bar = 2, foo = 1, baz = 3 } }\n"]],[2576,24,2576,55,[0,[[2576,24,2576,39,[2,["Review","Test"],"run"]],[2576,40,2576,55,[7,[2576,41,2576,54,[0,[[2576,41,2576,45,[2,[],"rule"]],[2576,46,2576,54,[2,[],"defaults"]]]]]]]]]]]],[2577,24,2596,26,[0,[[2577,24,2577,48,[2,["Review","Test"],"expectErrors"]],[2578,25,2596,26,[9,[[2578,27,2586,4,[1,"|>",0,[2578,27,2579,120,[1,"|>",0,[2578,27,2578,40,[2,[],"unsortedError"]],[2579,32,2579,120,[0,[[2579,32,2579,53,[2,["Review","Test"],"atExactly"]],[2579,54,2579,120,[8,[[2579,56,2579,87,[[2579,56,2579,61,"start"],[2579,64,2579,87,[8,[[2579,66,2579,73,[[2579,66,2579,69,"row"],[2579,72,2579,73,[3,5]]]],[2579,75,2579,86,[[2579,75,2579,81,"column"],[2579,84,2579,85,[3,8]]]]]]]]],[2579,89,2579,119,[[2579,89,2579,92,"end"],[2579,95,2579,118,[8,[[2579,97,2579,104,[[2579,97,2579,100,"row"],[2579,103,2579,104,[3,5]]]],[2579,106,2579,117,[[2579,106,2579,112,"column"],[2579,115,2579,116,[3,9]]]]]]]]]]]]]]]]],[2580,32,2586,4,[0,[[2580,32,2580,53,[2,["Review","Test"],"whenFixed"]],[2581,33,2586,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { yi = { bar = 2, foo = 1, baz = 3 } , er = 1}\n"]]]]]]],[2587,27,2595,4,[1,"|>",0,[2587,27,2588,122,[1,"|>",0,[2587,27,2587,40,[2,[],"unsortedError"]],[2588,32,2588,122,[0,[[2588,32,2588,53,[2,["Review","Test"],"atExactly"]],[2588,54,2588,122,[8,[[2588,56,2588,88,[[2588,56,2588,61,"start"],[2588,64,2588,88,[8,[[2588,66,2588,73,[[2588,66,2588,69,"row"],[2588,72,2588,73,[3,5]]]],[2588,75,2588,87,[[2588,75,2588,81,"column"],[2588,84,2588,86,[3,23]]]]]]]]],[2588,90,2588,121,[[2588,90,2588,93,"end"],[2588,96,2588,120,[8,[[2588,98,2588,105,[[2588,98,2588,101,"row"],[2588,104,2588,105,[3,5]]]],[2588,107,2588,119,[[2588,107,2588,113,"column"],[2588,116,2588,118,[3,24]]]]]]]]]]]]]]]]],[2589,32,2595,4,[0,[[2589,32,2589,53,[2,["Review","Test"],"whenFixed"]],[2590,33,2595,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { er = 1, yi = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[2597,11,2606,50,[1,"<|",1,[2597,11,2597,89,[0,[[2597,11,2597,15,[2,[],"test"]],[2597,16,2597,89,[5,"are not sorted by default from constructor when not part of constructor"]]]]],[2598,13,2606,50,[18,[[[2598,14,2598,16,[1]]],[2599,17,2606,50,[1,"|>",0,[2599,17,2605,55,[1,"|>",0,[2599,17,2604,4,[5,"module A exposing (..)\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, baz = 3, foo = 1 }\n"]],[2605,24,2605,55,[0,[[2605,24,2605,39,[2,["Review","Test"],"run"]],[2605,40,2605,55,[7,[2605,41,2605,54,[0,[[2605,41,2605,45,[2,[],"rule"]],[2605,46,2605,54,[2,[],"defaults"]]]]]]]]]]]],[2606,24,2606,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2607,11,2622,50,[1,"<|",1,[2607,11,2607,87,[0,[[2607,11,2607,15,[2,[],"test"]],[2607,16,2607,87,[5,"are sorted from constructor when not part of constructor with setting"]]]]],[2608,13,2622,50,[18,[[[2608,14,2608,16,[1]]],[2609,17,2622,50,[1,"|>",0,[2609,17,2621,26,[1,"|>",0,[2609,17,2616,4,[5,"module A exposing (..)\n\ntype alias Rec = { yi : { bar : Int, baz : Int, foo : Int }, er : Int }\n\ntype A = A { foo : Int, bar : Int, baz : Int }\n\nfunc = { foo = 1, bar = 2, baz = 3 }\n"]],[2617,24,2621,26,[0,[[2617,24,2617,39,[2,["Review","Test"],"run"]],[2618,25,2621,26,[7,[2618,26,2620,36,[1,"|>",0,[2618,26,2619,65,[1,"|>",0,[2618,26,2618,34,[2,[],"defaults"]],[2619,32,2619,65,[2,[],"treatCustomTypeRecordsAsCanonical"]]]],[2620,32,2620,36,[2,[],"rule"]]]]]]]]]]],[2622,24,2622,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2623,11,2654,26,[1,"<|",1,[2623,11,2623,77,[0,[[2623,11,2623,15,[2,[],"test"]],[2623,16,2623,77,[5,"are sorted by default in larger record with type annotation"]]]]],[2624,13,2654,26,[18,[[[2624,14,2624,16,[1]]],[2625,17,2654,26,[1,"|>",0,[2625,17,2632,55,[1,"|>",0,[2625,17,2631,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { er = 1, yi = { bar = 2, foo = 1, baz = 3 } }\n"]],[2632,24,2632,55,[0,[[2632,24,2632,39,[2,["Review","Test"],"run"]],[2632,40,2632,55,[7,[2632,41,2632,54,[0,[[2632,41,2632,45,[2,[],"rule"]],[2632,46,2632,54,[2,[],"defaults"]]]]]]]]]]]],[2633,24,2654,26,[0,[[2633,24,2633,48,[2,["Review","Test"],"expectErrors"]],[2634,25,2654,26,[9,[[2634,27,2643,4,[1,"|>",0,[2634,27,2635,120,[1,"|>",0,[2634,27,2634,40,[2,[],"unsortedError"]],[2635,32,2635,120,[0,[[2635,32,2635,53,[2,["Review","Test"],"atExactly"]],[2635,54,2635,120,[8,[[2635,56,2635,87,[[2635,56,2635,61,"start"],[2635,64,2635,87,[8,[[2635,66,2635,73,[[2635,66,2635,69,"row"],[2635,72,2635,73,[3,6]]]],[2635,75,2635,86,[[2635,75,2635,81,"column"],[2635,84,2635,85,[3,8]]]]]]]]],[2635,89,2635,119,[[2635,89,2635,92,"end"],[2635,95,2635,118,[8,[[2635,97,2635,104,[[2635,97,2635,100,"row"],[2635,103,2635,104,[3,6]]]],[2635,106,2635,117,[[2635,106,2635,112,"column"],[2635,115,2635,116,[3,9]]]]]]]]]]]]]]]]],[2636,32,2643,4,[0,[[2636,32,2636,53,[2,["Review","Test"],"whenFixed"]],[2637,33,2643,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { yi = { bar = 2, foo = 1, baz = 3 } , er = 1}\n"]]]]]]],[2644,27,2653,4,[1,"|>",0,[2644,27,2645,122,[1,"|>",0,[2644,27,2644,40,[2,[],"unsortedError"]],[2645,32,2645,122,[0,[[2645,32,2645,53,[2,["Review","Test"],"atExactly"]],[2645,54,2645,122,[8,[[2645,56,2645,88,[[2645,56,2645,61,"start"],[2645,64,2645,88,[8,[[2645,66,2645,73,[[2645,66,2645,69,"row"],[2645,72,2645,73,[3,6]]]],[2645,75,2645,87,[[2645,75,2645,81,"column"],[2645,84,2645,86,[3,23]]]]]]]]],[2645,90,2645,121,[[2645,90,2645,93,"end"],[2645,96,2645,120,[8,[[2645,98,2645,105,[[2645,98,2645,101,"row"],[2645,104,2645,105,[3,6]]]],[2645,107,2645,119,[[2645,107,2645,113,"column"],[2645,116,2645,118,[3,24]]]]]]]]]]]]]]]]],[2646,32,2653,4,[0,[[2646,32,2646,53,[2,["Review","Test"],"whenFixed"]],[2647,33,2653,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { er = 1, yi = { foo = 1, bar = 2, baz = 3 } }\n"]]]]]]]]]]]]]]]]]]]],[2655,11,2683,26,[1,"<|",1,[2655,11,2655,57,[0,[[2655,11,2655,15,[2,[],"test"]],[2655,16,2655,57,[5,"are sorted by default in sub sub record"]]]]],[2656,13,2683,26,[18,[[[2656,14,2656,16,[1]]],[2657,17,2683,26,[1,"|>",0,[2657,17,2663,55,[1,"|>",0,[2657,17,2662,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc = { outer = { er = 1, yi = { bar = 2, foo = 1, baz = 3 } } }\n"]],[2663,24,2663,55,[0,[[2663,24,2663,39,[2,["Review","Test"],"run"]],[2663,40,2663,55,[7,[2663,41,2663,54,[0,[[2663,41,2663,45,[2,[],"rule"]],[2663,46,2663,54,[2,[],"defaults"]]]]]]]]]]]],[2664,24,2683,26,[0,[[2664,24,2664,48,[2,["Review","Test"],"expectErrors"]],[2665,25,2683,26,[9,[[2665,27,2673,4,[1,"|>",0,[2665,27,2666,122,[1,"|>",0,[2665,27,2665,40,[2,[],"unsortedError"]],[2666,32,2666,122,[0,[[2666,32,2666,53,[2,["Review","Test"],"atExactly"]],[2666,54,2666,122,[8,[[2666,56,2666,88,[[2666,56,2666,61,"start"],[2666,64,2666,88,[8,[[2666,66,2666,73,[[2666,66,2666,69,"row"],[2666,72,2666,73,[3,5]]]],[2666,75,2666,87,[[2666,75,2666,81,"column"],[2666,84,2666,86,[3,18]]]]]]]]],[2666,90,2666,121,[[2666,90,2666,93,"end"],[2666,96,2666,120,[8,[[2666,98,2666,105,[[2666,98,2666,101,"row"],[2666,104,2666,105,[3,5]]]],[2666,107,2666,119,[[2666,107,2666,113,"column"],[2666,116,2666,118,[3,19]]]]]]]]]]]]]]]]],[2667,32,2673,4,[0,[[2667,32,2667,53,[2,["Review","Test"],"whenFixed"]],[2668,33,2673,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc = { outer = { yi = { bar = 2, foo = 1, baz = 3 } , er = 1} }\n"]]]]]]],[2674,27,2682,4,[1,"|>",0,[2674,27,2675,122,[1,"|>",0,[2674,27,2674,40,[2,[],"unsortedError"]],[2675,32,2675,122,[0,[[2675,32,2675,53,[2,["Review","Test"],"atExactly"]],[2675,54,2675,122,[8,[[2675,56,2675,88,[[2675,56,2675,61,"start"],[2675,64,2675,88,[8,[[2675,66,2675,73,[[2675,66,2675,69,"row"],[2675,72,2675,73,[3,5]]]],[2675,75,2675,87,[[2675,75,2675,81,"column"],[2675,84,2675,86,[3,33]]]]]]]]],[2675,90,2675,121,[[2675,90,2675,93,"end"],[2675,96,2675,120,[8,[[2675,98,2675,105,[[2675,98,2675,101,"row"],[2675,104,2675,105,[3,5]]]],[2675,107,2675,119,[[2675,107,2675,113,"column"],[2675,116,2675,118,[3,34]]]]]]]]]]]]]]]]],[2676,32,2682,4,[0,[[2676,32,2676,53,[2,["Review","Test"],"whenFixed"]],[2677,33,2682,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc = { outer = { er = 1, yi = { foo = 1, bar = 2, baz = 3 } } }\n"]]]]]]]]]]]]]]]]]]]],[2684,11,2703,26,[1,"<|",1,[2684,11,2684,79,[0,[[2684,11,2684,15,[2,[],"test"]],[2684,16,2684,79,[5,"are sorted by default in larger record with nested expression"]]]]],[2685,13,2703,26,[18,[[[2685,14,2685,16,[1]]],[2686,17,2703,26,[1,"|>",0,[2686,17,2692,55,[1,"|>",0,[2686,17,2691,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc = { yi = (0, [ { bar = 2, foo = 1, baz = 3 } ]), er = 1 }\n"]],[2692,24,2692,55,[0,[[2692,24,2692,39,[2,["Review","Test"],"run"]],[2692,40,2692,55,[7,[2692,41,2692,54,[0,[[2692,41,2692,45,[2,[],"rule"]],[2692,46,2692,54,[2,[],"defaults"]]]]]]]]]]]],[2693,24,2703,26,[0,[[2693,24,2693,48,[2,["Review","Test"],"expectErrors"]],[2694,25,2703,26,[9,[[2694,27,2702,4,[1,"|>",0,[2694,27,2695,122,[1,"|>",0,[2694,27,2694,40,[2,[],"unsortedError"]],[2695,32,2695,122,[0,[[2695,32,2695,53,[2,["Review","Test"],"atExactly"]],[2695,54,2695,122,[8,[[2695,56,2695,88,[[2695,56,2695,61,"start"],[2695,64,2695,88,[8,[[2695,66,2695,73,[[2695,66,2695,69,"row"],[2695,72,2695,73,[3,5]]]],[2695,75,2695,87,[[2695,75,2695,81,"column"],[2695,84,2695,86,[3,21]]]]]]]]],[2695,90,2695,121,[[2695,90,2695,93,"end"],[2695,96,2695,120,[8,[[2695,98,2695,105,[[2695,98,2695,101,"row"],[2695,104,2695,105,[3,5]]]],[2695,107,2695,119,[[2695,107,2695,113,"column"],[2695,116,2695,118,[3,22]]]]]]]]]]]]]]]]],[2696,32,2702,4,[0,[[2696,32,2696,53,[2,["Review","Test"],"whenFixed"]],[2697,33,2702,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc = { yi = (0, [ { foo = 1, bar = 2, baz = 3 } ]), er = 1 }\n"]]]]]]]]]]]]]]]]]]]],[2704,11,2735,26,[1,"<|",1,[2704,11,2704,59,[0,[[2704,11,2704,15,[2,[],"test"]],[2704,16,2704,59,[5,"are sorted by default in type annotations"]]]]],[2705,13,2735,26,[18,[[[2705,14,2705,16,[1]]],[2706,17,2735,26,[1,"|>",0,[2706,17,2713,55,[1,"|>",0,[2706,17,2712,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : { er : Int, yi : { bar : Int, foo : Int, baz : Int } }\nfunc = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 }\n"]],[2713,24,2713,55,[0,[[2713,24,2713,39,[2,["Review","Test"],"run"]],[2713,40,2713,55,[7,[2713,41,2713,54,[0,[[2713,41,2713,45,[2,[],"rule"]],[2713,46,2713,54,[2,[],"defaults"]]]]]]]]]]]],[2714,24,2735,26,[0,[[2714,24,2714,48,[2,["Review","Test"],"expectErrors"]],[2715,25,2735,26,[9,[[2715,27,2724,4,[1,"|>",0,[2715,27,2716,120,[1,"|>",0,[2715,27,2715,40,[2,[],"unsortedError"]],[2716,32,2716,120,[0,[[2716,32,2716,53,[2,["Review","Test"],"atExactly"]],[2716,54,2716,120,[8,[[2716,56,2716,87,[[2716,56,2716,61,"start"],[2716,64,2716,87,[8,[[2716,66,2716,73,[[2716,66,2716,69,"row"],[2716,72,2716,73,[3,5]]]],[2716,75,2716,86,[[2716,75,2716,81,"column"],[2716,84,2716,85,[3,8]]]]]]]]],[2716,89,2716,119,[[2716,89,2716,92,"end"],[2716,95,2716,118,[8,[[2716,97,2716,104,[[2716,97,2716,100,"row"],[2716,103,2716,104,[3,5]]]],[2716,106,2716,117,[[2716,106,2716,112,"column"],[2716,115,2716,116,[3,9]]]]]]]]]]]]]]]]],[2717,32,2724,4,[0,[[2717,32,2717,53,[2,["Review","Test"],"whenFixed"]],[2718,33,2724,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : { yi : { bar : Int, foo : Int, baz : Int } , er : Int}\nfunc = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 }\n"]]]]]]],[2725,27,2734,4,[1,"|>",0,[2725,27,2726,122,[1,"|>",0,[2725,27,2725,40,[2,[],"unsortedError"]],[2726,32,2726,122,[0,[[2726,32,2726,53,[2,["Review","Test"],"atExactly"]],[2726,54,2726,122,[8,[[2726,56,2726,88,[[2726,56,2726,61,"start"],[2726,64,2726,88,[8,[[2726,66,2726,73,[[2726,66,2726,69,"row"],[2726,72,2726,73,[3,5]]]],[2726,75,2726,87,[[2726,75,2726,81,"column"],[2726,84,2726,86,[3,25]]]]]]]]],[2726,90,2726,121,[[2726,90,2726,93,"end"],[2726,96,2726,120,[8,[[2726,98,2726,105,[[2726,98,2726,101,"row"],[2726,104,2726,105,[3,5]]]],[2726,107,2726,119,[[2726,107,2726,113,"column"],[2726,116,2726,118,[3,26]]]]]]]]]]]]]]]]],[2727,32,2734,4,[0,[[2727,32,2727,53,[2,["Review","Test"],"whenFixed"]],[2728,33,2734,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : { er : Int, yi : { foo : Int, bar : Int, baz : Int } }\nfunc = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 }\n"]]]]]]]]]]]]]]]]]]]],[2736,11,2767,26,[1,"<|",1,[2736,11,2736,76,[0,[[2736,11,2736,15,[2,[],"test"]],[2736,16,2736,76,[5,"are sorted by default in sub sub record of type annotation"]]]]],[2737,13,2767,26,[18,[[[2737,14,2737,16,[1]]],[2738,17,2767,26,[1,"|>",0,[2738,17,2745,55,[1,"|>",0,[2738,17,2744,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc : { outer : { er : Int, yi : { bar : Int, foo : Int, baz : Int } } }\nfunc = { outer = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 } }\n"]],[2745,24,2745,55,[0,[[2745,24,2745,39,[2,["Review","Test"],"run"]],[2745,40,2745,55,[7,[2745,41,2745,54,[0,[[2745,41,2745,45,[2,[],"rule"]],[2745,46,2745,54,[2,[],"defaults"]]]]]]]]]]]],[2746,24,2767,26,[0,[[2746,24,2746,48,[2,["Review","Test"],"expectErrors"]],[2747,25,2767,26,[9,[[2747,27,2756,4,[1,"|>",0,[2747,27,2748,122,[1,"|>",0,[2747,27,2747,40,[2,[],"unsortedError"]],[2748,32,2748,122,[0,[[2748,32,2748,53,[2,["Review","Test"],"atExactly"]],[2748,54,2748,122,[8,[[2748,56,2748,88,[[2748,56,2748,61,"start"],[2748,64,2748,88,[8,[[2748,66,2748,73,[[2748,66,2748,69,"row"],[2748,72,2748,73,[3,5]]]],[2748,75,2748,87,[[2748,75,2748,81,"column"],[2748,84,2748,86,[3,18]]]]]]]]],[2748,90,2748,121,[[2748,90,2748,93,"end"],[2748,96,2748,120,[8,[[2748,98,2748,105,[[2748,98,2748,101,"row"],[2748,104,2748,105,[3,5]]]],[2748,107,2748,119,[[2748,107,2748,113,"column"],[2748,116,2748,118,[3,19]]]]]]]]]]]]]]]]],[2749,32,2756,4,[0,[[2749,32,2749,53,[2,["Review","Test"],"whenFixed"]],[2750,33,2756,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc : { outer : { yi : { bar : Int, foo : Int, baz : Int } , er : Int} }\nfunc = { outer = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 } }\n"]]]]]]],[2757,27,2766,4,[1,"|>",0,[2757,27,2758,122,[1,"|>",0,[2757,27,2757,40,[2,[],"unsortedError"]],[2758,32,2758,122,[0,[[2758,32,2758,53,[2,["Review","Test"],"atExactly"]],[2758,54,2758,122,[8,[[2758,56,2758,88,[[2758,56,2758,61,"start"],[2758,64,2758,88,[8,[[2758,66,2758,73,[[2758,66,2758,69,"row"],[2758,72,2758,73,[3,5]]]],[2758,75,2758,87,[[2758,75,2758,81,"column"],[2758,84,2758,86,[3,35]]]]]]]]],[2758,90,2758,121,[[2758,90,2758,93,"end"],[2758,96,2758,120,[8,[[2758,98,2758,105,[[2758,98,2758,101,"row"],[2758,104,2758,105,[3,5]]]],[2758,107,2758,119,[[2758,107,2758,113,"column"],[2758,116,2758,118,[3,36]]]]]]]]]]]]]]]]],[2759,32,2766,4,[0,[[2759,32,2759,53,[2,["Review","Test"],"whenFixed"]],[2760,33,2766,4,[5,"module A exposing (..)\n\ntype alias A = { outer : { yi : { foo : Int, bar : Int, baz : Int }, er : Int } }\n\nfunc : { outer : { er : Int, yi : { foo : Int, bar : Int, baz : Int } } }\nfunc = { outer = { yi = { foo = 1, bar = 2, baz = 3 }, er = 1 } }\n"]]]]]]]]]]]]]]]]]]]],[2768,11,2789,26,[1,"<|",1,[2768,11,2768,98,[0,[[2768,11,2768,15,[2,[],"test"]],[2768,16,2768,98,[5,"are sorted by default in larger record with nested expression in type annotation"]]]]],[2769,13,2789,26,[18,[[[2769,14,2769,16,[1]]],[2770,17,2789,26,[1,"|>",0,[2770,17,2777,55,[1,"|>",0,[2770,17,2776,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc : { yi : (Int, List { bar : Int, foo : Int, baz : Int }), er : Int }\nfunc = { yi = (0, []), er = 1 }\n"]],[2777,24,2777,55,[0,[[2777,24,2777,39,[2,["Review","Test"],"run"]],[2777,40,2777,55,[7,[2777,41,2777,54,[0,[[2777,41,2777,45,[2,[],"rule"]],[2777,46,2777,54,[2,[],"defaults"]]]]]]]]]]]],[2778,24,2789,26,[0,[[2778,24,2778,48,[2,["Review","Test"],"expectErrors"]],[2779,25,2789,26,[9,[[2779,27,2788,4,[1,"|>",0,[2779,27,2780,122,[1,"|>",0,[2779,27,2779,40,[2,[],"unsortedError"]],[2780,32,2780,122,[0,[[2780,32,2780,53,[2,["Review","Test"],"atExactly"]],[2780,54,2780,122,[8,[[2780,56,2780,88,[[2780,56,2780,61,"start"],[2780,64,2780,88,[8,[[2780,66,2780,73,[[2780,66,2780,69,"row"],[2780,72,2780,73,[3,5]]]],[2780,75,2780,87,[[2780,75,2780,81,"column"],[2780,84,2780,86,[3,26]]]]]]]]],[2780,90,2780,121,[[2780,90,2780,93,"end"],[2780,96,2780,120,[8,[[2780,98,2780,105,[[2780,98,2780,101,"row"],[2780,104,2780,105,[3,5]]]],[2780,107,2780,119,[[2780,107,2780,113,"column"],[2780,116,2780,118,[3,27]]]]]]]]]]]]]]]]],[2781,32,2788,4,[0,[[2781,32,2781,53,[2,["Review","Test"],"whenFixed"]],[2782,33,2788,4,[5,"module A exposing (..)\n\ntype alias A = { yi : ( Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\n\nfunc : { yi : (Int, List { foo : Int, bar : Int, baz : Int }), er : Int }\nfunc = { yi = (0, []), er = 1 }\n"]]]]]]]]]]]]]]]]]]]],[2790,11,2813,26,[1,"<|",1,[2790,11,2790,62,[0,[[2790,11,2790,15,[2,[],"test"]],[2790,16,2790,62,[5,"are not sorted with setting in larger record"]]]]],[2791,13,2813,26,[18,[[[2791,14,2791,16,[1]]],[2792,17,2813,26,[1,"|>",0,[2792,17,2802,26,[1,"|>",0,[2792,17,2797,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { er = 1, yi = { bar = 2, baz = 3, foo = 1 } }\n"]],[2798,24,2802,26,[0,[[2798,24,2798,39,[2,["Review","Test"],"run"]],[2799,25,2802,26,[7,[2799,26,2801,36,[1,"|>",0,[2799,26,2800,56,[1,"|>",0,[2799,26,2799,34,[2,[],"defaults"]],[2800,32,2800,56,[2,[],"treatSubrecordsAsUnknown"]]]],[2801,32,2801,36,[2,[],"rule"]]]]]]]]]]],[2803,24,2813,26,[0,[[2803,24,2803,48,[2,["Review","Test"],"expectErrors"]],[2804,25,2813,26,[9,[[2804,27,2812,4,[1,"|>",0,[2804,27,2805,120,[1,"|>",0,[2804,27,2804,40,[2,[],"unsortedError"]],[2805,32,2805,120,[0,[[2805,32,2805,53,[2,["Review","Test"],"atExactly"]],[2805,54,2805,120,[8,[[2805,56,2805,87,[[2805,56,2805,61,"start"],[2805,64,2805,87,[8,[[2805,66,2805,73,[[2805,66,2805,69,"row"],[2805,72,2805,73,[3,5]]]],[2805,75,2805,86,[[2805,75,2805,81,"column"],[2805,84,2805,85,[3,8]]]]]]]]],[2805,89,2805,119,[[2805,89,2805,92,"end"],[2805,95,2805,118,[8,[[2805,97,2805,104,[[2805,97,2805,100,"row"],[2805,103,2805,104,[3,5]]]],[2805,106,2805,117,[[2805,106,2805,112,"column"],[2805,115,2805,116,[3,9]]]]]]]]]]]]]]]]],[2806,32,2812,4,[0,[[2806,32,2806,53,[2,["Review","Test"],"whenFixed"]],[2807,33,2812,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { yi = { bar = 2, baz = 3, foo = 1 } , er = 1}\n"]]]]]]]]]]]]]]]]]]]],[2814,11,2839,26,[1,"<|",1,[2814,11,2814,83,[0,[[2814,11,2814,15,[2,[],"test"]],[2814,16,2814,83,[5,"are not sorted with setting in larger record with type annotation"]]]]],[2815,13,2839,26,[18,[[[2815,14,2815,16,[1]]],[2816,17,2839,26,[1,"|>",0,[2816,17,2827,26,[1,"|>",0,[2816,17,2822,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { er = 1, yi = { bar = 2, baz = 3, foo = 1 } }\n"]],[2823,24,2827,26,[0,[[2823,24,2823,39,[2,["Review","Test"],"run"]],[2824,25,2827,26,[7,[2824,26,2826,36,[1,"|>",0,[2824,26,2825,56,[1,"|>",0,[2824,26,2824,34,[2,[],"defaults"]],[2825,32,2825,56,[2,[],"treatSubrecordsAsUnknown"]]]],[2826,32,2826,36,[2,[],"rule"]]]]]]]]]]],[2828,24,2839,26,[0,[[2828,24,2828,48,[2,["Review","Test"],"expectErrors"]],[2829,25,2839,26,[9,[[2829,27,2838,4,[1,"|>",0,[2829,27,2830,120,[1,"|>",0,[2829,27,2829,40,[2,[],"unsortedError"]],[2830,32,2830,120,[0,[[2830,32,2830,53,[2,["Review","Test"],"atExactly"]],[2830,54,2830,120,[8,[[2830,56,2830,87,[[2830,56,2830,61,"start"],[2830,64,2830,87,[8,[[2830,66,2830,73,[[2830,66,2830,69,"row"],[2830,72,2830,73,[3,6]]]],[2830,75,2830,86,[[2830,75,2830,81,"column"],[2830,84,2830,85,[3,8]]]]]]]]],[2830,89,2830,119,[[2830,89,2830,92,"end"],[2830,95,2830,118,[8,[[2830,97,2830,104,[[2830,97,2830,100,"row"],[2830,103,2830,104,[3,6]]]],[2830,106,2830,117,[[2830,106,2830,112,"column"],[2830,115,2830,116,[3,9]]]]]]]]]]]]]]]]],[2831,32,2838,4,[0,[[2831,32,2831,53,[2,["Review","Test"],"whenFixed"]],[2832,33,2838,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc : A\nfunc = { yi = { bar = 2, baz = 3, foo = 1 } , er = 1}\n"]]]]]]]]]]]]]]]]]]]],[2840,11,2855,50,[1,"<|",1,[2840,11,2840,62,[0,[[2840,11,2840,15,[2,[],"test"]],[2840,16,2840,62,[5,"are not sorted for custom types with setting"]]]]],[2841,13,2855,50,[18,[[[2841,14,2841,16,[1]]],[2842,17,2855,50,[1,"|>",0,[2842,17,2854,26,[1,"|>",0,[2842,17,2849,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = A { bar = 2, baz = 3, foo = 1 }\n"]],[2850,24,2854,26,[0,[[2850,24,2850,39,[2,["Review","Test"],"run"]],[2851,25,2854,26,[7,[2851,26,2853,36,[1,"|>",0,[2851,26,2852,56,[1,"|>",0,[2851,26,2851,34,[2,[],"defaults"]],[2852,32,2852,56,[2,[],"treatSubrecordsAsUnknown"]]]],[2853,32,2853,36,[2,[],"rule"]]]]]]]]]]],[2855,24,2855,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2856,11,2879,26,[1,"<|",1,[2856,11,2856,72,[0,[[2856,11,2856,15,[2,[],"test"]],[2856,16,2856,72,[5,"are sorted with setting when not in context from alias"]]]]],[2857,13,2879,26,[18,[[[2857,14,2857,16,[1]]],[2858,17,2879,26,[1,"|>",0,[2858,17,2868,26,[1,"|>",0,[2858,17,2863,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { bar = 2, baz = 3, foo = 1 }\n"]],[2864,24,2868,26,[0,[[2864,24,2864,39,[2,["Review","Test"],"run"]],[2865,25,2868,26,[7,[2865,26,2867,36,[1,"|>",0,[2865,26,2866,61,[1,"|>",0,[2865,26,2865,34,[2,[],"defaults"]],[2866,32,2866,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2867,32,2867,36,[2,[],"rule"]]]]]]]]]]],[2869,24,2879,26,[0,[[2869,24,2869,48,[2,["Review","Test"],"expectErrors"]],[2870,25,2879,26,[9,[[2870,27,2878,4,[1,"|>",0,[2870,27,2871,120,[1,"|>",0,[2870,27,2870,40,[2,[],"unsortedError"]],[2871,32,2871,120,[0,[[2871,32,2871,53,[2,["Review","Test"],"atExactly"]],[2871,54,2871,120,[8,[[2871,56,2871,87,[[2871,56,2871,61,"start"],[2871,64,2871,87,[8,[[2871,66,2871,73,[[2871,66,2871,69,"row"],[2871,72,2871,73,[3,5]]]],[2871,75,2871,86,[[2871,75,2871,81,"column"],[2871,84,2871,85,[3,8]]]]]]]]],[2871,89,2871,119,[[2871,89,2871,92,"end"],[2871,95,2871,118,[8,[[2871,97,2871,104,[[2871,97,2871,100,"row"],[2871,103,2871,104,[3,5]]]],[2871,106,2871,117,[[2871,106,2871,112,"column"],[2871,115,2871,116,[3,9]]]]]]]]]]]]]]]]],[2872,32,2878,4,[0,[[2872,32,2872,53,[2,["Review","Test"],"whenFixed"]],[2873,33,2878,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { foo = 1 , bar = 2, baz = 3}\n"]]]]]]]]]]]]]]]]]]]],[2880,11,2903,26,[1,"<|",1,[2880,11,2880,78,[0,[[2880,11,2880,15,[2,[],"test"]],[2880,16,2880,78,[5,"are sorted with setting when not in context from constructor"]]]]],[2881,13,2903,26,[18,[[[2881,14,2881,16,[1]]],[2882,17,2903,26,[1,"|>",0,[2882,17,2892,26,[1,"|>",0,[2882,17,2887,4,[5,"module A exposing (..)\n\ntype A = A { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { bar = 2, baz = 3, foo = 1 }\n"]],[2888,24,2892,26,[0,[[2888,24,2888,39,[2,["Review","Test"],"run"]],[2889,25,2892,26,[7,[2889,26,2891,36,[1,"|>",0,[2889,26,2890,61,[1,"|>",0,[2889,26,2889,34,[2,[],"defaults"]],[2890,32,2890,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2891,32,2891,36,[2,[],"rule"]]]]]]]]]]],[2893,24,2903,26,[0,[[2893,24,2893,48,[2,["Review","Test"],"expectErrors"]],[2894,25,2903,26,[9,[[2894,27,2902,4,[1,"|>",0,[2894,27,2895,120,[1,"|>",0,[2894,27,2894,40,[2,[],"unsortedError"]],[2895,32,2895,120,[0,[[2895,32,2895,53,[2,["Review","Test"],"atExactly"]],[2895,54,2895,120,[8,[[2895,56,2895,87,[[2895,56,2895,61,"start"],[2895,64,2895,87,[8,[[2895,66,2895,73,[[2895,66,2895,69,"row"],[2895,72,2895,73,[3,5]]]],[2895,75,2895,86,[[2895,75,2895,81,"column"],[2895,84,2895,85,[3,8]]]]]]]]],[2895,89,2895,119,[[2895,89,2895,92,"end"],[2895,95,2895,118,[8,[[2895,97,2895,104,[[2895,97,2895,100,"row"],[2895,103,2895,104,[3,5]]]],[2895,106,2895,117,[[2895,106,2895,112,"column"],[2895,115,2895,116,[3,9]]]]]]]]]]]]]]]]],[2896,32,2902,4,[0,[[2896,32,2896,53,[2,["Review","Test"],"whenFixed"]],[2897,33,2902,4,[5,"module A exposing (..)\n\ntype A = A { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\nfunc = { foo = 1 , bar = 2, baz = 3}\n"]]]]]]]]]]]]]]]]]]]],[2904,11,2922,26,[1,"<|",1,[2904,11,2904,63,[0,[[2904,11,2904,15,[2,[],"test"]],[2904,16,2904,63,[5,"handle ambiguity with subrecords with setting"]]]]],[2905,13,2922,26,[18,[[[2905,14,2905,16,[1]]],[2906,17,2922,26,[1,"|>",0,[2906,17,2919,26,[1,"|>",0,[2906,17,2913,4,[5,"module A exposing (..)\n\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na = { bar = 2, baz = 3, foo = 1 }\n"]],[2914,24,2919,26,[0,[[2914,24,2914,39,[2,["Review","Test"],"run"]],[2915,25,2919,26,[7,[2915,26,2918,36,[1,"|>",0,[2915,26,2917,64,[1,"|>",0,[2915,26,2916,61,[1,"|>",0,[2915,26,2915,34,[2,[],"defaults"]],[2916,32,2916,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2917,32,2917,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[2918,32,2918,36,[2,[],"rule"]]]]]]]]]]],[2920,24,2922,26,[0,[[2920,24,2920,48,[2,["Review","Test"],"expectErrors"]],[2921,25,2922,26,[9,[[2921,27,2921,106,[0,[[2921,27,2921,47,[2,[],"ambiguousRecordError"]],[2921,48,2921,74,[9,[[2921,50,2921,60,[5,"A.A arg0"]],[2921,62,2921,72,[5,"A.B arg0"]]]]],[2921,75,2921,106,[5,"{ bar = 2, baz = 3, foo = 1 }"]]]]]]]]]]]]]]]]]],[2923,11,2949,26,[1,"<|",1,[2923,11,2923,38,[0,[[2923,11,2923,15,[2,[],"test"]],[2923,16,2923,38,[5,"do not take priority"]]]]],[2924,13,2949,26,[18,[[[2924,14,2924,16,[1]]],[2925,17,2949,26,[1,"|>",0,[2925,17,2937,26,[1,"|>",0,[2925,17,2931,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\ntype alias B = { baz : Int, bar : Int, foo : Int }\n\nfunc = { foo = 1, bar = 2, baz = 3 }\n"]],[2932,24,2937,26,[0,[[2932,24,2932,39,[2,["Review","Test"],"run"]],[2933,25,2937,26,[7,[2933,26,2936,36,[1,"|>",0,[2933,26,2935,64,[1,"|>",0,[2933,26,2934,61,[1,"|>",0,[2933,26,2933,34,[2,[],"defaults"]],[2934,32,2934,61,[2,[],"treatAllSubrecordsAsCanonical"]]]],[2935,32,2935,64,[2,[],"reportAmbiguousRecordsWithoutFix"]]]],[2936,32,2936,36,[2,[],"rule"]]]]]]]]]]],[2938,24,2949,26,[0,[[2938,24,2938,48,[2,["Review","Test"],"expectErrors"]],[2939,25,2949,26,[9,[[2939,27,2948,4,[1,"|>",0,[2939,27,2940,120,[1,"|>",0,[2939,27,2939,40,[2,[],"unsortedError"]],[2940,32,2940,120,[0,[[2940,32,2940,53,[2,["Review","Test"],"atExactly"]],[2940,54,2940,120,[8,[[2940,56,2940,87,[[2940,56,2940,61,"start"],[2940,64,2940,87,[8,[[2940,66,2940,73,[[2940,66,2940,69,"row"],[2940,72,2940,73,[3,6]]]],[2940,75,2940,86,[[2940,75,2940,81,"column"],[2940,84,2940,85,[3,8]]]]]]]]],[2940,89,2940,119,[[2940,89,2940,92,"end"],[2940,95,2940,118,[8,[[2940,97,2940,104,[[2940,97,2940,100,"row"],[2940,103,2940,104,[3,6]]]],[2940,106,2940,117,[[2940,106,2940,112,"column"],[2940,115,2940,116,[3,9]]]]]]]]]]]]]]]]],[2941,32,2948,4,[0,[[2941,32,2941,53,[2,["Review","Test"],"whenFixed"]],[2942,33,2948,4,[5,"module A exposing (..)\n\ntype alias A = { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\ntype alias B = { baz : Int, bar : Int, foo : Int }\n\nfunc = { baz = 3 , bar = 2, foo = 1}\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2953,1,3000,10,[0,[[0],[1,[2953,1,2953,28,[[2953,1,2953,21,"typecheckUnambiguous"],[2953,24,2953,28,[1,[2953,24,2953,28,[[],"Test"]],[]]]]]],[2954,1,3000,10,[[2954,1,2954,21,"typecheckUnambiguous"],[],[2955,5,3000,10,[0,[[2955,5,2955,13,[2,[],"describe"]],[2955,14,2955,35,[5,"unambiguous records"]],[2956,9,3000,10,[9,[[2956,11,2975,26,[1,"<|",1,[2956,11,2956,49,[0,[[2956,11,2956,15,[2,[],"test"]],[2956,16,2956,49,[5,"are not type-checked by default"]]]]],[2957,13,2975,26,[18,[[[2957,14,2957,16,[1]]],[2958,17,2975,26,[1,"|>",0,[2958,17,2964,55,[1,"|>",0,[2958,17,2963,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, foo = 1.1, baz = 3 }\n"]],[2964,24,2964,55,[0,[[2964,24,2964,39,[2,["Review","Test"],"run"]],[2964,40,2964,55,[7,[2964,41,2964,54,[0,[[2964,41,2964,45,[2,[],"rule"]],[2964,46,2964,54,[2,[],"defaults"]]]]]]]]]]]],[2965,24,2975,26,[0,[[2965,24,2965,48,[2,["Review","Test"],"expectErrors"]],[2966,25,2975,26,[9,[[2966,27,2974,4,[1,"|>",0,[2966,27,2967,120,[1,"|>",0,[2966,27,2966,40,[2,[],"unsortedError"]],[2967,32,2967,120,[0,[[2967,32,2967,53,[2,["Review","Test"],"atExactly"]],[2967,54,2967,120,[8,[[2967,56,2967,87,[[2967,56,2967,61,"start"],[2967,64,2967,87,[8,[[2967,66,2967,73,[[2967,66,2967,69,"row"],[2967,72,2967,73,[3,5]]]],[2967,75,2967,86,[[2967,75,2967,81,"column"],[2967,84,2967,85,[3,8]]]]]]]]],[2967,89,2967,119,[[2967,89,2967,92,"end"],[2967,95,2967,118,[8,[[2967,97,2967,104,[[2967,97,2967,100,"row"],[2967,103,2967,104,[3,5]]]],[2967,106,2967,117,[[2967,106,2967,112,"column"],[2967,115,2967,116,[3,9]]]]]]]]]]]]]]]]],[2968,32,2974,4,[0,[[2968,32,2968,53,[2,["Review","Test"],"whenFixed"]],[2969,33,2974,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { foo = 1.1, bar = 2, baz = 3 }\n"]]]]]]]]]]]]]]]]]]]],[2976,11,2999,26,[1,"<|",1,[2976,11,2976,46,[0,[[2976,11,2976,15,[2,[],"test"]],[2976,16,2976,46,[5,"are type-checked with option"]]]]],[2977,13,2999,26,[18,[[[2977,14,2977,16,[1]]],[2978,17,2999,26,[1,"|>",0,[2978,17,2988,26,[1,"|>",0,[2978,17,2983,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, foo = 1.1, baz = 3 }\n"]],[2984,24,2988,26,[0,[[2984,24,2984,39,[2,["Review","Test"],"run"]],[2985,25,2988,26,[7,[2985,26,2987,36,[1,"|>",0,[2985,26,2986,51,[1,"|>",0,[2985,26,2985,34,[2,[],"defaults"]],[2986,32,2986,51,[2,[],"typecheckAllRecords"]]]],[2987,32,2987,36,[2,[],"rule"]]]]]]]]]]],[2989,24,2999,26,[0,[[2989,24,2989,48,[2,["Review","Test"],"expectErrors"]],[2990,25,2999,26,[9,[[2990,27,2998,4,[1,"|>",0,[2990,27,2991,120,[1,"|>",0,[2990,27,2990,40,[2,[],"unsortedError"]],[2991,32,2991,120,[0,[[2991,32,2991,53,[2,["Review","Test"],"atExactly"]],[2991,54,2991,120,[8,[[2991,56,2991,87,[[2991,56,2991,61,"start"],[2991,64,2991,87,[8,[[2991,66,2991,73,[[2991,66,2991,69,"row"],[2991,72,2991,73,[3,5]]]],[2991,75,2991,86,[[2991,75,2991,81,"column"],[2991,84,2991,85,[3,8]]]]]]]]],[2991,89,2991,119,[[2991,89,2991,92,"end"],[2991,95,2991,118,[8,[[2991,97,2991,104,[[2991,97,2991,100,"row"],[2991,103,2991,104,[3,5]]]],[2991,106,2991,117,[[2991,106,2991,112,"column"],[2991,115,2991,116,[3,9]]]]]]]]]]]]]]]]],[2992,32,2998,4,[0,[[2992,32,2992,53,[2,["Review","Test"],"whenFixed"]],[2993,33,2998,4,[5,"module A exposing (..)\n\ntype alias A = { foo : Int, bar : Int, baz : Int }\n\nfunc = { bar = 2, baz = 3 , foo = 1.1}\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3003,1,3011,10,[0,[[0],[1,[3003,1,3003,42,[[3003,1,3003,14,"unsortedError"],[3003,17,3003,42,[1,[3003,17,3003,42,[["Review","Test"],"ExpectedError"]],[]]]]]],[3004,1,3011,10,[[3004,1,3004,14,"unsortedError"],[],[3005,5,3011,10,[0,[[3005,5,3005,22,[2,["Review","Test"],"error"]],[3006,9,3011,10,[8,[[3006,11,3008,14,[[3006,11,3006,18,"details"],[3007,13,3008,14,[9,[[3007,15,3007,118,[5,"Record fields were found out of order.  They should be sorted as specified in the rule configuration."]]]]]]],[3009,11,3010,9,[[3009,11,3009,18,"message"],[3009,21,3009,52,[5,"Record fields are not sorted."]]]],[3010,11,3011,9,[[3010,11,3010,16,"under"],[3010,19,3010,22,[5,"{"]]]]]]]]]]]]]]],[3014,1,3023,10,[0,[[0],[1,[3014,1,3014,57,[[3014,1,3014,19,"unknownRecordError"],[3014,22,3014,57,[6,[3014,22,3014,28,[1,[3014,22,3014,28,[[],"String"]],[]]],[3014,32,3014,57,[1,[3014,32,3014,57,[["Review","Test"],"ExpectedError"]],[]]]]]]]],[3015,1,3023,10,[[3015,1,3015,19,"unknownRecordError"],[[3015,20,3015,25,[11,"under"]]],[3016,5,3023,10,[0,[[3016,5,3016,22,[2,["Review","Test"],"error"]],[3017,9,3023,10,[8,[[3017,11,3020,14,[[3017,11,3017,18,"details"],[3018,13,3020,14,[9,[[3018,15,3018,165,[5,"This record did not correspond with any known alias or custom type argument record, so whether or not its fields are sorted could not be determined!"]],[3019,15,3019,129,[5,"Create a type alias for this record type, or remove reportUnknownRecordsWithoutFix from your rule configuration."]]]]]]],[3021,11,3022,9,[[3021,11,3021,18,"message"],[3021,21,3021,50,[5,"Unknown record encountered."]]]],[3022,11,3023,9,[[3022,11,3022,16,"under"],[3022,19,3022,24,[2,[],"under"]]]]]]]]]]]]]]],[3026,1,3036,10,[0,[[0],[1,[3026,1,3026,74,[[3026,1,3026,21,"ambiguousRecordError"],[3026,24,3026,74,[6,[3026,24,3026,35,[1,[3026,24,3026,28,[[],"List"]],[[3026,29,3026,35,[1,[3026,29,3026,35,[[],"String"]],[]]]]]],[3026,39,3026,74,[6,[3026,39,3026,45,[1,[3026,39,3026,45,[[],"String"]],[]]],[3026,49,3026,74,[1,[3026,49,3026,74,[["Review","Test"],"ExpectedError"]],[]]]]]]]]]],[3027,1,3036,10,[[3027,1,3027,21,"ambiguousRecordError"],[[3027,22,3027,30,[11,"matching"]],[3027,31,3027,36,[11,"under"]]],[3028,5,3036,10,[0,[[3028,5,3028,22,[2,["Review","Test"],"error"]],[3029,9,3036,10,[8,[[3029,11,3033,14,[[3029,11,3029,18,"details"],[3030,13,3033,14,[9,[[3030,15,3030,142,[5,"This record could be one of several possible record aliases, so whether or not its fields are sorted could not be determined!"]],[3031,15,3031,119,[5,"Try adding a type annotation, or remove reportAmbiguousRecordsWithoutFix from your rule configuration."]],[3032,15,3032,97,[1,"++",1,[3032,15,3032,68,[5,"The record matched the following possible aliases: "]],[3032,72,3032,97,[0,[[3032,72,3032,83,[2,["String"],"join"]],[3032,84,3032,88,[5,", "]],[3032,89,3032,97,[2,[],"matching"]]]]]]]]]]]],[3034,11,3035,9,[[3034,11,3034,18,"message"],[3034,21,3034,52,[5,"Ambiguous record encountered."]]]],[3035,11,3036,9,[[3035,11,3035,16,"under"],[3035,19,3035,24,[2,[],"under"]]]]]]]]]]]]]]]],[]]]
