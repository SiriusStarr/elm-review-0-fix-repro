[1,[[1,1,4,6,[0,[[1,8,1,23,["NoUnsortedCases"]],[1,24,4,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,27,[1,"defaults"]],[3,29,3,50,[1,"sortOnlyMatchingTypes"]],[3,52,3,69,[1,"doNotSortLiterals"]],[3,71,3,101,[1,"doNotSortTypesFromDependencies"]],[3,103,3,142,[1,"sortTypesFromDependenciesAlphabetically"]],[3,144,3,168,[1,"sortListPatternsByLength"]],[3,170,3,193,[1,"doNotLookPastUnsortable"]]]]]]]],[[20,1,20,28,[[20,8,20,12,["Dict"]],[0],[1,[20,13,20,28,[1,[[20,23,20,27,[2,"Dict"]]]]]]]],[21,1,21,27,[[21,8,21,18,["Dict","Extra"]],[1,[21,22,21,27,["DictX"]]],[0]]],[22,1,22,16,[[22,8,22,16,["Elm","Docs"]],[0],[0]]],[23,1,23,68,[[23,8,23,30,["Elm","Syntax","Declaration"]],[1,[23,34,23,45,["Declaration"]]],[1,[23,46,23,68,[1,[[23,56,23,67,[2,"Declaration"]]]]]]]],[24,1,24,71,[[24,8,24,27,["Elm","Syntax","Exposing"]],[0],[1,[24,28,24,71,[1,[[24,38,24,50,[3,["Exposing",[1,[24,46,24,50]]]]],[24,52,24,70,[3,["TopLevelExpose",[1,[24,66,24,70]]]]]]]]]]],[25,1,25,65,[[25,8,25,29,["Elm","Syntax","Expression"]],[1,[25,33,25,43,["Expression"]]],[1,[25,44,25,65,[1,[[25,54,25,64,[2,"Expression"]]]]]]]],[26,1,26,53,[[26,8,26,25,["Elm","Syntax","Module"]],[1,[26,29,26,35,["Module"]]],[1,[26,36,26,53,[1,[[26,46,26,52,[2,"Module"]]]]]]]],[27,1,27,51,[[27,8,27,29,["Elm","Syntax","ModuleName"]],[0],[1,[27,30,27,51,[1,[[27,40,27,50,[2,"ModuleName"]]]]]]]],[28,1,28,47,[[28,8,28,23,["Elm","Syntax","Node"]],[1,[28,27,28,31,["Node"]]],[1,[28,32,28,47,[1,[[28,42,28,46,[2,"Node"]]]]]]]],[29,1,29,56,[[29,8,29,26,["Elm","Syntax","Pattern"]],[1,[29,30,29,37,["Pattern"]]],[1,[29,38,29,56,[1,[[29,48,29,55,[2,"Pattern"]]]]]]]],[30,1,30,50,[[30,8,30,24,["Elm","Syntax","Range"]],[1,[30,28,30,33,["Range"]]],[1,[30,34,30,50,[1,[[30,44,30,49,[2,"Range"]]]]]]]],[31,1,31,39,[[31,8,31,23,["Elm","Syntax","Type"]],[0],[1,[31,24,31,39,[1,[[31,34,31,38,[2,"Type"]]]]]]]],[32,1,32,27,[[32,8,32,18,["List","Extra"]],[1,[32,22,32,27,["ListX"]]],[0]]],[33,1,33,29,[[33,8,33,19,["Maybe","Extra"]],[1,[33,23,33,29,["MaybeX"]]],[0]]],[34,1,34,84,[[34,8,34,36,["Review","ModuleNameLookupTable"]],[0],[1,[34,37,34,84,[1,[[34,47,34,68,[2,"ModuleNameLookupTable"]],[34,70,34,83,[1,"moduleNameFor"]]]]]]]],[35,1,35,69,[[35,8,35,33,["Review","Project","Dependency"]],[1,[35,37,35,47,["Dependency"]]],[1,[35,48,35,69,[1,[[35,58,35,68,[2,"Dependency"]]]]]]]],[36,1,36,50,[[36,8,36,19,["Review","Rule"]],[1,[36,23,36,27,["Rule"]]],[1,[36,28,36,50,[1,[[36,38,36,43,[2,"Error"]],[36,45,36,49,[2,"Rule"]]]]]]]],[37,1,37,26,[[37,8,37,11,["Set"]],[0],[1,[37,12,37,26,[1,[[37,22,37,25,[2,"Set"]]]]]]]],[38,1,38,90,[[38,8,38,12,["Util"]],[0],[1,[38,13,38,90,[1,[[38,23,38,35,[1,"checkSorting"]],[38,37,38,55,[1,"fallbackCompareFor"]],[38,57,38,89,[1,"fallbackCompareWithUnsortableFor"]]]]]]]]],[[41,1,223,38,[0,[[1,[41,1,210,3,"{-| Reports case patterns that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the patterns.\n\nThe proper order of custom types is the order in which they are defined in your\nsource files, and the order of other patterns may be specified in the rule\nconfiguration. See the [Configuration](#configuration) section below for more\ninformation.\n\n    config =\n        [ NoUnsortedCases.rule NoUnsortedCases.defaults\n        ]\n\n\n## Fail\n\n    type Custom\n        = Foo\n        | Bar\n        | Baz\n\n    func1 c =\n        case c of\n            Bar ->\n                \"bar\"\n\n            Foo ->\n                \"foo\"\n\n            Baz ->\n                \"baz\"\n\n    func2 cs =\n        case cs of\n            [ Bar ] ->\n                \"bar\"\n\n            [ Foo ] ->\n                \"foo\"\n\n            [ Foo, Foo ] ->\n                \"foofoo\"\n\n            [ Baz ] ->\n                \"baz\"\n\n            _ ->\n                \"other\"\n\n    func3 c =\n        case c of\n            Nothing ->\n                \"\"\n\n            Just Bar ->\n                \"bar\"\n\n            Just Foo ->\n                \"foo\"\n\n            Just Baz ->\n                \"baz\"\n\n    func4 c1 c2 =\n        case ( c1, c2 ) of\n            ( Foo, Baz ) ->\n                \"foo baz\"\n\n            ( Foo, Bar ) ->\n                \"foo bar\"\n\n            ( Bar, Foo ) ->\n                \"bar foo\"\n\n            ( Baz, Foo ) ->\n                \"baz foo\"\n\n            _ ->\n                \"other\"\n\n\n## Success\n\n    type Custom\n        = Foo\n        | Bar\n        | Baz\n\n    func1 c =\n        case c of\n            Foo ->\n                \"foo\"\n\n            Bar ->\n                \"bar\"\n\n            Baz ->\n                \"baz\"\n\n    func2 cs =\n        case cs of\n            [ Foo ] ->\n                \"foo\"\n\n            [ Foo, Foo ] ->\n                \"foofoo\"\n\n            [ Bar ] ->\n                \"bar\"\n\n            [ Baz ] ->\n                \"baz\"\n\n            _ ->\n                \"other\"\n\n    func3 c =\n        case c of\n            Just Foo ->\n                \"foo\"\n\n            Just Bar ->\n                \"bar\"\n\n            Just Baz ->\n                \"baz\"\n\n            Nothing ->\n                \"\"\n\n    func4 c1 c2 =\n        case ( c1, c2 ) of\n            ( Foo, Bar ) ->\n                \"foo bar\"\n\n            ( Foo, Baz ) ->\n                \"foo baz\"\n\n            ( Bar, Foo ) ->\n                \"bar foo\"\n\n            ( Baz, Foo ) ->\n                \"baz foo\"\n\n            _ ->\n                \"other\"\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that you pattern match in a\nconsistent, predictable order, that is consistent with the order in which a type\nwas defined, as well as ensuring (optionally) that literal patterns and the like\nare sorted.\n\nThis rule is not useful when you want to be able to write case patterns in\ndifferent orders throughout your codebase, e.g. if you want to emphasize what\npattern is most important at any given point or glean a tiny bit of performance\nout of matching the more commonly-expected patterns first.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedCases\n```\n\n-}"]],[1,[211,1,211,26,[[211,1,211,5,"rule"],[211,8,211,26,[6,[211,8,211,18,[1,[211,8,211,18,[[],"RuleConfig"]],[]]],[211,22,211,26,[1,[211,22,211,26,[[],"Rule"]],[]]]]]]]],[212,1,223,38,[[212,1,212,5,"rule"],[[212,6,212,12,[11,"config"]]],[213,5,223,38,[1,"|>",0,[213,5,222,44,[1,"|>",0,[213,5,221,47,[1,"|>",0,[213,5,220,14,[1,"|>",0,[213,5,215,57,[1,"|>",0,[213,5,214,94,[1,"|>",0,[213,5,213,70,[0,[[213,5,213,30,[2,["Rule"],"newProjectRuleSchema"]],[213,31,213,48,[5,"NoUnsortedCases"]],[213,49,213,70,[2,[],"initialProjectContext"]]]]],[214,12,214,94,[0,[[214,12,214,47,[2,["Rule"],"withDependenciesProjectVisitor"]],[214,48,214,94,[7,[214,49,214,93,[18,[[[214,50,214,51,[11,"d"]],[214,52,214,53,[11,"c"]]],[214,57,214,93,[6,[[214,59,214,61,[9,[]]],[214,63,214,91,[0,[[214,63,214,80,[2,[],"dependencyVisitor"]],[214,81,214,87,[2,[],"config"]],[214,88,214,89,[2,[],"d"]],[214,90,214,91,[2,[],"c"]]]]]]]]]]]]]]]]]],[215,12,215,57,[0,[[215,12,215,34,[2,["Rule"],"withModuleVisitor"]],[215,35,215,57,[7,[215,36,215,56,[0,[[215,36,215,49,[2,[],"moduleVisitor"]],[215,50,215,56,[2,[],"config"]]]]]]]]]]]],[216,12,220,14,[0,[[216,12,216,53,[2,["Rule"],"withModuleContextUsingContextCreator"]],[217,13,220,14,[8,[[217,15,217,56,[[217,15,217,34,"foldProjectContexts"],[217,37,217,56,[2,[],"foldProjectContexts"]]]],[218,15,219,13,[[218,15,218,34,"fromModuleToProject"],[218,37,218,56,[2,[],"fromModuleToProject"]]]],[219,15,220,13,[[219,15,219,34,"fromProjectToModule"],[219,37,219,63,[0,[[219,37,219,56,[2,[],"fromProjectToModule"]],[219,57,219,63,[2,[],"config"]]]]]]]]]]]]]]],[221,12,221,47,[2,["Rule"],"withContextFromImportedModules"]]]],[222,12,222,44,[2,["Rule"],"providesFixesForProjectRule"]]]],[223,12,223,38,[2,["Rule"],"fromProjectRuleSchema"]]]]]]]]],[226,1,236,10,[2,[[1,[226,1,228,3,"{-| Configuration for this rule. Create a new one with `defaults` and use\n`doNotSortLiterals`, `sortListPatternsByLength`, etc. to alter it.\n-}"]],[229,6,229,16,"RuleConfig"],[],[[230,7,236,10,[[230,7,230,17,"RuleConfig"],[[231,9,236,10,[4,[[231,11,231,36,[[231,11,231,29,"lookPastUnsortable"],[231,32,231,36,[1,[231,32,231,36,[[],"Bool"]],[]]]]],[232,11,233,9,[[232,11,232,20,"sortLists"],[232,23,232,32,[1,[232,23,232,32,[[],"SortLists"]],[]]]]],[233,11,234,9,[[233,11,233,23,"sortLiterals"],[233,26,233,30,[1,[233,26,233,30,[[],"Bool"]],[]]]]],[234,11,235,9,[[234,11,234,36,"sortTypesFromDependencies"],[234,39,234,64,[1,[234,39,234,64,[[],"SortTypesFromDependencies"]],[]]]]],[235,11,236,9,[[235,11,235,28,"sortablePredicate"],[235,31,235,55,[6,[235,31,235,37,[1,[235,31,235,37,[[],"String"]],[]]],[235,41,235,55,[6,[235,41,235,47,[1,[235,41,235,47,[[],"String"]],[]]],[235,51,235,55,[1,[235,51,235,55,[[],"Bool"]],[]]]]]]]]]]]]]]]]]]],[239,1,298,10,[0,[[1,[239,1,289,3,"{-| The default configuration, with the following behavior:\n\n  - All custom types are sorted. (This can be restricted by using\n    `sortOnlyMatchingTypes`.)\n\n  - Literal patterns (`String`, `Int`, etc.) are sorted in the natural order for their type.\n\n  - Types imported from dependencies are sorted in declaration order, i.e. in the order they appear in the dependency's source file (or more technically in its documentation); this is identical to the behavior of types defined within your own modules.\n\n  - Lists are sorted elementwise, by comparing the elements sequentially at each\n    position (from left to right).\n\n  - Unsortable patterns can be looked beyond to resolve ties, for example:\n\n```\nfunc custom =\n    case custom of\n        Container { field } Bar ->\n            not field\n\n        Container { field } Baz ->\n            field\n\n        Container { field } Foo ->\n            field\n```\n\nwill be sorted to\n\n    func custom =\n        case custom of\n            Container { field } Foo ->\n                field\n\n            Container { field } Bar ->\n                not field\n\n            Container { field } Baz ->\n                field\n\nUse `doNotSortLiterals`, `sortListPatternsByLength`, etc. to alter any of this\nbehavior, e.g.\n\n    config =\n        [ NoUnsortedCases.defaults\n            |> NoUnsortedCases.doNotSortLiterals\n            |> NoUnsortedCases.sortListPatternsByLength\n            |> NoUnsortedCases.rule\n        ]\n\n-}"]],[1,[290,1,290,22,[[290,1,290,9,"defaults"],[290,12,290,22,[1,[290,12,290,22,[[],"RuleConfig"]],[]]]]]],[291,1,298,10,[[291,1,291,9,"defaults"],[],[292,5,298,10,[0,[[292,5,292,15,[2,[],"RuleConfig"]],[293,9,298,10,[8,[[293,11,293,36,[[293,11,293,29,"lookPastUnsortable"],[293,32,293,36,[2,[],"True"]]]],[294,11,295,9,[[294,11,294,20,"sortLists"],[294,23,294,34,[2,[],"Elementwise"]]]],[295,11,296,9,[[295,11,295,23,"sortLiterals"],[295,26,295,30,[2,[],"True"]]]],[296,11,297,9,[[296,11,296,36,"sortTypesFromDependencies"],[296,39,296,55,[2,[],"DeclarationOrder"]]]],[297,11,298,9,[[297,11,297,28,"sortablePredicate"],[297,31,297,43,[18,[[[297,32,297,33,[0]],[297,34,297,35,[0]]],[297,39,297,43,[2,[],"True"]]]]]]]]]]]]]]]]]],[301,1,364,61,[0,[[1,[301,1,361,3,"{-| Restrict custom type sorting to only those matching a provided predicate.\nThis function takes two strings, the first being the full module name of a type,\ne.g. `\"Review.Rule\"` and the second being the name of a type, e.g. `\"Rule\"`, and\nreturns a `Bool` indicating whether the type should be sorted (with `True`\nmeaning sortable). For example:\n\nModule Foo:\n\n    module Foo exposing (Foo(..))\n\n    type Foo\n        = Foo\n        | Bar\n        | Baz\n\nModule Main:\n\n    module Main exposing (..)\n\n    type Msg\n        = ButtonPressed\n        | ButtonClicked\n\nModule ReviewConfig:\n\n    onlyMsg moduleName typeName =\n        case ( moduleName, typeName ) of\n            ( \"Main\", \"Msg\" ) ->\n                True\n\n            _ ->\n                False\n\n    config =\n        [ NoUnsortedCases.defaults\n            |> NoUnsortedCases.sortOnlyMatchingTypes onlyMsg\n            |> NoUnsortedCases.rule\n        ]\n\nwill sort the following pattern:\n\n    case msg of\n        ButtonClicked ->\n            ( { model | clicked = True }, Cmd.none )\n\n        ButtonPressed ->\n            ( { model | pressed = True }, Cmd.none )\n\nbut will not sort:\n\n    case foo of\n        Bar ->\n            \"bar\"\n\n        Baz ->\n            \"baz\"\n\n        Foo ->\n            \"foo\"\n\n-}"]],[1,[362,1,362,79,[[362,1,362,22,"sortOnlyMatchingTypes"],[362,25,362,79,[6,[362,25,362,51,[6,[362,26,362,32,[1,[362,26,362,32,[[],"String"]],[]]],[362,36,362,50,[6,[362,36,362,42,[1,[362,36,362,42,[[],"String"]],[]]],[362,46,362,50,[1,[362,46,362,50,[[],"Bool"]],[]]]]]]],[362,55,362,79,[6,[362,55,362,65,[1,[362,55,362,65,[[],"RuleConfig"]],[]]],[362,69,362,79,[1,[362,69,362,79,[[],"RuleConfig"]],[]]]]]]]]]],[363,1,364,61,[[363,1,363,22,"sortOnlyMatchingTypes"],[[363,23,363,40,[11,"sortablePredicate"]],[363,41,363,55,[14,[363,42,363,54,[12,[[],"RuleConfig"],[[363,53,363,54,[11,"c"]]]]]]]],[364,5,364,61,[0,[[364,5,364,15,[2,[],"RuleConfig"]],[364,16,364,61,[21,[364,18,364,19,"c"],[[364,22,364,60,[[364,22,364,39,"sortablePredicate"],[364,42,364,59,[2,[],"sortablePredicate"]]]]]]]]]]]]]]],[367,1,373,44,[0,[[1,[367,1,370,3,"{-| Change the behavior of the rule to **not** sort literal patterns. If\nliterals are not sorted, case expressions that would require sorting literals\ncannot be sorted and will thus be ignored by the rule.\n-}"]],[1,[371,1,371,45,[[371,1,371,18,"doNotSortLiterals"],[371,21,371,45,[6,[371,21,371,31,[1,[371,21,371,31,[[],"RuleConfig"]],[]]],[371,35,371,45,[1,[371,35,371,45,[[],"RuleConfig"]],[]]]]]]]],[372,1,373,44,[[372,1,372,18,"doNotSortLiterals"],[[372,19,372,33,[14,[372,20,372,32,[12,[[],"RuleConfig"],[[372,31,372,32,[11,"c"]]]]]]]],[373,5,373,44,[0,[[373,5,373,15,[2,[],"RuleConfig"]],[373,16,373,44,[21,[373,18,373,19,"c"],[[373,22,373,43,[[373,22,373,34,"sortLiterals"],[373,37,373,42,[2,[],"False"]]]]]]]]]]]]]]],[376,1,381,61,[0,[[1,[376,1,378,3,"{-| Do not sort types from dependencies at all. Note that this will render\nunsortable any patterns requiring types from dependencies to be sorted.\n-}"]],[1,[379,1,379,58,[[379,1,379,31,"doNotSortTypesFromDependencies"],[379,34,379,58,[6,[379,34,379,44,[1,[379,34,379,44,[[],"RuleConfig"]],[]]],[379,48,379,58,[1,[379,48,379,58,[[],"RuleConfig"]],[]]]]]]]],[380,1,381,61,[[380,1,380,31,"doNotSortTypesFromDependencies"],[[380,32,380,46,[14,[380,33,380,45,[12,[[],"RuleConfig"],[[380,44,380,45,[11,"c"]]]]]]]],[381,5,381,61,[0,[[381,5,381,15,[2,[],"RuleConfig"]],[381,16,381,61,[21,[381,18,381,19,"c"],[[381,22,381,60,[[381,22,381,47,"sortTypesFromDependencies"],[381,50,381,59,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[384,1,388,69,[0,[[1,[384,1,385,3,"{-| Sort custom types imported from dependencies (including `Basics` types like `Maybe` and `Bool`) alphabetically, rather than by their source order in the dependency's source code.\n-}"]],[1,[386,1,386,67,[[386,1,386,40,"sortTypesFromDependenciesAlphabetically"],[386,43,386,67,[6,[386,43,386,53,[1,[386,43,386,53,[[],"RuleConfig"]],[]]],[386,57,386,67,[1,[386,57,386,67,[[],"RuleConfig"]],[]]]]]]]],[387,1,388,69,[[387,1,387,40,"sortTypesFromDependenciesAlphabetically"],[[387,41,387,55,[14,[387,42,387,54,[12,[[],"RuleConfig"],[[387,53,387,54,[11,"c"]]]]]]]],[388,5,388,69,[0,[[388,5,388,15,[2,[],"RuleConfig"]],[388,16,388,69,[21,[388,18,388,19,"c"],[[388,22,388,68,[[388,22,388,47,"sortTypesFromDependencies"],[388,50,388,67,[2,[],"AlphabeticalOrder"]]]]]]]]]]]]]]],[391,1,484,47,[0,[[1,[391,1,481,3,"{-| List patterns may be sorted in one of two ways:\n\n  - Elementwise (**default**) -- Patterns are sorted by comparing elements\n    sequentially at each position (from left to right). This is the same\n    behavior as `List.sort` (which is why it is the default).\n  - Length First -- Shorter patterns always come before longer pattern, with patterns of the same length sorted elementwise at each position.\n\nNote that uncons patterns are considered the length of their matching list, with\nwildcard patterns considered to have infinite length for the purposes of\nsorting. This is necessary to ensure that earlier patterns are not erroneously\nmatched by wildcards.\n\n**Elementwise**\n\n    case list of\n        [] ->\n            \"\"\n\n        [ 1 ] ->\n            \"1\"\n\n        [ 1, 1 ] ->\n            \"11\"\n\n        [ 1, 1, 1 ] ->\n            \"111\"\n\n        [ 1, 2 ] ->\n            \"12\"\n\n        [ 1, 3 ] ->\n            \"13\"\n\n        [ 2 ] ->\n            \"2\"\n\n        [ 2, 1 ] ->\n            \"21\"\n\n        [ 2, 2 ] ->\n            \"22\"\n\n        [ 2, 3 ] ->\n            \"23\"\n\n        [ 3 ] ->\n            \"3\"\n\n        _ ->\n            \"Too many...\"\n\n**Length First**\n\n    case list of\n        [] ->\n            \"\"\n\n        [ 1 ] ->\n            \"1\"\n\n        [ 2 ] ->\n            \"2\"\n\n        [ 3 ] ->\n            \"3\"\n\n        [ 1, 1 ] ->\n            \"11\"\n\n        [ 1, 2 ] ->\n            \"12\"\n\n        [ 1, 3 ] ->\n            \"13\"\n\n        [ 2, 1 ] ->\n            \"21\"\n\n        [ 2, 2 ] ->\n            \"22\"\n\n        [ 2, 3 ] ->\n            \"23\"\n\n        [ 1, 1, 1 ] ->\n            \"111\"\n\n        _ ->\n            \"Too many...\"\n\n-}"]],[1,[482,1,482,52,[[482,1,482,25,"sortListPatternsByLength"],[482,28,482,52,[6,[482,28,482,38,[1,[482,28,482,38,[[],"RuleConfig"]],[]]],[482,42,482,52,[1,[482,42,482,52,[[],"RuleConfig"]],[]]]]]]]],[483,1,484,47,[[483,1,483,25,"sortListPatternsByLength"],[[483,26,483,40,[14,[483,27,483,39,[12,[[],"RuleConfig"],[[483,38,483,39,[11,"c"]]]]]]]],[484,5,484,47,[0,[[484,5,484,15,[2,[],"RuleConfig"]],[484,16,484,47,[21,[484,18,484,19,"c"],[[484,22,484,46,[[484,22,484,31,"sortLists"],[484,34,484,45,[2,[],"LengthFirst"]]]]]]]]]]]]]]],[487,1,503,50,[0,[[1,[487,1,500,3,"{-| Do not look beyond unsortable patterns, rendering the following unsortable:\n\n    func custom =\n        case custom of\n            Container { field } Bar ->\n                not field\n\n            Container { field } Baz ->\n                field\n\n            Container { field } Foo ->\n                field\n\n-}"]],[1,[501,1,501,51,[[501,1,501,24,"doNotLookPastUnsortable"],[501,27,501,51,[6,[501,27,501,37,[1,[501,27,501,37,[[],"RuleConfig"]],[]]],[501,41,501,51,[1,[501,41,501,51,[[],"RuleConfig"]],[]]]]]]]],[502,1,503,50,[[502,1,502,24,"doNotLookPastUnsortable"],[[502,25,502,39,[14,[502,26,502,38,[12,[[],"RuleConfig"],[[502,37,502,38,[11,"c"]]]]]]]],[503,5,503,50,[0,[[503,5,503,15,[2,[],"RuleConfig"]],[503,16,503,50,[21,[503,18,503,19,"c"],[[503,22,503,49,[[503,22,503,40,"lookPastUnsortable"],[503,43,503,48,[2,[],"False"]]]]]]]]]]]]]]],[506,1,570,15,[0,[[1,[506,1,509,3,"{-| Sort two patterns by the preservation of control flow, e.g. assuring that\nwildcards are not moved before non-wildcards. If this function returns `EQ`,\nthen the two patterns may have their order switched safely.\n-}"]],[1,[510,1,510,99,[[510,1,510,21,"compareByControlFlow"],[510,24,510,99,[6,[510,24,510,34,[1,[510,24,510,34,[[],"RuleConfig"]],[]]],[510,38,510,99,[6,[510,38,510,62,[3,[[510,40,510,43,[1,[510,40,510,43,[[],"Int"]],[]]],[510,45,510,60,[1,[510,45,510,60,[[],"SortablePattern"]],[]]]]]],[510,66,510,99,[6,[510,66,510,90,[3,[[510,68,510,71,[1,[510,68,510,71,[[],"Int"]],[]]],[510,73,510,88,[1,[510,73,510,88,[[],"SortablePattern"]],[]]]]]],[510,94,510,99,[1,[510,94,510,99,[[],"Order"]],[]]]]]]]]]]]],[511,1,570,15,[[511,1,511,21,"compareByControlFlow"],[[511,22,511,28,[11,"config"]],[511,29,511,41,[7,[[511,31,511,33,[11,"i1"]],[511,35,511,39,[11,"pat1"]]]]],[511,42,511,54,[7,[[511,44,511,46,[11,"i2"]],[511,48,511,52,[11,"pat2"]]]]]],[512,5,570,15,[16,[[[513,9,515,62,[0,[[0],[1,[513,9,513,57,[[513,9,513,11,"go"],[513,14,513,57,[6,[513,14,513,29,[1,[513,14,513,29,[[],"SortablePattern"]],[]]],[513,33,513,57,[6,[513,33,513,48,[1,[513,33,513,48,[[],"SortablePattern"]],[]]],[513,52,513,57,[1,[513,52,513,57,[[],"Order"]],[]]]]]]]]]],[514,9,515,62,[[514,9,514,11,"go"],[[514,12,514,14,[11,"p1"]],[514,15,514,17,[11,"p2"]]],[515,13,515,62,[0,[[515,13,515,33,[2,[],"compareByControlFlow"]],[515,34,515,40,[2,[],"config"]],[515,41,515,51,[6,[[515,43,515,45,[2,[],"i1"]],[515,47,515,49,[2,[],"p1"]]]]],[515,52,515,62,[6,[[515,54,515,56,[2,[],"i2"]],[515,58,515,60,[2,[],"p2"]]]]]]]]]]]]]],[517,5,570,15,[17,[[517,10,517,24,[6,[[517,12,517,16,[2,[],"pat1"]],[517,18,517,22,[2,[],"pat2"]]]]],[[[519,9,519,31,[7,[[519,11,519,19,[12,[[],"Wildcard"],[]]],[519,21,519,29,[12,[[],"Wildcard"],[]]]]]],[520,13,520,15,[2,[],"EQ"]]],[[523,9,523,24,[7,[[523,11,523,19,[12,[[],"Wildcard"],[]]],[523,21,523,22,[0]]]]],[524,13,524,26,[0,[[524,13,524,20,[2,[],"compare"]],[524,21,524,23,[2,[],"i1"]],[524,24,524,26,[2,[],"i2"]]]]]],[[526,9,526,24,[7,[[526,11,526,12,[0]],[526,14,526,22,[12,[[],"Wildcard"],[]]]]]],[527,13,527,26,[0,[[527,13,527,20,[2,[],"compare"]],[527,21,527,23,[2,[],"i1"]],[527,24,527,26,[2,[],"i2"]]]]]],[[529,9,529,43,[7,[[529,11,529,25,[12,[[],"Constructor"],[[529,23,529,25,[11,"c1"]]]]],[529,27,529,41,[12,[[],"Constructor"],[[529,39,529,41,[11,"c2"]]]]]]]],[530,13,556,19,[16,[[[531,17,548,31,[0,[[0],[1,[531,17,531,101,[[531,17,531,23,"goSubs"],[531,26,531,101,[6,[531,26,531,54,[1,[531,26,531,30,[[],"List"]],[[531,31,531,54,[1,[531,32,531,37,[[],"Maybe"]],[[531,38,531,53,[1,[531,38,531,53,[[],"SortablePattern"]],[]]]]]]]]],[531,58,531,101,[6,[531,58,531,86,[1,[531,58,531,62,[[],"List"]],[[531,63,531,86,[1,[531,64,531,69,[[],"Maybe"]],[[531,70,531,85,[1,[531,70,531,85,[[],"SortablePattern"]],[]]]]]]]]],[531,90,531,101,[6,[531,90,531,92,[2]],[531,96,531,101,[1,[531,96,531,101,[[],"Order"]],[]]]]]]]]]]]],[532,17,548,31,[[532,17,532,23,"goSubs"],[[532,24,532,29,[11,"pat1s"]],[532,30,532,35,[11,"pat2s"]],[532,36,532,38,[1]]],[533,21,548,31,[17,[[533,26,533,42,[6,[[533,28,533,33,[2,[],"pat1s"]],[533,35,533,40,[2,[],"pat2s"]]]]],[[[535,25,535,63,[7,[[535,27,535,47,[9,[535,27,535,42,[14,[535,28,535,41,[12,[[],"Just"],[[535,33,535,41,[12,[[],"Wildcard"],[]]]]]]]],[535,46,535,47,[0]]]],[535,49,535,61,[9,[535,49,535,56,[12,[[],"Nothing"],[]]],[535,60,535,61,[0]]]]]]],[536,29,536,42,[0,[[536,29,536,36,[2,[],"compare"]],[536,37,536,39,[2,[],"i1"]],[536,40,536,42,[2,[],"i2"]]]]]],[[538,25,538,63,[7,[[538,27,538,39,[9,[538,27,538,34,[12,[[],"Nothing"],[]]],[538,38,538,39,[0]]]],[538,41,538,61,[9,[538,41,538,56,[14,[538,42,538,55,[12,[[],"Just"],[[538,47,538,55,[12,[[],"Wildcard"],[]]]]]]]],[538,60,538,61,[0]]]]]]],[539,29,539,42,[0,[[539,29,539,36,[2,[],"compare"]],[539,37,539,39,[2,[],"i1"]],[539,40,539,42,[2,[],"i2"]]]]]],[[541,25,541,49,[7,[[541,27,541,36,[9,[541,27,541,29,[11,"p1"]],[541,33,541,36,[11,"p1s"]]]],[541,38,541,47,[9,[541,38,541,40,[11,"p2"]],[541,44,541,47,[11,"p2s"]]]]]]],[543,29,544,100,[1,"|>",0,[543,29,543,43,[0,[[543,29,543,35,[2,[],"goSubs"]],[543,36,543,39,[2,[],"p1s"]],[543,40,543,43,[2,[],"p2s"]]]]],[544,36,544,100,[0,[[544,36,544,54,[2,[],"fallbackCompareFor"]],[544,55,544,100,[7,[544,56,544,99,[1,"<|",1,[544,56,544,76,[0,[[544,56,544,73,[2,["Maybe"],"withDefault"]],[544,74,544,76,[2,[],"EQ"]]]]],[544,80,544,99,[0,[[544,80,544,90,[2,["Maybe"],"map2"]],[544,91,544,93,[2,[],"go"]],[544,94,544,96,[2,[],"p1"]],[544,97,544,99,[2,[],"p2"]]]]]]]]]]]]]]],[[546,25,546,26,[0]],[548,29,548,31,[2,[],"EQ"]]]]]]]]]]]]],[550,13,556,19,[11,[550,16,550,36,[1,"==",2,[550,16,550,24,[19,[550,16,550,18,[2,[],"c1"]],[550,19,550,24,"order"]]],[550,28,550,36,[19,[550,28,550,30,[2,[],"c2"]],[550,31,550,36,"order"]]]]],[552,17,552,56,[0,[[552,17,552,23,[2,[],"goSubs"]],[552,24,552,38,[19,[552,24,552,26,[2,[],"c1"]],[552,27,552,38,"subpatterns"]]],[552,39,552,53,[19,[552,39,552,41,[2,[],"c2"]],[552,42,552,53,"subpatterns"]]],[552,54,552,56,[10]]]]],[556,17,556,19,[2,[],"EQ"]]]]]]]],[[559,9,559,55,[7,[[559,11,559,31,[12,[[],"ListTupleOrUncons"],[[559,29,559,31,[11,"r1"]]]]],[559,33,559,53,[12,[[],"ListTupleOrUncons"],[[559,51,559,53,[11,"r2"]]]]]]]],[560,13,566,30,[11,[560,16,560,55,[0,[[560,16,560,42,[2,[],"safelySortableListPatterns"]],[560,43,560,49,[2,[],"config"]],[560,50,560,52,[2,[],"r1"]],[560,53,560,55,[2,[],"r2"]]]]],[562,17,562,19,[2,[],"EQ"]],[566,17,566,30,[0,[[566,17,566,24,[2,[],"compare"]],[566,25,566,27,[2,[],"i1"]],[566,28,566,30,[2,[],"i2"]]]]]]]],[[569,9,569,10,[0]],[570,13,570,15,[2,[],"EQ"]]]]]]]]]]]]]]],[573,1,592,20,[0,[[1,[573,1,574,3,"{-| Compare two literal types, determining their order (if not a type error).\n-}"]],[1,[575,1,575,65,[[575,1,575,15,"compareLiteral"],[575,18,575,65,[6,[575,18,575,32,[1,[575,18,575,32,[[],"LiteralPattern"]],[]]],[575,36,575,65,[6,[575,36,575,50,[1,[575,36,575,50,[[],"LiteralPattern"]],[]]],[575,54,575,65,[1,[575,54,575,59,[[],"Maybe"]],[[575,60,575,65,[1,[575,60,575,65,[[],"Order"]],[]]]]]]]]]]]]],[576,1,592,20,[[576,1,576,15,"compareLiteral"],[[576,16,576,18,[11,"l1"]],[576,19,576,21,[11,"l2"]]],[577,5,592,20,[17,[[577,10,577,20,[6,[[577,12,577,14,[2,[],"l1"]],[577,16,577,18,[2,[],"l2"]]]]],[[[578,9,578,43,[7,[[578,11,578,25,[12,[[],"CharLiteral"],[[578,23,578,25,[11,"c1"]]]]],[578,27,578,41,[12,[[],"CharLiteral"],[[578,39,578,41,[11,"c2"]]]]]]]],[579,13,579,34,[1,"<|",1,[579,13,579,17,[2,[],"Just"]],[579,21,579,34,[0,[[579,21,579,28,[2,[],"compare"]],[579,29,579,31,[2,[],"c1"]],[579,32,579,34,[2,[],"c2"]]]]]]]],[[581,9,581,47,[7,[[581,11,581,27,[12,[[],"StringLiteral"],[[581,25,581,27,[11,"s1"]]]]],[581,29,581,45,[12,[[],"StringLiteral"],[[581,43,581,45,[11,"s2"]]]]]]]],[582,13,582,34,[1,"<|",1,[582,13,582,17,[2,[],"Just"]],[582,21,582,34,[0,[[582,21,582,28,[2,[],"compare"]],[582,29,582,31,[2,[],"s1"]],[582,32,582,34,[2,[],"s2"]]]]]]]],[[584,9,584,41,[7,[[584,11,584,24,[12,[[],"IntLiteral"],[[584,22,584,24,[11,"i1"]]]]],[584,26,584,39,[12,[[],"IntLiteral"],[[584,37,584,39,[11,"i2"]]]]]]]],[585,13,585,34,[1,"<|",1,[585,13,585,17,[2,[],"Just"]],[585,21,585,34,[0,[[585,21,585,28,[2,[],"compare"]],[585,29,585,31,[2,[],"i1"]],[585,32,585,34,[2,[],"i2"]]]]]]]],[[587,9,587,45,[7,[[587,11,587,26,[12,[[],"FloatLiteral"],[[587,24,587,26,[11,"f1"]]]]],[587,28,587,43,[12,[[],"FloatLiteral"],[[587,41,587,43,[11,"f2"]]]]]]]],[588,13,588,34,[1,"<|",1,[588,13,588,17,[2,[],"Just"]],[588,21,588,34,[0,[[588,21,588,28,[2,[],"compare"]],[588,29,588,31,[2,[],"f1"]],[588,32,588,34,[2,[],"f2"]]]]]]]],[[590,9,590,10,[0]],[592,13,592,20,[2,[],"Nothing"]]]]]]]]]]]],[599,1,621,21,[0,[[1,[599,1,601,3,"{-| Compare nonempty list/tuple/uncons pattern sorting by checking by length (if\nconfigured to) and element-wise.\n-}"]],[1,[602,1,602,264,[[602,1,602,28,"compareNonemptyListPatterns"],[602,31,602,264,[6,[602,31,602,41,[1,[602,31,602,41,[[],"RuleConfig"]],[]]],[602,45,602,264,[6,[602,45,602,145,[3,[[602,47,602,104,[4,[[602,49,602,83,[[602,49,602,60,"subpatterns"],[602,63,602,83,[1,[602,63,602,67,[[],"List"]],[[602,68,602,83,[1,[602,68,602,83,[[],"SortablePattern"]],[]]]]]]]],[602,85,602,103,[[602,85,602,95,"terminates"],[602,98,602,102,[1,[602,98,602,102,[[],"Bool"]],[]]]]]]]],[602,106,602,121,[1,[602,106,602,121,[[],"SortablePattern"]],[]]],[602,123,602,143,[1,[602,123,602,127,[[],"List"]],[[602,128,602,143,[1,[602,128,602,143,[[],"SortablePattern"]],[]]]]]]]]],[602,149,602,264,[6,[602,149,602,249,[3,[[602,151,602,208,[4,[[602,153,602,187,[[602,153,602,164,"subpatterns"],[602,167,602,187,[1,[602,167,602,171,[[],"List"]],[[602,172,602,187,[1,[602,172,602,187,[[],"SortablePattern"]],[]]]]]]]],[602,189,602,207,[[602,189,602,199,"terminates"],[602,202,602,206,[1,[602,202,602,206,[[],"Bool"]],[]]]]]]]],[602,210,602,225,[1,[602,210,602,225,[[],"SortablePattern"]],[]]],[602,227,602,247,[1,[602,227,602,231,[[],"List"]],[[602,232,602,247,[1,[602,232,602,247,[[],"SortablePattern"]],[]]]]]]]]],[602,253,602,264,[1,[602,253,602,258,[[],"Maybe"]],[[602,259,602,264,[1,[602,259,602,264,[[],"Order"]],[]]]]]]]]]]]]]]],[603,1,621,21,[[603,1,603,28,"compareNonemptyListPatterns"],[[603,29,603,67,[14,[603,30,603,66,[13,[603,30,603,56,[14,[603,31,603,55,[12,[[],"RuleConfig"],[[603,42,603,55,[8,[[603,44,603,53,"sortLists"]]]]]]]]],[603,60,603,66,"config"]]]]],[603,68,603,83,[7,[[603,70,603,72,[11,"r1"]],[603,74,603,76,[11,"p1"]],[603,78,603,81,[11,"p1s"]]]]],[603,84,603,99,[7,[[603,86,603,88,[11,"r2"]],[603,90,603,92,[11,"p2"]],[603,94,603,97,[11,"p2s"]]]]]],[604,5,621,21,[16,[[[605,9,614,36,[0,[[0],[1,[605,9,605,38,[[605,9,605,18,"checkSubs"],[605,21,605,38,[6,[605,21,605,23,[2]],[605,27,605,38,[1,[605,27,605,32,[[],"Maybe"]],[[605,33,605,38,[1,[605,33,605,38,[[],"Order"]],[]]]]]]]]]]],[606,9,614,36,[[606,9,606,18,"checkSubs"],[[606,19,606,21,[1]]],[607,13,614,36,[17,[[607,18,607,46,[0,[[607,18,607,33,[2,[],"comparePatterns"]],[607,34,607,40,[2,[],"config"]],[607,41,607,43,[2,[],"p1"]],[607,44,607,46,[2,[],"p2"]]]]],[[[608,17,608,24,[12,[[],"Just"],[[608,22,608,24,[12,[[],"EQ"],[]]]]]],[609,21,611,71,[0,[[609,21,609,36,[2,[],"comparePatterns"]],[609,37,609,43,[2,[],"config"]],[610,25,610,71,[7,[610,26,610,70,[0,[[610,26,610,43,[2,[],"ListTupleOrUncons"]],[610,44,610,70,[21,[610,46,610,48,"r1"],[[610,51,610,69,[[610,51,610,62,"subpatterns"],[610,65,610,68,[2,[],"p1s"]]]]]]]]]]]],[611,25,611,71,[7,[611,26,611,70,[0,[[611,26,611,43,[2,[],"ListTupleOrUncons"]],[611,44,611,70,[21,[611,46,611,48,"r2"],[[611,51,611,69,[[611,51,611,62,"subpatterns"],[611,65,611,68,[2,[],"p2s"]]]]]]]]]]]]]]]],[[613,17,613,32,[11,"ltOrGtOrNothing"]],[614,21,614,36,[2,[],"ltOrGtOrNothing"]]]]]]]]]]]]],[616,5,621,21,[11,[616,8,616,32,[1,"==",2,[616,8,616,17,[2,[],"sortLists"]],[616,21,616,32,[2,[],"LengthFirst"]]]],[617,9,618,90,[1,"|>",0,[617,9,617,18,[2,[],"checkSubs"]],[618,16,618,90,[0,[[618,16,618,48,[2,[],"fallbackCompareWithUnsortableFor"]],[618,49,618,90,[7,[618,50,618,89,[1,"<|",1,[618,50,618,54,[2,[],"Just"]],[618,58,618,89,[0,[[618,58,618,83,[2,[],"comparePatternListLengths"]],[618,84,618,86,[2,[],"r1"]],[618,87,618,89,[2,[],"r2"]]]]]]]]]]]]]],[621,9,621,21,[0,[[621,9,621,18,[2,[],"checkSubs"]],[621,19,621,21,[10]]]]]]]]]]]]]]],[624,1,651,80,[0,[[1,[624,1,627,3,"{-| Compare the list lengths of two lists of `SortablePattern`, with the caveat\nthat a list must be infinitely long if it ends in a wildcard, with a shorter\nlist ending in a wildcard being \"longer\" (more specified) than a longer one.\n-}"]],[1,[628,1,636,13,[[628,1,628,26,"comparePatternListLengths"],[629,5,636,13,[6,[629,5,631,6,[4,[[629,7,629,41,[[629,7,629,18,"subpatterns"],[629,21,629,41,[1,[629,21,629,25,[[],"List"]],[[629,26,629,41,[1,[629,26,629,41,[[],"SortablePattern"]],[]]]]]]]],[630,7,631,5,[[630,7,630,17,"terminates"],[630,20,630,24,[1,[630,20,630,24,[[],"Bool"]],[]]]]]]]],[633,9,636,13,[6,[633,9,635,10,[4,[[633,11,633,45,[[633,11,633,22,"subpatterns"],[633,25,633,45,[1,[633,25,633,29,[[],"List"]],[[633,30,633,45,[1,[633,30,633,45,[[],"SortablePattern"]],[]]]]]]]],[634,11,635,9,[[634,11,634,21,"terminates"],[634,24,634,28,[1,[634,24,634,28,[[],"Bool"]],[]]]]]]]],[636,8,636,13,[1,[636,8,636,13,[[],"Order"]],[]]]]]]]]]],[637,1,651,80,[[637,1,637,26,"comparePatternListLengths"],[[637,27,637,30,[11,"p1s"]],[637,31,637,34,[11,"p2s"]]],[638,5,651,80,[17,[[638,10,638,44,[6,[[638,12,638,26,[19,[638,12,638,15,[2,[],"p1s"]],[638,16,638,26,"terminates"]]],[638,28,638,42,[19,[638,28,638,31,[2,[],"p2s"]],[638,32,638,42,"terminates"]]]]]],[[[639,9,639,23,[7,[[639,11,639,15,[12,[[],"True"],[]]],[639,17,639,21,[12,[[],"True"],[]]]]]],[641,13,641,80,[0,[[641,13,641,20,[2,[],"compare"]],[641,21,641,50,[7,[641,22,641,49,[0,[[641,22,641,33,[2,["List"],"length"]],[641,34,641,49,[19,[641,34,641,37,[2,[],"p1s"]],[641,38,641,49,"subpatterns"]]]]]]]],[641,51,641,80,[7,[641,52,641,79,[0,[[641,52,641,63,[2,["List"],"length"]],[641,64,641,79,[19,[641,64,641,67,[2,[],"p2s"]],[641,68,641,79,"subpatterns"]]]]]]]]]]]],[[643,9,643,24,[7,[[643,11,643,15,[12,[[],"True"],[]]],[643,17,643,22,[12,[[],"False"],[]]]]]],[644,13,644,15,[2,[],"LT"]]],[[646,9,646,24,[7,[[646,11,646,16,[12,[[],"False"],[]]],[646,18,646,22,[12,[[],"True"],[]]]]]],[647,13,647,15,[2,[],"GT"]]],[[649,9,649,25,[7,[[649,11,649,16,[12,[[],"False"],[]]],[649,18,649,23,[12,[[],"False"],[]]]]]],[651,13,651,80,[0,[[651,13,651,20,[2,[],"compare"]],[651,21,651,50,[7,[651,22,651,49,[0,[[651,22,651,33,[2,["List"],"length"]],[651,34,651,49,[19,[651,34,651,37,[2,[],"p2s"]],[651,38,651,49,"subpatterns"]]]]]]]],[651,51,651,80,[7,[651,52,651,79,[0,[[651,52,651,63,[2,["List"],"length"]],[651,64,651,79,[19,[651,64,651,67,[2,[],"p1s"]],[651,68,651,79,"subpatterns"]]]]]]]]]]]]]]]]]]]]],[654,1,741,20,[0,[[1,[654,1,655,3,"{-| Compare two sortable patterns, determining their order (if not a type error).\n-}"]],[1,[656,1,656,82,[[656,1,656,16,"comparePatterns"],[656,19,656,82,[6,[656,19,656,29,[1,[656,19,656,29,[[],"RuleConfig"]],[]]],[656,33,656,82,[6,[656,33,656,48,[1,[656,33,656,48,[[],"SortablePattern"]],[]]],[656,52,656,82,[6,[656,52,656,67,[1,[656,52,656,67,[[],"SortablePattern"]],[]]],[656,71,656,82,[1,[656,71,656,76,[[],"Maybe"]],[[656,77,656,82,[1,[656,77,656,82,[[],"Order"]],[]]]]]]]]]]]]]]],[657,1,741,20,[[657,1,657,16,"comparePatterns"],[[657,17,657,68,[14,[657,18,657,67,[13,[657,18,657,53,[14,[657,19,657,52,[12,[[],"RuleConfig"],[[657,30,657,52,[8,[[657,32,657,50,"lookPastUnsortable"]]]]]]]]],[657,57,657,67,"ruleConfig"]]]]],[657,69,657,73,[11,"pat1"]],[657,74,657,78,[11,"pat2"]]],[658,5,741,20,[16,[[[659,9,661,45,[0,[[0],[1,[659,9,659,63,[[659,9,659,11,"go"],[659,14,659,63,[6,[659,14,659,29,[1,[659,14,659,29,[[],"SortablePattern"]],[]]],[659,33,659,63,[6,[659,33,659,48,[1,[659,33,659,48,[[],"SortablePattern"]],[]]],[659,52,659,63,[1,[659,52,659,57,[[],"Maybe"]],[[659,58,659,63,[1,[659,58,659,63,[[],"Order"]],[]]]]]]]]]]]]],[660,9,661,45,[[660,9,660,11,"go"],[[660,12,660,14,[11,"p1"]],[660,15,660,17,[11,"p2"]]],[661,13,661,45,[0,[[661,13,661,28,[2,[],"comparePatterns"]],[661,29,661,39,[2,[],"ruleConfig"]],[661,40,661,42,[2,[],"p1"]],[661,43,661,45,[2,[],"p2"]]]]]]]]]]],[663,5,741,20,[17,[[663,10,663,24,[6,[[663,12,663,16,[2,[],"pat1"]],[663,18,663,22,[2,[],"pat2"]]]]],[[[665,9,665,31,[7,[[665,11,665,19,[12,[[],"Wildcard"],[]]],[665,21,665,29,[12,[[],"Wildcard"],[]]]]]],[666,13,666,20,[0,[[666,13,666,17,[2,[],"Just"]],[666,18,666,20,[2,[],"EQ"]]]]]],[[669,9,669,24,[7,[[669,11,669,19,[12,[[],"Wildcard"],[]]],[669,21,669,22,[0]]]]],[670,13,670,20,[2,[],"Nothing"]]],[[672,9,672,24,[7,[[672,11,672,12,[0]],[672,14,672,22,[12,[[],"Wildcard"],[]]]]]],[673,13,673,20,[2,[],"Nothing"]]],[[676,9,676,43,[7,[[676,11,676,25,[12,[[],"Constructor"],[[676,23,676,25,[11,"c1"]]]]],[676,27,676,41,[12,[[],"Constructor"],[[676,39,676,41,[11,"c2"]]]]]]]],[677,13,699,88,[16,[[[678,17,695,36,[0,[[0],[1,[678,17,678,107,[[678,17,678,23,"goSubs"],[678,26,678,107,[6,[678,26,678,54,[1,[678,26,678,30,[[],"List"]],[[678,31,678,54,[1,[678,32,678,37,[[],"Maybe"]],[[678,38,678,53,[1,[678,38,678,53,[[],"SortablePattern"]],[]]]]]]]]],[678,58,678,107,[6,[678,58,678,86,[1,[678,58,678,62,[[],"List"]],[[678,63,678,86,[1,[678,64,678,69,[[],"Maybe"]],[[678,70,678,85,[1,[678,70,678,85,[[],"SortablePattern"]],[]]]]]]]]],[678,90,678,107,[6,[678,90,678,92,[2]],[678,96,678,107,[1,[678,96,678,101,[[],"Maybe"]],[[678,102,678,107,[1,[678,102,678,107,[[],"Order"]],[]]]]]]]]]]]]]]],[679,17,695,36,[[679,17,679,23,"goSubs"],[[679,24,679,29,[11,"pat1s"]],[679,30,679,35,[11,"pat2s"]],[679,36,679,38,[1]]],[680,21,695,36,[17,[[680,26,680,62,[6,[[680,28,680,33,[2,[],"pat1s"]],[680,35,680,40,[2,[],"pat2s"]],[680,42,680,60,[2,[],"lookPastUnsortable"]]]]],[[[681,25,681,38,[7,[[681,27,681,29,[10,[]]],[681,31,681,33,[10,[]]],[681,35,681,36,[0]]]]],[683,29,683,36,[0,[[683,29,683,33,[2,[],"Just"]],[683,34,683,36,[2,[],"EQ"]]]]]],[[685,25,685,66,[7,[[685,27,685,43,[9,[685,27,685,36,[14,[685,28,685,35,[12,[[],"Just"],[[685,33,685,35,[11,"p1"]]]]]]],[685,40,685,43,[11,"p1s"]]]],[685,45,685,61,[9,[685,45,685,54,[14,[685,46,685,53,[12,[[],"Just"],[[685,51,685,53,[11,"p2"]]]]]]],[685,58,685,61,[11,"p2s"]]]],[685,63,685,64,[0]]]]],[686,29,687,79,[1,"|>",0,[686,29,686,43,[0,[[686,29,686,35,[2,[],"goSubs"]],[686,36,686,39,[2,[],"p1s"]],[686,40,686,43,[2,[],"p2s"]]]]],[687,36,687,79,[0,[[687,36,687,68,[2,[],"fallbackCompareWithUnsortableFor"]],[687,69,687,79,[7,[687,70,687,78,[0,[[687,70,687,72,[2,[],"go"]],[687,73,687,75,[2,[],"p1"]],[687,76,687,78,[2,[],"p2"]]]]]]]]]]]]],[[689,25,689,65,[7,[[689,27,689,41,[9,[689,27,689,34,[12,[[],"Nothing"],[]]],[689,38,689,41,[11,"p1s"]]]],[689,43,689,57,[9,[689,43,689,50,[12,[[],"Nothing"],[]]],[689,54,689,57,[11,"p2s"]]]],[689,59,689,63,[12,[[],"True"],[]]]]]],[691,29,691,46,[0,[[691,29,691,35,[2,[],"goSubs"]],[691,36,691,39,[2,[],"p1s"]],[691,40,691,43,[2,[],"p2s"]],[691,44,691,46,[10]]]]]],[[693,25,693,26,[0]],[695,29,695,36,[2,[],"Nothing"]]]]]]]]]]]]],[698,13,699,88,[1,"|>",0,[698,13,698,49,[0,[[698,13,698,19,[2,[],"goSubs"]],[698,20,698,34,[19,[698,20,698,22,[2,[],"c1"]],[698,23,698,34,"subpatterns"]]],[698,35,698,49,[19,[698,35,698,37,[2,[],"c2"]],[698,38,698,49,"subpatterns"]]]]]],[699,20,699,88,[0,[[699,20,699,52,[2,[],"fallbackCompareWithUnsortableFor"]],[699,53,699,88,[7,[699,54,699,87,[1,"<|",1,[699,54,699,58,[2,[],"Just"]],[699,62,699,87,[0,[[699,62,699,69,[2,[],"compare"]],[699,70,699,78,[19,[699,70,699,72,[2,[],"c1"]],[699,73,699,78,"order"]]],[699,79,699,87,[19,[699,79,699,81,[2,[],"c2"]],[699,82,699,87,"order"]]]]]]]]]]]]]]]]]]],[[702,9,702,55,[7,[[702,11,702,31,[12,[[],"ListTupleOrUncons"],[[702,29,702,31,[11,"r1"]]]]],[702,33,702,53,[12,[[],"ListTupleOrUncons"],[[702,51,702,53,[11,"r2"]]]]]]]],[703,13,733,91,[17,[[704,17,706,18,[6,[[704,19,704,52,[6,[[704,21,704,35,[19,[704,21,704,23,[2,[],"r1"]],[704,24,704,35,"subpatterns"]]],[704,37,704,50,[19,[704,37,704,39,[2,[],"r1"]],[704,40,704,50,"terminates"]]]]]],[705,19,705,52,[6,[[705,21,705,35,[19,[705,21,705,23,[2,[],"r2"]],[705,24,705,35,"subpatterns"]]],[705,37,705,50,[19,[705,37,705,39,[2,[],"r2"]],[705,40,705,50,"terminates"]]]]]]]]],[[[709,17,709,48,[7,[[709,19,709,31,[7,[[709,21,709,23,[10,[]]],[709,25,709,29,[12,[[],"True"],[]]]]]],[709,33,709,46,[7,[[709,35,709,37,[10,[]]],[709,39,709,44,[12,[[],"False"],[]]]]]]]]],[710,21,710,28,[0,[[710,21,710,25,[2,[],"Just"]],[710,26,710,28,[2,[],"LT"]]]]]],[[712,17,712,48,[7,[[712,19,712,32,[7,[[712,21,712,23,[10,[]]],[712,25,712,30,[12,[[],"False"],[]]]]]],[712,34,712,46,[7,[[712,36,712,38,[10,[]]],[712,40,712,44,[12,[[],"True"],[]]]]]]]]],[713,21,713,28,[0,[[713,21,713,25,[2,[],"Just"]],[713,26,713,28,[2,[],"GT"]]]]]],[[715,17,715,41,[7,[[715,19,715,28,[7,[[715,21,715,23,[10,[]]],[715,25,715,26,[0]]]]],[715,30,715,39,[7,[[715,32,715,34,[10,[]]],[715,36,715,37,[0]]]]]]]],[716,21,716,28,[0,[[716,21,716,25,[2,[],"Just"]],[716,26,716,28,[2,[],"EQ"]]]]]],[[719,17,719,48,[7,[[719,19,719,31,[7,[[719,21,719,23,[10,[]]],[719,25,719,29,[12,[[],"True"],[]]]]]],[719,33,719,46,[7,[[719,35,719,41,[9,[719,35,719,36,[0]],[719,40,719,41,[0]]]],[719,43,719,44,[0]]]]]]]],[720,21,720,28,[0,[[720,21,720,25,[2,[],"Just"]],[720,26,720,28,[2,[],"LT"]]]]]],[[722,17,722,49,[7,[[722,19,722,32,[7,[[722,21,722,23,[10,[]]],[722,25,722,30,[12,[[],"False"],[]]]]]],[722,34,722,47,[7,[[722,36,722,42,[9,[722,36,722,37,[0]],[722,41,722,42,[0]]]],[722,44,722,45,[0]]]]]]]],[723,21,723,28,[0,[[723,21,723,25,[2,[],"Just"]],[723,26,723,28,[2,[],"GT"]]]]]],[[725,17,725,48,[7,[[725,19,725,32,[7,[[725,21,725,27,[9,[725,21,725,22,[0]],[725,26,725,27,[0]]]],[725,29,725,30,[0]]]]],[725,34,725,46,[7,[[725,36,725,38,[10,[]]],[725,40,725,44,[12,[[],"True"],[]]]]]]]]],[726,21,726,28,[0,[[726,21,726,25,[2,[],"Just"]],[726,26,726,28,[2,[],"GT"]]]]]],[[728,17,728,49,[7,[[728,19,728,32,[7,[[728,21,728,27,[9,[728,21,728,22,[0]],[728,26,728,27,[0]]]],[728,29,728,30,[0]]]]],[728,34,728,47,[7,[[728,36,728,38,[10,[]]],[728,40,728,45,[12,[[],"False"],[]]]]]]]]],[729,21,729,28,[0,[[729,21,729,25,[2,[],"Just"]],[729,26,729,28,[2,[],"LT"]]]]]],[[732,17,732,55,[7,[[732,19,732,35,[7,[[732,21,732,30,[9,[732,21,732,23,[11,"p1"]],[732,27,732,30,[11,"p1s"]]]],[732,32,732,33,[0]]]]],[732,37,732,53,[7,[[732,39,732,48,[9,[732,39,732,41,[11,"p2"]],[732,45,732,48,[11,"p2s"]]]],[732,50,732,51,[0]]]]]]]],[733,21,733,91,[0,[[733,21,733,48,[2,[],"compareNonemptyListPatterns"]],[733,49,733,59,[2,[],"ruleConfig"]],[733,60,733,75,[6,[[733,62,733,64,[2,[],"r1"]],[733,66,733,68,[2,[],"p1"]],[733,70,733,73,[2,[],"p1s"]]]]],[733,76,733,91,[6,[[733,78,733,80,[2,[],"r2"]],[733,82,733,84,[2,[],"p2"]],[733,86,733,89,[2,[],"p2s"]]]]]]]]]]]]]],[[736,9,736,35,[7,[[736,11,736,21,[12,[[],"Literal"],[[736,19,736,21,[11,"l1"]]]]],[736,23,736,33,[12,[[],"Literal"],[[736,31,736,33,[11,"l2"]]]]]]]],[737,13,737,33,[0,[[737,13,737,27,[2,[],"compareLiteral"]],[737,28,737,30,[2,[],"l1"]],[737,31,737,33,[2,[],"l2"]]]]]],[[740,9,740,10,[0]],[741,13,741,20,[2,[],"Nothing"]]]]]]]]]]]]]]],[744,1,823,13,[0,[[1,[744,1,745,3,"{-| Visit declarations, storing custom type orders.\n-}"]],[1,[746,1,778,10,[[746,1,746,23,"declarationListVisitor"],[747,5,778,10,[6,[747,5,747,15,[1,[747,5,747,15,[[],"RuleConfig"]],[]]],[748,8,778,10,[6,[748,8,748,31,[1,[748,8,748,12,[[],"List"]],[[748,13,748,31,[1,[748,14,748,18,[[],"Node"]],[[748,19,748,30,[1,[748,19,748,30,[[],"Declaration"]],[]]]]]]]]],[750,9,778,10,[6,[750,9,761,10,[4,[[750,11,758,18,[[750,11,750,22,"customTypes"],[751,13,758,18,[1,[751,13,751,17,[[],"Dict"]],[[752,17,752,27,[1,[752,17,752,27,[[],"ModuleName"]],[]]],[753,17,758,18,[1,[753,18,753,22,[[],"Dict"]],[[754,21,754,27,[1,[754,21,754,27,[[],"String"]],[]]],[755,21,757,22,[4,[[755,23,755,48,[[755,23,755,35,"constructors"],[755,38,755,48,[1,[755,38,755,41,[[],"Set"]],[[755,42,755,48,[1,[755,42,755,48,[[],"String"]],[]]]]]]]],[756,23,757,21,[[756,23,756,39,"declarationOrder"],[756,42,756,53,[1,[756,42,756,46,[[],"List"]],[[756,47,756,53,[1,[756,47,756,53,[[],"String"]],[]]]]]]]]]]]]]]]]]]],[759,11,760,9,[[759,11,759,23,"exposedTypes"],[759,26,759,44,[1,[759,26,759,31,[[],"Maybe"]],[[759,32,759,44,[1,[759,33,759,36,[[],"Set"]],[[759,37,759,43,[1,[759,37,759,43,[[],"String"]],[]]]]]]]]]]],[760,11,761,9,[[760,11,760,21,"moduleName"],[760,24,760,30,[1,[760,24,760,30,[[],"String"]],[]]]]]]]],[763,9,778,10,[4,[[763,11,771,18,[[763,11,763,22,"customTypes"],[764,13,771,18,[1,[764,13,764,17,[[],"Dict"]],[[765,17,765,27,[1,[765,17,765,27,[[],"ModuleName"]],[]]],[766,17,771,18,[1,[766,18,766,22,[[],"Dict"]],[[767,21,767,27,[1,[767,21,767,27,[[],"String"]],[]]],[768,21,770,22,[4,[[768,23,768,48,[[768,23,768,35,"constructors"],[768,38,768,48,[1,[768,38,768,41,[[],"Set"]],[[768,42,768,48,[1,[768,42,768,48,[[],"String"]],[]]]]]]]],[769,23,770,21,[[769,23,769,39,"declarationOrder"],[769,42,769,53,[1,[769,42,769,46,[[],"List"]],[[769,47,769,53,[1,[769,47,769,53,[[],"String"]],[]]]]]]]]]]]]]]]]]]],[772,11,778,9,[[772,11,772,29,"exposedCustomTypes"],[773,13,777,18,[1,[773,13,773,17,[[],"Dict"]],[[774,17,774,23,[1,[774,17,774,23,[[],"String"]],[]]],[775,17,777,18,[4,[[775,19,775,44,[[775,19,775,31,"constructors"],[775,34,775,44,[1,[775,34,775,37,[[],"Set"]],[[775,38,775,44,[1,[775,38,775,44,[[],"String"]],[]]]]]]]],[776,19,777,17,[[776,19,776,35,"declarationOrder"],[776,38,776,49,[1,[776,38,776,42,[[],"List"]],[[776,43,776,49,[1,[776,43,776,49,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]]]]]],[779,1,823,13,[[779,1,779,23,"declarationListVisitor"],[[779,24,779,43,[14,[779,25,779,42,[12,[[],"RuleConfig"],[[779,36,779,42,[11,"config"]]]]]]],[779,44,779,56,[11,"declarations"]],[779,57,779,98,[8,[[779,59,779,70,"customTypes"],[779,72,779,84,"exposedTypes"],[779,86,779,96,"moduleName"]]]]],[780,5,823,13,[16,[[[781,9,795,28,[0,[[0],[1,[781,9,781,124,[[781,9,781,22,"getCustomType"],[781,25,781,124,[6,[781,25,781,41,[1,[781,25,781,29,[[],"Node"]],[[781,30,781,41,[1,[781,30,781,41,[[],"Declaration"]],[]]]]]],[781,45,781,124,[1,[781,45,781,50,[[],"Maybe"]],[[781,51,781,124,[3,[[781,53,781,59,[1,[781,53,781,59,[[],"String"]],[]]],[781,61,781,122,[4,[[781,63,781,88,[[781,63,781,75,"constructors"],[781,78,781,88,[1,[781,78,781,81,[[],"Set"]],[[781,82,781,88,[1,[781,82,781,88,[[],"String"]],[]]]]]]]],[781,90,781,121,[[781,90,781,106,"declarationOrder"],[781,109,781,120,[1,[781,109,781,113,[[],"List"]],[[781,114,781,120,[1,[781,114,781,120,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]],[782,9,795,28,[[782,9,782,22,"getCustomType"],[[782,23,782,27,[11,"node"]]],[783,13,795,28,[17,[[783,18,783,33,[0,[[783,18,783,28,[2,["Node"],"value"]],[783,29,783,33,[2,[],"node"]]]]],[[[784,17,784,70,[12,[["Declaration"],"CustomTypeDeclaration"],[[784,51,784,70,[14,[784,52,784,69,[13,[784,52,784,60,[8,[[784,54,784,58,"name"]]]],[784,64,784,69,"type_"]]]]]]]],[785,21,792,32,[11,[785,24,785,77,[0,[[785,24,785,48,[19,[785,24,785,30,[2,[],"config"]],[785,31,785,48,"sortablePredicate"]]],[785,49,785,59,[2,[],"moduleName"]],[785,60,785,77,[7,[785,61,785,76,[0,[[785,61,785,71,[2,["Node"],"value"]],[785,72,785,76,[2,[],"name"]]]]]]]]]],[786,25,789,30,[0,[[786,25,786,29,[2,[],"Just"]],[787,29,789,30,[6,[[787,31,787,52,[0,[[787,31,787,41,[2,["Node"],"value"]],[787,42,787,52,[19,[787,42,787,47,[2,[],"type_"]],[787,48,787,52,"name"]]]]]],[788,31,788,53,[0,[[788,31,788,47,[2,[],"typeConstructors"]],[788,48,788,53,[2,[],"type_"]]]]]]]]]]],[792,25,792,32,[2,[],"Nothing"]]]]],[[794,17,794,18,[0]],[795,21,795,28,[2,[],"Nothing"]]]]]]]]]]]],[797,9,805,21,[0,[[0],[1,[797,9,797,97,[[797,9,797,25,"typeConstructors"],[797,28,797,97,[6,[797,28,797,32,[1,[797,28,797,32,[[],"Type"]],[]]],[797,36,797,97,[4,[[797,38,797,63,[[797,38,797,50,"constructors"],[797,53,797,63,[1,[797,53,797,56,[[],"Set"]],[[797,57,797,63,[1,[797,57,797,63,[[],"String"]],[]]]]]]]],[797,65,797,96,[[797,65,797,81,"declarationOrder"],[797,84,797,95,[1,[797,84,797,88,[[],"List"]],[[797,89,797,95,[1,[797,89,797,95,[[],"String"]],[]]]]]]]]]]]]]]]],[798,9,805,21,[[798,9,798,25,"typeConstructors"],[[798,26,798,31,[11,"type_"]]],[799,13,805,21,[1,"|>",0,[799,13,800,64,[1,"|>",0,[799,13,799,31,[19,[799,13,799,18,[2,[],"type_"]],[799,19,799,31,"constructors"]]],[800,20,800,64,[0,[[800,20,800,28,[2,["List"],"map"]],[800,29,800,64,[7,[800,30,800,63,[1,">>",1,[800,30,800,40,[2,["Node"],"value"]],[800,44,800,63,[1,">>",1,[800,44,800,49,[20,".name"]],[800,53,800,63,[2,["Node"],"value"]]]]]]]]]]]]],[801,20,805,21,[7,[801,21,804,26,[18,[[[801,22,801,24,[11,"cs"]]],[802,25,804,26,[8,[[802,27,802,57,[[802,27,802,39,"constructors"],[802,42,802,57,[0,[[802,42,802,54,[2,["Set"],"fromList"]],[802,55,802,57,[2,[],"cs"]]]]]]],[803,27,804,25,[[803,27,803,43,"declarationOrder"],[803,46,803,48,[2,[],"cs"]]]]]]]]]]]]]]]]]]]],[808,5,823,13,[1,"|>",0,[808,5,808,46,[0,[[808,5,808,19,[2,["List"],"filterMap"]],[808,20,808,33,[2,[],"getCustomType"]],[808,34,808,46,[2,[],"declarations"]]]]],[809,12,823,13,[7,[809,13,822,22,[18,[[[809,14,809,16,[11,"ts"]]],[810,17,822,22,[11,[810,20,810,35,[0,[[810,20,810,32,[2,["List"],"isEmpty"]],[810,33,810,35,[2,[],"ts"]]]]],[811,21,813,22,[8,[[811,23,811,48,[[811,23,811,34,"customTypes"],[811,37,811,48,[2,[],"customTypes"]]]],[812,23,813,21,[[812,23,812,41,"exposedCustomTypes"],[812,44,812,54,[2,["Dict"],"empty"]]]]]]],[816,21,822,22,[8,[[816,23,818,68,[[816,23,816,34,"customTypes"],[817,25,818,68,[1,"|>",0,[817,25,817,41,[0,[[817,25,817,38,[2,["Dict"],"fromList"]],[817,39,817,41,[2,[],"ts"]]]]],[818,32,818,68,[7,[818,33,818,67,[18,[[[818,34,818,35,[11,"v"]]],[818,39,818,67,[0,[[818,39,818,50,[2,["Dict"],"insert"]],[818,51,818,53,[9,[]]],[818,54,818,55,[2,[],"v"]],[818,56,818,67,[2,[],"customTypes"]]]]]]]]]]]]]],[819,23,822,21,[[819,23,819,41,"exposedCustomTypes"],[820,25,821,45,[1,"|>",0,[820,25,820,115,[0,[[820,25,820,36,[2,["List"],"filter"]],[820,37,820,112,[7,[820,38,820,111,[18,[[[820,39,820,54,[7,[[820,41,820,49,[11,"typeName"]],[820,51,820,52,[0]]]]]],[820,58,820,111,[0,[[820,58,820,71,[2,["MaybeX"],"unwrap"]],[820,72,820,76,[2,[],"True"]],[820,77,820,98,[7,[820,78,820,97,[0,[[820,78,820,88,[2,["Set"],"member"]],[820,89,820,97,[2,[],"typeName"]]]]]]],[820,99,820,111,[2,[],"exposedTypes"]]]]]]]]]],[820,113,820,115,[2,[],"ts"]]]]],[821,32,821,45,[2,["Dict"],"fromList"]]]]]]]]]]]]]]]]]]]]]]]]]],[830,1,890,16,[0,[[1,[830,1,831,3,"{-| Visit all dependencies and store type order from them.\n-}"]],[1,[832,1,832,93,[[832,1,832,18,"dependencyVisitor"],[832,21,832,93,[6,[832,21,832,31,[1,[832,21,832,31,[[],"RuleConfig"]],[]]],[832,35,832,93,[6,[832,35,832,57,[1,[832,35,832,39,[[],"Dict"]],[[832,40,832,46,[1,[832,40,832,46,[[],"String"]],[]]],[832,47,832,57,[1,[832,47,832,57,[[],"Dependency"]],[]]]]]],[832,61,832,93,[6,[832,61,832,75,[1,[832,61,832,75,[[],"ProjectContext"]],[]]],[832,79,832,93,[1,[832,79,832,93,[[],"ProjectContext"]],[]]]]]]]]]]]],[833,1,890,16,[[833,1,833,18,"dependencyVisitor"],[[833,19,833,38,[14,[833,20,833,37,[12,[[],"RuleConfig"],[[833,31,833,37,[11,"config"]]]]]]],[833,39,833,43,[11,"deps"]],[833,44,833,51,[11,"context"]]],[834,5,890,16,[16,[[[835,9,860,28,[0,[[0],[1,[835,9,835,129,[[835,9,835,19,"docToEntry"],[835,22,835,129,[6,[835,22,835,28,[1,[835,22,835,28,[[],"String"]],[]]],[835,32,835,129,[6,[835,32,835,46,[1,[835,32,835,46,[["Elm","Docs"],"Union"]],[]]],[835,50,835,129,[1,[835,50,835,55,[[],"Maybe"]],[[835,56,835,129,[3,[[835,58,835,64,[1,[835,58,835,64,[[],"String"]],[]]],[835,66,835,127,[4,[[835,68,835,93,[[835,68,835,80,"constructors"],[835,83,835,93,[1,[835,83,835,86,[[],"Set"]],[[835,87,835,93,[1,[835,87,835,93,[[],"String"]],[]]]]]]]],[835,95,835,126,[[835,95,835,111,"declarationOrder"],[835,114,835,125,[1,[835,114,835,118,[[],"List"]],[[835,119,835,125,[1,[835,119,835,125,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]],[836,9,860,28,[[836,9,836,19,"docToEntry"],[[836,20,836,30,[11,"moduleName"]],[836,31,836,45,[8,[[836,33,836,37,"name"],[836,39,836,43,"tags"]]]]],[837,13,860,28,[16,[[[838,17,840,46,[0,[[0],[1,[838,17,838,43,[[838,17,838,29,"constructors"],[838,32,838,43,[1,[838,32,838,36,[[],"List"]],[[838,37,838,43,[1,[838,37,838,43,[[],"String"]],[]]]]]]]]],[839,17,840,46,[[839,17,839,29,"constructors"],[],[840,21,840,46,[0,[[840,21,840,29,[2,["List"],"map"]],[840,30,840,41,[2,["Tuple"],"first"]],[840,42,840,46,[2,[],"tags"]]]]]]]]]]],[842,13,860,28,[17,[[842,18,842,96,[6,[[842,20,842,60,[0,[[842,20,842,44,[19,[842,20,842,26,[2,[],"config"]],[842,27,842,44,"sortablePredicate"]]],[842,45,842,55,[2,[],"moduleName"]],[842,56,842,60,[2,[],"name"]]]]],[842,62,842,94,[19,[842,62,842,68,[2,[],"config"]],[842,69,842,94,"sortTypesFromDependencies"]]]]]],[[[843,17,843,44,[7,[[843,19,843,23,[12,[[],"True"],[]]],[843,25,843,42,[12,[[],"AlphabeticalOrder"],[]]]]]],[844,21,849,26,[0,[[844,21,844,25,[2,[],"Just"]],[845,25,849,26,[6,[[845,27,845,31,[2,[],"name"]],[846,27,848,28,[8,[[846,29,846,69,[[846,29,846,41,"constructors"],[846,44,846,69,[0,[[846,44,846,56,[2,["Set"],"fromList"]],[846,57,846,69,[2,[],"constructors"]]]]]]],[847,29,848,27,[[847,29,847,45,"declarationOrder"],[847,48,847,89,[0,[[847,48,847,68,[2,["ListX"],"stableSortWith"]],[847,69,847,76,[2,[],"compare"]],[847,77,847,89,[2,[],"constructors"]]]]]]]]]]]]]]]]],[[851,17,851,28,[7,[[851,19,851,23,[12,[[],"True"],[]]],[851,25,851,26,[0]]]]],[852,21,857,26,[0,[[852,21,852,25,[2,[],"Just"]],[853,25,857,26,[6,[[853,27,853,31,[2,[],"name"]],[854,27,856,28,[8,[[854,29,854,69,[[854,29,854,41,"constructors"],[854,44,854,69,[0,[[854,44,854,56,[2,["Set"],"fromList"]],[854,57,854,69,[2,[],"constructors"]]]]]]],[855,29,856,27,[[855,29,855,45,"declarationOrder"],[855,48,855,60,[2,[],"constructors"]]]]]]]]]]]]]],[[859,17,859,29,[7,[[859,19,859,24,[12,[[],"False"],[]]],[859,26,859,27,[0]]]]],[860,21,860,28,[2,[],"Nothing"]]]]]]]]]]]]]]]],[862,5,890,16,[11,[862,8,862,53,[1,"/=",2,[862,8,862,40,[19,[862,8,862,14,[2,[],"config"]],[862,15,862,40,"sortTypesFromDependencies"]]],[862,44,862,53,[2,[],"DoNotSort"]]]],[863,9,887,17,[0,[[863,9,863,19,[2,["Dict"],"foldl"]],[864,13,885,14,[7,[864,14,884,92,[18,[[[864,15,864,16,[0]],[864,17,864,20,[11,"dep"]],[864,21,864,24,[11,"acc"]]],[865,17,884,92,[1,"|>",0,[865,17,883,37,[1,"|>",0,[865,17,882,26,[1,"|>",0,[865,17,865,39,[0,[[865,17,865,35,[2,["Dependency"],"modules"]],[865,36,865,39,[2,[],"dep"]]]]],[866,24,882,26,[0,[[866,24,866,38,[2,["List"],"filterMap"]],[867,25,882,26,[7,[867,26,881,38,[18,[[[867,27,867,43,[8,[[867,29,867,33,"name"],[867,35,867,41,"unions"]]]]],[868,29,881,38,[1,"|>",0,[868,29,876,37,[1,"|>",0,[868,29,869,49,[1,"|>",0,[868,29,868,68,[0,[[868,29,868,43,[2,["List"],"filterMap"]],[868,44,868,61,[7,[868,45,868,60,[0,[[868,45,868,55,[2,[],"docToEntry"]],[868,56,868,60,[2,[],"name"]]]]]]],[868,62,868,68,[2,[],"unions"]]]]],[869,36,869,49,[2,["Dict"],"fromList"]]]],[870,36,876,37,[7,[870,37,875,52,[18,[[[870,38,870,40,[11,"ts"]]],[871,41,875,52,[11,[871,44,871,59,[0,[[871,44,871,56,[2,["Dict"],"isEmpty"]],[871,57,871,59,[2,[],"ts"]]]]],[872,45,872,52,[2,[],"Nothing"]],[875,45,875,52,[0,[[875,45,875,49,[2,[],"Just"]],[875,50,875,52,[2,[],"ts"]]]]]]]]]]]]]],[877,36,881,38,[0,[[877,36,877,45,[2,["Maybe"],"map"]],[878,37,881,38,[7,[878,38,880,64,[0,[[878,38,878,48,[2,["Tuple"],"pair"]],[880,41,880,64,[7,[880,42,880,63,[0,[[880,42,880,54,[2,["String"],"split"]],[880,55,880,58,[5,"."]],[880,59,880,63,[2,[],"name"]]]]]]]]]]]]]]]]]]]]]]]]]]],[883,24,883,37,[2,["Dict"],"fromList"]]]],[884,24,884,92,[7,[884,25,884,91,[18,[[[884,26,884,31,[11,"types"]]],[884,35,884,91,[21,[884,37,884,40,"acc"],[[884,43,884,90,[[884,43,884,54,"customTypes"],[884,57,884,89,[0,[[884,57,884,67,[2,["Dict"],"union"]],[884,68,884,73,[2,[],"types"]],[884,74,884,89,[19,[884,74,884,77,[2,[],"acc"]],[884,78,884,89,"customTypes"]]]]]]]]]]]]]]]]]]]]]]],[886,13,886,20,[2,[],"context"]],[887,13,887,17,[2,[],"deps"]]]]],[890,9,890,16,[2,[],"context"]]]]]]]]]]]],[893,1,945,15,[0,[[1,[893,1,895,3,"{-| Visit all expressions in a module, checking for `case`s and ensuring those\nare sorted properly.\n-}"]],[1,[896,1,896,86,[[896,1,896,18,"expressionVisitor"],[896,21,896,86,[6,[896,21,896,31,[1,[896,21,896,31,[[],"RuleConfig"]],[]]],[896,35,896,86,[6,[896,35,896,50,[1,[896,35,896,39,[[],"Node"]],[[896,40,896,50,[1,[896,40,896,50,[[],"Expression"]],[]]]]]],[896,54,896,86,[6,[896,54,896,67,[1,[896,54,896,67,[[],"ModuleContext"]],[]]],[896,71,896,86,[1,[896,71,896,75,[[],"List"]],[[896,76,896,86,[1,[896,77,896,82,[[],"Error"]],[[896,83,896,85,[4,[]]]]]]]]]]]]]]]]]],[897,1,945,15,[[897,1,897,18,"expressionVisitor"],[[897,19,897,25,[11,"config"]],[897,26,897,30,[11,"node"]],[897,31,897,38,[11,"context"]]],[898,5,945,15,[17,[[898,10,898,25,[0,[[898,10,898,20,[2,["Node"],"value"]],[898,21,898,25,[2,[],"node"]]]]],[[[899,9,899,44,[12,[["Expression"],"CaseExpression"],[[899,35,899,44,[8,[[899,37,899,42,"cases"]]]]]]],[900,13,941,40,[16,[[[901,17,909,85,[0,[[0],[1,[901,17,901,35,[[901,17,901,27,"errorRange"],[901,30,901,35,[1,[901,30,901,35,[[],"Range"]],[]]]]]],[902,17,909,85,[[902,17,902,27,"errorRange"],[],[903,21,909,85,[16,[[[904,25,906,44,[0,[[0],[1,[904,25,904,34,[[904,25,904,26,"r"],[904,29,904,34,[1,[904,29,904,34,[[],"Range"]],[]]]]]],[905,25,906,44,[[905,25,905,26,"r"],[],[906,29,906,44,[0,[[906,29,906,39,[2,["Node"],"range"]],[906,40,906,44,[2,[],"node"]]]]]]]]]]],[909,21,909,85,[21,[909,23,909,24,"r"],[[909,27,909,84,[[909,27,909,30,"end"],[909,33,909,83,[8,[[909,35,909,52,[[909,35,909,38,"row"],[909,41,909,52,[19,[909,41,909,48,[19,[909,41,909,42,[2,[],"r"]],[909,43,909,48,"start"]]],[909,49,909,52,"row"]]]]],[909,54,909,82,[[909,54,909,60,"column"],[909,63,909,81,[1,"+",0,[909,63,909,77,[19,[909,63,909,70,[19,[909,63,909,64,[2,[],"r"]],[909,65,909,70,"start"]]],[909,71,909,77,"column"]]],[909,80,909,81,[3,4]]]]]]]]]]]]]]]]]]]]]]],[912,13,941,40,[1,"|>",0,[912,13,940,22,[1,"|>",0,[912,13,929,22,[0,[[912,13,912,31,[2,["ListX"],"indexedFoldr"]],[913,17,927,18,[7,[913,18,926,67,[18,[[[913,19,913,20,[11,"i"]],[913,21,913,29,[7,[[913,23,913,24,[11,"p"]],[913,26,913,27,[11,"e"]]]]],[913,30,913,33,[11,"acc"]]],[914,21,926,67,[1,"|>",0,[914,21,925,30,[1,"|>",0,[914,21,914,56,[0,[[914,21,914,39,[2,[],"getSortablePattern"]],[914,40,914,46,[2,[],"config"]],[914,47,914,54,[2,[],"context"]],[914,55,914,56,[2,[],"p"]]]]],[915,28,925,30,[0,[[915,28,915,37,[2,["Maybe"],"map"]],[916,29,925,30,[7,[916,30,924,34,[18,[[[916,31,916,33,[11,"sP"]]],[917,33,924,34,[8,[[917,35,917,44,[[917,35,917,40,"index"],[917,43,917,44,[2,[],"i"]]]],[918,35,919,33,[[918,35,918,42,"pattern"],[918,45,918,47,[2,[],"sP"]]]],[919,35,924,33,[[919,35,919,40,"range"],[920,37,923,42,[0,[[920,37,920,50,[2,["Range"],"combine"]],[921,41,923,42,[9,[[921,43,921,55,[0,[[921,43,921,53,[2,["Node"],"range"]],[921,54,921,55,[2,[],"p"]]]]],[922,43,922,55,[0,[[922,43,922,53,[2,["Node"],"range"]],[922,54,922,55,[2,[],"e"]]]]]]]]]]]]]]]]]]]]]]]]]],[926,28,926,67,[0,[[926,28,926,38,[2,["Maybe"],"map2"]],[926,39,926,63,[7,[926,40,926,62,[18,[[[926,41,926,45,[11,"acc_"]],[926,46,926,48,[11,"sP"]]],[926,52,926,62,[1,"::",1,[926,52,926,54,[2,[],"sP"]],[926,58,926,62,[2,[],"acc_"]]]]]]]]],[926,64,926,67,[2,[],"acc"]]]]]]]]]]]],[928,17,928,26,[7,[928,18,928,25,[0,[[928,18,928,22,[2,[],"Just"]],[928,23,928,25,[9,[]]]]]]]],[929,17,929,22,[2,[],"cases"]]]]],[930,20,940,22,[0,[[930,20,930,29,[2,["Maybe"],"map"]],[931,21,940,22,[7,[931,22,939,35,[0,[[931,22,931,34,[2,[],"checkSorting"]],[931,35,931,56,[19,[931,35,931,42,[2,[],"context"]],[931,43,931,56,"extractSource"]]],[932,25,932,40,[5,"Case patterns"]],[933,25,938,26,[9,[[934,27,934,114,[18,[[[934,28,934,30,[11,"c1"]],[934,31,934,33,[11,"c2"]]],[934,37,934,114,[0,[[934,37,934,57,[2,[],"compareByControlFlow"]],[934,58,934,64,[2,[],"config"]],[934,65,934,89,[6,[[934,67,934,75,[19,[934,67,934,69,[2,[],"c1"]],[934,70,934,75,"index"]]],[934,77,934,87,[19,[934,77,934,79,[2,[],"c1"]],[934,80,934,87,"pattern"]]]]]],[934,90,934,114,[6,[[934,92,934,100,[19,[934,92,934,94,[2,[],"c2"]],[934,95,934,100,"index"]]],[934,102,934,112,[19,[934,102,934,104,[2,[],"c2"]],[934,105,934,112,"pattern"]]]]]]]]]]]],[937,27,937,105,[18,[[[937,28,937,30,[11,"c1"]],[937,31,937,33,[11,"c2"]]],[937,37,937,105,[1,"<|",1,[937,37,937,57,[0,[[937,37,937,54,[2,["Maybe"],"withDefault"]],[937,55,937,57,[2,[],"EQ"]]]]],[937,61,937,105,[0,[[937,61,937,76,[2,[],"comparePatterns"]],[937,77,937,83,[2,[],"config"]],[937,84,937,94,[19,[937,84,937,86,[2,[],"c1"]],[937,87,937,94,"pattern"]]],[937,95,937,105,[19,[937,95,937,97,[2,[],"c2"]],[937,98,937,105,"pattern"]]]]]]]]]]]]]],[939,25,939,35,[2,[],"errorRange"]]]]]]]]]]]],[941,20,941,40,[0,[[941,20,941,37,[2,["Maybe"],"withDefault"]],[941,38,941,40,[9,[]]]]]]]]]]]],[[943,9,943,10,[0]],[945,13,945,15,[9,[]]]]]]]]]]]]],[948,1,954,6,[0,[[1,[948,1,949,3,"{-| Combine `ProjectContext`s by taking the union of known type orders.\n-}"]],[1,[950,1,950,73,[[950,1,950,20,"foldProjectContexts"],[950,23,950,73,[6,[950,23,950,37,[1,[950,23,950,37,[[],"ProjectContext"]],[]]],[950,41,950,73,[6,[950,41,950,55,[1,[950,41,950,55,[[],"ProjectContext"]],[]]],[950,59,950,73,[1,[950,59,950,73,[[],"ProjectContext"]],[]]]]]]]]]],[951,1,954,6,[[951,1,951,20,"foldProjectContexts"],[[951,21,951,31,[11,"newContext"]],[951,32,951,43,[11,"prevContext"]]],[952,5,954,6,[8,[[952,7,953,66,[[952,7,952,18,"customTypes"],[953,9,953,66,[0,[[953,9,953,19,[2,["Dict"],"union"]],[953,20,953,42,[19,[953,20,953,30,[2,[],"newContext"]],[953,31,953,42,"customTypes"]]],[953,43,953,66,[19,[953,43,953,54,[2,[],"prevContext"]],[953,55,953,66,"customTypes"]]]]]]]]]]]]]]]],[957,1,971,31,[0,[[1,[957,1,958,3,"{-| Create a `ProjectContext` from a `ModuleContext`.\n-}"]],[1,[959,1,959,71,[[959,1,959,20,"fromModuleToProject"],[959,23,959,71,[1,[959,23,959,42,[["Rule"],"ContextCreator"]],[[959,43,959,56,[1,[959,43,959,56,[[],"ModuleContext"]],[]]],[959,57,959,71,[1,[959,57,959,71,[[],"ProjectContext"]],[]]]]]]]]],[960,1,971,31,[[960,1,960,20,"fromModuleToProject"],[],[961,5,971,31,[1,"|>",0,[961,5,970,10,[0,[[961,5,961,28,[2,["Rule"],"initContextCreator"]],[962,9,970,10,[7,[962,10,969,14,[18,[[[962,11,962,21,[11,"moduleName"]],[962,22,962,44,[8,[[962,24,962,42,"exposedCustomTypes"]]]]],[963,13,969,14,[8,[[963,15,968,65,[[963,15,963,26,"customTypes"],[964,17,968,65,[11,[964,20,964,51,[0,[[964,20,964,32,[2,["Dict"],"isEmpty"]],[964,33,964,51,[2,[],"exposedCustomTypes"]]]]],[965,21,965,31,[2,["Dict"],"empty"]],[968,21,968,65,[0,[[968,21,968,35,[2,["Dict"],"singleton"]],[968,36,968,46,[2,[],"moduleName"]],[968,47,968,65,[2,[],"exposedCustomTypes"]]]]]]]]]]]]]]]]]]]],[971,12,971,31,[2,["Rule"],"withModuleName"]]]]]]]]],[974,1,1000,28,[0,[[1,[974,1,975,3,"{-| Create a `ModuleContext` from a `ProjectContext`.\n-}"]],[1,[976,1,976,85,[[976,1,976,20,"fromProjectToModule"],[976,23,976,85,[6,[976,23,976,33,[1,[976,23,976,33,[[],"RuleConfig"]],[]]],[976,37,976,85,[1,[976,37,976,56,[["Rule"],"ContextCreator"]],[[976,57,976,71,[1,[976,57,976,71,[[],"ProjectContext"]],[]]],[976,72,976,85,[1,[976,72,976,85,[[],"ModuleContext"]],[]]]]]]]]]]],[977,1,1000,28,[[977,1,977,20,"fromProjectToModule"],[[977,21,977,27,[11,"config"]]],[978,5,1000,28,[1,"|>",0,[978,5,999,34,[1,"|>",0,[978,5,998,31,[1,"|>",0,[978,5,997,40,[1,"|>",0,[978,5,996,42,[1,"|>",0,[978,5,995,10,[0,[[978,5,978,28,[2,["Rule"],"initContextCreator"]],[979,9,995,10,[7,[979,10,994,14,[18,[[[979,11,979,22,[11,"lookupTable"]],[979,23,979,36,[11,"extractSource"]],[979,37,979,47,[11,"moduleName"]],[979,48,979,61,[11,"fileIsIgnored"]],[979,62,979,96,[8,[[979,64,979,80,"moduleDefinition"],[979,82,979,94,"declarations"]]]],[979,97,979,111,[11,"projectContext"]]],[980,13,994,14,[16,[[[981,17,987,26,[1,[981,17,981,52,[8,[[981,19,981,30,"customTypes"],[981,32,981,50,"exposedCustomTypes"]]]],[982,21,987,26,[0,[[982,21,982,43,[2,[],"declarationListVisitor"]],[982,44,982,50,[2,[],"config"]],[983,25,983,37,[2,[],"declarations"]],[984,25,987,26,[8,[[984,27,984,67,[[984,27,984,38,"customTypes"],[984,41,984,67,[19,[984,41,984,55,[2,[],"projectContext"]],[984,56,984,67,"customTypes"]]]]],[985,27,986,25,[[985,27,985,39,"exposedTypes"],[985,42,985,88,[1,"<|",1,[985,42,985,57,[2,[],"getExposedTypes"]],[985,61,985,88,[0,[[985,61,985,71,[2,["Node"],"value"]],[985,72,985,88,[2,[],"moduleDefinition"]]]]]]]]],[986,27,987,25,[[986,27,986,37,"moduleName"],[986,40,986,66,[0,[[986,40,986,51,[2,["String"],"join"]],[986,52,986,55,[5,"."]],[986,56,986,66,[2,[],"moduleName"]]]]]]]]]]]]]]]],[989,13,994,14,[8,[[989,15,989,40,[[989,15,989,26,"customTypes"],[989,29,989,40,[2,[],"customTypes"]]]],[990,15,991,13,[[990,15,990,33,"exposedCustomTypes"],[990,36,990,54,[2,[],"exposedCustomTypes"]]]],[991,15,992,13,[[991,15,991,28,"fileIsIgnored"],[991,31,991,44,[2,[],"fileIsIgnored"]]]],[992,15,993,13,[[992,15,992,26,"lookupTable"],[992,29,992,40,[2,[],"lookupTable"]]]],[993,15,994,13,[[993,15,993,28,"extractSource"],[993,31,993,44,[2,[],"extractSource"]]]]]]]]]]]]]]]]]],[996,12,996,42,[2,["Rule"],"withModuleNameLookupTable"]]]],[997,12,997,40,[2,["Rule"],"withSourceCodeExtractor"]]]],[998,12,998,31,[2,["Rule"],"withModuleName"]]]],[999,12,999,34,[2,["Rule"],"withIsFileIgnored"]]]],[1000,12,1000,28,[2,["Rule"],"withFullAst"]]]]]]]]],[1003,1,1018,17,[0,[[1,[1003,1,1005,3,"{-| Unwrap a pattern to get at the actual pattern inside of any parentheses or\n`as` patterns.\n-}"]],[1,[1006,1,1006,48,[[1006,1,1006,17,"getActualPattern"],[1006,20,1006,48,[6,[1006,20,1006,32,[1,[1006,20,1006,24,[[],"Node"]],[[1006,25,1006,32,[1,[1006,25,1006,32,[[],"Pattern"]],[]]]]]],[1006,36,1006,48,[1,[1006,36,1006,40,[[],"Node"]],[[1006,41,1006,48,[1,[1006,41,1006,48,[[],"Pattern"]],[]]]]]]]]]]],[1007,1,1018,17,[[1007,1,1007,17,"getActualPattern"],[[1007,18,1007,22,[11,"node"]]],[1008,5,1018,17,[17,[[1008,10,1008,25,[0,[[1008,10,1008,20,[2,["Node"],"value"]],[1008,21,1008,25,[2,[],"node"]]]]],[[[1010,9,1010,30,[12,[["Pattern"],"AsPattern"],[[1010,27,1010,28,[11,"p"]],[1010,29,1010,30,[0]]]]],[1011,13,1011,31,[0,[[1011,13,1011,29,[2,[],"getActualPattern"]],[1011,30,1011,31,[2,[],"p"]]]]]],[[1013,9,1013,39,[12,[["Pattern"],"ParenthesizedPattern"],[[1013,38,1013,39,[11,"p"]]]]],[1014,13,1014,31,[0,[[1014,13,1014,29,[2,[],"getActualPattern"]],[1014,30,1014,31,[2,[],"p"]]]]]],[[1017,9,1017,10,[0]],[1018,13,1018,17,[2,[],"node"]]]]]]]]]]]],[1025,1,1050,13,[0,[[1,[1025,1,1027,3,"{-| Get a set of all types with exposed constructors or `Nothing` if everything\nis exposed.\n-}"]],[1,[1028,1,1028,47,[[1028,1,1028,16,"getExposedTypes"],[1028,19,1028,47,[6,[1028,19,1028,25,[1,[1028,19,1028,25,[[],"Module"]],[]]],[1028,29,1028,47,[1,[1028,29,1028,34,[[],"Maybe"]],[[1028,35,1028,47,[1,[1028,36,1028,39,[[],"Set"]],[[1028,40,1028,46,[1,[1028,40,1028,46,[[],"String"]],[]]]]]]]]]]]]]],[1029,1,1050,13,[[1029,1,1029,16,"getExposedTypes"],[],[1030,5,1050,13,[16,[[[1031,9,1038,28,[0,[[0],[1,[1031,9,1031,79,[[1031,9,1031,41,"keepTypesWithExposedConstructors"],[1031,44,1031,79,[6,[1031,44,1031,63,[1,[1031,44,1031,48,[[],"Node"]],[[1031,49,1031,63,[1,[1031,49,1031,63,[[],"TopLevelExpose"]],[]]]]]],[1031,67,1031,79,[1,[1031,67,1031,72,[[],"Maybe"]],[[1031,73,1031,79,[1,[1031,73,1031,79,[[],"String"]],[]]]]]]]]]]],[1032,9,1038,28,[[1032,9,1032,41,"keepTypesWithExposedConstructors"],[[1032,42,1032,43,[11,"e"]]],[1033,13,1038,28,[17,[[1033,18,1033,30,[0,[[1033,18,1033,28,[2,["Node"],"value"]],[1033,29,1033,30,[2,[],"e"]]]]],[[[1034,17,1034,36,[12,[[],"TypeExpose"],[[1034,28,1034,36,[8,[[1034,30,1034,34,"name"]]]]]]],[1035,21,1035,30,[0,[[1035,21,1035,25,[2,[],"Just"]],[1035,26,1035,30,[2,[],"name"]]]]]],[[1037,17,1037,18,[0]],[1038,21,1038,28,[2,[],"Nothing"]]]]]]]]]]]]],[1040,5,1050,13,[1,">>",1,[1040,5,1040,24,[2,["Module"],"exposingList"]],[1041,12,1050,13,[7,[1041,13,1049,36,[18,[[[1041,14,1041,15,[11,"l"]]],[1042,17,1049,36,[17,[[1042,22,1042,23,[2,[],"l"]],[[[1043,21,1043,26,[12,[[],"All"],[[1043,25,1043,26,[0]]]]],[1044,25,1044,32,[2,[],"Nothing"]]],[[1046,21,1046,32,[12,[[],"Explicit"],[[1046,30,1046,32,[11,"es"]]]]],[1047,25,1049,36,[1,"|>",0,[1047,25,1048,44,[1,"|>",0,[1047,25,1047,75,[0,[[1047,25,1047,39,[2,["List"],"filterMap"]],[1047,40,1047,72,[2,[],"keepTypesWithExposedConstructors"]],[1047,73,1047,75,[2,[],"es"]]]]],[1048,32,1048,44,[2,["Set"],"fromList"]]]],[1049,32,1049,36,[2,[],"Just"]]]]]]]]]]]]]]]]]]]]]]]],[1053,1,1177,20,[0,[[1,[1053,1,1055,3,"{-| Given config, context, and a pattern, convert it into a pattern we know\nhow to sort, if possible.\n-}"]],[1,[1056,1,1056,90,[[1056,1,1056,19,"getSortablePattern"],[1056,22,1056,90,[6,[1056,22,1056,32,[1,[1056,22,1056,32,[[],"RuleConfig"]],[]]],[1056,36,1056,90,[6,[1056,36,1056,49,[1,[1056,36,1056,49,[[],"ModuleContext"]],[]]],[1056,53,1056,90,[6,[1056,53,1056,65,[1,[1056,53,1056,57,[[],"Node"]],[[1056,58,1056,65,[1,[1056,58,1056,65,[[],"Pattern"]],[]]]]]],[1056,69,1056,90,[1,[1056,69,1056,74,[[],"Maybe"]],[[1056,75,1056,90,[1,[1056,75,1056,90,[[],"SortablePattern"]],[]]]]]]]]]]]]]]],[1057,1,1177,20,[[1057,1,1057,19,"getSortablePattern"],[[1057,20,1057,55,[14,[1057,21,1057,54,[13,[1057,21,1057,40,[14,[1057,22,1057,39,[12,[[],"RuleConfig"],[[1057,33,1057,39,[11,"config"]]]]]]],[1057,44,1057,54,"ruleConfig"]]]]],[1057,56,1057,63,[11,"context"]],[1057,64,1057,68,[11,"node"]]],[1058,5,1177,20,[16,[[[1059,9,1082,22,[0,[[0],[1,[1059,9,1059,100,[[1059,9,1059,29,"findConstructorOrder"],[1059,32,1059,100,[6,[1059,32,1059,38,[1,[1059,32,1059,38,[[],"String"]],[]]],[1059,42,1059,100,[6,[1059,42,1059,61,[1,[1059,42,1059,46,[[],"List"]],[[1059,47,1059,61,[1,[1059,48,1059,52,[[],"Node"]],[[1059,53,1059,60,[1,[1059,53,1059,60,[[],"Pattern"]],[]]]]]]]]],[1059,65,1059,100,[6,[1059,65,1059,75,[1,[1059,65,1059,75,[[],"ModuleName"]],[]]],[1059,79,1059,100,[1,[1059,79,1059,84,[[],"Maybe"]],[[1059,85,1059,100,[1,[1059,85,1059,100,[[],"SortablePattern"]],[]]]]]]]]]]]]]]],[1060,9,1082,22,[[1060,9,1060,29,"findConstructorOrder"],[[1060,30,1060,41,[11,"constructor"]],[1060,42,1060,44,[11,"ps"]],[1060,45,1060,55,[11,"moduleName"]]],[1062,13,1082,22,[1,"|>",0,[1062,13,1069,22,[1,"|>",0,[1062,13,1062,52,[0,[[1062,13,1062,21,[2,["Dict"],"get"]],[1062,22,1062,32,[2,[],"moduleName"]],[1062,33,1062,52,[19,[1062,33,1062,40,[2,[],"context"]],[1062,41,1062,52,"customTypes"]]]]]],[1064,20,1069,22,[0,[[1064,20,1064,33,[2,["Maybe"],"andThen"]],[1065,21,1069,22,[7,[1065,22,1068,26,[0,[[1065,22,1065,32,[2,["DictX"],"find"]],[1066,25,1068,26,[7,[1066,26,1067,64,[18,[[[1066,27,1066,28,[0]],[1066,29,1066,45,[8,[[1066,31,1066,43,"constructors"]]]]],[1067,29,1067,64,[0,[[1067,29,1067,39,[2,["Set"],"member"]],[1067,40,1067,51,[2,[],"constructor"]],[1067,52,1067,64,[2,[],"constructors"]]]]]]]]]]]]]]]]]]]],[1071,20,1082,22,[0,[[1071,20,1071,33,[2,["Maybe"],"andThen"]],[1072,21,1082,22,[7,[1072,22,1081,34,[18,[[[1072,23,1072,60,[7,[[1072,25,1072,36,[11,"matchedType"]],[1072,38,1072,58,[8,[[1072,40,1072,56,"declarationOrder"]]]]]]]],[1073,25,1081,34,[1,"|>",0,[1073,25,1073,69,[0,[[1073,25,1073,40,[2,["ListX"],"elemIndex"]],[1073,41,1073,52,[2,[],"constructor"]],[1073,53,1073,69,[2,[],"declarationOrder"]]]]],[1074,32,1081,34,[0,[[1074,32,1074,41,[2,["Maybe"],"map"]],[1075,33,1081,34,[7,[1075,34,1080,42,[18,[[[1075,35,1075,40,[11,"order"]]],[1076,37,1080,42,[0,[[1076,37,1076,48,[2,[],"Constructor"]],[1077,41,1080,42,[8,[[1077,43,1077,56,[[1077,43,1077,48,"order"],[1077,51,1077,56,[2,[],"order"]]]],[1078,43,1079,41,[[1078,43,1078,54,"subpatterns"],[1078,57,1078,71,[0,[[1078,57,1078,65,[2,["List"],"map"]],[1078,66,1078,68,[2,[],"go"]],[1078,69,1078,71,[2,[],"ps"]]]]]]],[1079,43,1080,41,[[1079,43,1079,48,"type_"],[1079,51,1079,78,[6,[[1079,53,1079,63,[2,[],"moduleName"]],[1079,65,1079,76,[2,[],"matchedType"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1084,9,1086,50,[0,[[0],[1,[1084,9,1084,51,[[1084,9,1084,11,"go"],[1084,14,1084,51,[6,[1084,14,1084,26,[1,[1084,14,1084,18,[[],"Node"]],[[1084,19,1084,26,[1,[1084,19,1084,26,[[],"Pattern"]],[]]]]]],[1084,30,1084,51,[1,[1084,30,1084,35,[[],"Maybe"]],[[1084,36,1084,51,[1,[1084,36,1084,51,[[],"SortablePattern"]],[]]]]]]]]]]],[1085,9,1086,50,[[1085,9,1085,11,"go"],[],[1086,13,1086,50,[0,[[1086,13,1086,31,[2,[],"getSortablePattern"]],[1086,32,1086,42,[2,[],"ruleConfig"]],[1086,43,1086,50,[2,[],"context"]]]]]]]]]],[1088,9,1094,24,[0,[[0],[1,[1088,9,1088,74,[[1088,9,1088,20,"makeLiteral"],[1088,23,1088,74,[6,[1088,23,1088,44,[6,[1088,24,1088,25,[0,"a"]],[1088,29,1088,43,[1,[1088,29,1088,43,[[],"LiteralPattern"]],[]]]]],[1088,48,1088,74,[6,[1088,48,1088,49,[0,"a"]],[1088,53,1088,74,[1,[1088,53,1088,58,[[],"Maybe"]],[[1088,59,1088,74,[1,[1088,59,1088,74,[[],"SortablePattern"]],[]]]]]]]]]]]]],[1089,9,1094,24,[[1089,9,1089,20,"makeLiteral"],[[1089,21,1089,22,[11,"l"]],[1089,23,1089,24,[11,"a"]]],[1090,13,1094,24,[11,[1090,16,1090,35,[19,[1090,16,1090,22,[2,[],"config"]],[1090,23,1090,35,"sortLiterals"]]],[1091,17,1091,39,[1,"<|",1,[1091,17,1091,21,[2,[],"Just"]],[1091,25,1091,39,[1,"<|",1,[1091,25,1091,32,[2,[],"Literal"]],[1091,36,1091,39,[0,[[1091,36,1091,37,[2,[],"l"]],[1091,38,1091,39,[2,[],"a"]]]]]]]]],[1094,17,1094,24,[2,[],"Nothing"]]]]]]]]],[1096,9,1098,34,[0,[[0],[1,[1096,9,1096,25,[[1096,9,1096,10,"n"],[1096,13,1096,25,[1,[1096,13,1096,17,[[],"Node"]],[[1096,18,1096,25,[1,[1096,18,1096,25,[[],"Pattern"]],[]]]]]]]]],[1097,9,1098,34,[[1097,9,1097,10,"n"],[],[1098,13,1098,34,[0,[[1098,13,1098,29,[2,[],"getActualPattern"]],[1098,30,1098,34,[2,[],"node"]]]]]]]]]]],[1100,5,1177,20,[17,[[1100,10,1100,22,[0,[[1100,10,1100,20,[2,["Node"],"value"]],[1100,21,1100,22,[2,[],"n"]]]]],[[[1102,9,1102,27,[12,[["Pattern"],"AllPattern"],[]]],[1103,13,1103,26,[0,[[1103,13,1103,17,[2,[],"Just"]],[1103,18,1103,26,[2,[],"Wildcard"]]]]]],[[1106,9,1106,30,[12,[["Pattern"],"CharPattern"],[[1106,29,1106,30,[11,"c"]]]]],[1107,13,1107,38,[0,[[1107,13,1107,24,[2,[],"makeLiteral"]],[1107,25,1107,36,[2,[],"CharLiteral"]],[1107,37,1107,38,[2,[],"c"]]]]]],[[1109,9,1109,32,[12,[["Pattern"],"StringPattern"],[[1109,31,1109,32,[11,"s"]]]]],[1110,13,1110,40,[0,[[1110,13,1110,24,[2,[],"makeLiteral"]],[1110,25,1110,38,[2,[],"StringLiteral"]],[1110,39,1110,40,[2,[],"s"]]]]]],[[1113,9,1113,29,[12,[["Pattern"],"IntPattern"],[[1113,28,1113,29,[11,"i"]]]]],[1114,13,1114,37,[0,[[1114,13,1114,24,[2,[],"makeLiteral"]],[1114,25,1114,35,[2,[],"IntLiteral"]],[1114,36,1114,37,[2,[],"i"]]]]]],[[1117,9,1117,29,[12,[["Pattern"],"HexPattern"],[[1117,28,1117,29,[11,"i"]]]]],[1118,13,1118,37,[0,[[1118,13,1118,24,[2,[],"makeLiteral"]],[1118,25,1118,35,[2,[],"IntLiteral"]],[1118,36,1118,37,[2,[],"i"]]]]]],[[1120,9,1120,31,[12,[["Pattern"],"FloatPattern"],[[1120,30,1120,31,[11,"f"]]]]],[1121,13,1121,39,[0,[[1121,13,1121,24,[2,[],"makeLiteral"]],[1121,25,1121,37,[2,[],"FloatLiteral"]],[1121,38,1121,39,[2,[],"f"]]]]]],[[1124,9,1124,32,[12,[["Pattern"],"TuplePattern"],[[1124,30,1124,32,[11,"ps"]]]]],[1125,13,1132,22,[1,"|>",0,[1125,13,1125,34,[0,[[1125,13,1125,28,[2,["MaybeX"],"traverse"]],[1125,29,1125,31,[2,[],"go"]],[1125,32,1125,34,[2,[],"ps"]]]]],[1126,20,1132,22,[0,[[1126,20,1126,29,[2,["Maybe"],"map"]],[1127,21,1132,22,[7,[1127,22,1131,30,[18,[[[1127,23,1127,34,[11,"subpatterns"]]],[1128,25,1131,30,[0,[[1128,25,1128,42,[2,[],"ListTupleOrUncons"]],[1129,29,1131,30,[8,[[1129,31,1129,56,[[1129,31,1129,42,"subpatterns"],[1129,45,1129,56,[2,[],"subpatterns"]]]],[1130,31,1131,29,[[1130,31,1130,41,"terminates"],[1130,44,1130,48,[2,[],"True"]]]]]]]]]]]]]]]]]]]]],[[1134,9,1134,36,[12,[["Pattern"],"UnConsPattern"],[[1134,31,1134,33,[11,"p1"]],[1134,34,1134,36,[11,"p2"]]]]],[1135,13,1156,31,[16,[[[1136,17,1153,36,[0,[[0],[1,[1136,17,1136,83,[[1136,17,1136,21,"cons"],[1136,24,1136,83,[6,[1136,24,1136,39,[1,[1136,24,1136,39,[[],"SortablePattern"]],[]]],[1136,43,1136,83,[6,[1136,43,1136,58,[1,[1136,43,1136,58,[[],"SortablePattern"]],[]]],[1136,62,1136,83,[1,[1136,62,1136,67,[[],"Maybe"]],[[1136,68,1136,83,[1,[1136,68,1136,83,[[],"SortablePattern"]],[]]]]]]]]]]]]],[1137,17,1153,36,[[1137,17,1137,21,"cons"],[[1137,22,1137,23,[11,"x"]],[1137,24,1137,26,[11,"xs"]]],[1138,21,1153,36,[17,[[1138,26,1138,28,[2,[],"xs"]],[[[1139,25,1139,44,[12,[[],"ListTupleOrUncons"],[[1139,43,1139,44,[11,"r"]]]]],[1140,29,1142,77,[1,"<|",1,[1140,29,1140,33,[2,[],"Just"]],[1141,33,1142,77,[0,[[1141,33,1141,50,[2,[],"ListTupleOrUncons"]],[1142,37,1142,77,[21,[1142,39,1142,40,"r"],[[1142,43,1142,76,[[1142,43,1142,54,"subpatterns"],[1142,57,1142,75,[1,"::",1,[1142,57,1142,58,[2,[],"x"]],[1142,62,1142,75,[19,[1142,62,1142,63,[2,[],"r"]],[1142,64,1142,75,"subpatterns"]]]]]]]]]]]]]]]],[[1144,25,1144,33,[12,[[],"Wildcard"],[]]],[1145,29,1149,38,[1,"<|",1,[1145,29,1145,33,[2,[],"Just"]],[1146,33,1149,38,[0,[[1146,33,1146,50,[2,[],"ListTupleOrUncons"]],[1147,37,1149,38,[8,[[1147,39,1147,58,[[1147,39,1147,50,"subpatterns"],[1147,53,1147,58,[9,[[1147,55,1147,56,[2,[],"x"]]]]]]],[1148,39,1149,37,[[1148,39,1148,49,"terminates"],[1148,52,1148,57,[2,[],"False"]]]]]]]]]]]]],[[1151,25,1151,26,[0]],[1153,29,1153,36,[2,[],"Nothing"]]]]]]]]]]]]],[1155,13,1156,31,[1,"|>",0,[1155,13,1155,44,[0,[[1155,13,1155,23,[2,["Maybe"],"map2"]],[1155,24,1155,28,[2,[],"cons"]],[1155,29,1155,36,[7,[1155,30,1155,35,[0,[[1155,30,1155,32,[2,[],"go"]],[1155,33,1155,35,[2,[],"p1"]]]]]]],[1155,37,1155,44,[7,[1155,38,1155,43,[0,[[1155,38,1155,40,[2,[],"go"]],[1155,41,1155,43,[2,[],"p2"]]]]]]]]]],[1156,20,1156,31,[2,["MaybeX"],"join"]]]]]]]],[[1158,9,1158,31,[12,[["Pattern"],"ListPattern"],[[1158,29,1158,31,[11,"ps"]]]]],[1159,13,1166,22,[1,"|>",0,[1159,13,1159,34,[0,[[1159,13,1159,28,[2,["MaybeX"],"traverse"]],[1159,29,1159,31,[2,[],"go"]],[1159,32,1159,34,[2,[],"ps"]]]]],[1160,20,1166,22,[0,[[1160,20,1160,29,[2,["Maybe"],"map"]],[1161,21,1166,22,[7,[1161,22,1165,30,[18,[[[1161,23,1161,34,[11,"subpatterns"]]],[1162,25,1165,30,[0,[[1162,25,1162,42,[2,[],"ListTupleOrUncons"]],[1163,29,1165,30,[8,[[1163,31,1163,56,[[1163,31,1163,42,"subpatterns"],[1163,45,1163,56,[2,[],"subpatterns"]]]],[1164,31,1165,29,[[1164,31,1164,41,"terminates"],[1164,44,1164,48,[2,[],"True"]]]]]]]]]]]]]]]]]]]]],[[1168,9,1168,29,[12,[["Pattern"],"VarPattern"],[[1168,28,1168,29,[0]]]]],[1169,13,1169,26,[0,[[1169,13,1169,17,[2,[],"Just"]],[1169,18,1169,26,[2,[],"Wildcard"]]]]]],[[1171,9,1171,41,[12,[["Pattern"],"NamedPattern"],[[1171,30,1171,38,[8,[[1171,32,1171,36,"name"]]]],[1171,39,1171,41,[11,"ps"]]]]],[1172,13,1173,64,[1,"|>",0,[1172,13,1172,48,[0,[[1172,13,1172,26,[2,[],"moduleNameFor"]],[1172,27,1172,46,[19,[1172,27,1172,34,[2,[],"context"]],[1172,35,1172,46,"lookupTable"]]],[1172,47,1172,48,[2,[],"n"]]]]],[1173,20,1173,64,[0,[[1173,20,1173,33,[2,["Maybe"],"andThen"]],[1173,34,1173,64,[7,[1173,35,1173,63,[0,[[1173,35,1173,55,[2,[],"findConstructorOrder"]],[1173,56,1173,60,[2,[],"name"]],[1173,61,1173,63,[2,[],"ps"]]]]]]]]]]]]],[[1175,9,1175,10,[0]],[1177,13,1177,20,[2,[],"Nothing"]]]]]]]]]]]]]]],[1180,1,1185,6,[0,[[1,[1180,1,1181,3,"{-| The initial project context knows of no types.\n-}"]],[1,[1182,1,1182,39,[[1182,1,1182,22,"initialProjectContext"],[1182,25,1182,39,[1,[1182,25,1182,39,[[],"ProjectContext"]],[]]]]]],[1183,1,1185,6,[[1183,1,1183,22,"initialProjectContext"],[],[1184,5,1185,6,[8,[[1184,7,1184,31,[[1184,7,1184,18,"customTypes"],[1184,21,1184,31,[2,["Dict"],"empty"]]]]]]]]]]]],[1188,1,1195,25,[2,[[1,[1188,1,1190,3,"{-| A literal pattern. Int and Hex literals are not distinguished, as they are\nsorted identically.\n-}"]],[1191,6,1191,20,"LiteralPattern"],[],[[1192,7,1192,23,[[1192,7,1192,18,"CharLiteral"],[[1192,19,1192,23,[1,[1192,19,1192,23,[[],"Char"]],[]]]]]],[1193,7,1193,27,[[1193,7,1193,20,"StringLiteral"],[[1193,21,1193,27,[1,[1193,21,1193,27,[[],"String"]],[]]]]]],[1194,7,1194,21,[[1194,7,1194,17,"IntLiteral"],[[1194,18,1194,21,[1,[1194,18,1194,21,[[],"Int"]],[]]]]]],[1195,7,1195,25,[[1195,7,1195,19,"FloatLiteral"],[[1195,20,1195,25,[1,[1195,20,1195,25,[[],"Float"]],[]]]]]]]]]],[1198,1,1228,6,[1,[[1,[1198,1,1208,3,"{-| The module context, consisting of a map from module names to a map of type\nnames to orders.\n\n  - `customTypes` -- Orderings of all known custom types.\n  - `exposedCustomTypes` -- All custom type orders that are exposed from local\n    module.\n  - `fileIsIgnored` -- Whether file should not be checked for errors\n  - `lookupTable` -- Module name lookup table\n  - `extractSourceCode` -- Source extractor for fixes\n\n-}"]],[1209,12,1209,25,"ModuleContext"],[],[1210,5,1228,6,[4,[[1210,7,1218,14,[[1210,7,1210,18,"customTypes"],[1211,9,1218,14,[1,[1211,9,1211,13,[[],"Dict"]],[[1212,13,1212,23,[1,[1212,13,1212,23,[[],"ModuleName"]],[]]],[1213,13,1218,14,[1,[1213,14,1213,18,[[],"Dict"]],[[1214,17,1214,23,[1,[1214,17,1214,23,[[],"String"]],[]]],[1215,17,1217,18,[4,[[1215,19,1215,44,[[1215,19,1215,31,"constructors"],[1215,34,1215,44,[1,[1215,34,1215,37,[[],"Set"]],[[1215,38,1215,44,[1,[1215,38,1215,44,[[],"String"]],[]]]]]]]],[1216,19,1217,17,[[1216,19,1216,35,"declarationOrder"],[1216,38,1216,49,[1,[1216,38,1216,42,[[],"List"]],[[1216,43,1216,49,[1,[1216,43,1216,49,[[],"String"]],[]]]]]]]]]]]]]]]]]]],[1219,7,1225,5,[[1219,7,1219,25,"exposedCustomTypes"],[1220,9,1224,14,[1,[1220,9,1220,13,[[],"Dict"]],[[1221,13,1221,19,[1,[1221,13,1221,19,[[],"String"]],[]]],[1222,13,1224,14,[4,[[1222,15,1222,40,[[1222,15,1222,27,"constructors"],[1222,30,1222,40,[1,[1222,30,1222,33,[[],"Set"]],[[1222,34,1222,40,[1,[1222,34,1222,40,[[],"String"]],[]]]]]]]],[1223,15,1224,13,[[1223,15,1223,31,"declarationOrder"],[1223,34,1223,45,[1,[1223,34,1223,38,[[],"List"]],[[1223,39,1223,45,[1,[1223,39,1223,45,[[],"String"]],[]]]]]]]]]]]]]]]],[1225,7,1226,5,[[1225,7,1225,20,"fileIsIgnored"],[1225,23,1225,27,[1,[1225,23,1225,27,[[],"Bool"]],[]]]]],[1226,7,1227,5,[[1226,7,1226,18,"lookupTable"],[1226,21,1226,42,[1,[1226,21,1226,42,[[],"ModuleNameLookupTable"]],[]]]]],[1227,7,1228,5,[[1227,7,1227,20,"extractSource"],[1227,23,1227,38,[6,[1227,23,1227,28,[1,[1227,23,1227,28,[[],"Range"]],[]]],[1227,32,1227,38,[1,[1227,32,1227,38,[[],"String"]],[]]]]]]]]]]]]],[1231,1,1244,14,[0,[[1,[1231,1,1233,3,"{-| Visit each module, first getting types from all declarations and then\nchecking all expressions for `case`s.\n-}"]],[1,[1234,1,1234,161,[[1234,1,1234,14,"moduleVisitor"],[1234,17,1234,161,[6,[1234,17,1234,27,[1,[1234,17,1234,27,[[],"RuleConfig"]],[]]],[1234,31,1234,161,[6,[1234,31,1234,78,[1,[1234,31,1234,52,[["Rule"],"ModuleRuleSchema"]],[[1234,53,1234,64,[0,"schemaState"]],[1234,65,1234,78,[1,[1234,65,1234,78,[[],"ModuleContext"]],[]]]]]],[1234,82,1234,161,[1,[1234,82,1234,103,[["Rule"],"ModuleRuleSchema"]],[[1234,104,1234,147,[5,[1234,106,1234,117,"schemaState"],[1234,119,1234,146,[[1234,120,1234,146,[[1234,120,1234,140,"hasAtLeastOneVisitor"],[1234,143,1234,145,[2]]]]]]]],[1234,148,1234,161,[1,[1234,148,1234,161,[[],"ModuleContext"]],[]]]]]]]]]]]]],[1235,1,1244,14,[[1235,1,1235,14,"moduleVisitor"],[[1235,15,1235,21,[11,"config"]],[1235,22,1235,28,[11,"schema"]]],[1236,5,1244,14,[1,"|>",0,[1236,5,1236,11,[2,[],"schema"]],[1237,12,1244,14,[0,[[1237,12,1237,43,[2,["Rule"],"withExpressionEnterVisitor"]],[1238,13,1244,14,[7,[1238,14,1243,56,[18,[[[1238,15,1238,16,[11,"e"]],[1238,17,1238,18,[11,"c"]]],[1239,17,1243,56,[11,[1239,20,1239,35,[19,[1239,20,1239,21,[2,[],"c"]],[1239,22,1239,35,"fileIsIgnored"]]],[1240,21,1240,30,[6,[[1240,23,1240,25,[9,[]]],[1240,27,1240,28,[2,[],"c"]]]]],[1243,21,1243,56,[6,[[1243,23,1243,51,[0,[[1243,23,1243,40,[2,[],"expressionVisitor"]],[1243,41,1243,47,[2,[],"config"]],[1243,48,1243,49,[2,[],"e"]],[1243,50,1243,51,[2,[],"c"]]]]],[1243,53,1243,54,[2,[],"c"]]]]]]]]]]]]]]]]]]]]]],[1247,1,1260,6,[1,[[1,[1247,1,1249,3,"{-| The project context, consisting of a map from module names to a map of type\nnames to orders.\n-}"]],[1250,12,1250,26,"ProjectContext"],[],[1251,5,1260,6,[4,[[1251,7,1259,14,[[1251,7,1251,18,"customTypes"],[1252,9,1259,14,[1,[1252,9,1252,13,[[],"Dict"]],[[1253,13,1253,23,[1,[1253,13,1253,23,[[],"ModuleName"]],[]]],[1254,13,1259,14,[1,[1254,14,1254,18,[[],"Dict"]],[[1255,17,1255,23,[1,[1255,17,1255,23,[[],"String"]],[]]],[1256,17,1258,18,[4,[[1256,19,1256,44,[[1256,19,1256,31,"constructors"],[1256,34,1256,44,[1,[1256,34,1256,37,[[],"Set"]],[[1256,38,1256,44,[1,[1256,38,1256,44,[[],"String"]],[]]]]]]]],[1257,19,1258,17,[[1257,19,1257,35,"declarationOrder"],[1257,38,1257,49,[1,[1257,38,1257,42,[[],"List"]],[[1257,43,1257,49,[1,[1257,43,1257,49,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]]],[1263,1,1296,26,[0,[[1,[1263,1,1265,3,"{-| Check if list/tuple/uncons patterns can safely be sorted by making certain\nneither would override the other's control flow.\n-}"]],[1,[1266,1,1266,170,[[1266,1,1266,27,"safelySortableListPatterns"],[1266,30,1266,170,[6,[1266,30,1266,40,[1,[1266,30,1266,40,[[],"RuleConfig"]],[]]],[1266,44,1266,170,[6,[1266,44,1266,101,[4,[[1266,46,1266,80,[[1266,46,1266,57,"subpatterns"],[1266,60,1266,80,[1,[1266,60,1266,64,[[],"List"]],[[1266,65,1266,80,[1,[1266,65,1266,80,[[],"SortablePattern"]],[]]]]]]]],[1266,82,1266,100,[[1266,82,1266,92,"terminates"],[1266,95,1266,99,[1,[1266,95,1266,99,[[],"Bool"]],[]]]]]]]],[1266,105,1266,170,[6,[1266,105,1266,162,[4,[[1266,107,1266,141,[[1266,107,1266,118,"subpatterns"],[1266,121,1266,141,[1,[1266,121,1266,125,[[],"List"]],[[1266,126,1266,141,[1,[1266,126,1266,141,[[],"SortablePattern"]],[]]]]]]]],[1266,143,1266,161,[[1266,143,1266,153,"terminates"],[1266,156,1266,160,[1,[1266,156,1266,160,[[],"Bool"]],[]]]]]]]],[1266,166,1266,170,[1,[1266,166,1266,170,[[],"Bool"]],[]]]]]]]]]]]],[1267,1,1296,26,[[1267,1,1267,27,"safelySortableListPatterns"],[[1267,28,1267,34,[11,"config"]],[1267,35,1267,37,[11,"r1"]],[1267,38,1267,40,[11,"r2"]]],[1268,5,1296,26,[17,[[1268,10,1268,44,[6,[[1268,12,1268,26,[19,[1268,12,1268,14,[2,[],"r1"]],[1268,15,1268,26,"subpatterns"]]],[1268,28,1268,42,[19,[1268,28,1268,30,[2,[],"r2"]],[1268,31,1268,42,"subpatterns"]]]]]],[[[1269,9,1269,19,[7,[[1269,11,1269,13,[10,[]]],[1269,15,1269,17,[10,[]]]]]],[1271,13,1271,17,[2,[],"True"]]],[[1273,9,1273,18,[7,[[1273,11,1273,13,[10,[]]],[1273,15,1273,16,[0]]]]],[1275,13,1275,26,[19,[1275,13,1275,15,[2,[],"r1"]],[1275,16,1275,26,"terminates"]]]],[[1277,9,1277,29,[7,[[1277,11,1277,18,[9,[1277,11,1277,12,[11,"x"]],[1277,16,1277,18,[11,"xs"]]]],[1277,20,1277,27,[9,[1277,20,1277,21,[11,"y"]],[1277,25,1277,27,[11,"ys"]]]]]]],[1279,13,1292,26,[17,[[1279,18,1279,44,[0,[[1279,18,1279,33,[2,[],"comparePatterns"]],[1279,34,1279,40,[2,[],"config"]],[1279,41,1279,42,[2,[],"x"]],[1279,43,1279,44,[2,[],"y"]]]]],[[[1280,17,1280,24,[12,[[],"Just"],[[1280,22,1280,24,[12,[[],"EQ"],[]]]]]],[1282,21,1284,50,[0,[[1282,21,1282,47,[2,[],"safelySortableListPatterns"]],[1282,48,1282,54,[2,[],"config"]],[1283,25,1283,50,[21,[1283,27,1283,29,"r1"],[[1283,32,1283,49,[[1283,32,1283,43,"subpatterns"],[1283,46,1283,48,[2,[],"xs"]]]]]]],[1284,25,1284,50,[21,[1284,27,1284,29,"r2"],[[1284,32,1284,49,[[1284,32,1284,43,"subpatterns"],[1284,46,1284,48,[2,[],"ys"]]]]]]]]]]],[[1286,17,1286,23,[12,[[],"Just"],[[1286,22,1286,23,[0]]]]],[1288,21,1288,25,[2,[],"True"]]],[[1290,17,1290,24,[12,[[],"Nothing"],[]]],[1292,21,1292,26,[2,[],"False"]]]]]]]],[[1294,9,1294,18,[7,[[1294,11,1294,12,[0]],[1294,14,1294,16,[10,[]]]]]],[1296,13,1296,26,[19,[1296,13,1296,15,[2,[],"r2"]],[1296,16,1296,26,"terminates"]]]]]]]]]]]]],[1299,1,1308,18,[2,[[1,[1299,1,1305,3,"{-| List patterns may be sorted in one of two ways:\n\n  - `Elementwise` -- Patterns are sorted by comparing elements sequentially at each position (from left to right). This is the same behavior as\n    `List.sort`.\n  - `LengthFirst` -- Shorter patterns always come before longer pattern, with patterns of the same length sorted elementwise at each position.\n\n-}"]],[1306,6,1306,15,"SortLists"],[],[[1307,7,1307,18,[[1307,7,1307,18,"Elementwise"],[]]],[1308,7,1308,18,[[1308,7,1308,18,"LengthFirst"],[]]]]]]],[1311,1,1325,16,[2,[[1,[1311,1,1321,3,"{-| Specify how to sort types that are **imported from dependencies**.\n\n  - `DeclarationOrder` -- Sort types in the order they appear in the\n    dependency's source file (or more technically in its documentation); this is\n    identical to the behavior of types defined within your own modules.\n  - `AlphabeticalOrder` -- Sort types alphabetically.\n  - `DoNotSort` -- Do not sort types from dependencies at all. Note that this\n    will render unsortable any patterns requiring types from dependencies to be\n    sorted.\n\n-}"]],[1322,6,1322,31,"SortTypesFromDependencies"],[],[[1323,7,1323,23,[[1323,7,1323,23,"DeclarationOrder"],[]]],[1324,7,1324,24,[[1324,7,1324,24,"AlphabeticalOrder"],[]]],[1325,7,1325,16,[[1325,7,1325,16,"DoNotSort"],[]]]]]]],[1328,1,1392,15,[2,[[1,[1328,1,1380,3,"{-| Any pattern that might be sortable.\n\n  - `Constructor` -- A constructor pattern, with its type, declaration order, and any subpatterns, e.g. `Just 1 ->` becomes\n\n```\nConstructor\n    { order = 0\n    , subpatterns = [ Just (Literal (IntLiteral 1)) ]\n    , type_ = ( [ \"Basics\" ], \"Maybe\" )\n    }\n```\n\n  - `ListTupleOrUncons` -- A list, tuple, or uncons pattern, e.g. `(Nothing, Nothing) ->` becomes\n\n```\nListTupleOrUncons\n    { subpatterns =\n        [ Constructor\n            { order = 1\n            , subpatterns = []\n            , type_ = ( [ \"Basics\" ], \"Maybe\" )\n            }\n        , Constructor\n            { order = 1\n            , subpatterns = []\n            , type_ = ( [ \"Basics\" ], \"Maybe\" )\n            }\n        ]\n    , terminates = True\n    }\n```\n\nand `var :: _ ->` becomes\n\n    ListTupleOrUncons\n        { subpatterns =\n            [ Wildcard ]\n        , terminates = False\n        }\n\n  - `Literal` -- A literal pattern, e.g. `1 ->` becomes\n\n```\nLiteral (IntLiteral 1)\n```\n\n  - `Wildcard` -- A wildcard or var pattern, e.g. `var ->` becomes\n\n```\nWildcard\n```\n\n-}"]],[1381,6,1381,21,"SortablePattern"],[],[[1382,7,1386,10,[[1382,7,1382,18,"Constructor"],[[1383,9,1386,10,[4,[[1383,11,1383,22,[[1383,11,1383,16,"order"],[1383,19,1383,22,[1,[1383,19,1383,22,[[],"Int"]],[]]]]],[1384,11,1385,9,[[1384,11,1384,22,"subpatterns"],[1384,25,1384,53,[1,[1384,25,1384,29,[[],"List"]],[[1384,30,1384,53,[1,[1384,31,1384,36,[[],"Maybe"]],[[1384,37,1384,52,[1,[1384,37,1384,52,[[],"SortablePattern"]],[]]]]]]]]]]],[1385,11,1386,9,[[1385,11,1385,16,"type_"],[1385,19,1385,41,[3,[[1385,21,1385,31,[1,[1385,21,1385,31,[[],"ModuleName"]],[]]],[1385,33,1385,39,[1,[1385,33,1385,39,[[],"String"]],[]]]]]]]]]]]]]],[1387,7,1390,10,[[1387,7,1387,24,"ListTupleOrUncons"],[[1388,9,1390,10,[4,[[1388,11,1388,45,[[1388,11,1388,22,"subpatterns"],[1388,25,1388,45,[1,[1388,25,1388,29,[[],"List"]],[[1388,30,1388,45,[1,[1388,30,1388,45,[[],"SortablePattern"]],[]]]]]]]],[1389,11,1390,9,[[1389,11,1389,21,"terminates"],[1389,24,1389,28,[1,[1389,24,1389,28,[[],"Bool"]],[]]]]]]]]]]],[1391,7,1391,29,[[1391,7,1391,14,"Literal"],[[1391,15,1391,29,[1,[1391,15,1391,29,[[],"LiteralPattern"]],[]]]]]],[1392,7,1392,15,[[1392,7,1392,15,"Wildcard"],[]]]]]]]],[[6,1,18,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, defaults, sortOnlyMatchingTypes, doNotSortLiterals, doNotSortTypesFromDependencies, sortTypesFromDependenciesAlphabetically, sortListPatternsByLength, doNotLookPastUnsortable\n\n-}"],[568,9,568,88,"-- Anything else is a type error or has no wildcards, so we needn't consider it"],[565,17,565,47,"-- Otherwise, enforce ordering"],[561,17,561,40,"-- Can safely sort them"],[558,9,558,37,"-- Lists, Tuples, and Uncons"],[555,17,555,102,"-- Otherwise, no possibility of control flow confusion, as constructors are different"],[551,17,551,108,"-- If the constructors are the same, then control flow confusion could occur in subpatterns"],[547,29,547,93,"-- Either exhausted subpatterns with no problems or a type error"],[542,29,542,92,"-- Check each subpattern sequentially for control flow ordering"],[534,25,534,86,"-- Wildcards cannot be moved compared to things we can't sort"],[522,9,522,86,"-- Wildcards cannot be moved relative to non-wildcards, so return index order"],[518,9,518,70,"-- If both are wildcards, then they do not have defined order"],[596,1,596,11,"-- * Types"],[591,13,591,50,"-- This is a type error, so ignore it"],[650,13,650,56,"-- Flip comparison if both end in wildcards"],[640,13,640,48,"-- Compare normally if neither does"],[739,9,739,75,"-- Anything else should be a type error, so we needn't consider it"],[735,9,735,37,"-- Lists, Tuples, and Uncons"],[731,17,731,61,"-- Otherwise, compare the lists sequentially"],[718,17,718,110,"-- If one list is shorter than another, it goes after if it is infinite or before if it isn't"],[708,17,708,76,"-- If the lists are the same length, infinite ones go later"],[701,9,701,142,"--Constructors are compared by index, then by comparing subpatterns sequentially, failing if a non-sortable subpattern is encountered"],[697,13,697,39,"-- Fallback to subpatterns"],[694,29,694,84,"-- Lists should be even, so other cases aren't sortable"],[690,29,690,119,"-- If at the point where arguments are both unsortable, then proceed past if configured to"],[682,29,682,100,"-- Both lists of subpatterns exhausted without a \"winner\", so return EQ"],[675,9,675,120,"-- Literals are simply compared; if sorting literals is turned off, then LiteralPatterns are not created at all"],[668,9,668,128,"-- Wildcards cannot be moved relative to non-wildcards, so return Nothing, which ensures that they are not sorted past."],[664,9,664,57,"-- Wildcards can be sorted past if both are wild"],[827,1,827,20,"-- * MODULE VISITOR"],[807,5,807,57,"-- Find custom types that were defined in the module"],[879,41,879,69,"-- Convert to a `ModuleName`"],[944,13,944,56,"-- Nothing to sort in non-case expressions."],[936,25,936,44,"-- Then by ordering"],[933,27,933,69,"-- Sort by control flow preservation first"],[911,13,911,64,"-- Convert all patterns to sortable ones, if we can"],[908,21,908,88,"-- Assume that the `case` of a case block is just the first 4 chars"],[1022,1,1022,24,"-- * DEPENDENCY VISITOR"],[1016,9,1016,53,"-- Other pattern are just the pattern itself"],[1009,9,1009,58,"-- Parenthesized/as patterns we just descend into"],[1176,13,1176,135,"-- Remaining patterns are Unit and Record, which are not sortable, and Parens/As patterns, which we have already unwrapped"],[1152,29,1152,101,"-- You can't cons onto a constructor or Literal, so this is a type error"],[1123,9,1123,51,"-- Literals can be sorted if configured to"],[1116,9,1116,35,"-- Var and _ are wildcards"],[1112,9,1112,100,"-- Uncons pattern we recursively convert each subpattern and convert to the equivalent list"],[1105,9,1105,67,"-- Tuples and lists we recursively convert each subpattern"],[1101,9,1101,75,"-- Find declaration sorting for named patterns and their arguments"],[1070,17,1070,46,"-- Find its constructor order"],[1063,17,1063,65,"-- Find the type that the constructor belongs to"],[1061,13,1061,40,"-- Get types for the module"],[1295,13,1295,80,"-- r2 is shorter than r1, so it is safe to sort it if it terminates"],[1291,21,1291,90,"-- If the left-most subpattern is not sortable, they cannot be sorted"],[1287,21,1287,122,"-- If the left-most subpattern is sortable, then they can be distinguished and so are safely sortable"],[1281,21,1281,133,"-- If the left-most subpatterns are equal, then they are sortable if the next subpattern is sortable, so recurse"],[1278,13,1278,58,"-- Check if the head of the lists is sortable"],[1274,13,1274,80,"-- r1 is shorter than r2, so it is safe to sort it if it terminates"],[1270,13,1270,69,"-- Both have been exhausted, so no problems sorting them"]]]]
