[1,[[1,1,6,6,[0,[[1,8,1,33,["NoUnsortedLetDeclarations"]],[1,34,6,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,38,[1,"sortLetDeclarations"]],[4,7,4,21,[1,"alphabetically"]],[4,23,4,44,[1,"usedInExpressionFirst"]],[4,46,4,66,[1,"usedInExpressionLast"]],[4,68,4,95,[1,"usedInOtherDeclarationsLast"]],[4,97,4,125,[1,"usedInOtherDeclarationsFirst"]],[4,127,4,148,[1,"valuesBeforeFunctions"]],[4,150,4,170,[1,"valuesAfterFunctions"]],[5,7,5,24,[1,"glueHelpersBefore"]],[5,26,5,42,[1,"glueHelpersAfter"]],[5,44,5,80,[1,"glueDependenciesBeforeFirstDependent"]],[5,82,5,117,[1,"glueDependenciesAfterFirstDependent"]],[5,119,5,154,[1,"glueDependenciesBeforeLastDependent"]],[5,156,5,190,[1,"glueDependenciesAfterLastDependent"]]]]]]]],[[44,1,44,75,[[44,8,44,29,["Elm","Syntax","Expression"]],[0],[1,[44,30,44,75,[1,[[44,40,44,54,[3,["Expression",[1,[44,50,44,54]]]]],[44,56,44,74,[3,["LetDeclaration",[1,[44,70,44,74]]]]]]]]]]],[45,1,45,47,[[45,8,45,23,["Elm","Syntax","Node"]],[1,[45,27,45,31,["Node"]]],[1,[45,32,45,47,[1,[[45,42,45,46,[2,"Node"]]]]]]]],[46,1,46,41,[[46,8,46,24,["Elm","Syntax","Range"]],[0],[1,[46,25,46,41,[1,[[46,35,46,40,[2,"Range"]]]]]]]],[47,1,47,27,[[47,8,47,18,["List","Extra"]],[1,[47,22,47,27,["ListX"]]],[0]]],[48,1,48,50,[[48,8,48,19,["Review","Rule"]],[1,[48,23,48,27,["Rule"]]],[1,[48,28,48,50,[1,[[48,38,48,43,[2,"Error"]],[48,45,48,49,[2,"Rule"]]]]]]]],[49,1,49,26,[[49,8,49,11,["Set"]],[0],[1,[49,12,49,26,[1,[[49,22,49,25,[2,"Set"]]]]]]]],[50,1,50,136,[[50,8,50,12,["Util"]],[0],[1,[50,13,50,136,[1,[[50,23,50,34,[3,["GluedTo",[1,[50,30,50,34]]]]],[50,36,50,56,[1,"allBindingsInPattern"]],[50,58,50,78,[1,"checkSortingWithGlue"]],[50,80,50,91,[1,"countUsesIn"]],[50,93,50,107,[1,"findAllNamesIn"]],[50,109,50,125,[1,"findDependencies"]],[50,127,50,135,[1,"validate"]]]]]]]]],[[53,1,167,37,[0,[[1,[53,1,147,3,"{-| Reports `let` declarations that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the declarations.\n\nThe proper order of declarations is specified in the rule configuration. See the\n[Configuration](#configuration) section below for more information.\n\n    config =\n        [ NoUnsortedLetDeclarations.rule\n            (NoUnsortedLetDeclarations.sortLetDeclarations\n                |> NoUnsortedLetDeclarations.usedInExpressionFirst\n                |> NoUnsortedLetDeclarations.alphabetically\n            )\n        ]\n\n\n## Fail\n\n    a =\n        let\n            -- These are used in the expression\n            x =\n                a\n\n            y =\n                b\n\n            -- These are not\n            b =\n                j\n\n            a =\n                i\n        in\n        x + y\n\n    b =\n        let\n            -- These are not used in the expression\n            a =\n                i\n\n            b =\n                j\n\n            -- These are\n            x =\n                a\n\n            y =\n                b\n        in\n        x + y\n\n\n## Success\n\n    a =\n        let\n            -- These are used in the expression\n            x =\n                a\n\n            y =\n                b\n\n            -- These are not\n            a =\n                i\n\n            b =\n                j\n        in\n        x + y\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that your `let` declarations are in\na consistent, predictable order.\n\nThis rule is not useful when you want to be able to write `let` declarations in\nvarying orders throughout your codebase, e.g. if you want to emphasize what\nis most important on a case-by-case basis.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedLetDeclarations\n```\n\n-}"]],[1,[148,1,148,28,[[148,1,148,5,"rule"],[148,8,148,28,[6,[148,8,148,20,[1,[148,8,148,18,[[],"RuleConfig"]],[[148,19,148,20,[0,"r"]]]]],[148,24,148,28,[1,[148,24,148,28,[[],"Rule"]],[]]]]]]]],[149,1,167,37,[[149,1,149,5,"rule"],[[149,6,149,20,[14,[149,7,149,19,[12,[[],"RuleConfig"],[[149,18,149,19,[11,"r"]]]]]]]],[150,5,167,37,[1,"|>",0,[150,5,166,43,[1,"|>",0,[150,5,165,14,[1,"|>",0,[150,5,150,91,[0,[[150,5,150,48,[2,["Rule"],"newModuleRuleSchemaUsingContextCreator"]],[150,49,150,76,[5,"NoUnsortedLetDeclarations"]],[150,77,150,91,[2,[],"initialContext"]]]]],[152,12,165,14,[0,[[152,12,152,43,[2,["Rule"],"withExpressionEnterVisitor"]],[153,13,165,14,[7,[153,14,164,18,[18,[[[153,15,153,16,[11,"e"]],[153,17,153,18,[11,"c"]]],[154,17,164,18,[6,[[154,19,162,22,[0,[[154,19,154,36,[2,[],"expressionVisitor"]],[155,21,160,22,[7,[155,22,159,26,[0,[[155,22,155,32,[2,[],"RuleConfig"]],[156,25,159,26,[21,[156,27,156,28,"r"],[[157,31,158,29,[[157,31,157,37,"sortBy"],[157,40,157,61,[0,[[157,40,157,52,[2,["List"],"reverse"]],[157,53,157,61,[19,[157,53,157,54,[2,[],"r"]],[157,55,157,61,"sortBy"]]]]]]]],[158,31,159,25,[[158,31,158,36,"glues"],[158,39,158,59,[0,[[158,39,158,51,[2,["List"],"reverse"]],[158,52,158,59,[19,[158,52,158,53,[2,[],"r"]],[158,54,158,59,"glues"]]]]]]]]]]]]]]]],[161,21,161,22,[2,[],"e"]],[162,21,162,22,[2,[],"c"]]]]],[163,19,163,20,[2,[],"c"]]]]]]]]]]]]]]],[166,12,166,43,[2,["Rule"],"providesFixesForModuleRule"]]]],[167,12,167,37,[2,["Rule"],"fromModuleRuleSchema"]]]]]]]]],[170,1,177,10,[2,[[1,[170,1,172,3,"{-| Configuration for this rule. Create a new one with `sortLetDeclarations` and use\norderings to create a hierarchy of sorting.\n-}"]],[173,6,173,16,"RuleConfig"],[[173,17,173,18,"r"]],[[174,7,177,10,[[174,7,174,17,"RuleConfig"],[[175,9,177,10,[4,[[175,11,175,52,[[175,11,175,17,"sortBy"],[175,20,175,52,[1,[175,20,175,24,[[],"List"]],[[175,25,175,52,[6,[175,26,175,32,[1,[175,26,175,32,[[],"LetDec"]],[]]],[175,36,175,51,[6,[175,36,175,42,[1,[175,36,175,42,[[],"LetDec"]],[]]],[175,46,175,51,[1,[175,46,175,51,[[],"Order"]],[]]]]]]]]]]]],[176,11,177,9,[[176,11,176,16,"glues"],[176,19,176,28,[1,[176,19,176,23,[[],"List"]],[[176,24,176,28,[1,[176,24,176,28,[[],"Glue"]],[]]]]]]]]]]]]]]]]]],[180,1,185,43,[0,[[1,[180,1,182,3,"{-| Create a new `RuleConfig`. Use the various orderings to then specify\nprimary and fallback orderings.\n-}"]],[1,[183,1,183,153,[[183,1,183,20,"sortLetDeclarations"],[183,23,183,153,[1,[183,23,183,33,[[],"RuleConfig"]],[[183,34,183,153,[4,[[183,36,183,55,[[183,36,183,50,"noAlphabetical"],[183,53,183,55,[2]]]],[183,57,183,72,[[183,57,183,67,"noArgCount"],[183,70,183,72,[2]]]],[183,74,183,91,[[183,74,183,86,"noDependency"],[183,89,183,91,[2]]]],[183,93,183,106,[[183,93,183,101,"noHelper"],[183,104,183,106,[2]]]],[183,108,183,131,[[183,108,183,126,"noUsedInExpression"],[183,129,183,131,[2]]]],[183,133,183,152,[[183,133,183,146,"noUsedInOther"],[183,149,183,151,[2]]]]]]]]]]]]],[184,1,185,43,[[184,1,184,20,"sortLetDeclarations"],[],[185,5,185,43,[0,[[185,5,185,15,[2,[],"RuleConfig"]],[185,16,185,43,[8,[[185,18,185,29,[[185,18,185,24,"sortBy"],[185,27,185,29,[9,[]]]]],[185,31,185,42,[[185,31,185,36,"glues"],[185,39,185,41,[9,[]]]]]]]]]]]]]]]],[188,1,215,10,[0,[[1,[188,1,207,3,"{-| Sort declarations alphabetically by the name of their binding. For\ndestructurings, this will be the name of the actual bindings that are made, in\nalphabetical order. For example, the following is sorted alphabetically:\n\n    let\n        (Opaque a) =\n            i\n\n        ( z, b ) =\n            j\n\n        { c, y } =\n            k\n\n        d =\n            l\n    in\n    x\n\n-}"]],[1,[208,1,208,72,[[208,1,208,15,"alphabetically"],[208,18,208,72,[6,[208,18,208,56,[1,[208,18,208,28,[[],"RuleConfig"]],[[208,29,208,56,[5,[208,31,208,32,"r"],[208,34,208,55,[[208,35,208,55,[[208,35,208,49,"noAlphabetical"],[208,52,208,54,[2]]]]]]]]]]],[208,60,208,72,[1,[208,60,208,70,[[],"RuleConfig"]],[[208,71,208,72,[0,"r"]]]]]]]]]],[209,1,215,10,[[209,1,209,15,"alphabetically"],[[209,16,209,30,[14,[209,17,209,29,[12,[[],"RuleConfig"],[[209,28,209,29,[11,"r"]]]]]]]],[210,5,215,10,[0,[[210,5,210,15,[2,[],"RuleConfig"]],[211,9,215,10,[21,[211,11,211,12,"r"],[[212,15,215,9,[[212,15,212,21,"sortBy"],[213,17,214,32,[1,"::",1,[213,17,213,90,[7,[213,18,213,89,[18,[[[213,19,213,21,[11,"d1"]],[213,22,213,24,[11,"d2"]]],[213,28,213,89,[0,[[213,28,213,35,[2,[],"compare"]],[213,36,213,62,[7,[213,37,213,61,[0,[[213,37,213,47,[2,["Set"],"toList"]],[213,48,213,61,[19,[213,48,213,50,[2,[],"d1"]],[213,51,213,61,"namesBound"]]]]]]]],[213,63,213,89,[7,[213,64,213,88,[0,[[213,64,213,74,[2,["Set"],"toList"]],[213,75,213,88,[19,[213,75,213,77,[2,[],"d2"]],[213,78,213,88,"namesBound"]]]]]]]]]]]]]]]],[214,24,214,32,[19,[214,24,214,25,[2,[],"r"]],[214,26,214,32,"sortBy"]]]]]]]]]]]]]]]]]],[218,1,258,10,[0,[[1,[218,1,240,3,"{-| Sort declarations with those used in the expression of the `let` block\ncoming first, then those that aren't. Ties will be broken by the next specified\nordering. For example, the following is sorted by this ordering and then\nalphabetically:\n\n    let\n        -- These are used in the expression\n        x =\n            a\n\n        y =\n            b\n\n        -- These are not\n        a =\n            i\n\n        b =\n            j\n    in\n    x + y\n\n-}"]],[1,[241,1,241,83,[[241,1,241,22,"usedInExpressionFirst"],[241,25,241,83,[6,[241,25,241,67,[1,[241,25,241,35,[[],"RuleConfig"]],[[241,36,241,67,[5,[241,38,241,39,"r"],[241,41,241,66,[[241,42,241,66,[[241,42,241,60,"noUsedInExpression"],[241,63,241,65,[2]]]]]]]]]]],[241,71,241,83,[1,[241,71,241,81,[[],"RuleConfig"]],[[241,82,241,83,[0,"r"]]]]]]]]]],[242,1,258,10,[[242,1,242,22,"usedInExpressionFirst"],[[242,23,242,37,[14,[242,24,242,36,[12,[[],"RuleConfig"],[[242,35,242,36,[11,"r"]]]]]]]],[243,5,258,10,[0,[[243,5,243,15,[2,[],"RuleConfig"]],[244,9,258,10,[21,[244,11,244,12,"r"],[[245,15,258,9,[[245,15,245,21,"sortBy"],[246,17,257,32,[1,"::",1,[246,17,256,18,[7,[246,18,255,31,[18,[[[246,19,246,21,[11,"d1"]],[246,22,246,24,[11,"d2"]]],[247,21,255,31,[17,[[247,26,247,70,[6,[[247,28,247,47,[19,[247,28,247,30,[2,[],"d1"]],[247,31,247,47,"usedInExpression"]]],[247,49,247,68,[19,[247,49,247,51,[2,[],"d2"]],[247,52,247,68,"usedInExpression"]]]]]],[[[248,25,248,40,[7,[[248,27,248,31,[12,[[],"True"],[]]],[248,33,248,38,[12,[[],"False"],[]]]]]],[249,29,249,31,[2,[],"LT"]]],[[251,25,251,40,[7,[[251,27,251,32,[12,[[],"False"],[]]],[251,34,251,38,[12,[[],"True"],[]]]]]],[252,29,252,31,[2,[],"GT"]]],[[254,25,254,26,[0]],[255,29,255,31,[2,[],"EQ"]]]]]]]]]]]],[257,24,257,32,[19,[257,24,257,25,[2,[],"r"]],[257,26,257,32,"sortBy"]]]]]]]]]]]]]]]]]],[261,1,301,10,[0,[[1,[261,1,283,3,"{-| Sort declarations with those used in the expression of the `let` block\ncoming last, with those that aren't coming first. Ties will be broken by the\nnext specified ordering. For example, the following is sorted by this ordering\nand then alphabetically:\n\n    let\n        -- These are not used in the expression\n        x =\n            i\n\n        y =\n            j\n\n        -- These are used in the expression\n        a =\n            x\n\n        b =\n            y\n    in\n    a + b\n\n-}"]],[1,[284,1,284,82,[[284,1,284,21,"usedInExpressionLast"],[284,24,284,82,[6,[284,24,284,66,[1,[284,24,284,34,[[],"RuleConfig"]],[[284,35,284,66,[5,[284,37,284,38,"r"],[284,40,284,65,[[284,41,284,65,[[284,41,284,59,"noUsedInExpression"],[284,62,284,64,[2]]]]]]]]]]],[284,70,284,82,[1,[284,70,284,80,[[],"RuleConfig"]],[[284,81,284,82,[0,"r"]]]]]]]]]],[285,1,301,10,[[285,1,285,21,"usedInExpressionLast"],[[285,22,285,36,[14,[285,23,285,35,[12,[[],"RuleConfig"],[[285,34,285,35,[11,"r"]]]]]]]],[286,5,301,10,[0,[[286,5,286,15,[2,[],"RuleConfig"]],[287,9,301,10,[21,[287,11,287,12,"r"],[[288,15,301,9,[[288,15,288,21,"sortBy"],[289,17,300,32,[1,"::",1,[289,17,299,18,[7,[289,18,298,31,[18,[[[289,19,289,21,[11,"d1"]],[289,22,289,24,[11,"d2"]]],[290,21,298,31,[17,[[290,26,290,70,[6,[[290,28,290,47,[19,[290,28,290,30,[2,[],"d1"]],[290,31,290,47,"usedInExpression"]]],[290,49,290,68,[19,[290,49,290,51,[2,[],"d2"]],[290,52,290,68,"usedInExpression"]]]]]],[[[291,25,291,40,[7,[[291,27,291,32,[12,[[],"False"],[]]],[291,34,291,38,[12,[[],"True"],[]]]]]],[292,29,292,31,[2,[],"LT"]]],[[294,25,294,40,[7,[[294,27,294,31,[12,[[],"True"],[]]],[294,33,294,38,[12,[[],"False"],[]]]]]],[295,29,295,31,[2,[],"GT"]]],[[297,25,297,26,[0]],[298,29,298,31,[2,[],"EQ"]]]]]]]]]]]],[300,24,300,32,[19,[300,24,300,25,[2,[],"r"]],[300,26,300,32,"sortBy"]]]]]]]]]]]]]]]]]],[304,1,341,10,[0,[[1,[304,1,323,3,"{-| Sort declarations with those used in other declarations coming after those\nthat are not. Ties will be broken by the next specified ordering. For example,\nthe following is sorted by this ordering and then alphabetically:\n\n    let\n        a =\n            x\n\n        b =\n            y\n\n        x =\n            i\n\n        y =\n            j\n    in\n    0\n\n-}"]],[1,[324,1,324,84,[[324,1,324,28,"usedInOtherDeclarationsLast"],[324,31,324,84,[6,[324,31,324,68,[1,[324,31,324,41,[[],"RuleConfig"]],[[324,42,324,68,[5,[324,44,324,45,"r"],[324,47,324,67,[[324,48,324,67,[[324,48,324,61,"noUsedInOther"],[324,64,324,66,[2]]]]]]]]]]],[324,72,324,84,[1,[324,72,324,82,[[],"RuleConfig"]],[[324,83,324,84,[0,"r"]]]]]]]]]],[325,1,341,10,[[325,1,325,28,"usedInOtherDeclarationsLast"],[[325,29,325,43,[14,[325,30,325,42,[12,[[],"RuleConfig"],[[325,41,325,42,[11,"r"]]]]]]]],[326,5,341,10,[0,[[326,5,326,15,[2,[],"RuleConfig"]],[327,9,341,10,[21,[327,11,327,12,"r"],[[328,15,341,9,[[328,15,328,21,"sortBy"],[329,17,340,32,[1,"::",1,[329,17,339,18,[7,[329,18,338,31,[18,[[[329,19,329,21,[11,"d1"]],[329,22,329,24,[11,"d2"]]],[330,21,338,31,[17,[[330,26,330,68,[6,[[330,28,330,46,[19,[330,28,330,30,[2,[],"d1"]],[330,31,330,46,"usedInOtherDecs"]]],[330,48,330,66,[19,[330,48,330,50,[2,[],"d2"]],[330,51,330,66,"usedInOtherDecs"]]]]]],[[[331,25,331,40,[7,[[331,27,331,32,[12,[[],"False"],[]]],[331,34,331,38,[12,[[],"True"],[]]]]]],[332,29,332,31,[2,[],"LT"]]],[[334,25,334,40,[7,[[334,27,334,31,[12,[[],"True"],[]]],[334,33,334,38,[12,[[],"False"],[]]]]]],[335,29,335,31,[2,[],"GT"]]],[[337,25,337,26,[0]],[338,29,338,31,[2,[],"EQ"]]]]]]]]]]]],[340,24,340,32,[19,[340,24,340,25,[2,[],"r"]],[340,26,340,32,"sortBy"]]]]]]]]]]]]]]]]]],[344,1,381,10,[0,[[1,[344,1,363,3,"{-| Sort declarations with those used in other declarations coming before those\nthat are not. Ties will be broken by the next specified ordering. For example,\nthe following is sorted by this ordering and then alphabetically:\n\n    let\n        x =\n            i\n\n        y =\n            j\n\n        a =\n            x\n\n        b =\n            y\n    in\n    0\n\n-}"]],[1,[364,1,364,85,[[364,1,364,29,"usedInOtherDeclarationsFirst"],[364,32,364,85,[6,[364,32,364,69,[1,[364,32,364,42,[[],"RuleConfig"]],[[364,43,364,69,[5,[364,45,364,46,"r"],[364,48,364,68,[[364,49,364,68,[[364,49,364,62,"noUsedInOther"],[364,65,364,67,[2]]]]]]]]]]],[364,73,364,85,[1,[364,73,364,83,[[],"RuleConfig"]],[[364,84,364,85,[0,"r"]]]]]]]]]],[365,1,381,10,[[365,1,365,29,"usedInOtherDeclarationsFirst"],[[365,30,365,44,[14,[365,31,365,43,[12,[[],"RuleConfig"],[[365,42,365,43,[11,"r"]]]]]]]],[366,5,381,10,[0,[[366,5,366,15,[2,[],"RuleConfig"]],[367,9,381,10,[21,[367,11,367,12,"r"],[[368,15,381,9,[[368,15,368,21,"sortBy"],[369,17,380,32,[1,"::",1,[369,17,379,18,[7,[369,18,378,31,[18,[[[369,19,369,21,[11,"d1"]],[369,22,369,24,[11,"d2"]]],[370,21,378,31,[17,[[370,26,370,68,[6,[[370,28,370,46,[19,[370,28,370,30,[2,[],"d1"]],[370,31,370,46,"usedInOtherDecs"]]],[370,48,370,66,[19,[370,48,370,50,[2,[],"d2"]],[370,51,370,66,"usedInOtherDecs"]]]]]],[[[371,25,371,40,[7,[[371,27,371,31,[12,[[],"True"],[]]],[371,33,371,38,[12,[[],"False"],[]]]]]],[372,29,372,31,[2,[],"LT"]]],[[374,25,374,40,[7,[[374,27,374,32,[12,[[],"False"],[]]],[374,34,374,38,[12,[[],"True"],[]]]]]],[375,29,375,31,[2,[],"GT"]]],[[377,25,377,26,[0]],[378,29,378,31,[2,[],"EQ"]]]]]]]]]]]],[380,24,380,32,[19,[380,24,380,25,[2,[],"r"]],[380,26,380,32,"sortBy"]]]]]]]]]]]]]]]]]],[384,1,424,10,[0,[[1,[384,1,406,3,"{-| Sort declarations that do not have arguments before those that do. Since no\ntype inference is performed, this does not guarantee that some things that are\nfunctions will not be sorted with values. For example, the following is sorted\nby this ordering and then alphabetically:\n\n    let\n        -- These do not have arguments\n        x =\n            a\n\n        y =\n            b\n\n        -- These do\n        a i =\n            i\n\n        b j =\n            j\n    in\n    x + y\n\n-}"]],[1,[407,1,407,75,[[407,1,407,22,"valuesBeforeFunctions"],[407,25,407,75,[6,[407,25,407,59,[1,[407,25,407,35,[[],"RuleConfig"]],[[407,36,407,59,[5,[407,38,407,39,"r"],[407,41,407,58,[[407,42,407,58,[[407,42,407,52,"noArgCount"],[407,55,407,57,[2]]]]]]]]]]],[407,63,407,75,[1,[407,63,407,73,[[],"RuleConfig"]],[[407,74,407,75,[0,"r"]]]]]]]]]],[408,1,424,10,[[408,1,408,22,"valuesBeforeFunctions"],[[408,23,408,37,[14,[408,24,408,36,[12,[[],"RuleConfig"],[[408,35,408,36,[11,"r"]]]]]]]],[409,5,424,10,[0,[[409,5,409,15,[2,[],"RuleConfig"]],[410,9,424,10,[21,[410,11,410,12,"r"],[[411,15,424,9,[[411,15,411,21,"sortBy"],[412,17,423,32,[1,"::",1,[412,17,422,18,[7,[412,18,421,31,[18,[[[412,19,412,21,[11,"d1"]],[412,22,412,24,[11,"d2"]]],[413,21,421,31,[17,[[413,26,413,72,[6,[[413,28,413,48,[0,[[413,28,413,40,[2,["List"],"isEmpty"]],[413,41,413,48,[19,[413,41,413,43,[2,[],"d1"]],[413,44,413,48,"args"]]]]]],[413,50,413,70,[0,[[413,50,413,62,[2,["List"],"isEmpty"]],[413,63,413,70,[19,[413,63,413,65,[2,[],"d2"]],[413,66,413,70,"args"]]]]]]]]],[[[414,25,414,40,[7,[[414,27,414,31,[12,[[],"True"],[]]],[414,33,414,38,[12,[[],"False"],[]]]]]],[415,29,415,31,[2,[],"LT"]]],[[417,25,417,40,[7,[[417,27,417,32,[12,[[],"False"],[]]],[417,34,417,38,[12,[[],"True"],[]]]]]],[418,29,418,31,[2,[],"GT"]]],[[420,25,420,26,[0]],[421,29,421,31,[2,[],"EQ"]]]]]]]]]]]],[423,24,423,32,[19,[423,24,423,25,[2,[],"r"]],[423,26,423,32,"sortBy"]]]]]]]]]]]]]]]]]],[427,1,467,10,[0,[[1,[427,1,449,3,"{-| Sort declarations that do not have arguments after those that do. Since no\ntype inference is performed, this does not guarantee that some things that are\nfunctions will not be sorted with values. For example, the following is sorted\nby this ordering and then alphabetically:\n\n    let\n        -- These have arguments\n        a i =\n            i\n\n        b j =\n            j\n\n        -- These do not\n        x =\n            a\n\n        y =\n            b\n    in\n    x + y\n\n-}"]],[1,[450,1,450,74,[[450,1,450,21,"valuesAfterFunctions"],[450,24,450,74,[6,[450,24,450,58,[1,[450,24,450,34,[[],"RuleConfig"]],[[450,35,450,58,[5,[450,37,450,38,"r"],[450,40,450,57,[[450,41,450,57,[[450,41,450,51,"noArgCount"],[450,54,450,56,[2]]]]]]]]]]],[450,62,450,74,[1,[450,62,450,72,[[],"RuleConfig"]],[[450,73,450,74,[0,"r"]]]]]]]]]],[451,1,467,10,[[451,1,451,21,"valuesAfterFunctions"],[[451,22,451,36,[14,[451,23,451,35,[12,[[],"RuleConfig"],[[451,34,451,35,[11,"r"]]]]]]]],[452,5,467,10,[0,[[452,5,452,15,[2,[],"RuleConfig"]],[453,9,467,10,[21,[453,11,453,12,"r"],[[454,15,467,9,[[454,15,454,21,"sortBy"],[455,17,466,32,[1,"::",1,[455,17,465,18,[7,[455,18,464,31,[18,[[[455,19,455,21,[11,"d1"]],[455,22,455,24,[11,"d2"]]],[456,21,464,31,[17,[[456,26,456,72,[6,[[456,28,456,48,[0,[[456,28,456,40,[2,["List"],"isEmpty"]],[456,41,456,48,[19,[456,41,456,43,[2,[],"d1"]],[456,44,456,48,"args"]]]]]],[456,50,456,70,[0,[[456,50,456,62,[2,["List"],"isEmpty"]],[456,63,456,70,[19,[456,63,456,65,[2,[],"d2"]],[456,66,456,70,"args"]]]]]]]]],[[[457,25,457,40,[7,[[457,27,457,32,[12,[[],"False"],[]]],[457,34,457,38,[12,[[],"True"],[]]]]]],[458,29,458,31,[2,[],"LT"]]],[[460,25,460,40,[7,[[460,27,460,31,[12,[[],"True"],[]]],[460,33,460,38,[12,[[],"False"],[]]]]]],[461,29,461,31,[2,[],"GT"]]],[[463,25,463,26,[0]],[464,29,464,31,[2,[],"EQ"]]]]]]]]]]]],[466,24,466,32,[19,[466,24,466,25,[2,[],"r"]],[466,26,466,32,"sortBy"]]]]]]]]]]]]]]]]]],[470,1,505,10,[0,[[1,[470,1,488,3,"{-| Helpers are declarations that are _not_ used in the expression that are used\nin exactly one other declaration. This glue attaches them immediately before the\ndeclaration they are used in.\n\nFor example:\n\n    foo input =\n        let\n            step : Int -> Int -> Int\n            step i acc =\n                i + acc\n\n            sum : Int\n            sum =\n                List.foldl step 0 input\n        in\n        sum + 1\n\n-}"]],[1,[489,1,489,69,[[489,1,489,18,"glueHelpersBefore"],[489,21,489,69,[6,[489,21,489,53,[1,[489,21,489,31,[[],"RuleConfig"]],[[489,32,489,53,[5,[489,34,489,35,"r"],[489,37,489,52,[[489,38,489,52,[[489,38,489,46,"noHelper"],[489,49,489,51,[2]]]]]]]]]]],[489,57,489,69,[1,[489,57,489,67,[[],"RuleConfig"]],[[489,68,489,69,[0,"r"]]]]]]]]]],[490,1,505,10,[[490,1,490,18,"glueHelpersBefore"],[[490,19,490,33,[14,[490,20,490,32,[12,[[],"RuleConfig"],[[490,31,490,32,[11,"r"]]]]]]]],[491,5,505,10,[0,[[491,5,491,15,[2,[],"RuleConfig"]],[492,9,505,10,[21,[492,11,492,12,"r"],[[493,15,505,9,[[493,15,493,20,"glues"],[494,17,504,31,[1,"::",1,[494,17,503,18,[7,[494,18,502,32,[18,[[[494,19,494,27,[7,[[494,21,494,22,[11,"i"]],[494,24,494,25,[11,"d"]]]]],[494,28,494,30,[11,"ds"]]],[496,21,502,32,[11,[496,24,496,51,[1,"==",2,[496,24,496,42,[19,[496,24,496,25,[2,[],"d"]],[496,26,496,42,"usedInExpression"]]],[496,46,496,51,[2,[],"False"]]]],[497,25,499,75,[1,"|>",0,[497,25,498,65,[1,"|>",0,[497,25,497,53,[0,[[497,25,497,41,[2,[],"findDependencies"]],[497,42,497,50,[6,[[497,44,497,45,[2,[],"i"]],[497,47,497,48,[2,[],"d"]]]]],[497,51,497,53,[2,[],"ds"]]]]],[498,32,498,65,[0,[[498,32,498,40,[2,[],"validate"]],[498,41,498,65,[7,[498,42,498,64,[1,"<<",0,[498,42,498,48,[0,[[498,42,498,46,[12,"=="]],[498,47,498,48,[3,1]]]]],[498,52,498,64,[2,["Tuple"],"second"]]]]]]]]]]],[499,32,499,75,[0,[[499,32,499,41,[2,["Maybe"],"map"]],[499,42,499,75,[7,[499,43,499,74,[1,"<<",0,[499,43,499,59,[2,[],"GluedBeforeFirst"]],[499,63,499,74,[2,["Tuple"],"first"]]]]]]]]]]],[502,25,502,32,[2,[],"Nothing"]]]]]]]]],[504,24,504,31,[19,[504,24,504,25,[2,[],"r"]],[504,26,504,31,"glues"]]]]]]]]]]]]]]]]]],[508,1,543,10,[0,[[1,[508,1,526,3,"{-| Helpers are declarations that are _not_ used in the expression that are used\nin exactly one other declaration. This glue attaches them immediately after the\ndeclaration they are used in.\n\nFor example:\n\n    foo input =\n        let\n            sum : Int\n            sum =\n                List.foldl step 0 input\n\n            step : Int -> Int -> Int\n            step i acc =\n                i + acc\n        in\n        sum + 1\n\n-}"]],[1,[527,1,527,68,[[527,1,527,17,"glueHelpersAfter"],[527,20,527,68,[6,[527,20,527,52,[1,[527,20,527,30,[[],"RuleConfig"]],[[527,31,527,52,[5,[527,33,527,34,"r"],[527,36,527,51,[[527,37,527,51,[[527,37,527,45,"noHelper"],[527,48,527,50,[2]]]]]]]]]]],[527,56,527,68,[1,[527,56,527,66,[[],"RuleConfig"]],[[527,67,527,68,[0,"r"]]]]]]]]]],[528,1,543,10,[[528,1,528,17,"glueHelpersAfter"],[[528,18,528,32,[14,[528,19,528,31,[12,[[],"RuleConfig"],[[528,30,528,31,[11,"r"]]]]]]]],[529,5,543,10,[0,[[529,5,529,15,[2,[],"RuleConfig"]],[530,9,543,10,[21,[530,11,530,12,"r"],[[531,15,543,9,[[531,15,531,20,"glues"],[532,17,542,31,[1,"::",1,[532,17,541,18,[7,[532,18,540,32,[18,[[[532,19,532,27,[7,[[532,21,532,22,[11,"i"]],[532,24,532,25,[11,"d"]]]]],[532,28,532,30,[11,"ds"]]],[534,21,540,32,[11,[534,24,534,51,[1,"==",2,[534,24,534,42,[19,[534,24,534,25,[2,[],"d"]],[534,26,534,42,"usedInExpression"]]],[534,46,534,51,[2,[],"False"]]]],[535,25,537,74,[1,"|>",0,[535,25,536,65,[1,"|>",0,[535,25,535,53,[0,[[535,25,535,41,[2,[],"findDependencies"]],[535,42,535,50,[6,[[535,44,535,45,[2,[],"i"]],[535,47,535,48,[2,[],"d"]]]]],[535,51,535,53,[2,[],"ds"]]]]],[536,32,536,65,[0,[[536,32,536,40,[2,[],"validate"]],[536,41,536,65,[7,[536,42,536,64,[1,"<<",0,[536,42,536,48,[0,[[536,42,536,46,[12,"=="]],[536,47,536,48,[3,1]]]]],[536,52,536,64,[2,["Tuple"],"second"]]]]]]]]]]],[537,32,537,74,[0,[[537,32,537,41,[2,["Maybe"],"map"]],[537,42,537,74,[7,[537,43,537,73,[1,"<<",0,[537,43,537,58,[2,[],"GluedAfterFirst"]],[537,62,537,73,[2,["Tuple"],"first"]]]]]]]]]]],[540,25,540,32,[2,[],"Nothing"]]]]]]]]],[542,24,542,31,[19,[542,24,542,25,[2,[],"r"]],[542,26,542,31,"glues"]]]]]]]]]]]]]]]]]],[546,1,585,10,[0,[[1,[546,1,568,3,"{-| Dependencies are declarations that are _not_ used in the expression that are\nused in multiple other declarations. This glue attaches them immediately before\nthe first declaration they are used in.\n\nFor example:\n\n    foo =\n        let\n            unwrap =\n                some func\n\n            a x =\n                unwrap x\n\n            b x =\n                unwrap x\n\n            c x =\n                unwrap x\n        in\n        bar\n\n-}"]],[1,[569,1,569,92,[[569,1,569,37,"glueDependenciesBeforeFirstDependent"],[569,40,569,92,[6,[569,40,569,76,[1,[569,40,569,50,[[],"RuleConfig"]],[[569,51,569,76,[5,[569,53,569,54,"r"],[569,56,569,75,[[569,57,569,75,[[569,57,569,69,"noDependency"],[569,72,569,74,[2]]]]]]]]]]],[569,80,569,92,[1,[569,80,569,90,[[],"RuleConfig"]],[[569,91,569,92,[0,"r"]]]]]]]]]],[570,1,585,10,[[570,1,570,37,"glueDependenciesBeforeFirstDependent"],[[570,38,570,52,[14,[570,39,570,51,[12,[[],"RuleConfig"],[[570,50,570,51,[11,"r"]]]]]]]],[571,5,585,10,[0,[[571,5,571,15,[2,[],"RuleConfig"]],[572,9,585,10,[21,[572,11,572,12,"r"],[[573,15,585,9,[[573,15,573,20,"glues"],[574,17,584,31,[1,"::",1,[574,17,583,18,[7,[574,18,582,32,[18,[[[574,19,574,27,[7,[[574,21,574,22,[11,"i"]],[574,24,574,25,[11,"d"]]]]],[574,28,574,30,[11,"ds"]]],[576,21,582,32,[11,[576,24,576,51,[1,"==",2,[576,24,576,42,[19,[576,24,576,25,[2,[],"d"]],[576,26,576,42,"usedInExpression"]]],[576,46,576,51,[2,[],"False"]]]],[577,25,579,75,[1,"|>",0,[577,25,578,83,[1,"|>",0,[577,25,577,53,[0,[[577,25,577,41,[2,[],"findDependencies"]],[577,42,577,50,[6,[[577,44,577,45,[2,[],"i"]],[577,47,577,48,[2,[],"d"]]]]],[577,51,577,53,[2,[],"ds"]]]]],[578,32,578,83,[0,[[578,32,578,40,[2,[],"validate"]],[578,41,578,83,[7,[578,42,578,82,[18,[[[578,43,578,62,[7,[[578,45,578,46,[0]],[578,48,578,60,[11,"numberUsedIn"]]]]]],[578,66,578,82,[1,">",2,[578,66,578,78,[2,[],"numberUsedIn"]],[578,81,578,82,[3,1]]]]]]]]]]]]]],[579,32,579,75,[0,[[579,32,579,41,[2,["Maybe"],"map"]],[579,42,579,75,[7,[579,43,579,74,[1,"<<",0,[579,43,579,59,[2,[],"GluedBeforeFirst"]],[579,63,579,74,[2,["Tuple"],"first"]]]]]]]]]]],[582,25,582,32,[2,[],"Nothing"]]]]]]]]],[584,24,584,31,[19,[584,24,584,25,[2,[],"r"]],[584,26,584,31,"glues"]]]]]]]]]]]]]]]]]],[588,1,627,10,[0,[[1,[588,1,610,3,"{-| Dependencies are declarations that are _not_ used in the expression that are\nused in multiple other declarations. This glue attaches them immediately after\nthe first declaration they are used in.\n\nFor example:\n\n    foo =\n        let\n            a x =\n                unwrap x\n\n            unwrap =\n                some func\n\n            b x =\n                unwrap x\n\n            c x =\n                unwrap x\n        in\n        bar\n\n-}"]],[1,[611,1,611,91,[[611,1,611,36,"glueDependenciesAfterFirstDependent"],[611,39,611,91,[6,[611,39,611,75,[1,[611,39,611,49,[[],"RuleConfig"]],[[611,50,611,75,[5,[611,52,611,53,"r"],[611,55,611,74,[[611,56,611,74,[[611,56,611,68,"noDependency"],[611,71,611,73,[2]]]]]]]]]]],[611,79,611,91,[1,[611,79,611,89,[[],"RuleConfig"]],[[611,90,611,91,[0,"r"]]]]]]]]]],[612,1,627,10,[[612,1,612,36,"glueDependenciesAfterFirstDependent"],[[612,37,612,51,[14,[612,38,612,50,[12,[[],"RuleConfig"],[[612,49,612,50,[11,"r"]]]]]]]],[613,5,627,10,[0,[[613,5,613,15,[2,[],"RuleConfig"]],[614,9,627,10,[21,[614,11,614,12,"r"],[[615,15,627,9,[[615,15,615,20,"glues"],[616,17,626,31,[1,"::",1,[616,17,625,18,[7,[616,18,624,32,[18,[[[616,19,616,27,[7,[[616,21,616,22,[11,"i"]],[616,24,616,25,[11,"d"]]]]],[616,28,616,30,[11,"ds"]]],[618,21,624,32,[11,[618,24,618,51,[1,"==",2,[618,24,618,42,[19,[618,24,618,25,[2,[],"d"]],[618,26,618,42,"usedInExpression"]]],[618,46,618,51,[2,[],"False"]]]],[619,25,621,74,[1,"|>",0,[619,25,620,83,[1,"|>",0,[619,25,619,53,[0,[[619,25,619,41,[2,[],"findDependencies"]],[619,42,619,50,[6,[[619,44,619,45,[2,[],"i"]],[619,47,619,48,[2,[],"d"]]]]],[619,51,619,53,[2,[],"ds"]]]]],[620,32,620,83,[0,[[620,32,620,40,[2,[],"validate"]],[620,41,620,83,[7,[620,42,620,82,[18,[[[620,43,620,62,[7,[[620,45,620,46,[0]],[620,48,620,60,[11,"numberUsedIn"]]]]]],[620,66,620,82,[1,">",2,[620,66,620,78,[2,[],"numberUsedIn"]],[620,81,620,82,[3,1]]]]]]]]]]]]]],[621,32,621,74,[0,[[621,32,621,41,[2,["Maybe"],"map"]],[621,42,621,74,[7,[621,43,621,73,[1,"<<",0,[621,43,621,58,[2,[],"GluedAfterFirst"]],[621,62,621,73,[2,["Tuple"],"first"]]]]]]]]]]],[624,25,624,32,[2,[],"Nothing"]]]]]]]]],[626,24,626,31,[19,[626,24,626,25,[2,[],"r"]],[626,26,626,31,"glues"]]]]]]]]]]]]]]]]]],[630,1,669,10,[0,[[1,[630,1,652,3,"{-| Dependencies are declarations that are _not_ used in the expression that are\nused in multiple other declarations. This glue attaches them immediately before\nthe last declaration they are used in.\n\nFor example:\n\n    foo =\n        let\n            a x =\n                unwrap x\n\n            b x =\n                unwrap x\n\n            unwrap =\n                some func\n\n            c x =\n                unwrap x\n        in\n        bar\n\n-}"]],[1,[653,1,653,91,[[653,1,653,36,"glueDependenciesBeforeLastDependent"],[653,39,653,91,[6,[653,39,653,75,[1,[653,39,653,49,[[],"RuleConfig"]],[[653,50,653,75,[5,[653,52,653,53,"r"],[653,55,653,74,[[653,56,653,74,[[653,56,653,68,"noDependency"],[653,71,653,73,[2]]]]]]]]]]],[653,79,653,91,[1,[653,79,653,89,[[],"RuleConfig"]],[[653,90,653,91,[0,"r"]]]]]]]]]],[654,1,669,10,[[654,1,654,36,"glueDependenciesBeforeLastDependent"],[[654,37,654,51,[14,[654,38,654,50,[12,[[],"RuleConfig"],[[654,49,654,50,[11,"r"]]]]]]]],[655,5,669,10,[0,[[655,5,655,15,[2,[],"RuleConfig"]],[656,9,669,10,[21,[656,11,656,12,"r"],[[657,15,669,9,[[657,15,657,20,"glues"],[658,17,668,31,[1,"::",1,[658,17,667,18,[7,[658,18,666,32,[18,[[[658,19,658,27,[7,[[658,21,658,22,[11,"i"]],[658,24,658,25,[11,"d"]]]]],[658,28,658,30,[11,"ds"]]],[660,21,666,32,[11,[660,24,660,51,[1,"==",2,[660,24,660,42,[19,[660,24,660,25,[2,[],"d"]],[660,26,660,42,"usedInExpression"]]],[660,46,660,51,[2,[],"False"]]]],[661,25,663,74,[1,"|>",0,[661,25,662,83,[1,"|>",0,[661,25,661,53,[0,[[661,25,661,41,[2,[],"findDependencies"]],[661,42,661,50,[6,[[661,44,661,45,[2,[],"i"]],[661,47,661,48,[2,[],"d"]]]]],[661,51,661,53,[2,[],"ds"]]]]],[662,32,662,83,[0,[[662,32,662,40,[2,[],"validate"]],[662,41,662,83,[7,[662,42,662,82,[18,[[[662,43,662,62,[7,[[662,45,662,46,[0]],[662,48,662,60,[11,"numberUsedIn"]]]]]],[662,66,662,82,[1,">",2,[662,66,662,78,[2,[],"numberUsedIn"]],[662,81,662,82,[3,1]]]]]]]]]]]]]],[663,32,663,74,[0,[[663,32,663,41,[2,["Maybe"],"map"]],[663,42,663,74,[7,[663,43,663,73,[1,"<<",0,[663,43,663,58,[2,[],"GluedBeforeLast"]],[663,62,663,73,[2,["Tuple"],"first"]]]]]]]]]]],[666,25,666,32,[2,[],"Nothing"]]]]]]]]],[668,24,668,31,[19,[668,24,668,25,[2,[],"r"]],[668,26,668,31,"glues"]]]]]]]]]]]]]]]]]],[672,1,711,10,[0,[[1,[672,1,694,3,"{-| Dependencies are declarations that are _not_ used in the expression that are\nused in multiple other declarations. This glue attaches them immediately after\nthe last declaration they are used in.\n\nFor example:\n\n    foo =\n        let\n            a x =\n                unwrap x\n\n            b x =\n                unwrap x\n\n            c x =\n                unwrap x\n\n            unwrap =\n                some func\n        in\n        bar\n\n-}"]],[1,[695,1,695,90,[[695,1,695,35,"glueDependenciesAfterLastDependent"],[695,38,695,90,[6,[695,38,695,74,[1,[695,38,695,48,[[],"RuleConfig"]],[[695,49,695,74,[5,[695,51,695,52,"r"],[695,54,695,73,[[695,55,695,73,[[695,55,695,67,"noDependency"],[695,70,695,72,[2]]]]]]]]]]],[695,78,695,90,[1,[695,78,695,88,[[],"RuleConfig"]],[[695,89,695,90,[0,"r"]]]]]]]]]],[696,1,711,10,[[696,1,696,35,"glueDependenciesAfterLastDependent"],[[696,36,696,50,[14,[696,37,696,49,[12,[[],"RuleConfig"],[[696,48,696,49,[11,"r"]]]]]]]],[697,5,711,10,[0,[[697,5,697,15,[2,[],"RuleConfig"]],[698,9,711,10,[21,[698,11,698,12,"r"],[[699,15,711,9,[[699,15,699,20,"glues"],[700,17,710,31,[1,"::",1,[700,17,709,18,[7,[700,18,708,32,[18,[[[700,19,700,27,[7,[[700,21,700,22,[11,"i"]],[700,24,700,25,[11,"d"]]]]],[700,28,700,30,[11,"ds"]]],[702,21,708,32,[11,[702,24,702,51,[1,"==",2,[702,24,702,42,[19,[702,24,702,25,[2,[],"d"]],[702,26,702,42,"usedInExpression"]]],[702,46,702,51,[2,[],"False"]]]],[703,25,705,73,[1,"|>",0,[703,25,704,83,[1,"|>",0,[703,25,703,53,[0,[[703,25,703,41,[2,[],"findDependencies"]],[703,42,703,50,[6,[[703,44,703,45,[2,[],"i"]],[703,47,703,48,[2,[],"d"]]]]],[703,51,703,53,[2,[],"ds"]]]]],[704,32,704,83,[0,[[704,32,704,40,[2,[],"validate"]],[704,41,704,83,[7,[704,42,704,82,[18,[[[704,43,704,62,[7,[[704,45,704,46,[0]],[704,48,704,60,[11,"numberUsedIn"]]]]]],[704,66,704,82,[1,">",2,[704,66,704,78,[2,[],"numberUsedIn"]],[704,81,704,82,[3,1]]]]]]]]]]]]]],[705,32,705,73,[0,[[705,32,705,41,[2,["Maybe"],"map"]],[705,42,705,73,[7,[705,43,705,72,[1,"<<",0,[705,43,705,57,[2,[],"GluedAfterLast"]],[705,61,705,72,[2,["Tuple"],"first"]]]]]]]]]]],[708,25,708,32,[2,[],"Nothing"]]]]]]]]],[710,24,710,31,[19,[710,24,710,25,[2,[],"r"]],[710,26,710,31,"glues"]]]]]]]]]]]]]]]]]],[714,1,718,6,[1,[[1,[714,1,715,3,"{-| Context for the rule, containing only a source extractor.\n-}"]],[716,12,716,19,"Context"],[],[717,5,718,6,[4,[[717,7,717,38,[[717,7,717,20,"extractSource"],[717,23,717,38,[6,[717,23,717,28,[1,[717,23,717,28,[[],"Range"]],[]]],[717,32,717,38,[1,[717,32,717,38,[[],"String"]],[]]]]]]]]]]]]],[721,1,799,15,[0,[[1,[721,1,722,3,"{-| Visit expressions, checking `let` blocks for sorting.\n-}"]],[1,[723,1,723,82,[[723,1,723,18,"expressionVisitor"],[723,21,723,82,[6,[723,21,723,33,[1,[723,21,723,31,[[],"RuleConfig"]],[[723,32,723,33,[0,"r"]]]]],[723,37,723,82,[6,[723,37,723,52,[1,[723,37,723,41,[[],"Node"]],[[723,42,723,52,[1,[723,42,723,52,[[],"Expression"]],[]]]]]],[723,56,723,82,[6,[723,56,723,63,[1,[723,56,723,63,[[],"Context"]],[]]],[723,67,723,82,[1,[723,67,723,71,[[],"List"]],[[723,72,723,82,[1,[723,73,723,78,[[],"Error"]],[[723,79,723,81,[4,[]]]]]]]]]]]]]]]]]],[724,1,799,15,[[724,1,724,18,"expressionVisitor"],[[724,19,724,49,[14,[724,20,724,48,[12,[[],"RuleConfig"],[[724,31,724,48,[8,[[724,33,724,39,"sortBy"],[724,41,724,46,"glues"]]]]]]]]],[724,50,724,51,[11,"n"]],[724,52,724,59,[11,"context"]]],[725,5,799,15,[17,[[725,10,725,22,[0,[[725,10,725,20,[2,["Node"],"value"]],[725,21,725,22,[2,[],"n"]]]]],[[[726,9,726,25,[12,[[],"LetExpression"],[[726,23,726,25,[11,"lb"]]]]],[727,13,796,99,[16,[[[728,17,730,78,[0,[[0],[1,[728,17,728,68,[[728,17,728,27,"applyGlues"],[728,30,728,68,[6,[728,30,728,41,[1,[728,30,728,34,[[],"List"]],[[728,35,728,41,[1,[728,35,728,41,[[],"LetDec"]],[]]]]]],[728,45,728,68,[6,[728,45,728,48,[1,[728,45,728,48,[[],"Int"]],[]]],[728,52,728,68,[6,[728,52,728,58,[1,[728,52,728,58,[[],"LetDec"]],[]]],[728,62,728,68,[1,[728,62,728,68,[[],"LetDec"]],[]]]]]]]]]]]],[729,17,730,78,[[729,17,729,27,"applyGlues"],[[729,28,729,30,[11,"ds"]],[729,31,729,32,[11,"i"]],[729,33,729,34,[11,"d"]]],[730,21,730,78,[21,[730,23,730,24,"d"],[[730,27,730,77,[[730,27,730,32,"glued"],[730,35,730,76,[0,[[730,35,730,48,[2,["ListX"],"findMap"]],[730,49,730,70,[7,[730,50,730,69,[18,[[[730,51,730,52,[11,"g"]]],[730,56,730,69,[0,[[730,56,730,57,[2,[],"g"]],[730,58,730,66,[6,[[730,60,730,61,[2,[],"i"]],[730,63,730,64,[2,[],"d"]]]]],[730,67,730,69,[2,[],"ds"]]]]]]]]]],[730,71,730,76,[2,[],"glues"]]]]]]]]]]]]]]],[732,17,740,85,[0,[[0],[1,[732,17,732,35,[[732,17,732,27,"errorRange"],[732,30,732,35,[1,[732,30,732,35,[[],"Range"]],[]]]]]],[733,17,740,85,[[733,17,733,27,"errorRange"],[],[734,21,740,85,[16,[[[735,25,737,41,[0,[[0],[1,[735,25,735,34,[[735,25,735,26,"r"],[735,29,735,34,[1,[735,29,735,34,[[],"Range"]],[]]]]]],[736,25,737,41,[[736,25,736,26,"r"],[],[737,29,737,41,[0,[[737,29,737,39,[2,["Node"],"range"]],[737,40,737,41,[2,[],"n"]]]]]]]]]]],[740,21,740,85,[21,[740,23,740,24,"r"],[[740,27,740,84,[[740,27,740,30,"end"],[740,33,740,83,[8,[[740,35,740,52,[[740,35,740,38,"row"],[740,41,740,52,[19,[740,41,740,48,[19,[740,41,740,42,[2,[],"r"]],[740,43,740,48,"start"]]],[740,49,740,52,"row"]]]]],[740,54,740,82,[[740,54,740,60,"column"],[740,63,740,81,[1,"+",0,[740,63,740,77,[19,[740,63,740,70,[19,[740,63,740,64,[2,[],"r"]],[740,65,740,70,"start"]]],[740,71,740,77,"column"]]],[740,80,740,81,[3,3]]]]]]]]]]]]]]]]]]]]]],[742,17,743,63,[1,[742,17,742,39,[7,[[742,19,742,30,[11,"exprsToDecs"]],[742,32,742,37,[11,"exprs"]]]]],[743,21,743,63,[0,[[743,21,743,31,[2,["List"],"foldl"]],[743,32,743,36,[2,[],"step"]],[743,37,743,47,[6,[[743,39,743,41,[9,[]]],[743,43,743,45,[9,[]]]]]],[743,48,743,63,[19,[743,48,743,50,[2,[],"lb"]],[743,51,743,63,"declarations"]]]]]]]],[745,17,792,30,[0,[[0],[1,[745,17,748,91,[[745,17,745,21,"step"],[746,21,748,91,[6,[746,21,746,40,[1,[746,21,746,25,[[],"Node"]],[[746,26,746,40,[1,[746,26,746,40,[[],"LetDeclaration"]],[]]]]]],[747,24,748,91,[6,[747,24,747,91,[3,[[747,26,747,65,[1,[747,26,747,30,[[],"List"]],[[747,31,747,65,[6,[747,32,747,54,[1,[747,32,747,36,[[],"List"]],[[747,37,747,54,[1,[747,38,747,42,[[],"Node"]],[[747,43,747,53,[1,[747,43,747,53,[[],"Expression"]],[]]]]]]]]],[747,58,747,64,[1,[747,58,747,64,[[],"LetDec"]],[]]]]]]]],[747,67,747,89,[1,[747,67,747,71,[[],"List"]],[[747,72,747,89,[1,[747,73,747,77,[[],"Node"]],[[747,78,747,88,[1,[747,78,747,88,[[],"Expression"]],[]]]]]]]]]]]],[748,24,748,91,[3,[[748,26,748,65,[1,[748,26,748,30,[[],"List"]],[[748,31,748,65,[6,[748,32,748,54,[1,[748,32,748,36,[[],"List"]],[[748,37,748,54,[1,[748,38,748,42,[[],"Node"]],[[748,43,748,53,[1,[748,43,748,53,[[],"Expression"]],[]]]]]]]]],[748,58,748,64,[1,[748,58,748,64,[[],"LetDec"]],[]]]]]]]],[748,67,748,89,[1,[748,67,748,71,[[],"List"]],[[748,72,748,89,[1,[748,73,748,77,[[],"Node"]],[[748,78,748,88,[1,[748,78,748,88,[[],"Expression"]],[]]]]]]]]]]]]]]]]]]],[749,17,792,30,[[749,17,749,21,"step"],[[749,22,749,23,[11,"d"]],[749,24,749,38,[7,[[749,26,749,30,[11,"dAcc"]],[749,32,749,36,[11,"eAcc"]]]]]],[750,21,792,30,[17,[[750,26,750,38,[0,[[750,26,750,36,[2,["Node"],"value"]],[750,37,750,38,[2,[],"d"]]]]],[[[751,25,751,52,[12,[[],"LetFunction"],[[751,37,751,52,[8,[[751,39,751,50,"declaration"]]]]]]],[752,29,772,30,[16,[[[753,33,754,59,[1,[753,33,753,58,[8,[[753,35,753,44,"arguments"],[753,46,753,56,"expression"]]]],[754,37,754,59,[0,[[754,37,754,47,[2,["Node"],"value"]],[754,48,754,59,[2,[],"declaration"]]]]]]],[756,33,758,77,[0,[[0],[1,[756,33,756,46,[[756,33,756,37,"name"],[756,40,756,46,[1,[756,40,756,46,[[],"String"]],[]]]]]],[757,33,758,77,[[757,33,757,37,"name"],[],[758,37,758,77,[0,[[758,37,758,47,[2,["Node"],"value"]],[758,48,758,77,[19,[758,48,758,72,[7,[758,49,758,71,[0,[[758,49,758,59,[2,["Node"],"value"]],[758,60,758,71,[2,[],"declaration"]]]]]]],[758,73,758,77,"name"]]]]]]]]]]]],[760,29,772,30,[6,[[760,31,770,40,[1,"::",1,[760,31,769,32,[7,[760,32,768,34,[18,[[[760,33,760,35,[11,"es"]]],[761,33,768,34,[8,[[761,35,761,55,[[761,35,761,40,"range"],[761,43,761,55,[0,[[761,43,761,53,[2,["Node"],"range"]],[761,54,761,55,[2,[],"d"]]]]]]],[762,35,763,33,[[762,35,762,45,"namesBound"],[762,48,762,66,[0,[[762,48,762,61,[2,["Set"],"singleton"]],[762,62,762,66,[2,[],"name"]]]]]]],[763,35,764,33,[[763,35,763,51,"usedInExpression"],[763,54,763,89,[1,">=",2,[763,54,763,84,[0,[[763,54,763,65,[2,[],"countUsesIn"]],[763,66,763,79,[19,[763,66,763,68,[2,[],"lb"]],[763,69,763,79,"expression"]]],[763,80,763,84,[2,[],"name"]]]]],[763,88,763,89,[3,1]]]]]],[764,35,765,33,[[764,35,764,54,"dependentOnBindings"],[764,57,764,82,[0,[[764,57,764,71,[2,[],"findAllNamesIn"]],[764,72,764,82,[2,[],"expression"]]]]]]],[765,35,766,33,[[765,35,765,50,"usedInOtherDecs"],[765,53,765,96,[0,[[765,53,765,61,[2,["List"],"any"]],[765,62,765,93,[7,[765,63,765,92,[18,[[[765,64,765,65,[11,"e"]]],[765,69,765,92,[1,">=",2,[765,69,765,87,[0,[[765,69,765,80,[2,[],"countUsesIn"]],[765,81,765,82,[2,[],"e"]],[765,83,765,87,[2,[],"name"]]]]],[765,91,765,92,[3,1]]]]]]]]],[765,94,765,96,[2,[],"es"]]]]]]],[766,35,767,33,[[766,35,766,39,"args"],[766,42,766,87,[0,[[766,42,766,56,[2,["List"],"concatMap"]],[766,57,766,77,[2,[],"allBindingsInPattern"]],[766,78,766,87,[2,[],"arguments"]]]]]]],[767,35,768,33,[[767,35,767,40,"glued"],[767,43,767,50,[2,[],"Nothing"]]]]]]]]]]]],[770,36,770,40,[2,[],"dAcc"]]]],[771,31,771,49,[1,"::",1,[771,31,771,41,[2,[],"expression"]],[771,45,771,49,[2,[],"eAcc"]]]]]]]]]]],[[774,25,774,54,[12,[[],"LetDestructuring"],[[774,42,774,43,[11,"p"]],[774,44,774,54,[11,"expression"]]]]],[775,29,792,30,[16,[[[776,33,778,59,[0,[[0],[1,[776,33,776,49,[[776,33,776,35,"bs"],[776,38,776,49,[1,[776,38,776,42,[[],"List"]],[[776,43,776,49,[1,[776,43,776,49,[[],"String"]],[]]]]]]]]],[777,33,778,59,[[777,33,777,35,"bs"],[],[778,37,778,59,[0,[[778,37,778,57,[2,[],"allBindingsInPattern"]],[778,58,778,59,[2,[],"p"]]]]]]]]]]],[780,29,792,30,[6,[[780,31,790,40,[1,"::",1,[780,31,789,32,[7,[780,32,788,34,[18,[[[780,33,780,35,[11,"es"]]],[781,33,788,34,[8,[[781,35,781,55,[[781,35,781,40,"range"],[781,43,781,55,[0,[[781,43,781,53,[2,["Node"],"range"]],[781,54,781,55,[2,[],"d"]]]]]]],[782,35,783,33,[[782,35,782,45,"namesBound"],[782,48,782,63,[0,[[782,48,782,60,[2,["Set"],"fromList"]],[782,61,782,63,[2,[],"bs"]]]]]]],[783,35,784,33,[[783,35,783,51,"usedInExpression"],[783,54,783,122,[0,[[783,54,783,62,[2,["List"],"any"]],[783,63,783,119,[7,[783,64,783,118,[1,"<<",0,[783,64,783,89,[7,[783,65,783,88,[18,[[[783,66,783,73,[11,"numUses"]]],[783,77,783,88,[1,">",2,[783,77,783,84,[2,[],"numUses"]],[783,87,783,88,[3,0]]]]]]]]],[783,93,783,118,[0,[[783,93,783,104,[2,[],"countUsesIn"]],[783,105,783,118,[19,[783,105,783,107,[2,[],"lb"]],[783,108,783,118,"expression"]]]]]]]]]],[783,120,783,122,[2,[],"bs"]]]]]]],[784,35,785,33,[[784,35,784,54,"dependentOnBindings"],[784,57,784,82,[0,[[784,57,784,71,[2,[],"findAllNamesIn"]],[784,72,784,82,[2,[],"expression"]]]]]]],[785,35,786,33,[[785,35,785,50,"usedInOtherDecs"],[785,53,785,129,[0,[[785,53,785,61,[2,["List"],"any"]],[785,62,785,126,[7,[785,63,785,125,[18,[[[785,64,785,65,[11,"e"]]],[785,69,785,125,[0,[[785,69,785,77,[2,["List"],"any"]],[785,78,785,122,[7,[785,79,785,121,[1,"<<",0,[785,79,785,104,[7,[785,80,785,103,[18,[[[785,81,785,88,[11,"numUses"]]],[785,92,785,103,[1,">",2,[785,92,785,99,[2,[],"numUses"]],[785,102,785,103,[3,0]]]]]]]]],[785,108,785,121,[0,[[785,108,785,119,[2,[],"countUsesIn"]],[785,120,785,121,[2,[],"e"]]]]]]]]],[785,123,785,125,[2,[],"bs"]]]]]]]]]],[785,127,785,129,[2,[],"es"]]]]]]],[786,35,787,33,[[786,35,786,39,"args"],[786,42,786,44,[9,[]]]]],[787,35,788,33,[[787,35,787,40,"glued"],[787,43,787,50,[2,[],"Nothing"]]]]]]]]]]]],[790,36,790,40,[2,[],"dAcc"]]]],[791,31,791,49,[1,"::",1,[791,31,791,41,[2,[],"expression"]],[791,45,791,49,[2,[],"eAcc"]]]]]]]]]]]]]]]]]]]]],[794,13,796,99,[1,"|>",0,[794,13,795,63,[1,"|>",0,[794,13,794,57,[0,[[794,13,794,29,[2,["ListX"],"reverseMap"]],[794,30,794,45,[7,[794,31,794,44,[18,[[[794,32,794,33,[11,"f"]]],[794,37,794,44,[0,[[794,37,794,38,[2,[],"f"]],[794,39,794,44,[2,[],"exprs"]]]]]]]]]],[794,46,794,57,[2,[],"exprsToDecs"]]]]],[795,20,795,63,[7,[795,21,795,62,[18,[[[795,22,795,24,[11,"ds"]]],[795,28,795,62,[0,[[795,28,795,43,[2,["List"],"indexedMap"]],[795,44,795,59,[7,[795,45,795,58,[0,[[795,45,795,55,[2,[],"applyGlues"]],[795,56,795,58,[2,[],"ds"]]]]]]],[795,60,795,62,[2,[],"ds"]]]]]]]]]]]],[796,20,796,99,[0,[[796,20,796,40,[2,[],"checkSortingWithGlue"]],[796,41,796,62,[19,[796,41,796,48,[2,[],"context"]],[796,49,796,62,"extractSource"]]],[796,63,796,81,[5,"Let declarations"]],[796,82,796,88,[2,[],"sortBy"]],[796,89,796,99,[2,[],"errorRange"]]]]]]]]]]],[[798,9,798,10,[0]],[799,13,799,15,[9,[]]]]]]]]]]]]],[802,1,805,52,[1,[[1,[802,1,803,3,"{-| Given a `LetDec` and a list of other `LetDec`s,\n-}"]],[804,12,804,16,"Glue"],[],[805,5,805,52,[6,[805,5,805,20,[3,[[805,7,805,10,[1,[805,7,805,10,[[],"Int"]],[]]],[805,12,805,18,[1,[805,12,805,18,[[],"LetDec"]],[]]]]]],[805,24,805,52,[6,[805,24,805,35,[1,[805,24,805,28,[[],"List"]],[[805,29,805,35,[1,[805,29,805,35,[[],"LetDec"]],[]]]]]],[805,39,805,52,[1,[805,39,805,44,[[],"Maybe"]],[[805,45,805,52,[1,[805,45,805,52,[[],"GluedTo"]],[]]]]]]]]]]]]],[808,1,814,40,[0,[[1,[808,1,809,3,"{-| Create a context with a source extractor.\n-}"]],[1,[810,1,810,48,[[810,1,810,15,"initialContext"],[810,18,810,48,[1,[810,18,810,37,[["Rule"],"ContextCreator"]],[[810,38,810,40,[2]],[810,41,810,48,[1,[810,41,810,48,[[],"Context"]],[]]]]]]]]],[811,1,814,40,[[811,1,811,15,"initialContext"],[],[812,5,814,40,[1,"|>",0,[812,5,813,65,[0,[[812,5,812,28,[2,["Rule"],"initContextCreator"]],[813,9,813,65,[7,[813,10,813,64,[18,[[[813,11,813,24,[11,"extractSource"]],[813,25,813,27,[1]]],[813,31,813,64,[8,[[813,33,813,62,[[813,33,813,46,"extractSource"],[813,49,813,62,[2,[],"extractSource"]]]]]]]]]]]]]]],[814,12,814,40,[2,["Rule"],"withSourceCodeExtractor"]]]]]]]]],[817,1,827,6,[1,[[1,[817,1,818,3,"{-| A `let` declaration, parsed for full information.\n-}"]],[819,12,819,18,"LetDec"],[],[820,5,827,6,[4,[[820,7,820,20,[[820,7,820,12,"range"],[820,15,820,20,[1,[820,15,820,20,[[],"Range"]],[]]]]],[821,7,822,5,[[821,7,821,17,"namesBound"],[821,20,821,30,[1,[821,20,821,23,[[],"Set"]],[[821,24,821,30,[1,[821,24,821,30,[[],"String"]],[]]]]]]]],[822,7,823,5,[[822,7,822,23,"usedInExpression"],[822,26,822,30,[1,[822,26,822,30,[[],"Bool"]],[]]]]],[823,7,824,5,[[823,7,823,26,"dependentOnBindings"],[823,29,823,39,[1,[823,29,823,32,[[],"Set"]],[[823,33,823,39,[1,[823,33,823,39,[[],"String"]],[]]]]]]]],[824,7,825,5,[[824,7,824,22,"usedInOtherDecs"],[824,25,824,29,[1,[824,25,824,29,[[],"Bool"]],[]]]]],[825,7,826,5,[[825,7,825,11,"args"],[825,14,825,25,[1,[825,14,825,18,[[],"List"]],[[825,19,825,25,[1,[825,19,825,25,[[],"String"]],[]]]]]]]],[826,7,827,5,[[826,7,826,12,"glued"],[826,15,826,28,[1,[826,15,826,20,[[],"Maybe"]],[[826,21,826,28,[1,[826,21,826,28,[[],"GluedTo"]],[]]]]]]]]]]]]]]],[[8,1,42,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, sortLetDeclarations\n\n\n## Orderings\n\n@docs alphabetically, usedInExpressionFirst, usedInExpressionLast, usedInOtherDeclarationsLast, usedInOtherDeclarationsFirst, valuesBeforeFunctions, valuesAfterFunctions\n\n\n## Glues\n\nGlues provide a way to \"stick\" one declaration to another, i.e. to always sort\none declaration alongside another. Note that glues will chain, i.e. if `a` is\nglued before `b` and `b` is glued after `c`, then the result will be `c` -> `a`\n-> `b` (sorted wherever `c` is sorted to). Glues behave in the following ways:\n\n  - If multiple glues are specified, the first specified will be used.\n  - If multiple declarations are glued at the same place, they will be ordered\n    by the orderings specified.\n  - If glues are not acyclic (i.e. two declarations are glued to each other,\n    possibly via intermediates), then all of the involved declarations will not\n    be glued and will be sorted normally.\n\n@docs glueHelpersBefore, glueHelpersAfter, glueDependenciesBeforeFirstDependent, glueDependenciesAfterFirstDependent, glueDependenciesBeforeLastDependent, glueDependenciesAfterLastDependent\n\n-}"],[151,9,151,62,"-- Reverse sort order, as we've been cons-ing them on"],[495,21,495,71,"-- Only decs not used in expression can be helpers"],[533,21,533,71,"-- Only decs not used in expression can be helpers"],[575,21,575,76,"-- Only decs not used in expression can be dependencies"],[617,21,617,76,"-- Only decs not used in expression can be dependencies"],[659,21,659,76,"-- Only decs not used in expression can be dependencies"],[701,21,701,76,"-- Only decs not used in expression can be dependencies"],[739,21,739,86,"-- Assume that the `let` of a let block is just the first 3 chars"]]]]
