[1,[[1,1,9,6,[0,[[1,8,1,25,["NoUnsortedRecords"]],[1,26,9,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,27,[1,"defaults"]],[4,7,4,28,[1,"sortGenericFieldsLast"]],[5,7,5,32,[1,"doNotSortAmbiguousRecords"]],[5,34,5,66,[1,"reportAmbiguousRecordsWithoutFix"]],[6,7,6,30,[1,"doNotSortUnknownRecords"]],[6,32,6,62,[1,"reportUnknownRecordsWithoutFix"]],[7,7,7,31,[1,"treatSubrecordsAsUnknown"]],[7,33,7,62,[1,"treatAllSubrecordsAsCanonical"]],[7,64,7,97,[1,"treatCustomTypeRecordsAsCanonical"]],[8,7,8,26,[1,"typecheckAllRecords"]]]]]]]],[[58,1,58,28,[[58,8,58,12,["Dict"]],[0],[1,[58,13,58,28,[1,[[58,23,58,27,[2,"Dict"]]]]]]]],[59,1,59,27,[[59,8,59,18,["Dict","Extra"]],[1,[59,22,59,27,["DictX"]]],[0]]],[60,1,60,16,[[60,8,60,16,["Elm","Docs"]],[0],[0]]],[61,1,61,57,[[61,8,61,30,["Elm","Syntax","Declaration"]],[0],[1,[61,31,61,57,[1,[[61,41,61,56,[3,["Declaration",[1,[61,52,61,56]]]]]]]]]]],[62,1,62,71,[[62,8,62,27,["Elm","Syntax","Exposing"]],[0],[1,[62,28,62,71,[1,[[62,38,62,50,[3,["Exposing",[1,[62,46,62,50]]]]],[62,52,62,70,[3,["TopLevelExpose",[1,[62,66,62,70]]]]]]]]]]],[63,1,63,99,[[63,8,63,29,["Elm","Syntax","Expression"]],[0],[1,[63,30,63,99,[1,[[63,40,63,54,[3,["Expression",[1,[63,50,63,54]]]]],[63,56,63,64,[2,"Function"]],[63,66,63,84,[3,["LetDeclaration",[1,[63,80,63,84]]]]],[63,86,63,98,[2,"RecordSetter"]]]]]]]],[64,1,64,53,[[64,8,64,25,["Elm","Syntax","Module"]],[1,[64,29,64,35,["Module"]]],[1,[64,36,64,53,[1,[[64,46,64,52,[2,"Module"]]]]]]]],[65,1,65,51,[[65,8,65,29,["Elm","Syntax","ModuleName"]],[0],[1,[65,30,65,51,[1,[[65,40,65,50,[2,"ModuleName"]]]]]]]],[66,1,66,51,[[66,8,66,23,["Elm","Syntax","Node"]],[1,[66,27,66,31,["Node"]]],[1,[66,32,66,51,[1,[[66,42,66,50,[3,["Node",[1,[66,46,66,50]]]]]]]]]]],[67,1,67,49,[[67,8,67,26,["Elm","Syntax","Pattern"]],[0],[1,[67,27,67,49,[1,[[67,37,67,48,[3,["Pattern",[1,[67,44,67,48]]]]]]]]]]],[68,1,68,60,[[68,8,68,24,["Elm","Syntax","Range"]],[1,[68,28,68,33,["Range"]]],[1,[68,34,68,60,[1,[[68,44,68,52,[2,"Location"]],[68,54,68,59,[2,"Range"]]]]]]]],[69,1,69,51,[[69,8,69,23,["Elm","Syntax","Type"]],[0],[1,[69,24,69,51,[1,[[69,34,69,50,[2,"ValueConstructor"]]]]]]]],[70,1,70,99,[[70,8,70,33,["Elm","Syntax","TypeAnnotation"]],[1,[70,37,70,51,["TypeAnnotation"]]],[1,[70,52,70,99,[1,[[70,62,70,78,[2,"RecordDefinition"]],[70,80,70,98,[3,["TypeAnnotation",[1,[70,94,70,98]]]]]]]]]]],[71,1,71,16,[[71,8,71,16,["Elm","Type"]],[0],[0]]],[72,1,72,27,[[72,8,72,18,["List","Extra"]],[1,[72,22,72,27,["ListX"]]],[0]]],[73,1,73,29,[[73,8,73,19,["Maybe","Extra"]],[1,[73,23,73,29,["MaybeX"]]],[0]]],[74,1,74,84,[[74,8,74,36,["Review","ModuleNameLookupTable"]],[0],[1,[74,37,74,84,[1,[[74,47,74,68,[2,"ModuleNameLookupTable"]],[74,70,74,83,[1,"moduleNameFor"]]]]]]]],[75,1,75,69,[[75,8,75,33,["Review","Project","Dependency"]],[1,[75,37,75,47,["Dependency"]]],[1,[75,48,75,69,[1,[[75,58,75,68,[2,"Dependency"]]]]]]]],[76,1,76,50,[[76,8,76,19,["Review","Rule"]],[1,[76,23,76,27,["Rule"]]],[1,[76,28,76,50,[1,[[76,38,76,43,[2,"Error"]],[76,45,76,49,[2,"Rule"]]]]]]]],[77,1,77,26,[[77,8,77,11,["Set"]],[0],[1,[77,12,77,26,[1,[[77,22,77,25,[2,"Set"]]]]]]]],[78,1,78,62,[[78,8,78,12,["Util"]],[0],[1,[78,13,78,62,[1,[[78,23,78,35,[1,"checkSorting"]],[78,37,78,51,[1,"makeAccessFunc"]],[78,53,78,61,[1,"validate"]]]]]]]]],[[81,1,337,38,[0,[[1,[81,1,324,3,"{-| Reports record fields that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the fields.\n\nThe proper order of record fields is the order in which they are defined in the\ntype alias in your source files. See the \"Configuration\" section below for more\ninformation.\n\n    config =\n        [ NoUnsortedRecords.rule\n            (NoUnsortedRecords.defaults\n                |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n            )\n        ]\n\n\n## \"Proper\" Order\n\nProper order may be defined in several ways. Firstly, type aliases define order,\ne.g.\n\n    type alias MyRecord =\n        { foo : Int, bar : Int, baz : Int }\n\ncreates a record with name `MyRecord` and the known field order `foo`, `bar`,\n`baz`.\n\nSecondly, records without a defined type alias that are nevertheless either a\nsubrecord of a type alias or attached to a custom type are considered to be in\nthe order they are defined in the source:\n\n    type MyType\n        = A Int { foo : Int, bar : Int, baz : Int }\n        | B { b : Int, a : Int, c : Int } String\n\nwhen encountered in their larger context. By default, these are _not_ considered\ncanonical records when encountered alone, though this behavior may be turned on\nwith [`treatAllSubrecordsAsCanonical`](#treatAllSubrecordsAsCanonical) or\n[`treatCustomTypeRecordsAsCanonical`](#treatCustomTypeRecordsAsCanonical).\n\n\n## Inference/Disambiguation\n\nSince records are not associated with a unique name, it is necessary to infer\nwhat type alias a record matches. In the most ambiguous case, all type aliases\nare checked for matching fields. If none are found, then the rule can't match it\nto a specific order (though it may still optionally be sorted alphabetically).\n\nIf only one matching type alias is found, then the rule will sort by that order.\n\nIn the case of multiple matching field sets, several things may happen. If all\nof the field sets have the same order, then it isn't necessary to unambiguously\nidentify which is being matched, and that one order will be used. Otherwise, the\nrule is capable of using the following disambiguation rules:\n\n  - Disambiguation by the fact that all fields must be present:\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int, extra : Int }\n\n-- Must be type `A` because missing `extra`\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\n  - Disambiguation by type signature:\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int }\n\na : A\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\nIt should be noted that this works with relatively complex type signatures, e.g.\n\n    type alias A =\n        { foo : Int, bar : Int, baz : Int }\n\n    type alias B =\n        { bar : Int, foo : Int, baz : Int }\n\n    a : Int -> String -> ( Int, String, List A )\n    a i s =\n        ( i, s, [ { foo = 1, bar = 2, baz = 3 } ] )\n\nThis also works with patterns, e.g.\n\n    type alias A =\n        { foo : Int, bar : Int, baz : Int }\n\n    type alias B =\n        { bar : Int, foo : Int, baz : Int }\n\n    a : Int -> A -> Int -> Bool\n    a i1 { foo, bar, baz } i2 =\n        True\n\n  - Disambiguation by field type. Very rudimentary type inference is performed,\n    but it may frequently be useful to add annotations, as the inference is by\n    no means complete.\n\n```\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : String, baz : Int }\n\n-- Must be type `A` because `foo` is `Int`\na : { foo : Int, bar : Int, baz : Int }\na =\n    { foo = 1, bar = 2, baz = 3 }\n```\n\n  - Disambiguation by the fact that the it is associated with a custom type with\n    a known record argument:\n\n```\ntype Custom\n    = A { foo : Int, bar : Int, baz : Int }\n    | B { bar : Int, foo : Int, baz : Int }\n\na =\n    -- Must be `A`'s record\n    A { foo = 1, bar = 2, baz = 3 }\n\nb custom =\n    case custom of\n        -- Must be `A`'s record\n        A { foo, bar } ->\n            False\n\n        -- Must be `B`'s record\n        B { bar, foo } ->\n            True\n```\n\n  - Disambiguation by the fact that the it is associated with a specific index\n    of a custom type with a known record argument:\n\n```\ntype Custom\n    = A\n        Int\n        { foo : Int\n        , bar : Int\n        , baz : Int\n        }\n        String\n        { bar : Int\n        , foo : Int\n        , baz : Int\n        }\n\na custom =\n    case custom of\n        A _ { foo, bar } _ { bar, foo } ->\n            False\n```\n\n  - Disambiguation by the fact that the it is associated with a specific field\n    of a record alias:\n\n```\ntype alias A =\n    { a : { foo : Int, bar : Int, baz : Int }\n    , b : { bar : Int, foo : Int, baz : Int }\n    }\n\nfunc : A\nfunc =\n    { a = { foo = 2, bar = 1, baz = 3 }\n    , b = { bar = 2, foo = 1, baz = 3 }\n    }\n```\n\n  - Disambiguation by known function argument types (this includes local\n    bindings):\n\n```\nmodule A exposing (..)\n\ntype alias A =\n    { foo : Int, bar : Int, baz : Int }\n\ntype alias B =\n    { bar : Int, foo : Int, baz : Int }\n\nfoo : A -> Bool\nfoo a =\n    True\n\nfunc : Bool\nfunc =\n    -- Must be `A`, because `foo` has type `A -> Bool`\n    foo { foo = 1, bar = 2, baz = 3 }\n```\n\n\n## Best Practices for Disambiguation\n\nType annotations are always useful! If all functions have type annotations (with\nthe appropriate aliases), then it's unlikely ambiguous records will ever be\nencountered. Beyond that, ambiguity can always be avoided by just making the\ncanonical order for possibly-ambiguous records identical.\n\nIf you want to ensure that this rule is not encountering ambiguous/unknown\nrecords, then you can use `reportAmbiguousRecordsWithoutFix` and/or\n`reportUnknownRecordsWithoutFix` to report them without automatically sorting\nthem alphabetically. Alternately, you can use `doNotSortAmbiguousRecords` and/or\n`doNotSortUnknownRecords` to disable all sorting/error reporting for them.\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that your record fields are in a\nconsistent, predictable order, that is consistent with the order in which they\nwere defined.\n\nThis rule is not useful when you want to be able to write records in different\norders throughout your codebase, e.g. if you want to emphasize what fields are\nmost important at any given point. It may also not be useful if you have many\nrecords with the same fields.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedRecords\n```\n\n-}"]],[1,[325,1,325,26,[[325,1,325,5,"rule"],[325,8,325,26,[6,[325,8,325,18,[1,[325,8,325,18,[[],"RuleConfig"]],[]]],[325,22,325,26,[1,[325,22,325,26,[[],"Rule"]],[]]]]]]]],[326,1,337,38,[[326,1,326,5,"rule"],[[326,6,326,12,[11,"config"]]],[327,5,337,38,[1,"|>",0,[327,5,336,44,[1,"|>",0,[327,5,335,47,[1,"|>",0,[327,5,334,14,[1,"|>",0,[327,5,329,57,[1,"|>",0,[327,5,328,94,[1,"|>",0,[327,5,327,72,[0,[[327,5,327,30,[2,["Rule"],"newProjectRuleSchema"]],[327,31,327,50,[5,"NoUnsortedRecords"]],[327,51,327,72,[2,[],"initialProjectContext"]]]]],[328,12,328,94,[0,[[328,12,328,47,[2,["Rule"],"withDependenciesProjectVisitor"]],[328,48,328,94,[7,[328,49,328,93,[18,[[[328,50,328,51,[11,"d"]],[328,52,328,53,[11,"c"]]],[328,57,328,93,[6,[[328,59,328,61,[9,[]]],[328,63,328,91,[0,[[328,63,328,80,[2,[],"dependencyVisitor"]],[328,81,328,87,[2,[],"config"]],[328,88,328,89,[2,[],"c"]],[328,90,328,91,[2,[],"d"]]]]]]]]]]]]]]]]]],[329,12,329,57,[0,[[329,12,329,34,[2,["Rule"],"withModuleVisitor"]],[329,35,329,57,[7,[329,36,329,56,[0,[[329,36,329,49,[2,[],"moduleVisitor"]],[329,50,329,56,[2,[],"config"]]]]]]]]]]]],[330,12,334,14,[0,[[330,12,330,53,[2,["Rule"],"withModuleContextUsingContextCreator"]],[331,13,334,14,[8,[[331,15,331,56,[[331,15,331,34,"foldProjectContexts"],[331,37,331,56,[2,[],"foldProjectContexts"]]]],[332,15,333,13,[[332,15,332,34,"fromModuleToProject"],[332,37,332,56,[2,[],"fromModuleToProject"]]]],[333,15,334,13,[[333,15,333,34,"fromProjectToModule"],[333,37,333,63,[0,[[333,37,333,56,[2,[],"fromProjectToModule"]],[333,57,333,63,[2,[],"config"]]]]]]]]]]]]]]],[335,12,335,47,[2,["Rule"],"withContextFromImportedModules"]]]],[336,12,336,44,[2,["Rule"],"providesFixesForProjectRule"]]]],[337,12,337,38,[2,["Rule"],"fromProjectRuleSchema"]]]]]]]]],[340,1,350,10,[2,[[1,[340,1,342,3,"{-| Configuration for this rule. Create a new one with `defaults` and use\n`reportAmbiguousRecordsWithoutFix`, `doNotSortUnknownRecords`, etc. to alter it.\n-}"]],[343,6,343,16,"RuleConfig"],[],[[344,7,350,10,[[344,7,344,17,"RuleConfig"],[[345,9,350,10,[4,[[345,11,345,50,[[345,11,345,22,"sortUnknown"],[345,25,345,50,[1,[345,25,345,50,[[],"SortWithoutCanonicalOrder"]],[]]]]],[346,11,347,9,[[346,11,346,24,"sortAmbiguous"],[346,27,346,52,[1,[346,27,346,52,[[],"SortWithoutCanonicalOrder"]],[]]]]],[347,11,348,9,[[347,11,347,23,"sortGenerics"],[347,26,347,38,[1,[347,26,347,38,[[],"SortGenerics"]],[]]]]],[348,11,349,9,[[348,11,348,29,"subrecordTreatment"],[348,32,348,51,[1,[348,32,348,51,[[],"SubrecordCanonicity"]],[]]]]],[349,11,350,9,[[349,11,349,38,"typecheckUnambiguousRecords"],[349,41,349,45,[1,[349,41,349,45,[[],"Bool"]],[]]]]]]]]]]]]]]],[353,1,387,10,[0,[[1,[353,1,378,3,"{-| The default configuration, with the following behavior:\n\n  - Unknown records (those that match no known canonical order) are sorted\n    alphabetically\n  - Ambiguous records (those that match more than one canonical order) are\n    sorted alphabetically\n  - Generic fields of generic records are sorted before the canonical ones.\n  - Subrecords are treated as having canonical order only when associated with\n    their outer record/constructor.\n  - Typechecking is only used to disambiguate records, i.e. a record will not\n    _not_ match a canonical record just because the rule thinks it has the wrong\n    type. For instance, `{ foo = 1, bar = 2 }` will match\n    `{ foo : String, bar : String }` if no other records exist with the fields\n    `foo` and `bar`. This is to protect against incorrect type inference by this\n    rule.\n\nUse `reportUnknownRecordsWithoutFix`, etc. to alter this behavior, e.g.\n\n    config =\n        [ NoUnsortedRecords.rule\n            (NoUnsortedRecords.defaults\n                |> NoUnsortedRecords.reportAmbiguousRecordsWithoutFix\n            )\n        ]\n\n-}"]],[1,[379,1,379,22,[[379,1,379,9,"defaults"],[379,12,379,22,[1,[379,12,379,22,[[],"RuleConfig"]],[]]]]]],[380,1,387,10,[[380,1,380,9,"defaults"],[],[381,5,387,10,[0,[[381,5,381,15,[2,[],"RuleConfig"]],[382,9,387,10,[8,[[382,11,382,39,[[382,11,382,22,"sortUnknown"],[382,25,382,39,[2,[],"Alphabetically"]]]],[383,11,384,9,[[383,11,383,24,"sortAmbiguous"],[383,27,383,41,[2,[],"Alphabetically"]]]],[384,11,385,9,[[384,11,384,23,"sortGenerics"],[384,26,384,44,[2,[],"GenericFieldsFirst"]]]],[385,11,386,9,[[385,11,385,29,"subrecordTreatment"],[385,32,385,54,[2,[],"CanonicalWhenSubrecord"]]]],[386,11,387,9,[[386,11,386,38,"typecheckUnambiguousRecords"],[386,41,386,46,[2,[],"False"]]]]]]]]]]]]]]],[390,1,406,56,[0,[[1,[390,1,403,3,"{-| By default, generic fields are placed before others; this alters that\nbehavior to place them at the end instead, e.g.\n\n    type alias A =\n        { z : Int, y : Int, x : Int }\n\n    type alias Generic record =\n        { record | foo : Int, bar : Int, baz : Int }\n\n    rec : Generic A\n    rec =\n        { foo = 1, bar = 2, baz = 3, z = 4, y = 5, x = 6 }\n\n-}"]],[1,[404,1,404,49,[[404,1,404,22,"sortGenericFieldsLast"],[404,25,404,49,[6,[404,25,404,35,[1,[404,25,404,35,[[],"RuleConfig"]],[]]],[404,39,404,49,[1,[404,39,404,49,[[],"RuleConfig"]],[]]]]]]]],[405,1,406,56,[[405,1,405,22,"sortGenericFieldsLast"],[[405,23,405,37,[14,[405,24,405,36,[12,[[],"RuleConfig"],[[405,35,405,36,[11,"r"]]]]]]]],[406,5,406,56,[0,[[406,5,406,15,[2,[],"RuleConfig"]],[406,16,406,56,[21,[406,18,406,19,"r"],[[406,22,406,55,[[406,22,406,34,"sortGenerics"],[406,37,406,54,[2,[],"GenericFieldsLast"]]]]]]]]]]]]]]],[409,1,416,49,[0,[[1,[409,1,413,3,"{-| By default, records that match multiple known aliases with different field\norders are sorted alphabetically. (If the field orders of the various matches\nare identical, then it is not ambiguous.) This disables that behavior, leaving\nthem in their base sorting instead.\n-}"]],[1,[414,1,414,53,[[414,1,414,26,"doNotSortAmbiguousRecords"],[414,29,414,53,[6,[414,29,414,39,[1,[414,29,414,39,[[],"RuleConfig"]],[]]],[414,43,414,53,[1,[414,43,414,53,[[],"RuleConfig"]],[]]]]]]]],[415,1,416,49,[[415,1,415,26,"doNotSortAmbiguousRecords"],[[415,27,415,41,[14,[415,28,415,40,[12,[[],"RuleConfig"],[[415,39,415,40,[11,"r"]]]]]]]],[416,5,416,49,[0,[[416,5,416,15,[2,[],"RuleConfig"]],[416,16,416,49,[21,[416,18,416,19,"r"],[[416,22,416,48,[[416,22,416,35,"sortAmbiguous"],[416,38,416,47,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[419,1,428,50,[0,[[1,[419,1,425,3,"{-| By default, records that match multiple known aliases with different field\norders are sorted alphabetically. (If the field orders of the various matches\nare identical, then it is not ambiguous.) This disables that behavior, reporting\nthem as ambiguous without automatically fixing them. This is useful if you want\nto catch ambiguous records and e.g. provide type annotations to make them\nunambiguous.\n-}"]],[1,[426,1,426,60,[[426,1,426,33,"reportAmbiguousRecordsWithoutFix"],[426,36,426,60,[6,[426,36,426,46,[1,[426,36,426,46,[[],"RuleConfig"]],[]]],[426,50,426,60,[1,[426,50,426,60,[[],"RuleConfig"]],[]]]]]]]],[427,1,428,50,[[427,1,427,33,"reportAmbiguousRecordsWithoutFix"],[[427,34,427,48,[14,[427,35,427,47,[12,[[],"RuleConfig"],[[427,46,427,47,[11,"r"]]]]]]]],[428,5,428,50,[0,[[428,5,428,15,[2,[],"RuleConfig"]],[428,16,428,50,[21,[428,18,428,19,"r"],[[428,22,428,49,[[428,22,428,35,"sortAmbiguous"],[428,38,428,48,[2,[],"ReportOnly"]]]]]]]]]]]]]]],[431,1,437,47,[0,[[1,[431,1,434,3,"{-| By default, records that do not match any known aliases or custom types are\nsorted alphabetically. This disables that behavior, leaving them in their base\nsorting.\n-}"]],[1,[435,1,435,51,[[435,1,435,24,"doNotSortUnknownRecords"],[435,27,435,51,[6,[435,27,435,37,[1,[435,27,435,37,[[],"RuleConfig"]],[]]],[435,41,435,51,[1,[435,41,435,51,[[],"RuleConfig"]],[]]]]]]]],[436,1,437,47,[[436,1,436,24,"doNotSortUnknownRecords"],[[436,25,436,39,[14,[436,26,436,38,[12,[[],"RuleConfig"],[[436,37,436,38,[11,"r"]]]]]]]],[437,5,437,47,[0,[[437,5,437,15,[2,[],"RuleConfig"]],[437,16,437,47,[21,[437,18,437,19,"r"],[[437,22,437,46,[[437,22,437,33,"sortUnknown"],[437,36,437,45,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[440,1,449,48,[0,[[1,[440,1,446,3,"{-| By default, records that do not match any known aliases or custom types are\nsorted alphabetically. This disables that behavior, reporting them as unknown\nwithout automatically fixing them.\n\nNote that this will effectively forbid the use of _ad hoc_/anonymous records!\n\n-}"]],[1,[447,1,447,58,[[447,1,447,31,"reportUnknownRecordsWithoutFix"],[447,34,447,58,[6,[447,34,447,44,[1,[447,34,447,44,[[],"RuleConfig"]],[]]],[447,48,447,58,[1,[447,48,447,58,[[],"RuleConfig"]],[]]]]]]]],[448,1,449,48,[[448,1,448,31,"reportUnknownRecordsWithoutFix"],[[448,32,448,46,[14,[448,33,448,45,[12,[[],"RuleConfig"],[[448,44,448,45,[11,"r"]]]]]]]],[449,5,449,48,[0,[[449,5,449,15,[2,[],"RuleConfig"]],[449,16,449,48,[21,[449,18,449,19,"r"],[[449,22,449,47,[[449,22,449,33,"sortUnknown"],[449,36,449,46,[2,[],"ReportOnly"]]]]]]]]]]]]]]],[452,1,478,58,[0,[[1,[452,1,475,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This disables that behavior,\ntreating them the same as any other unknown record.\n\nFor example:\n\n    type A\n        = A { foo : Int, bar : Int, baz : Int }\n\n    type alias Rec =\n        { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\n    thisWillBeUnknown =\n        A { bar = 1, baz = 2, foo = 3 }\n\n    and =\n        { yi =\n            -- This will also be unknown\n            { bar = 1, baz = 2, foo = 3 }\n        , er = 1\n        }\n\n-}"]],[1,[476,1,476,52,[[476,1,476,25,"treatSubrecordsAsUnknown"],[476,28,476,52,[6,[476,28,476,38,[1,[476,28,476,38,[[],"RuleConfig"]],[]]],[476,42,476,52,[1,[476,42,476,52,[[],"RuleConfig"]],[]]]]]]]],[477,1,478,58,[[477,1,477,25,"treatSubrecordsAsUnknown"],[[477,26,477,40,[14,[477,27,477,39,[12,[[],"RuleConfig"],[[477,38,477,39,[11,"r"]]]]]]]],[478,5,478,58,[0,[[478,5,478,15,[2,[],"RuleConfig"]],[478,16,478,58,[21,[478,18,478,19,"r"],[[478,22,478,57,[[478,22,478,40,"subrecordTreatment"],[478,43,478,56,[2,[],"AlwaysUnknown"]]]]]]]]]]]]]]],[481,1,500,60,[0,[[1,[481,1,497,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This extends that behavior to sort\nthem even when encountered alone (i.e. not in the context of their parent\nrecord/constructor. Note that canonical records will always take priority,\nhowever.\n\nFor example:\n\n    type alias Rec =\n        { yi : { foo : Int, bar : Int, baz : Int }, er : Int }\n\n    thisWillHaveCanonicalOrder =\n        -- Even though it does not appear in the context of `Rec`\n        { foo = 3, bar = 1, baz = 2 }\n\n-}"]],[1,[498,1,498,57,[[498,1,498,30,"treatAllSubrecordsAsCanonical"],[498,33,498,57,[6,[498,33,498,43,[1,[498,33,498,43,[[],"RuleConfig"]],[]]],[498,47,498,57,[1,[498,47,498,57,[[],"RuleConfig"]],[]]]]]]]],[499,1,500,60,[[499,1,499,30,"treatAllSubrecordsAsCanonical"],[[499,31,499,45,[14,[499,32,499,44,[12,[[],"RuleConfig"],[[499,43,499,44,[11,"r"]]]]]]]],[500,5,500,60,[0,[[500,5,500,15,[2,[],"RuleConfig"]],[500,16,500,60,[21,[500,18,500,19,"r"],[[500,22,500,59,[[500,22,500,40,"subrecordTreatment"],[500,43,500,58,[2,[],"AlwaysCanonical"]]]]]]]]]]]]]]],[503,1,523,74,[0,[[1,[503,1,520,3,"{-| By default, anonymous records within known records and within custom type\nconstructors are sorted by their declaration order when encountered in the\ncontext of their outer record/constructor. This extends that behavior to sort\ncustom type args even when encountered alone (i.e. not in the context of their\nconstructor. This was the behavior prior to version `1.1.0` and thus this\nsetting is provided for compatibility. Note that canonical records will always\ntake priority, however.\n\nFor example:\n\n    type A\n        = A { foo : Int, bar : Int, baz : Int }\n\n    thisWillHaveCanonicalOrder =\n        -- Even though it does not appear in the context of `A`\n        { foo = 3, bar = 1, baz = 2 }\n\n-}"]],[1,[521,1,521,61,[[521,1,521,34,"treatCustomTypeRecordsAsCanonical"],[521,37,521,61,[6,[521,37,521,47,[1,[521,37,521,47,[[],"RuleConfig"]],[]]],[521,51,521,61,[1,[521,51,521,61,[[],"RuleConfig"]],[]]]]]]]],[522,1,523,74,[[522,1,522,34,"treatCustomTypeRecordsAsCanonical"],[[522,35,522,49,[14,[522,36,522,48,[12,[[],"RuleConfig"],[[522,47,522,48,[11,"r"]]]]]]]],[523,5,523,74,[0,[[523,5,523,15,[2,[],"RuleConfig"]],[523,16,523,74,[21,[523,18,523,19,"r"],[[523,22,523,73,[[523,22,523,40,"subrecordTreatment"],[523,43,523,72,[2,[],"CustomTypeArgsAlwaysCanonical"]]]]]]]]]]]]]]],[526,1,535,58,[0,[[1,[526,1,532,3,"{-| By default, typechecking is only used to disambiguate records. This alters\nthat behavior to typecheck _all_ records. For instance, this will force\n`{ foo = 1, bar = 2 }` to be an \"unknown\" record if\n`{ foo : String, bar : String }` is known. This should probably be left turned\noff, unless you wish to help find examples of incorrect type inference by this\nrule.\n-}"]],[1,[533,1,533,47,[[533,1,533,20,"typecheckAllRecords"],[533,23,533,47,[6,[533,23,533,33,[1,[533,23,533,33,[[],"RuleConfig"]],[]]],[533,37,533,47,[1,[533,37,533,47,[[],"RuleConfig"]],[]]]]]]]],[534,1,535,58,[[534,1,534,20,"typecheckAllRecords"],[[534,21,534,35,[14,[534,22,534,34,[12,[[],"RuleConfig"],[[534,33,534,34,[11,"r"]]]]]]]],[535,5,535,58,[0,[[535,5,535,15,[2,[],"RuleConfig"]],[535,16,535,58,[21,[535,18,535,19,"r"],[[535,22,535,57,[[535,22,535,49,"typecheckUnambiguousRecords"],[535,52,535,56,[2,[],"True"]]]]]]]]]]]]]]],[538,1,769,16,[0,[[1,[538,1,540,3,"{-| Given a top-level declaration, accumulate information from it for storing in\nmodule context, determining what to expose or not.\n-}"]],[1,[541,1,570,10,[[541,1,541,26,"accumulateDeclarationInfo"],[542,5,570,10,[6,[542,5,542,24,[1,[542,5,542,24,[[],"SubrecordCanonicity"]],[]]],[544,9,570,10,[6,[544,9,549,10,[5,[544,11,544,18,"context"],[545,14,549,9,[[545,15,546,13,[[545,15,545,27,"exposingList"],[545,30,545,48,[1,[545,30,545,35,[[],"Maybe"]],[[545,36,545,48,[1,[545,36,545,48,[[],"ExposedNames"]],[]]]]]]]],[546,15,547,13,[[546,15,546,28,"fileIsIgnored"],[546,31,546,35,[1,[546,31,546,35,[[],"Bool"]],[]]]]],[547,15,548,13,[[547,15,547,26,"lookupTable"],[547,29,547,50,[1,[547,29,547,50,[[],"ModuleNameLookupTable"]],[]]]]],[548,15,549,9,[[548,15,548,25,"moduleName"],[548,28,548,38,[1,[548,28,548,38,[[],"ModuleName"]],[]]]]]]]]],[550,8,570,10,[6,[550,8,550,24,[1,[550,8,550,12,[[],"Node"]],[[550,13,550,24,[1,[550,13,550,24,[[],"Declaration"]],[]]]]]],[552,9,570,10,[6,[552,9,560,10,[4,[[552,11,552,60,[[552,11,552,18,"aliases"],[552,21,552,60,[1,[552,21,552,25,[[],"List"]],[[552,26,552,60,[3,[[552,28,552,34,[1,[552,28,552,34,[[],"String"]],[]]],[552,36,552,58,[1,[552,36,552,58,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[553,11,554,9,[[553,11,553,27,"canonicalRecords"],[553,30,553,58,[1,[553,30,553,34,[[],"List"]],[[553,35,553,58,[3,[[553,37,553,43,[1,[553,37,553,43,[[],"String"]],[]]],[553,45,553,56,[1,[553,45,553,56,[[],"KnownRecord"]],[]]]]]]]]]]],[554,11,555,9,[[554,11,554,23,"constructors"],[554,26,554,108,[1,[554,26,554,30,[[],"List"]],[[554,31,554,108,[3,[[554,33,554,39,[1,[554,33,554,39,[[],"String"]],[]]],[554,41,554,106,[4,[[554,43,554,72,[[554,43,554,57,"customTypeName"],[554,60,554,72,[1,[554,60,554,65,[[],"Maybe"]],[[554,66,554,72,[1,[554,66,554,72,[[],"String"]],[]]]]]]]],[554,74,554,105,[[554,74,554,79,"type_"],[554,82,554,104,[1,[554,82,554,104,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[555,11,556,9,[[555,11,555,25,"exposedAliases"],[555,28,555,67,[1,[555,28,555,32,[[],"List"]],[[555,33,555,67,[3,[[555,35,555,41,[1,[555,35,555,41,[[],"String"]],[]]],[555,43,555,65,[1,[555,43,555,65,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[556,11,557,9,[[556,11,556,34,"exposedCanonicalRecords"],[556,37,556,65,[1,[556,37,556,41,[[],"List"]],[[556,42,556,65,[3,[[556,44,556,50,[1,[556,44,556,50,[[],"String"]],[]]],[556,52,556,63,[1,[556,52,556,63,[[],"KnownRecord"]],[]]]]]]]]]]],[557,11,558,9,[[557,11,557,30,"exposedConstructors"],[557,33,557,115,[1,[557,33,557,37,[[],"List"]],[[557,38,557,115,[3,[[557,40,557,46,[1,[557,40,557,46,[[],"String"]],[]]],[557,48,557,113,[4,[[557,50,557,79,[[557,50,557,64,"customTypeName"],[557,67,557,79,[1,[557,67,557,72,[[],"Maybe"]],[[557,73,557,79,[1,[557,73,557,79,[[],"String"]],[]]]]]]]],[557,81,557,112,[[557,81,557,86,"type_"],[557,89,557,111,[1,[557,89,557,111,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[558,11,559,9,[[558,11,558,31,"exposedFunctionTypes"],[558,34,558,55,[1,[558,34,558,38,[[],"List"]],[[558,39,558,55,[3,[[558,41,558,47,[1,[558,41,558,47,[[],"String"]],[]]],[558,49,558,53,[1,[558,49,558,53,[[],"Type"]],[]]]]]]]]]]],[559,11,560,9,[[559,11,559,24,"functionTypes"],[559,27,559,48,[1,[559,27,559,31,[[],"List"]],[[559,32,559,48,[3,[[559,34,559,40,[1,[559,34,559,40,[[],"String"]],[]]],[559,42,559,46,[1,[559,42,559,46,[[],"Type"]],[]]]]]]]]]]]]]],[562,9,570,10,[4,[[562,11,562,60,[[562,11,562,18,"aliases"],[562,21,562,60,[1,[562,21,562,25,[[],"List"]],[[562,26,562,60,[3,[[562,28,562,34,[1,[562,28,562,34,[[],"String"]],[]]],[562,36,562,58,[1,[562,36,562,58,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[563,11,564,9,[[563,11,563,27,"canonicalRecords"],[563,30,563,58,[1,[563,30,563,34,[[],"List"]],[[563,35,563,58,[3,[[563,37,563,43,[1,[563,37,563,43,[[],"String"]],[]]],[563,45,563,56,[1,[563,45,563,56,[[],"KnownRecord"]],[]]]]]]]]]]],[564,11,565,9,[[564,11,564,23,"constructors"],[564,26,564,108,[1,[564,26,564,30,[[],"List"]],[[564,31,564,108,[3,[[564,33,564,39,[1,[564,33,564,39,[[],"String"]],[]]],[564,41,564,106,[4,[[564,43,564,72,[[564,43,564,57,"customTypeName"],[564,60,564,72,[1,[564,60,564,65,[[],"Maybe"]],[[564,66,564,72,[1,[564,66,564,72,[[],"String"]],[]]]]]]]],[564,74,564,105,[[564,74,564,79,"type_"],[564,82,564,104,[1,[564,82,564,104,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[565,11,566,9,[[565,11,565,25,"exposedAliases"],[565,28,565,67,[1,[565,28,565,32,[[],"List"]],[[565,33,565,67,[3,[[565,35,565,41,[1,[565,35,565,41,[[],"String"]],[]]],[565,43,565,65,[1,[565,43,565,65,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[566,11,567,9,[[566,11,566,34,"exposedCanonicalRecords"],[566,37,566,65,[1,[566,37,566,41,[[],"List"]],[[566,42,566,65,[3,[[566,44,566,50,[1,[566,44,566,50,[[],"String"]],[]]],[566,52,566,63,[1,[566,52,566,63,[[],"KnownRecord"]],[]]]]]]]]]]],[567,11,568,9,[[567,11,567,30,"exposedConstructors"],[567,33,567,115,[1,[567,33,567,37,[[],"List"]],[[567,38,567,115,[3,[[567,40,567,46,[1,[567,40,567,46,[[],"String"]],[]]],[567,48,567,113,[4,[[567,50,567,79,[[567,50,567,64,"customTypeName"],[567,67,567,79,[1,[567,67,567,72,[[],"Maybe"]],[[567,73,567,79,[1,[567,73,567,79,[[],"String"]],[]]]]]]]],[567,81,567,112,[[567,81,567,86,"type_"],[567,89,567,111,[1,[567,89,567,111,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[568,11,569,9,[[568,11,568,31,"exposedFunctionTypes"],[568,34,568,55,[1,[568,34,568,38,[[],"List"]],[[568,39,568,55,[3,[[568,41,568,47,[1,[568,41,568,47,[[],"String"]],[]]],[568,49,568,53,[1,[568,49,568,53,[[],"Type"]],[]]]]]]]]]]],[569,11,570,9,[[569,11,569,24,"functionTypes"],[569,27,569,48,[1,[569,27,569,31,[[],"List"]],[[569,32,569,48,[3,[[569,34,569,40,[1,[569,34,569,40,[[],"String"]],[]]],[569,42,569,46,[1,[569,42,569,46,[[],"Type"]],[]]]]]]]]]]]]]]]]]]]]]]]]],[571,1,769,16,[[571,1,571,26,"accumulateDeclarationInfo"],[[571,27,571,45,[11,"subrecordTreatment"]],[571,46,571,53,[11,"context"]],[571,54,571,58,[11,"node"]],[571,59,571,62,[11,"acc"]]],[572,5,769,16,[16,[[[573,9,593,21,[0,[[0],[1,[573,9,573,172,[[573,9,573,37,"makeConstructorAndSubrecords"],[573,40,573,172,[6,[573,40,573,62,[1,[573,40,573,62,[[],"TypeWithPositionalVars"]],[]]],[573,66,573,172,[6,[573,66,573,84,[1,[573,66,573,70,[[],"List"]],[[573,71,573,84,[1,[573,72,573,76,[[],"Node"]],[[573,77,573,83,[1,[573,77,573,83,[[],"String"]],[]]]]]]]]],[573,88,573,172,[6,[573,88,573,104,[1,[573,88,573,104,[[],"ValueConstructor"]],[]]],[573,108,573,172,[3,[[573,110,573,116,[1,[573,110,573,116,[[],"String"]],[]]],[573,118,573,140,[1,[573,118,573,140,[[],"TypeWithPositionalVars"]],[]]],[573,142,573,170,[1,[573,142,573,146,[[],"List"]],[[573,147,573,170,[3,[[573,149,573,155,[1,[573,149,573,155,[[],"String"]],[]]],[573,157,573,168,[1,[573,157,573,168,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]]]]],[574,9,593,21,[[574,9,574,37,"makeConstructorAndSubrecords"],[[574,38,574,44,[11,"return"]],[574,45,574,53,[11,"typeVars"]],[574,54,574,73,[8,[[574,56,574,60,"name"],[574,62,574,71,"arguments"]]]]],[575,13,593,21,[1,"|>",0,[575,13,582,26,[0,[[575,13,575,21,[2,["List"],"map"]],[576,17,581,18,[7,[576,18,580,51,[0,[[576,18,576,51,[2,[],"typeAnnotToTypeWithPositionalVars"]],[576,52,576,59,[2,[],"context"]],[577,21,579,22,[8,[[577,23,577,61,[[577,23,577,54,"constrainedTypeVarsAreRespected"],[577,57,577,61,[2,[],"True"]]]],[578,23,579,21,[[578,23,578,47,"subrecordIsAlsoCanonical"],[578,50,578,96,[0,[[578,50,578,77,[2,[],"subrecordCanonicityForField"]],[578,78,578,96,[2,[],"subrecordTreatment"]]]]]]]]]],[580,21,580,51,[7,[580,22,580,50,[0,[[580,22,580,30,[2,["List"],"map"]],[580,31,580,41,[2,["Node"],"value"]],[580,42,580,50,[2,[],"typeVars"]]]]]]]]]]]],[582,17,582,26,[2,[],"arguments"]]]]],[583,20,593,21,[7,[583,21,592,26,[18,[[[583,22,583,24,[11,"ts"]]],[584,25,592,26,[16,[[[585,29,587,48,[0,[[0],[1,[585,29,585,39,[[585,29,585,30,"n"],[585,33,585,39,[1,[585,33,585,39,[[],"String"]],[]]]]]],[586,29,587,48,[[586,29,586,30,"n"],[],[587,33,587,48,[0,[[587,33,587,43,[2,["Node"],"value"]],[587,44,587,48,[2,[],"name"]]]]]]]]]]],[589,25,592,26,[6,[[589,27,589,28,[2,[],"n"]],[590,27,590,71,[0,[[590,27,590,61,[2,[],"makeFunctionTypeWithPositionalVars"]],[590,62,590,68,[2,[],"return"]],[590,69,590,71,[2,[],"ts"]]]]],[591,27,591,75,[0,[[591,27,591,51,[2,[],"makeCustomTypeSubrecords"]],[591,52,591,70,[2,[],"subrecordTreatment"]],[591,71,591,72,[2,[],"n"]],[591,73,591,75,[2,[],"ts"]]]]]]]]]]]]]]]]]]]]]]],[595,9,618,48,[0,[[0],[1,[595,9,595,113,[[595,9,595,22,"skipIfIgnored"],[595,25,595,113,[6,[595,25,595,47,[6,[595,26,595,38,[1,[595,26,595,38,[[],"ExposedNames"]],[]]],[595,42,595,46,[1,[595,42,595,46,[[],"Bool"]],[]]]]],[595,51,595,113,[6,[595,51,595,52,[0,"r"]],[595,56,595,113,[6,[595,56,595,68,[6,[595,57,595,59,[2]],[595,63,595,67,[0,"info"]]]],[595,72,595,113,[6,[595,72,595,88,[6,[595,73,595,77,[0,"info"]],[595,81,595,87,[6,[595,81,595,82,[0,"r"]],[595,86,595,87,[0,"r"]]]]]],[595,92,595,113,[6,[595,92,595,108,[6,[595,93,595,97,[0,"info"]],[595,101,595,107,[6,[595,101,595,102,[0,"r"]],[595,106,595,107,[0,"r"]]]]]],[595,112,595,113,[0,"r"]]]]]]]]]]]]]]],[596,9,618,48,[[596,9,596,22,"skipIfIgnored"],[[596,23,596,37,[11,"checkIfExposed"]],[596,38,596,42,[11,"acc_"]],[596,43,596,51,[11,"makeInfo"]],[596,52,596,60,[11,"addLocal"]],[596,61,596,71,[11,"addExposed"]]],[597,13,618,48,[16,[[[598,17,600,75,[0,[[0],[1,[598,17,598,33,[[598,17,598,26,"isExposed"],[598,29,598,33,[1,[598,29,598,33,[[],"Bool"]],[]]]]]],[599,17,600,75,[[599,17,599,26,"isExposed"],[],[600,21,600,75,[0,[[600,21,600,34,[2,["MaybeX"],"unwrap"]],[600,35,600,39,[2,[],"True"]],[600,40,600,54,[2,[],"checkIfExposed"]],[600,55,600,75,[19,[600,55,600,62,[2,[],"context"]],[600,63,600,75,"exposingList"]]]]]]]]]]]],[602,13,618,48,[17,[[602,18,602,54,[6,[[602,20,602,41,[19,[602,20,602,27,[2,[],"context"]],[602,28,602,41,"fileIsIgnored"]]],[602,43,602,52,[2,[],"isExposed"]]]]],[[[603,17,603,32,[7,[[603,19,603,23,[12,[[],"True"],[]]],[603,25,603,30,[12,[[],"False"],[]]]]]],[604,21,604,25,[2,[],"acc_"]]],[[606,17,606,31,[7,[[606,19,606,23,[12,[[],"True"],[]]],[606,25,606,29,[12,[[],"True"],[]]]]]],[607,21,607,50,[0,[[607,21,607,31,[2,[],"addExposed"]],[607,32,607,45,[7,[607,33,607,44,[0,[[607,33,607,41,[2,[],"makeInfo"]],[607,42,607,44,[10]]]]]]],[607,46,607,50,[2,[],"acc_"]]]]]],[[609,17,609,32,[7,[[609,19,609,24,[12,[[],"False"],[]]],[609,26,609,30,[12,[[],"True"],[]]]]]],[610,21,615,58,[16,[[[611,25,613,40,[0,[[0],[1,[611,25,611,36,[[611,25,611,29,"info"],[611,32,611,36,[0,"info"]]]]],[612,25,613,40,[[612,25,612,29,"info"],[],[613,29,613,40,[0,[[613,29,613,37,[2,[],"makeInfo"]],[613,38,613,40,[10]]]]]]]]]]],[615,21,615,58,[1,"<|",1,[615,21,615,36,[0,[[615,21,615,31,[2,[],"addExposed"]],[615,32,615,36,[2,[],"info"]]]]],[615,40,615,58,[0,[[615,40,615,48,[2,[],"addLocal"]],[615,49,615,53,[2,[],"info"]],[615,54,615,58,[2,[],"acc_"]]]]]]]]]]],[[617,17,617,33,[7,[[617,19,617,24,[12,[[],"False"],[]]],[617,26,617,31,[12,[[],"False"],[]]]]]],[618,21,618,48,[0,[[618,21,618,29,[2,[],"addLocal"]],[618,30,618,43,[7,[618,31,618,42,[0,[[618,31,618,39,[2,[],"makeInfo"]],[618,40,618,42,[10]]]]]]],[618,44,618,48,[2,[],"acc_"]]]]]]]]]]]]]]]]]]],[620,5,769,16,[17,[[620,10,620,25,[0,[[620,10,620,20,[2,["Node"],"value"]],[620,21,620,25,[2,[],"node"]]]]],[[[621,9,621,42,[12,[[],"FunctionDeclaration"],[[621,29,621,42,[8,[[621,31,621,40,"signature"]]]]]]],[622,13,636,22,[1,"|>",0,[622,13,622,43,[0,[[622,13,622,22,[2,["Maybe"],"map"]],[622,23,622,33,[2,["Node"],"value"]],[622,34,622,43,[2,[],"signature"]]]]],[623,20,636,22,[0,[[623,20,623,33,[2,["MaybeX"],"unwrap"]],[623,34,623,37,[2,[],"acc"]],[624,21,636,22,[7,[624,22,635,111,[18,[[[624,23,624,47,[8,[[624,25,624,29,"name"],[624,31,624,45,"typeAnnotation"]]]]],[625,25,635,111,[16,[[[626,29,628,48,[0,[[0],[1,[626,29,626,39,[[626,29,626,30,"n"],[626,33,626,39,[1,[626,33,626,39,[[],"String"]],[]]]]]],[627,29,628,48,[[627,29,627,30,"n"],[],[628,33,628,48,[0,[[628,33,628,43,[2,["Node"],"value"]],[628,44,628,48,[2,[],"name"]]]]]]]]]]],[630,25,635,111,[0,[[630,25,630,38,[2,[],"skipIfIgnored"]],[630,39,630,67,[7,[630,40,630,66,[1,"<<",0,[630,40,630,52,[0,[[630,40,630,50,[2,["Set"],"member"]],[630,51,630,52,[2,[],"n"]]]]],[630,56,630,66,[20,".functions"]]]]]],[631,29,631,32,[2,[],"acc"]],[633,29,633,95,[7,[633,30,633,94,[18,[[[633,31,633,33,[1]]],[633,37,633,94,[6,[[633,39,633,40,[2,[],"n"]],[633,42,633,92,[0,[[633,42,633,69,[2,[],"typeAnnotToNoncanonicalType"]],[633,70,633,77,[2,[],"context"]],[633,78,633,92,[2,[],"typeAnnotation"]]]]]]]]]]]]],[634,29,634,97,[7,[634,30,634,96,[18,[[[634,31,634,35,[11,"info"]],[634,36,634,40,[11,"acc_"]]],[634,44,634,96,[21,[634,46,634,50,"acc_"],[[634,53,634,95,[[634,53,634,66,"functionTypes"],[634,69,634,94,[1,"::",1,[634,69,634,73,[2,[],"info"]],[634,77,634,94,[19,[634,77,634,80,[2,[],"acc"]],[634,81,634,94,"functionTypes"]]]]]]]]]]]]]]],[635,29,635,111,[7,[635,30,635,110,[18,[[[635,31,635,35,[11,"info"]],[635,36,635,40,[11,"acc_"]]],[635,44,635,110,[21,[635,46,635,50,"acc_"],[[635,53,635,109,[[635,53,635,73,"exposedFunctionTypes"],[635,76,635,108,[1,"::",1,[635,76,635,80,[2,[],"info"]],[635,84,635,108,[19,[635,84,635,87,[2,[],"acc"]],[635,88,635,108,"exposedFunctionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[[638,9,638,63,[12,[[],"CustomTypeDeclaration"],[[638,31,638,63,[8,[[638,33,638,37,"name"],[638,39,638,47,"generics"],[638,49,638,61,"constructors"]]]]]]],[639,13,687,18,[16,[[[640,17,642,36,[0,[[0],[1,[640,17,640,27,[[640,17,640,18,"n"],[640,21,640,27,[1,[640,21,640,27,[[],"String"]],[]]]]]],[641,17,642,36,[[641,17,641,18,"n"],[],[642,21,642,36,[0,[[642,21,642,31,[2,["Node"],"value"]],[642,32,642,36,[2,[],"name"]]]]]]]]]]],[644,13,687,18,[0,[[644,13,644,26,[2,[],"skipIfIgnored"]],[644,27,644,55,[7,[644,28,644,54,[1,"<<",0,[644,28,644,40,[0,[[644,28,644,38,[2,["Set"],"member"]],[644,39,644,40,[2,[],"n"]]]]],[644,44,644,54,[20,".openTypes"]]]]]],[645,17,645,20,[2,[],"acc"]],[646,17,675,18,[7,[646,18,674,37,[18,[[[646,19,646,21,[1]]],[647,21,674,37,[0,[[647,21,647,31,[2,["List"],"foldl"]],[648,25,672,26,[7,[648,26,671,37,[18,[[[648,27,648,28,[11,"c"]],[648,29,648,43,[7,[[648,31,648,35,[11,"fAcc"]],[648,37,648,41,[11,"rAcc"]]]]]],[649,29,671,37,[1,"|>",0,[649,29,661,45,[1,"|>",0,[649,29,649,41,[0,[[649,29,649,39,[2,["Node"],"value"]],[649,40,649,41,[2,[],"c"]]]]],[650,36,661,45,[0,[[650,36,650,64,[2,[],"makeConstructorAndSubrecords"]],[651,37,660,38,[7,[651,38,659,45,[1,"|>",0,[651,38,651,66,[0,[[651,38,651,46,[2,["List"],"map"]],[651,47,651,57,[2,["Node"],"value"]],[651,58,651,66,[2,[],"generics"]]]]],[652,44,659,45,[7,[652,45,658,78,[18,[[[652,46,652,48,[11,"gs"]]],[653,49,658,78,[1,"|>",0,[653,49,657,63,[1,"|>",0,[653,49,656,101,[1,"|>",0,[653,49,655,72,[1,"|>",0,[653,49,654,75,[1,"|>",0,[653,49,653,78,[0,[[653,49,653,57,[2,["List"],"map"]],[653,58,653,75,[7,[653,59,653,74,[0,[[653,59,653,66,[2,[],"TypeVar"]],[653,67,653,74,[2,[],"Nothing"]]]]]]],[653,76,653,78,[2,[],"gs"]]]]],[654,56,654,75,[0,[[654,56,654,65,[2,[],"NamedType"]],[654,66,654,75,[6,[[654,68,654,70,[9,[]]],[654,72,654,73,[2,[],"n"]]]]]]]]]],[655,56,655,72,[2,[],"DereferencedType"]]]],[656,56,656,101,[0,[[656,56,656,70,[2,[],"assignTypeVars"]],[656,71,656,101,[7,[656,72,656,100,[0,[[656,72,656,97,[2,[],"makePositionalArgTypeVars"]],[656,98,656,100,[2,[],"gs"]]]]]]]]]]]],[657,56,657,63,[2,[],"getType"]]]],[658,56,658,78,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]],[661,37,661,45,[2,[],"generics"]]]]]]],[662,36,671,37,[7,[662,37,670,42,[18,[[[662,38,662,55,[7,[[662,40,662,42,[11,"n_"]],[662,44,662,49,[11,"type_"]],[662,51,662,53,[11,"rs"]]]]]],[663,41,670,42,[6,[[663,43,668,52,[1,"::",1,[663,43,667,44,[6,[[663,45,663,47,[2,[],"n_"]],[664,45,666,46,[8,[[664,47,664,70,[[664,47,664,61,"customTypeName"],[664,64,664,70,[0,[[664,64,664,68,[2,[],"Just"]],[664,69,664,70,[2,[],"n"]]]]]]],[665,47,666,45,[[665,47,665,52,"type_"],[665,55,665,60,[2,[],"type_"]]]]]]]]]],[668,48,668,52,[2,[],"fAcc"]]]],[669,43,669,53,[1,"++",1,[669,43,669,45,[2,[],"rs"]],[669,49,669,53,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[673,25,673,35,[6,[[673,27,673,29,[9,[]]],[673,31,673,33,[9,[]]]]]],[674,25,674,37,[2,[],"constructors"]]]]]]]]]],[676,17,681,18,[7,[676,18,680,22,[18,[[[676,19,676,50,[7,[[676,21,676,36,[11,"newConstructors"]],[676,38,676,48,[11,"newRecords"]]]]],[676,51,676,55,[11,"acc_"]]],[677,21,680,22,[21,[677,23,677,27,"acc_"],[[678,27,679,25,[[678,27,678,43,"canonicalRecords"],[678,46,678,80,[1,"++",1,[678,46,678,56,[2,[],"newRecords"]],[678,60,678,80,[19,[678,60,678,63,[2,[],"acc"]],[678,64,678,80,"canonicalRecords"]]]]]]],[679,27,680,21,[[679,27,679,39,"constructors"],[679,42,679,77,[1,"++",1,[679,42,679,57,[2,[],"newConstructors"]],[679,61,679,77,[19,[679,61,679,64,[2,[],"acc"]],[679,65,679,77,"constructors"]]]]]]]]]]]]]]],[682,17,687,18,[7,[682,18,686,22,[18,[[[682,19,682,50,[7,[[682,21,682,36,[11,"newConstructors"]],[682,38,682,48,[11,"newRecords"]]]]],[682,51,682,55,[11,"acc_"]]],[683,21,686,22,[21,[683,23,683,27,"acc_"],[[684,27,685,25,[[684,27,684,50,"exposedCanonicalRecords"],[684,53,684,94,[1,"++",1,[684,53,684,63,[2,[],"newRecords"]],[684,67,684,94,[19,[684,67,684,70,[2,[],"acc"]],[684,71,684,94,"exposedCanonicalRecords"]]]]]]],[685,27,686,21,[[685,27,685,46,"exposedConstructors"],[685,49,685,91,[1,"++",1,[685,49,685,64,[2,[],"newConstructors"]],[685,68,685,91,[19,[685,68,685,71,[2,[],"acc"]],[685,72,685,91,"exposedConstructors"]]]]]]]]]]]]]]]]]]]]]],[[689,9,689,60,[12,[[],"AliasDeclaration"],[[689,26,689,60,[8,[[689,28,689,32,"name"],[689,34,689,42,"generics"],[689,44,689,58,"typeAnnotation"]]]]]]],[690,13,762,18,[16,[[[691,17,701,22,[0,[[0],[1,[691,17,691,63,[[691,17,691,26,"aliasInfo"],[691,29,691,63,[3,[[691,31,691,37,[1,[691,31,691,37,[[],"String"]],[]]],[691,39,691,61,[1,[691,39,691,61,[[],"TypeWithPositionalVars"]],[]]]]]]]]],[692,17,701,22,[[692,17,692,26,"aliasInfo"],[],[693,21,701,22,[6,[[693,23,693,24,[2,[],"n"]],[694,23,700,39,[0,[[694,23,694,56,[2,[],"typeAnnotToTypeWithPositionalVars"]],[694,57,694,64,[2,[],"context"]],[696,25,698,26,[8,[[696,27,696,66,[[696,27,696,58,"constrainedTypeVarsAreRespected"],[696,61,696,66,[2,[],"False"]]]],[697,27,698,25,[[697,27,697,51,"subrecordIsAlsoCanonical"],[697,54,697,101,[0,[[697,54,697,82,[2,[],"subrecordCanonicityForRecord"]],[697,83,697,101,[2,[],"subrecordTreatment"]]]]]]]]]],[699,25,699,55,[7,[699,26,699,54,[0,[[699,26,699,34,[2,["List"],"map"]],[699,35,699,45,[2,["Node"],"value"]],[699,46,699,54,[2,[],"generics"]]]]]]],[700,25,700,39,[2,[],"typeAnnotation"]]]]]]]]]]]]],[703,17,705,36,[0,[[0],[1,[703,17,703,27,[[703,17,703,18,"n"],[703,21,703,27,[1,[703,21,703,27,[[],"String"]],[]]]]]],[704,17,705,36,[[704,17,704,18,"n"],[],[705,21,705,36,[0,[[705,21,705,31,[2,["Node"],"value"]],[705,32,705,36,[2,[],"name"]]]]]]]]]]],[707,13,762,18,[0,[[707,13,707,26,[2,[],"skipIfIgnored"]],[707,27,707,51,[7,[707,28,707,50,[1,"<<",0,[707,28,707,40,[0,[[707,28,707,38,[2,["Set"],"member"]],[707,39,707,40,[2,[],"n"]]]]],[707,44,707,50,[20,".types"]]]]]],[708,17,708,75,[21,[708,19,708,22,"acc"],[[708,25,708,74,[[708,25,708,39,"exposedAliases"],[708,42,708,73,[1,"::",1,[708,42,708,51,[2,[],"aliasInfo"]],[708,55,708,73,[19,[708,55,708,58,[2,[],"acc"]],[708,59,708,73,"exposedAliases"]]]]]]]]]],[709,17,749,18,[7,[709,18,748,30,[18,[[[709,19,709,21,[1]]],[710,21,748,30,[1,"|>",0,[710,21,710,49,[0,[[710,21,710,34,[2,[],"annotToFields"]],[710,35,710,49,[2,[],"typeAnnotation"]]]]],[711,28,748,30,[0,[[711,28,711,41,[2,["MaybeX"],"unwrap"]],[711,42,711,52,[6,[[711,44,711,46,[9,[]]],[711,48,711,50,[9,[]]]]]],[712,29,748,30,[7,[712,30,747,34,[18,[[[712,31,712,52,[7,[[712,33,712,39,[11,"fields"]],[712,41,712,50,[11,"isGeneric"]]]]]],[713,33,747,34,[6,[[714,35,744,38,[11,[714,38,714,47,[2,[],"isGeneric"]],[715,37,715,39,[9,[]]],[718,37,744,38,[9,[[718,39,743,40,[6,[[718,41,718,42,[2,[],"n"]],[719,41,742,42,[8,[[719,43,719,67,[[719,43,719,57,"customTypeName"],[719,60,719,67,[2,[],"Nothing"]]]],[720,43,742,41,[[720,43,720,48,"type_"],[721,45,741,53,[1,"|>",0,[721,45,721,73,[0,[[721,45,721,53,[2,["List"],"map"]],[721,54,721,64,[2,["Node"],"value"]],[721,65,721,73,[2,[],"generics"]]]]],[722,52,741,53,[7,[722,53,740,66,[18,[[[722,54,722,58,[11,"vars"]]],[723,57,740,66,[1,"|>",0,[723,57,732,67,[0,[[723,57,723,65,[2,["List"],"map"]],[724,61,731,62,[7,[724,62,730,73,[1,">>",1,[724,62,724,72,[2,["Node"],"value"]],[725,68,730,73,[1,">>",1,[725,68,725,80,[2,["Tuple"],"second"]],[726,68,730,73,[0,[[726,68,726,101,[2,[],"typeAnnotToTypeWithPositionalVars"]],[726,102,726,109,[2,[],"context"]],[727,69,729,70,[8,[[727,71,727,109,[[727,71,727,102,"constrainedTypeVarsAreRespected"],[727,105,727,109,[2,[],"True"]]]],[728,71,729,69,[[728,71,728,95,"subrecordIsAlsoCanonical"],[728,98,728,144,[0,[[728,98,728,125,[2,[],"subrecordCanonicityForField"]],[728,126,728,144,[2,[],"subrecordTreatment"]]]]]]]]]],[730,69,730,73,[2,[],"vars"]]]]]]]]]]],[732,61,732,67,[2,[],"fields"]]]]],[733,64,740,66,[0,[[733,64,733,98,[2,[],"makeFunctionTypeWithPositionalVars"]],[734,65,740,66,[7,[734,66,739,83,[0,[[734,66,734,99,[2,[],"typeAnnotToTypeWithPositionalVars"]],[734,100,734,107,[2,[],"context"]],[735,69,737,70,[8,[[735,71,735,109,[[735,71,735,102,"constrainedTypeVarsAreRespected"],[735,105,735,109,[2,[],"True"]]]],[736,71,737,69,[[736,71,736,95,"subrecordIsAlsoCanonical"],[736,98,736,145,[0,[[736,98,736,126,[2,[],"subrecordCanonicityForRecord"]],[736,127,736,145,[2,[],"subrecordTreatment"]]]]]]]]]],[738,69,738,73,[2,[],"vars"]],[739,69,739,83,[2,[],"typeAnnotation"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[745,35,746,80,[1,"|>",0,[745,35,745,108,[0,[[745,35,745,59,[2,[],"knownRecordFromTypeAnnot"]],[745,60,745,78,[2,[],"subrecordTreatment"]],[745,79,745,86,[2,[],"context"]],[745,87,745,108,[6,[[745,89,745,95,[2,[],"fields"]],[745,97,745,106,[2,[],"isGeneric"]]]]]]]],[746,40,746,80,[0,[[746,40,746,48,[2,["List"],"map"]],[746,49,746,80,[7,[746,50,746,79,[0,[[746,50,746,64,[2,["Tuple"],"mapFirst"]],[746,65,746,79,[7,[746,66,746,78,[18,[[[746,67,746,68,[11,"s"]]],[746,72,746,78,[1,"++",1,[746,72,746,73,[2,[],"n"]],[746,77,746,78,[2,[],"s"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[750,17,756,18,[7,[750,18,755,22,[18,[[[750,19,750,50,[7,[[750,21,750,36,[11,"newConstructors"]],[750,38,750,48,[11,"newRecords"]]]]],[750,51,750,55,[11,"acc_"]]],[751,21,755,22,[21,[751,23,751,27,"acc_"],[[752,27,753,25,[[752,27,752,34,"aliases"],[752,37,752,61,[1,"::",1,[752,37,752,46,[2,[],"aliasInfo"]],[752,50,752,61,[19,[752,50,752,53,[2,[],"acc"]],[752,54,752,61,"aliases"]]]]]]],[753,27,754,25,[[753,27,753,43,"canonicalRecords"],[753,46,753,80,[1,"++",1,[753,46,753,56,[2,[],"newRecords"]],[753,60,753,80,[19,[753,60,753,63,[2,[],"acc"]],[753,64,753,80,"canonicalRecords"]]]]]]],[754,27,755,21,[[754,27,754,39,"constructors"],[754,42,754,77,[1,"++",1,[754,42,754,57,[2,[],"newConstructors"]],[754,61,754,77,[19,[754,61,754,64,[2,[],"acc"]],[754,65,754,77,"constructors"]]]]]]]]]]]]]]],[757,17,762,18,[7,[757,18,761,22,[18,[[[757,19,757,50,[7,[[757,21,757,36,[11,"newConstructors"]],[757,38,757,48,[11,"newRecords"]]]]],[757,51,757,55,[11,"acc_"]]],[758,21,761,22,[21,[758,23,758,27,"acc_"],[[759,27,760,25,[[759,27,759,50,"exposedCanonicalRecords"],[759,53,759,94,[1,"++",1,[759,53,759,63,[2,[],"newRecords"]],[759,67,759,94,[19,[759,67,759,70,[2,[],"acc"]],[759,71,759,94,"exposedCanonicalRecords"]]]]]]],[760,27,761,21,[[760,27,760,46,"exposedConstructors"],[760,49,760,91,[1,"++",1,[760,49,760,64,[2,[],"newConstructors"]],[760,68,760,91,[19,[760,68,760,71,[2,[],"acc"]],[760,72,760,91,"exposedConstructors"]]]]]]]]]]]]]]]]]]]]]],[[764,9,764,10,[0]],[769,13,769,16,[2,[],"acc"]]]]]]]]]]]]]]],[772,1,805,15,[0,[[1,[772,1,774,3,"{-| Report that an ambiguous record was encountered, along with a list of\nmatching type aliases.\n-}"]],[1,[775,1,775,87,[[775,1,775,21,"ambiguousRecordError"],[775,24,775,87,[6,[775,24,775,37,[1,[775,24,775,37,[[],"RecordToCheck"]],[]]],[775,41,775,87,[6,[775,41,775,59,[1,[775,41,775,45,[[],"List"]],[[775,46,775,59,[1,[775,47,775,51,[[],"List"]],[[775,52,775,58,[1,[775,52,775,58,[[],"String"]],[]]]]]]]]],[775,63,775,87,[6,[775,63,775,68,[1,[775,63,775,68,[[],"Range"]],[]]],[775,72,775,87,[1,[775,72,775,76,[[],"List"]],[[775,77,775,87,[1,[775,78,775,83,[[],"Error"]],[[775,84,775,86,[4,[]]]]]]]]]]]]]]]]]],[776,1,805,15,[[776,1,776,21,"ambiguousRecordError"],[[776,22,776,32,[8,[[776,24,776,30,"fields"]]]],[776,33,776,41,[11,"matching"]],[776,42,776,47,[11,"range"]]],[777,5,805,15,[16,[[[778,9,788,57,[0,[[0],[1,[778,9,778,46,[[778,9,778,22,"prettyGeneric"],[778,25,778,46,[6,[778,25,778,36,[1,[778,25,778,29,[[],"List"]],[[778,30,778,36,[1,[778,30,778,36,[[],"String"]],[]]]]]],[778,40,778,46,[1,[778,40,778,46,[[],"String"]],[]]]]]]]],[779,9,788,57,[[779,9,779,22,"prettyGeneric"],[[779,23,779,24,[11,"s"]]],[780,13,788,57,[17,[[780,18,780,19,[2,[],"s"]],[[[781,17,781,19,[10,[]]],[782,21,782,23,[5,""]]],[[784,17,784,22,[10,[[784,19,784,20,[11,"x"]]]]],[785,21,785,22,[2,[],"x"]]],[[787,17,787,24,[9,[787,17,787,18,[11,"x"]],[787,22,787,24,[11,"xs"]]]],[788,21,788,57,[1,"++",1,[788,21,788,22,[2,[],"x"]],[788,26,788,57,[1,"++",1,[788,26,788,30,[5," ("]],[788,34,788,57,[1,"++",1,[788,34,788,50,[0,[[788,34,788,47,[2,[],"prettyGeneric"]],[788,48,788,50,[2,[],"xs"]]]]],[788,54,788,57,[5,")"]]]]]]]]]]]]]]]]]]],[790,5,805,15,[17,[[790,10,790,16,[2,[],"fields"]],[[[791,9,791,20,[9,[791,9,791,10,[0]],[791,14,791,20,[9,[791,14,791,15,[0]],[791,19,791,20,[0]]]]]],[792,13,801,14,[9,[[792,15,800,22,[0,[[792,15,792,25,[2,["Rule"],"error"]],[793,17,799,18,[8,[[793,19,797,22,[[793,19,793,26,"details"],[794,21,797,22,[9,[[794,23,794,150,[5,"This record could be one of several possible record aliases, so whether or not its fields are sorted could not be determined!"]],[795,23,795,127,[5,"Try adding a type annotation, or remove reportAmbiguousRecordsWithoutFix from your rule configuration."]],[796,23,796,142,[1,"++",1,[796,23,796,76,[5,"The record matched the following possible aliases: "]],[796,80,796,142,[0,[[796,80,796,91,[2,["String"],"join"]],[796,92,796,96,[5,", "]],[796,97,796,142,[7,[796,98,796,141,[0,[[796,98,796,106,[2,["List"],"map"]],[796,107,796,120,[2,[],"prettyGeneric"]],[796,121,796,141,[7,[796,122,796,140,[0,[[796,122,796,131,[2,["List"],"sort"]],[796,132,796,140,[2,[],"matching"]]]]]]]]]]]]]]]]]]]]]],[798,19,799,17,[[798,19,798,26,"message"],[798,29,798,60,[5,"Ambiguous record encountered."]]]]]]],[800,17,800,22,[2,[],"range"]]]]]]]]],[[803,9,803,10,[0]],[805,13,805,15,[9,[]]]]]]]]]]]]]]]],[808,1,821,20,[0,[[1,[808,1,810,3,"{-| Convert a type annotation into a record definition (and whether or not the\nrecord is generic) if it is one.\n-}"]],[1,[811,1,811,72,[[811,1,811,14,"annotToFields"],[811,17,811,72,[6,[811,17,811,36,[1,[811,17,811,21,[[],"Node"]],[[811,22,811,36,[1,[811,22,811,36,[[],"TypeAnnotation"]],[]]]]]],[811,40,811,72,[1,[811,40,811,45,[[],"Maybe"]],[[811,46,811,72,[3,[[811,48,811,64,[1,[811,48,811,64,[[],"RecordDefinition"]],[]]],[811,66,811,70,[1,[811,66,811,70,[[],"Bool"]],[]]]]]]]]]]]]]],[812,1,821,20,[[812,1,812,14,"annotToFields"],[[812,15,812,20,[11,"annot"]]],[813,5,821,20,[17,[[813,10,813,26,[0,[[813,10,813,20,[2,["Node"],"value"]],[813,21,813,26,[2,[],"annot"]]]]],[[[814,9,814,37,[12,[["TypeAnnotation"],"Record"],[[814,31,814,37,[11,"fields"]]]]],[815,13,815,35,[0,[[815,13,815,17,[2,[],"Just"]],[815,18,815,35,[6,[[815,20,815,26,[2,[],"fields"]],[815,28,815,33,[2,[],"False"]]]]]]]]],[[817,9,817,31,[12,[[],"GenericRecord"],[[817,23,817,24,[0]],[817,25,817,31,[11,"fields"]]]]],[818,13,818,45,[0,[[818,13,818,17,[2,[],"Just"]],[818,18,818,45,[6,[[818,20,818,37,[0,[[818,20,818,30,[2,["Node"],"value"]],[818,31,818,37,[2,[],"fields"]]]]],[818,39,818,43,[2,[],"True"]]]]]]]]],[[820,9,820,10,[0]],[821,13,821,20,[2,[],"Nothing"]]]]]]]]]]]],[824,1,831,19,[0,[[1,[824,1,825,3,"{-| Assign a list of positional type vars.\n-}"]],[1,[826,1,826,71,[[826,1,826,25,"assignPositionalTypeVars"],[826,28,826,71,[6,[826,28,826,37,[1,[826,28,826,32,[[],"List"]],[[826,33,826,37,[1,[826,33,826,37,[[],"Type"]],[]]]]]],[826,41,826,71,[6,[826,41,826,63,[1,[826,41,826,63,[[],"TypeWithPositionalVars"]],[]]],[826,67,826,71,[1,[826,67,826,71,[[],"Type"]],[]]]]]]]]]],[827,1,831,19,[[827,1,827,25,"assignPositionalTypeVars"],[[827,26,827,28,[11,"ts"]],[827,29,827,30,[11,"t"]]],[828,5,831,19,[1,"|>",0,[828,5,830,92,[1,"|>",0,[828,5,829,25,[1,"|>",0,[828,5,828,82,[0,[[828,5,828,20,[2,["List"],"indexedMap"]],[828,21,828,79,[7,[828,22,828,78,[18,[[[828,23,828,24,[11,"i"]]],[828,28,828,78,[0,[[828,28,828,38,[2,["Tuple"],"pair"]],[828,39,828,78,[7,[828,40,828,77,[1,"++",1,[828,40,828,57,[5,"positional arg "]],[828,61,828,77,[0,[[828,61,828,75,[2,["String"],"fromInt"]],[828,76,828,77,[2,[],"i"]]]]]]]]]]]]]]]]],[828,80,828,82,[2,[],"ts"]]]]],[829,12,829,25,[2,["Dict"],"fromList"]]]],[830,12,830,92,[7,[830,13,830,91,[18,[[[830,14,830,18,[11,"vars"]]],[830,22,830,91,[0,[[830,22,830,36,[2,[],"assignTypeVars"]],[830,37,830,41,[2,[],"vars"]],[830,42,830,91,[7,[830,43,830,90,[1,"<|",1,[830,43,830,59,[2,[],"DereferencedType"]],[830,63,830,90,[0,[[830,63,830,88,[2,[],"getTypeWithPositionalVars"]],[830,89,830,90,[2,[],"t"]]]]]]]]]]]]]]]]]]],[831,12,831,19,[2,[],"getType"]]]]]]]]],[834,1,869,44,[0,[[1,[834,1,835,3,"{-| Assign type vars to a type.\n-}"]],[1,[836,1,836,74,[[836,1,836,15,"assignTypeVars"],[836,18,836,74,[6,[836,18,836,34,[1,[836,18,836,22,[[],"Dict"]],[[836,23,836,29,[1,[836,23,836,29,[[],"String"]],[]]],[836,30,836,34,[1,[836,30,836,34,[[],"Type"]],[]]]]]],[836,38,836,74,[6,[836,38,836,54,[1,[836,38,836,54,[[],"DereferencedType"]],[]]],[836,58,836,74,[1,[836,58,836,74,[[],"DereferencedType"]],[]]]]]]]]]],[837,1,869,44,[[837,1,837,15,"assignTypeVars"],[[837,16,837,24,[11,"typeVars"]],[837,25,837,30,[11,"type_"]]],[838,5,869,44,[16,[[[839,9,867,29,[0,[[0],[1,[839,9,839,26,[[839,9,839,11,"go"],[839,14,839,26,[6,[839,14,839,18,[1,[839,14,839,18,[[],"Type"]],[]]],[839,22,839,26,[1,[839,22,839,26,[[],"Type"]],[]]]]]]]],[840,9,867,29,[[840,9,840,11,"go"],[[840,12,840,13,[11,"t"]]],[841,13,867,29,[17,[[841,18,841,19,[2,[],"t"]],[[[842,17,842,42,[12,[[],"FunctionType"],[[842,30,842,42,[8,[[842,32,842,36,"from"],[842,38,842,40,"to"]]]]]]],[843,21,843,64,[0,[[843,21,843,33,[2,[],"FunctionType"]],[843,34,843,64,[8,[[843,36,843,50,[[843,36,843,40,"from"],[843,43,843,50,[0,[[843,43,843,45,[2,[],"go"]],[843,46,843,50,[2,[],"from"]]]]]]],[843,52,843,63,[[843,52,843,54,"to"],[843,57,843,62,[0,[[843,57,843,59,[2,[],"go"]],[843,60,843,62,[2,[],"to"]]]]]]]]]]]]]],[[845,17,845,29,[12,[[],"TupleType"],[[845,27,845,29,[11,"ts"]]]]],[846,21,846,48,[1,"<|",1,[846,21,846,30,[2,[],"TupleType"]],[846,34,846,48,[0,[[846,34,846,42,[2,["List"],"map"]],[846,43,846,45,[2,[],"go"]],[846,46,846,48,[2,[],"ts"]]]]]]]],[[848,17,848,28,[12,[[],"ListType"],[[848,26,848,28,[11,"t_"]]]]],[849,21,849,38,[1,"<|",1,[849,21,849,29,[2,[],"ListType"]],[849,33,849,38,[0,[[849,33,849,35,[2,[],"go"]],[849,36,849,38,[2,[],"t_"]]]]]]]],[[851,17,851,50,[12,[[],"NamedType"],[[851,27,851,47,[7,[[851,29,851,39,[11,"moduleName"]],[851,41,851,45,[11,"name"]]]]],[851,48,851,50,[11,"ts"]]]]],[852,21,853,58,[1,"|>",0,[852,21,852,35,[0,[[852,21,852,29,[2,["List"],"map"]],[852,30,852,32,[2,[],"go"]],[852,33,852,35,[2,[],"ts"]]]]],[853,28,853,58,[0,[[853,28,853,37,[2,[],"NamedType"]],[853,38,853,58,[6,[[853,40,853,50,[2,[],"moduleName"]],[853,52,853,56,[2,[],"name"]]]]]]]]]]],[[855,17,855,29,[12,[[],"RecordType"],[[855,28,855,29,[11,"r"]]]]],[856,21,860,26,[0,[[856,21,856,31,[2,[],"RecordType"]],[857,25,860,26,[21,[857,27,857,28,"r"],[[858,31,859,29,[[858,31,858,38,"generic"],[858,41,858,63,[0,[[858,41,858,50,[2,["Maybe"],"map"]],[858,51,858,53,[2,[],"go"]],[858,54,858,63,[19,[858,54,858,55,[2,[],"r"]],[858,56,858,63,"generic"]]]]]]]],[859,31,860,25,[[859,31,859,37,"fields"],[859,40,859,78,[0,[[859,40,859,48,[2,["List"],"map"]],[859,49,859,69,[7,[859,50,859,68,[0,[[859,50,859,65,[2,["Tuple"],"mapSecond"]],[859,66,859,68,[2,[],"go"]]]]]]],[859,70,859,78,[19,[859,70,859,71,[2,[],"r"]],[859,72,859,78,"fields"]]]]]]]]]]]]]]],[[862,17,862,30,[12,[[],"TypeVar"],[[862,25,862,26,[0]],[862,27,862,30,[11,"var"]]]]],[863,21,864,47,[1,"|>",0,[863,21,863,42,[0,[[863,21,863,29,[2,["Dict"],"get"]],[863,30,863,33,[2,[],"var"]],[863,34,863,42,[2,[],"typeVars"]]]]],[864,28,864,47,[0,[[864,28,864,45,[2,["Maybe"],"withDefault"]],[864,46,864,47,[2,[],"t"]]]]]]]],[[866,17,866,25,[12,[[],"UnitType"],[]]],[867,21,867,29,[2,[],"UnitType"]]]]]]]]]]]]],[869,5,869,44,[1,"<|",1,[869,5,869,21,[2,[],"DereferencedType"]],[869,25,869,44,[1,"<|",1,[869,25,869,27,[2,[],"go"]],[869,31,869,44,[0,[[869,31,869,38,[2,[],"getType"]],[869,39,869,44,[2,[],"type_"]]]]]]]]]]]]]]]]],[872,1,895,61,[0,[[1,[872,1,873,3,"{-| Get (a best guess) at the bindings from a let declaration.\n-}"]],[1,[874,1,874,85,[[874,1,874,27,"bindingsFromLetDeclaration"],[874,30,874,85,[6,[874,30,874,42,[1,[874,30,874,42,[[],"LocalContext"]],[]]],[874,46,874,85,[6,[874,46,874,60,[1,[874,46,874,60,[[],"LetDeclaration"]],[]]],[874,64,874,85,[1,[874,64,874,68,[[],"List"]],[[874,69,874,85,[3,[[874,71,874,77,[1,[874,71,874,77,[[],"String"]],[]]],[874,79,874,83,[1,[874,79,874,83,[[],"Type"]],[]]]]]]]]]]]]]]]],[875,1,895,61,[[875,1,875,27,"bindingsFromLetDeclaration"],[[875,28,875,33,[11,"local"]],[875,34,875,35,[11,"d"]]],[876,5,895,61,[17,[[876,10,876,11,[2,[],"d"]],[[[877,9,877,22,[12,[[],"LetFunction"],[[877,21,877,22,[11,"f"]]]]],[878,13,890,40,[1,"|>",0,[878,13,889,44,[1,"|>",0,[878,13,888,22,[1,"|>",0,[878,13,879,55,[1,"|>",0,[878,13,878,47,[0,[[878,13,878,31,[2,[],"getFunctionBinding"]],[878,32,878,45,[19,[878,32,878,37,[2,[],"local"]],[878,38,878,45,"context"]]],[878,46,878,47,[2,[],"f"]]]]],[879,20,879,55,[0,[[879,20,879,29,[2,["Maybe"],"map"]],[879,30,879,55,[7,[879,31,879,54,[0,[[879,31,879,46,[2,["Tuple"],"mapSecond"]],[879,47,879,54,[2,[],"getType"]]]]]]]]]]]],[880,20,888,22,[0,[[880,20,880,37,[2,["MaybeX"],"orElseLazy"]],[881,21,888,22,[7,[881,22,887,33,[18,[[[881,23,881,25,[1]]],[882,25,887,33,[1,"|>",0,[882,25,882,49,[0,[[882,25,882,35,[2,["Node"],"value"]],[882,36,882,49,[19,[882,36,882,37,[2,[],"f"]],[882,38,882,49,"declaration"]]]]]],[883,32,887,33,[7,[883,33,886,84,[18,[[[883,34,883,54,[8,[[883,36,883,40,"name"],[883,42,883,52,"expression"]]]]],[884,37,886,84,[1,"|>",0,[884,37,885,61,[1,"|>",0,[884,37,884,67,[0,[[884,37,884,50,[2,[],"inferExprType"]],[884,51,884,56,[2,[],"local"]],[884,57,884,67,[2,[],"expression"]]]]],[885,44,885,61,[0,[[885,44,885,53,[2,["Maybe"],"map"]],[885,54,885,61,[2,[],"getType"]]]]]]],[886,44,886,84,[0,[[886,44,886,53,[2,["Maybe"],"map"]],[886,54,886,84,[7,[886,55,886,83,[0,[[886,55,886,65,[2,["Tuple"],"pair"]],[886,66,886,83,[7,[886,67,886,82,[0,[[886,67,886,77,[2,["Node"],"value"]],[886,78,886,82,[2,[],"name"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[889,20,889,44,[0,[[889,20,889,29,[2,["Maybe"],"map"]],[889,30,889,44,[2,["List"],"singleton"]]]]]]],[890,20,890,40,[0,[[890,20,890,37,[2,["Maybe"],"withDefault"]],[890,38,890,40,[9,[]]]]]]]]],[[892,9,892,29,[12,[[],"LetDestructuring"],[[892,26,892,27,[11,"p"]],[892,28,892,29,[11,"e"]]]]],[894,13,895,61,[1,"|>",0,[894,13,894,34,[0,[[894,13,894,26,[2,[],"inferExprType"]],[894,27,894,32,[2,[],"local"]],[894,33,894,34,[2,[],"e"]]]]],[895,20,895,61,[0,[[895,20,895,45,[2,[],"bindingsInPatternWithType"]],[895,46,895,59,[19,[895,46,895,51,[2,[],"local"]],[895,52,895,59,"context"]]],[895,60,895,61,[2,[],"p"]]]]]]]]]]]]]]]]],[898,1,971,15,[0,[[1,[898,1,899,3,"{-| Get all new bindings and their types from a pattern.\n-}"]],[1,[900,1,900,109,[[900,1,900,26,"bindingsInPatternWithType"],[900,29,900,109,[6,[900,29,900,42,[1,[900,29,900,42,[[],"ModuleContext"]],[]]],[900,46,900,109,[6,[900,46,900,58,[1,[900,46,900,50,[[],"Node"]],[[900,51,900,58,[1,[900,51,900,58,[[],"Pattern"]],[]]]]]],[900,62,900,109,[6,[900,62,900,84,[1,[900,62,900,67,[[],"Maybe"]],[[900,68,900,84,[1,[900,68,900,84,[[],"DereferencedType"]],[]]]]]],[900,88,900,109,[1,[900,88,900,92,[[],"List"]],[[900,93,900,109,[3,[[900,95,900,101,[1,[900,95,900,101,[[],"String"]],[]]],[900,103,900,107,[1,[900,103,900,107,[[],"Type"]],[]]]]]]]]]]]]]]]]]],[901,1,971,15,[[901,1,901,26,"bindingsInPatternWithType"],[[901,27,901,34,[11,"context"]],[901,35,901,42,[11,"pattern"]],[901,43,901,48,[11,"type_"]]],[902,5,971,15,[16,[[[903,9,905,46,[0,[[0],[1,[903,9,903,77,[[903,9,903,11,"go"],[903,14,903,77,[6,[903,14,903,26,[1,[903,14,903,18,[[],"Node"]],[[903,19,903,26,[1,[903,19,903,26,[[],"Pattern"]],[]]]]]],[903,30,903,77,[6,[903,30,903,52,[1,[903,30,903,35,[[],"Maybe"]],[[903,36,903,52,[1,[903,36,903,52,[[],"DereferencedType"]],[]]]]]],[903,56,903,77,[1,[903,56,903,60,[[],"List"]],[[903,61,903,77,[3,[[903,63,903,69,[1,[903,63,903,69,[[],"String"]],[]]],[903,71,903,75,[1,[903,71,903,75,[[],"Type"]],[]]]]]]]]]]]]]]]],[904,9,905,46,[[904,9,904,11,"go"],[],[905,13,905,46,[0,[[905,13,905,38,[2,[],"bindingsInPatternWithType"]],[905,39,905,46,[2,[],"context"]]]]]]]]]],[907,9,911,40,[0,[[0],[1,[907,9,907,77,[[907,9,907,17,"makeType"],[907,20,907,77,[6,[907,20,907,26,[1,[907,20,907,26,[[],"String"]],[]]],[907,30,907,77,[6,[907,30,907,52,[1,[907,30,907,35,[[],"Maybe"]],[[907,36,907,52,[1,[907,36,907,52,[[],"DereferencedType"]],[]]]]]],[907,56,907,77,[1,[907,56,907,60,[[],"List"]],[[907,61,907,77,[3,[[907,63,907,69,[1,[907,63,907,69,[[],"String"]],[]]],[907,71,907,75,[1,[907,71,907,75,[[],"Type"]],[]]]]]]]]]]]]]]]],[908,9,911,40,[[908,9,908,17,"makeType"],[[908,18,908,19,[11,"n"]],[908,20,908,21,[11,"t"]]],[909,13,911,40,[1,"|>",0,[909,13,910,62,[1,"|>",0,[909,13,909,32,[0,[[909,13,909,22,[2,["Maybe"],"map"]],[909,23,909,30,[2,[],"getType"]],[909,31,909,32,[2,[],"t"]]]]],[910,20,910,62,[0,[[910,20,910,29,[2,["Maybe"],"map"]],[910,30,910,62,[7,[910,31,910,61,[1,"<<",0,[910,31,910,45,[2,["List"],"singleton"]],[910,49,910,61,[0,[[910,49,910,59,[2,["Tuple"],"pair"]],[910,60,910,61,[2,[],"n"]]]]]]]]]]]]]],[911,20,911,40,[0,[[911,20,911,37,[2,["Maybe"],"withDefault"]],[911,38,911,40,[9,[]]]]]]]]]]]]]],[913,5,971,15,[17,[[913,10,913,28,[0,[[913,10,913,20,[2,["Node"],"value"]],[913,21,913,28,[2,[],"pattern"]]]]],[[[914,9,914,23,[12,[[],"ListPattern"],[[914,21,914,23,[11,"ps"]]]]],[915,13,916,60,[1,"|>",0,[915,13,915,30,[0,[[915,13,915,24,[2,[],"getListType"]],[915,25,915,30,[2,[],"type_"]]]]],[916,20,916,60,[7,[916,21,916,59,[18,[[[916,22,916,23,[11,"t"]]],[916,27,916,59,[0,[[916,27,916,41,[2,["List"],"concatMap"]],[916,42,916,56,[7,[916,43,916,55,[18,[[[916,44,916,45,[11,"p"]]],[916,49,916,55,[0,[[916,49,916,51,[2,[],"go"]],[916,52,916,53,[2,[],"p"]],[916,54,916,55,[2,[],"t"]]]]]]]]]],[916,57,916,59,[2,[],"ps"]]]]]]]]]]]]],[[918,9,918,24,[12,[[],"TuplePattern"],[[918,22,918,24,[11,"ps"]]]]],[919,13,921,31,[1,"|>",0,[919,13,920,35,[1,"|>",0,[919,13,919,35,[0,[[919,13,919,26,[2,[],"getTupleTypes"]],[919,27,919,29,[2,[],"ps"]],[919,30,919,35,[2,[],"type_"]]]]],[920,20,920,35,[0,[[920,20,920,29,[2,["List"],"map2"]],[920,30,920,32,[2,[],"go"]],[920,33,920,35,[2,[],"ps"]]]]]]],[921,20,921,31,[2,["List"],"concat"]]]]],[[923,9,923,25,[12,[[],"RecordPattern"],[[923,23,923,25,[11,"ps"]]]]],[924,13,933,31,[1,"|>",0,[924,13,932,21,[1,"|>",0,[924,13,924,38,[0,[[924,13,924,32,[2,[],"getRecordFieldTypes"]],[924,33,924,38,[2,[],"type_"]]]]],[925,20,932,21,[7,[925,21,931,31,[18,[[[925,22,925,24,[11,"ts"]]],[926,25,931,31,[0,[[926,25,926,33,[2,["List"],"map"]],[927,29,930,30,[7,[927,30,929,63,[18,[[[927,31,927,32,[11,"p"]]],[928,33,929,63,[1,"|>",0,[928,33,928,59,[0,[[928,33,928,41,[2,["Dict"],"get"]],[928,42,928,56,[7,[928,43,928,55,[0,[[928,43,928,53,[2,["Node"],"value"]],[928,54,928,55,[2,[],"p"]]]]]]],[928,57,928,59,[2,[],"ts"]]]]],[929,40,929,63,[0,[[929,40,929,48,[2,[],"makeType"]],[929,49,929,63,[7,[929,50,929,62,[0,[[929,50,929,60,[2,["Node"],"value"]],[929,61,929,62,[2,[],"p"]]]]]]]]]]]]]]]]],[931,29,931,31,[2,[],"ps"]]]]]]]]]]]],[933,20,933,31,[2,["List"],"concat"]]]]],[[935,9,935,33,[12,[[],"NamedPattern"],[[935,22,935,30,[8,[[935,24,935,28,"name"]]]],[935,31,935,33,[11,"ps"]]]]],[939,13,943,90,[1,"|>",0,[939,13,941,41,[1,"|>",0,[939,13,940,68,[1,"|>",0,[939,13,939,99,[0,[[939,13,939,29,[2,[],"findFunctionType"]],[939,30,939,80,[8,[[939,32,939,49,[[939,32,939,39,"context"],[939,42,939,49,[2,[],"context"]]]],[939,51,939,79,[[939,51,939,65,"localFunctions"],[939,68,939,78,[2,["Dict"],"empty"]]]]]]],[939,81,939,86,[2,[],"type_"]],[939,87,939,94,[2,[],"pattern"]],[939,95,939,99,[2,[],"name"]]]]],[940,20,940,68,[0,[[940,20,940,29,[2,["Maybe"],"map"]],[940,30,940,68,[7,[940,31,940,67,[0,[[940,31,940,40,[2,["List"],"map2"]],[940,41,940,64,[7,[940,42,940,63,[18,[[[940,43,940,44,[11,"p"]],[940,45,940,46,[11,"t"]]],[940,50,940,63,[0,[[940,50,940,52,[2,[],"go"]],[940,53,940,54,[2,[],"p"]],[940,55,940,63,[7,[940,56,940,62,[0,[[940,56,940,60,[2,[],"Just"]],[940,61,940,62,[2,[],"t"]]]]]]]]]]]]]]],[940,65,940,67,[2,[],"ps"]]]]]]]]]]]],[941,20,941,41,[0,[[941,20,941,29,[2,["Maybe"],"map"]],[941,30,941,41,[2,["List"],"concat"]]]]]]],[943,20,943,90,[0,[[943,20,943,42,[2,["MaybeX"],"withDefaultLazy"]],[943,43,943,90,[7,[943,44,943,89,[18,[[[943,45,943,47,[1]]],[943,51,943,89,[0,[[943,51,943,65,[2,["List"],"concatMap"]],[943,66,943,86,[7,[943,67,943,85,[18,[[[943,68,943,69,[11,"p"]]],[943,73,943,85,[0,[[943,73,943,75,[2,[],"go"]],[943,76,943,77,[2,[],"p"]],[943,78,943,85,[2,[],"Nothing"]]]]]]]]]],[943,87,943,89,[2,[],"ps"]]]]]]]]]]]]]]]],[[945,9,945,27,[12,[[],"UnConsPattern"],[[945,23,945,24,[11,"p"]],[945,25,945,27,[11,"ps"]]]]],[947,13,948,49,[1,"|>",0,[947,13,947,30,[0,[[947,13,947,24,[2,[],"getListType"]],[947,25,947,30,[2,[],"type_"]]]]],[948,20,948,49,[7,[948,21,948,48,[18,[[[948,22,948,23,[11,"t"]]],[948,27,948,48,[1,"++",1,[948,27,948,33,[0,[[948,27,948,29,[2,[],"go"]],[948,30,948,31,[2,[],"p"]],[948,32,948,33,[2,[],"t"]]]]],[948,37,948,48,[0,[[948,37,948,39,[2,[],"go"]],[948,40,948,42,[2,[],"ps"]],[948,43,948,48,[2,[],"type_"]]]]]]]]]]]]]]],[[950,9,950,24,[12,[[],"VarPattern"],[[950,20,950,24,[11,"name"]]]]],[952,13,952,32,[0,[[952,13,952,21,[2,[],"makeType"]],[952,22,952,26,[2,[],"name"]],[952,27,952,32,[2,[],"type_"]]]]]],[[954,9,954,25,[12,[[],"AsPattern"],[[954,19,954,20,[11,"p"]],[954,21,954,25,[11,"name"]]]]],[956,13,956,59,[1,"++",1,[956,13,956,45,[0,[[956,13,956,21,[2,[],"makeType"]],[956,22,956,39,[7,[956,23,956,38,[0,[[956,23,956,33,[2,["Node"],"value"]],[956,34,956,38,[2,[],"name"]]]]]]],[956,40,956,45,[2,[],"type_"]]]]],[956,49,956,59,[0,[[956,49,956,51,[2,[],"go"]],[956,52,956,53,[2,[],"p"]],[956,54,956,59,[2,[],"type_"]]]]]]]],[[958,9,958,31,[12,[[],"ParenthesizedPattern"],[[958,30,958,31,[11,"p"]]]]],[960,13,960,23,[0,[[960,13,960,15,[2,[],"go"]],[960,16,960,17,[2,[],"p"]],[960,18,960,23,[2,[],"type_"]]]]]],[[962,9,962,10,[0]],[971,13,971,15,[9,[]]]]]]]]]]]]]]]],[974,1,1063,58,[0,[[1,[974,1,976,3,"{-| Check a chain of expressions being applied to the first one, as we can glean\nadditional info from any stored function types we have.\n-}"]],[1,[977,1,977,122,[[977,1,977,22,"checkApplicationChain"],[977,25,977,122,[6,[977,25,977,35,[1,[977,25,977,35,[[],"RuleConfig"]],[]]],[977,39,977,122,[6,[977,39,977,51,[1,[977,39,977,51,[[],"LocalContext"]],[]]],[977,55,977,122,[6,[977,55,977,77,[1,[977,55,977,60,[[],"Maybe"]],[[977,61,977,77,[1,[977,61,977,77,[[],"DereferencedType"]],[]]]]]],[977,81,977,122,[6,[977,81,977,103,[1,[977,81,977,85,[[],"List"]],[[977,86,977,103,[1,[977,87,977,91,[[],"Node"]],[[977,92,977,102,[1,[977,92,977,102,[[],"Expression"]],[]]]]]]]]],[977,107,977,122,[1,[977,107,977,111,[[],"List"]],[[977,112,977,122,[1,[977,113,977,118,[[],"Error"]],[[977,119,977,121,[4,[]]]]]]]]]]]]]]]]]]]],[978,1,1063,58,[[978,1,978,22,"checkApplicationChain"],[[978,23,978,29,[11,"config"]],[978,30,978,35,[11,"local"]],[978,36,978,43,[11,"hasType"]],[978,44,978,46,[11,"es"]]],[979,5,1063,58,[16,[[[980,9,982,41,[0,[[0],[1,[980,9,980,81,[[980,9,980,18,"checkExpr"],[980,21,980,81,[6,[980,21,980,43,[1,[980,21,980,26,[[],"Maybe"]],[[980,27,980,43,[1,[980,27,980,43,[[],"DereferencedType"]],[]]]]]],[980,47,980,81,[6,[980,47,980,62,[1,[980,47,980,51,[[],"Node"]],[[980,52,980,62,[1,[980,52,980,62,[[],"Expression"]],[]]]]]],[980,66,980,81,[1,[980,66,980,70,[[],"List"]],[[980,71,980,81,[1,[980,72,980,77,[[],"Error"]],[[980,78,980,80,[4,[]]]]]]]]]]]]]]]],[981,9,982,41,[[981,9,981,18,"checkExpr"],[],[982,13,982,41,[0,[[982,13,982,28,[2,[],"checkExpression"]],[982,29,982,35,[2,[],"config"]],[982,36,982,41,[2,[],"local"]]]]]]]]]]],[984,5,1063,58,[17,[[984,10,984,12,[2,[],"es"]],[[[985,9,985,11,[10,[]]],[986,13,986,15,[9,[]]]],[[988,9,988,14,[10,[[988,11,988,12,[11,"e"]]]]],[989,13,989,32,[0,[[989,13,989,22,[2,[],"checkExpr"]],[989,23,989,30,[2,[],"hasType"]],[989,31,989,32,[2,[],"e"]]]]]],[[991,9,991,21,[9,[991,9,991,13,[11,"func"]],[991,17,991,21,[11,"args"]]]],[992,13,1063,58,[17,[[992,18,992,33,[0,[[992,18,992,28,[2,["Node"],"value"]],[992,29,992,33,[2,[],"func"]]]]],[[[993,17,993,39,[12,[[],"FunctionOrValue"],[[993,33,993,34,[0]],[993,35,993,39,[11,"name"]]]]],[994,21,1009,97,[1,"|>",0,[994,21,1007,49,[1,"|>",0,[994,21,1006,85,[1,"|>",0,[994,21,1005,30,[1,"|>",0,[994,21,995,75,[1,"|>",0,[994,21,994,61,[0,[[994,21,994,37,[2,[],"findFunctionType"]],[994,38,994,43,[2,[],"local"]],[994,44,994,51,[2,[],"hasType"]],[994,52,994,56,[2,[],"func"]],[994,57,994,61,[2,[],"name"]]]]],[995,28,995,75,[0,[[995,28,995,41,[2,["Maybe"],"andThen"]],[995,42,995,75,[7,[995,43,995,74,[0,[[995,43,995,69,[2,[],"partiallyApplyArgsAndTypes"]],[995,70,995,74,[2,[],"args"]]]]]]]]]]]],[996,28,1005,30,[0,[[996,28,996,37,[2,["Maybe"],"map"]],[997,29,1005,30,[7,[997,30,1004,66,[18,[[[997,31,997,51,[7,[[997,33,997,41,[11,"argTypes"]],[997,43,997,49,[11,"return"]]]]]],[999,33,1004,66,[1,"|>",0,[999,33,1003,108,[1,"|>",0,[999,33,1002,78,[1,"|>",0,[999,33,1001,87,[1,"|>",0,[999,33,1000,61,[1,"|>",0,[999,33,999,81,[0,[[999,33,999,42,[2,["Maybe"],"map"]],[999,43,999,73,[7,[999,44,999,72,[0,[[999,44,999,54,[2,[],"typesMatch"]],[999,55,999,65,[2,["Dict"],"empty"]],[999,66,999,72,[2,[],"return"]]]]]]],[999,74,999,81,[2,[],"hasType"]]]]],[1000,40,1000,61,[0,[[1000,40,1000,49,[2,["Maybe"],"map"]],[1000,50,1000,61,[2,["Tuple"],"first"]]]]]]],[1001,40,1001,87,[0,[[1001,40,1001,49,[2,["Maybe"],"map"]],[1001,50,1001,87,[7,[1001,51,1001,86,[0,[[1001,51,1001,62,[2,["Dict"],"filter"]],[1001,63,1001,86,[7,[1001,64,1001,85,[18,[[[1001,65,1001,73,[7,[[1001,67,1001,68,[11,"i"]],[1001,70,1001,71,[0]]]]],[1001,74,1001,75,[0]]],[1001,79,1001,85,[1,"==",2,[1001,79,1001,80,[2,[],"i"]],[1001,84,1001,85,[3,1]]]]]]]]]]]]]]]]]]],[1002,40,1002,78,[0,[[1002,40,1002,49,[2,["Maybe"],"map"]],[1002,50,1002,78,[7,[1002,51,1002,77,[0,[[1002,51,1002,64,[2,["DictX"],"mapKeys"]],[1002,65,1002,77,[2,["Tuple"],"second"]]]]]]]]]]]],[1003,40,1003,108,[0,[[1003,40,1003,49,[2,["Maybe"],"map"]],[1003,50,1003,108,[7,[1003,51,1003,107,[18,[[[1003,52,1003,60,[11,"typeVars"]]],[1003,64,1003,107,[0,[[1003,64,1003,72,[2,["List"],"map"]],[1003,73,1003,98,[7,[1003,74,1003,97,[0,[[1003,74,1003,88,[2,[],"assignTypeVars"]],[1003,89,1003,97,[2,[],"typeVars"]]]]]]],[1003,99,1003,107,[2,[],"argTypes"]]]]]]]]]]]]]]],[1004,40,1004,66,[0,[[1004,40,1004,57,[2,["Maybe"],"withDefault"]],[1004,58,1004,66,[2,[],"argTypes"]]]]]]]]]]]]]]]]],[1006,28,1006,85,[0,[[1006,28,1006,37,[2,["Maybe"],"map"]],[1006,38,1006,85,[7,[1006,39,1006,84,[0,[[1006,39,1006,48,[2,["List"],"map2"]],[1006,49,1006,79,[7,[1006,50,1006,78,[18,[[[1006,51,1006,52,[11,"e"]],[1006,53,1006,54,[11,"t"]]],[1006,58,1006,78,[0,[[1006,58,1006,67,[2,[],"checkExpr"]],[1006,68,1006,76,[7,[1006,69,1006,75,[0,[[1006,69,1006,73,[2,[],"Just"]],[1006,74,1006,75,[2,[],"t"]]]]]]],[1006,77,1006,78,[2,[],"e"]]]]]]]]]],[1006,80,1006,84,[2,[],"args"]]]]]]]]]]]],[1007,28,1007,49,[0,[[1007,28,1007,37,[2,["Maybe"],"map"]],[1007,38,1007,49,[2,["List"],"concat"]]]]]]],[1009,28,1009,97,[0,[[1009,28,1009,50,[2,["MaybeX"],"withDefaultLazy"]],[1009,51,1009,97,[7,[1009,52,1009,96,[18,[[[1009,53,1009,55,[1]]],[1009,59,1009,96,[0,[[1009,59,1009,73,[2,["List"],"concatMap"]],[1009,74,1009,93,[7,[1009,75,1009,92,[0,[[1009,75,1009,84,[2,[],"checkExpr"]],[1009,85,1009,92,[2,[],"Nothing"]]]]]]],[1009,94,1009,96,[2,[],"es"]]]]]]]]]]]]]]]],[[1011,17,1011,34,[12,[[],"PrefixOperator"],[[1011,32,1011,34,[11,"op"]]]]],[1012,21,1027,97,[1,"|>",0,[1012,21,1025,49,[1,"|>",0,[1012,21,1024,85,[1,"|>",0,[1012,21,1023,30,[1,"|>",0,[1012,21,1013,75,[1,"|>",0,[1012,21,1012,54,[0,[[1012,21,1012,37,[2,[],"findOperatorType"]],[1012,38,1012,51,[19,[1012,38,1012,43,[2,[],"local"]],[1012,44,1012,51,"context"]]],[1012,52,1012,54,[2,[],"op"]]]]],[1013,28,1013,75,[0,[[1013,28,1013,41,[2,["Maybe"],"andThen"]],[1013,42,1013,75,[7,[1013,43,1013,74,[0,[[1013,43,1013,69,[2,[],"partiallyApplyArgsAndTypes"]],[1013,70,1013,74,[2,[],"args"]]]]]]]]]]]],[1014,28,1023,30,[0,[[1014,28,1014,37,[2,["Maybe"],"map"]],[1015,29,1023,30,[7,[1015,30,1022,66,[18,[[[1015,31,1015,51,[7,[[1015,33,1015,41,[11,"argTypes"]],[1015,43,1015,49,[11,"return"]]]]]],[1017,33,1022,66,[1,"|>",0,[1017,33,1021,108,[1,"|>",0,[1017,33,1020,78,[1,"|>",0,[1017,33,1019,87,[1,"|>",0,[1017,33,1018,61,[1,"|>",0,[1017,33,1017,81,[0,[[1017,33,1017,42,[2,["Maybe"],"map"]],[1017,43,1017,73,[7,[1017,44,1017,72,[0,[[1017,44,1017,54,[2,[],"typesMatch"]],[1017,55,1017,65,[2,["Dict"],"empty"]],[1017,66,1017,72,[2,[],"return"]]]]]]],[1017,74,1017,81,[2,[],"hasType"]]]]],[1018,40,1018,61,[0,[[1018,40,1018,49,[2,["Maybe"],"map"]],[1018,50,1018,61,[2,["Tuple"],"first"]]]]]]],[1019,40,1019,87,[0,[[1019,40,1019,49,[2,["Maybe"],"map"]],[1019,50,1019,87,[7,[1019,51,1019,86,[0,[[1019,51,1019,62,[2,["Dict"],"filter"]],[1019,63,1019,86,[7,[1019,64,1019,85,[18,[[[1019,65,1019,73,[7,[[1019,67,1019,68,[11,"i"]],[1019,70,1019,71,[0]]]]],[1019,74,1019,75,[0]]],[1019,79,1019,85,[1,"==",2,[1019,79,1019,80,[2,[],"i"]],[1019,84,1019,85,[3,1]]]]]]]]]]]]]]]]]]],[1020,40,1020,78,[0,[[1020,40,1020,49,[2,["Maybe"],"map"]],[1020,50,1020,78,[7,[1020,51,1020,77,[0,[[1020,51,1020,64,[2,["DictX"],"mapKeys"]],[1020,65,1020,77,[2,["Tuple"],"second"]]]]]]]]]]]],[1021,40,1021,108,[0,[[1021,40,1021,49,[2,["Maybe"],"map"]],[1021,50,1021,108,[7,[1021,51,1021,107,[18,[[[1021,52,1021,60,[11,"typeVars"]]],[1021,64,1021,107,[0,[[1021,64,1021,72,[2,["List"],"map"]],[1021,73,1021,98,[7,[1021,74,1021,97,[0,[[1021,74,1021,88,[2,[],"assignTypeVars"]],[1021,89,1021,97,[2,[],"typeVars"]]]]]]],[1021,99,1021,107,[2,[],"argTypes"]]]]]]]]]]]]]]],[1022,40,1022,66,[0,[[1022,40,1022,57,[2,["Maybe"],"withDefault"]],[1022,58,1022,66,[2,[],"argTypes"]]]]]]]]]]]]]]]]],[1024,28,1024,85,[0,[[1024,28,1024,37,[2,["Maybe"],"map"]],[1024,38,1024,85,[7,[1024,39,1024,84,[0,[[1024,39,1024,48,[2,["List"],"map2"]],[1024,49,1024,79,[7,[1024,50,1024,78,[18,[[[1024,51,1024,52,[11,"e"]],[1024,53,1024,54,[11,"t"]]],[1024,58,1024,78,[0,[[1024,58,1024,67,[2,[],"checkExpr"]],[1024,68,1024,76,[7,[1024,69,1024,75,[0,[[1024,69,1024,73,[2,[],"Just"]],[1024,74,1024,75,[2,[],"t"]]]]]]],[1024,77,1024,78,[2,[],"e"]]]]]]]]]],[1024,80,1024,84,[2,[],"args"]]]]]]]]]]]],[1025,28,1025,49,[0,[[1025,28,1025,37,[2,["Maybe"],"map"]],[1025,38,1025,49,[2,["List"],"concat"]]]]]]],[1027,28,1027,97,[0,[[1027,28,1027,50,[2,["MaybeX"],"withDefaultLazy"]],[1027,51,1027,97,[7,[1027,52,1027,96,[18,[[[1027,53,1027,55,[1]]],[1027,59,1027,96,[0,[[1027,59,1027,73,[2,["List"],"concatMap"]],[1027,74,1027,93,[7,[1027,75,1027,92,[0,[[1027,75,1027,84,[2,[],"checkExpr"]],[1027,85,1027,92,[2,[],"Nothing"]]]]]]],[1027,94,1027,96,[2,[],"es"]]]]]]]]]]]]]]]],[[1029,17,1029,46,[12,[[],"ParenthesizedExpression"],[[1029,41,1029,46,[11,"func_"]]]]],[1031,21,1031,79,[0,[[1031,21,1031,42,[2,[],"checkApplicationChain"]],[1031,43,1031,49,[2,[],"config"]],[1031,50,1031,55,[2,[],"local"]],[1031,56,1031,63,[2,[],"hasType"]],[1031,64,1031,79,[7,[1031,65,1031,78,[1,"::",1,[1031,65,1031,70,[2,[],"func_"]],[1031,74,1031,78,[2,[],"args"]]]]]]]]]],[[1033,17,1033,48,[12,[[],"RecordAccessFunction"],[[1033,38,1033,48,[11,"accessFunc"]]]]],[1034,21,1036,57,[1,"|>",0,[1034,21,1034,72,[0,[[1034,21,1034,30,[2,[],"checkExpr"]],[1034,31,1034,72,[7,[1034,32,1034,71,[0,[[1034,32,1034,52,[2,[],"makeRecordAccessType"]],[1034,53,1034,60,[2,[],"hasType"]],[1034,61,1034,71,[2,[],"accessFunc"]]]]]]]]]],[1036,28,1036,57,[7,[1036,29,1036,56,[18,[[[1036,30,1036,31,[11,"f"]]],[1036,35,1036,56,[0,[[1036,35,1036,49,[2,["List"],"concatMap"]],[1036,50,1036,51,[2,[],"f"]],[1036,52,1036,56,[2,[],"args"]]]]]]]]]]]]],[[1038,17,1038,18,[0]],[1063,21,1063,58,[0,[[1063,21,1063,35,[2,["List"],"concatMap"]],[1063,36,1063,55,[7,[1063,37,1063,54,[0,[[1063,37,1063,46,[2,[],"checkExpr"]],[1063,47,1063,54,[2,[],"Nothing"]]]]]]],[1063,56,1063,58,[2,[],"es"]]]]]]]]]]]]]]]]]]]]]]],[1066,1,1214,15,[0,[[1,[1066,1,1067,3,"{-| Descend into subexpressions, keeping as much type information as possible.\n-}"]],[1,[1068,1,1068,109,[[1068,1,1068,16,"checkExpression"],[1068,19,1068,109,[6,[1068,19,1068,29,[1,[1068,19,1068,29,[[],"RuleConfig"]],[]]],[1068,33,1068,109,[6,[1068,33,1068,45,[1,[1068,33,1068,45,[[],"LocalContext"]],[]]],[1068,49,1068,109,[6,[1068,49,1068,71,[1,[1068,49,1068,54,[[],"Maybe"]],[[1068,55,1068,71,[1,[1068,55,1068,71,[[],"DereferencedType"]],[]]]]]],[1068,75,1068,109,[6,[1068,75,1068,90,[1,[1068,75,1068,79,[[],"Node"]],[[1068,80,1068,90,[1,[1068,80,1068,90,[[],"Expression"]],[]]]]]],[1068,94,1068,109,[1,[1068,94,1068,98,[[],"List"]],[[1068,99,1068,109,[1,[1068,100,1068,105,[[],"Error"]],[[1068,106,1068,108,[4,[]]]]]]]]]]]]]]]]]]]],[1069,1,1214,15,[[1069,1,1069,16,"checkExpression"],[[1069,17,1069,23,[11,"config"]],[1069,24,1069,29,[11,"local"]],[1069,30,1069,37,[11,"hasType"]],[1069,38,1069,42,[11,"node"]]],[1070,5,1214,15,[16,[[[1071,9,1086,27,[0,[[0],[1,[1071,9,1071,152,[[1071,9,1071,20,"checkFields"],[1071,23,1071,152,[6,[1071,23,1071,51,[1,[1071,23,1071,27,[[],"Dict"]],[[1071,28,1071,34,[1,[1071,28,1071,34,[[],"String"]],[]]],[1071,35,1071,51,[1,[1071,35,1071,51,[[],"DereferencedType"]],[]]]]]],[1071,55,1071,152,[6,[1071,55,1071,92,[1,[1071,55,1071,59,[[],"List"]],[[1071,60,1071,92,[3,[[1071,62,1071,73,[1,[1071,62,1071,66,[[],"Node"]],[[1071,67,1071,73,[1,[1071,67,1071,73,[[],"String"]],[]]]]]],[1071,75,1071,90,[1,[1071,75,1071,79,[[],"Node"]],[[1071,80,1071,90,[1,[1071,80,1071,90,[[],"Expression"]],[]]]]]]]]]]]],[1071,96,1071,152,[6,[1071,96,1071,133,[3,[[1071,98,1071,113,[1,[1071,98,1071,102,[[],"List"]],[[1071,103,1071,113,[1,[1071,104,1071,109,[[],"Error"]],[[1071,110,1071,112,[4,[]]]]]]]]],[1071,115,1071,131,[1,[1071,115,1071,119,[[],"Dict"]],[[1071,120,1071,126,[1,[1071,120,1071,126,[[],"String"]],[]]],[1071,127,1071,131,[1,[1071,127,1071,131,[[],"Type"]],[]]]]]]]]],[1071,137,1071,152,[1,[1071,137,1071,141,[[],"List"]],[[1071,142,1071,152,[1,[1071,143,1071,148,[[],"Error"]],[[1071,149,1071,151,[4,[]]]]]]]]]]]]]]]]]],[1072,9,1086,27,[[1072,9,1072,20,"checkFields"],[[1072,21,1072,29,[11,"typeInfo"]],[1072,30,1072,36,[11,"fields"]],[1072,37,1072,81,[7,[[1072,39,1072,50,[11,"parentError"]],[1072,52,1072,79,[11,"canonicalTypeInfoFromParent"]]]]]],[1073,13,1086,27,[1,"++",1,[1073,13,1073,24,[2,[],"parentError"]],[1074,20,1086,27,[0,[[1074,20,1074,34,[2,["List"],"concatMap"]],[1075,21,1085,22,[7,[1075,22,1084,46,[18,[[[1075,23,1075,35,[7,[[1075,25,1075,30,[11,"field"]],[1075,32,1075,33,[11,"e"]]]]]],[1076,25,1084,46,[16,[[[1077,29,1079,49,[0,[[0],[1,[1077,29,1077,39,[[1077,29,1077,30,"f"],[1077,33,1077,39,[1,[1077,33,1077,39,[[],"String"]],[]]]]]],[1078,29,1079,49,[[1078,29,1078,30,"f"],[],[1079,33,1079,49,[0,[[1079,33,1079,43,[2,["Node"],"value"]],[1079,44,1079,49,[2,[],"field"]]]]]]]]]]],[1081,25,1084,46,[1,"|>",0,[1081,25,1083,78,[1,"|>",0,[1081,25,1082,73,[1,"|>",0,[1081,25,1081,63,[0,[[1081,25,1081,33,[2,["Dict"],"get"]],[1081,34,1081,35,[2,[],"f"]],[1081,36,1081,63,[2,[],"canonicalTypeInfoFromParent"]]]]],[1082,32,1082,73,[0,[[1082,32,1082,41,[2,["Maybe"],"map"]],[1082,42,1082,73,[7,[1082,43,1082,72,[0,[[1082,43,1082,58,[2,[],"dereferenceType"]],[1082,59,1082,72,[19,[1082,59,1082,64,[2,[],"local"]],[1082,65,1082,72,"context"]]]]]]]]]]]]],[1083,32,1083,78,[0,[[1083,32,1083,49,[2,["MaybeX"],"orElseLazy"]],[1083,50,1083,78,[7,[1083,51,1083,77,[18,[[[1083,52,1083,54,[1]]],[1083,58,1083,77,[0,[[1083,58,1083,66,[2,["Dict"],"get"]],[1083,67,1083,68,[2,[],"f"]],[1083,69,1083,77,[2,[],"typeInfo"]]]]]]]]]]]]]]],[1084,32,1084,46,[7,[1084,33,1084,45,[18,[[[1084,34,1084,35,[11,"t"]]],[1084,39,1084,45,[0,[[1084,39,1084,41,[2,[],"go"]],[1084,42,1084,43,[2,[],"t"]],[1084,44,1084,45,[2,[],"e"]]]]]]]]]]]]]]]]]]]],[1086,21,1086,27,[2,[],"fields"]]]]]]]]]]]],[1088,9,1090,41,[0,[[0],[1,[1088,9,1088,74,[[1088,9,1088,11,"go"],[1088,14,1088,74,[6,[1088,14,1088,36,[1,[1088,14,1088,19,[[],"Maybe"]],[[1088,20,1088,36,[1,[1088,20,1088,36,[[],"DereferencedType"]],[]]]]]],[1088,40,1088,74,[6,[1088,40,1088,55,[1,[1088,40,1088,44,[[],"Node"]],[[1088,45,1088,55,[1,[1088,45,1088,55,[[],"Expression"]],[]]]]]],[1088,59,1088,74,[1,[1088,59,1088,63,[[],"List"]],[[1088,64,1088,74,[1,[1088,65,1088,70,[[],"Error"]],[[1088,71,1088,73,[4,[]]]]]]]]]]]]]]]],[1089,9,1090,41,[[1089,9,1089,11,"go"],[],[1090,13,1090,41,[0,[[1090,13,1090,28,[2,[],"checkExpression"]],[1090,29,1090,35,[2,[],"config"]],[1090,36,1090,41,[2,[],"local"]]]]]]]]]]],[1092,5,1214,15,[17,[[1092,10,1092,25,[0,[[1092,10,1092,20,[2,["Node"],"value"]],[1092,21,1092,25,[2,[],"node"]]]]],[[[1094,9,1094,19,[12,[[],"Negation"],[[1094,18,1094,19,[11,"e"]]]]],[1096,13,1096,25,[0,[[1096,13,1096,15,[2,[],"go"]],[1096,16,1096,23,[2,[],"hasType"]],[1096,24,1096,25,[2,[],"e"]]]]]],[[1098,9,1098,34,[12,[[],"ParenthesizedExpression"],[[1098,33,1098,34,[11,"e"]]]]],[1100,13,1100,25,[0,[[1100,13,1100,15,[2,[],"go"]],[1100,16,1100,23,[2,[],"hasType"]],[1100,24,1100,25,[2,[],"e"]]]]]],[[1102,9,1102,20,[12,[[],"ListExpr"],[[1102,18,1102,20,[11,"es"]]]]],[1103,13,1109,41,[16,[[[1105,17,1107,40,[0,[[0],[1,[1105,17,1105,47,[[1105,17,1105,22,"type_"],[1105,25,1105,47,[1,[1105,25,1105,30,[[],"Maybe"]],[[1105,31,1105,47,[1,[1105,31,1105,47,[[],"DereferencedType"]],[]]]]]]]]],[1106,17,1107,40,[[1106,17,1106,22,"type_"],[],[1107,21,1107,40,[0,[[1107,21,1107,32,[2,[],"getListType"]],[1107,33,1107,40,[2,[],"hasType"]]]]]]]]]]],[1109,13,1109,41,[0,[[1109,13,1109,27,[2,["List"],"concatMap"]],[1109,28,1109,38,[7,[1109,29,1109,37,[0,[[1109,29,1109,31,[2,[],"go"]],[1109,32,1109,37,[2,[],"type_"]]]]]]],[1109,39,1109,41,[2,[],"es"]]]]]]]]],[[1111,9,1111,23,[12,[[],"Application"],[[1111,21,1111,23,[11,"es"]]]]],[1113,13,1113,58,[0,[[1113,13,1113,34,[2,[],"checkApplicationChain"]],[1113,35,1113,41,[2,[],"config"]],[1113,42,1113,47,[2,[],"local"]],[1113,48,1113,55,[2,[],"hasType"]],[1113,56,1113,58,[2,[],"es"]]]]]],[[1115,9,1115,39,[12,[[],"OperatorApplication"],[[1115,29,1115,31,[11,"op"]],[1115,32,1115,33,[0]],[1115,34,1115,36,[11,"e1"]],[1115,37,1115,39,[11,"e2"]]]]],[1117,13,1117,91,[0,[[1117,13,1117,37,[2,[],"checkOperatorApplication"]],[1117,38,1117,82,[7,[1117,39,1117,81,[0,[[1117,39,1117,60,[2,[],"checkApplicationChain"]],[1117,61,1117,67,[2,[],"config"]],[1117,68,1117,73,[2,[],"local"]],[1117,74,1117,81,[2,[],"hasType"]]]]]]],[1117,83,1117,85,[2,[],"op"]],[1117,86,1117,88,[2,[],"e1"]],[1117,89,1117,91,[2,[],"e2"]]]]]],[[1119,9,1119,33,[12,[[],"IfBlock"],[[1119,17,1119,21,[11,"pred"]],[1119,22,1119,27,[11,"thenE"]],[1119,28,1119,33,[11,"elseE"]]]]],[1121,13,1121,128,[1,"++",1,[1121,13,1121,88,[0,[[1121,13,1121,15,[2,[],"go"]],[1121,16,1121,83,[7,[1121,17,1121,82,[1,"<|",1,[1121,17,1121,21,[2,[],"Just"]],[1121,25,1121,82,[1,"<|",1,[1121,25,1121,41,[2,[],"DereferencedType"]],[1121,45,1121,82,[0,[[1121,45,1121,54,[2,[],"NamedType"]],[1121,55,1121,79,[6,[[1121,57,1121,69,[9,[[1121,59,1121,67,[5,"Basics"]]]]],[1121,71,1121,77,[5,"Bool"]]]]],[1121,80,1121,82,[9,[]]]]]]]]]]]],[1121,84,1121,88,[2,[],"pred"]]]]],[1121,92,1121,128,[1,"++",1,[1121,92,1121,108,[0,[[1121,92,1121,94,[2,[],"go"]],[1121,95,1121,102,[2,[],"hasType"]],[1121,103,1121,108,[2,[],"thenE"]]]]],[1121,112,1121,128,[0,[[1121,112,1121,114,[2,[],"go"]],[1121,115,1121,122,[2,[],"hasType"]],[1121,123,1121,128,[2,[],"elseE"]]]]]]]]]],[[1123,9,1123,28,[12,[[],"TupledExpression"],[[1123,26,1123,28,[11,"es"]]]]],[1125,13,1126,31,[1,"|>",0,[1125,13,1125,55,[0,[[1125,13,1125,22,[2,["List"],"map2"]],[1125,23,1125,25,[2,[],"go"]],[1125,26,1125,52,[7,[1125,27,1125,51,[0,[[1125,27,1125,40,[2,[],"getTupleTypes"]],[1125,41,1125,43,[2,[],"es"]],[1125,44,1125,51,[2,[],"hasType"]]]]]]],[1125,53,1125,55,[2,[],"es"]]]]],[1126,20,1126,31,[2,["List"],"concat"]]]]],[[1128,9,1128,45,[12,[[],"CaseExpression"],[[1128,24,1128,45,[8,[[1128,26,1128,36,"expression"],[1128,38,1128,43,"cases"]]]]]]],[1131,13,1146,100,[16,[[[1132,17,1134,51,[0,[[0],[1,[1132,17,1132,50,[[1132,17,1132,25,"caseType"],[1132,28,1132,50,[1,[1132,28,1132,33,[[],"Maybe"]],[[1132,34,1132,50,[1,[1132,34,1132,50,[[],"DereferencedType"]],[]]]]]]]]],[1133,17,1134,51,[[1133,17,1133,25,"caseType"],[],[1134,21,1134,51,[0,[[1134,21,1134,34,[2,[],"inferExprType"]],[1134,35,1134,40,[2,[],"local"]],[1134,41,1134,51,[2,[],"expression"]]]]]]]]]]],[1136,13,1146,100,[1,"++",1,[1136,13,1136,34,[0,[[1136,13,1136,15,[2,[],"go"]],[1136,16,1136,23,[2,[],"Nothing"]],[1136,24,1136,34,[2,[],"expression"]]]]],[1137,20,1146,100,[1,"++",1,[1137,20,1145,26,[0,[[1137,20,1137,34,[2,["List"],"concatMap"]],[1138,21,1144,22,[7,[1138,22,1143,33,[18,[[[1138,23,1138,31,[7,[[1138,25,1138,26,[11,"p"]],[1138,28,1138,29,[11,"e"]]]]]],[1139,25,1143,33,[1,"|>",0,[1139,25,1140,45,[1,"|>",0,[1139,25,1139,75,[0,[[1139,25,1139,50,[2,[],"bindingsInPatternWithType"]],[1139,51,1139,64,[19,[1139,51,1139,56,[2,[],"local"]],[1139,57,1139,64,"context"]]],[1139,65,1139,66,[2,[],"p"]],[1139,67,1139,75,[2,[],"caseType"]]]]],[1140,32,1140,45,[2,["Dict"],"fromList"]]]],[1141,32,1143,33,[7,[1141,33,1142,142,[18,[[[1141,34,1141,45,[11,"newBindings"]]],[1142,37,1142,142,[0,[[1142,37,1142,52,[2,[],"checkExpression"]],[1142,53,1142,59,[2,[],"config"]],[1142,60,1142,132,[21,[1142,62,1142,67,"local"],[[1142,70,1142,131,[[1142,70,1142,84,"localFunctions"],[1142,87,1142,130,[0,[[1142,87,1142,97,[2,["Dict"],"union"]],[1142,98,1142,118,[19,[1142,98,1142,103,[2,[],"local"]],[1142,104,1142,118,"localFunctions"]]],[1142,119,1142,130,[2,[],"newBindings"]]]]]]]]]],[1142,133,1142,140,[2,[],"hasType"]],[1142,141,1142,142,[2,[],"e"]]]]]]]]]]]]]]]]],[1145,21,1145,26,[2,[],"cases"]]]]],[1146,20,1146,100,[0,[[1146,20,1146,34,[2,["List"],"concatMap"]],[1146,35,1146,94,[7,[1146,36,1146,93,[1,"<<",0,[1146,36,1146,78,[0,[[1146,36,1146,48,[2,[],"checkPattern"]],[1146,49,1146,55,[2,[],"config"]],[1146,56,1146,69,[19,[1146,56,1146,61,[2,[],"local"]],[1146,62,1146,69,"context"]]],[1146,70,1146,78,[2,[],"caseType"]]]]],[1146,82,1146,93,[2,["Tuple"],"first"]]]]]],[1146,95,1146,100,[2,[],"cases"]]]]]]]]]]]]],[[1148,9,1148,46,[12,[[],"LambdaExpression"],[[1148,26,1148,46,[8,[[1148,28,1148,32,"args"],[1148,34,1148,44,"expression"]]]]]]],[1150,13,1150,74,[0,[[1150,13,1150,37,[2,[],"checkFunctionArgsAndExpr"]],[1150,38,1150,44,[2,[],"config"]],[1150,45,1150,50,[2,[],"local"]],[1150,51,1150,58,[2,[],"hasType"]],[1150,59,1150,63,[2,[],"args"]],[1150,64,1150,74,[2,[],"expression"]]]]]],[[1152,9,1152,51,[12,[[],"LetExpression"],[[1152,23,1152,51,[8,[[1152,25,1152,37,"declarations"],[1152,39,1152,49,"expression"]]]]]]],[1154,13,1165,67,[16,[[[1155,17,1158,73,[1,[1155,17,1155,45,[7,[[1155,19,1155,30,[11,"newBindings"]],[1155,32,1155,43,[11,"decsToCheck"]]]]],[1156,21,1158,73,[1,"|>",0,[1156,21,1157,38,[1,"|>",0,[1156,21,1156,91,[0,[[1156,21,1156,29,[2,["List"],"map"]],[1156,30,1156,78,[7,[1156,31,1156,77,[1,"<<",0,[1156,31,1156,63,[0,[[1156,31,1156,50,[2,[],"checkLetDeclaration"]],[1156,51,1156,57,[2,[],"config"]],[1156,58,1156,63,[2,[],"local"]]]]],[1156,67,1156,77,[2,["Node"],"value"]]]]]],[1156,79,1156,91,[2,[],"declarations"]]]]],[1157,28,1157,38,[2,["List"],"unzip"]]]],[1158,28,1158,73,[0,[[1158,28,1158,42,[2,["Tuple"],"mapFirst"]],[1158,43,1158,73,[7,[1158,44,1158,72,[1,"<<",0,[1158,44,1158,57,[2,["Dict"],"fromList"]],[1158,61,1158,72,[2,["List"],"concat"]]]]]]]]]]]]],[1160,17,1162,93,[0,[[0],[1,[1160,17,1160,42,[[1160,17,1160,27,"newContext"],[1160,30,1160,42,[1,[1160,30,1160,42,[[],"LocalContext"]],[]]]]]],[1161,17,1162,93,[[1161,17,1161,27,"newContext"],[],[1162,21,1162,93,[21,[1162,23,1162,28,"local"],[[1162,31,1162,92,[[1162,31,1162,45,"localFunctions"],[1162,48,1162,91,[0,[[1162,48,1162,58,[2,["Dict"],"union"]],[1162,59,1162,79,[19,[1162,59,1162,64,[2,[],"local"]],[1162,65,1162,79,"localFunctions"]]],[1162,80,1162,91,[2,[],"newBindings"]]]]]]]]]]]]]]]],[1164,13,1165,67,[1,"++",1,[1164,13,1164,65,[0,[[1164,13,1164,28,[2,[],"checkExpression"]],[1164,29,1164,35,[2,[],"config"]],[1164,36,1164,46,[2,[],"newContext"]],[1164,47,1164,54,[2,[],"hasType"]],[1164,55,1164,65,[2,[],"expression"]]]]],[1165,20,1165,67,[0,[[1165,20,1165,34,[2,["List"],"concatMap"]],[1165,35,1165,55,[7,[1165,36,1165,54,[18,[[[1165,37,1165,38,[11,"f"]]],[1165,42,1165,54,[0,[[1165,42,1165,43,[2,[],"f"]],[1165,44,1165,54,[2,[],"newContext"]]]]]]]]]],[1165,56,1165,67,[2,[],"decsToCheck"]]]]]]]]]]],[[1167,9,1167,33,[12,[[],"RecordExpr"],[[1167,20,1167,33,[11,"recordSetters"]]]]],[1169,13,1177,70,[16,[[[1170,17,1172,48,[0,[[0],[1,[1170,17,1170,50,[[1170,17,1170,19,"ts"],[1170,22,1170,50,[1,[1170,22,1170,26,[[],"Dict"]],[[1170,27,1170,33,[1,[1170,27,1170,33,[[],"String"]],[]]],[1170,34,1170,50,[1,[1170,34,1170,50,[[],"DereferencedType"]],[]]]]]]]]],[1171,17,1172,48,[[1171,17,1171,19,"ts"],[],[1172,21,1172,48,[0,[[1172,21,1172,40,[2,[],"getRecordFieldTypes"]],[1172,41,1172,48,[2,[],"hasType"]]]]]]]]]]],[1174,13,1177,70,[1,"|>",0,[1174,13,1175,52,[1,"|>",0,[1174,13,1174,88,[0,[[1174,13,1174,37,[2,[],"recordSettersToCheckable"]],[1174,38,1174,43,[2,[],"local"]],[1174,44,1174,61,[7,[1174,45,1174,60,[0,[[1174,45,1174,55,[2,["Node"],"range"]],[1174,56,1174,60,[2,[],"node"]]]]]]],[1174,62,1174,66,[2,[],"True"]],[1174,67,1174,74,[2,[],"hasType"]],[1174,75,1174,88,[2,[],"recordSetters"]]]]],[1175,20,1175,52,[0,[[1175,20,1175,31,[2,[],"checkRecord"]],[1175,32,1175,38,[2,[],"config"]],[1175,39,1175,52,[19,[1175,39,1175,44,[2,[],"local"]],[1175,45,1175,52,"context"]]]]]]]],[1177,20,1177,70,[0,[[1177,20,1177,31,[2,[],"checkFields"]],[1177,32,1177,34,[2,[],"ts"]],[1177,35,1177,70,[7,[1177,36,1177,69,[0,[[1177,36,1177,44,[2,["List"],"map"]],[1177,45,1177,55,[2,["Node"],"value"]],[1177,56,1177,69,[2,[],"recordSetters"]]]]]]]]]]]]]]]],[[1179,9,1179,47,[12,[[],"RecordUpdateExpression"],[[1179,32,1179,33,[0]],[1179,34,1179,47,[11,"recordSetters"]]]]],[1182,13,1196,70,[16,[[[1183,17,1185,51,[0,[[0],[1,[1183,17,1183,50,[[1183,17,1183,19,"ts"],[1183,22,1183,50,[1,[1183,22,1183,26,[[],"Dict"]],[[1183,27,1183,33,[1,[1183,27,1183,33,[[],"String"]],[]]],[1183,34,1183,50,[1,[1183,34,1183,50,[[],"DereferencedType"]],[]]]]]]]]],[1184,17,1185,51,[[1184,17,1184,19,"ts"],[],[1185,21,1185,51,[0,[[1185,21,1185,40,[2,[],"getRecordFieldTypes"]],[1185,41,1185,51,[2,[],"updateType"]]]]]]]]]],[1187,17,1191,79,[0,[[0],[1,[1187,17,1187,52,[[1187,17,1187,27,"updateType"],[1187,30,1187,52,[1,[1187,30,1187,35,[[],"Maybe"]],[[1187,36,1187,52,[1,[1187,36,1187,52,[[],"DereferencedType"]],[]]]]]]]]],[1188,17,1191,79,[[1188,17,1188,27,"updateType"],[],[1190,21,1191,79,[1,"|>",0,[1190,21,1190,28,[2,[],"hasType"]],[1191,28,1191,79,[0,[[1191,28,1191,45,[2,["MaybeX"],"orElseLazy"]],[1191,46,1191,79,[7,[1191,47,1191,78,[18,[[[1191,48,1191,50,[1]]],[1191,54,1191,78,[0,[[1191,54,1191,67,[2,[],"inferExprType"]],[1191,68,1191,73,[2,[],"local"]],[1191,74,1191,78,[2,[],"node"]]]]]]]]]]]]]]]]]]]]],[1193,13,1196,70,[1,"|>",0,[1193,13,1194,52,[1,"|>",0,[1193,13,1193,92,[0,[[1193,13,1193,37,[2,[],"recordSettersToCheckable"]],[1193,38,1193,43,[2,[],"local"]],[1193,44,1193,61,[7,[1193,45,1193,60,[0,[[1193,45,1193,55,[2,["Node"],"range"]],[1193,56,1193,60,[2,[],"node"]]]]]]],[1193,62,1193,67,[2,[],"False"]],[1193,68,1193,78,[2,[],"updateType"]],[1193,79,1193,92,[2,[],"recordSetters"]]]]],[1194,20,1194,52,[0,[[1194,20,1194,31,[2,[],"checkRecord"]],[1194,32,1194,38,[2,[],"config"]],[1194,39,1194,52,[19,[1194,39,1194,44,[2,[],"local"]],[1194,45,1194,52,"context"]]]]]]]],[1196,20,1196,70,[0,[[1196,20,1196,31,[2,[],"checkFields"]],[1196,32,1196,34,[2,[],"ts"]],[1196,35,1196,70,[7,[1196,36,1196,69,[0,[[1196,36,1196,44,[2,["List"],"map"]],[1196,45,1196,55,[2,["Node"],"value"]],[1196,56,1196,69,[2,[],"recordSetters"]]]]]]]]]]]]]]]],[[1198,9,1198,34,[12,[[],"RecordAccess"],[[1198,22,1198,23,[11,"e"]],[1198,24,1198,34,[11,"accessFunc"]]]]],[1199,13,1199,73,[0,[[1199,13,1199,15,[2,[],"go"]],[1199,16,1199,71,[7,[1199,17,1199,70,[1,"<|",1,[1199,17,1199,45,[0,[[1199,17,1199,37,[2,[],"makeRecordAccessType"]],[1199,38,1199,45,[2,[],"hasType"]]]]],[1199,49,1199,70,[0,[[1199,49,1199,59,[2,["Node"],"value"]],[1199,60,1199,70,[2,[],"accessFunc"]]]]]]]]],[1199,72,1199,73,[2,[],"e"]]]]]],[[1201,9,1201,10,[0]],[1214,13,1214,15,[9,[]]]]]]]]]]]]]]]],[1217,1,1236,85,[0,[[1,[1217,1,1219,3,"{-| Check the arguments to a function (for unsorted patterns) and its\nexpression, possibly having been given a type annotation.\n-}"]],[1,[1220,1,1220,141,[[1220,1,1220,25,"checkFunctionArgsAndExpr"],[1220,28,1220,141,[6,[1220,28,1220,38,[1,[1220,28,1220,38,[[],"RuleConfig"]],[]]],[1220,42,1220,141,[6,[1220,42,1220,54,[1,[1220,42,1220,54,[[],"LocalContext"]],[]]],[1220,58,1220,141,[6,[1220,58,1220,80,[1,[1220,58,1220,63,[[],"Maybe"]],[[1220,64,1220,80,[1,[1220,64,1220,80,[[],"DereferencedType"]],[]]]]]],[1220,84,1220,141,[6,[1220,84,1220,103,[1,[1220,84,1220,88,[[],"List"]],[[1220,89,1220,103,[1,[1220,90,1220,94,[[],"Node"]],[[1220,95,1220,102,[1,[1220,95,1220,102,[[],"Pattern"]],[]]]]]]]]],[1220,107,1220,141,[6,[1220,107,1220,122,[1,[1220,107,1220,111,[[],"Node"]],[[1220,112,1220,122,[1,[1220,112,1220,122,[[],"Expression"]],[]]]]]],[1220,126,1220,141,[1,[1220,126,1220,130,[[],"List"]],[[1220,131,1220,141,[1,[1220,132,1220,137,[[],"Error"]],[[1220,138,1220,140,[4,[]]]]]]]]]]]]]]]]]]]]]],[1221,1,1236,85,[[1221,1,1221,25,"checkFunctionArgsAndExpr"],[[1221,26,1221,32,[11,"config"]],[1221,33,1221,38,[11,"local"]],[1221,39,1221,46,[11,"hasType"]],[1221,47,1221,51,[11,"args"]],[1221,52,1221,56,[11,"expr"]]],[1222,5,1236,85,[16,[[[1223,9,1227,95,[1,[1223,9,1223,31,[7,[[1223,11,1223,19,[11,"argTypes"]],[1223,21,1223,29,[11,"exprType"]]]]],[1224,13,1227,95,[1,"|>",0,[1224,13,1226,66,[1,"|>",0,[1224,13,1225,67,[1,"|>",0,[1224,13,1224,50,[0,[[1224,13,1224,22,[2,["Maybe"],"map"]],[1224,23,1224,42,[2,[],"flattenFunctionType"]],[1224,43,1224,50,[2,[],"hasType"]]]]],[1225,20,1225,67,[0,[[1225,20,1225,33,[2,["Maybe"],"andThen"]],[1225,34,1225,67,[7,[1225,35,1225,66,[0,[[1225,35,1225,61,[2,[],"partiallyApplyArgsAndTypes"]],[1225,62,1225,66,[2,[],"args"]]]]]]]]]]]],[1226,20,1226,66,[0,[[1226,20,1226,29,[2,["Maybe"],"map"]],[1226,30,1226,66,[7,[1226,31,1226,65,[0,[[1226,31,1226,44,[2,["Tuple"],"mapBoth"]],[1226,45,1226,60,[7,[1226,46,1226,59,[0,[[1226,46,1226,54,[2,["List"],"map"]],[1226,55,1226,59,[2,[],"Just"]]]]]]],[1226,61,1226,65,[2,[],"Just"]]]]]]]]]]]],[1227,20,1227,95,[0,[[1227,20,1227,42,[2,["MaybeX"],"withDefaultLazy"]],[1227,43,1227,95,[7,[1227,44,1227,94,[18,[[[1227,45,1227,47,[1]]],[1227,51,1227,94,[6,[[1227,53,1227,83,[0,[[1227,53,1227,61,[2,["List"],"map"]],[1227,62,1227,78,[7,[1227,63,1227,77,[0,[[1227,63,1227,69,[2,[],"always"]],[1227,70,1227,77,[2,[],"Nothing"]]]]]]],[1227,79,1227,83,[2,[],"args"]]]]],[1227,85,1227,92,[2,[],"Nothing"]]]]]]]]]]]]]]]]],[1229,9,1233,33,[0,[[0],[1,[1229,9,1229,39,[[1229,9,1229,20,"newBindings"],[1229,23,1229,39,[1,[1229,23,1229,27,[[],"Dict"]],[[1229,28,1229,34,[1,[1229,28,1229,34,[[],"String"]],[]]],[1229,35,1229,39,[1,[1229,35,1229,39,[[],"Type"]],[]]]]]]]]],[1230,9,1233,33,[[1230,9,1230,20,"newBindings"],[],[1231,13,1233,33,[1,"|>",0,[1231,13,1232,31,[1,"|>",0,[1231,13,1231,78,[0,[[1231,13,1231,22,[2,["List"],"map2"]],[1231,23,1231,64,[7,[1231,24,1231,63,[0,[[1231,24,1231,49,[2,[],"bindingsInPatternWithType"]],[1231,50,1231,63,[19,[1231,50,1231,55,[2,[],"local"]],[1231,56,1231,63,"context"]]]]]]]],[1231,65,1231,69,[2,[],"args"]],[1231,70,1231,78,[2,[],"argTypes"]]]]],[1232,20,1232,31,[2,["List"],"concat"]]]],[1233,20,1233,33,[2,["Dict"],"fromList"]]]]]]]]]],[1235,5,1236,85,[1,"++",1,[1235,5,1235,114,[0,[[1235,5,1235,20,[2,[],"checkExpression"]],[1235,21,1235,27,[2,[],"config"]],[1235,28,1235,100,[21,[1235,30,1235,35,"local"],[[1235,38,1235,99,[[1235,38,1235,52,"localFunctions"],[1235,55,1235,98,[0,[[1235,55,1235,65,[2,["Dict"],"union"]],[1235,66,1235,86,[19,[1235,66,1235,71,[2,[],"local"]],[1235,72,1235,86,"localFunctions"]]],[1235,87,1235,98,[2,[],"newBindings"]]]]]]]]]],[1235,101,1235,109,[2,[],"exprType"]],[1235,110,1235,114,[2,[],"expr"]]]]],[1236,12,1236,85,[0,[[1236,12,1236,23,[2,["List"],"concat"]],[1236,24,1236,85,[7,[1236,25,1236,84,[0,[[1236,25,1236,34,[2,["List"],"map2"]],[1236,35,1236,70,[7,[1236,36,1236,69,[0,[[1236,36,1236,48,[2,[],"checkPattern"]],[1236,49,1236,55,[2,[],"config"]],[1236,56,1236,69,[19,[1236,56,1236,61,[2,[],"local"]],[1236,62,1236,69,"context"]]]]]]]],[1236,71,1236,79,[2,[],"argTypes"]],[1236,80,1236,84,[2,[],"args"]]]]]]]]]]]]]]]]]]]],[1239,1,1255,111,[0,[[1,[1239,1,1241,3,"{-| Check a function declaration for unsorted record signatures, patterns, or\nexpressions.\n-}"]],[1,[1242,1,1242,85,[[1242,1,1242,25,"checkFunctionDeclaration"],[1242,28,1242,85,[6,[1242,28,1242,38,[1,[1242,28,1242,38,[[],"RuleConfig"]],[]]],[1242,42,1242,85,[6,[1242,42,1242,54,[1,[1242,42,1242,54,[[],"LocalContext"]],[]]],[1242,58,1242,85,[6,[1242,58,1242,66,[1,[1242,58,1242,66,[[],"Function"]],[]]],[1242,70,1242,85,[1,[1242,70,1242,74,[[],"List"]],[[1242,75,1242,85,[1,[1242,76,1242,81,[[],"Error"]],[[1242,82,1242,84,[4,[]]]]]]]]]]]]]]]]]],[1243,1,1255,111,[[1243,1,1243,25,"checkFunctionDeclaration"],[[1243,26,1243,32,[11,"config"]],[1243,33,1243,38,[11,"local"]],[1243,39,1243,43,[11,"func"]]],[1244,5,1255,111,[16,[[[1245,9,1246,40,[1,[1245,9,1245,34,[8,[[1245,11,1245,20,"arguments"],[1245,22,1245,32,"expression"]]]],[1246,13,1246,40,[0,[[1246,13,1246,23,[2,["Node"],"value"]],[1246,24,1246,40,[19,[1246,24,1246,28,[2,[],"func"]],[1246,29,1246,40,"declaration"]]]]]]]],[1248,9,1251,42,[0,[[0],[1,[1248,9,1248,41,[[1248,9,1248,16,"hasType"],[1248,19,1248,41,[1,[1248,19,1248,24,[[],"Maybe"]],[[1248,25,1248,41,[1,[1248,25,1248,41,[[],"DereferencedType"]],[]]]]]]]]],[1249,9,1251,42,[[1249,9,1249,16,"hasType"],[],[1250,13,1251,42,[1,"|>",0,[1250,13,1250,50,[0,[[1250,13,1250,31,[2,[],"getFunctionBinding"]],[1250,32,1250,45,[19,[1250,32,1250,37,[2,[],"local"]],[1250,38,1250,45,"context"]]],[1250,46,1250,50,[2,[],"func"]]]]],[1251,20,1251,42,[0,[[1251,20,1251,29,[2,["Maybe"],"map"]],[1251,30,1251,42,[2,["Tuple"],"second"]]]]]]]]]]]]],[1253,5,1255,111,[1,"|>",0,[1253,5,1254,32,[1,"|>",0,[1253,5,1253,113,[0,[[1253,5,1253,14,[2,["Maybe"],"map"]],[1253,15,1253,98,[7,[1253,16,1253,97,[1,"<<",0,[1253,16,1253,83,[1,"<<",0,[1253,16,1253,64,[0,[[1253,16,1253,35,[2,[],"checkTypeAnnotation"]],[1253,36,1253,42,[2,[],"config"]],[1253,43,1253,56,[19,[1253,43,1253,48,[2,[],"local"]],[1253,49,1253,56,"context"]]],[1253,57,1253,64,[2,[],"Nothing"]]]]],[1253,68,1253,83,[20,".typeAnnotation"]]]],[1253,87,1253,97,[2,["Node"],"value"]]]]]],[1253,99,1253,113,[19,[1253,99,1253,103,[2,[],"func"]],[1253,104,1253,113,"signature"]]]]]],[1254,12,1254,32,[0,[[1254,12,1254,29,[2,["Maybe"],"withDefault"]],[1254,30,1254,32,[9,[]]]]]]]],[1255,12,1255,111,[7,[1255,13,1255,110,[18,[[[1255,14,1255,25,[11,"errsInAnnot"]]],[1255,29,1255,110,[1,"++",1,[1255,29,1255,40,[2,[],"errsInAnnot"]],[1255,44,1255,110,[0,[[1255,44,1255,68,[2,[],"checkFunctionArgsAndExpr"]],[1255,69,1255,75,[2,[],"config"]],[1255,76,1255,81,[2,[],"local"]],[1255,82,1255,89,[2,[],"hasType"]],[1255,90,1255,99,[2,[],"arguments"]],[1255,100,1255,110,[2,[],"expression"]]]]]]]]]]]]]]]]]]]]]],[1258,1,1272,59,[0,[[1,[1258,1,1261,3,"{-| Generate a list of bindings from a `let` declaration as well as check them\nfor errors (when provided with the new context that includes all new `let`\nbindings. Note that type inference isn't performed with new bindings.\n-}"]],[1,[1262,1,1262,129,[[1262,1,1262,20,"checkLetDeclaration"],[1262,23,1262,129,[6,[1262,23,1262,33,[1,[1262,23,1262,33,[[],"RuleConfig"]],[]]],[1262,37,1262,129,[6,[1262,37,1262,49,[1,[1262,37,1262,49,[[],"LocalContext"]],[]]],[1262,53,1262,129,[6,[1262,53,1262,67,[1,[1262,53,1262,67,[[],"LetDeclaration"]],[]]],[1262,71,1262,129,[3,[[1262,73,1262,94,[1,[1262,73,1262,77,[[],"List"]],[[1262,78,1262,94,[3,[[1262,80,1262,86,[1,[1262,80,1262,86,[[],"String"]],[]]],[1262,88,1262,92,[1,[1262,88,1262,92,[[],"Type"]],[]]]]]]]]],[1262,96,1262,127,[6,[1262,96,1262,108,[1,[1262,96,1262,108,[[],"LocalContext"]],[]]],[1262,112,1262,127,[1,[1262,112,1262,116,[[],"List"]],[[1262,117,1262,127,[1,[1262,118,1262,123,[[],"Error"]],[[1262,124,1262,126,[4,[]]]]]]]]]]]]]]]]]]]]]]],[1263,1,1272,59,[[1263,1,1263,20,"checkLetDeclaration"],[[1263,21,1263,27,[11,"config"]],[1263,28,1263,33,[11,"local"]],[1263,34,1263,35,[11,"d"]]],[1264,5,1272,59,[1,"|>",0,[1264,5,1271,6,[7,[1264,6,1270,127,[17,[[1264,11,1264,12,[2,[],"d"]],[[[1265,9,1265,22,[12,[[],"LetFunction"],[[1265,21,1265,22,[11,"f"]]]]],[1266,13,1266,64,[18,[[[1266,14,1266,20,[11,"local_"]]],[1266,24,1266,64,[0,[[1266,24,1266,48,[2,[],"checkFunctionDeclaration"]],[1266,49,1266,55,[2,[],"config"]],[1266,56,1266,62,[2,[],"local_"]],[1266,63,1266,64,[2,[],"f"]]]]]]]]],[[1268,9,1268,29,[12,[[],"LetDestructuring"],[[1268,26,1268,27,[11,"p"]],[1268,28,1268,29,[11,"e"]]]]],[1270,13,1270,127,[18,[[[1270,14,1270,20,[11,"local_"]]],[1270,24,1270,127,[1,"++",1,[1270,24,1270,63,[0,[[1270,24,1270,39,[2,[],"checkExpression"]],[1270,40,1270,46,[2,[],"config"]],[1270,47,1270,53,[2,[],"local_"]],[1270,54,1270,61,[2,[],"Nothing"]],[1270,62,1270,63,[2,[],"e"]]]]],[1270,67,1270,127,[0,[[1270,67,1270,79,[2,[],"checkPattern"]],[1270,80,1270,86,[2,[],"config"]],[1270,87,1270,100,[19,[1270,87,1270,92,[2,[],"local"]],[1270,93,1270,100,"context"]]],[1270,101,1270,125,[7,[1270,102,1270,124,[0,[[1270,102,1270,115,[2,[],"inferExprType"]],[1270,116,1270,122,[2,[],"local_"]],[1270,123,1270,124,[2,[],"e"]]]]]]],[1270,126,1270,127,[2,[],"p"]]]]]]]]]]]]]]]]],[1272,12,1272,59,[0,[[1272,12,1272,22,[2,["Tuple"],"pair"]],[1272,23,1272,59,[7,[1272,24,1272,58,[0,[[1272,24,1272,50,[2,[],"bindingsFromLetDeclaration"]],[1272,51,1272,56,[2,[],"local"]],[1272,57,1272,58,[2,[],"d"]]]]]]]]]]]]]]]]],[1275,1,1288,76,[0,[[1,[1275,1,1276,3,"{-| Handle the few common operators we expect to see records passed through.\n-}"]],[1,[1277,1,1277,110,[[1277,1,1277,25,"checkOperatorApplication"],[1277,28,1277,110,[6,[1277,28,1277,57,[6,[1277,29,1277,51,[1,[1277,29,1277,33,[[],"List"]],[[1277,34,1277,51,[1,[1277,35,1277,39,[[],"Node"]],[[1277,40,1277,50,[1,[1277,40,1277,50,[[],"Expression"]],[]]]]]]]]],[1277,55,1277,56,[0,"a"]]]],[1277,61,1277,110,[6,[1277,61,1277,67,[1,[1277,61,1277,67,[[],"String"]],[]]],[1277,71,1277,110,[6,[1277,71,1277,86,[1,[1277,71,1277,75,[[],"Node"]],[[1277,76,1277,86,[1,[1277,76,1277,86,[[],"Expression"]],[]]]]]],[1277,90,1277,110,[6,[1277,90,1277,105,[1,[1277,90,1277,94,[[],"Node"]],[[1277,95,1277,105,[1,[1277,95,1277,105,[[],"Expression"]],[]]]]]],[1277,109,1277,110,[0,"a"]]]]]]]]]]]]],[1278,1,1288,76,[[1278,1,1278,25,"checkOperatorApplication"],[[1278,26,1278,34,[11,"checkApp"]],[1278,35,1278,37,[11,"op"]],[1278,38,1278,40,[11,"e1"]],[1278,41,1278,43,[11,"e2"]]],[1279,5,1288,76,[17,[[1279,10,1279,12,[2,[],"op"]],[[[1280,9,1280,13,[3,"|>"]],[1281,13,1281,32,[0,[[1281,13,1281,21,[2,[],"checkApp"]],[1281,22,1281,32,[9,[[1281,24,1281,26,[2,[],"e2"]],[1281,28,1281,30,[2,[],"e1"]]]]]]]]],[[1283,9,1283,13,[3,"<|"]],[1284,13,1284,32,[0,[[1284,13,1284,21,[2,[],"checkApp"]],[1284,22,1284,32,[9,[[1284,24,1284,26,[2,[],"e1"]],[1284,28,1284,30,[2,[],"e2"]]]]]]]]],[[1286,9,1286,10,[0]],[1288,13,1288,76,[0,[[1288,13,1288,21,[2,[],"checkApp"]],[1288,22,1288,76,[9,[[1288,24,1288,66,[1,"<|",1,[1288,24,1288,45,[0,[[1288,24,1288,28,[2,[],"Node"]],[1288,29,1288,45,[2,["Range"],"emptyRange"]]]]],[1288,49,1288,66,[0,[[1288,49,1288,63,[2,[],"PrefixOperator"]],[1288,64,1288,66,[2,[],"op"]]]]]]],[1288,68,1288,70,[2,[],"e1"]],[1288,72,1288,74,[2,[],"e2"]]]]]]]]]]]]]]]]]],[1291,1,1357,15,[0,[[1,[1291,1,1292,3,"{-| Descend into pattern, keeping as much type information as possible.\n-}"]],[1,[1293,1,1293,104,[[1293,1,1293,13,"checkPattern"],[1293,16,1293,104,[6,[1293,16,1293,26,[1,[1293,16,1293,26,[[],"RuleConfig"]],[]]],[1293,30,1293,104,[6,[1293,30,1293,43,[1,[1293,30,1293,43,[[],"ModuleContext"]],[]]],[1293,47,1293,104,[6,[1293,47,1293,69,[1,[1293,47,1293,52,[[],"Maybe"]],[[1293,53,1293,69,[1,[1293,53,1293,69,[[],"DereferencedType"]],[]]]]]],[1293,73,1293,104,[6,[1293,73,1293,85,[1,[1293,73,1293,77,[[],"Node"]],[[1293,78,1293,85,[1,[1293,78,1293,85,[[],"Pattern"]],[]]]]]],[1293,89,1293,104,[1,[1293,89,1293,93,[[],"List"]],[[1293,94,1293,104,[1,[1293,95,1293,100,[[],"Error"]],[[1293,101,1293,103,[4,[]]]]]]]]]]]]]]]]]]]],[1294,1,1357,15,[[1294,1,1294,13,"checkPattern"],[[1294,14,1294,20,[11,"config"]],[1294,21,1294,28,[11,"context"]],[1294,29,1294,36,[11,"hasType"]],[1294,37,1294,41,[11,"node"]]],[1295,5,1357,15,[16,[[[1296,9,1298,40,[0,[[0],[1,[1296,9,1296,71,[[1296,9,1296,11,"go"],[1296,14,1296,71,[6,[1296,14,1296,36,[1,[1296,14,1296,19,[[],"Maybe"]],[[1296,20,1296,36,[1,[1296,20,1296,36,[[],"DereferencedType"]],[]]]]]],[1296,40,1296,71,[6,[1296,40,1296,52,[1,[1296,40,1296,44,[[],"Node"]],[[1296,45,1296,52,[1,[1296,45,1296,52,[[],"Pattern"]],[]]]]]],[1296,56,1296,71,[1,[1296,56,1296,60,[[],"List"]],[[1296,61,1296,71,[1,[1296,62,1296,67,[[],"Error"]],[[1296,68,1296,70,[4,[]]]]]]]]]]]]]]]],[1297,9,1298,40,[[1297,9,1297,11,"go"],[],[1298,13,1298,40,[0,[[1298,13,1298,25,[2,[],"checkPattern"]],[1298,26,1298,32,[2,[],"config"]],[1298,33,1298,40,[2,[],"context"]]]]]]]]]]],[1300,5,1357,15,[17,[[1300,10,1300,25,[0,[[1300,10,1300,20,[2,["Node"],"value"]],[1300,21,1300,25,[2,[],"node"]]]]],[[[1301,9,1301,24,[12,[[],"TuplePattern"],[[1301,22,1301,24,[11,"ps"]]]]],[1303,13,1304,31,[1,"|>",0,[1303,13,1303,55,[0,[[1303,13,1303,22,[2,["List"],"map2"]],[1303,23,1303,25,[2,[],"go"]],[1303,26,1303,52,[7,[1303,27,1303,51,[0,[[1303,27,1303,40,[2,[],"getTupleTypes"]],[1303,41,1303,43,[2,[],"ps"]],[1303,44,1303,51,[2,[],"hasType"]]]]]]],[1303,53,1303,55,[2,[],"ps"]]]]],[1304,20,1304,31,[2,["List"],"concat"]]]]],[[1306,9,1306,27,[12,[[],"UnConsPattern"],[[1306,23,1306,24,[11,"p"]],[1306,25,1306,27,[11,"ps"]]]]],[1307,13,1313,38,[16,[[[1309,17,1311,40,[0,[[0],[1,[1309,17,1309,47,[[1309,17,1309,22,"type_"],[1309,25,1309,47,[1,[1309,25,1309,30,[[],"Maybe"]],[[1309,31,1309,47,[1,[1309,31,1309,47,[[],"DereferencedType"]],[]]]]]]]]],[1310,17,1311,40,[[1310,17,1310,22,"type_"],[],[1311,21,1311,40,[0,[[1311,21,1311,32,[2,[],"getListType"]],[1311,33,1311,40,[2,[],"hasType"]]]]]]]]]]],[1313,13,1313,38,[1,"++",1,[1313,13,1313,23,[0,[[1313,13,1313,15,[2,[],"go"]],[1313,16,1313,21,[2,[],"type_"]],[1313,22,1313,23,[2,[],"p"]]]]],[1313,27,1313,38,[0,[[1313,27,1313,29,[2,[],"go"]],[1313,30,1313,35,[2,[],"type_"]],[1313,36,1313,38,[2,[],"ps"]]]]]]]]]]],[[1315,9,1315,23,[12,[[],"ListPattern"],[[1315,21,1315,23,[11,"ps"]]]]],[1316,13,1322,41,[16,[[[1318,17,1320,40,[0,[[0],[1,[1318,17,1318,47,[[1318,17,1318,22,"type_"],[1318,25,1318,47,[1,[1318,25,1318,30,[[],"Maybe"]],[[1318,31,1318,47,[1,[1318,31,1318,47,[[],"DereferencedType"]],[]]]]]]]]],[1319,17,1320,40,[[1319,17,1319,22,"type_"],[],[1320,21,1320,40,[0,[[1320,21,1320,32,[2,[],"getListType"]],[1320,33,1320,40,[2,[],"hasType"]]]]]]]]]]],[1322,13,1322,41,[0,[[1322,13,1322,27,[2,["List"],"concatMap"]],[1322,28,1322,38,[7,[1322,29,1322,37,[0,[[1322,29,1322,31,[2,[],"go"]],[1322,32,1322,37,[2,[],"type_"]]]]]]],[1322,39,1322,41,[2,[],"ps"]]]]]]]]],[[1324,9,1324,22,[12,[[],"AsPattern"],[[1324,19,1324,20,[11,"p"]],[1324,21,1324,22,[0]]]]],[1326,13,1326,25,[0,[[1326,13,1326,15,[2,[],"go"]],[1326,16,1326,23,[2,[],"hasType"]],[1326,24,1326,25,[2,[],"p"]]]]]],[[1328,9,1328,31,[12,[[],"ParenthesizedPattern"],[[1328,30,1328,31,[11,"p"]]]]],[1330,13,1330,25,[0,[[1330,13,1330,15,[2,[],"go"]],[1330,16,1330,23,[2,[],"hasType"]],[1330,24,1330,25,[2,[],"p"]]]]]],[[1332,9,1332,35,[12,[[],"NamedPattern"],[[1332,22,1332,30,[8,[[1332,24,1332,28,"name"]]]],[1332,31,1332,35,[11,"pats"]]]]],[1336,13,1339,84,[1,"|>",0,[1336,13,1338,41,[1,"|>",0,[1336,13,1337,70,[1,"|>",0,[1336,13,1336,98,[0,[[1336,13,1336,29,[2,[],"findFunctionType"]],[1336,30,1336,80,[8,[[1336,32,1336,49,[[1336,32,1336,39,"context"],[1336,42,1336,49,[2,[],"context"]]]],[1336,51,1336,79,[[1336,51,1336,65,"localFunctions"],[1336,68,1336,78,[2,["Dict"],"empty"]]]]]]],[1336,81,1336,88,[2,[],"hasType"]],[1336,89,1336,93,[2,[],"node"]],[1336,94,1336,98,[2,[],"name"]]]]],[1337,20,1337,70,[0,[[1337,20,1337,29,[2,["Maybe"],"map"]],[1337,30,1337,70,[7,[1337,31,1337,69,[0,[[1337,31,1337,40,[2,["List"],"map2"]],[1337,41,1337,64,[7,[1337,42,1337,63,[18,[[[1337,43,1337,44,[11,"p"]],[1337,45,1337,46,[11,"t"]]],[1337,50,1337,63,[0,[[1337,50,1337,52,[2,[],"go"]],[1337,53,1337,61,[7,[1337,54,1337,60,[0,[[1337,54,1337,58,[2,[],"Just"]],[1337,59,1337,60,[2,[],"t"]]]]]]],[1337,62,1337,63,[2,[],"p"]]]]]]]]]],[1337,65,1337,69,[2,[],"pats"]]]]]]]]]]]],[1338,20,1338,41,[0,[[1338,20,1338,29,[2,["Maybe"],"map"]],[1338,30,1338,41,[2,["List"],"concat"]]]]]]],[1339,20,1339,84,[0,[[1339,20,1339,42,[2,["MaybeX"],"withDefaultLazy"]],[1339,43,1339,84,[7,[1339,44,1339,83,[18,[[[1339,45,1339,47,[1]]],[1339,51,1339,83,[0,[[1339,51,1339,65,[2,["List"],"concatMap"]],[1339,66,1339,78,[7,[1339,67,1339,77,[0,[[1339,67,1339,69,[2,[],"go"]],[1339,70,1339,77,[2,[],"Nothing"]]]]]]],[1339,79,1339,83,[2,[],"pats"]]]]]]]]]]]]]]]],[[1341,9,1341,29,[12,[[],"RecordPattern"],[[1341,23,1341,29,[11,"fields"]]]]],[1342,13,1345,31,[1,"|>",0,[1342,13,1343,46,[1,"|>",0,[1342,13,1342,70,[0,[[1342,13,1342,37,[2,[],"recordPatternToCheckable"]],[1342,38,1342,55,[7,[1342,39,1342,54,[0,[[1342,39,1342,49,[2,["Node"],"range"]],[1342,50,1342,54,[2,[],"node"]]]]]]],[1342,56,1342,63,[2,[],"hasType"]],[1342,64,1342,70,[2,[],"fields"]]]]],[1343,20,1343,46,[0,[[1343,20,1343,31,[2,[],"checkRecord"]],[1343,32,1343,38,[2,[],"config"]],[1343,39,1343,46,[2,[],"context"]]]]]]],[1345,20,1345,31,[2,["Tuple"],"first"]]]]],[[1347,9,1347,10,[0]],[1357,13,1357,15,[9,[]]]]]]]]]]]]]]]],[1360,1,1506,50,[0,[[1,[1360,1,1362,3,"{-| Once a record has been reduced to a standard format, check its sorting,\nreturning a list of canonical field types, if any were found.\n-}"]],[1,[1363,1,1363,100,[[1363,1,1363,12,"checkRecord"],[1363,15,1363,100,[6,[1363,15,1363,25,[1,[1363,15,1363,25,[[],"RuleConfig"]],[]]],[1363,29,1363,100,[6,[1363,29,1363,42,[1,[1363,29,1363,42,[[],"ModuleContext"]],[]]],[1363,46,1363,100,[6,[1363,46,1363,59,[1,[1363,46,1363,59,[[],"RecordToCheck"]],[]]],[1363,63,1363,100,[3,[[1363,65,1363,80,[1,[1363,65,1363,69,[[],"List"]],[[1363,70,1363,80,[1,[1363,71,1363,76,[[],"Error"]],[[1363,77,1363,79,[4,[]]]]]]]]],[1363,82,1363,98,[1,[1363,82,1363,86,[[],"Dict"]],[[1363,87,1363,93,[1,[1363,87,1363,93,[[],"String"]],[]]],[1363,94,1363,98,[1,[1363,94,1363,98,[[],"Type"]],[]]]]]]]]]]]]]]]]]],[1364,1,1506,50,[[1364,1,1364,12,"checkRecord"],[[1364,13,1364,82,[14,[1364,14,1364,81,[13,[1364,14,1364,71,[14,[1364,15,1364,70,[12,[[],"RuleConfig"],[[1364,26,1364,70,[8,[[1364,28,1364,39,"sortUnknown"],[1364,41,1364,54,"sortAmbiguous"],[1364,56,1364,68,"sortGenerics"]]]]]]]]],[1364,75,1364,81,"config"]]]]],[1364,83,1364,90,[11,"context"]],[1364,91,1364,135,[14,[1364,92,1364,134,[13,[1364,92,1364,124,[8,[[1364,94,1364,103,"fullRange"],[1364,105,1364,114,"orderInfo"],[1364,116,1364,122,"fields"]]]],[1364,128,1364,134,"record"]]]]]],[1365,5,1506,50,[16,[[[1366,9,1368,38,[0,[[0],[1,[1366,9,1366,47,[[1366,9,1366,21,"alphabetical"],[1366,24,1366,47,[6,[1366,24,1366,29,[1,[1366,24,1366,29,[[],"Field"]],[]]],[1366,33,1366,47,[6,[1366,33,1366,38,[1,[1366,33,1366,38,[[],"Field"]],[]]],[1366,42,1366,47,[1,[1366,42,1366,47,[[],"Order"]],[]]]]]]]]]],[1367,9,1368,38,[[1367,9,1367,21,"alphabetical"],[[1367,22,1367,24,[11,"f1"]],[1367,25,1367,27,[11,"f2"]]],[1368,13,1368,38,[0,[[1368,13,1368,20,[2,[],"compare"]],[1368,21,1368,29,[19,[1368,21,1368,23,[2,[],"f1"]],[1368,24,1368,29,"field"]]],[1368,30,1368,38,[19,[1368,30,1368,32,[2,[],"f2"]],[1368,33,1368,38,"field"]]]]]]]]]]],[1370,9,1378,46,[0,[[0],[1,[1370,9,1370,66,[[1370,9,1370,21,"byFieldOrder"],[1370,24,1370,66,[6,[1370,24,1370,39,[1,[1370,24,1370,28,[[],"Dict"]],[[1370,29,1370,35,[1,[1370,29,1370,35,[[],"String"]],[]]],[1370,36,1370,39,[1,[1370,36,1370,39,[[],"Int"]],[]]]]]],[1370,43,1370,66,[6,[1370,43,1370,48,[1,[1370,43,1370,48,[[],"Field"]],[]]],[1370,52,1370,66,[6,[1370,52,1370,57,[1,[1370,52,1370,57,[[],"Field"]],[]]],[1370,61,1370,66,[1,[1370,61,1370,66,[[],"Order"]],[]]]]]]]]]]]],[1371,9,1378,46,[[1371,9,1371,21,"byFieldOrder"],[[1371,22,1371,25,[11,"ord"]],[1371,26,1371,28,[11,"f1"]],[1371,29,1371,31,[11,"f2"]]],[1372,13,1378,46,[16,[[[1373,17,1376,48,[0,[[0],[1,[1373,17,1373,34,[[1373,17,1373,18,"o"],[1373,21,1373,34,[6,[1373,21,1373,27,[1,[1373,21,1373,27,[[],"String"]],[]]],[1373,31,1373,34,[1,[1373,31,1373,34,[[],"Int"]],[]]]]]]]],[1374,17,1376,48,[[1374,17,1374,18,"o"],[[1374,19,1374,20,[11,"f"]]],[1375,21,1376,48,[1,"|>",0,[1375,21,1375,35,[0,[[1375,21,1375,29,[2,["Dict"],"get"]],[1375,30,1375,31,[2,[],"f"]],[1375,32,1375,35,[2,[],"ord"]]]]],[1376,28,1376,48,[0,[[1376,28,1376,45,[2,["Maybe"],"withDefault"]],[1376,46,1376,48,[14,[1376,47,1376,48,[3,1]]]]]]]]]]]]]]],[1378,13,1378,46,[0,[[1378,13,1378,20,[2,[],"compare"]],[1378,21,1378,33,[7,[1378,22,1378,32,[0,[[1378,22,1378,23,[2,[],"o"]],[1378,24,1378,32,[19,[1378,24,1378,26,[2,[],"f1"]],[1378,27,1378,32,"field"]]]]]]]],[1378,34,1378,46,[7,[1378,35,1378,45,[0,[[1378,35,1378,36,[2,[],"o"]],[1378,37,1378,45,[19,[1378,37,1378,39,[2,[],"f2"]],[1378,40,1378,45,"field"]]]]]]]]]]]]]]]]]]],[1380,9,1382,87,[0,[[0],[1,[1380,9,1380,70,[[1380,9,1380,23,"checkSortingBy"],[1380,26,1380,70,[6,[1380,26,1380,51,[6,[1380,27,1380,32,[1,[1380,27,1380,32,[[],"Field"]],[]]],[1380,36,1380,50,[6,[1380,36,1380,41,[1,[1380,36,1380,41,[[],"Field"]],[]]],[1380,45,1380,50,[1,[1380,45,1380,50,[[],"Order"]],[]]]]]]],[1380,55,1380,70,[1,[1380,55,1380,59,[[],"List"]],[[1380,60,1380,70,[1,[1380,61,1380,66,[[],"Error"]],[[1380,67,1380,69,[4,[]]]]]]]]]]]]]],[1381,9,1382,87,[[1381,9,1381,23,"checkSortingBy"],[[1381,24,1381,25,[11,"o"]]],[1382,13,1382,87,[0,[[1382,13,1382,25,[2,[],"checkSorting"]],[1382,26,1382,47,[19,[1382,26,1382,33,[2,[],"context"]],[1382,34,1382,47,"extractSource"]]],[1382,48,1382,63,[5,"Record fields"]],[1382,64,1382,69,[9,[[1382,66,1382,67,[2,[],"o"]]]]],[1382,70,1382,80,[2,[],"errorRange"]],[1382,81,1382,87,[2,[],"fields"]]]]]]]]]],[1384,9,1392,63,[0,[[0],[1,[1384,9,1384,27,[[1384,9,1384,19,"errorRange"],[1384,22,1384,27,[1,[1384,22,1384,27,[[],"Range"]],[]]]]]],[1385,9,1392,63,[[1385,9,1385,19,"errorRange"],[],[1386,13,1392,63,[16,[[[1387,17,1389,36,[0,[[0],[1,[1387,17,1387,29,[[1387,17,1387,18,"s"],[1387,21,1387,29,[1,[1387,21,1387,29,[[],"Location"]],[]]]]]],[1388,17,1389,36,[[1388,17,1388,18,"s"],[],[1389,21,1389,36,[19,[1389,21,1389,30,[2,[],"fullRange"]],[1389,31,1389,36,"start"]]]]]]]]],[1392,13,1392,63,[8,[[1392,15,1392,24,[[1392,15,1392,20,"start"],[1392,23,1392,24,[2,[],"s"]]]],[1392,26,1392,62,[[1392,26,1392,29,"end"],[1392,32,1392,61,[21,[1392,34,1392,35,"s"],[[1392,38,1392,60,[[1392,38,1392,44,"column"],[1392,47,1392,59,[1,"+",0,[1392,47,1392,55,[19,[1392,47,1392,48,[2,[],"s"]],[1392,49,1392,55,"column"]]],[1392,58,1392,59,[3,1]]]]]]]]]]]]]]]]]]]]]],[1394,9,1407,23,[0,[[0],[1,[1394,9,1394,69,[[1394,9,1394,22,"handleUnknown"],[1394,25,1394,69,[6,[1394,25,1394,50,[6,[1394,26,1394,31,[1,[1394,26,1394,31,[[],"Field"]],[]]],[1394,35,1394,49,[6,[1394,35,1394,40,[1,[1394,35,1394,40,[[],"Field"]],[]]],[1394,44,1394,49,[1,[1394,44,1394,49,[[],"Order"]],[]]]]]]],[1394,54,1394,69,[1,[1394,54,1394,58,[[],"List"]],[[1394,59,1394,69,[1,[1394,60,1394,65,[[],"Error"]],[[1394,66,1394,68,[4,[]]]]]]]]]]]]]],[1395,9,1407,23,[[1395,9,1395,22,"handleUnknown"],[[1395,23,1395,39,[11,"whenAlphabetical"]]],[1396,13,1407,23,[17,[[1396,18,1396,29,[2,[],"sortUnknown"]],[[[1397,17,1397,31,[12,[[],"Alphabetically"],[]]],[1399,21,1399,52,[0,[[1399,21,1399,35,[2,[],"checkSortingBy"]],[1399,36,1399,52,[2,[],"whenAlphabetical"]]]]]],[[1401,17,1401,27,[12,[[],"ReportOnly"],[]]],[1403,21,1403,56,[0,[[1403,21,1403,39,[2,[],"unknownRecordError"]],[1403,40,1403,46,[2,[],"record"]],[1403,47,1403,56,[2,[],"fullRange"]]]]]],[[1405,17,1405,26,[12,[[],"DoNotSort"],[]]],[1407,21,1407,23,[9,[]]]]]]]]]]]]],[1409,9,1467,21,[0,[[0],[1,[1409,9,1418,14,[[1409,9,1409,23,"matchingOrders"],[1410,13,1418,14,[3,[[1410,15,1416,18,[1,[1410,15,1410,19,[[],"List"]],[[1411,17,1416,18,[4,[[1411,19,1411,57,[[1411,19,1411,38,"canonicalFieldTypes"],[1411,41,1411,57,[1,[1411,41,1411,45,[[],"Dict"]],[[1411,46,1411,52,[1,[1411,46,1411,52,[[],"String"]],[]]],[1411,53,1411,57,[1,[1411,53,1411,57,[[],"Type"]],[]]]]]]]],[1412,19,1413,17,[[1412,19,1412,29,"fieldOrder"],[1412,32,1412,47,[1,[1412,32,1412,36,[[],"Dict"]],[[1412,37,1412,43,[1,[1412,37,1412,43,[[],"String"]],[]]],[1412,44,1412,47,[1,[1412,44,1412,47,[[],"Int"]],[]]]]]]]],[1413,19,1414,17,[[1413,19,1413,35,"hasUnknownFields"],[1413,38,1413,42,[1,[1413,38,1413,42,[[],"Bool"]],[]]]]],[1414,19,1415,17,[[1414,19,1414,30,"isSubrecord"],[1414,33,1414,37,[1,[1414,33,1414,37,[[],"Bool"]],[]]]]],[1415,19,1416,17,[[1415,19,1415,27,"typeName"],[1415,30,1415,57,[1,[1415,30,1415,34,[[],"List"]],[[1415,35,1415,57,[3,[[1415,37,1415,47,[1,[1415,37,1415,47,[[],"ModuleName"]],[]]],[1415,49,1415,55,[1,[1415,49,1415,55,[[],"String"]],[]]]]]]]]]]]]]]]]],[1417,15,1417,19,[1,[1417,15,1417,19,[[],"Bool"]],[]]]]]]]]],[1419,9,1467,21,[[1419,9,1419,23,"matchingOrders"],[],[1420,13,1467,21,[1,"|>",0,[1420,13,1452,93,[1,"|>",0,[1420,13,1451,52,[1,"|>",0,[1420,13,1450,31,[1,"|>",0,[1420,13,1449,22,[1,"|>",0,[1420,13,1434,22,[1,"|>",0,[1420,13,1420,62,[0,[[1420,13,1420,30,[2,[],"findMatchingTypes"]],[1420,31,1420,37,[2,[],"config"]],[1420,38,1420,45,[2,[],"context"]],[1420,46,1420,55,[2,[],"orderInfo"]],[1420,56,1420,62,[2,[],"fields"]]]]],[1421,20,1434,22,[0,[[1421,20,1421,28,[2,["List"],"map"]],[1422,21,1434,22,[7,[1422,22,1433,33,[18,[[[1422,23,1422,60,[8,[[1422,25,1422,35,"fieldOrder"],[1422,37,1422,48,"isSubrecord"],[1422,50,1422,58,"typeName"]]]]],[1423,25,1433,33,[1,"|>",0,[1423,25,1423,65,[0,[[1423,25,1423,34,[2,[],"makeOrder"]],[1423,35,1423,47,[2,[],"sortGenerics"]],[1423,48,1423,54,[2,[],"fields"]],[1423,55,1423,65,[2,[],"fieldOrder"]]]]],[1424,32,1433,33,[7,[1424,33,1432,38,[18,[[[1424,34,1424,35,[11,"o"]]],[1425,37,1432,38,[6,[[1425,39,1425,63,[0,[[1425,39,1425,50,[2,["Dict"],"toList"]],[1425,51,1425,63,[19,[1425,51,1425,52,[2,[],"o"]],[1425,53,1425,63,"fieldOrder"]]]]]],[1426,39,1431,40,[8,[[1426,41,1426,84,[[1426,41,1426,60,"canonicalFieldTypes"],[1426,63,1426,84,[19,[1426,63,1426,64,[2,[],"o"]],[1426,65,1426,84,"canonicalFieldTypes"]]]]],[1427,41,1428,39,[[1427,41,1427,51,"fieldOrder"],[1427,54,1427,66,[19,[1427,54,1427,55,[2,[],"o"]],[1427,56,1427,66,"fieldOrder"]]]]],[1428,41,1429,39,[[1428,41,1428,57,"hasUnknownFields"],[1428,60,1428,78,[19,[1428,60,1428,61,[2,[],"o"]],[1428,62,1428,78,"hasUnknownFields"]]]]],[1429,41,1430,39,[[1429,41,1429,52,"isSubrecord"],[1429,55,1429,66,[2,[],"isSubrecord"]]]],[1430,41,1431,39,[[1430,41,1430,49,"typeName"],[1430,52,1430,60,[2,[],"typeName"]]]]]]]]]]]]]]]]]]]]]]]]]]],[1436,20,1449,22,[0,[[1436,20,1436,40,[2,["DictX"],"fromListDedupe"]],[1437,21,1449,22,[7,[1437,22,1448,33,[18,[[[1437,23,1437,25,[11,"o1"]],[1437,26,1437,28,[11,"o2"]]],[1438,25,1448,33,[1,"|>",0,[1438,25,1444,26,[7,[1438,26,1443,31,[11,[1438,29,1438,48,[19,[1438,29,1438,31,[2,[],"o1"]],[1438,32,1438,48,"hasUnknownFields"]]],[1440,29,1440,31,[2,[],"o2"]],[1443,29,1443,31,[2,[],"o1"]]]]]],[1445,32,1448,33,[7,[1445,33,1447,138,[18,[[[1445,34,1445,35,[11,"o"]]],[1447,37,1447,138,[21,[1447,39,1447,40,"o"],[[1447,43,1447,137,[[1447,43,1447,62,"canonicalFieldTypes"],[1447,65,1447,136,[0,[[1447,65,1447,91,[2,[],"keepOnlyMatchingFieldTypes"]],[1447,92,1447,113,[19,[1447,92,1447,93,[2,[],"o"]],[1447,94,1447,113,"canonicalFieldTypes"]]],[1447,114,1447,136,[19,[1447,114,1447,116,[2,[],"o2"]],[1447,117,1447,136,"canonicalFieldTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1450,20,1450,31,[2,["Dict"],"values"]]]],[1451,20,1451,52,[0,[[1451,20,1451,34,[2,["List"],"partition"]],[1451,35,1451,52,[20,".hasUnknownFields"]]]]]]],[1452,20,1452,93,[0,[[1452,20,1452,33,[2,["Tuple"],"mapBoth"]],[1452,34,1452,63,[7,[1452,35,1452,62,[0,[[1452,35,1452,49,[2,["List"],"partition"]],[1452,50,1452,62,[20,".isSubrecord"]]]]]]],[1452,64,1452,93,[7,[1452,65,1452,92,[0,[[1452,65,1452,79,[2,["List"],"partition"]],[1452,80,1452,92,[20,".isSubrecord"]]]]]]]]]]]],[1453,20,1467,21,[7,[1453,21,1466,65,[18,[[[1453,22,1453,24,[11,"os"]]],[1454,25,1466,65,[17,[[1454,30,1454,32,[2,[],"os"]],[[[1456,29,1456,71,[7,[[1456,31,1456,57,[7,[[1456,33,1456,51,[11,"unknownIsSubrecord"]],[1456,53,1456,55,[10,[]]]]]],[1456,59,1456,69,[7,[[1456,61,1456,63,[10,[]]],[1456,65,1456,67,[10,[]]]]]]]]],[1457,33,1457,61,[6,[[1457,35,1457,53,[2,[],"unknownIsSubrecord"]],[1457,55,1457,59,[2,[],"True"]]]]]],[[1459,29,1459,71,[7,[[1459,31,1459,57,[7,[[1459,33,1459,34,[0]],[1459,36,1459,55,[11,"unknownNotSubrecord"]]]]],[1459,59,1459,69,[7,[[1459,61,1459,63,[10,[]]],[1459,65,1459,67,[10,[]]]]]]]]],[1460,33,1460,62,[6,[[1460,35,1460,54,[2,[],"unknownNotSubrecord"]],[1460,56,1460,60,[2,[],"True"]]]]]],[[1462,29,1462,64,[7,[[1462,31,1462,32,[0]],[1462,34,1462,62,[7,[[1462,36,1462,56,[11,"noUnknownIsSubrecord"]],[1462,58,1462,60,[10,[]]]]]]]]],[1463,33,1463,64,[6,[[1463,35,1463,55,[2,[],"noUnknownIsSubrecord"]],[1463,57,1463,62,[2,[],"False"]]]]]],[[1465,29,1465,64,[7,[[1465,31,1465,32,[0]],[1465,34,1465,62,[7,[[1465,36,1465,37,[0]],[1465,39,1465,60,[11,"noUnknownNotSubrecord"]]]]]]]],[1466,33,1466,65,[6,[[1466,35,1466,56,[2,[],"noUnknownNotSubrecord"]],[1466,58,1466,63,[2,[],"False"]]]]]]]]]]]]]]]]]]]]]]],[1469,5,1506,50,[17,[[1469,10,1469,24,[2,[],"matchingOrders"]],[[[1470,9,1470,18,[7,[[1470,11,1470,13,[10,[]]],[1470,15,1470,16,[0]]]]],[1473,13,1473,55,[6,[[1473,15,1473,41,[0,[[1473,15,1473,28,[2,[],"handleUnknown"]],[1473,29,1473,41,[2,[],"alphabetical"]]]]],[1473,43,1473,53,[2,["Dict"],"empty"]]]]]],[[1475,9,1475,58,[7,[[1475,11,1475,50,[10,[[1475,13,1475,48,[8,[[1475,15,1475,34,"canonicalFieldTypes"],[1475,36,1475,46,"fieldOrder"]]]]]]],[1475,52,1475,56,[12,[[],"True"],[]]]]]],[1477,13,1477,77,[6,[[1477,15,1477,54,[0,[[1477,15,1477,28,[2,[],"handleUnknown"]],[1477,29,1477,54,[7,[1477,30,1477,53,[0,[[1477,30,1477,42,[2,[],"byFieldOrder"]],[1477,43,1477,53,[2,[],"fieldOrder"]]]]]]]]]],[1477,56,1477,75,[2,[],"canonicalFieldTypes"]]]]]],[[1479,9,1479,59,[7,[[1479,11,1479,50,[10,[[1479,13,1479,48,[8,[[1479,15,1479,34,"canonicalFieldTypes"],[1479,36,1479,46,"fieldOrder"]]]]]]],[1479,52,1479,57,[12,[[],"False"],[]]]]]],[1481,13,1481,79,[6,[[1481,15,1481,56,[1,"<|",1,[1481,15,1481,29,[2,[],"checkSortingBy"]],[1481,33,1481,56,[0,[[1481,33,1481,45,[2,[],"byFieldOrder"]],[1481,46,1481,56,[2,[],"fieldOrder"]]]]]]],[1481,58,1481,77,[2,[],"canonicalFieldTypes"]]]]]],[[1483,9,1483,25,[7,[[1483,11,1483,20,[11,"ambiguous"]],[1483,22,1483,23,[0]]]]],[1485,13,1506,50,[16,[[[1486,17,1491,34,[0,[[0],[1,[1486,17,1486,57,[[1486,17,1486,38,"unambiguousFieldTypes"],[1486,41,1486,57,[1,[1486,41,1486,45,[[],"Dict"]],[[1486,46,1486,52,[1,[1486,46,1486,52,[[],"String"]],[]]],[1486,53,1486,57,[1,[1486,53,1486,57,[[],"Type"]],[]]]]]]]]],[1487,17,1491,34,[[1487,17,1487,38,"unambiguousFieldTypes"],[],[1489,21,1491,34,[0,[[1489,21,1489,31,[2,["List"],"foldl"]],[1489,32,1489,116,[7,[1489,33,1489,115,[18,[[[1489,34,1489,57,[8,[[1489,36,1489,55,"canonicalFieldTypes"]]]],[1489,58,1489,61,[11,"acc"]]],[1489,65,1489,115,[0,[[1489,65,1489,91,[2,[],"keepOnlyMatchingFieldTypes"]],[1489,92,1489,111,[2,[],"canonicalFieldTypes"]],[1489,112,1489,115,[2,[],"acc"]]]]]]]]]],[1490,25,1490,35,[2,["Dict"],"empty"]],[1491,25,1491,34,[2,[],"ambiguous"]]]]]]]]]]],[1493,13,1506,50,[17,[[1493,18,1493,31,[2,[],"sortAmbiguous"]],[[[1494,17,1494,31,[12,[[],"Alphabetically"],[]]],[1496,21,1496,75,[6,[[1496,23,1496,50,[0,[[1496,23,1496,37,[2,[],"checkSortingBy"]],[1496,38,1496,50,[2,[],"alphabetical"]]]]],[1496,52,1496,73,[2,[],"unambiguousFieldTypes"]]]]]],[[1498,17,1498,27,[12,[[],"ReportOnly"],[]]],[1500,21,1502,22,[6,[[1500,23,1500,150,[0,[[1500,23,1500,43,[2,[],"ambiguousRecordError"]],[1500,44,1500,50,[2,[],"record"]],[1500,51,1500,140,[7,[1500,52,1500,139,[0,[[1500,52,1500,60,[2,["List"],"map"]],[1500,61,1500,129,[7,[1500,62,1500,128,[1,"<<",0,[1500,62,1500,115,[0,[[1500,62,1500,70,[2,["List"],"map"]],[1500,71,1500,115,[7,[1500,72,1500,114,[18,[[[1500,73,1500,81,[7,[[1500,75,1500,76,[11,"m"]],[1500,78,1500,79,[11,"n"]]]]]],[1500,85,1500,114,[1,"<|",1,[1500,85,1500,100,[0,[[1500,85,1500,96,[2,["String"],"join"]],[1500,97,1500,100,[5,"."]]]]],[1500,104,1500,114,[1,"++",1,[1500,104,1500,105,[2,[],"m"]],[1500,109,1500,114,[9,[[1500,111,1500,112,[2,[],"n"]]]]]]]]]]]]]]]]],[1500,119,1500,128,[20,".typeName"]]]]]],[1500,130,1500,139,[2,[],"ambiguous"]]]]]]],[1500,141,1500,150,[2,[],"fullRange"]]]]],[1501,23,1501,44,[2,[],"unambiguousFieldTypes"]]]]]],[[1504,17,1504,26,[12,[[],"DoNotSort"],[]]],[1506,21,1506,50,[6,[[1506,23,1506,25,[9,[]]],[1506,27,1506,48,[2,[],"unambiguousFieldTypes"]]]]]]]]]]]]]]]]]]]]]]]]]],[1509,1,1585,15,[0,[[1,[1509,1,1510,3,"{-| Descend into type annotations, checking for unsorted records.\n-}"]],[1,[1511,1,1511,118,[[1511,1,1511,20,"checkTypeAnnotation"],[1511,23,1511,118,[6,[1511,23,1511,33,[1,[1511,23,1511,33,[[],"RuleConfig"]],[]]],[1511,37,1511,118,[6,[1511,37,1511,50,[1,[1511,37,1511,50,[[],"ModuleContext"]],[]]],[1511,54,1511,118,[6,[1511,54,1511,76,[1,[1511,54,1511,59,[[],"Maybe"]],[[1511,60,1511,76,[1,[1511,60,1511,76,[[],"DereferencedType"]],[]]]]]],[1511,80,1511,118,[6,[1511,80,1511,99,[1,[1511,80,1511,84,[[],"Node"]],[[1511,85,1511,99,[1,[1511,85,1511,99,[[],"TypeAnnotation"]],[]]]]]],[1511,103,1511,118,[1,[1511,103,1511,107,[[],"List"]],[[1511,108,1511,118,[1,[1511,109,1511,114,[[],"Error"]],[[1511,115,1511,117,[4,[]]]]]]]]]]]]]]]]]]]],[1512,1,1585,15,[[1512,1,1512,20,"checkTypeAnnotation"],[[1512,21,1512,27,[11,"config"]],[1512,28,1512,35,[11,"context"]],[1512,36,1512,53,[11,"hasTypeFromParent"]],[1512,54,1512,59,[11,"type_"]]],[1513,5,1585,15,[16,[[[1514,9,1523,27,[0,[[0],[1,[1514,9,1514,124,[[1514,9,1514,20,"checkFields"],[1514,23,1514,124,[6,[1514,23,1514,64,[1,[1514,23,1514,27,[[],"List"]],[[1514,28,1514,64,[3,[[1514,30,1514,41,[1,[1514,30,1514,34,[[],"Node"]],[[1514,35,1514,41,[1,[1514,35,1514,41,[[],"String"]],[]]]]]],[1514,43,1514,62,[1,[1514,43,1514,47,[[],"Node"]],[[1514,48,1514,62,[1,[1514,48,1514,62,[[],"TypeAnnotation"]],[]]]]]]]]]]]],[1514,68,1514,124,[6,[1514,68,1514,105,[3,[[1514,70,1514,85,[1,[1514,70,1514,74,[[],"List"]],[[1514,75,1514,85,[1,[1514,76,1514,81,[[],"Error"]],[[1514,82,1514,84,[4,[]]]]]]]]],[1514,87,1514,103,[1,[1514,87,1514,91,[[],"Dict"]],[[1514,92,1514,98,[1,[1514,92,1514,98,[[],"String"]],[]]],[1514,99,1514,103,[1,[1514,99,1514,103,[[],"Type"]],[]]]]]]]]],[1514,109,1514,124,[1,[1514,109,1514,113,[[],"List"]],[[1514,114,1514,124,[1,[1514,115,1514,120,[[],"Error"]],[[1514,121,1514,123,[4,[]]]]]]]]]]]]]]]],[1515,9,1523,27,[[1515,9,1515,20,"checkFields"],[[1515,21,1515,27,[11,"fields"]],[1515,28,1515,72,[7,[[1515,30,1515,41,[11,"parentError"]],[1515,43,1515,70,[11,"canonicalTypeInfoFromParent"]]]]]],[1516,13,1523,27,[1,"++",1,[1516,13,1516,24,[2,[],"parentError"]],[1517,20,1523,27,[0,[[1517,20,1517,34,[2,["List"],"concatMap"]],[1518,21,1522,22,[7,[1518,22,1521,78,[18,[[[1518,23,1518,35,[7,[[1518,25,1518,30,[11,"field"]],[1518,32,1518,33,[11,"a"]]]]]],[1519,25,1521,78,[1,"|>",0,[1519,25,1520,67,[1,"|>",0,[1519,25,1519,80,[0,[[1519,25,1519,33,[2,["Dict"],"get"]],[1519,34,1519,52,[7,[1519,35,1519,51,[0,[[1519,35,1519,45,[2,["Node"],"value"]],[1519,46,1519,51,[2,[],"field"]]]]]]],[1519,53,1519,80,[2,[],"canonicalTypeInfoFromParent"]]]]],[1520,32,1520,67,[0,[[1520,32,1520,41,[2,["Maybe"],"map"]],[1520,42,1520,67,[7,[1520,43,1520,66,[0,[[1520,43,1520,58,[2,[],"dereferenceType"]],[1520,59,1520,66,[2,[],"context"]]]]]]]]]]]],[1521,32,1521,78,[7,[1521,33,1521,77,[18,[[[1521,34,1521,35,[11,"t"]]],[1521,39,1521,77,[0,[[1521,39,1521,58,[2,[],"checkTypeAnnotation"]],[1521,59,1521,65,[2,[],"config"]],[1521,66,1521,73,[2,[],"context"]],[1521,74,1521,75,[2,[],"t"]],[1521,76,1521,77,[2,[],"a"]]]]]]]]]]]]]]]]],[1523,21,1523,27,[2,[],"fields"]]]]]]]]]]]],[1525,9,1527,47,[0,[[0],[1,[1525,9,1525,78,[[1525,9,1525,11,"go"],[1525,14,1525,78,[6,[1525,14,1525,36,[1,[1525,14,1525,19,[[],"Maybe"]],[[1525,20,1525,36,[1,[1525,20,1525,36,[[],"DereferencedType"]],[]]]]]],[1525,40,1525,78,[6,[1525,40,1525,59,[1,[1525,40,1525,44,[[],"Node"]],[[1525,45,1525,59,[1,[1525,45,1525,59,[[],"TypeAnnotation"]],[]]]]]],[1525,63,1525,78,[1,[1525,63,1525,67,[[],"List"]],[[1525,68,1525,78,[1,[1525,69,1525,74,[[],"Error"]],[[1525,75,1525,77,[4,[]]]]]]]]]]]]]]]],[1526,9,1527,47,[[1526,9,1526,11,"go"],[],[1527,13,1527,47,[0,[[1527,13,1527,32,[2,[],"checkTypeAnnotation"]],[1527,33,1527,39,[2,[],"config"]],[1527,40,1527,47,[2,[],"context"]]]]]]]]]]],[1529,5,1585,15,[17,[[1529,10,1529,26,[0,[[1529,10,1529,20,[2,["Node"],"value"]],[1529,21,1529,26,[2,[],"type_"]]]]],[[[1531,9,1531,19,[12,[[],"Record"],[[1531,16,1531,19,[11,"def"]]]]],[1532,13,1536,57,[1,"|>",0,[1532,13,1534,14,[7,[1532,14,1533,46,[1,"|>",0,[1532,14,1532,88,[0,[[1532,14,1532,34,[2,[],"recordDefToCheckable"]],[1532,35,1532,42,[2,[],"context"]],[1532,43,1532,61,[7,[1532,44,1532,60,[0,[[1532,44,1532,54,[2,["Node"],"range"]],[1532,55,1532,60,[2,[],"type_"]]]]]]],[1532,62,1532,66,[2,[],"True"]],[1532,67,1532,84,[2,[],"hasTypeFromParent"]],[1532,85,1532,88,[2,[],"def"]]]]],[1533,20,1533,46,[0,[[1533,20,1533,31,[2,[],"checkRecord"]],[1533,32,1533,38,[2,[],"config"]],[1533,39,1533,46,[2,[],"context"]]]]]]]]],[1536,20,1536,57,[0,[[1536,20,1536,31,[2,[],"checkFields"]],[1536,32,1536,57,[7,[1536,33,1536,56,[0,[[1536,33,1536,41,[2,["List"],"map"]],[1536,42,1536,52,[2,["Node"],"value"]],[1536,53,1536,56,[2,[],"def"]]]]]]]]]]]]],[[1538,9,1538,28,[12,[[],"GenericRecord"],[[1538,23,1538,24,[0]],[1538,25,1538,28,[11,"def"]]]]],[1539,13,1543,71,[1,"|>",0,[1539,13,1541,14,[7,[1539,14,1540,46,[1,"|>",0,[1539,14,1539,102,[0,[[1539,14,1539,34,[2,[],"recordDefToCheckable"]],[1539,35,1539,42,[2,[],"context"]],[1539,43,1539,61,[7,[1539,44,1539,60,[0,[[1539,44,1539,54,[2,["Node"],"range"]],[1539,55,1539,60,[2,[],"type_"]]]]]]],[1539,62,1539,67,[2,[],"False"]],[1539,68,1539,85,[2,[],"hasTypeFromParent"]],[1539,86,1539,102,[7,[1539,87,1539,101,[0,[[1539,87,1539,97,[2,["Node"],"value"]],[1539,98,1539,101,[2,[],"def"]]]]]]]]]],[1540,20,1540,46,[0,[[1540,20,1540,31,[2,[],"checkRecord"]],[1540,32,1540,38,[2,[],"config"]],[1540,39,1540,46,[2,[],"context"]]]]]]]]],[1543,20,1543,71,[0,[[1543,20,1543,31,[2,[],"checkFields"]],[1543,32,1543,71,[7,[1543,33,1543,70,[1,"<|",1,[1543,33,1543,52,[0,[[1543,33,1543,41,[2,["List"],"map"]],[1543,42,1543,52,[2,["Node"],"value"]]]]],[1543,56,1543,70,[0,[[1543,56,1543,66,[2,["Node"],"value"]],[1543,67,1543,70,[2,[],"def"]]]]]]]]]]]]]]],[[1546,9,1546,41,[12,[[],"FunctionTypeAnnotation"],[[1546,32,1546,37,[11,"fromA"]],[1546,38,1546,41,[11,"toA"]]]]],[1547,13,1556,47,[16,[[[1548,17,1554,49,[1,[1548,17,1548,37,[7,[[1548,19,1548,27,[11,"fromType"]],[1548,29,1548,35,[11,"toType"]]]]],[1549,21,1554,49,[17,[[1549,26,1549,61,[0,[[1549,26,1549,35,[2,["Maybe"],"map"]],[1549,36,1549,43,[2,[],"getType"]],[1549,44,1549,61,[2,[],"hasTypeFromParent"]]]]],[[[1550,25,1550,57,[12,[[],"Just"],[[1550,30,1550,57,[14,[1550,31,1550,56,[12,[[],"FunctionType"],[[1550,44,1550,56,[8,[[1550,46,1550,50,"from"],[1550,52,1550,54,"to"]]]]]]]]]]]],[1551,29,1551,91,[6,[[1551,31,1551,60,[1,"<|",1,[1551,31,1551,35,[2,[],"Just"]],[1551,39,1551,60,[0,[[1551,39,1551,55,[2,[],"DereferencedType"]],[1551,56,1551,60,[2,[],"from"]]]]]]],[1551,62,1551,89,[1,"<|",1,[1551,62,1551,66,[2,[],"Just"]],[1551,70,1551,89,[0,[[1551,70,1551,86,[2,[],"DereferencedType"]],[1551,87,1551,89,[2,[],"to"]]]]]]]]]]],[[1553,25,1553,26,[0]],[1554,29,1554,49,[6,[[1554,31,1554,38,[2,[],"Nothing"]],[1554,40,1554,47,[2,[],"Nothing"]]]]]]]]]]]]],[1556,13,1556,47,[1,"++",1,[1556,13,1556,30,[0,[[1556,13,1556,15,[2,[],"go"]],[1556,16,1556,24,[2,[],"fromType"]],[1556,25,1556,30,[2,[],"fromA"]]]]],[1556,34,1556,47,[0,[[1556,34,1556,36,[2,[],"go"]],[1556,37,1556,43,[2,[],"toType"]],[1556,44,1556,47,[2,[],"toA"]]]]]]]]]]],[[1558,9,1558,22,[12,[[],"Tupled"],[[1558,16,1558,22,[11,"types_"]]]]],[1560,13,1561,31,[1,"|>",0,[1560,13,1560,73,[0,[[1560,13,1560,22,[2,["List"],"map2"]],[1560,23,1560,25,[2,[],"go"]],[1560,26,1560,66,[7,[1560,27,1560,65,[0,[[1560,27,1560,40,[2,[],"getTupleTypes"]],[1560,41,1560,47,[2,[],"types_"]],[1560,48,1560,65,[2,[],"hasTypeFromParent"]]]]]]],[1560,67,1560,73,[2,[],"types_"]]]]],[1561,20,1561,31,[2,["List"],"concat"]]]]],[[1563,9,1563,23,[12,[[],"Typed"],[[1563,15,1563,16,[0]],[1563,17,1563,23,[11,"types_"]]]]],[1564,13,1578,31,[16,[[[1565,17,1575,61,[0,[[0],[1,[1565,17,1565,57,[[1565,17,1565,25,"typeVars"],[1565,28,1565,57,[1,[1565,28,1565,32,[[],"List"]],[[1565,33,1565,57,[1,[1565,34,1565,39,[[],"Maybe"]],[[1565,40,1565,56,[1,[1565,40,1565,56,[[],"DereferencedType"]],[]]]]]]]]]]]],[1566,17,1575,61,[[1566,17,1566,25,"typeVars"],[],[1567,21,1575,61,[17,[[1567,26,1567,61,[0,[[1567,26,1567,35,[2,["Maybe"],"map"]],[1567,36,1567,43,[2,[],"getType"]],[1567,44,1567,61,[2,[],"hasTypeFromParent"]]]]],[[[1568,25,1568,46,[12,[[],"Just"],[[1568,30,1568,46,[14,[1568,31,1568,45,[12,[[],"NamedType"],[[1568,41,1568,42,[0]],[1568,43,1568,45,[11,"ts"]]]]]]]]]],[1569,29,1569,67,[0,[[1569,29,1569,37,[2,["List"],"map"]],[1569,38,1569,64,[7,[1569,39,1569,63,[1,"<<",0,[1569,39,1569,43,[2,[],"Just"]],[1569,47,1569,63,[2,[],"DereferencedType"]]]]]],[1569,65,1569,67,[2,[],"ts"]]]]]],[[1571,25,1571,42,[12,[[],"Just"],[[1571,30,1571,42,[14,[1571,31,1571,41,[12,[[],"ListType"],[[1571,40,1571,41,[11,"t"]]]]]]]]]],[1572,29,1572,59,[9,[[1572,31,1572,57,[1,"<|",1,[1572,31,1572,35,[2,[],"Just"]],[1572,39,1572,57,[0,[[1572,39,1572,55,[2,[],"DereferencedType"]],[1572,56,1572,57,[2,[],"t"]]]]]]]]]]],[[1574,25,1574,26,[0]],[1575,29,1575,61,[0,[[1575,29,1575,37,[2,["List"],"map"]],[1575,38,1575,54,[7,[1575,39,1575,53,[0,[[1575,39,1575,45,[2,[],"always"]],[1575,46,1575,53,[2,[],"Nothing"]]]]]]],[1575,55,1575,61,[2,[],"types_"]]]]]]]]]]]]]]]],[1577,13,1578,31,[1,"|>",0,[1577,13,1577,41,[0,[[1577,13,1577,22,[2,["List"],"map2"]],[1577,23,1577,25,[2,[],"go"]],[1577,26,1577,34,[2,[],"typeVars"]],[1577,35,1577,41,[2,[],"types_"]]]]],[1578,20,1578,31,[2,["List"],"concat"]]]]]]]],[[1581,9,1581,22,[12,[[],"GenericType"],[[1581,21,1581,22,[0]]]]],[1582,13,1582,15,[9,[]]]],[[1584,9,1584,13,[12,[[],"Unit"],[]]],[1585,13,1585,15,[9,[]]]]]]]]]]]]]]]],[1588,1,1597,15,[0,[[1,[1588,1,1589,3,"{-| Visit each TLD and check it in turn.\n-}"]],[1,[1590,1,1590,93,[[1590,1,1590,24,"declarationEnterVisitor"],[1590,27,1590,93,[6,[1590,27,1590,37,[1,[1590,27,1590,37,[[],"RuleConfig"]],[]]],[1590,41,1590,93,[6,[1590,41,1590,54,[1,[1590,41,1590,54,[[],"ModuleContext"]],[]]],[1590,58,1590,93,[6,[1590,58,1590,74,[1,[1590,58,1590,62,[[],"Node"]],[[1590,63,1590,74,[1,[1590,63,1590,74,[[],"Declaration"]],[]]]]]],[1590,78,1590,93,[1,[1590,78,1590,82,[[],"List"]],[[1590,83,1590,93,[1,[1590,84,1590,89,[[],"Error"]],[[1590,90,1590,92,[4,[]]]]]]]]]]]]]]]]]],[1591,1,1597,15,[[1591,1,1591,24,"declarationEnterVisitor"],[[1591,25,1591,31,[11,"config"]],[1591,32,1591,39,[11,"context"]],[1591,40,1591,44,[11,"node"]]],[1592,5,1597,15,[17,[[1592,10,1592,25,[0,[[1592,10,1592,20,[2,["Node"],"value"]],[1592,21,1592,25,[2,[],"node"]]]]],[[[1593,9,1593,30,[12,[[],"FunctionDeclaration"],[[1593,29,1593,30,[11,"f"]]]]],[1594,13,1594,97,[0,[[1594,13,1594,37,[2,[],"checkFunctionDeclaration"]],[1594,38,1594,44,[2,[],"config"]],[1594,45,1594,95,[8,[[1594,47,1594,64,[[1594,47,1594,54,"context"],[1594,57,1594,64,[2,[],"context"]]]],[1594,66,1594,94,[[1594,66,1594,80,"localFunctions"],[1594,83,1594,93,[2,["Dict"],"empty"]]]]]]],[1594,96,1594,97,[2,[],"f"]]]]]],[[1596,9,1596,10,[0]],[1597,13,1597,15,[9,[]]]]]]]]]]]]],[1600,1,1686,13,[0,[[1,[1600,1,1601,3,"{-| Visit declarations, storing record field orders.\n-}"]],[1,[1602,1,1626,10,[[1602,1,1602,23,"declarationListVisitor"],[1603,5,1626,10,[6,[1603,5,1603,15,[1,[1603,5,1603,15,[[],"RuleConfig"]],[]]],[1605,9,1626,10,[6,[1605,9,1613,10,[4,[[1605,11,1605,73,[[1605,11,1605,18,"aliases"],[1605,21,1605,73,[1,[1605,21,1605,25,[[],"Dict"]],[[1605,26,1605,36,[1,[1605,26,1605,36,[[],"ModuleName"]],[]]],[1605,37,1605,73,[1,[1605,38,1605,42,[[],"Dict"]],[[1605,43,1605,49,[1,[1605,43,1605,49,[[],"String"]],[]]],[1605,50,1605,72,[1,[1605,50,1605,72,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1606,11,1607,9,[[1606,11,1606,27,"canonicalRecords"],[1606,30,1606,71,[1,[1606,30,1606,34,[[],"Dict"]],[[1606,35,1606,45,[1,[1606,35,1606,45,[[],"ModuleName"]],[]]],[1606,46,1606,71,[1,[1606,47,1606,51,[[],"Dict"]],[[1606,52,1606,58,[1,[1606,52,1606,58,[[],"String"]],[]]],[1606,59,1606,70,[1,[1606,59,1606,70,[[],"KnownRecord"]],[]]]]]]]]]]],[1607,11,1608,9,[[1607,11,1607,23,"constructors"],[1607,26,1607,121,[1,[1607,26,1607,30,[[],"Dict"]],[[1607,31,1607,41,[1,[1607,31,1607,41,[[],"ModuleName"]],[]]],[1607,42,1607,121,[1,[1607,43,1607,47,[[],"Dict"]],[[1607,48,1607,54,[1,[1607,48,1607,54,[[],"String"]],[]]],[1607,55,1607,120,[4,[[1607,57,1607,86,[[1607,57,1607,71,"customTypeName"],[1607,74,1607,86,[1,[1607,74,1607,79,[[],"Maybe"]],[[1607,80,1607,86,[1,[1607,80,1607,86,[[],"String"]],[]]]]]]]],[1607,88,1607,119,[[1607,88,1607,93,"type_"],[1607,96,1607,118,[1,[1607,96,1607,118,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1608,11,1609,9,[[1608,11,1608,23,"exposingList"],[1608,26,1608,44,[1,[1608,26,1608,31,[[],"Maybe"]],[[1608,32,1608,44,[1,[1608,32,1608,44,[[],"ExposedNames"]],[]]]]]]]],[1609,11,1610,9,[[1609,11,1609,24,"fileIsIgnored"],[1609,27,1609,31,[1,[1609,27,1609,31,[[],"Bool"]],[]]]]],[1610,11,1611,9,[[1610,11,1610,24,"functionTypes"],[1610,27,1610,61,[1,[1610,27,1610,31,[[],"Dict"]],[[1610,32,1610,42,[1,[1610,32,1610,42,[[],"ModuleName"]],[]]],[1610,43,1610,61,[1,[1610,44,1610,48,[[],"Dict"]],[[1610,49,1610,55,[1,[1610,49,1610,55,[[],"String"]],[]]],[1610,56,1610,60,[1,[1610,56,1610,60,[[],"Type"]],[]]]]]]]]]]],[1611,11,1612,9,[[1611,11,1611,22,"lookupTable"],[1611,25,1611,46,[1,[1611,25,1611,46,[[],"ModuleNameLookupTable"]],[]]]]],[1612,11,1613,9,[[1612,11,1612,21,"moduleName"],[1612,24,1612,34,[1,[1612,24,1612,34,[[],"ModuleName"]],[]]]]]]]],[1614,8,1626,10,[6,[1614,8,1614,31,[1,[1614,8,1614,12,[[],"List"]],[[1614,13,1614,31,[1,[1614,14,1614,18,[[],"Node"]],[[1614,19,1614,30,[1,[1614,19,1614,30,[[],"Declaration"]],[]]]]]]]]],[1616,9,1626,10,[4,[[1616,11,1616,73,[[1616,11,1616,18,"aliases"],[1616,21,1616,73,[1,[1616,21,1616,25,[[],"Dict"]],[[1616,26,1616,36,[1,[1616,26,1616,36,[[],"ModuleName"]],[]]],[1616,37,1616,73,[1,[1616,38,1616,42,[[],"Dict"]],[[1616,43,1616,49,[1,[1616,43,1616,49,[[],"String"]],[]]],[1616,50,1616,72,[1,[1616,50,1616,72,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1617,11,1618,9,[[1617,11,1617,27,"canonicalRecords"],[1617,30,1617,71,[1,[1617,30,1617,34,[[],"Dict"]],[[1617,35,1617,45,[1,[1617,35,1617,45,[[],"ModuleName"]],[]]],[1617,46,1617,71,[1,[1617,47,1617,51,[[],"Dict"]],[[1617,52,1617,58,[1,[1617,52,1617,58,[[],"String"]],[]]],[1617,59,1617,70,[1,[1617,59,1617,70,[[],"KnownRecord"]],[]]]]]]]]]]],[1618,11,1619,9,[[1618,11,1618,23,"constructors"],[1618,26,1618,121,[1,[1618,26,1618,30,[[],"Dict"]],[[1618,31,1618,41,[1,[1618,31,1618,41,[[],"ModuleName"]],[]]],[1618,42,1618,121,[1,[1618,43,1618,47,[[],"Dict"]],[[1618,48,1618,54,[1,[1618,48,1618,54,[[],"String"]],[]]],[1618,55,1618,120,[4,[[1618,57,1618,86,[[1618,57,1618,71,"customTypeName"],[1618,74,1618,86,[1,[1618,74,1618,79,[[],"Maybe"]],[[1618,80,1618,86,[1,[1618,80,1618,86,[[],"String"]],[]]]]]]]],[1618,88,1618,119,[[1618,88,1618,93,"type_"],[1618,96,1618,118,[1,[1618,96,1618,118,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[1619,11,1625,9,[[1619,11,1619,18,"exposed"],[1620,13,1624,14,[4,[[1620,15,1620,59,[[1620,15,1620,22,"aliases"],[1620,25,1620,59,[1,[1620,25,1620,29,[[],"Dict"]],[[1620,30,1620,36,[1,[1620,30,1620,36,[[],"String"]],[]]],[1620,37,1620,59,[1,[1620,37,1620,59,[[],"TypeWithPositionalVars"]],[]]]]]]]],[1621,15,1622,13,[[1621,15,1621,31,"canonicalRecords"],[1621,34,1621,57,[1,[1621,34,1621,38,[[],"Dict"]],[[1621,39,1621,45,[1,[1621,39,1621,45,[[],"String"]],[]]],[1621,46,1621,57,[1,[1621,46,1621,57,[[],"KnownRecord"]],[]]]]]]]],[1622,15,1623,13,[[1622,15,1622,27,"constructors"],[1622,30,1622,107,[1,[1622,30,1622,34,[[],"Dict"]],[[1622,35,1622,41,[1,[1622,35,1622,41,[[],"String"]],[]]],[1622,42,1622,107,[4,[[1622,44,1622,73,[[1622,44,1622,58,"customTypeName"],[1622,61,1622,73,[1,[1622,61,1622,66,[[],"Maybe"]],[[1622,67,1622,73,[1,[1622,67,1622,73,[[],"String"]],[]]]]]]]],[1622,75,1622,106,[[1622,75,1622,80,"type_"],[1622,83,1622,105,[1,[1622,83,1622,105,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]],[1623,15,1624,13,[[1623,15,1623,28,"functionTypes"],[1623,31,1623,47,[1,[1623,31,1623,35,[[],"Dict"]],[[1623,36,1623,42,[1,[1623,36,1623,42,[[],"String"]],[]]],[1623,43,1623,47,[1,[1623,43,1623,47,[[],"Type"]],[]]]]]]]]]]]]],[1625,11,1626,9,[[1625,11,1625,24,"functionTypes"],[1625,27,1625,61,[1,[1625,27,1625,31,[[],"Dict"]],[[1625,32,1625,42,[1,[1625,32,1625,42,[[],"ModuleName"]],[]]],[1625,43,1625,61,[1,[1625,44,1625,48,[[],"Dict"]],[[1625,49,1625,55,[1,[1625,49,1625,55,[[],"String"]],[]]],[1625,56,1625,60,[1,[1625,56,1625,60,[[],"Type"]],[]]]]]]]]]]]]]]]]]]]]]]],[1627,1,1686,13,[[1627,1,1627,23,"declarationListVisitor"],[[1627,24,1627,59,[14,[1627,25,1627,58,[12,[[],"RuleConfig"],[[1627,36,1627,58,[8,[[1627,38,1627,56,"subrecordTreatment"]]]]]]]]],[1627,60,1627,67,[11,"context"]],[1627,68,1627,80,[11,"declarations"]]],[1629,5,1686,13,[1,"|>",0,[1629,5,1639,21,[0,[[1629,5,1629,15,[2,["List"],"foldl"]],[1629,16,1629,70,[7,[1629,17,1629,69,[0,[[1629,17,1629,42,[2,[],"accumulateDeclarationInfo"]],[1629,43,1629,61,[2,[],"subrecordTreatment"]],[1629,62,1629,69,[2,[],"context"]]]]]]],[1630,9,1638,10,[8,[[1630,11,1630,23,[[1630,11,1630,18,"aliases"],[1630,21,1630,23,[9,[]]]]],[1631,11,1632,9,[[1631,11,1631,27,"canonicalRecords"],[1631,30,1631,32,[9,[]]]]],[1632,11,1633,9,[[1632,11,1632,23,"constructors"],[1632,26,1632,28,[9,[]]]]],[1633,11,1634,9,[[1633,11,1633,25,"exposedAliases"],[1633,28,1633,30,[9,[]]]]],[1634,11,1635,9,[[1634,11,1634,34,"exposedCanonicalRecords"],[1634,37,1634,39,[9,[]]]]],[1635,11,1636,9,[[1635,11,1635,30,"exposedConstructors"],[1635,33,1635,35,[9,[]]]]],[1636,11,1637,9,[[1636,11,1636,31,"exposedFunctionTypes"],[1636,34,1636,36,[9,[]]]]],[1637,11,1638,9,[[1637,11,1637,24,"functionTypes"],[1637,27,1637,29,[9,[]]]]]]]],[1639,9,1639,21,[2,[],"declarations"]]]]],[1640,12,1686,13,[7,[1640,13,1685,22,[18,[[[1640,14,1640,15,[11,"r"]]],[1641,17,1685,22,[11,[1641,20,1641,41,[19,[1641,20,1641,27,[2,[],"context"]],[1641,28,1641,41,"fileIsIgnored"]]],[1642,21,1656,22,[8,[[1642,23,1642,43,[[1642,23,1642,30,"aliases"],[1642,33,1642,43,[2,["Dict"],"empty"]]]],[1643,23,1644,21,[[1643,23,1643,39,"canonicalRecords"],[1643,42,1643,52,[2,["Dict"],"empty"]]]],[1644,23,1645,21,[[1644,23,1644,35,"constructors"],[1644,38,1644,48,[2,["Dict"],"empty"]]]],[1645,23,1655,21,[[1645,23,1645,30,"exposed"],[1646,25,1654,26,[8,[[1646,27,1647,59,[[1646,27,1646,34,"aliases"],[1647,29,1647,59,[0,[[1647,29,1647,42,[2,["Dict"],"fromList"]],[1647,43,1647,59,[19,[1647,43,1647,44,[2,[],"r"]],[1647,45,1647,59,"exposedAliases"]]]]]]]],[1648,27,1650,25,[[1648,27,1648,43,"canonicalRecords"],[1649,29,1649,68,[0,[[1649,29,1649,42,[2,["Dict"],"fromList"]],[1649,43,1649,68,[19,[1649,43,1649,44,[2,[],"r"]],[1649,45,1649,68,"exposedCanonicalRecords"]]]]]]]],[1650,27,1652,25,[[1650,27,1650,39,"constructors"],[1651,29,1651,64,[0,[[1651,29,1651,42,[2,["Dict"],"fromList"]],[1651,43,1651,64,[19,[1651,43,1651,44,[2,[],"r"]],[1651,45,1651,64,"exposedConstructors"]]]]]]]],[1652,27,1654,25,[[1652,27,1652,40,"functionTypes"],[1653,29,1653,65,[0,[[1653,29,1653,42,[2,["Dict"],"fromList"]],[1653,43,1653,65,[19,[1653,43,1653,44,[2,[],"r"]],[1653,45,1653,65,"exposedFunctionTypes"]]]]]]]]]]]]],[1655,23,1656,21,[[1655,23,1655,36,"functionTypes"],[1655,39,1655,49,[2,["Dict"],"empty"]]]]]]],[1659,21,1685,22,[8,[[1659,23,1662,118,[[1659,23,1659,30,"aliases"],[1660,25,1662,118,[1,"|>",0,[1660,25,1661,55,[1,"|>",0,[1660,25,1660,65,[0,[[1660,25,1660,33,[2,[],"validate"]],[1660,34,1660,55,[7,[1660,35,1660,54,[1,"<<",0,[1660,35,1660,38,[2,[],"not"]],[1660,42,1660,54,[2,["List"],"isEmpty"]]]]]],[1660,56,1660,65,[19,[1660,56,1660,57,[2,[],"r"]],[1660,58,1660,65,"aliases"]]]]]],[1661,32,1661,55,[0,[[1661,32,1661,41,[2,["Maybe"],"map"]],[1661,42,1661,55,[2,["Dict"],"fromList"]]]]]]],[1662,32,1662,118,[0,[[1662,32,1662,45,[2,["MaybeX"],"unwrap"]],[1662,46,1662,61,[19,[1662,46,1662,53,[2,[],"context"]],[1662,54,1662,61,"aliases"]]],[1662,62,1662,118,[7,[1662,63,1662,117,[18,[[[1662,64,1662,65,[11,"v"]]],[1662,69,1662,117,[0,[[1662,69,1662,80,[2,["Dict"],"insert"]],[1662,81,1662,99,[19,[1662,81,1662,88,[2,[],"context"]],[1662,89,1662,99,"moduleName"]]],[1662,100,1662,101,[2,[],"v"]],[1662,102,1662,117,[19,[1662,102,1662,109,[2,[],"context"]],[1662,110,1662,117,"aliases"]]]]]]]]]]]]]]]]]],[1663,23,1667,21,[[1663,23,1663,39,"canonicalRecords"],[1664,25,1666,136,[1,"|>",0,[1664,25,1665,55,[1,"|>",0,[1664,25,1664,74,[0,[[1664,25,1664,33,[2,[],"validate"]],[1664,34,1664,55,[7,[1664,35,1664,54,[1,"<<",0,[1664,35,1664,38,[2,[],"not"]],[1664,42,1664,54,[2,["List"],"isEmpty"]]]]]],[1664,56,1664,74,[19,[1664,56,1664,57,[2,[],"r"]],[1664,58,1664,74,"canonicalRecords"]]]]]],[1665,32,1665,55,[0,[[1665,32,1665,41,[2,["Maybe"],"map"]],[1665,42,1665,55,[2,["Dict"],"fromList"]]]]]]],[1666,32,1666,136,[0,[[1666,32,1666,45,[2,["MaybeX"],"unwrap"]],[1666,46,1666,70,[19,[1666,46,1666,53,[2,[],"context"]],[1666,54,1666,70,"canonicalRecords"]]],[1666,71,1666,136,[7,[1666,72,1666,135,[18,[[[1666,73,1666,74,[11,"v"]]],[1666,78,1666,135,[0,[[1666,78,1666,89,[2,["Dict"],"insert"]],[1666,90,1666,108,[19,[1666,90,1666,97,[2,[],"context"]],[1666,98,1666,108,"moduleName"]]],[1666,109,1666,110,[2,[],"v"]],[1666,111,1666,135,[19,[1666,111,1666,118,[2,[],"context"]],[1666,119,1666,135,"canonicalRecords"]]]]]]]]]]]]]]]]]],[1667,23,1671,21,[[1667,23,1667,35,"constructors"],[1668,25,1670,128,[1,"|>",0,[1668,25,1669,55,[1,"|>",0,[1668,25,1668,70,[0,[[1668,25,1668,33,[2,[],"validate"]],[1668,34,1668,55,[7,[1668,35,1668,54,[1,"<<",0,[1668,35,1668,38,[2,[],"not"]],[1668,42,1668,54,[2,["List"],"isEmpty"]]]]]],[1668,56,1668,70,[19,[1668,56,1668,57,[2,[],"r"]],[1668,58,1668,70,"constructors"]]]]]],[1669,32,1669,55,[0,[[1669,32,1669,41,[2,["Maybe"],"map"]],[1669,42,1669,55,[2,["Dict"],"fromList"]]]]]]],[1670,32,1670,128,[0,[[1670,32,1670,45,[2,["MaybeX"],"unwrap"]],[1670,46,1670,66,[19,[1670,46,1670,53,[2,[],"context"]],[1670,54,1670,66,"constructors"]]],[1670,67,1670,128,[7,[1670,68,1670,127,[18,[[[1670,69,1670,70,[11,"v"]]],[1670,74,1670,127,[0,[[1670,74,1670,85,[2,["Dict"],"insert"]],[1670,86,1670,104,[19,[1670,86,1670,93,[2,[],"context"]],[1670,94,1670,104,"moduleName"]]],[1670,105,1670,106,[2,[],"v"]],[1670,107,1670,127,[19,[1670,107,1670,114,[2,[],"context"]],[1670,115,1670,127,"constructors"]]]]]]]]]]]]]]]]]],[1671,23,1681,21,[[1671,23,1671,30,"exposed"],[1672,25,1680,26,[8,[[1672,27,1673,59,[[1672,27,1672,34,"aliases"],[1673,29,1673,59,[0,[[1673,29,1673,42,[2,["Dict"],"fromList"]],[1673,43,1673,59,[19,[1673,43,1673,44,[2,[],"r"]],[1673,45,1673,59,"exposedAliases"]]]]]]]],[1674,27,1676,25,[[1674,27,1674,43,"canonicalRecords"],[1675,29,1675,68,[0,[[1675,29,1675,42,[2,["Dict"],"fromList"]],[1675,43,1675,68,[19,[1675,43,1675,44,[2,[],"r"]],[1675,45,1675,68,"exposedCanonicalRecords"]]]]]]]],[1676,27,1678,25,[[1676,27,1676,39,"constructors"],[1677,29,1677,64,[0,[[1677,29,1677,42,[2,["Dict"],"fromList"]],[1677,43,1677,64,[19,[1677,43,1677,44,[2,[],"r"]],[1677,45,1677,64,"exposedConstructors"]]]]]]]],[1678,27,1680,25,[[1678,27,1678,40,"functionTypes"],[1679,29,1679,65,[0,[[1679,29,1679,42,[2,["Dict"],"fromList"]],[1679,43,1679,65,[19,[1679,43,1679,44,[2,[],"r"]],[1679,45,1679,65,"exposedFunctionTypes"]]]]]]]]]]]]],[1681,23,1685,21,[[1681,23,1681,36,"functionTypes"],[1682,25,1684,130,[1,"|>",0,[1682,25,1683,55,[1,"|>",0,[1682,25,1682,71,[0,[[1682,25,1682,33,[2,[],"validate"]],[1682,34,1682,55,[7,[1682,35,1682,54,[1,"<<",0,[1682,35,1682,38,[2,[],"not"]],[1682,42,1682,54,[2,["List"],"isEmpty"]]]]]],[1682,56,1682,71,[19,[1682,56,1682,57,[2,[],"r"]],[1682,58,1682,71,"functionTypes"]]]]]],[1683,32,1683,55,[0,[[1683,32,1683,41,[2,["Maybe"],"map"]],[1683,42,1683,55,[2,["Dict"],"fromList"]]]]]]],[1684,32,1684,130,[0,[[1684,32,1684,45,[2,["MaybeX"],"unwrap"]],[1684,46,1684,67,[19,[1684,46,1684,53,[2,[],"context"]],[1684,54,1684,67,"functionTypes"]]],[1684,68,1684,130,[7,[1684,69,1684,129,[18,[[[1684,70,1684,71,[11,"v"]]],[1684,75,1684,129,[0,[[1684,75,1684,86,[2,["Dict"],"insert"]],[1684,87,1684,105,[19,[1684,87,1684,94,[2,[],"context"]],[1684,95,1684,105,"moduleName"]]],[1684,106,1684,107,[2,[],"v"]],[1684,108,1684,129,[19,[1684,108,1684,115,[2,[],"context"]],[1684,116,1684,129,"functionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1689,1,1884,10,[0,[[1,[1689,1,1690,3,"{-| Visit all dependencies and store type order from them.\n-}"]],[1,[1691,1,1691,93,[[1691,1,1691,18,"dependencyVisitor"],[1691,21,1691,93,[6,[1691,21,1691,31,[1,[1691,21,1691,31,[[],"RuleConfig"]],[]]],[1691,35,1691,93,[6,[1691,35,1691,49,[1,[1691,35,1691,49,[[],"ProjectContext"]],[]]],[1691,53,1691,93,[6,[1691,53,1691,75,[1,[1691,53,1691,57,[[],"Dict"]],[[1691,58,1691,64,[1,[1691,58,1691,64,[[],"String"]],[]]],[1691,65,1691,75,[1,[1691,65,1691,75,[[],"Dependency"]],[]]]]]],[1691,79,1691,93,[1,[1691,79,1691,93,[[],"ProjectContext"]],[]]]]]]]]]]]],[1692,1,1884,10,[[1692,1,1692,18,"dependencyVisitor"],[[1692,19,1692,54,[14,[1692,20,1692,53,[12,[[],"RuleConfig"],[[1692,31,1692,53,[8,[[1692,33,1692,51,"subrecordTreatment"]]]]]]]]]],[1693,5,1884,10,[16,[[[1694,9,1870,14,[0,[[0],[1,[1694,9,1694,67,[[1694,9,1694,13,"step"],[1694,16,1694,67,[6,[1694,16,1694,31,[1,[1694,16,1694,31,[["Elm","Docs"],"Module"]],[]]],[1694,35,1694,67,[6,[1694,35,1694,49,[1,[1694,35,1694,49,[[],"ProjectContext"]],[]]],[1694,53,1694,67,[1,[1694,53,1694,67,[[],"ProjectContext"]],[]]]]]]]]]],[1695,9,1870,14,[[1695,9,1695,13,"step"],[[1695,14,1695,58,[14,[1695,15,1695,57,[13,[1695,15,1695,50,[8,[[1695,17,1695,23,"unions"],[1695,25,1695,32,"aliases"],[1695,34,1695,40,"values"],[1695,42,1695,48,"binops"]]]],[1695,54,1695,57,"mod"]]]]],[1695,59,1695,62,[11,"acc"]]],[1696,13,1870,14,[16,[[[1697,17,1704,43,[0,[[0],[1,[1697,17,1697,74,[[1697,17,1697,37,"functionFromOperator"],[1697,40,1697,74,[6,[1697,40,1697,54,[1,[1697,40,1697,54,[["Elm","Docs"],"Binop"]],[]]],[1697,58,1697,74,[3,[[1697,60,1697,66,[1,[1697,60,1697,66,[[],"String"]],[]]],[1697,68,1697,72,[1,[1697,68,1697,72,[[],"Type"]],[]]]]]]]]]]],[1698,17,1704,43,[[1698,17,1698,37,"functionFromOperator"],[[1698,38,1698,52,[8,[[1698,40,1698,44,"name"],[1698,46,1698,50,"tipe"]]]]],[1699,21,1704,43,[1,"|>",0,[1699,21,1703,29,[0,[[1699,21,1699,34,[2,[],"docTypeToType"]],[1699,35,1699,45,[2,[],"moduleName"]],[1700,25,1702,26,[8,[[1700,27,1700,65,[[1700,27,1700,58,"constrainedTypeVarsAreRespected"],[1700,61,1700,65,[2,[],"True"]]]],[1701,27,1702,25,[[1701,27,1701,51,"subrecordIsAlsoCanonical"],[1701,54,1701,61,[2,[],"Nothing"]]]]]]],[1703,25,1703,29,[2,[],"tipe"]]]]],[1704,28,1704,43,[0,[[1704,28,1704,38,[2,["Tuple"],"pair"]],[1704,39,1704,43,[2,[],"name"]]]]]]]]]]]],[1706,17,1713,43,[0,[[0],[1,[1706,17,1706,71,[[1706,17,1706,34,"functionFromValue"],[1706,37,1706,71,[6,[1706,37,1706,51,[1,[1706,37,1706,51,[["Elm","Docs"],"Value"]],[]]],[1706,55,1706,71,[3,[[1706,57,1706,63,[1,[1706,57,1706,63,[[],"String"]],[]]],[1706,65,1706,69,[1,[1706,65,1706,69,[[],"Type"]],[]]]]]]]]]]],[1707,17,1713,43,[[1707,17,1707,34,"functionFromValue"],[[1707,35,1707,49,[8,[[1707,37,1707,41,"name"],[1707,43,1707,47,"tipe"]]]]],[1708,21,1713,43,[1,"|>",0,[1708,21,1712,29,[0,[[1708,21,1708,34,[2,[],"docTypeToType"]],[1708,35,1708,45,[2,[],"moduleName"]],[1709,25,1711,26,[8,[[1709,27,1709,65,[[1709,27,1709,58,"constrainedTypeVarsAreRespected"],[1709,61,1709,65,[2,[],"True"]]]],[1710,27,1711,25,[[1710,27,1710,51,"subrecordIsAlsoCanonical"],[1710,54,1710,61,[2,[],"Nothing"]]]]]]],[1712,25,1712,29,[2,[],"tipe"]]]]],[1713,28,1713,43,[0,[[1713,28,1713,38,[2,["Tuple"],"pair"]],[1713,39,1713,43,[2,[],"name"]]]]]]]]]]]],[1715,17,1736,29,[0,[[0],[1,[1715,17,1715,177,[[1715,17,1715,40,"functionsFromCustomType"],[1715,43,1715,177,[6,[1715,43,1715,57,[1,[1715,43,1715,57,[["Elm","Docs"],"Union"]],[]]],[1715,61,1715,177,[3,[[1715,63,1715,145,[1,[1715,63,1715,67,[[],"List"]],[[1715,68,1715,145,[3,[[1715,70,1715,76,[1,[1715,70,1715,76,[[],"String"]],[]]],[1715,78,1715,143,[4,[[1715,80,1715,109,[[1715,80,1715,94,"customTypeName"],[1715,97,1715,109,[1,[1715,97,1715,102,[[],"Maybe"]],[[1715,103,1715,109,[1,[1715,103,1715,109,[[],"String"]],[]]]]]]]],[1715,111,1715,142,[[1715,111,1715,116,"type_"],[1715,119,1715,141,[1,[1715,119,1715,141,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[1715,147,1715,175,[1,[1715,147,1715,151,[[],"List"]],[[1715,152,1715,175,[3,[[1715,154,1715,160,[1,[1715,154,1715,160,[[],"String"]],[]]],[1715,162,1715,173,[1,[1715,162,1715,173,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]],[1716,17,1736,29,[[1716,17,1716,40,"functionsFromCustomType"],[[1716,41,1716,61,[8,[[1716,43,1716,47,"name"],[1716,49,1716,53,"args"],[1716,55,1716,59,"tags"]]]]],[1717,21,1736,29,[0,[[1717,21,1717,31,[2,["List"],"foldl"]],[1718,25,1734,26,[7,[1718,26,1733,37,[18,[[[1718,27,1718,28,[11,"t"]],[1718,29,1718,43,[7,[[1718,31,1718,35,[11,"fAcc"]],[1718,37,1718,41,[11,"rAcc"]]]]]],[1719,29,1733,37,[1,"|>",0,[1719,29,1728,34,[0,[[1719,29,1719,44,[2,[],"makeConstructor"]],[1720,33,1726,34,[7,[1720,34,1725,62,[1,"|>",0,[1720,34,1724,47,[1,"|>",0,[1720,34,1723,87,[1,"|>",0,[1720,34,1722,56,[1,"|>",0,[1720,34,1721,70,[1,"|>",0,[1720,34,1720,65,[0,[[1720,34,1720,42,[2,["List"],"map"]],[1720,43,1720,60,[7,[1720,44,1720,59,[0,[[1720,44,1720,51,[2,[],"TypeVar"]],[1720,52,1720,59,[2,[],"Nothing"]]]]]]],[1720,61,1720,65,[2,[],"args"]]]]],[1721,40,1721,70,[0,[[1721,40,1721,49,[2,[],"NamedType"]],[1721,50,1721,70,[6,[[1721,52,1721,62,[2,[],"moduleName"]],[1721,64,1721,68,[2,[],"name"]]]]]]]]]],[1722,40,1722,56,[2,[],"DereferencedType"]]]],[1723,40,1723,87,[0,[[1723,40,1723,54,[2,[],"assignTypeVars"]],[1723,55,1723,87,[7,[1723,56,1723,86,[0,[[1723,56,1723,81,[2,[],"makePositionalArgTypeVars"]],[1723,82,1723,86,[2,[],"args"]]]]]]]]]]]],[1724,40,1724,47,[2,[],"getType"]]]],[1725,40,1725,62,[2,[],"TypeWithPositionalVars"]]]]]],[1727,33,1727,37,[2,[],"args"]],[1728,33,1728,34,[2,[],"t"]]]]],[1729,36,1733,37,[7,[1729,37,1732,42,[18,[[[1729,38,1729,54,[7,[[1729,40,1729,41,[11,"n"]],[1729,43,1729,48,[11,"type_"]],[1729,50,1729,52,[11,"rs"]]]]]],[1730,41,1732,42,[6,[[1730,43,1730,103,[1,"::",1,[1730,43,1730,95,[6,[[1730,45,1730,46,[2,[],"n"]],[1730,48,1730,93,[8,[[1730,50,1730,76,[[1730,50,1730,64,"customTypeName"],[1730,67,1730,76,[0,[[1730,67,1730,71,[2,[],"Just"]],[1730,72,1730,76,[2,[],"name"]]]]]]],[1730,78,1730,92,[[1730,78,1730,83,"type_"],[1730,86,1730,91,[2,[],"type_"]]]]]]]]]],[1730,99,1730,103,[2,[],"fAcc"]]]],[1731,43,1731,53,[1,"++",1,[1731,43,1731,45,[2,[],"rs"]],[1731,49,1731,53,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[1735,25,1735,35,[6,[[1735,27,1735,29,[9,[]]],[1735,31,1735,33,[9,[]]]]]],[1736,25,1736,29,[2,[],"tags"]]]]]]]]]],[1738,17,1748,22,[0,[[0],[1,[1738,17,1738,81,[[1738,17,1738,26,"makeAlias"],[1738,29,1738,81,[6,[1738,29,1738,43,[1,[1738,29,1738,43,[["Elm","Docs"],"Alias"]],[]]],[1738,47,1738,81,[3,[[1738,49,1738,55,[1,[1738,49,1738,55,[[],"String"]],[]]],[1738,57,1738,79,[1,[1738,57,1738,79,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[1739,17,1748,22,[[1739,17,1739,26,"makeAlias"],[[1739,27,1739,47,[8,[[1739,29,1739,33,"name"],[1739,35,1739,39,"args"],[1739,41,1739,45,"tipe"]]]]],[1740,21,1748,22,[6,[[1740,23,1740,27,[2,[],"name"]],[1741,23,1747,29,[0,[[1741,23,1741,54,[2,[],"docTypeToTypeWithPositionalVars"]],[1741,55,1741,65,[2,[],"moduleName"]],[1743,25,1745,26,[8,[[1743,27,1743,66,[[1743,27,1743,58,"constrainedTypeVarsAreRespected"],[1743,61,1743,66,[2,[],"False"]]]],[1744,27,1745,25,[[1744,27,1744,51,"subrecordIsAlsoCanonical"],[1744,54,1744,101,[0,[[1744,54,1744,82,[2,[],"subrecordCanonicityForRecord"]],[1744,83,1744,101,[2,[],"subrecordTreatment"]]]]]]]]]],[1746,25,1746,29,[2,[],"args"]],[1747,25,1747,29,[2,[],"tipe"]]]]]]]]]]]]],[1750,17,1768,29,[0,[[0],[1,[1750,17,1750,174,[[1750,17,1750,32,"makeConstructor"],[1750,35,1750,174,[6,[1750,35,1750,57,[1,[1750,35,1750,57,[[],"TypeWithPositionalVars"]],[]]],[1750,61,1750,174,[6,[1750,61,1750,72,[1,[1750,61,1750,65,[[],"List"]],[[1750,66,1750,72,[1,[1750,66,1750,72,[[],"String"]],[]]]]]],[1750,76,1750,174,[6,[1750,76,1750,106,[3,[[1750,78,1750,84,[1,[1750,78,1750,84,[[],"String"]],[]]],[1750,86,1750,104,[1,[1750,86,1750,90,[[],"List"]],[[1750,91,1750,104,[1,[1750,91,1750,104,[["Elm","Type"],"Type"]],[]]]]]]]]],[1750,110,1750,174,[3,[[1750,112,1750,118,[1,[1750,112,1750,118,[[],"String"]],[]]],[1750,120,1750,142,[1,[1750,120,1750,142,[[],"TypeWithPositionalVars"]],[]]],[1750,144,1750,172,[1,[1750,144,1750,148,[[],"List"]],[[1750,149,1750,172,[3,[[1750,151,1750,157,[1,[1750,151,1750,157,[[],"String"]],[]]],[1750,159,1750,170,[1,[1750,159,1750,170,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]]]]],[1751,17,1768,29,[[1751,17,1751,32,"makeConstructor"],[[1751,33,1751,39,[11,"return"]],[1751,40,1751,48,[11,"typeVars"]],[1751,49,1751,68,[7,[[1751,51,1751,55,[11,"name"]],[1751,57,1751,66,[11,"arguments"]]]]]],[1752,21,1768,29,[1,"|>",0,[1752,21,1762,34,[0,[[1752,21,1752,29,[2,["List"],"map"]],[1753,25,1761,26,[7,[1753,26,1760,37,[0,[[1753,26,1753,57,[2,[],"docTypeToTypeWithPositionalVars"]],[1753,58,1753,68,[2,[],"moduleName"]],[1754,29,1759,30,[8,[[1754,31,1754,69,[[1754,31,1754,62,"constrainedTypeVarsAreRespected"],[1754,65,1754,69,[2,[],"True"]]]],[1757,31,1759,29,[[1757,31,1757,55,"subrecordIsAlsoCanonical"],[1758,33,1758,79,[0,[[1758,33,1758,60,[2,[],"subrecordCanonicityForField"]],[1758,61,1758,79,[2,[],"subrecordTreatment"]]]]]]]]]],[1760,29,1760,37,[2,[],"typeVars"]]]]]]],[1762,25,1762,34,[2,[],"arguments"]]]]],[1763,28,1768,29,[7,[1763,29,1767,34,[18,[[[1763,30,1763,32,[11,"ts"]]],[1764,33,1767,34,[6,[[1764,35,1764,39,[2,[],"name"]],[1765,35,1765,79,[0,[[1765,35,1765,69,[2,[],"makeFunctionTypeWithPositionalVars"]],[1765,70,1765,76,[2,[],"return"]],[1765,77,1765,79,[2,[],"ts"]]]]],[1766,35,1766,86,[0,[[1766,35,1766,59,[2,[],"makeCustomTypeSubrecords"]],[1766,60,1766,78,[2,[],"subrecordTreatment"]],[1766,79,1766,83,[2,[],"name"]],[1766,84,1766,86,[2,[],"ts"]]]]]]]]]]]]]]]]]]]],[1770,17,1772,46,[0,[[0],[1,[1770,17,1770,40,[[1770,17,1770,27,"moduleName"],[1770,30,1770,40,[1,[1770,30,1770,40,[[],"ModuleName"]],[]]]]]],[1771,17,1772,46,[[1771,17,1771,27,"moduleName"],[],[1772,21,1772,46,[0,[[1772,21,1772,33,[2,["String"],"split"]],[1772,34,1772,37,[5,"."]],[1772,38,1772,46,[19,[1772,38,1772,41,[2,[],"mod"]],[1772,42,1772,46,"name"]]]]]]]]]]],[1774,17,1777,103,[1,[1774,17,1774,59,[7,[[1774,19,1774,34,[11,"newAliasRecords"]],[1774,36,1774,57,[11,"newRecordConstructors"]]]]],[1775,21,1777,103,[1,"|>",0,[1775,21,1776,38,[1,"|>",0,[1775,21,1775,57,[0,[[1775,21,1775,29,[2,["List"],"map"]],[1775,30,1775,49,[2,[],"recordFromTypeAlias"]],[1775,50,1775,57,[2,[],"aliases"]]]]],[1776,28,1776,38,[2,["List"],"unzip"]]]],[1777,28,1777,103,[0,[[1777,28,1777,41,[2,["Tuple"],"mapBoth"]],[1777,42,1777,72,[7,[1777,43,1777,71,[1,"<<",0,[1777,43,1777,56,[2,["Dict"],"fromList"]],[1777,60,1777,71,[2,["List"],"concat"]]]]]],[1777,73,1777,103,[7,[1777,74,1777,102,[1,"<<",0,[1777,74,1777,87,[2,["Dict"],"fromList"]],[1777,91,1777,102,[2,["List"],"concat"]]]]]]]]]]]]],[1779,17,1784,61,[0,[[0],[1,[1779,17,1779,86,[[1779,17,1779,27,"newAliases"],[1779,30,1779,86,[1,[1779,30,1779,35,[[],"Maybe"]],[[1779,36,1779,86,[3,[[1779,38,1779,48,[1,[1779,38,1779,48,[[],"ModuleName"]],[]]],[1779,50,1779,84,[1,[1779,50,1779,54,[[],"Dict"]],[[1779,55,1779,61,[1,[1779,55,1779,61,[[],"String"]],[]]],[1779,62,1779,84,[1,[1779,62,1779,84,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]],[1780,17,1784,61,[[1780,17,1780,27,"newAliases"],[],[1781,21,1784,61,[1,"|>",0,[1781,21,1783,51,[1,"|>",0,[1781,21,1782,58,[1,"|>",0,[1781,21,1781,47,[0,[[1781,21,1781,29,[2,["List"],"map"]],[1781,30,1781,39,[2,[],"makeAlias"]],[1781,40,1781,47,[2,[],"aliases"]]]]],[1782,28,1782,58,[0,[[1782,28,1782,36,[2,[],"validate"]],[1782,37,1782,58,[7,[1782,38,1782,57,[1,"<<",0,[1782,38,1782,41,[2,[],"not"]],[1782,45,1782,57,[2,["List"],"isEmpty"]]]]]]]]]]],[1783,28,1783,51,[0,[[1783,28,1783,37,[2,["Maybe"],"map"]],[1783,38,1783,51,[2,["Dict"],"fromList"]]]]]]],[1784,28,1784,61,[0,[[1784,28,1784,37,[2,["Maybe"],"map"]],[1784,38,1784,61,[7,[1784,39,1784,60,[0,[[1784,39,1784,49,[2,["Tuple"],"pair"]],[1784,50,1784,60,[2,[],"moduleName"]]]]]]]]]]]]]]]]],[1786,17,1804,30,[1,[1786,17,1786,48,[7,[[1786,19,1786,34,[11,"newConstructors"]],[1786,36,1786,46,[11,"newRecords"]]]]],[1787,21,1804,30,[1,"|>",0,[1787,21,1793,31,[0,[[1787,21,1787,31,[2,["List"],"foldl"]],[1788,25,1791,26,[7,[1788,26,1790,79,[18,[[[1788,27,1788,28,[11,"u"]],[1788,29,1788,43,[7,[[1788,31,1788,35,[11,"fAcc"]],[1788,37,1788,41,[11,"rAcc"]]]]]],[1789,29,1790,79,[1,"|>",0,[1789,29,1789,54,[0,[[1789,29,1789,52,[2,[],"functionsFromCustomType"]],[1789,53,1789,54,[2,[],"u"]]]]],[1790,36,1790,79,[7,[1790,37,1790,78,[18,[[[1790,38,1790,48,[7,[[1790,40,1790,42,[11,"fs"]],[1790,44,1790,46,[11,"rs"]]]]]],[1790,52,1790,78,[6,[[1790,54,1790,64,[1,"++",1,[1790,54,1790,56,[2,[],"fs"]],[1790,60,1790,64,[2,[],"fAcc"]]]],[1790,66,1790,76,[1,"++",1,[1790,66,1790,68,[2,[],"rs"]],[1790,72,1790,76,[2,[],"rAcc"]]]]]]]]]]]]]]]]]]],[1792,25,1792,35,[6,[[1792,27,1792,29,[9,[]]],[1792,31,1792,33,[9,[]]]]]],[1793,25,1793,31,[2,[],"unions"]]]]],[1794,28,1804,30,[0,[[1794,28,1794,41,[2,["Tuple"],"mapBoth"]],[1795,29,1799,30,[7,[1795,30,1798,69,[1,">>",1,[1795,30,1795,43,[2,["Dict"],"fromList"]],[1796,36,1798,69,[1,">>",1,[1796,36,1796,68,[0,[[1796,36,1796,46,[2,["Dict"],"union"]],[1796,47,1796,68,[2,[],"newRecordConstructors"]]]]],[1797,36,1798,69,[1,">>",1,[1797,36,1797,66,[0,[[1797,36,1797,44,[2,[],"validate"]],[1797,45,1797,66,[7,[1797,46,1797,65,[1,"<<",0,[1797,46,1797,49,[2,[],"not"]],[1797,53,1797,65,[2,["Dict"],"isEmpty"]]]]]]]]],[1798,36,1798,69,[0,[[1798,36,1798,45,[2,["Maybe"],"map"]],[1798,46,1798,69,[7,[1798,47,1798,68,[0,[[1798,47,1798,57,[2,["Tuple"],"pair"]],[1798,58,1798,68,[2,[],"moduleName"]]]]]]]]]]]]]]]]]],[1800,29,1804,30,[7,[1800,30,1803,69,[1,">>",1,[1800,30,1800,43,[2,["Dict"],"fromList"]],[1801,36,1803,69,[1,">>",1,[1801,36,1801,62,[0,[[1801,36,1801,46,[2,["Dict"],"union"]],[1801,47,1801,62,[2,[],"newAliasRecords"]]]]],[1802,36,1803,69,[1,">>",1,[1802,36,1802,66,[0,[[1802,36,1802,44,[2,[],"validate"]],[1802,45,1802,66,[7,[1802,46,1802,65,[1,"<<",0,[1802,46,1802,49,[2,[],"not"]],[1802,53,1802,65,[2,["Dict"],"isEmpty"]]]]]]]]],[1803,36,1803,69,[0,[[1803,36,1803,45,[2,["Maybe"],"map"]],[1803,46,1803,69,[7,[1803,47,1803,68,[0,[[1803,47,1803,57,[2,["Tuple"],"pair"]],[1803,58,1803,68,[2,[],"moduleName"]]]]]]]]]]]]]]]]]]]]]]]]],[1806,17,1812,61,[0,[[0],[1,[1806,17,1806,70,[[1806,17,1806,29,"newFunctions"],[1806,32,1806,70,[1,[1806,32,1806,37,[[],"Maybe"]],[[1806,38,1806,70,[3,[[1806,40,1806,50,[1,[1806,40,1806,50,[[],"ModuleName"]],[]]],[1806,52,1806,68,[1,[1806,52,1806,56,[[],"Dict"]],[[1806,57,1806,63,[1,[1806,57,1806,63,[[],"String"]],[]]],[1806,64,1806,68,[1,[1806,64,1806,68,[[],"Type"]],[]]]]]]]]]]]]]]],[1807,17,1812,61,[[1807,17,1807,29,"newFunctions"],[],[1808,21,1812,61,[1,"|>",0,[1808,21,1811,58,[1,"|>",0,[1808,21,1810,51,[1,"|>",0,[1808,21,1809,41,[1,"|>",0,[1808,21,1808,54,[0,[[1808,21,1808,29,[2,["List"],"map"]],[1808,30,1808,47,[2,[],"functionFromValue"]],[1808,48,1808,54,[2,[],"values"]]]]],[1809,28,1809,41,[2,["Dict"],"fromList"]]]],[1810,28,1810,51,[0,[[1810,28,1810,38,[2,["Dict"],"union"]],[1810,39,1810,51,[2,[],"newOperators"]]]]]]],[1811,28,1811,58,[0,[[1811,28,1811,36,[2,[],"validate"]],[1811,37,1811,58,[7,[1811,38,1811,57,[1,"<<",0,[1811,38,1811,41,[2,[],"not"]],[1811,45,1811,57,[2,["Dict"],"isEmpty"]]]]]]]]]]],[1812,28,1812,61,[0,[[1812,28,1812,37,[2,["Maybe"],"map"]],[1812,38,1812,61,[7,[1812,39,1812,60,[0,[[1812,39,1812,49,[2,["Tuple"],"pair"]],[1812,50,1812,60,[2,[],"moduleName"]]]]]]]]]]]]]]]]],[1814,17,1817,41,[0,[[0],[1,[1814,17,1814,48,[[1814,17,1814,29,"newOperators"],[1814,32,1814,48,[1,[1814,32,1814,36,[[],"Dict"]],[[1814,37,1814,43,[1,[1814,37,1814,43,[[],"String"]],[]]],[1814,44,1814,48,[1,[1814,44,1814,48,[[],"Type"]],[]]]]]]]]],[1815,17,1817,41,[[1815,17,1815,29,"newOperators"],[],[1816,21,1817,41,[1,"|>",0,[1816,21,1816,57,[0,[[1816,21,1816,29,[2,["List"],"map"]],[1816,30,1816,50,[2,[],"functionFromOperator"]],[1816,51,1816,57,[2,[],"binops"]]]]],[1817,28,1817,41,[2,["Dict"],"fromList"]]]]]]]]],[1819,17,1863,39,[0,[[0],[1,[1819,17,1819,173,[[1819,17,1819,36,"recordFromTypeAlias"],[1819,39,1819,173,[6,[1819,39,1819,53,[1,[1819,39,1819,53,[["Elm","Docs"],"Alias"]],[]]],[1819,57,1819,173,[3,[[1819,59,1819,87,[1,[1819,59,1819,63,[[],"List"]],[[1819,64,1819,87,[3,[[1819,66,1819,72,[1,[1819,66,1819,72,[[],"String"]],[]]],[1819,74,1819,85,[1,[1819,74,1819,85,[[],"KnownRecord"]],[]]]]]]]]],[1819,89,1819,171,[1,[1819,89,1819,93,[[],"List"]],[[1819,94,1819,171,[3,[[1819,96,1819,102,[1,[1819,96,1819,102,[[],"String"]],[]]],[1819,104,1819,169,[4,[[1819,106,1819,135,[[1819,106,1819,120,"customTypeName"],[1819,123,1819,135,[1,[1819,123,1819,128,[[],"Maybe"]],[[1819,129,1819,135,[1,[1819,129,1819,135,[[],"String"]],[]]]]]]]],[1819,137,1819,168,[[1819,137,1819,142,"type_"],[1819,145,1819,167,[1,[1819,145,1819,167,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]]]]]]]],[1820,17,1863,39,[[1820,17,1820,36,"recordFromTypeAlias"],[[1820,37,1820,57,[8,[[1820,39,1820,43,"name"],[1820,45,1820,49,"args"],[1820,51,1820,55,"tipe"]]]]],[1821,21,1863,39,[17,[[1821,26,1821,30,[2,[],"tipe"]],[[[1822,25,1822,55,[12,[["Elm","Type"],"Record"],[[1822,41,1822,47,[11,"fields"]],[1822,48,1822,55,[12,[[],"Nothing"],[]]]]]],[1823,29,1853,30,[6,[[1823,31,1824,79,[1,"|>",0,[1823,31,1823,101,[0,[[1823,31,1823,53,[2,[],"knownRecordFromDocType"]],[1823,54,1823,72,[2,[],"subrecordTreatment"]],[1823,73,1823,83,[2,[],"moduleName"]],[1823,84,1823,101,[6,[[1823,86,1823,92,[2,[],"fields"]],[1823,94,1823,99,[2,[],"False"]]]]]]]],[1824,36,1824,79,[0,[[1824,36,1824,44,[2,["List"],"map"]],[1824,45,1824,79,[7,[1824,46,1824,78,[0,[[1824,46,1824,60,[2,["Tuple"],"mapFirst"]],[1824,61,1824,78,[7,[1824,62,1824,77,[18,[[[1824,63,1824,64,[11,"s"]]],[1824,68,1824,77,[1,"++",1,[1824,68,1824,72,[2,[],"name"]],[1824,76,1824,77,[2,[],"s"]]]]]]]]]]]]]]]]]]],[1825,31,1852,32,[9,[[1825,33,1851,34,[6,[[1825,35,1825,39,[2,[],"name"]],[1826,35,1850,36,[8,[[1826,37,1826,61,[[1826,37,1826,51,"customTypeName"],[1826,54,1826,61,[2,[],"Nothing"]]]],[1827,37,1850,35,[[1827,37,1827,42,"type_"],[1828,41,1849,50,[1,"|>",0,[1828,41,1839,51,[0,[[1828,41,1828,49,[2,["List"],"map"]],[1829,45,1838,46,[7,[1829,46,1837,57,[1,">>",1,[1829,46,1829,58,[2,["Tuple"],"second"]],[1830,52,1837,57,[0,[[1830,52,1830,83,[2,[],"docTypeToTypeWithPositionalVars"]],[1830,84,1830,94,[2,[],"moduleName"]],[1832,53,1836,54,[8,[[1832,55,1832,93,[[1832,55,1832,86,"constrainedTypeVarsAreRespected"],[1832,89,1832,93,[2,[],"True"]]]],[1835,55,1836,53,[[1835,55,1835,79,"subrecordIsAlsoCanonical"],[1835,82,1835,128,[0,[[1835,82,1835,109,[2,[],"subrecordCanonicityForField"]],[1835,110,1835,128,[2,[],"subrecordTreatment"]]]]]]]]]],[1837,53,1837,57,[2,[],"args"]]]]]]]]],[1839,45,1839,51,[2,[],"fields"]]]]],[1840,48,1849,50,[0,[[1840,48,1840,82,[2,[],"makeFunctionTypeWithPositionalVars"]],[1841,49,1849,50,[7,[1841,50,1848,57,[0,[[1841,50,1841,81,[2,[],"docTypeToTypeWithPositionalVars"]],[1841,82,1841,92,[2,[],"moduleName"]],[1842,53,1846,54,[8,[[1842,55,1842,93,[[1842,55,1842,86,"constrainedTypeVarsAreRespected"],[1842,89,1842,93,[2,[],"True"]]]],[1845,55,1846,53,[[1845,55,1845,79,"subrecordIsAlsoCanonical"],[1845,82,1845,129,[0,[[1845,82,1845,110,[2,[],"subrecordCanonicityForRecord"]],[1845,111,1845,129,[2,[],"subrecordTreatment"]]]]]]]]]],[1847,53,1847,57,[2,[],"args"]],[1848,53,1848,57,[2,[],"tipe"]]]]]]]]]]]]]]]]]]]]]]]]]]],[[1855,25,1855,56,[12,[["Elm","Type"],"Record"],[[1855,41,1855,47,[11,"fields"]],[1855,48,1855,56,[14,[1855,49,1855,55,[12,[[],"Just"],[[1855,54,1855,55,[0]]]]]]]]]],[1856,29,1860,30,[6,[[1856,31,1857,79,[1,"|>",0,[1856,31,1856,100,[0,[[1856,31,1856,53,[2,[],"knownRecordFromDocType"]],[1856,54,1856,72,[2,[],"subrecordTreatment"]],[1856,73,1856,83,[2,[],"moduleName"]],[1856,84,1856,100,[6,[[1856,86,1856,92,[2,[],"fields"]],[1856,94,1856,98,[2,[],"True"]]]]]]]],[1857,36,1857,79,[0,[[1857,36,1857,44,[2,["List"],"map"]],[1857,45,1857,79,[7,[1857,46,1857,78,[0,[[1857,46,1857,60,[2,["Tuple"],"mapFirst"]],[1857,61,1857,78,[7,[1857,62,1857,77,[18,[[[1857,63,1857,64,[11,"s"]]],[1857,68,1857,77,[1,"++",1,[1857,68,1857,72,[2,[],"name"]],[1857,76,1857,77,[2,[],"s"]]]]]]]]]]]]]]]]]]],[1859,31,1859,33,[9,[]]]]]]],[[1862,25,1862,26,[0]],[1863,29,1863,39,[6,[[1863,31,1863,33,[9,[]]],[1863,35,1863,37,[9,[]]]]]]]]]]]]]]]]],[1865,13,1870,14,[21,[1865,15,1865,18,"acc"],[[1866,19,1867,17,[[1866,19,1866,26,"aliases"],[1866,29,1866,108,[0,[[1866,29,1866,42,[2,["MaybeX"],"unwrap"]],[1866,43,1866,54,[19,[1866,43,1866,46,[2,[],"acc"]],[1866,47,1866,54,"aliases"]]],[1866,55,1866,97,[7,[1866,56,1866,96,[18,[[[1866,57,1866,65,[7,[[1866,59,1866,60,[11,"k"]],[1866,62,1866,63,[11,"v"]]]]]],[1866,69,1866,96,[0,[[1866,69,1866,80,[2,["Dict"],"insert"]],[1866,81,1866,82,[2,[],"k"]],[1866,83,1866,84,[2,[],"v"]],[1866,85,1866,96,[19,[1866,85,1866,88,[2,[],"acc"]],[1866,89,1866,96,"aliases"]]]]]]]]]]],[1866,98,1866,108,[2,[],"newAliases"]]]]]]],[1867,19,1868,17,[[1867,19,1867,35,"canonicalRecords"],[1867,38,1867,135,[0,[[1867,38,1867,51,[2,["MaybeX"],"unwrap"]],[1867,52,1867,72,[19,[1867,52,1867,55,[2,[],"acc"]],[1867,56,1867,72,"canonicalRecords"]]],[1867,73,1867,124,[7,[1867,74,1867,123,[18,[[[1867,75,1867,83,[7,[[1867,77,1867,78,[11,"k"]],[1867,80,1867,81,[11,"v"]]]]]],[1867,87,1867,123,[0,[[1867,87,1867,98,[2,["Dict"],"insert"]],[1867,99,1867,100,[2,[],"k"]],[1867,101,1867,102,[2,[],"v"]],[1867,103,1867,123,[19,[1867,103,1867,106,[2,[],"acc"]],[1867,107,1867,123,"canonicalRecords"]]]]]]]]]]],[1867,125,1867,135,[2,[],"newRecords"]]]]]]],[1868,19,1869,17,[[1868,19,1868,31,"constructors"],[1868,34,1868,128,[0,[[1868,34,1868,47,[2,["MaybeX"],"unwrap"]],[1868,48,1868,64,[19,[1868,48,1868,51,[2,[],"acc"]],[1868,52,1868,64,"constructors"]]],[1868,65,1868,112,[7,[1868,66,1868,111,[18,[[[1868,67,1868,75,[7,[[1868,69,1868,70,[11,"k"]],[1868,72,1868,73,[11,"v"]]]]]],[1868,79,1868,111,[0,[[1868,79,1868,90,[2,["Dict"],"insert"]],[1868,91,1868,92,[2,[],"k"]],[1868,93,1868,94,[2,[],"v"]],[1868,95,1868,111,[19,[1868,95,1868,98,[2,[],"acc"]],[1868,99,1868,111,"constructors"]]]]]]]]]]],[1868,113,1868,128,[2,[],"newConstructors"]]]]]]],[1869,19,1870,13,[[1869,19,1869,32,"functionTypes"],[1869,35,1869,128,[0,[[1869,35,1869,48,[2,["MaybeX"],"unwrap"]],[1869,49,1869,66,[19,[1869,49,1869,52,[2,[],"acc"]],[1869,53,1869,66,"functionTypes"]]],[1869,67,1869,115,[7,[1869,68,1869,114,[18,[[[1869,69,1869,77,[7,[[1869,71,1869,72,[11,"k"]],[1869,74,1869,75,[11,"v"]]]]]],[1869,81,1869,114,[0,[[1869,81,1869,92,[2,["Dict"],"insert"]],[1869,93,1869,94,[2,[],"k"]],[1869,95,1869,96,[2,[],"v"]],[1869,97,1869,114,[19,[1869,97,1869,100,[2,[],"acc"]],[1869,101,1869,114,"functionTypes"]]]]]]]]]]],[1869,116,1869,128,[2,[],"newFunctions"]]]]]]]]]]]]]]]]]]],[1872,5,1884,10,[0,[[1872,5,1872,15,[2,["Dict"],"foldl"]],[1873,9,1884,10,[7,[1873,10,1883,21,[18,[[[1873,11,1873,12,[0]],[1873,13,1873,16,[11,"dep"]],[1873,17,1873,20,[11,"acc"]]],[1874,13,1883,21,[1,"|>",0,[1874,13,1875,57,[1,"|>",0,[1874,13,1874,35,[0,[[1874,13,1874,31,[2,["Dependency"],"modules"]],[1874,32,1874,35,[2,[],"dep"]]]]],[1875,20,1875,57,[0,[[1875,20,1875,30,[2,["List"],"foldl"]],[1875,31,1875,35,[2,[],"step"]],[1875,36,1875,57,[2,[],"initialProjectContext"]]]]]]],[1876,20,1883,21,[7,[1876,21,1882,26,[18,[[[1876,22,1876,80,[8,[[1876,24,1876,31,"aliases"],[1876,33,1876,49,"canonicalRecords"],[1876,51,1876,63,"constructors"],[1876,65,1876,78,"functionTypes"]]]]],[1877,25,1882,26,[21,[1877,27,1877,30,"acc"],[[1878,31,1879,29,[[1878,31,1878,38,"aliases"],[1878,41,1878,71,[0,[[1878,41,1878,51,[2,["Dict"],"union"]],[1878,52,1878,59,[2,[],"aliases"]],[1878,60,1878,71,[19,[1878,60,1878,63,[2,[],"acc"]],[1878,64,1878,71,"aliases"]]]]]]]],[1879,31,1880,29,[[1879,31,1879,47,"canonicalRecords"],[1879,50,1879,98,[0,[[1879,50,1879,60,[2,["Dict"],"union"]],[1879,61,1879,77,[2,[],"canonicalRecords"]],[1879,78,1879,98,[19,[1879,78,1879,81,[2,[],"acc"]],[1879,82,1879,98,"canonicalRecords"]]]]]]]],[1880,31,1881,29,[[1880,31,1880,43,"constructors"],[1880,46,1880,86,[0,[[1880,46,1880,56,[2,["Dict"],"union"]],[1880,57,1880,69,[2,[],"constructors"]],[1880,70,1880,86,[19,[1880,70,1880,73,[2,[],"acc"]],[1880,74,1880,86,"constructors"]]]]]]]],[1881,31,1882,25,[[1881,31,1881,44,"functionTypes"],[1881,47,1881,89,[0,[[1881,47,1881,57,[2,["Dict"],"union"]],[1881,58,1881,71,[2,[],"functionTypes"]],[1881,72,1881,89,[19,[1881,72,1881,75,[2,[],"acc"]],[1881,76,1881,89,"functionTypes"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1887,1,1950,33,[0,[[1,[1887,1,1888,3,"{-| Canonicalize a type, dereferencing all aliases.\n-}"]],[1,[1889,1,1889,60,[[1889,1,1889,16,"dereferenceType"],[1889,19,1889,60,[6,[1889,19,1889,32,[1,[1889,19,1889,32,[[],"ModuleContext"]],[]]],[1889,36,1889,60,[6,[1889,36,1889,40,[1,[1889,36,1889,40,[[],"Type"]],[]]],[1889,44,1889,60,[1,[1889,44,1889,60,[[],"DereferencedType"]],[]]]]]]]]]],[1890,1,1950,33,[[1890,1,1890,16,"dereferenceType"],[[1890,17,1890,24,[11,"context"]],[1890,25,1890,30,[11,"type_"]]],[1891,5,1950,33,[16,[[[1892,9,1903,31,[0,[[0],[1,[1892,9,1892,48,[[1892,9,1892,19,"dropFields"],[1892,22,1892,48,[6,[1892,22,1892,32,[1,[1892,22,1892,25,[[],"Set"]],[[1892,26,1892,32,[1,[1892,26,1892,32,[[],"String"]],[]]]]]],[1892,36,1892,48,[6,[1892,36,1892,40,[1,[1892,36,1892,40,[[],"Type"]],[]]],[1892,44,1892,48,[1,[1892,44,1892,48,[[],"Type"]],[]]]]]]]]]],[1893,9,1903,31,[[1893,9,1893,19,"dropFields"],[[1893,20,1893,26,[11,"toDrop"]],[1893,27,1893,28,[11,"t"]]],[1894,13,1903,31,[17,[[1894,18,1894,19,[2,[],"t"]],[[[1895,17,1895,29,[12,[[],"RecordType"],[[1895,28,1895,29,[11,"r"]]]]],[1896,21,1900,26,[0,[[1896,21,1896,31,[2,[],"RecordType"]],[1897,25,1900,26,[21,[1897,27,1897,28,"r"],[[1898,31,1899,29,[[1898,31,1898,38,"generic"],[1898,41,1898,80,[0,[[1898,41,1898,50,[2,["Maybe"],"map"]],[1898,51,1898,70,[7,[1898,52,1898,69,[0,[[1898,52,1898,62,[2,[],"dropFields"]],[1898,63,1898,69,[2,[],"toDrop"]]]]]]],[1898,71,1898,80,[19,[1898,71,1898,72,[2,[],"r"]],[1898,73,1898,80,"generic"]]]]]]]],[1899,31,1900,25,[[1899,31,1899,37,"fields"],[1899,40,1899,102,[0,[[1899,40,1899,51,[2,["List"],"filter"]],[1899,52,1899,93,[7,[1899,53,1899,92,[18,[[[1899,54,1899,62,[7,[[1899,56,1899,57,[11,"f"]],[1899,59,1899,60,[0]]]]]],[1899,66,1899,92,[1,"<|",1,[1899,66,1899,69,[2,[],"not"]],[1899,73,1899,92,[0,[[1899,73,1899,83,[2,["Set"],"member"]],[1899,84,1899,85,[2,[],"f"]],[1899,86,1899,92,[2,[],"toDrop"]]]]]]]]]]]],[1899,94,1899,102,[19,[1899,94,1899,95,[2,[],"r"]],[1899,96,1899,102,"fields"]]]]]]]]]]]]]]],[[1902,17,1902,27,[11,"notARecord"]],[1903,21,1903,31,[2,[],"notARecord"]]]]]]]]]]]],[1905,9,1948,22,[0,[[0],[1,[1905,9,1905,26,[[1905,9,1905,11,"go"],[1905,14,1905,26,[6,[1905,14,1905,18,[1,[1905,14,1905,18,[[],"Type"]],[]]],[1905,22,1905,26,[1,[1905,22,1905,26,[[],"Type"]],[]]]]]]]],[1906,9,1948,22,[[1906,9,1906,11,"go"],[[1906,12,1906,13,[11,"t"]]],[1907,13,1948,22,[17,[[1907,18,1907,19,[2,[],"t"]],[[[1908,17,1908,42,[12,[[],"FunctionType"],[[1908,30,1908,42,[8,[[1908,32,1908,36,"from"],[1908,38,1908,40,"to"]]]]]]],[1909,21,1909,64,[0,[[1909,21,1909,33,[2,[],"FunctionType"]],[1909,34,1909,64,[8,[[1909,36,1909,50,[[1909,36,1909,40,"from"],[1909,43,1909,50,[0,[[1909,43,1909,45,[2,[],"go"]],[1909,46,1909,50,[2,[],"from"]]]]]]],[1909,52,1909,63,[[1909,52,1909,54,"to"],[1909,57,1909,62,[0,[[1909,57,1909,59,[2,[],"go"]],[1909,60,1909,62,[2,[],"to"]]]]]]]]]]]]]],[[1911,17,1911,29,[12,[[],"TupleType"],[[1911,27,1911,29,[11,"ts"]]]]],[1912,21,1912,48,[1,"<|",1,[1912,21,1912,30,[2,[],"TupleType"]],[1912,34,1912,48,[0,[[1912,34,1912,42,[2,["List"],"map"]],[1912,43,1912,45,[2,[],"go"]],[1912,46,1912,48,[2,[],"ts"]]]]]]]],[[1914,17,1914,28,[12,[[],"ListType"],[[1914,26,1914,28,[11,"t_"]]]]],[1915,21,1915,38,[1,"<|",1,[1915,21,1915,29,[2,[],"ListType"]],[1915,33,1915,38,[0,[[1915,33,1915,35,[2,[],"go"]],[1915,36,1915,38,[2,[],"t_"]]]]]]]],[[1917,17,1917,50,[12,[[],"NamedType"],[[1917,27,1917,47,[7,[[1917,29,1917,39,[11,"moduleName"]],[1917,41,1917,45,[11,"name"]]]]],[1917,48,1917,50,[11,"ts"]]]]],[1918,21,1928,82,[16,[[[1919,25,1921,43,[0,[[0],[1,[1919,25,1919,40,[[1919,25,1919,28,"ts_"],[1919,31,1919,40,[1,[1919,31,1919,35,[[],"List"]],[[1919,36,1919,40,[1,[1919,36,1919,40,[[],"Type"]],[]]]]]]]]],[1920,25,1921,43,[[1920,25,1920,28,"ts_"],[],[1921,29,1921,43,[0,[[1921,29,1921,37,[2,["List"],"map"]],[1921,38,1921,40,[2,[],"go"]],[1921,41,1921,43,[2,[],"ts"]]]]]]]]]]],[1923,21,1928,82,[1,"|>",0,[1923,21,1926,74,[1,"|>",0,[1923,21,1924,57,[1,"|>",0,[1923,21,1923,56,[0,[[1923,21,1923,29,[2,["Dict"],"get"]],[1923,30,1923,40,[2,[],"moduleName"]],[1923,41,1923,56,[19,[1923,41,1923,48,[2,[],"context"]],[1923,49,1923,56,"aliases"]]]]]],[1924,28,1924,57,[0,[[1924,28,1924,41,[2,["Maybe"],"andThen"]],[1924,42,1924,57,[7,[1924,43,1924,56,[0,[[1924,43,1924,51,[2,["Dict"],"get"]],[1924,52,1924,56,[2,[],"name"]]]]]]]]]]]],[1926,28,1926,74,[0,[[1926,28,1926,37,[2,["Maybe"],"map"]],[1926,38,1926,74,[7,[1926,39,1926,73,[1,"<<",0,[1926,39,1926,41,[2,[],"go"]],[1926,45,1926,73,[0,[[1926,45,1926,69,[2,[],"assignPositionalTypeVars"]],[1926,70,1926,73,[2,[],"ts_"]]]]]]]]]]]]]],[1928,28,1928,82,[0,[[1928,28,1928,45,[2,["Maybe"],"withDefault"]],[1928,46,1928,82,[7,[1928,47,1928,81,[0,[[1928,47,1928,56,[2,[],"NamedType"]],[1928,57,1928,77,[6,[[1928,59,1928,69,[2,[],"moduleName"]],[1928,71,1928,75,[2,[],"name"]]]]],[1928,78,1928,81,[2,[],"ts_"]]]]]]]]]]]]]]]],[[1930,17,1930,29,[12,[[],"RecordType"],[[1930,28,1930,29,[11,"r"]]]]],[1931,21,1943,26,[16,[[[1932,25,1934,67,[0,[[0],[1,[1932,25,1932,55,[[1932,25,1932,31,"fields"],[1932,34,1932,55,[1,[1932,34,1932,38,[[],"List"]],[[1932,39,1932,55,[3,[[1932,41,1932,47,[1,[1932,41,1932,47,[[],"String"]],[]]],[1932,49,1932,53,[1,[1932,49,1932,53,[[],"Type"]],[]]]]]]]]]]]],[1933,25,1934,67,[[1933,25,1933,31,"fields"],[],[1934,29,1934,67,[0,[[1934,29,1934,37,[2,["List"],"map"]],[1934,38,1934,58,[7,[1934,39,1934,57,[0,[[1934,39,1934,54,[2,["Tuple"],"mapSecond"]],[1934,55,1934,57,[2,[],"go"]]]]]]],[1934,59,1934,67,[19,[1934,59,1934,60,[2,[],"r"]],[1934,61,1934,67,"fields"]]]]]]]]]]]],[1936,21,1943,26,[0,[[1936,21,1936,31,[2,[],"RecordType"]],[1937,25,1943,26,[21,[1937,27,1937,28,"r"],[[1938,31,1942,29,[[1938,31,1938,38,"generic"],[1939,33,1941,108,[1,"|>",0,[1939,33,1939,55,[0,[[1939,33,1939,42,[2,["Maybe"],"map"]],[1939,43,1939,45,[2,[],"go"]],[1939,46,1939,55,[19,[1939,46,1939,47,[2,[],"r"]],[1939,48,1939,55,"generic"]]]]]],[1941,40,1941,108,[0,[[1941,40,1941,49,[2,["Maybe"],"map"]],[1941,50,1941,108,[7,[1941,51,1941,107,[0,[[1941,51,1941,61,[2,[],"dropFields"]],[1941,62,1941,107,[7,[1941,63,1941,106,[1,"<|",1,[1941,63,1941,75,[2,["Set"],"fromList"]],[1941,79,1941,106,[0,[[1941,79,1941,87,[2,["List"],"map"]],[1941,88,1941,99,[2,["Tuple"],"first"]],[1941,100,1941,106,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]],[1942,31,1943,25,[[1942,31,1942,37,"fields"],[1942,40,1942,46,[2,[],"fields"]]]]]]]]]]]]]],[[1945,17,1945,18,[0]],[1948,21,1948,22,[2,[],"t"]]]]]]]]]]]]],[1950,5,1950,33,[1,"<|",1,[1950,5,1950,21,[2,[],"DereferencedType"]],[1950,25,1950,33,[0,[[1950,25,1950,27,[2,[],"go"]],[1950,28,1950,33,[2,[],"type_"]]]]]]]]]]]]]]],[1953,1,1956,28,[2,[[1,[1953,1,1954,3,"{-| A type with all aliases dereferenced.\n-}"]],[1955,6,1955,22,"DereferencedType"],[],[[1956,7,1956,28,[[1956,7,1956,23,"DereferencedType"],[[1956,24,1956,28,[1,[1956,24,1956,28,[[],"Type"]],[]]]]]]]]]],[1959,1,2019,58,[0,[[1,[1959,1,1962,3,"{-| Given the current module name and whether or not a top-level record type (if\n`Just`) and subrecords (if `Just True`) found are in canonical order, convert an\n`Elm.Type.Type` to a `Type`.\n-}"]],[1,[1963,1,1963,137,[[1963,1,1963,14,"docTypeToType"],[1963,17,1963,137,[6,[1963,17,1963,27,[1,[1963,17,1963,27,[[],"ModuleName"]],[]]],[1963,31,1963,137,[6,[1963,31,1963,112,[4,[[1963,33,1963,71,[[1963,33,1963,64,"constrainedTypeVarsAreRespected"],[1963,67,1963,71,[1,[1963,67,1963,71,[[],"Bool"]],[]]]]],[1963,73,1963,111,[[1963,73,1963,97,"subrecordIsAlsoCanonical"],[1963,100,1963,110,[1,[1963,100,1963,105,[[],"Maybe"]],[[1963,106,1963,110,[1,[1963,106,1963,110,[[],"Bool"]],[]]]]]]]]]]],[1963,116,1963,137,[6,[1963,116,1963,129,[1,[1963,116,1963,129,[["Elm","Type"],"Type"]],[]]],[1963,133,1963,137,[1,[1963,133,1963,137,[[],"Type"]],[]]]]]]]]]]]],[1964,1,2019,58,[[1964,1,1964,14,"docTypeToType"],[[1964,15,1964,25,[11,"moduleName"]],[1964,26,1964,101,[14,[1964,27,1964,100,[13,[1964,27,1964,88,[8,[[1964,29,1964,60,"constrainedTypeVarsAreRespected"],[1964,62,1964,86,"subrecordIsAlsoCanonical"]]]],[1964,92,1964,100,"settings"]]]]],[1964,102,1964,107,[11,"type_"]]],[1965,5,2019,58,[16,[[[1966,9,1971,21,[0,[[0],[1,[1966,9,1966,35,[[1966,9,1966,11,"go"],[1966,14,1966,35,[6,[1966,14,1966,27,[1,[1966,14,1966,27,[["Elm","Type"],"Type"]],[]]],[1966,31,1966,35,[1,[1966,31,1966,35,[[],"Type"]],[]]]]]]]],[1967,9,1971,21,[[1967,9,1967,11,"go"],[],[1968,13,1971,21,[1,"|>",0,[1968,13,1968,60,[0,[[1968,13,1968,26,[2,["MaybeX"],"filter"]],[1968,27,1968,35,[2,[],"identity"]],[1968,36,1968,60,[2,[],"subrecordIsAlsoCanonical"]]]]],[1969,20,1971,21,[7,[1969,21,1970,111,[18,[[[1969,22,1969,41,[11,"subrecordStillCanon"]]],[1970,25,1970,111,[0,[[1970,25,1970,38,[2,[],"docTypeToType"]],[1970,39,1970,49,[2,[],"moduleName"]],[1970,50,1970,111,[21,[1970,52,1970,60,"settings"],[[1970,63,1970,110,[[1970,63,1970,87,"subrecordIsAlsoCanonical"],[1970,90,1970,109,[2,[],"subrecordStillCanon"]]]]]]]]]]]]]]]]]]]]]],[1973,9,1980,28,[0,[[0],[1,[1973,9,1973,76,[[1973,9,1973,17,"makeList"],[1973,20,1973,76,[6,[1973,20,1973,30,[1,[1973,20,1973,30,[[],"ModuleName"]],[]]],[1973,34,1973,76,[6,[1973,34,1973,40,[1,[1973,34,1973,40,[[],"String"]],[]]],[1973,44,1973,76,[6,[1973,44,1973,62,[1,[1973,44,1973,48,[[],"List"]],[[1973,49,1973,62,[1,[1973,49,1973,62,[["Elm","Type"],"Type"]],[]]]]]],[1973,66,1973,76,[1,[1973,66,1973,71,[[],"Maybe"]],[[1973,72,1973,76,[1,[1973,72,1973,76,[[],"Type"]],[]]]]]]]]]]]]]]],[1974,9,1980,28,[[1974,9,1974,17,"makeList"],[[1974,18,1974,21,[11,"mod"]],[1974,22,1974,26,[11,"name"]],[1974,27,1974,31,[11,"args"]]],[1975,13,1980,28,[17,[[1975,18,1975,37,[6,[[1975,20,1975,23,[2,[],"mod"]],[1975,25,1975,29,[2,[],"name"]],[1975,31,1975,35,[2,[],"args"]]]]],[[[1976,17,1976,53,[7,[[1976,19,1976,29,[10,[[1976,21,1976,27,[3,"List"]]]]],[1976,31,1976,37,[3,"List"]],[1976,39,1976,51,[10,[[1976,41,1976,49,[11,"listType"]]]]]]]],[1977,21,1977,52,[1,"<|",1,[1977,21,1977,25,[2,[],"Just"]],[1977,29,1977,52,[1,"<|",1,[1977,29,1977,37,[2,[],"ListType"]],[1977,41,1977,52,[0,[[1977,41,1977,43,[2,[],"go"]],[1977,44,1977,52,[2,[],"listType"]]]]]]]]]],[[1979,17,1979,18,[0]],[1980,21,1980,28,[2,[],"Nothing"]]]]]]]]]]]]],[1982,5,2019,58,[17,[[1982,10,1982,15,[2,[],"type_"]],[[[1983,9,1983,32,[12,[["Elm","Type"],"Lambda"],[[1983,25,1983,29,[11,"from"]],[1983,30,1983,32,[11,"to"]]]]],[1984,13,1984,56,[0,[[1984,13,1984,25,[2,[],"FunctionType"]],[1984,26,1984,56,[8,[[1984,28,1984,42,[[1984,28,1984,32,"from"],[1984,35,1984,42,[0,[[1984,35,1984,37,[2,[],"go"]],[1984,38,1984,42,[2,[],"from"]]]]]]],[1984,44,1984,55,[[1984,44,1984,46,"to"],[1984,49,1984,54,[0,[[1984,49,1984,51,[2,[],"go"]],[1984,52,1984,54,[2,[],"to"]]]]]]]]]]]]]],[[1986,9,1986,26,[12,[["Elm","Type"],"Tuple"],[[1986,24,1986,26,[11,"ts"]]]]],[1987,13,1987,40,[1,"<|",1,[1987,13,1987,22,[2,[],"TupleType"]],[1987,26,1987,40,[0,[[1987,26,1987,34,[2,["List"],"map"]],[1987,35,1987,37,[2,[],"go"]],[1987,38,1987,40,[2,[],"ts"]]]]]]]],[[1989,9,1989,37,[12,[["Elm","Type"],"Type"],[[1989,23,1989,32,[11,"qualified"]],[1989,33,1989,37,[11,"args"]]]]],[1991,13,2005,21,[1,"|>",0,[1991,13,2001,63,[1,"|>",0,[1991,13,2000,22,[1,"|>",0,[1991,13,1992,36,[1,"|>",0,[1991,13,1991,39,[0,[[1991,13,1991,25,[2,["String"],"split"]],[1991,26,1991,29,[5,"."]],[1991,30,1991,39,[2,[],"qualified"]]]]],[1992,20,1992,36,[2,["ListX"],"unconsLast"]]]],[1993,20,2000,22,[0,[[1993,20,1993,29,[2,["Maybe"],"map"]],[1994,21,2000,22,[7,[1994,22,1999,37,[18,[[[1994,23,1994,31,[7,[[1994,25,1994,26,[11,"n"]],[1994,28,1994,29,[11,"m"]]]]]],[1995,25,1999,37,[11,[1995,28,1995,35,[1,"==",2,[1995,28,1995,29,[2,[],"m"]],[1995,33,1995,35,[9,[]]]]],[1996,29,1996,46,[6,[[1996,31,1996,41,[2,[],"moduleName"]],[1996,43,1996,44,[2,[],"n"]]]]],[1999,29,1999,37,[6,[[1999,31,1999,32,[2,[],"m"]],[1999,34,1999,35,[2,[],"n"]]]]]]]]]]]]]]]]],[2001,20,2001,63,[0,[[2001,20,2001,37,[2,["Maybe"],"withDefault"]],[2001,38,2001,63,[6,[[2001,40,2001,50,[2,[],"moduleName"]],[2001,52,2001,61,[2,[],"qualified"]]]]]]]]]],[2002,20,2005,21,[7,[2002,21,2004,107,[18,[[[2002,22,2002,35,[7,[[2002,24,2002,27,[11,"mod"]],[2002,29,2002,33,[11,"name"]]]]]],[2003,25,2004,107,[1,"|>",0,[2003,25,2003,47,[0,[[2003,25,2003,33,[2,[],"makeList"]],[2003,34,2003,37,[2,[],"mod"]],[2003,38,2003,42,[2,[],"name"]],[2003,43,2003,47,[2,[],"args"]]]]],[2004,32,2004,107,[0,[[2004,32,2004,54,[2,["MaybeX"],"withDefaultLazy"]],[2004,55,2004,107,[7,[2004,56,2004,106,[18,[[[2004,57,2004,59,[1]]],[2004,63,2004,106,[1,"<|",1,[2004,63,2004,86,[0,[[2004,63,2004,72,[2,[],"NamedType"]],[2004,73,2004,86,[6,[[2004,75,2004,78,[2,[],"mod"]],[2004,80,2004,84,[2,[],"name"]]]]]]]],[2004,90,2004,106,[0,[[2004,90,2004,98,[2,["List"],"map"]],[2004,99,2004,101,[2,[],"go"]],[2004,102,2004,106,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]],[[2007,9,2007,39,[12,[["Elm","Type"],"Record"],[[2007,25,2007,31,[11,"fields"]],[2007,32,2007,39,[11,"generic"]]]]],[2008,13,2016,18,[0,[[2008,13,2008,23,[2,[],"RecordType"]],[2009,17,2016,18,[8,[[2009,19,2013,56,[[2009,19,2009,26,"generic"],[2013,21,2013,56,[0,[[2013,21,2013,30,[2,["Maybe"],"map"]],[2013,31,2013,48,[7,[2013,32,2013,47,[0,[[2013,32,2013,39,[2,[],"TypeVar"]],[2013,40,2013,47,[2,[],"Nothing"]]]]]]],[2013,49,2013,56,[2,[],"generic"]]]]]]],[2014,19,2015,17,[[2014,19,2014,28,"canonical"],[2014,31,2014,66,[1,"/=",2,[2014,31,2014,55,[2,[],"subrecordIsAlsoCanonical"]],[2014,59,2014,66,[2,[],"Nothing"]]]]]],[2015,19,2016,17,[[2015,19,2015,25,"fields"],[2015,28,2015,64,[0,[[2015,28,2015,36,[2,["List"],"map"]],[2015,37,2015,57,[7,[2015,38,2015,56,[0,[[2015,38,2015,53,[2,["Tuple"],"mapSecond"]],[2015,54,2015,56,[2,[],"go"]]]]]]],[2015,58,2015,64,[2,[],"fields"]]]]]]]]]]]]]],[[2018,9,2018,23,[12,[["Elm","Type"],"Var"],[[2018,22,2018,23,[11,"s"]]]]],[2019,13,2019,58,[0,[[2019,13,2019,24,[2,[],"makeTypeVar"]],[2019,25,2019,56,[2,[],"constrainedTypeVarsAreRespected"]],[2019,57,2019,58,[2,[],"s"]]]]]]]]]]]]]]]]]],[2022,1,2033,34,[0,[[1,[2022,1,2026,3,"{-| Given the current module name, whether or not a top-level record type (if\n`Just`) and subrecords (if `Just True`) found are in canonical order, and a dict\nof positional type vars, convert an `Elm.Type.Type` to a\n`TypeWithPositionalVars`.\n-}"]],[1,[2027,1,2027,188,[[2027,1,2027,32,"docTypeToTypeWithPositionalVars"],[2027,35,2027,188,[6,[2027,35,2027,45,[1,[2027,35,2027,45,[[],"ModuleName"]],[]]],[2027,49,2027,188,[6,[2027,49,2027,130,[4,[[2027,51,2027,89,[[2027,51,2027,82,"constrainedTypeVarsAreRespected"],[2027,85,2027,89,[1,[2027,85,2027,89,[[],"Bool"]],[]]]]],[2027,91,2027,129,[[2027,91,2027,115,"subrecordIsAlsoCanonical"],[2027,118,2027,128,[1,[2027,118,2027,123,[[],"Maybe"]],[[2027,124,2027,128,[1,[2027,124,2027,128,[[],"Bool"]],[]]]]]]]]]]],[2027,134,2027,188,[6,[2027,134,2027,145,[1,[2027,134,2027,138,[[],"List"]],[[2027,139,2027,145,[1,[2027,139,2027,145,[[],"String"]],[]]]]]],[2027,149,2027,188,[6,[2027,149,2027,162,[1,[2027,149,2027,162,[["Elm","Type"],"Type"]],[]]],[2027,166,2027,188,[1,[2027,166,2027,188,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[2028,1,2033,34,[[2028,1,2028,32,"docTypeToTypeWithPositionalVars"],[[2028,33,2028,43,[11,"moduleName"]],[2028,44,2028,52,[11,"settings"]],[2028,53,2028,61,[11,"typeArgs"]]],[2029,5,2033,34,[1,">>",1,[2029,5,2029,38,[0,[[2029,5,2029,18,[2,[],"docTypeToType"]],[2029,19,2029,29,[2,[],"moduleName"]],[2029,30,2029,38,[2,[],"settings"]]]]],[2030,12,2033,34,[1,">>",1,[2030,12,2030,28,[2,[],"DereferencedType"]],[2031,12,2033,34,[1,">>",1,[2031,12,2031,63,[0,[[2031,12,2031,26,[2,[],"assignTypeVars"]],[2031,27,2031,63,[7,[2031,28,2031,62,[0,[[2031,28,2031,53,[2,[],"makePositionalArgTypeVars"]],[2031,54,2031,62,[2,[],"typeArgs"]]]]]]]]]],[2032,12,2033,34,[1,">>",1,[2032,12,2032,19,[2,[],"getType"]],[2033,12,2033,34,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]]]],[2036,1,2042,6,[1,[[1,[2036,1,2037,3,"{-| Information on what functions, types/aliases, and fully-exposed types with constructors are exposed by the module.\n-}"]],[2038,12,2038,24,"ExposedNames"],[],[2039,5,2042,6,[4,[[2039,7,2039,29,[[2039,7,2039,16,"functions"],[2039,19,2039,29,[1,[2039,19,2039,22,[[],"Set"]],[[2039,23,2039,29,[1,[2039,23,2039,29,[[],"String"]],[]]]]]]]],[2040,7,2041,5,[[2040,7,2040,12,"types"],[2040,15,2040,25,[1,[2040,15,2040,18,[[],"Set"]],[[2040,19,2040,25,[1,[2040,19,2040,25,[[],"String"]],[]]]]]]]],[2041,7,2042,5,[[2041,7,2041,16,"openTypes"],[2041,19,2041,29,[1,[2041,19,2041,22,[[],"Set"]],[[2041,23,2041,29,[1,[2041,23,2041,29,[[],"String"]],[]]]]]]]]]]]]]],[2045,1,2048,70,[1,[[1,[2045,1,2046,3,"{-| A single field of a record, to check for sorting.\n-}"]],[2047,12,2047,17,"Field"],[],[2048,5,2048,70,[4,[[2048,7,2048,21,[[2048,7,2048,12,"field"],[2048,15,2048,21,[1,[2048,15,2048,21,[[],"String"]],[]]]]],[2048,23,2048,53,[[2048,23,2048,28,"type_"],[2048,31,2048,53,[1,[2048,31,2048,36,[[],"Maybe"]],[[2048,37,2048,53,[1,[2048,37,2048,53,[[],"DereferencedType"]],[]]]]]]]],[2048,55,2048,69,[[2048,55,2048,60,"range"],[2048,63,2048,68,[1,[2048,63,2048,68,[[],"Range"]],[]]]]]]]]]]],[2051,1,2057,10,[2,[[1,[2051,1,2052,3,"{-| Define a canonical ordering (and type) for fields.\n-}"]],[2053,6,2053,16,"FieldOrder"],[],[[2054,7,2057,10,[[2054,7,2054,17,"FieldOrder"],[[2055,9,2057,10,[4,[[2055,11,2055,48,[[2055,11,2055,20,"canonical"],[2055,23,2055,48,[1,[2055,23,2055,27,[[],"Dict"]],[[2055,28,2055,34,[1,[2055,28,2055,34,[[],"String"]],[]]],[2055,35,2055,48,[3,[[2055,37,2055,40,[1,[2055,37,2055,40,[[],"Int"]],[]]],[2055,42,2055,46,[1,[2055,42,2055,46,[[],"Type"]],[]]]]]]]]]]],[2056,11,2057,9,[[2056,11,2056,18,"generic"],[2056,21,2056,34,[1,[2056,21,2056,26,[[],"Maybe"]],[[2056,27,2056,34,[1,[2056,27,2056,34,[[],"Generic"]],[]]]]]]]]]]]]]]]]]],[2060,1,2099,70,[0,[[1,[2060,1,2063,3,"{-| Given context, its return type, its module lookup node, and its name, find\nany type info stored for a function, canonicalizing the result and returning a\nlist of arg types (and finally the return type).\n-}"]],[1,[2064,1,2064,111,[[2064,1,2064,17,"findFunctionType"],[2064,20,2064,111,[6,[2064,20,2064,32,[1,[2064,20,2064,32,[[],"LocalContext"]],[]]],[2064,36,2064,111,[6,[2064,36,2064,58,[1,[2064,36,2064,41,[[],"Maybe"]],[[2064,42,2064,58,[1,[2064,42,2064,58,[[],"DereferencedType"]],[]]]]]],[2064,62,2064,111,[6,[2064,62,2064,68,[1,[2064,62,2064,66,[[],"Node"]],[[2064,67,2064,68,[0,"a"]]]]],[2064,72,2064,111,[6,[2064,72,2064,78,[1,[2064,72,2064,78,[[],"String"]],[]]],[2064,82,2064,111,[1,[2064,82,2064,87,[[],"Maybe"]],[[2064,88,2064,111,[1,[2064,89,2064,93,[[],"List"]],[[2064,94,2064,110,[1,[2064,94,2064,110,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]]]]]],[2065,1,2099,70,[[2065,1,2065,17,"findFunctionType"],[[2065,18,2065,45,[8,[[2065,20,2065,27,"context"],[2065,29,2065,43,"localFunctions"]]]],[2065,46,2065,51,[11,"type_"]],[2065,52,2065,62,[11,"moduleNode"]],[2065,63,2065,67,[11,"name"]]],[2066,5,2099,70,[16,[[[2067,9,2074,23,[0,[[0],[1,[2067,9,2067,58,[[2067,9,2067,20,"getTypeVars"],[2067,23,2067,58,[6,[2067,23,2067,45,[1,[2067,23,2067,28,[[],"Maybe"]],[[2067,29,2067,45,[1,[2067,29,2067,45,[[],"DereferencedType"]],[]]]]]],[2067,49,2067,58,[1,[2067,49,2067,53,[[],"List"]],[[2067,54,2067,58,[1,[2067,54,2067,58,[[],"Type"]],[]]]]]]]]]]],[2068,9,2074,23,[[2068,9,2068,20,"getTypeVars"],[[2068,21,2068,22,[11,"t"]]],[2069,13,2074,23,[17,[[2069,18,2069,37,[0,[[2069,18,2069,27,[2,["Maybe"],"map"]],[2069,28,2069,35,[2,[],"getType"]],[2069,36,2069,37,[2,[],"t"]]]]],[[[2070,17,2070,38,[12,[[],"Just"],[[2070,22,2070,38,[14,[2070,23,2070,37,[12,[[],"NamedType"],[[2070,33,2070,34,[0]],[2070,35,2070,37,[11,"ts"]]]]]]]]]],[2071,21,2071,23,[2,[],"ts"]]],[[2073,17,2073,18,[0]],[2074,21,2074,23,[9,[]]]]]]]]]]]]]],[2076,5,2099,70,[1,"|>",0,[2076,5,2098,14,[1,"|>",0,[2076,5,2084,14,[1,"|>",0,[2076,5,2076,49,[0,[[2076,5,2076,18,[2,[],"moduleNameFor"]],[2076,19,2076,38,[19,[2076,19,2076,26,[2,[],"context"]],[2076,27,2076,38,"lookupTable"]]],[2076,39,2076,49,[2,[],"moduleNode"]]]]],[2077,12,2084,14,[0,[[2077,12,2077,21,[2,["Maybe"],"map"]],[2078,13,2084,14,[7,[2078,14,2083,31,[18,[[[2078,15,2078,25,[11,"moduleName"]]],[2079,17,2083,31,[11,[2079,20,2079,36,[1,"==",2,[2079,20,2079,30,[2,[],"moduleName"]],[2079,34,2079,36,[9,[]]]]],[2080,21,2080,39,[19,[2080,21,2080,28,[2,[],"context"]],[2080,29,2080,39,"moduleName"]]],[2083,21,2083,31,[2,[],"moduleName"]]]]]]]]]]]]]],[2085,12,2098,14,[0,[[2085,12,2085,25,[2,["Maybe"],"andThen"]],[2086,13,2098,14,[7,[2086,14,2097,83,[18,[[[2086,15,2086,25,[11,"moduleName"]]],[2087,17,2097,83,[11,[2087,20,2087,91,[1,"<|",1,[2087,20,2087,69,[0,[[2087,20,2087,33,[2,["MaybeX"],"unwrap"]],[2087,34,2087,39,[2,[],"False"]],[2087,40,2087,69,[7,[2087,41,2087,68,[1,"<<",0,[2087,41,2087,53,[2,["Char"],"isUpper"]],[2087,57,2087,68,[2,["Tuple"],"first"]]]]]]]]],[2087,73,2087,91,[0,[[2087,73,2087,86,[2,["String"],"uncons"]],[2087,87,2087,91,[2,[],"name"]]]]]]],[2089,21,2092,84,[1,"|>",0,[2089,21,2091,44,[1,"|>",0,[2089,21,2090,57,[1,"|>",0,[2089,21,2089,61,[0,[[2089,21,2089,29,[2,["Dict"],"get"]],[2089,30,2089,40,[2,[],"moduleName"]],[2089,41,2089,61,[19,[2089,41,2089,48,[2,[],"context"]],[2089,49,2089,61,"constructors"]]]]]],[2090,28,2090,57,[0,[[2090,28,2090,41,[2,["Maybe"],"andThen"]],[2090,42,2090,57,[7,[2090,43,2090,56,[0,[[2090,43,2090,51,[2,["Dict"],"get"]],[2090,52,2090,56,[2,[],"name"]]]]]]]]]]]],[2091,28,2091,44,[0,[[2091,28,2091,37,[2,["Maybe"],"map"]],[2091,38,2091,44,[20,".type_"]]]]]]],[2092,28,2092,84,[0,[[2092,28,2092,37,[2,["Maybe"],"map"]],[2092,38,2092,84,[7,[2092,39,2092,83,[0,[[2092,39,2092,63,[2,[],"assignPositionalTypeVars"]],[2092,64,2092,83,[7,[2092,65,2092,82,[0,[[2092,65,2092,76,[2,[],"getTypeVars"]],[2092,77,2092,82,[2,[],"type_"]]]]]]]]]]]]]]]]],[2095,21,2097,83,[1,"|>",0,[2095,21,2096,57,[1,"|>",0,[2095,21,2095,62,[0,[[2095,21,2095,29,[2,["Dict"],"get"]],[2095,30,2095,40,[2,[],"moduleName"]],[2095,41,2095,62,[19,[2095,41,2095,48,[2,[],"context"]],[2095,49,2095,62,"functionTypes"]]]]]],[2096,28,2096,57,[0,[[2096,28,2096,41,[2,["Maybe"],"andThen"]],[2096,42,2096,57,[7,[2096,43,2096,56,[0,[[2096,43,2096,51,[2,["Dict"],"get"]],[2096,52,2096,56,[2,[],"name"]]]]]]]]]]]],[2097,28,2097,83,[0,[[2097,28,2097,45,[2,["MaybeX"],"orElseLazy"]],[2097,46,2097,83,[7,[2097,47,2097,82,[18,[[[2097,48,2097,50,[1]]],[2097,54,2097,82,[0,[[2097,54,2097,62,[2,["Dict"],"get"]],[2097,63,2097,67,[2,[],"name"]],[2097,68,2097,82,[2,[],"localFunctions"]]]]]]]]]]]]]]]]]]]]]]]]]]],[2099,12,2099,70,[0,[[2099,12,2099,21,[2,["Maybe"],"map"]],[2099,22,2099,70,[7,[2099,23,2099,69,[1,"<<",0,[2099,23,2099,42,[2,[],"flattenFunctionType"]],[2099,46,2099,69,[0,[[2099,46,2099,61,[2,[],"dereferenceType"]],[2099,62,2099,69,[2,[],"context"]]]]]]]]]]]]]]]]]]]]]],[2102,1,2182,35,[0,[[1,[2102,1,2105,3,"{-| Given context of known types, any information that would help find the\nappropriate canonical ordering, and a list of fields, return all matching field\norders.\n-}"]],[1,[2106,1,2106,177,[[2106,1,2106,18,"findMatchingTypes"],[2106,21,2106,177,[6,[2106,21,2106,31,[1,[2106,21,2106,31,[[],"RuleConfig"]],[]]],[2106,35,2106,177,[6,[2106,35,2106,48,[1,[2106,35,2106,48,[[],"ModuleContext"]],[]]],[2106,52,2106,177,[6,[2106,52,2106,67,[1,[2106,52,2106,57,[[],"Maybe"]],[[2106,58,2106,67,[1,[2106,58,2106,67,[[],"OrderInfo"]],[]]]]]],[2106,71,2106,177,[6,[2106,71,2106,81,[1,[2106,71,2106,75,[[],"List"]],[[2106,76,2106,81,[1,[2106,76,2106,81,[[],"Field"]],[]]]]]],[2106,85,2106,177,[1,[2106,85,2106,89,[[],"List"]],[[2106,90,2106,177,[4,[[2106,92,2106,115,[[2106,92,2106,102,"fieldOrder"],[2106,105,2106,115,[1,[2106,105,2106,115,[[],"FieldOrder"]],[]]]]],[2106,117,2106,135,[[2106,117,2106,128,"isSubrecord"],[2106,131,2106,135,[1,[2106,131,2106,135,[[],"Bool"]],[]]]]],[2106,137,2106,176,[[2106,137,2106,145,"typeName"],[2106,148,2106,175,[1,[2106,148,2106,152,[[],"List"]],[[2106,153,2106,175,[3,[[2106,155,2106,165,[1,[2106,155,2106,165,[[],"ModuleName"]],[]]],[2106,167,2106,173,[1,[2106,167,2106,173,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2107,1,2182,35,[[2107,1,2107,18,"findMatchingTypes"],[[2107,19,2107,25,[11,"config"]],[2107,26,2107,33,[11,"context"]],[2107,34,2107,38,[11,"info"]],[2107,39,2107,50,[11,"matchFields"]]],[2108,5,2182,35,[16,[[[2109,9,2127,61,[0,[[0],[1,[2109,9,2109,128,[[2109,9,2109,19,"getMatches"],[2109,22,2109,128,[6,[2109,22,2109,32,[1,[2109,22,2109,26,[[],"List"]],[[2109,27,2109,32,[1,[2109,27,2109,32,[[],"Field"]],[]]]]]],[2109,36,2109,128,[1,[2109,36,2109,40,[[],"List"]],[[2109,41,2109,128,[4,[[2109,43,2109,66,[[2109,43,2109,53,"fieldOrder"],[2109,56,2109,66,[1,[2109,56,2109,66,[[],"FieldOrder"]],[]]]]],[2109,68,2109,86,[[2109,68,2109,79,"isSubrecord"],[2109,82,2109,86,[1,[2109,82,2109,86,[[],"Bool"]],[]]]]],[2109,88,2109,127,[[2109,88,2109,96,"typeName"],[2109,99,2109,126,[1,[2109,99,2109,103,[[],"List"]],[[2109,104,2109,126,[3,[[2109,106,2109,116,[1,[2109,106,2109,116,[[],"ModuleName"]],[]]],[2109,118,2109,124,[1,[2109,118,2109,124,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]],[2110,9,2127,61,[[2110,9,2110,19,"getMatches"],[[2110,20,2110,22,[11,"fs"]]],[2111,13,2127,61,[16,[[[2112,17,2117,68,[1,[2112,17,2112,53,[8,[[2112,19,2112,35,"canonicalMatches"],[2112,37,2112,51,"genericMatches"]]]],[2113,21,2117,68,[11,[2113,24,2113,39,[0,[[2113,24,2113,36,[2,["List"],"isEmpty"]],[2113,37,2113,39,[2,[],"fs"]]]]],[2114,25,2114,71,[8,[[2114,27,2114,48,[[2114,27,2114,43,"canonicalMatches"],[2114,46,2114,48,[9,[]]]]],[2114,50,2114,70,[[2114,50,2114,64,"genericMatches"],[2114,67,2114,69,[9,[]]]]]]]],[2117,25,2117,68,[0,[[2117,25,2117,37,[2,[],"searchOrders"]],[2117,38,2117,44,[2,[],"config"]],[2117,45,2117,52,[2,[],"context"]],[2117,53,2117,65,[2,[],"hasAllFields"]],[2117,66,2117,68,[2,[],"fs"]]]]]]]]]],[2119,13,2127,61,[1,"++",1,[2119,13,2126,33,[0,[[2119,13,2119,21,[2,["List"],"map"]],[2120,17,2125,18,[7,[2120,18,2124,22,[18,[[[2120,19,2120,30,[7,[[2120,21,2120,25,[11,"name"]],[2120,27,2120,28,[11,"k"]]]]]],[2121,21,2124,22,[8,[[2121,23,2121,58,[[2121,23,2121,33,"fieldOrder"],[2121,36,2121,58,[0,[[2121,36,2121,48,[2,[],"toFieldOrder"]],[2121,49,2121,56,[2,[],"Nothing"]],[2121,57,2121,58,[2,[],"k"]]]]]]],[2122,23,2123,21,[[2122,23,2122,34,"isSubrecord"],[2122,37,2122,50,[19,[2122,37,2122,38,[2,[],"k"]],[2122,39,2122,50,"isSubrecord"]]]]],[2123,23,2124,21,[[2123,23,2123,31,"typeName"],[2123,34,2123,42,[9,[[2123,36,2123,40,[2,[],"name"]]]]]]]]]]]]]]],[2126,17,2126,33,[2,[],"canonicalMatches"]]]]],[2127,20,2127,61,[0,[[2127,20,2127,34,[2,["List"],"concatMap"]],[2127,35,2127,46,[2,[],"makeGeneric"]],[2127,47,2127,61,[2,[],"genericMatches"]]]]]]]]]]]]]]],[2129,9,2136,26,[0,[[0],[1,[2129,9,2129,28,[[2129,9,2129,21,"hasAllFields"],[2129,24,2129,28,[1,[2129,24,2129,28,[[],"Bool"]],[]]]]]],[2130,9,2136,26,[[2130,9,2130,21,"hasAllFields"],[],[2131,13,2136,26,[17,[[2131,18,2131,22,[2,[],"info"]],[[[2132,17,2132,34,[12,[[],"Just"],[[2132,22,2132,34,[12,[[],"HasAllFields"],[]]]]]],[2133,21,2133,25,[2,[],"True"]]],[[2135,17,2135,18,[0]],[2136,21,2136,26,[2,[],"False"]]]]]]]]]]]],[2138,9,2163,21,[0,[[0],[1,[2138,9,2138,192,[[2138,9,2138,20,"makeGeneric"],[2138,23,2138,192,[6,[2138,23,2138,96,[4,[[2138,25,2138,45,[[2138,25,2138,32,"missing"],[2138,35,2138,45,[1,[2138,35,2138,39,[[],"List"]],[[2138,40,2138,45,[1,[2138,40,2138,45,[[],"Field"]],[]]]]]]]],[2138,47,2138,95,[[2138,47,2138,52,"type_"],[2138,55,2138,94,[3,[[2138,57,2138,79,[3,[[2138,59,2138,69,[1,[2138,59,2138,69,[[],"ModuleName"]],[]]],[2138,71,2138,77,[1,[2138,71,2138,77,[[],"String"]],[]]]]]],[2138,81,2138,92,[1,[2138,81,2138,92,[[],"KnownRecord"]],[]]]]]]]]]]],[2138,100,2138,192,[1,[2138,100,2138,104,[[],"List"]],[[2138,105,2138,192,[4,[[2138,107,2138,130,[[2138,107,2138,117,"fieldOrder"],[2138,120,2138,130,[1,[2138,120,2138,130,[[],"FieldOrder"]],[]]]]],[2138,132,2138,150,[[2138,132,2138,143,"isSubrecord"],[2138,146,2138,150,[1,[2138,146,2138,150,[[],"Bool"]],[]]]]],[2138,152,2138,191,[[2138,152,2138,160,"typeName"],[2138,163,2138,190,[1,[2138,163,2138,167,[[],"List"]],[[2138,168,2138,190,[3,[[2138,170,2138,180,[1,[2138,170,2138,180,[[],"ModuleName"]],[]]],[2138,182,2138,188,[1,[2138,182,2138,188,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]],[2139,9,2163,21,[[2139,9,2139,20,"makeGeneric"],[[2139,21,2139,39,[8,[[2139,23,2139,30,"missing"],[2139,32,2139,37,"type_"]]]]],[2140,13,2163,21,[16,[[[2141,17,2142,26,[1,[2141,17,2141,27,[7,[[2141,19,2141,20,[11,"n"]],[2141,22,2141,25,[11,"rec"]]]]],[2142,21,2142,26,[2,[],"type_"]]]]],[2144,13,2163,21,[1,"|>",0,[2144,13,2151,22,[1,"|>",0,[2144,13,2144,31,[0,[[2144,13,2144,23,[2,[],"getMatches"]],[2144,24,2144,31,[2,[],"missing"]]]]],[2145,20,2151,22,[0,[[2145,20,2145,28,[2,["List"],"map"]],[2146,21,2151,22,[7,[2146,22,2150,26,[18,[[[2146,23,2146,60,[8,[[2146,25,2146,35,"fieldOrder"],[2146,37,2146,48,"isSubrecord"],[2146,50,2146,58,"typeName"]]]]],[2147,25,2150,26,[8,[[2147,27,2147,91,[[2147,27,2147,37,"fieldOrder"],[2147,40,2147,91,[0,[[2147,40,2147,52,[2,[],"toFieldOrder"]],[2147,53,2147,87,[7,[2147,54,2147,86,[1,"<|",1,[2147,54,2147,58,[2,[],"Just"]],[2147,62,2147,86,[0,[[2147,62,2147,75,[2,[],"OrderedFields"]],[2147,76,2147,86,[2,[],"fieldOrder"]]]]]]]]],[2147,88,2147,91,[2,[],"rec"]]]]]]],[2148,27,2149,25,[[2148,27,2148,38,"isSubrecord"],[2148,41,2148,71,[1,"||",1,[2148,41,2148,56,[19,[2148,41,2148,44,[2,[],"rec"]],[2148,45,2148,56,"isSubrecord"]]],[2148,60,2148,71,[2,[],"isSubrecord"]]]]]],[2149,27,2150,25,[[2149,27,2149,35,"typeName"],[2149,38,2149,51,[1,"::",1,[2149,38,2149,39,[2,[],"n"]],[2149,43,2149,51,[2,[],"typeName"]]]]]]]]]]]]]]]]]]],[2152,20,2163,21,[7,[2152,21,2162,31,[18,[[[2152,22,2152,24,[11,"ls"]]],[2153,25,2162,31,[11,[2153,28,2153,43,[0,[[2153,28,2153,40,[2,["List"],"isEmpty"]],[2153,41,2153,43,[2,[],"ls"]]]]],[2155,29,2159,30,[9,[[2155,31,2158,32,[8,[[2155,33,2155,113,[[2155,33,2155,43,"fieldOrder"],[2155,46,2155,113,[0,[[2155,46,2155,58,[2,[],"toFieldOrder"]],[2155,59,2155,109,[7,[2155,60,2155,108,[1,"<|",1,[2155,60,2155,64,[2,[],"Just"]],[2155,68,2155,108,[1,"<|",1,[2155,68,2155,81,[2,[],"UnknownFields"]],[2155,85,2155,108,[0,[[2155,85,2155,93,[2,["List"],"map"]],[2155,94,2155,100,[20,".field"]],[2155,101,2155,108,[2,[],"missing"]]]]]]]]]]],[2155,110,2155,113,[2,[],"rec"]]]]]]],[2156,33,2157,31,[[2156,33,2156,44,"isSubrecord"],[2156,47,2156,62,[19,[2156,47,2156,50,[2,[],"rec"]],[2156,51,2156,62,"isSubrecord"]]]]],[2157,33,2158,31,[[2157,33,2157,41,"typeName"],[2157,44,2157,49,[9,[[2157,46,2157,47,[2,[],"n"]]]]]]]]]]]]],[2162,29,2162,31,[2,[],"ls"]]]]]]]]]]]]]]]]]]],[2165,9,2170,18,[0,[[0],[1,[2165,9,2165,66,[[2165,9,2165,21,"toFieldOrder"],[2165,24,2165,66,[6,[2165,24,2165,37,[1,[2165,24,2165,29,[[],"Maybe"]],[[2165,30,2165,37,[1,[2165,30,2165,37,[[],"Generic"]],[]]]]]],[2165,41,2165,66,[6,[2165,41,2165,52,[1,[2165,41,2165,52,[[],"KnownRecord"]],[]]],[2165,56,2165,66,[1,[2165,56,2165,66,[[],"FieldOrder"]],[]]]]]]]]]],[2166,9,2170,18,[[2166,9,2166,21,"toFieldOrder"],[[2166,22,2166,29,[11,"generic"]],[2166,30,2166,39,[8,[[2166,32,2166,37,"order"]]]]],[2167,13,2170,18,[0,[[2167,13,2167,23,[2,[],"FieldOrder"]],[2168,17,2170,18,[8,[[2168,19,2168,36,[[2168,19,2168,28,"canonical"],[2168,31,2168,36,[2,[],"order"]]]],[2169,19,2170,17,[[2169,19,2169,26,"generic"],[2169,29,2169,36,[2,[],"generic"]]]]]]]]]]]]]]]],[2172,5,2182,35,[17,[[2172,10,2172,14,[2,[],"info"]],[[[2173,9,2173,31,[12,[[],"Just"],[[2173,14,2173,31,[14,[2173,15,2173,30,[12,[[],"HasFieldOrder"],[[2173,29,2173,30,[11,"f"]]]]]]]]]],[2175,13,2179,14,[9,[[2175,15,2178,16,[8,[[2175,17,2175,31,[[2175,17,2175,27,"fieldOrder"],[2175,30,2175,31,[2,[],"f"]]]],[2176,17,2177,15,[[2176,17,2176,28,"isSubrecord"],[2176,31,2176,36,[2,[],"False"]]]],[2177,17,2178,15,[[2177,17,2177,25,"typeName"],[2177,28,2177,30,[9,[]]]]]]]]]]]],[[2181,9,2181,10,[0]],[2182,13,2182,35,[0,[[2182,13,2182,23,[2,[],"getMatches"]],[2182,24,2182,35,[2,[],"matchFields"]]]]]]]]]]]]]]]]]],[2185,1,2199,14,[0,[[1,[2185,1,2187,3,"{-| Given context and an operator, find any type info stored for an operator,\ncanonicalizing the result.\n-}"]],[1,[2188,1,2188,76,[[2188,1,2188,17,"findOperatorType"],[2188,20,2188,76,[6,[2188,20,2188,33,[1,[2188,20,2188,33,[[],"ModuleContext"]],[]]],[2188,37,2188,76,[6,[2188,37,2188,43,[1,[2188,37,2188,43,[[],"String"]],[]]],[2188,47,2188,76,[1,[2188,47,2188,52,[[],"Maybe"]],[[2188,53,2188,76,[1,[2188,54,2188,58,[[],"List"]],[[2188,59,2188,75,[1,[2188,59,2188,75,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2189,1,2199,14,[[2189,1,2189,17,"findOperatorType"],[[2189,18,2189,25,[11,"context"]],[2189,26,2189,28,[11,"op"]]],[2190,5,2199,14,[1,"|>",0,[2190,5,2193,21,[1,"|>",0,[2190,5,2191,23,[1,"|>",0,[2190,5,2190,105,[0,[[2190,5,2190,20,[2,["DictX"],"filterMap"]],[2190,21,2190,83,[7,[2190,22,2190,82,[18,[[[2190,23,2190,24,[0]],[2190,25,2190,30,[11,"funcs"]]],[2190,34,2190,82,[0,[[2190,34,2190,44,[2,["DictX"],"find"]],[2190,45,2190,76,[7,[2190,46,2190,75,[18,[[[2190,47,2190,55,[11,"funcName"]],[2190,56,2190,57,[0]]],[2190,61,2190,75,[1,"==",2,[2190,61,2190,63,[2,[],"op"]],[2190,67,2190,75,[2,[],"funcName"]]]]]]]]],[2190,77,2190,82,[2,[],"funcs"]]]]]]]]]],[2190,84,2190,105,[19,[2190,84,2190,91,[2,[],"context"]],[2190,92,2190,105,"functionTypes"]]]]]],[2191,12,2191,23,[2,["Dict"],"toList"]]]],[2193,12,2193,21,[2,["List"],"head"]]]],[2194,12,2199,14,[0,[[2194,12,2194,21,[2,["Maybe"],"map"]],[2195,13,2199,14,[7,[2195,14,2198,39,[1,">>",1,[2195,14,2195,26,[2,["Tuple"],"second"]],[2196,20,2198,39,[1,">>",1,[2196,20,2196,32,[2,["Tuple"],"second"]],[2197,20,2198,39,[1,">>",1,[2197,20,2197,43,[0,[[2197,20,2197,35,[2,[],"dereferenceType"]],[2197,36,2197,43,[2,[],"context"]]]]],[2198,20,2198,39,[2,[],"flattenFunctionType"]]]]]]]]]]]]]]]]]]]],[2202,1,2218,37,[0,[[1,[2202,1,2203,3,"{-| Turn a function into a list of argument types and a return type.\n-}"]],[1,[2204,1,2204,64,[[2204,1,2204,20,"flattenFunctionType"],[2204,23,2204,64,[6,[2204,23,2204,39,[1,[2204,23,2204,39,[[],"DereferencedType"]],[]]],[2204,43,2204,64,[1,[2204,43,2204,47,[[],"List"]],[[2204,48,2204,64,[1,[2204,48,2204,64,[[],"DereferencedType"]],[]]]]]]]]]]],[2205,1,2218,37,[[2205,1,2205,20,"flattenFunctionType"],[],[2206,5,2218,37,[16,[[[2207,9,2214,34,[0,[[0],[1,[2207,9,2207,31,[[2207,9,2207,11,"go"],[2207,14,2207,31,[6,[2207,14,2207,18,[1,[2207,14,2207,18,[[],"Type"]],[]]],[2207,22,2207,31,[1,[2207,22,2207,26,[[],"List"]],[[2207,27,2207,31,[1,[2207,27,2207,31,[[],"Type"]],[]]]]]]]]]]],[2208,9,2214,34,[[2208,9,2208,11,"go"],[[2208,12,2208,13,[11,"t"]]],[2209,13,2214,34,[17,[[2209,18,2209,19,[2,[],"t"]],[[[2210,17,2210,42,[12,[[],"FunctionType"],[[2210,30,2210,42,[8,[[2210,32,2210,36,"from"],[2210,38,2210,40,"to"]]]]]]],[2211,21,2211,34,[1,"::",1,[2211,21,2211,25,[2,[],"from"]],[2211,29,2211,34,[0,[[2211,29,2211,31,[2,[],"go"]],[2211,32,2211,34,[2,[],"to"]]]]]]]],[[2213,17,2213,26,[11,"otherType"]],[2214,21,2214,34,[9,[[2214,23,2214,32,[2,[],"otherType"]]]]]]]]]]]]]]]],[2216,5,2218,37,[1,">>",1,[2216,5,2216,12,[2,[],"getType"]],[2217,12,2218,37,[1,">>",1,[2217,12,2217,14,[2,[],"go"]],[2218,12,2218,37,[0,[[2218,12,2218,20,[2,["List"],"map"]],[2218,21,2218,37,[2,[],"DereferencedType"]]]]]]]]]]]]]]]]],[2221,1,2233,6,[0,[[1,[2221,1,2222,3,"{-| Combine `ProjectContext`s by taking the union of known type info.\n-}"]],[1,[2223,1,2223,73,[[2223,1,2223,20,"foldProjectContexts"],[2223,23,2223,73,[6,[2223,23,2223,37,[1,[2223,23,2223,37,[[],"ProjectContext"]],[]]],[2223,41,2223,73,[6,[2223,41,2223,55,[1,[2223,41,2223,55,[[],"ProjectContext"]],[]]],[2223,59,2223,73,[1,[2223,59,2223,73,[[],"ProjectContext"]],[]]]]]]]]]],[2224,1,2233,6,[[2224,1,2224,20,"foldProjectContexts"],[[2224,21,2224,31,[11,"newContext"]],[2224,32,2224,43,[11,"prevContext"]]],[2225,5,2233,6,[8,[[2225,7,2226,58,[[2225,7,2225,14,"aliases"],[2226,9,2226,58,[0,[[2226,9,2226,19,[2,["Dict"],"union"]],[2226,20,2226,38,[19,[2226,20,2226,30,[2,[],"newContext"]],[2226,31,2226,38,"aliases"]]],[2226,39,2226,58,[19,[2226,39,2226,50,[2,[],"prevContext"]],[2226,51,2226,58,"aliases"]]]]]]]],[2227,7,2229,5,[[2227,7,2227,23,"canonicalRecords"],[2228,9,2228,76,[0,[[2228,9,2228,19,[2,["Dict"],"union"]],[2228,20,2228,47,[19,[2228,20,2228,30,[2,[],"newContext"]],[2228,31,2228,47,"canonicalRecords"]]],[2228,48,2228,76,[19,[2228,48,2228,59,[2,[],"prevContext"]],[2228,60,2228,76,"canonicalRecords"]]]]]]]],[2229,7,2231,5,[[2229,7,2229,19,"constructors"],[2230,9,2230,68,[0,[[2230,9,2230,19,[2,["Dict"],"union"]],[2230,20,2230,43,[19,[2230,20,2230,30,[2,[],"newContext"]],[2230,31,2230,43,"constructors"]]],[2230,44,2230,68,[19,[2230,44,2230,55,[2,[],"prevContext"]],[2230,56,2230,68,"constructors"]]]]]]]],[2231,7,2233,5,[[2231,7,2231,20,"functionTypes"],[2232,9,2232,70,[0,[[2232,9,2232,19,[2,["Dict"],"union"]],[2232,20,2232,44,[19,[2232,20,2232,30,[2,[],"newContext"]],[2232,31,2232,44,"functionTypes"]]],[2232,45,2232,70,[19,[2232,45,2232,56,[2,[],"prevContext"]],[2232,57,2232,70,"functionTypes"]]]]]]]]]]]]]]]],[2236,1,2269,31,[0,[[1,[2236,1,2238,3,"{-| Create a `ProjectContext` from a `ModuleContext`, keeping only exposed\nfunctions (since unexposed won't be relevant out of the module).\n-}"]],[1,[2239,1,2239,71,[[2239,1,2239,20,"fromModuleToProject"],[2239,23,2239,71,[1,[2239,23,2239,42,[["Rule"],"ContextCreator"]],[[2239,43,2239,56,[1,[2239,43,2239,56,[[],"ModuleContext"]],[]]],[2239,57,2239,71,[1,[2239,57,2239,71,[[],"ProjectContext"]],[]]]]]]]]],[2240,1,2269,31,[[2240,1,2240,20,"fromModuleToProject"],[],[2241,5,2269,31,[1,"|>",0,[2241,5,2268,10,[0,[[2241,5,2241,28,[2,["Rule"],"initContextCreator"]],[2242,9,2268,10,[7,[2242,10,2267,14,[18,[[[2242,11,2242,21,[11,"moduleName"]],[2242,22,2242,33,[8,[[2242,24,2242,31,"exposed"]]]]],[2243,13,2267,14,[8,[[2243,15,2248,62,[[2243,15,2243,22,"aliases"],[2244,17,2248,62,[11,[2244,20,2244,48,[0,[[2244,20,2244,32,[2,["Dict"],"isEmpty"]],[2244,33,2244,48,[19,[2244,33,2244,40,[2,[],"exposed"]],[2244,41,2244,48,"aliases"]]]]]],[2245,21,2245,31,[2,["Dict"],"empty"]],[2248,21,2248,62,[0,[[2248,21,2248,35,[2,["Dict"],"singleton"]],[2248,36,2248,46,[2,[],"moduleName"]],[2248,47,2248,62,[19,[2248,47,2248,54,[2,[],"exposed"]],[2248,55,2248,62,"aliases"]]]]]]]]]],[2249,15,2255,13,[[2249,15,2249,31,"canonicalRecords"],[2250,17,2254,71,[11,[2250,20,2250,57,[0,[[2250,20,2250,32,[2,["Dict"],"isEmpty"]],[2250,33,2250,57,[19,[2250,33,2250,40,[2,[],"exposed"]],[2250,41,2250,57,"canonicalRecords"]]]]]],[2251,21,2251,31,[2,["Dict"],"empty"]],[2254,21,2254,71,[0,[[2254,21,2254,35,[2,["Dict"],"singleton"]],[2254,36,2254,46,[2,[],"moduleName"]],[2254,47,2254,71,[19,[2254,47,2254,54,[2,[],"exposed"]],[2254,55,2254,71,"canonicalRecords"]]]]]]]]]],[2255,15,2261,13,[[2255,15,2255,27,"constructors"],[2256,17,2260,67,[11,[2256,20,2256,53,[0,[[2256,20,2256,32,[2,["Dict"],"isEmpty"]],[2256,33,2256,53,[19,[2256,33,2256,40,[2,[],"exposed"]],[2256,41,2256,53,"constructors"]]]]]],[2257,21,2257,31,[2,["Dict"],"empty"]],[2260,21,2260,67,[0,[[2260,21,2260,35,[2,["Dict"],"singleton"]],[2260,36,2260,46,[2,[],"moduleName"]],[2260,47,2260,67,[19,[2260,47,2260,54,[2,[],"exposed"]],[2260,55,2260,67,"constructors"]]]]]]]]]],[2261,15,2267,13,[[2261,15,2261,28,"functionTypes"],[2262,17,2266,68,[11,[2262,20,2262,54,[0,[[2262,20,2262,32,[2,["Dict"],"isEmpty"]],[2262,33,2262,54,[19,[2262,33,2262,40,[2,[],"exposed"]],[2262,41,2262,54,"functionTypes"]]]]]],[2263,21,2263,31,[2,["Dict"],"empty"]],[2266,21,2266,68,[0,[[2266,21,2266,35,[2,["Dict"],"singleton"]],[2266,36,2266,46,[2,[],"moduleName"]],[2266,47,2266,68,[19,[2266,47,2266,54,[2,[],"exposed"]],[2266,55,2266,68,"functionTypes"]]]]]]]]]]]]]]]]]]]]],[2269,12,2269,31,[2,["Rule"],"withModuleName"]]]]]]]]],[2272,1,2307,28,[0,[[1,[2272,1,2273,3,"{-| Create a `ModuleContext` from a `ProjectContext`.\n-}"]],[1,[2274,1,2274,85,[[2274,1,2274,20,"fromProjectToModule"],[2274,23,2274,85,[6,[2274,23,2274,33,[1,[2274,23,2274,33,[[],"RuleConfig"]],[]]],[2274,37,2274,85,[1,[2274,37,2274,56,[["Rule"],"ContextCreator"]],[[2274,57,2274,71,[1,[2274,57,2274,71,[[],"ProjectContext"]],[]]],[2274,72,2274,85,[1,[2274,72,2274,85,[[],"ModuleContext"]],[]]]]]]]]]]],[2275,1,2307,28,[[2275,1,2275,20,"fromProjectToModule"],[[2275,21,2275,27,[11,"config"]]],[2276,5,2307,28,[1,"|>",0,[2276,5,2306,34,[1,"|>",0,[2276,5,2305,31,[1,"|>",0,[2276,5,2304,40,[1,"|>",0,[2276,5,2303,42,[1,"|>",0,[2276,5,2302,10,[0,[[2276,5,2276,28,[2,["Rule"],"initContextCreator"]],[2277,9,2302,10,[7,[2277,10,2301,14,[18,[[[2277,11,2277,22,[11,"lookupTable"]],[2277,23,2277,42,[11,"sourceCodeExtractor"]],[2277,43,2277,53,[11,"moduleName"]],[2277,54,2277,67,[11,"fileIsIgnored"]],[2277,68,2277,102,[8,[[2277,70,2277,86,"moduleDefinition"],[2277,88,2277,100,"declarations"]]]],[2277,103,2277,117,[11,"projectContext"]]],[2278,13,2301,14,[16,[[[2279,17,2290,37,[1,[2279,17,2279,84,[8,[[2279,19,2279,26,"aliases"],[2279,28,2279,44,"canonicalRecords"],[2279,46,2279,58,"constructors"],[2279,60,2279,73,"functionTypes"],[2279,75,2279,82,"exposed"]]]],[2280,21,2290,37,[0,[[2280,21,2280,43,[2,[],"declarationListVisitor"]],[2280,44,2280,50,[2,[],"config"]],[2281,25,2289,26,[8,[[2281,27,2281,59,[[2281,27,2281,34,"aliases"],[2281,37,2281,59,[19,[2281,37,2281,51,[2,[],"projectContext"]],[2281,52,2281,59,"aliases"]]]]],[2282,27,2283,25,[[2282,27,2282,43,"canonicalRecords"],[2282,46,2282,77,[19,[2282,46,2282,60,[2,[],"projectContext"]],[2282,61,2282,77,"canonicalRecords"]]]]],[2283,27,2284,25,[[2283,27,2283,39,"constructors"],[2283,42,2283,69,[19,[2283,42,2283,56,[2,[],"projectContext"]],[2283,57,2283,69,"constructors"]]]]],[2284,27,2285,25,[[2284,27,2284,39,"exposingList"],[2284,42,2284,88,[1,"<|",1,[2284,42,2284,57,[2,[],"getExposedNames"]],[2284,61,2284,88,[0,[[2284,61,2284,71,[2,["Node"],"value"]],[2284,72,2284,88,[2,[],"moduleDefinition"]]]]]]]]],[2285,27,2286,25,[[2285,27,2285,40,"fileIsIgnored"],[2285,43,2285,56,[2,[],"fileIsIgnored"]]]],[2286,27,2287,25,[[2286,27,2286,40,"functionTypes"],[2286,43,2286,71,[19,[2286,43,2286,57,[2,[],"projectContext"]],[2286,58,2286,71,"functionTypes"]]]]],[2287,27,2288,25,[[2287,27,2287,38,"lookupTable"],[2287,41,2287,52,[2,[],"lookupTable"]]]],[2288,27,2289,25,[[2288,27,2288,37,"moduleName"],[2288,40,2288,50,[2,[],"moduleName"]]]]]]],[2290,25,2290,37,[2,[],"declarations"]]]]]]]],[2292,13,2301,14,[8,[[2292,15,2292,32,[[2292,15,2292,22,"aliases"],[2292,25,2292,32,[2,[],"aliases"]]]],[2293,15,2294,13,[[2293,15,2293,31,"canonicalRecords"],[2293,34,2293,50,[2,[],"canonicalRecords"]]]],[2294,15,2295,13,[[2294,15,2294,27,"constructors"],[2294,30,2294,42,[2,[],"constructors"]]]],[2295,15,2296,13,[[2295,15,2295,28,"functionTypes"],[2295,31,2295,44,[2,[],"functionTypes"]]]],[2296,15,2297,13,[[2296,15,2296,22,"exposed"],[2296,25,2296,32,[2,[],"exposed"]]]],[2297,15,2298,13,[[2297,15,2297,25,"moduleName"],[2297,28,2297,38,[2,[],"moduleName"]]]],[2298,15,2299,13,[[2298,15,2298,28,"fileIsIgnored"],[2298,31,2298,44,[2,[],"fileIsIgnored"]]]],[2299,15,2300,13,[[2299,15,2299,26,"lookupTable"],[2299,29,2299,40,[2,[],"lookupTable"]]]],[2300,15,2301,13,[[2300,15,2300,28,"extractSource"],[2300,31,2300,50,[2,[],"sourceCodeExtractor"]]]]]]]]]]]]]]]]]],[2303,12,2303,42,[2,["Rule"],"withModuleNameLookupTable"]]]],[2304,12,2304,40,[2,["Rule"],"withSourceCodeExtractor"]]]],[2305,12,2305,31,[2,["Rule"],"withModuleName"]]]],[2306,12,2306,34,[2,["Rule"],"withIsFileIgnored"]]]],[2307,12,2307,28,[2,["Rule"],"withFullAst"]]]]]]]]],[2310,1,2315,31,[2,[[1,[2310,1,2312,3,"{-| The type of generic fields in a field order, which may be unknown or have\ncanonical ordering.\n-}"]],[2313,6,2313,13,"Generic"],[],[[2314,7,2314,34,[[2314,7,2314,20,"UnknownFields"],[[2314,21,2314,34,[1,[2314,22,2314,26,[[],"List"]],[[2314,27,2314,33,[1,[2314,27,2314,33,[[],"String"]],[]]]]]]]]],[2315,7,2315,31,[[2315,7,2315,20,"OrderedFields"],[[2315,21,2315,31,[1,[2315,21,2315,31,[[],"FieldOrder"]],[]]]]]]]]]],[2318,1,2350,13,[0,[[1,[2318,1,2320,3,"{-| Get a set of all names exposed by the modules or `Nothing` if everything is\nexposed.\n-}"]],[1,[2321,1,2321,47,[[2321,1,2321,16,"getExposedNames"],[2321,19,2321,47,[6,[2321,19,2321,25,[1,[2321,19,2321,25,[[],"Module"]],[]]],[2321,29,2321,47,[1,[2321,29,2321,34,[[],"Maybe"]],[[2321,35,2321,47,[1,[2321,35,2321,47,[[],"ExposedNames"]],[]]]]]]]]]]],[2322,1,2350,13,[[2322,1,2322,16,"getExposedNames"],[],[2323,5,2350,13,[16,[[[2324,9,2337,64,[0,[[0],[1,[2324,9,2324,67,[[2324,9,2324,13,"step"],[2324,16,2324,67,[6,[2324,16,2324,35,[1,[2324,16,2324,20,[[],"Node"]],[[2324,21,2324,35,[1,[2324,21,2324,35,[[],"TopLevelExpose"]],[]]]]]],[2324,39,2324,67,[6,[2324,39,2324,51,[1,[2324,39,2324,51,[[],"ExposedNames"]],[]]],[2324,55,2324,67,[1,[2324,55,2324,67,[[],"ExposedNames"]],[]]]]]]]]]],[2325,9,2337,64,[[2325,9,2325,13,"step"],[[2325,14,2325,15,[11,"e"]],[2325,16,2325,19,[11,"acc"]]],[2326,13,2337,64,[17,[[2326,18,2326,30,[0,[[2326,18,2326,28,[2,["Node"],"value"]],[2326,29,2326,30,[2,[],"e"]]]]],[[[2327,17,2327,36,[12,[[],"FunctionExpose"],[[2327,32,2327,36,[11,"name"]]]]],[2328,21,2328,72,[21,[2328,23,2328,26,"acc"],[[2328,29,2328,71,[[2328,29,2328,38,"functions"],[2328,41,2328,70,[0,[[2328,41,2328,51,[2,["Set"],"insert"]],[2328,52,2328,56,[2,[],"name"]],[2328,57,2328,70,[19,[2328,57,2328,60,[2,[],"acc"]],[2328,61,2328,70,"functions"]]]]]]]]]]]],[[2330,17,2330,36,[12,[[],"TypeExpose"],[[2330,28,2330,36,[8,[[2330,30,2330,34,"name"]]]]]]],[2331,21,2331,72,[21,[2331,23,2331,26,"acc"],[[2331,29,2331,71,[[2331,29,2331,38,"openTypes"],[2331,41,2331,70,[0,[[2331,41,2331,51,[2,["Set"],"insert"]],[2331,52,2331,56,[2,[],"name"]],[2331,57,2331,70,[19,[2331,57,2331,60,[2,[],"acc"]],[2331,61,2331,70,"openTypes"]]]]]]]]]]]],[[2333,17,2333,33,[12,[[],"InfixExpose"],[[2333,29,2333,33,[11,"name"]]]]],[2334,21,2334,72,[21,[2334,23,2334,26,"acc"],[[2334,29,2334,71,[[2334,29,2334,38,"functions"],[2334,41,2334,70,[0,[[2334,41,2334,51,[2,["Set"],"insert"]],[2334,52,2334,56,[2,[],"name"]],[2334,57,2334,70,[19,[2334,57,2334,60,[2,[],"acc"]],[2334,61,2334,70,"functions"]]]]]]]]]]]],[[2336,17,2336,39,[12,[[],"TypeOrAliasExpose"],[[2336,35,2336,39,[11,"name"]]]]],[2337,21,2337,64,[21,[2337,23,2337,26,"acc"],[[2337,29,2337,63,[[2337,29,2337,34,"types"],[2337,37,2337,62,[0,[[2337,37,2337,47,[2,["Set"],"insert"]],[2337,48,2337,52,[2,[],"name"]],[2337,53,2337,62,[19,[2337,53,2337,56,[2,[],"acc"]],[2337,57,2337,62,"types"]]]]]]]]]]]]]]]]]]]]]],[2339,5,2350,13,[1,">>",1,[2339,5,2339,24,[2,["Module"],"exposingList"]],[2340,12,2350,13,[7,[2340,13,2349,36,[18,[[[2340,14,2340,15,[11,"l"]]],[2341,17,2349,36,[17,[[2341,22,2341,23,[2,[],"l"]],[[[2342,21,2342,26,[12,[[],"All"],[[2342,25,2342,26,[0]]]]],[2343,25,2343,32,[2,[],"Nothing"]]],[[2345,21,2345,32,[12,[[],"Explicit"],[[2345,30,2345,32,[11,"es"]]]]],[2346,25,2349,36,[1,"|>",0,[2346,25,2348,31,[0,[[2346,25,2346,35,[2,["List"],"foldl"]],[2346,36,2346,40,[2,[],"step"]],[2347,29,2347,96,[8,[[2347,31,2347,52,[[2347,31,2347,40,"functions"],[2347,43,2347,52,[2,["Set"],"empty"]]]],[2347,54,2347,71,[[2347,54,2347,59,"types"],[2347,62,2347,71,[2,["Set"],"empty"]]]],[2347,73,2347,95,[[2347,73,2347,82,"openTypes"],[2347,85,2347,94,[2,["Set"],"empty"]]]]]]],[2348,29,2348,31,[2,[],"es"]]]]],[2349,32,2349,36,[2,[],"Just"]]]]]]]]]]]]]]]]]]]]]]]],[2353,1,2364,14,[0,[[1,[2353,1,2354,3,"{-| Get the name and type of a function, if possible.\n-}"]],[1,[2355,1,2355,85,[[2355,1,2355,19,"getFunctionBinding"],[2355,22,2355,85,[6,[2355,22,2355,35,[1,[2355,22,2355,35,[[],"ModuleContext"]],[]]],[2355,39,2355,85,[6,[2355,39,2355,47,[1,[2355,39,2355,47,[[],"Function"]],[]]],[2355,51,2355,85,[1,[2355,51,2355,56,[[],"Maybe"]],[[2355,57,2355,85,[3,[[2355,59,2355,65,[1,[2355,59,2355,65,[[],"String"]],[]]],[2355,67,2355,83,[1,[2355,67,2355,83,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2356,1,2364,14,[[2356,1,2356,19,"getFunctionBinding"],[[2356,20,2356,27,[11,"context"]],[2356,28,2356,41,[8,[[2356,30,2356,39,"signature"]]]]],[2357,5,2364,14,[1,"|>",0,[2357,5,2357,35,[0,[[2357,5,2357,14,[2,["Maybe"],"map"]],[2357,15,2357,25,[2,["Node"],"value"]],[2357,26,2357,35,[2,[],"signature"]]]]],[2358,12,2364,14,[0,[[2358,12,2358,21,[2,["Maybe"],"map"]],[2359,13,2364,14,[7,[2359,14,2363,18,[18,[[[2359,15,2359,39,[8,[[2359,17,2359,21,"name"],[2359,23,2359,37,"typeAnnotation"]]]]],[2360,17,2363,18,[6,[[2360,19,2360,34,[0,[[2360,19,2360,29,[2,["Node"],"value"]],[2360,30,2360,34,[2,[],"name"]]]]],[2361,19,2362,47,[1,"|>",0,[2361,19,2361,69,[0,[[2361,19,2361,46,[2,[],"typeAnnotToNoncanonicalType"]],[2361,47,2361,54,[2,[],"context"]],[2361,55,2361,69,[2,[],"typeAnnotation"]]]]],[2362,24,2362,47,[0,[[2362,24,2362,39,[2,[],"dereferenceType"]],[2362,40,2362,47,[2,[],"context"]]]]]]]]]]]]]]]]]]]]]]]]],[2367,1,2376,20,[0,[[1,[2367,1,2368,3,"{-| Get the type a `List` is full of if possible.\n-}"]],[1,[2369,1,2369,63,[[2369,1,2369,12,"getListType"],[2369,15,2369,63,[6,[2369,15,2369,37,[1,[2369,15,2369,20,[[],"Maybe"]],[[2369,21,2369,37,[1,[2369,21,2369,37,[[],"DereferencedType"]],[]]]]]],[2369,41,2369,63,[1,[2369,41,2369,46,[[],"Maybe"]],[[2369,47,2369,63,[1,[2369,47,2369,63,[[],"DereferencedType"]],[]]]]]]]]]]],[2370,1,2376,20,[[2370,1,2370,12,"getListType"],[[2370,13,2370,22,[11,"assocType"]]],[2371,5,2376,20,[17,[[2371,10,2371,37,[0,[[2371,10,2371,19,[2,["Maybe"],"map"]],[2371,20,2371,27,[2,[],"getType"]],[2371,28,2371,37,[2,[],"assocType"]]]]],[[[2372,9,2372,26,[12,[[],"Just"],[[2372,14,2372,26,[14,[2372,15,2372,25,[12,[[],"ListType"],[[2372,24,2372,25,[11,"t"]]]]]]]]]],[2373,13,2373,39,[1,"<|",1,[2373,13,2373,17,[2,[],"Just"]],[2373,21,2373,39,[0,[[2373,21,2373,37,[2,[],"DereferencedType"]],[2373,38,2373,39,[2,[],"t"]]]]]]]],[[2375,9,2375,10,[0]],[2376,13,2376,20,[2,[],"Nothing"]]]]]]]]]]]],[2379,1,2388,23,[0,[[1,[2379,1,2380,3,"{-| Get all types for a record's fields.\n-}"]],[1,[2381,1,2381,77,[[2381,1,2381,20,"getRecordFieldTypes"],[2381,23,2381,77,[6,[2381,23,2381,45,[1,[2381,23,2381,28,[[],"Maybe"]],[[2381,29,2381,45,[1,[2381,29,2381,45,[[],"DereferencedType"]],[]]]]]],[2381,49,2381,77,[1,[2381,49,2381,53,[[],"Dict"]],[[2381,54,2381,60,[1,[2381,54,2381,60,[[],"String"]],[]]],[2381,61,2381,77,[1,[2381,61,2381,77,[[],"DereferencedType"]],[]]]]]]]]]]],[2382,1,2388,23,[[2382,1,2382,20,"getRecordFieldTypes"],[[2382,21,2382,26,[11,"type_"]]],[2383,5,2388,23,[17,[[2383,10,2383,33,[0,[[2383,10,2383,19,[2,["Maybe"],"map"]],[2383,20,2383,27,[2,[],"getType"]],[2383,28,2383,33,[2,[],"type_"]]]]],[[[2384,9,2384,37,[12,[[],"Just"],[[2384,14,2384,37,[14,[2384,15,2384,36,[12,[[],"RecordType"],[[2384,26,2384,36,[8,[[2384,28,2384,34,"fields"]]]]]]]]]]]],[2385,13,2385,80,[1,"<|",1,[2385,13,2385,26,[2,["Dict"],"fromList"]],[2385,30,2385,80,[0,[[2385,30,2385,38,[2,["List"],"map"]],[2385,39,2385,73,[7,[2385,40,2385,72,[0,[[2385,40,2385,55,[2,["Tuple"],"mapSecond"]],[2385,56,2385,72,[2,[],"DereferencedType"]]]]]]],[2385,74,2385,80,[2,[],"fields"]]]]]]]],[[2387,9,2387,10,[0]],[2388,13,2388,23,[2,["Dict"],"empty"]]]]]]]]]]]],[2391,1,2400,48,[0,[[1,[2391,1,2392,3,"{-| Get all types for a tuple's subexpressions.\n-}"]],[1,[2393,1,2393,82,[[2393,1,2393,14,"getTupleTypes"],[2393,17,2393,82,[6,[2393,17,2393,23,[1,[2393,17,2393,21,[[],"List"]],[[2393,22,2393,23,[0,"a"]]]]],[2393,27,2393,82,[6,[2393,27,2393,49,[1,[2393,27,2393,32,[[],"Maybe"]],[[2393,33,2393,49,[1,[2393,33,2393,49,[[],"DereferencedType"]],[]]]]]],[2393,53,2393,82,[1,[2393,53,2393,57,[[],"List"]],[[2393,58,2393,82,[1,[2393,59,2393,64,[[],"Maybe"]],[[2393,65,2393,81,[1,[2393,65,2393,81,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[2394,1,2400,48,[[2394,1,2394,14,"getTupleTypes"],[[2394,15,2394,24,[11,"emptyList"]],[2394,25,2394,34,[11,"assocType"]]],[2395,5,2400,48,[17,[[2395,10,2395,37,[0,[[2395,10,2395,19,[2,["Maybe"],"map"]],[2395,20,2395,27,[2,[],"getType"]],[2395,28,2395,37,[2,[],"assocType"]]]]],[[[2396,9,2396,28,[12,[[],"Just"],[[2396,14,2396,28,[14,[2396,15,2396,27,[12,[[],"TupleType"],[[2396,25,2396,27,[11,"ts"]]]]]]]]]],[2397,13,2397,51,[0,[[2397,13,2397,21,[2,["List"],"map"]],[2397,22,2397,48,[7,[2397,23,2397,47,[1,"<<",0,[2397,23,2397,27,[2,[],"Just"]],[2397,31,2397,47,[2,[],"DereferencedType"]]]]]],[2397,49,2397,51,[2,[],"ts"]]]]]],[[2399,9,2399,10,[0]],[2400,13,2400,48,[0,[[2400,13,2400,21,[2,["List"],"map"]],[2400,22,2400,38,[7,[2400,23,2400,37,[0,[[2400,23,2400,29,[2,[],"always"]],[2400,30,2400,37,[2,[],"Nothing"]]]]]]],[2400,39,2400,48,[2,[],"emptyList"]]]]]]]]]]]]]]],[2403,1,2407,6,[0,[[1,[2403,1,2404,3,"{-| Unwrap a `DereferencedType`.\n-}"]],[1,[2405,1,2405,35,[[2405,1,2405,8,"getType"],[2405,11,2405,35,[6,[2405,11,2405,27,[1,[2405,11,2405,27,[[],"DereferencedType"]],[]]],[2405,31,2405,35,[1,[2405,31,2405,35,[[],"Type"]],[]]]]]]]],[2406,1,2407,6,[[2406,1,2406,8,"getType"],[[2406,9,2406,29,[14,[2406,10,2406,28,[12,[[],"DereferencedType"],[[2406,27,2406,28,[11,"t"]]]]]]]],[2407,5,2407,6,[2,[],"t"]]]]]]],[2410,1,2414,6,[0,[[1,[2410,1,2411,3,"{-| Unwrap a `TypeWithPositionalVars`.\n-}"]],[1,[2412,1,2412,59,[[2412,1,2412,26,"getTypeWithPositionalVars"],[2412,29,2412,59,[6,[2412,29,2412,51,[1,[2412,29,2412,51,[[],"TypeWithPositionalVars"]],[]]],[2412,55,2412,59,[1,[2412,55,2412,59,[[],"Type"]],[]]]]]]]],[2413,1,2414,6,[[2413,1,2413,26,"getTypeWithPositionalVars"],[[2413,27,2413,53,[14,[2413,28,2413,52,[12,[[],"TypeWithPositionalVars"],[[2413,51,2413,52,[11,"t"]]]]]]]],[2414,5,2414,6,[2,[],"t"]]]]]]],[2417,1,2482,58,[0,[[1,[2417,1,2418,3,"{-| Infer type for a chain of expressions being applied to the first one.\n-}"]],[1,[2419,1,2419,89,[[2419,1,2419,22,"inferApplicationChain"],[2419,25,2419,89,[6,[2419,25,2419,37,[1,[2419,25,2419,37,[[],"LocalContext"]],[]]],[2419,41,2419,89,[6,[2419,41,2419,63,[1,[2419,41,2419,45,[[],"List"]],[[2419,46,2419,63,[1,[2419,47,2419,51,[[],"Node"]],[[2419,52,2419,62,[1,[2419,52,2419,62,[[],"Expression"]],[]]]]]]]]],[2419,67,2419,89,[1,[2419,67,2419,72,[[],"Maybe"]],[[2419,73,2419,89,[1,[2419,73,2419,89,[[],"DereferencedType"]],[]]]]]]]]]]]]],[2420,1,2482,58,[[2420,1,2420,22,"inferApplicationChain"],[[2420,23,2420,28,[11,"local"]],[2420,29,2420,31,[11,"es"]]],[2421,5,2482,58,[16,[[[2422,9,2435,69,[0,[[0],[1,[2422,9,2422,114,[[2422,9,2422,22,"getReturnType"],[2422,25,2422,114,[6,[2422,25,2422,47,[1,[2422,25,2422,29,[[],"List"]],[[2422,30,2422,47,[1,[2422,31,2422,35,[[],"Node"]],[[2422,36,2422,46,[1,[2422,36,2422,46,[[],"Expression"]],[]]]]]]]]],[2422,51,2422,114,[6,[2422,51,2422,94,[3,[[2422,53,2422,74,[1,[2422,53,2422,57,[[],"List"]],[[2422,58,2422,74,[1,[2422,58,2422,74,[[],"DereferencedType"]],[]]]]]],[2422,76,2422,92,[1,[2422,76,2422,92,[[],"DereferencedType"]],[]]]]]],[2422,98,2422,114,[1,[2422,98,2422,114,[[],"DereferencedType"]],[]]]]]]]]]],[2423,9,2435,69,[[2423,9,2423,22,"getReturnType"],[[2423,23,2423,27,[11,"args"]],[2423,28,2423,52,[7,[[2423,30,2423,38,[11,"argTypes"]],[2423,40,2423,50,[11,"returnType"]]]]]],[2424,13,2435,69,[1,"|>",0,[2424,13,2434,46,[1,"|>",0,[2424,13,2433,55,[1,"|>",0,[2424,13,2432,31,[1,"|>",0,[2424,13,2425,38,[1,"|>",0,[2424,13,2424,36,[0,[[2424,13,2424,21,[2,["List"],"map"]],[2424,22,2424,31,[2,[],"inferExpr"]],[2424,32,2424,36,[2,[],"args"]]]]],[2425,20,2425,38,[0,[[2425,20,2425,29,[2,["ListX"],"zip"]],[2425,30,2425,38,[2,[],"argTypes"]]]]]]],[2426,20,2432,31,[0,[[2426,20,2426,30,[2,["List"],"foldl"]],[2427,21,2431,22,[7,[2427,22,2430,58,[18,[[[2427,23,2427,33,[7,[[2427,25,2427,27,[11,"t1"]],[2427,29,2427,31,[11,"t2"]]]]],[2427,34,2427,42,[11,"typeVars"]]],[2428,25,2430,58,[1,"|>",0,[2428,25,2429,53,[1,"|>",0,[2428,25,2428,62,[0,[[2428,25,2428,34,[2,["Maybe"],"map"]],[2428,35,2428,59,[7,[2428,36,2428,58,[0,[[2428,36,2428,46,[2,[],"typesMatch"]],[2428,47,2428,55,[2,[],"typeVars"]],[2428,56,2428,58,[2,[],"t1"]]]]]]],[2428,60,2428,62,[2,[],"t2"]]]]],[2429,32,2429,53,[0,[[2429,32,2429,41,[2,["Maybe"],"map"]],[2429,42,2429,53,[2,["Tuple"],"first"]]]]]]],[2430,32,2430,58,[0,[[2430,32,2430,49,[2,["Maybe"],"withDefault"]],[2430,50,2430,58,[2,[],"typeVars"]]]]]]]]]]]],[2432,21,2432,31,[2,["Dict"],"empty"]]]]]]],[2433,20,2433,55,[0,[[2433,20,2433,31,[2,["Dict"],"filter"]],[2433,32,2433,55,[7,[2433,33,2433,54,[18,[[[2433,34,2433,42,[7,[[2433,36,2433,37,[11,"i"]],[2433,39,2433,40,[0]]]]],[2433,43,2433,44,[0]]],[2433,48,2433,54,[1,"==",2,[2433,48,2433,49,[2,[],"i"]],[2433,53,2433,54,[3,1]]]]]]]]]]]]]],[2434,20,2434,46,[0,[[2434,20,2434,33,[2,["DictX"],"mapKeys"]],[2434,34,2434,46,[2,["Tuple"],"second"]]]]]]],[2435,20,2435,69,[7,[2435,21,2435,68,[18,[[[2435,22,2435,30,[11,"typeVars"]]],[2435,34,2435,68,[0,[[2435,34,2435,48,[2,[],"assignTypeVars"]],[2435,49,2435,57,[2,[],"typeVars"]],[2435,58,2435,68,[2,[],"returnType"]]]]]]]]]]]]]]]]],[2437,9,2439,32,[0,[[0],[1,[2437,9,2437,62,[[2437,9,2437,18,"inferExpr"],[2437,21,2437,62,[6,[2437,21,2437,36,[1,[2437,21,2437,25,[[],"Node"]],[[2437,26,2437,36,[1,[2437,26,2437,36,[[],"Expression"]],[]]]]]],[2437,40,2437,62,[1,[2437,40,2437,45,[[],"Maybe"]],[[2437,46,2437,62,[1,[2437,46,2437,62,[[],"DereferencedType"]],[]]]]]]]]]]],[2438,9,2439,32,[[2438,9,2438,18,"inferExpr"],[],[2439,13,2439,32,[0,[[2439,13,2439,26,[2,[],"inferExprType"]],[2439,27,2439,32,[2,[],"local"]]]]]]]]]]],[2441,5,2482,58,[17,[[2441,10,2441,12,[2,[],"es"]],[[[2442,9,2442,11,[10,[]]],[2443,13,2443,20,[2,[],"Nothing"]]],[[2445,9,2445,14,[10,[[2445,11,2445,12,[11,"e"]]]]],[2446,13,2446,24,[0,[[2446,13,2446,22,[2,[],"inferExpr"]],[2446,23,2446,24,[2,[],"e"]]]]]],[[2448,9,2448,21,[9,[2448,9,2448,13,[11,"func"]],[2448,17,2448,21,[11,"args"]]]],[2449,13,2482,58,[17,[[2449,18,2449,33,[0,[[2449,18,2449,28,[2,["Node"],"value"]],[2449,29,2449,33,[2,[],"func"]]]]],[[[2450,17,2450,39,[12,[[],"FunctionOrValue"],[[2450,33,2450,34,[0]],[2450,35,2450,39,[11,"name"]]]]],[2451,21,2455,58,[1,"|>",0,[2451,21,2453,75,[1,"|>",0,[2451,21,2452,102,[1,"|>",0,[2451,21,2451,61,[0,[[2451,21,2451,37,[2,[],"findFunctionType"]],[2451,38,2451,43,[2,[],"local"]],[2451,44,2451,51,[2,[],"Nothing"]],[2451,52,2451,56,[2,[],"func"]],[2451,57,2451,61,[2,[],"name"]]]]],[2452,28,2452,102,[0,[[2452,28,2452,45,[2,["MaybeX"],"orElseLazy"]],[2452,46,2452,102,[7,[2452,47,2452,101,[18,[[[2452,48,2452,50,[1]]],[2452,54,2452,101,[1,"<|",1,[2452,54,2452,83,[0,[[2452,54,2452,63,[2,["Maybe"],"map"]],[2452,64,2452,83,[2,[],"flattenFunctionType"]]]]],[2452,87,2452,101,[0,[[2452,87,2452,96,[2,[],"inferExpr"]],[2452,97,2452,101,[2,[],"func"]]]]]]]]]]]]]]]]],[2453,28,2453,75,[0,[[2453,28,2453,41,[2,["Maybe"],"andThen"]],[2453,42,2453,75,[7,[2453,43,2453,74,[0,[[2453,43,2453,69,[2,[],"partiallyApplyArgsAndTypes"]],[2453,70,2453,74,[2,[],"args"]]]]]]]]]]]],[2455,28,2455,58,[0,[[2455,28,2455,37,[2,["Maybe"],"map"]],[2455,38,2455,58,[7,[2455,39,2455,57,[0,[[2455,39,2455,52,[2,[],"getReturnType"]],[2455,53,2455,57,[2,[],"args"]]]]]]]]]]]]],[[2457,17,2457,34,[12,[[],"PrefixOperator"],[[2457,32,2457,34,[11,"op"]]]]],[2458,21,2461,58,[1,"|>",0,[2458,21,2460,75,[1,"|>",0,[2458,21,2458,54,[0,[[2458,21,2458,37,[2,[],"findOperatorType"]],[2458,38,2458,51,[19,[2458,38,2458,43,[2,[],"local"]],[2458,44,2458,51,"context"]]],[2458,52,2458,54,[2,[],"op"]]]]],[2460,28,2460,75,[0,[[2460,28,2460,41,[2,["Maybe"],"andThen"]],[2460,42,2460,75,[7,[2460,43,2460,74,[0,[[2460,43,2460,69,[2,[],"partiallyApplyArgsAndTypes"]],[2460,70,2460,74,[2,[],"args"]]]]]]]]]]]],[2461,28,2461,58,[0,[[2461,28,2461,37,[2,["Maybe"],"map"]],[2461,38,2461,58,[7,[2461,39,2461,57,[0,[[2461,39,2461,52,[2,[],"getReturnType"]],[2461,53,2461,57,[2,[],"args"]]]]]]]]]]]]],[[2463,17,2463,46,[12,[[],"ParenthesizedExpression"],[[2463,41,2463,46,[11,"func_"]]]]],[2465,21,2465,64,[0,[[2465,21,2465,42,[2,[],"inferApplicationChain"]],[2465,43,2465,48,[2,[],"local"]],[2465,49,2465,64,[7,[2465,50,2465,63,[1,"::",1,[2465,50,2465,55,[2,[],"func_"]],[2465,59,2465,63,[2,[],"args"]]]]]]]]]],[[2467,17,2467,48,[12,[[],"RecordAccessFunction"],[[2467,38,2467,48,[11,"accessFunc"]]]]],[2469,21,2475,29,[1,"|>",0,[2469,21,2471,47,[1,"|>",0,[2469,21,2470,51,[1,"|>",0,[2469,21,2469,35,[0,[[2469,21,2469,30,[2,["List"],"head"]],[2469,31,2469,35,[2,[],"args"]]]]],[2470,28,2470,51,[0,[[2470,28,2470,41,[2,["Maybe"],"andThen"]],[2470,42,2470,51,[2,[],"inferExpr"]]]]]]],[2471,28,2471,47,[2,[],"getRecordFieldTypes"]]]],[2472,28,2475,29,[7,[2472,29,2474,61,[18,[[[2472,30,2472,32,[11,"ts"]]],[2473,33,2474,61,[1,"|>",0,[2473,33,2473,58,[0,[[2473,33,2473,47,[2,[],"makeAccessFunc"]],[2473,48,2473,58,[2,[],"accessFunc"]]]]],[2474,40,2474,61,[7,[2474,41,2474,60,[18,[[[2474,42,2474,43,[11,"f"]]],[2474,47,2474,60,[0,[[2474,47,2474,55,[2,["Dict"],"get"]],[2474,56,2474,57,[2,[],"f"]],[2474,58,2474,60,[2,[],"ts"]]]]]]]]]]]]]]]]]]]],[[2477,17,2477,18,[0]],[2479,21,2482,58,[1,"|>",0,[2479,21,2481,75,[1,"|>",0,[2479,21,2480,57,[1,"|>",0,[2479,21,2479,35,[0,[[2479,21,2479,30,[2,[],"inferExpr"]],[2479,31,2479,35,[2,[],"func"]]]]],[2480,28,2480,57,[0,[[2480,28,2480,37,[2,["Maybe"],"map"]],[2480,38,2480,57,[2,[],"flattenFunctionType"]]]]]]],[2481,28,2481,75,[0,[[2481,28,2481,41,[2,["Maybe"],"andThen"]],[2481,42,2481,75,[7,[2481,43,2481,74,[0,[[2481,43,2481,69,[2,[],"partiallyApplyArgsAndTypes"]],[2481,70,2481,74,[2,[],"args"]]]]]]]]]]]],[2482,28,2482,58,[0,[[2482,28,2482,37,[2,["Maybe"],"map"]],[2482,38,2482,58,[7,[2482,39,2482,57,[0,[[2482,39,2482,52,[2,[],"getReturnType"]],[2482,53,2482,57,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2485,1,2664,38,[0,[[1,[2485,1,2486,3,"{-| Do some half-hearted type inference to help differentiate records.\n-}"]],[1,[2487,1,2487,74,[[2487,1,2487,14,"inferExprType"],[2487,17,2487,74,[6,[2487,17,2487,29,[1,[2487,17,2487,29,[[],"LocalContext"]],[]]],[2487,33,2487,74,[6,[2487,33,2487,48,[1,[2487,33,2487,37,[[],"Node"]],[[2487,38,2487,48,[1,[2487,38,2487,48,[[],"Expression"]],[]]]]]],[2487,52,2487,74,[1,[2487,52,2487,57,[[],"Maybe"]],[[2487,58,2487,74,[1,[2487,58,2487,74,[[],"DereferencedType"]],[]]]]]]]]]]]]],[2488,1,2664,38,[[2488,1,2488,14,"inferExprType"],[[2488,15,2488,20,[11,"local"]]],[2489,5,2664,38,[16,[[[2490,9,2652,30,[0,[[0],[1,[2490,9,2490,53,[[2490,9,2490,11,"go"],[2490,14,2490,53,[6,[2490,14,2490,20,[1,[2490,14,2490,20,[[],"String"]],[]]],[2490,24,2490,53,[6,[2490,24,2490,39,[1,[2490,24,2490,28,[[],"Node"]],[[2490,29,2490,39,[1,[2490,29,2490,39,[[],"Expression"]],[]]]]]],[2490,43,2490,53,[1,[2490,43,2490,48,[[],"Maybe"]],[[2490,49,2490,53,[1,[2490,49,2490,53,[[],"Type"]],[]]]]]]]]]]]]],[2491,9,2652,30,[[2491,9,2491,11,"go"],[[2491,12,2491,25,[11,"typeVarPrefix"]],[2491,26,2491,30,[11,"node"]]],[2492,13,2652,30,[17,[[2492,18,2492,33,[0,[[2492,18,2492,28,[2,["Node"],"value"]],[2492,29,2492,33,[2,[],"node"]]]]],[[[2493,17,2493,25,[12,[[],"UnitExpr"],[]]],[2495,21,2495,34,[0,[[2495,21,2495,25,[2,[],"Just"]],[2495,26,2495,34,[2,[],"UnitType"]]]]]],[[2497,17,2497,26,[12,[[],"Integer"],[[2497,25,2497,26,[0]]]]],[2498,21,2498,65,[1,"<|",1,[2498,21,2498,25,[2,[],"Just"]],[2498,29,2498,65,[0,[[2498,29,2498,38,[2,[],"NamedType"]],[2498,39,2498,62,[6,[[2498,41,2498,53,[9,[[2498,43,2498,51,[5,"Basics"]]]]],[2498,55,2498,60,[5,"Int"]]]]],[2498,63,2498,65,[9,[]]]]]]]]],[[2500,17,2500,22,[12,[[],"Hex"],[[2500,21,2500,22,[0]]]]],[2501,21,2501,65,[1,"<|",1,[2501,21,2501,25,[2,[],"Just"]],[2501,29,2501,65,[0,[[2501,29,2501,38,[2,[],"NamedType"]],[2501,39,2501,62,[6,[[2501,41,2501,53,[9,[[2501,43,2501,51,[5,"Basics"]]]]],[2501,55,2501,60,[5,"Int"]]]]],[2501,63,2501,65,[9,[]]]]]]]]],[[2503,17,2503,28,[12,[[],"Floatable"],[[2503,27,2503,28,[0]]]]],[2504,21,2504,67,[1,"<|",1,[2504,21,2504,25,[2,[],"Just"]],[2504,29,2504,67,[0,[[2504,29,2504,38,[2,[],"NamedType"]],[2504,39,2504,64,[6,[[2504,41,2504,53,[9,[[2504,43,2504,51,[5,"Basics"]]]]],[2504,55,2504,62,[5,"Float"]]]]],[2504,65,2504,67,[9,[]]]]]]]]],[[2506,17,2506,26,[12,[[],"Literal"],[[2506,25,2506,26,[0]]]]],[2507,21,2507,68,[1,"<|",1,[2507,21,2507,25,[2,[],"Just"]],[2507,29,2507,68,[0,[[2507,29,2507,38,[2,[],"NamedType"]],[2507,39,2507,65,[6,[[2507,41,2507,53,[9,[[2507,43,2507,51,[5,"String"]]]]],[2507,55,2507,63,[5,"String"]]]]],[2507,66,2507,68,[9,[]]]]]]]]],[[2509,17,2509,30,[12,[[],"CharLiteral"],[[2509,29,2509,30,[0]]]]],[2510,21,2510,64,[1,"<|",1,[2510,21,2510,25,[2,[],"Just"]],[2510,29,2510,64,[0,[[2510,29,2510,38,[2,[],"NamedType"]],[2510,39,2510,61,[6,[[2510,41,2510,51,[9,[[2510,43,2510,49,[5,"Char"]]]]],[2510,53,2510,59,[5,"Char"]]]]],[2510,62,2510,64,[9,[]]]]]]]]],[[2512,17,2512,36,[12,[[],"TupledExpression"],[[2512,34,2512,36,[11,"es"]]]]],[2513,21,2515,47,[1,"|>",0,[2513,21,2514,42,[1,"|>",0,[2513,21,2513,113,[0,[[2513,21,2513,36,[2,["List"],"indexedMap"]],[2513,37,2513,110,[7,[2513,38,2513,109,[18,[[[2513,39,2513,40,[11,"i"]],[2513,41,2513,42,[11,"e"]]],[2513,46,2513,109,[0,[[2513,46,2513,48,[2,[],"go"]],[2513,49,2513,107,[7,[2513,50,2513,106,[1,"++",1,[2513,50,2513,63,[2,[],"typeVarPrefix"]],[2513,67,2513,106,[1,"++",1,[2513,67,2513,86,[5,"Tuple Expression "]],[2513,90,2513,106,[0,[[2513,90,2513,104,[2,["String"],"fromInt"]],[2513,105,2513,106,[2,[],"i"]]]]]]]]]]],[2513,108,2513,109,[2,[],"e"]]]]]]]]]],[2513,111,2513,113,[2,[],"es"]]]]],[2514,28,2514,42,[2,["MaybeX"],"combine"]]]],[2515,28,2515,47,[0,[[2515,28,2515,37,[2,["Maybe"],"map"]],[2515,38,2515,47,[2,[],"TupleType"]]]]]]]],[[2517,17,2517,28,[12,[[],"ListExpr"],[[2517,26,2517,28,[11,"es"]]]]],[2518,21,2527,50,[11,[2518,24,2518,39,[0,[[2518,24,2518,36,[2,["List"],"isEmpty"]],[2518,37,2518,39,[2,[],"es"]]]]],[2520,25,2520,108,[0,[[2520,25,2520,29,[2,[],"Just"]],[2520,30,2520,108,[7,[2520,31,2520,107,[0,[[2520,31,2520,39,[2,[],"ListType"]],[2520,40,2520,107,[7,[2520,41,2520,106,[1,"<|",1,[2520,41,2520,56,[0,[[2520,41,2520,48,[2,[],"TypeVar"]],[2520,49,2520,56,[2,[],"Nothing"]]]]],[2520,60,2520,106,[1,"++",1,[2520,60,2520,73,[2,[],"typeVarPrefix"]],[2520,77,2520,106,[5,"inferred empty list typevar"]]]]]]]]]]]]]]]],[2524,25,2527,50,[1,"|>",0,[2524,25,2526,42,[1,"|>",0,[2524,25,2525,45,[1,"|>",0,[2524,25,2524,113,[0,[[2524,25,2524,40,[2,["List"],"indexedMap"]],[2524,41,2524,110,[7,[2524,42,2524,109,[18,[[[2524,43,2524,44,[11,"i"]],[2524,45,2524,46,[11,"e"]]],[2524,50,2524,109,[0,[[2524,50,2524,52,[2,[],"go"]],[2524,53,2524,107,[7,[2524,54,2524,106,[1,"++",1,[2524,54,2524,67,[2,[],"typeVarPrefix"]],[2524,71,2524,106,[1,"++",1,[2524,71,2524,86,[5,"List Element "]],[2524,90,2524,106,[0,[[2524,90,2524,104,[2,["String"],"fromInt"]],[2524,105,2524,106,[2,[],"i"]]]]]]]]]]],[2524,108,2524,109,[2,[],"e"]]]]]]]]]],[2524,111,2524,113,[2,[],"es"]]]]],[2525,32,2525,45,[2,["MaybeX"],"values"]]]],[2526,32,2526,42,[2,[],"unifyTypes"]]]],[2527,32,2527,50,[0,[[2527,32,2527,41,[2,["Maybe"],"map"]],[2527,42,2527,50,[2,[],"ListType"]]]]]]]]]],[[2529,17,2529,30,[12,[[],"RecordExpr"],[[2529,28,2529,30,[11,"rs"]]]]],[2530,21,2541,119,[1,"|>",0,[2530,21,2540,42,[1,"|>",0,[2530,21,2539,30,[1,"|>",0,[2530,21,2530,23,[2,[],"rs"]],[2531,28,2539,30,[0,[[2531,28,2531,36,[2,["List"],"map"]],[2532,29,2539,30,[7,[2532,30,2538,77,[18,[[[2532,31,2532,32,[11,"n"]]],[2533,33,2538,77,[16,[[[2534,37,2535,53,[1,[2534,37,2534,45,[7,[[2534,39,2534,40,[11,"f"]],[2534,42,2534,43,[11,"e"]]]]],[2535,41,2535,53,[0,[[2535,41,2535,51,[2,["Node"],"value"]],[2535,52,2535,53,[2,[],"n"]]]]]]]],[2537,33,2538,77,[1,"|>",0,[2537,33,2537,88,[0,[[2537,33,2537,35,[2,[],"go"]],[2537,36,2537,86,[7,[2537,37,2537,85,[1,"++",1,[2537,37,2537,50,[2,[],"typeVarPrefix"]],[2537,54,2537,85,[1,"++",1,[2537,54,2537,69,[5,"Record Field "]],[2537,73,2537,85,[0,[[2537,73,2537,83,[2,["Node"],"value"]],[2537,84,2537,85,[2,[],"f"]]]]]]]]]]],[2537,87,2537,88,[2,[],"e"]]]]],[2538,40,2538,77,[0,[[2538,40,2538,49,[2,["Maybe"],"map"]],[2538,50,2538,77,[7,[2538,51,2538,76,[0,[[2538,51,2538,61,[2,["Tuple"],"pair"]],[2538,62,2538,76,[7,[2538,63,2538,75,[0,[[2538,63,2538,73,[2,["Node"],"value"]],[2538,74,2538,75,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2540,28,2540,42,[2,["MaybeX"],"combine"]]]],[2541,28,2541,119,[0,[[2541,28,2541,37,[2,["Maybe"],"map"]],[2541,38,2541,119,[7,[2541,39,2541,118,[18,[[[2541,40,2541,46,[11,"fields"]]],[2541,50,2541,118,[0,[[2541,50,2541,60,[2,[],"RecordType"]],[2541,61,2541,118,[8,[[2541,63,2541,80,[[2541,63,2541,70,"generic"],[2541,73,2541,80,[2,[],"Nothing"]]]],[2541,82,2541,99,[[2541,82,2541,91,"canonical"],[2541,94,2541,99,[2,[],"False"]]]],[2541,101,2541,117,[[2541,101,2541,107,"fields"],[2541,110,2541,116,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]],[[2543,17,2543,39,[12,[[],"FunctionOrValue"],[[2543,33,2543,34,[0]],[2543,35,2543,39,[11,"name"]]]]],[2544,21,2545,50,[1,"|>",0,[2544,21,2544,61,[0,[[2544,21,2544,37,[2,[],"findFunctionType"]],[2544,38,2544,43,[2,[],"local"]],[2544,44,2544,51,[2,[],"Nothing"]],[2544,52,2544,56,[2,[],"node"]],[2544,57,2544,61,[2,[],"name"]]]]],[2545,28,2545,50,[0,[[2545,28,2545,36,[2,[],"makeFunc"]],[2545,37,2545,50,[2,[],"typeVarPrefix"]]]]]]]],[[2547,17,2547,42,[12,[[],"ParenthesizedExpression"],[[2547,41,2547,42,[11,"e"]]]]],[2549,21,2549,39,[0,[[2549,21,2549,23,[2,[],"go"]],[2549,24,2549,37,[2,[],"typeVarPrefix"]],[2549,38,2549,39,[2,[],"e"]]]]]],[[2551,17,2551,27,[12,[[],"Negation"],[[2551,26,2551,27,[11,"e"]]]]],[2552,21,2552,39,[0,[[2552,21,2552,23,[2,[],"go"]],[2552,24,2552,37,[2,[],"typeVarPrefix"]],[2552,38,2552,39,[2,[],"e"]]]]]],[[2554,17,2554,32,[12,[[],"IfBlock"],[[2554,25,2554,26,[0]],[2554,27,2554,29,[11,"e1"]],[2554,30,2554,32,[11,"e2"]]]]],[2556,21,2558,38,[1,"|>",0,[2556,21,2557,41,[1,"|>",0,[2556,21,2556,108,[9,[[2556,23,2556,63,[0,[[2556,23,2556,25,[2,[],"go"]],[2556,26,2556,60,[7,[2556,27,2556,59,[1,"++",1,[2556,27,2556,40,[2,[],"typeVarPrefix"]],[2556,44,2556,59,[5,"If Block True"]]]]]],[2556,61,2556,63,[2,[],"e1"]]]]],[2556,65,2556,106,[0,[[2556,65,2556,67,[2,[],"go"]],[2556,68,2556,103,[7,[2556,69,2556,102,[1,"++",1,[2556,69,2556,82,[2,[],"typeVarPrefix"]],[2556,86,2556,102,[5,"If Block False"]]]]]],[2556,104,2556,106,[2,[],"e2"]]]]]]]],[2557,28,2557,41,[2,["MaybeX"],"values"]]]],[2558,28,2558,38,[2,[],"unifyTypes"]]]]],[[2560,17,2560,33,[12,[[],"PrefixOperator"],[[2560,32,2560,33,[11,"p"]]]]],[2561,21,2562,50,[1,"|>",0,[2561,21,2561,53,[0,[[2561,21,2561,37,[2,[],"findOperatorType"]],[2561,38,2561,51,[19,[2561,38,2561,43,[2,[],"local"]],[2561,44,2561,51,"context"]]],[2561,52,2561,53,[2,[],"p"]]]]],[2562,28,2562,50,[0,[[2562,28,2562,36,[2,[],"makeFunc"]],[2562,37,2562,50,[2,[],"typeVarPrefix"]]]]]]]],[[2564,17,2564,41,[12,[[],"CaseExpression"],[[2564,32,2564,41,[8,[[2564,34,2564,39,"cases"]]]]]]],[2566,21,2568,38,[1,"|>",0,[2566,21,2567,41,[1,"|>",0,[2566,21,2566,122,[0,[[2566,21,2566,36,[2,["List"],"indexedMap"]],[2566,37,2566,116,[7,[2566,38,2566,115,[18,[[[2566,39,2566,40,[11,"i"]],[2566,41,2566,49,[7,[[2566,43,2566,44,[0]],[2566,46,2566,47,[11,"e"]]]]]],[2566,53,2566,115,[0,[[2566,53,2566,55,[2,[],"go"]],[2566,56,2566,113,[7,[2566,57,2566,112,[1,"++",1,[2566,57,2566,70,[2,[],"typeVarPrefix"]],[2566,74,2566,112,[1,"++",1,[2566,74,2566,92,[5,"Case Expression "]],[2566,96,2566,112,[0,[[2566,96,2566,110,[2,["String"],"fromInt"]],[2566,111,2566,112,[2,[],"i"]]]]]]]]]]],[2566,114,2566,115,[2,[],"e"]]]]]]]]]],[2566,117,2566,122,[2,[],"cases"]]]]],[2567,28,2567,41,[2,["MaybeX"],"values"]]]],[2568,28,2568,38,[2,[],"unifyTypes"]]]]],[[2570,17,2570,31,[12,[[],"Application"],[[2570,29,2570,31,[11,"es"]]]]],[2571,21,2572,45,[1,"|>",0,[2571,21,2571,51,[0,[[2571,21,2571,42,[2,[],"inferApplicationChain"]],[2571,43,2571,48,[2,[],"local"]],[2571,49,2571,51,[2,[],"es"]]]]],[2572,28,2572,45,[0,[[2572,28,2572,37,[2,["Maybe"],"map"]],[2572,38,2572,45,[2,[],"getType"]]]]]]]],[[2574,17,2574,54,[12,[[],"LambdaExpression"],[[2574,34,2574,54,[8,[[2574,36,2574,40,"args"],[2574,42,2574,52,"expression"]]]]]]],[2575,21,2586,38,[16,[[[2576,25,2583,38,[0,[[0],[1,[2576,25,2576,63,[[2576,25,2576,35,"unwrapArgs"],[2576,38,2576,63,[6,[2576,38,2576,49,[1,[2576,38,2576,42,[[],"List"]],[[2576,43,2576,49,[1,[2576,43,2576,49,[[],"String"]],[]]]]]],[2576,53,2576,63,[1,[2576,53,2576,58,[[],"Maybe"]],[[2576,59,2576,63,[1,[2576,59,2576,63,[[],"Type"]],[]]]]]]]]]]],[2577,25,2583,38,[[2577,25,2577,35,"unwrapArgs"],[[2577,36,2577,38,[11,"xs"]]],[2578,29,2583,38,[1,"|>",0,[2578,29,2578,44,[0,[[2578,29,2578,41,[2,["ListX"],"uncons"]],[2578,42,2578,44,[2,[],"xs"]]]]],[2579,36,2583,38,[0,[[2579,36,2579,49,[2,["MaybeX"],"unpack"]],[2579,50,2579,86,[7,[2579,51,2579,85,[18,[[[2579,52,2579,54,[1]]],[2579,58,2579,85,[0,[[2579,58,2579,60,[2,[],"go"]],[2579,61,2579,74,[2,[],"typeVarPrefix"]],[2579,75,2579,85,[2,[],"expression"]]]]]]]]]],[2580,37,2583,38,[7,[2580,38,2582,135,[18,[[[2580,39,2580,49,[7,[[2580,41,2580,42,[11,"x"]],[2580,44,2580,47,[11,"xs_"]]]]]],[2581,41,2582,135,[1,"|>",0,[2581,41,2581,55,[0,[[2581,41,2581,51,[2,[],"unwrapArgs"]],[2581,52,2581,55,[2,[],"xs_"]]]]],[2582,48,2582,135,[0,[[2582,48,2582,57,[2,["Maybe"],"map"]],[2582,58,2582,135,[7,[2582,59,2582,134,[18,[[[2582,60,2582,61,[11,"t"]]],[2582,65,2582,134,[0,[[2582,65,2582,77,[2,[],"FunctionType"]],[2582,78,2582,134,[8,[[2582,80,2582,124,[[2582,80,2582,84,"from"],[2582,87,2582,124,[1,"<|",1,[2582,87,2582,102,[0,[[2582,87,2582,94,[2,[],"TypeVar"]],[2582,95,2582,102,[2,[],"Nothing"]]]]],[2582,106,2582,124,[1,"++",1,[2582,106,2582,119,[2,[],"typeVarPrefix"]],[2582,123,2582,124,[2,[],"x"]]]]]]]],[2582,126,2582,133,[[2582,126,2582,128,"to"],[2582,131,2582,132,[2,[],"t"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2585,21,2586,38,[1,"|>",0,[2585,21,2585,84,[0,[[2585,21,2585,36,[2,["List"],"indexedMap"]],[2585,37,2585,79,[7,[2585,38,2585,78,[18,[[[2585,39,2585,40,[11,"i"]],[2585,41,2585,42,[0]]],[2585,46,2585,78,[1,"++",1,[2585,46,2585,58,[5,"lambda arg"]],[2585,62,2585,78,[0,[[2585,62,2585,76,[2,["String"],"fromInt"]],[2585,77,2585,78,[2,[],"i"]]]]]]]]]]]],[2585,80,2585,84,[2,[],"args"]]]]],[2586,28,2586,38,[2,[],"unwrapArgs"]]]]]]]],[[2588,17,2588,42,[12,[[],"RecordAccess"],[[2588,30,2588,31,[11,"e"]],[2588,32,2588,42,[11,"accessFunc"]]]]],[2589,21,2597,45,[1,"|>",0,[2589,21,2596,29,[1,"|>",0,[2589,21,2591,47,[1,"|>",0,[2589,21,2590,54,[1,"|>",0,[2589,21,2589,39,[0,[[2589,21,2589,23,[2,[],"go"]],[2589,24,2589,37,[2,[],"typeVarPrefix"]],[2589,38,2589,39,[2,[],"e"]]]]],[2590,28,2590,54,[0,[[2590,28,2590,37,[2,["Maybe"],"map"]],[2590,38,2590,54,[2,[],"DereferencedType"]]]]]]],[2591,28,2591,47,[2,[],"getRecordFieldTypes"]]]],[2592,28,2596,29,[7,[2592,29,2595,61,[18,[[[2592,30,2592,32,[11,"ts"]]],[2593,33,2595,61,[1,"|>",0,[2593,33,2594,54,[1,"|>",0,[2593,33,2593,54,[0,[[2593,33,2593,43,[2,["Node"],"value"]],[2593,44,2593,54,[2,[],"accessFunc"]]]]],[2594,40,2594,54,[2,[],"makeAccessFunc"]]]],[2595,40,2595,61,[7,[2595,41,2595,60,[18,[[[2595,42,2595,43,[11,"f"]]],[2595,47,2595,60,[0,[[2595,47,2595,55,[2,["Dict"],"get"]],[2595,56,2595,57,[2,[],"f"]],[2595,58,2595,60,[2,[],"ts"]]]]]]]]]]]]]]]]]]],[2597,28,2597,45,[0,[[2597,28,2597,37,[2,["Maybe"],"map"]],[2597,38,2597,45,[2,[],"getType"]]]]]]]],[[2599,17,2599,33,[12,[[],"GLSLExpression"],[[2599,32,2599,33,[0]]]]],[2600,21,2600,28,[2,[],"Nothing"]]],[[2602,17,2602,48,[12,[[],"RecordAccessFunction"],[[2602,38,2602,48,[11,"accessFunc"]]]]],[2604,21,2617,29,[1,"|>",0,[2604,21,2604,46,[0,[[2604,21,2604,35,[2,[],"makeAccessFunc"]],[2604,36,2604,46,[2,[],"accessFunc"]]]]],[2605,28,2617,29,[7,[2605,29,2616,42,[18,[[[2605,30,2605,31,[11,"f"]]],[2606,33,2616,42,[1,"<|",1,[2606,33,2606,37,[2,[],"Just"]],[2607,37,2616,42,[0,[[2607,37,2607,49,[2,[],"FunctionType"]],[2608,41,2616,42,[8,[[2608,43,2614,50,[[2608,43,2608,47,"from"],[2609,45,2614,50,[0,[[2609,45,2609,55,[2,[],"RecordType"]],[2611,49,2614,50,[8,[[2611,51,2611,139,[[2611,51,2611,58,"generic"],[2611,61,2611,139,[1,"<|",1,[2611,61,2611,65,[2,[],"Just"]],[2611,69,2611,139,[1,"<|",1,[2611,69,2611,84,[0,[[2611,69,2611,76,[2,[],"TypeVar"]],[2611,77,2611,84,[2,[],"Nothing"]]]]],[2611,88,2611,139,[1,"++",1,[2611,88,2611,101,[2,[],"typeVarPrefix"]],[2611,105,2611,139,[1,"++",1,[2611,105,2611,134,[5,"record access inferred for "]],[2611,138,2611,139,[2,[],"f"]]]]]]]]]]]],[2612,51,2613,49,[[2612,51,2612,60,"canonical"],[2612,63,2612,68,[2,[],"False"]]]],[2613,51,2614,49,[[2613,51,2613,57,"fields"],[2613,60,2613,147,[9,[[2613,62,2613,145,[6,[[2613,64,2613,65,[2,[],"f"]],[2613,67,2613,143,[1,"<|",1,[2613,67,2613,82,[0,[[2613,67,2613,74,[2,[],"TypeVar"]],[2613,75,2613,82,[2,[],"Nothing"]]]]],[2613,86,2613,143,[1,"++",1,[2613,86,2613,99,[2,[],"typeVarPrefix"]],[2613,103,2613,143,[1,"++",1,[2613,103,2613,138,[5,"record access inferred field for "]],[2613,142,2613,143,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]],[2615,43,2616,41,[[2615,43,2615,45,"to"],[2615,48,2615,124,[1,"<|",1,[2615,48,2615,63,[0,[[2615,48,2615,55,[2,[],"TypeVar"]],[2615,56,2615,63,[2,[],"Nothing"]]]]],[2615,67,2615,124,[1,"++",1,[2615,67,2615,80,[2,[],"typeVarPrefix"]],[2615,84,2615,124,[1,"++",1,[2615,84,2615,119,[5,"record access inferred field for "]],[2615,123,2615,124,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]]]]]],[[2619,17,2619,27,[12,[[],"Operator"],[[2619,26,2619,27,[0]]]]],[2620,21,2620,28,[2,[],"Nothing"]]],[[2622,17,2622,47,[12,[[],"OperatorApplication"],[[2622,37,2622,39,[11,"op"]],[2622,40,2622,41,[0]],[2622,42,2622,44,[11,"e1"]],[2622,45,2622,47,[11,"e2"]]]]],[2624,21,2625,45,[1,"|>",0,[2624,21,2624,84,[0,[[2624,21,2624,45,[2,[],"checkOperatorApplication"]],[2624,46,2624,75,[7,[2624,47,2624,74,[0,[[2624,47,2624,68,[2,[],"inferApplicationChain"]],[2624,69,2624,74,[2,[],"local"]]]]]]],[2624,76,2624,78,[2,[],"op"]],[2624,79,2624,81,[2,[],"e1"]],[2624,82,2624,84,[2,[],"e2"]]]]],[2625,28,2625,45,[0,[[2625,28,2625,37,[2,["Maybe"],"map"]],[2625,38,2625,45,[2,[],"getType"]]]]]]]],[[2627,17,2627,59,[12,[[],"LetExpression"],[[2627,31,2627,59,[8,[[2627,33,2627,45,"declarations"],[2627,47,2627,57,"expression"]]]]]]],[2628,21,2636,45,[16,[[[2629,25,2632,49,[0,[[0],[1,[2629,25,2629,55,[[2629,25,2629,36,"newBindings"],[2629,39,2629,55,[1,[2629,39,2629,43,[[],"Dict"]],[[2629,44,2629,50,[1,[2629,44,2629,50,[[],"String"]],[]]],[2629,51,2629,55,[1,[2629,51,2629,55,[[],"Type"]],[]]]]]]]]],[2630,25,2632,49,[[2630,25,2630,36,"newBindings"],[],[2631,29,2632,49,[1,"|>",0,[2631,29,2631,105,[0,[[2631,29,2631,43,[2,["List"],"concatMap"]],[2631,44,2631,92,[7,[2631,45,2631,91,[1,"<<",0,[2631,45,2631,77,[0,[[2631,45,2631,71,[2,[],"bindingsFromLetDeclaration"]],[2631,72,2631,77,[2,[],"local"]]]]],[2631,81,2631,91,[2,["Node"],"value"]]]]]],[2631,93,2631,105,[2,[],"declarations"]]]]],[2632,36,2632,49,[2,["Dict"],"fromList"]]]]]]]]]],[2634,21,2636,45,[1,"|>",0,[2634,21,2635,68,[1,"|>",0,[2634,21,2634,118,[0,[[2634,21,2634,34,[2,[],"inferExprType"]],[2634,35,2634,107,[21,[2634,37,2634,42,"local"],[[2634,45,2634,106,[[2634,45,2634,59,"localFunctions"],[2634,62,2634,105,[0,[[2634,62,2634,72,[2,["Dict"],"union"]],[2634,73,2634,93,[19,[2634,73,2634,78,[2,[],"local"]],[2634,79,2634,93,"localFunctions"]]],[2634,94,2634,105,[2,[],"newBindings"]]]]]]]]]],[2634,108,2634,118,[2,[],"expression"]]]]],[2635,28,2635,68,[0,[[2635,28,2635,37,[2,["Maybe"],"map"]],[2635,38,2635,68,[7,[2635,39,2635,67,[0,[[2635,39,2635,53,[2,[],"prefixTypeVars"]],[2635,54,2635,67,[2,[],"typeVarPrefix"]]]]]]]]]]]],[2636,28,2636,45,[0,[[2636,28,2636,37,[2,["Maybe"],"map"]],[2636,38,2636,45,[2,[],"getType"]]]]]]]]]]],[[2638,17,2638,46,[12,[[],"RecordUpdateExpression"],[[2638,40,2638,43,[11,"var"]],[2638,44,2638,46,[11,"fs"]]]]],[2639,21,2652,30,[1,"|>",0,[2639,21,2640,50,[1,"|>",0,[2639,21,2639,72,[0,[[2639,21,2639,37,[2,[],"findFunctionType"]],[2639,38,2639,43,[2,[],"local"]],[2639,44,2639,51,[2,[],"Nothing"]],[2639,52,2639,55,[2,[],"var"]],[2639,56,2639,72,[7,[2639,57,2639,71,[0,[[2639,57,2639,67,[2,["Node"],"value"]],[2639,68,2639,71,[2,[],"var"]]]]]]]]]],[2640,28,2640,50,[0,[[2640,28,2640,36,[2,[],"makeFunc"]],[2640,37,2640,50,[2,[],"typeVarPrefix"]]]]]]],[2641,28,2652,30,[0,[[2641,28,2641,45,[2,["MaybeX"],"orElseLazy"]],[2642,29,2652,30,[7,[2642,30,2651,42,[18,[[[2642,31,2642,33,[1]]],[2643,33,2651,42,[1,"|>",0,[2643,33,2643,186,[0,[[2643,33,2643,48,[2,["MaybeX"],"traverse"]],[2643,49,2643,183,[7,[2643,50,2643,182,[1,"<<",0,[2643,50,2643,168,[7,[2643,51,2643,167,[18,[[[2643,52,2643,60,[7,[[2643,54,2643,55,[11,"f"]],[2643,57,2643,58,[11,"e"]]]]]],[2643,64,2643,167,[1,"|>",0,[2643,64,2643,126,[0,[[2643,64,2643,66,[2,[],"go"]],[2643,67,2643,124,[7,[2643,68,2643,123,[1,"++",1,[2643,68,2643,81,[2,[],"typeVarPrefix"]],[2643,85,2643,123,[1,"++",1,[2643,85,2643,107,[5,"Record Update Field "]],[2643,111,2643,123,[0,[[2643,111,2643,121,[2,["Node"],"value"]],[2643,122,2643,123,[2,[],"f"]]]]]]]]]]],[2643,125,2643,126,[2,[],"e"]]]]],[2643,130,2643,167,[0,[[2643,130,2643,139,[2,["Maybe"],"map"]],[2643,140,2643,167,[7,[2643,141,2643,166,[0,[[2643,141,2643,151,[2,["Tuple"],"pair"]],[2643,152,2643,166,[7,[2643,153,2643,165,[0,[[2643,153,2643,163,[2,["Node"],"value"]],[2643,164,2643,165,[2,[],"f"]]]]]]]]]]]]]]]]]]]]]],[2643,172,2643,182,[2,["Node"],"value"]]]]]],[2643,184,2643,186,[2,[],"fs"]]]]],[2644,40,2651,42,[0,[[2644,40,2644,49,[2,["Maybe"],"map"]],[2645,41,2651,42,[7,[2645,42,2650,50,[18,[[[2645,43,2645,49,[11,"fields"]]],[2646,45,2650,50,[0,[[2646,45,2646,55,[2,[],"RecordType"]],[2647,49,2650,50,[8,[[2647,51,2647,130,[[2647,51,2647,58,"generic"],[2647,61,2647,130,[1,"<|",1,[2647,61,2647,65,[2,[],"Just"]],[2647,69,2647,130,[1,"<|",1,[2647,69,2647,84,[0,[[2647,69,2647,76,[2,[],"TypeVar"]],[2647,77,2647,84,[2,[],"Nothing"]]]]],[2647,88,2647,130,[1,"++",1,[2647,88,2647,101,[2,[],"typeVarPrefix"]],[2647,105,2647,130,[5,"inferred update generic"]]]]]]]]]],[2648,51,2649,49,[[2648,51,2648,60,"canonical"],[2648,63,2648,68,[2,[],"False"]]]],[2649,51,2650,49,[[2649,51,2649,57,"fields"],[2649,60,2649,66,[2,[],"fields"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2654,9,2661,22,[0,[[0],[1,[2654,9,2654,73,[[2654,9,2654,17,"makeFunc"],[2654,20,2654,73,[6,[2654,20,2654,26,[1,[2654,20,2654,26,[[],"String"]],[]]],[2654,30,2654,73,[6,[2654,30,2654,59,[1,[2654,30,2654,35,[[],"Maybe"]],[[2654,36,2654,59,[1,[2654,37,2654,41,[[],"List"]],[[2654,42,2654,58,[1,[2654,42,2654,58,[[],"DereferencedType"]],[]]]]]]]]],[2654,63,2654,73,[1,[2654,63,2654,68,[[],"Maybe"]],[[2654,69,2654,73,[1,[2654,69,2654,73,[[],"Type"]],[]]]]]]]]]]]]],[2655,9,2661,22,[[2655,9,2655,17,"makeFunc"],[[2655,18,2655,31,[11,"typeVarPrefix"]]],[2656,13,2661,22,[1,">>",1,[2656,13,2656,64,[0,[[2656,13,2656,22,[2,["Maybe"],"map"]],[2656,23,2656,64,[7,[2656,24,2656,63,[0,[[2656,24,2656,32,[2,["List"],"map"]],[2656,33,2656,63,[7,[2656,34,2656,62,[0,[[2656,34,2656,48,[2,[],"prefixTypeVars"]],[2656,49,2656,62,[2,[],"typeVarPrefix"]]]]]]]]]]]]]]],[2657,20,2661,22,[1,">>",1,[2657,20,2657,50,[0,[[2657,20,2657,33,[2,["Maybe"],"andThen"]],[2657,34,2657,50,[2,["ListX"],"unconsLast"]]]]],[2658,20,2661,22,[0,[[2658,20,2658,29,[2,["Maybe"],"map"]],[2659,21,2661,22,[7,[2659,22,2660,65,[1,">>",1,[2659,22,2659,62,[0,[[2659,22,2659,35,[2,["Tuple"],"mapBoth"]],[2659,36,2659,43,[2,[],"getType"]],[2659,44,2659,62,[7,[2659,45,2659,61,[0,[[2659,45,2659,53,[2,["List"],"map"]],[2659,54,2659,61,[2,[],"getType"]]]]]]]]]],[2660,28,2660,65,[7,[2660,29,2660,64,[18,[[[2660,30,2660,39,[7,[[2660,32,2660,33,[11,"r"]],[2660,35,2660,37,[11,"ts"]]]]]],[2660,43,2660,64,[0,[[2660,43,2660,59,[2,[],"makeFunctionType"]],[2660,60,2660,61,[2,[],"r"]],[2660,62,2660,64,[2,[],"ts"]]]]]]]]]]]]]]]]]]]]]]]]]]],[2663,5,2664,38,[1,">>",1,[2663,5,2663,10,[0,[[2663,5,2663,7,[2,[],"go"]],[2663,8,2663,10,[5,""]]]]],[2664,12,2664,38,[0,[[2664,12,2664,21,[2,["Maybe"],"map"]],[2664,22,2664,38,[2,[],"DereferencedType"]]]]]]]]]]]]]]],[2667,1,2675,6,[0,[[1,[2667,1,2668,3,"{-| The initial project context knows of no types.\n-}"]],[1,[2669,1,2669,39,[[2669,1,2669,22,"initialProjectContext"],[2669,25,2669,39,[1,[2669,25,2669,39,[[],"ProjectContext"]],[]]]]]],[2670,1,2675,6,[[2670,1,2670,22,"initialProjectContext"],[],[2671,5,2675,6,[8,[[2671,7,2671,27,[[2671,7,2671,14,"aliases"],[2671,17,2671,27,[2,["Dict"],"empty"]]]],[2672,7,2673,5,[[2672,7,2672,23,"canonicalRecords"],[2672,26,2672,36,[2,["Dict"],"empty"]]]],[2673,7,2674,5,[[2673,7,2673,19,"constructors"],[2673,22,2673,32,[2,["Dict"],"empty"]]]],[2674,7,2675,5,[[2674,7,2674,20,"functionTypes"],[2674,23,2674,33,[2,["Dict"],"empty"]]]]]]]]]]]],[2678,1,2694,19,[0,[[1,[2678,1,2680,3,"{-| Given two dicts of field types, keep only fields that have identical types\nbetween the two.\n-}"]],[1,[2681,1,2681,86,[[2681,1,2681,27,"keepOnlyMatchingFieldTypes"],[2681,30,2681,86,[6,[2681,30,2681,46,[1,[2681,30,2681,34,[[],"Dict"]],[[2681,35,2681,41,[1,[2681,35,2681,41,[[],"String"]],[]]],[2681,42,2681,46,[1,[2681,42,2681,46,[[],"Type"]],[]]]]]],[2681,50,2681,86,[6,[2681,50,2681,66,[1,[2681,50,2681,54,[[],"Dict"]],[[2681,55,2681,61,[1,[2681,55,2681,61,[[],"String"]],[]]],[2681,62,2681,66,[1,[2681,62,2681,66,[[],"Type"]],[]]]]]],[2681,70,2681,86,[1,[2681,70,2681,74,[[],"Dict"]],[[2681,75,2681,81,[1,[2681,75,2681,81,[[],"String"]],[]]],[2681,82,2681,86,[1,[2681,82,2681,86,[[],"Type"]],[]]]]]]]]]]]]],[2682,1,2694,19,[[2682,1,2682,27,"keepOnlyMatchingFieldTypes"],[[2682,28,2682,30,[11,"d1"]],[2682,31,2682,33,[11,"d2"]]],[2683,5,2694,19,[0,[[2683,5,2683,15,[2,["Dict"],"merge"]],[2683,16,2683,33,[7,[2683,17,2683,32,[18,[[[2683,18,2683,19,[0]],[2683,20,2683,21,[0]],[2683,22,2683,25,[11,"acc"]]],[2683,29,2683,32,[2,[],"acc"]]]]]]],[2684,9,2690,10,[7,[2684,10,2689,20,[18,[[[2684,11,2684,16,[11,"field"]],[2684,17,2684,19,[11,"t1"]],[2684,20,2684,22,[11,"t2"]],[2684,23,2684,26,[11,"acc"]]],[2685,13,2689,20,[11,[2685,16,2685,24,[1,"==",2,[2685,16,2685,18,[2,[],"t1"]],[2685,22,2685,24,[2,[],"t2"]]]],[2686,17,2686,41,[0,[[2686,17,2686,28,[2,["Dict"],"insert"]],[2686,29,2686,34,[2,[],"field"]],[2686,35,2686,37,[2,[],"t1"]],[2686,38,2686,41,[2,[],"acc"]]]]],[2689,17,2689,20,[2,[],"acc"]]]]]]]]],[2691,9,2691,26,[7,[2691,10,2691,25,[18,[[[2691,11,2691,12,[0]],[2691,13,2691,14,[0]],[2691,15,2691,18,[11,"acc"]]],[2691,22,2691,25,[2,[],"acc"]]]]]]],[2692,9,2692,11,[2,[],"d1"]],[2693,9,2693,11,[2,[],"d2"]],[2694,9,2694,19,[2,["Dict"],"empty"]]]]]]]]]],[2697,1,2703,6,[1,[[1,[2697,1,2698,3,"{-| A canonical ordering of fields in a record definition.\n-}"]],[2699,12,2699,23,"KnownRecord"],[],[2700,5,2703,6,[4,[[2700,7,2700,40,[[2700,7,2700,12,"order"],[2700,15,2700,40,[1,[2700,15,2700,19,[[],"Dict"]],[[2700,20,2700,26,[1,[2700,20,2700,26,[[],"String"]],[]]],[2700,27,2700,40,[3,[[2700,29,2700,32,[1,[2700,29,2700,32,[[],"Int"]],[]]],[2700,34,2700,38,[1,[2700,34,2700,38,[[],"Type"]],[]]]]]]]]]]],[2701,7,2702,5,[[2701,7,2701,16,"isGeneric"],[2701,19,2701,23,[1,[2701,19,2701,23,[[],"Bool"]],[]]]]],[2702,7,2703,5,[[2702,7,2702,18,"isSubrecord"],[2702,21,2702,25,[1,[2702,21,2702,25,[[],"Bool"]],[]]]]]]]]]]],[2706,1,2742,13,[0,[[1,[2706,1,2709,3,"{-| Given how to treat subrecords, the current module names, and a list of\nfields/whether the record is generic, generate all `KnownRecord`s from a\n`Elm.Type.Type`.\n-}"]],[1,[2710,1,2710,135,[[2710,1,2710,23,"knownRecordFromDocType"],[2710,26,2710,135,[6,[2710,26,2710,45,[1,[2710,26,2710,45,[[],"SubrecordCanonicity"]],[]]],[2710,49,2710,135,[6,[2710,49,2710,59,[1,[2710,49,2710,59,[[],"ModuleName"]],[]]],[2710,63,2710,135,[6,[2710,63,2710,103,[3,[[2710,65,2710,95,[1,[2710,65,2710,69,[[],"List"]],[[2710,70,2710,95,[3,[[2710,72,2710,78,[1,[2710,72,2710,78,[[],"String"]],[]]],[2710,80,2710,93,[1,[2710,80,2710,93,[["Elm","Type"],"Type"]],[]]]]]]]]],[2710,97,2710,101,[1,[2710,97,2710,101,[[],"Bool"]],[]]]]]],[2710,107,2710,135,[1,[2710,107,2710,111,[[],"List"]],[[2710,112,2710,135,[3,[[2710,114,2710,120,[1,[2710,114,2710,120,[[],"String"]],[]]],[2710,122,2710,133,[1,[2710,122,2710,133,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[2711,1,2742,13,[[2711,1,2711,23,"knownRecordFromDocType"],[[2711,24,2711,42,[11,"subrecordTreatment"]],[2711,43,2711,53,[11,"moduleName"]],[2711,54,2711,75,[7,[[2711,56,2711,62,[11,"fields"]],[2711,64,2711,73,[11,"isGeneric"]]]]]],[2712,5,2742,13,[1,"|>",0,[2712,5,2733,13,[1,"|>",0,[2712,5,2727,15,[0,[[2712,5,2712,23,[2,["ListX"],"indexedFoldl"]],[2713,9,2725,10,[7,[2713,10,2724,18,[18,[[[2713,11,2713,12,[11,"i"]],[2713,13,2713,21,[7,[[2713,15,2713,16,[11,"f"]],[2713,18,2713,19,[11,"t"]]]]]],[2714,13,2724,18,[0,[[2714,13,2714,24,[2,["Dict"],"insert"]],[2714,25,2714,26,[2,[],"f"]],[2715,17,2724,18,[6,[[2715,19,2715,20,[2,[],"i"]],[2716,19,2723,22,[0,[[2716,19,2716,32,[2,[],"docTypeToType"]],[2716,33,2716,43,[2,[],"moduleName"]],[2717,21,2722,22,[8,[[2718,23,2718,62,[[2718,23,2718,54,"constrainedTypeVarsAreRespected"],[2718,57,2718,62,[2,[],"False"]]]],[2721,23,2722,21,[[2721,23,2721,47,"subrecordIsAlsoCanonical"],[2721,50,2721,96,[0,[[2721,50,2721,77,[2,[],"subrecordCanonicityForField"]],[2721,78,2721,96,[2,[],"subrecordTreatment"]]]]]]]]]],[2723,21,2723,22,[2,[],"t"]]]]]]]]]]]]]]]],[2726,9,2726,19,[2,["Dict"],"empty"]],[2727,9,2727,15,[2,[],"fields"]]]]],[2728,12,2733,13,[7,[2728,13,2732,18,[18,[[[2728,14,2728,19,[11,"order"]]],[2729,17,2732,18,[8,[[2729,19,2729,32,[[2729,19,2729,24,"order"],[2729,27,2729,32,[2,[],"order"]]]],[2730,19,2731,17,[[2730,19,2730,28,"isGeneric"],[2730,31,2730,40,[2,[],"isGeneric"]]]],[2731,19,2732,17,[[2731,19,2731,30,"isSubrecord"],[2731,33,2731,38,[2,[],"False"]]]]]]]]]]]]]],[2734,12,2742,13,[7,[2734,13,2741,34,[18,[[[2734,14,2734,15,[11,"k"]]],[2735,17,2741,34,[11,[2735,20,2735,57,[1,"==",2,[2735,20,2735,38,[2,[],"subrecordTreatment"]],[2735,42,2735,57,[2,[],"AlwaysCanonical"]]]],[2736,21,2737,127,[1,"::",1,[2736,21,2736,30,[6,[[2736,23,2736,25,[5,""]],[2736,27,2736,28,[2,[],"k"]]]]],[2737,28,2737,127,[0,[[2737,28,2737,42,[2,["List"],"concatMap"]],[2737,43,2737,105,[7,[2737,44,2737,104,[18,[[[2737,45,2737,60,[7,[[2737,47,2737,48,[11,"f"]],[2737,50,2737,58,[7,[[2737,52,2737,53,[0]],[2737,55,2737,56,[11,"t"]]]]]]]]],[2737,64,2737,104,[0,[[2737,64,2737,86,[2,[],"makeSubrecordsFromType"]],[2737,87,2737,91,[2,[],"True"]],[2737,92,2737,102,[7,[2737,93,2737,101,[1,"++",1,[2737,93,2737,96,[5,"."]],[2737,100,2737,101,[2,[],"f"]]]]]],[2737,103,2737,104,[2,[],"t"]]]]]]]]]],[2737,106,2737,127,[7,[2737,107,2737,126,[0,[[2737,107,2737,118,[2,["Dict"],"toList"]],[2737,119,2737,126,[19,[2737,119,2737,120,[2,[],"k"]],[2737,121,2737,126,"order"]]]]]]]]]]]]],[2741,21,2741,34,[9,[[2741,23,2741,32,[6,[[2741,25,2741,27,[5,""]],[2741,29,2741,30,[2,[],"k"]]]]]]]]]]]]]]]]]]]]]],[2745,1,2782,13,[0,[[1,[2745,1,2748,3,"{-| Given how to treat subrecords, the current module names, and a\n`RecordDefinition`/whether the record is generic, generate all `KnownRecord`s\nfrom a type annotation.\n-}"]],[1,[2749,1,2749,187,[[2749,1,2749,25,"knownRecordFromTypeAnnot"],[2749,28,2749,187,[6,[2749,28,2749,47,[1,[2749,28,2749,47,[[],"SubrecordCanonicity"]],[]]],[2749,51,2749,187,[6,[2749,51,2749,125,[5,[2749,53,2749,60,"context"],[2749,62,2749,124,[[2749,63,2749,86,[[2749,63,2749,73,"moduleName"],[2749,76,2749,86,[1,[2749,76,2749,86,[[],"ModuleName"]],[]]]]],[2749,88,2749,124,[[2749,88,2749,99,"lookupTable"],[2749,102,2749,123,[1,[2749,102,2749,123,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[2749,129,2749,187,[6,[2749,129,2749,155,[3,[[2749,131,2749,147,[1,[2749,131,2749,147,[[],"RecordDefinition"]],[]]],[2749,149,2749,153,[1,[2749,149,2749,153,[[],"Bool"]],[]]]]]],[2749,159,2749,187,[1,[2749,159,2749,163,[[],"List"]],[[2749,164,2749,187,[3,[[2749,166,2749,172,[1,[2749,166,2749,172,[[],"String"]],[]]],[2749,174,2749,185,[1,[2749,174,2749,185,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[2750,1,2782,13,[[2750,1,2750,25,"knownRecordFromTypeAnnot"],[[2750,26,2750,44,[11,"subrecordTreatment"]],[2750,45,2750,52,[11,"context"]],[2750,53,2750,74,[7,[[2750,55,2750,61,[11,"fields"]],[2750,63,2750,72,[11,"isGeneric"]]]]]],[2751,5,2782,13,[1,"|>",0,[2751,5,2773,85,[1,"|>",0,[2751,5,2772,15,[0,[[2751,5,2751,23,[2,["ListX"],"indexedFoldl"]],[2752,9,2770,10,[7,[2752,10,2769,18,[18,[[[2752,11,2752,12,[11,"i"]],[2752,13,2752,18,[11,"field"]]],[2753,13,2769,18,[16,[[[2754,17,2755,37,[1,[2754,17,2754,25,[7,[[2754,19,2754,20,[11,"f"]],[2754,22,2754,23,[11,"t"]]]]],[2755,21,2755,37,[0,[[2755,21,2755,31,[2,["Node"],"value"]],[2755,32,2755,37,[2,[],"field"]]]]]]]],[2757,13,2769,18,[0,[[2757,13,2757,24,[2,["Dict"],"insert"]],[2758,17,2758,31,[7,[2758,18,2758,30,[0,[[2758,18,2758,28,[2,["Node"],"value"]],[2758,29,2758,30,[2,[],"f"]]]]]]],[2759,17,2769,18,[6,[[2759,19,2759,20,[2,[],"i"]],[2760,19,2768,22,[0,[[2760,19,2760,34,[2,[],"typeAnnotToType"]],[2760,35,2760,42,[2,[],"context"]],[2762,21,2767,22,[8,[[2762,23,2762,62,[[2762,23,2762,54,"constrainedTypeVarsAreRespected"],[2762,57,2762,62,[2,[],"False"]]]],[2765,23,2767,21,[[2765,23,2765,47,"subrecordIsAlsoCanonical"],[2766,25,2766,71,[0,[[2766,25,2766,52,[2,[],"subrecordCanonicityForField"]],[2766,53,2766,71,[2,[],"subrecordTreatment"]]]]]]]]]],[2768,21,2768,22,[2,[],"t"]]]]]]]]]]]]]]]]]]],[2771,9,2771,19,[2,["Dict"],"empty"]],[2772,9,2772,15,[2,[],"fields"]]]]],[2773,12,2773,85,[7,[2773,13,2773,84,[18,[[[2773,14,2773,19,[11,"order"]]],[2773,23,2773,84,[8,[[2773,25,2773,38,[[2773,25,2773,30,"order"],[2773,33,2773,38,[2,[],"order"]]]],[2773,40,2773,61,[[2773,40,2773,49,"isGeneric"],[2773,52,2773,61,[2,[],"isGeneric"]]]],[2773,63,2773,83,[[2773,63,2773,74,"isSubrecord"],[2773,77,2773,82,[2,[],"False"]]]]]]]]]]]]]],[2774,12,2782,13,[7,[2774,13,2781,34,[18,[[[2774,14,2774,15,[11,"k"]]],[2775,17,2781,34,[11,[2775,20,2775,57,[1,"==",2,[2775,20,2775,38,[2,[],"subrecordTreatment"]],[2775,42,2775,57,[2,[],"AlwaysCanonical"]]]],[2776,21,2777,127,[1,"::",1,[2776,21,2776,30,[6,[[2776,23,2776,25,[5,""]],[2776,27,2776,28,[2,[],"k"]]]]],[2777,28,2777,127,[0,[[2777,28,2777,42,[2,["List"],"concatMap"]],[2777,43,2777,105,[7,[2777,44,2777,104,[18,[[[2777,45,2777,60,[7,[[2777,47,2777,48,[11,"f"]],[2777,50,2777,58,[7,[[2777,52,2777,53,[0]],[2777,55,2777,56,[11,"t"]]]]]]]]],[2777,64,2777,104,[0,[[2777,64,2777,86,[2,[],"makeSubrecordsFromType"]],[2777,87,2777,91,[2,[],"True"]],[2777,92,2777,102,[7,[2777,93,2777,101,[1,"++",1,[2777,93,2777,96,[5,"."]],[2777,100,2777,101,[2,[],"f"]]]]]],[2777,103,2777,104,[2,[],"t"]]]]]]]]]],[2777,106,2777,127,[7,[2777,107,2777,126,[0,[[2777,107,2777,118,[2,["Dict"],"toList"]],[2777,119,2777,126,[19,[2777,119,2777,120,[2,[],"k"]],[2777,121,2777,126,"order"]]]]]]]]]]]]],[2781,21,2781,34,[9,[[2781,23,2781,32,[6,[[2781,25,2781,27,[5,""]],[2781,29,2781,30,[2,[],"k"]]]]]]]]]]]]]]]]]]]]]],[2785,1,2791,6,[1,[[1,[2785,1,2787,3,"{-| Context within an expression, which may have additional bindings from `let`\ndeclarations and patterns.\n-}"]],[2788,12,2788,24,"LocalContext"],[],[2789,5,2791,6,[4,[[2789,7,2789,30,[[2789,7,2789,14,"context"],[2789,17,2789,30,[1,[2789,17,2789,30,[[],"ModuleContext"]],[]]]]],[2790,7,2791,5,[[2790,7,2790,21,"localFunctions"],[2790,24,2790,40,[1,[2790,24,2790,28,[[],"Dict"]],[[2790,29,2790,35,[1,[2790,29,2790,35,[[],"String"]],[]]],[2790,36,2790,40,[1,[2790,36,2790,40,[[],"Type"]],[]]]]]]]]]]]]]],[2794,1,2820,14,[0,[[1,[2794,1,2795,3,"{-| Make subrecords for custom types, if appropriate.\n-}"]],[1,[2796,1,2796,120,[[2796,1,2796,25,"makeCustomTypeSubrecords"],[2796,28,2796,120,[6,[2796,28,2796,47,[1,[2796,28,2796,47,[[],"SubrecordCanonicity"]],[]]],[2796,51,2796,120,[6,[2796,51,2796,57,[1,[2796,51,2796,57,[[],"String"]],[]]],[2796,61,2796,120,[6,[2796,61,2796,88,[1,[2796,61,2796,65,[[],"List"]],[[2796,66,2796,88,[1,[2796,66,2796,88,[[],"TypeWithPositionalVars"]],[]]]]]],[2796,92,2796,120,[1,[2796,92,2796,96,[[],"List"]],[[2796,97,2796,120,[3,[[2796,99,2796,105,[1,[2796,99,2796,105,[[],"String"]],[]]],[2796,107,2796,118,[1,[2796,107,2796,118,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[2797,1,2820,14,[[2797,1,2797,25,"makeCustomTypeSubrecords"],[[2797,26,2797,44,[11,"subrecordTreatment"]],[2797,45,2797,46,[11,"n"]],[2797,47,2797,49,[11,"ts"]]],[2798,5,2820,14,[1,"|>",0,[2798,5,2810,6,[7,[2798,6,2809,22,[17,[[2798,11,2798,29,[2,[],"subrecordTreatment"]],[[[2799,9,2799,22,[12,[[],"AlwaysUnknown"],[]]],[2800,13,2800,20,[2,[],"Nothing"]]],[[2802,9,2802,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[2803,13,2803,20,[2,[],"Nothing"]]],[[2805,9,2805,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[2806,13,2806,23,[0,[[2806,13,2806,17,[2,[],"Just"]],[2806,18,2806,23,[2,[],"False"]]]]]],[[2808,9,2808,24,[12,[[],"AlwaysCanonical"],[]]],[2809,13,2809,22,[0,[[2809,13,2809,17,[2,[],"Just"]],[2809,18,2809,22,[2,[],"True"]]]]]]]]]]]],[2811,12,2820,14,[0,[[2811,12,2811,25,[2,["MaybeX"],"unwrap"]],[2811,26,2811,28,[9,[]]],[2812,13,2820,14,[7,[2812,14,2819,35,[18,[[[2812,15,2812,22,[11,"recurse"]]],[2813,17,2819,35,[1,"|>",0,[2813,17,2818,23,[0,[[2813,17,2813,32,[2,["List"],"indexedMap"]],[2814,21,2817,22,[7,[2814,22,2816,96,[18,[[[2814,23,2814,24,[11,"i"]],[2814,25,2814,26,[11,"t"]]],[2815,25,2816,96,[1,"|>",0,[2815,25,2815,52,[0,[[2815,25,2815,50,[2,[],"getTypeWithPositionalVars"]],[2815,51,2815,52,[2,[],"t"]]]]],[2816,32,2816,96,[0,[[2816,32,2816,54,[2,[],"makeSubrecordsFromType"]],[2816,55,2816,62,[2,[],"recurse"]],[2816,63,2816,96,[7,[2816,64,2816,95,[1,"++",1,[2816,64,2816,65,[2,[],"n"]],[2816,69,2816,95,[1,"++",1,[2816,69,2816,75,[5," arg"]],[2816,79,2816,95,[0,[[2816,79,2816,93,[2,["String"],"fromInt"]],[2816,94,2816,95,[2,[],"i"]]]]]]]]]]]]]]]]]]]]],[2818,21,2818,23,[2,[],"ts"]]]]],[2819,24,2819,35,[2,["List"],"concat"]]]]]]]]]]]]]]]]]]],[2823,1,2864,18,[0,[[1,[2823,1,2826,3,"{-| Convert a record type into a field order, assuming no fields are missing\n(since that would be a type error). Returns a list of non-canonical fields\nencountered\n-}"]],[1,[2827,1,2827,79,[[2827,1,2827,15,"makeFieldOrder"],[2827,18,2827,79,[6,[2827,18,2827,34,[1,[2827,18,2827,34,[[],"DereferencedType"]],[]]],[2827,38,2827,79,[1,[2827,38,2827,44,[[],"Result"]],[[2827,45,2827,68,[1,[2827,46,2827,50,[[],"List"]],[[2827,51,2827,67,[3,[[2827,53,2827,59,[1,[2827,53,2827,59,[[],"String"]],[]]],[2827,61,2827,65,[1,[2827,61,2827,65,[[],"Type"]],[]]]]]]]]],[2827,69,2827,79,[1,[2827,69,2827,79,[[],"FieldOrder"]],[]]]]]]]]]]],[2828,1,2864,18,[[2828,1,2828,15,"makeFieldOrder"],[],[2829,5,2864,18,[16,[[[2830,9,2862,27,[0,[[0],[1,[2830,9,2830,63,[[2830,9,2830,11,"go"],[2830,14,2830,63,[6,[2830,14,2830,18,[1,[2830,14,2830,18,[[],"Type"]],[]]],[2830,22,2830,63,[1,[2830,22,2830,28,[[],"Result"]],[[2830,29,2830,52,[1,[2830,30,2830,34,[[],"List"]],[[2830,35,2830,51,[3,[[2830,37,2830,43,[1,[2830,37,2830,43,[[],"String"]],[]]],[2830,45,2830,49,[1,[2830,45,2830,49,[[],"Type"]],[]]]]]]]]],[2830,53,2830,63,[1,[2830,53,2830,63,[[],"FieldOrder"]],[]]]]]]]]]]],[2831,9,2862,27,[[2831,9,2831,11,"go"],[[2831,12,2831,17,[11,"type_"]]],[2832,13,2862,27,[17,[[2832,18,2832,23,[2,[],"type_"]],[[[2833,17,2833,58,[12,[[],"RecordType"],[[2833,28,2833,58,[8,[[2833,30,2833,37,"generic"],[2833,39,2833,48,"canonical"],[2833,50,2833,56,"fields"]]]]]]],[2834,21,2859,35,[11,[2834,24,2834,33,[2,[],"canonical"]],[2835,25,2856,34,[1,"<|",1,[2835,25,2835,27,[2,[],"Ok"]],[2836,29,2856,34,[0,[[2836,29,2836,39,[2,[],"FieldOrder"]],[2837,33,2856,34,[8,[[2837,35,2839,57,[[2837,35,2837,44,"canonical"],[2838,37,2839,57,[1,"|>",0,[2838,37,2838,92,[0,[[2838,37,2838,52,[2,["List"],"indexedMap"]],[2838,53,2838,85,[7,[2838,54,2838,84,[18,[[[2838,55,2838,56,[11,"i"]],[2838,57,2838,65,[7,[[2838,59,2838,60,[11,"n"]],[2838,62,2838,63,[11,"t"]]]]]],[2838,69,2838,84,[6,[[2838,71,2838,72,[2,[],"n"]],[2838,74,2838,82,[6,[[2838,76,2838,77,[2,[],"i"]],[2838,79,2838,80,[2,[],"t"]]]]]]]]]]]]],[2838,86,2838,92,[2,[],"fields"]]]]],[2839,44,2839,57,[2,["Dict"],"fromList"]]]]]],[2840,35,2856,33,[[2840,35,2840,42,"generic"],[2841,37,2855,48,[0,[[2841,37,2841,46,[2,["Maybe"],"map"]],[2842,41,2854,42,[7,[2842,42,2853,73,[18,[[[2842,43,2842,44,[11,"g"]]],[2843,45,2853,73,[17,[[2843,50,2843,54,[0,[[2843,50,2843,52,[2,[],"go"]],[2843,53,2843,54,[2,[],"g"]]]]],[[[2844,49,2844,53,[12,[[],"Ok"],[[2844,52,2844,53,[11,"o"]]]]],[2845,53,2845,68,[0,[[2845,53,2845,66,[2,[],"OrderedFields"]],[2845,67,2845,68,[2,[],"o"]]]]]],[[2847,49,2847,55,[12,[[],"Err"],[[2847,53,2847,55,[10,[]]]]]],[2849,53,2849,126,[1,"<|",1,[2849,53,2849,66,[2,[],"OrderedFields"]],[2849,70,2849,126,[0,[[2849,70,2849,80,[2,[],"FieldOrder"]],[2849,81,2849,126,[8,[[2849,83,2849,105,[[2849,83,2849,92,"canonical"],[2849,95,2849,105,[2,["Dict"],"empty"]]]],[2849,107,2849,125,[[2849,107,2849,114,"generic"],[2849,117,2849,124,[2,[],"Nothing"]]]]]]]]]]]]],[[2851,49,2851,55,[12,[[],"Err"],[[2851,53,2851,55,[11,"fs"]]]]],[2852,53,2853,73,[1,"|>",0,[2852,53,2852,76,[0,[[2852,53,2852,61,[2,["List"],"map"]],[2852,62,2852,73,[2,["Tuple"],"first"]],[2852,74,2852,76,[2,[],"fs"]]]]],[2853,60,2853,73,[2,[],"UnknownFields"]]]]]]]]]]]]]],[2855,41,2855,48,[2,[],"generic"]]]]]]]]]]]]]]],[2859,25,2859,35,[0,[[2859,25,2859,28,[2,[],"Err"]],[2859,29,2859,35,[2,[],"fields"]]]]]]]],[[2861,17,2861,18,[0]],[2862,21,2862,27,[0,[[2862,21,2862,24,[2,[],"Err"]],[2862,25,2862,27,[9,[]]]]]]]]]]]]]]]]],[2864,5,2864,18,[1,"<<",0,[2864,5,2864,7,[2,[],"go"]],[2864,11,2864,18,[2,[],"getType"]]]]]]]]]]]],[2867,1,2877,72,[0,[[1,[2867,1,2869,3,"{-| Given a return type and a successive list of argument types, create a\nfunction with that type.\n-}"]],[1,[2870,1,2870,45,[[2870,1,2870,17,"makeFunctionType"],[2870,20,2870,45,[6,[2870,20,2870,24,[1,[2870,20,2870,24,[[],"Type"]],[]]],[2870,28,2870,45,[6,[2870,28,2870,37,[1,[2870,28,2870,32,[[],"List"]],[[2870,33,2870,37,[1,[2870,33,2870,37,[[],"Type"]],[]]]]]],[2870,41,2870,45,[1,[2870,41,2870,45,[[],"Type"]],[]]]]]]]]]],[2871,1,2877,72,[[2871,1,2871,17,"makeFunctionType"],[[2871,18,2871,24,[11,"return"]],[2871,25,2871,27,[11,"ts"]]],[2872,5,2877,72,[17,[[2872,10,2872,12,[2,[],"ts"]],[[[2873,9,2873,11,[10,[]]],[2874,13,2874,19,[2,[],"return"]]],[[2876,9,2876,17,[9,[2876,9,2876,10,[11,"t"]],[2876,14,2876,17,[11,"ts_"]]]],[2877,13,2877,72,[0,[[2877,13,2877,25,[2,[],"FunctionType"]],[2877,26,2877,72,[8,[[2877,28,2877,36,[[2877,28,2877,32,"from"],[2877,35,2877,36,[2,[],"t"]]]],[2877,38,2877,71,[[2877,38,2877,40,"to"],[2877,43,2877,70,[0,[[2877,43,2877,59,[2,[],"makeFunctionType"]],[2877,60,2877,66,[2,[],"return"]],[2877,67,2877,70,[2,[],"ts_"]]]]]]]]]]]]]]]]]]]]]]],[2880,1,2886,34,[0,[[1,[2880,1,2882,3,"{-| Given a return type and a successive list of argument types, create a\nfunction with that type, all types having positional vars.\n-}"]],[1,[2883,1,2883,117,[[2883,1,2883,35,"makeFunctionTypeWithPositionalVars"],[2883,38,2883,117,[6,[2883,38,2883,60,[1,[2883,38,2883,60,[[],"TypeWithPositionalVars"]],[]]],[2883,64,2883,117,[6,[2883,64,2883,91,[1,[2883,64,2883,68,[[],"List"]],[[2883,69,2883,91,[1,[2883,69,2883,91,[[],"TypeWithPositionalVars"]],[]]]]]],[2883,95,2883,117,[1,[2883,95,2883,117,[[],"TypeWithPositionalVars"]],[]]]]]]]]]],[2884,1,2886,34,[[2884,1,2884,35,"makeFunctionTypeWithPositionalVars"],[[2884,36,2884,42,[11,"return"]],[2884,43,2884,45,[11,"ts"]]],[2885,5,2886,34,[1,"|>",0,[2885,5,2885,96,[0,[[2885,5,2885,21,[2,[],"makeFunctionType"]],[2885,22,2885,56,[7,[2885,23,2885,55,[0,[[2885,23,2885,48,[2,[],"getTypeWithPositionalVars"]],[2885,49,2885,55,[2,[],"return"]]]]]]],[2885,57,2885,96,[7,[2885,58,2885,95,[0,[[2885,58,2885,66,[2,["List"],"map"]],[2885,67,2885,92,[2,[],"getTypeWithPositionalVars"]],[2885,93,2885,95,[2,[],"ts"]]]]]]]]]],[2886,12,2886,34,[2,[],"TypeWithPositionalVars"]]]]]]]]],[2889,1,2958,13,[0,[[1,[2889,1,2892,3,"{-| Given how to sort generics, a list of fields to sort, and a `FieldOrder`,\nreturn an ordering of fields, whether or not any of them were an unknown record\n(via generics), and any canonical field types.\n-}"]],[1,[2893,1,2893,154,[[2893,1,2893,10,"makeOrder"],[2893,13,2893,154,[6,[2893,13,2893,25,[1,[2893,13,2893,25,[[],"SortGenerics"]],[]]],[2893,29,2893,154,[6,[2893,29,2893,39,[1,[2893,29,2893,33,[[],"List"]],[[2893,34,2893,39,[1,[2893,34,2893,39,[[],"Field"]],[]]]]]],[2893,43,2893,154,[6,[2893,43,2893,53,[1,[2893,43,2893,53,[[],"FieldOrder"]],[]]],[2893,57,2893,154,[4,[[2893,59,2893,97,[[2893,59,2893,78,"canonicalFieldTypes"],[2893,81,2893,97,[1,[2893,81,2893,85,[[],"Dict"]],[[2893,86,2893,92,[1,[2893,86,2893,92,[[],"String"]],[]]],[2893,93,2893,97,[1,[2893,93,2893,97,[[],"Type"]],[]]]]]]]],[2893,99,2893,127,[[2893,99,2893,109,"fieldOrder"],[2893,112,2893,127,[1,[2893,112,2893,116,[[],"Dict"]],[[2893,117,2893,123,[1,[2893,117,2893,123,[[],"String"]],[]]],[2893,124,2893,127,[1,[2893,124,2893,127,[[],"Int"]],[]]]]]]]],[2893,129,2893,153,[[2893,129,2893,145,"hasUnknownFields"],[2893,148,2893,152,[1,[2893,148,2893,152,[[],"Bool"]],[]]]]]]]]]]]]]]]]],[2894,1,2958,13,[[2894,1,2894,10,"makeOrder"],[[2894,11,2894,23,[11,"sortGenerics"]],[2894,24,2894,32,[11,"inFields"]],[2894,33,2894,53,[14,[2894,34,2894,52,[12,[[],"FieldOrder"],[[2894,45,2894,52,[11,"inOrder"]]]]]]]],[2895,5,2958,13,[16,[[[2896,9,2905,28,[0,[[0],[1,[2896,9,2896,28,[[2896,9,2896,22,"genericOffset"],[2896,25,2896,28,[1,[2896,25,2896,28,[[],"Int"]],[]]]]]],[2897,9,2905,28,[[2897,9,2897,22,"genericOffset"],[],[2900,13,2905,28,[17,[[2900,18,2900,30,[2,[],"sortGenerics"]],[[[2901,17,2901,35,[12,[[],"GenericFieldsFirst"],[]]],[2902,21,2902,29,[14,[2902,22,2902,29,[3,1000000]]]]],[[2904,17,2904,34,[12,[[],"GenericFieldsLast"],[]]],[2905,21,2905,28,[3,1000000]]]]]]]]]]]],[2907,9,2953,83,[0,[[0],[1,[2907,9,2907,74,[[2907,9,2907,11,"go"],[2907,14,2907,74,[6,[2907,14,2907,17,[1,[2907,14,2907,17,[[],"Int"]],[]]],[2907,21,2907,74,[6,[2907,21,2907,31,[1,[2907,21,2907,25,[[],"List"]],[[2907,26,2907,31,[1,[2907,26,2907,31,[[],"Field"]],[]]]]]],[2907,35,2907,74,[6,[2907,35,2907,45,[1,[2907,35,2907,45,[[],"FieldOrder"]],[]]],[2907,49,2907,74,[3,[[2907,51,2907,66,[1,[2907,51,2907,55,[[],"Dict"]],[[2907,56,2907,62,[1,[2907,56,2907,62,[[],"String"]],[]]],[2907,63,2907,66,[1,[2907,63,2907,66,[[],"Int"]],[]]]]]],[2907,68,2907,72,[1,[2907,68,2907,72,[[],"Bool"]],[]]]]]]]]]]]]]]],[2908,9,2953,83,[[2908,9,2908,11,"go"],[[2908,12,2908,22,[11,"offsetMult"]],[2908,23,2908,35,[11,"fieldsToMake"]],[2908,36,2908,71,[14,[2908,37,2908,70,[12,[[],"FieldOrder"],[[2908,48,2908,70,[8,[[2908,50,2908,59,"canonical"],[2908,61,2908,68,"generic"]]]]]]]]]],[2909,13,2953,83,[16,[[[2910,17,2922,52,[0,[[0],[1,[2910,17,2910,109,[[2910,17,2910,21,"step"],[2910,24,2910,109,[6,[2910,24,2910,29,[1,[2910,24,2910,29,[[],"Field"]],[]]],[2910,33,2910,109,[6,[2910,33,2910,69,[3,[[2910,35,2910,55,[1,[2910,35,2910,39,[[],"List"]],[[2910,40,2910,55,[3,[[2910,42,2910,48,[1,[2910,42,2910,48,[[],"String"]],[]]],[2910,50,2910,53,[1,[2910,50,2910,53,[[],"Int"]],[]]]]]]]]],[2910,57,2910,67,[1,[2910,57,2910,61,[[],"List"]],[[2910,62,2910,67,[1,[2910,62,2910,67,[[],"Field"]],[]]]]]]]]],[2910,73,2910,109,[3,[[2910,75,2910,95,[1,[2910,75,2910,79,[[],"List"]],[[2910,80,2910,95,[3,[[2910,82,2910,88,[1,[2910,82,2910,88,[[],"String"]],[]]],[2910,90,2910,93,[1,[2910,90,2910,93,[[],"Int"]],[]]]]]]]]],[2910,97,2910,107,[1,[2910,97,2910,101,[[],"List"]],[[2910,102,2910,107,[1,[2910,102,2910,107,[[],"Field"]],[]]]]]]]]]]]]]]]],[2911,17,2922,52,[[2911,17,2911,21,"step"],[[2911,22,2911,23,[11,"f"]],[2911,24,2911,42,[7,[[2911,26,2911,32,[11,"canAcc"]],[2911,34,2911,40,[11,"genAcc"]]]]]],[2912,21,2922,52,[17,[[2912,26,2912,52,[0,[[2912,26,2912,34,[2,["Dict"],"get"]],[2912,35,2912,42,[19,[2912,35,2912,36,[2,[],"f"]],[2912,37,2912,42,"field"]]],[2912,43,2912,52,[2,[],"canonical"]]]]],[[[2913,25,2913,38,[12,[[],"Just"],[[2913,30,2913,38,[7,[[2913,32,2913,33,[11,"i"]],[2913,35,2913,36,[0]]]]]]]],[2914,29,2919,30,[6,[[2914,31,2917,42,[1,"::",1,[2914,31,2916,32,[6,[[2914,33,2914,40,[19,[2914,33,2914,34,[2,[],"f"]],[2914,35,2914,40,"field"]]],[2915,33,2915,63,[1,"+",0,[2915,33,2915,34,[2,[],"i"]],[2915,37,2915,63,[1,"*",0,[2915,37,2915,47,[2,[],"offsetMult"]],[2915,50,2915,63,[2,[],"genericOffset"]]]]]]]]],[2917,36,2917,42,[2,[],"canAcc"]]]],[2918,31,2918,37,[2,[],"genAcc"]]]]]],[[2921,25,2921,32,[12,[[],"Nothing"],[]]],[2922,29,2922,52,[6,[[2922,31,2922,37,[2,[],"canAcc"]],[2922,39,2922,50,[1,"::",1,[2922,39,2922,40,[2,[],"f"]],[2922,44,2922,50,[2,[],"genAcc"]]]]]]]]]]]]]]]]]],[2924,13,2953,83,[1,"|>",0,[2924,13,2952,22,[1,"|>",0,[2924,13,2924,52,[0,[[2924,13,2924,23,[2,["List"],"foldl"]],[2924,24,2924,28,[2,[],"step"]],[2924,29,2924,39,[6,[[2924,31,2924,33,[9,[]]],[2924,35,2924,37,[9,[]]]]]],[2924,40,2924,52,[2,[],"fieldsToMake"]]]]],[2925,20,2952,22,[0,[[2925,20,2925,33,[2,["Tuple"],"mapBoth"]],[2925,34,2925,47,[2,["Dict"],"fromList"]],[2926,21,2952,22,[7,[2926,22,2951,54,[18,[[[2926,23,2926,25,[11,"fs"]]],[2927,25,2951,54,[17,[[2927,30,2927,37,[2,[],"generic"]],[[[2928,29,2928,55,[12,[[],"Just"],[[2928,34,2928,55,[14,[2928,35,2928,54,[12,[[],"OrderedFields"],[[2928,49,2928,54,[11,"order"]]]]]]]]]],[2929,33,2929,61,[0,[[2929,33,2929,35,[2,[],"go"]],[2929,36,2929,52,[7,[2929,37,2929,51,[1,"+",0,[2929,37,2929,47,[2,[],"offsetMult"]],[2929,50,2929,51,[3,1]]]]]],[2929,53,2929,55,[2,[],"fs"]],[2929,56,2929,61,[2,[],"order"]]]]]],[[2931,29,2931,53,[12,[[],"Just"],[[2931,34,2931,53,[14,[2931,35,2931,52,[12,[[],"UnknownFields"],[[2931,49,2931,52,[11,"fs_"]]]]]]]]]],[2932,33,2948,34,[16,[[[2933,37,2935,54,[0,[[0],[1,[2933,37,2933,55,[[2933,37,2933,41,"alph"],[2933,44,2933,55,[1,[2933,44,2933,48,[[],"List"]],[[2933,49,2933,55,[1,[2933,49,2933,55,[[],"String"]],[]]]]]]]]],[2934,37,2935,54,[[2934,37,2934,41,"alph"],[],[2935,41,2935,54,[0,[[2935,41,2935,50,[2,["List"],"sort"]],[2935,51,2935,54,[2,[],"fs_"]]]]]]]]]]],[2937,33,2948,34,[6,[[2937,35,2946,53,[1,"|>",0,[2937,35,2945,39,[0,[[2937,35,2937,43,[2,["List"],"map"]],[2938,37,2944,38,[7,[2938,38,2943,42,[18,[[[2938,39,2938,40,[11,"f"]]],[2939,41,2943,42,[6,[[2939,43,2939,50,[19,[2939,43,2939,44,[2,[],"f"]],[2939,45,2939,50,"field"]]],[2940,43,2942,86,[1,"|>",0,[2940,43,2941,68,[1,"|>",0,[2940,43,2940,71,[0,[[2940,43,2940,58,[2,["ListX"],"elemIndex"]],[2940,59,2940,66,[19,[2940,59,2940,60,[2,[],"f"]],[2940,61,2940,66,"field"]]],[2940,67,2940,71,[2,[],"alph"]]]]],[2941,48,2941,68,[0,[[2941,48,2941,65,[2,["Maybe"],"withDefault"]],[2941,66,2941,68,[14,[2941,67,2941,68,[3,1]]]]]]]]],[2942,48,2942,86,[0,[[2942,48,2942,51,[12,"+"]],[2942,52,2942,86,[7,[2942,53,2942,85,[1,"*",0,[2942,53,2942,69,[7,[2942,54,2942,68,[1,"+",0,[2942,54,2942,64,[2,[],"offsetMult"]],[2942,67,2942,68,[3,1]]]]]],[2942,72,2942,85,[2,[],"genericOffset"]]]]]]]]]]]]]]]]]]],[2945,37,2945,39,[2,[],"fs"]]]]],[2946,40,2946,53,[2,["Dict"],"fromList"]]]],[2947,35,2947,39,[2,[],"True"]]]]]]]]],[[2950,29,2950,36,[12,[[],"Nothing"],[]]],[2951,33,2951,54,[6,[[2951,35,2951,45,[2,["Dict"],"empty"]],[2951,47,2951,52,[2,[],"False"]]]]]]]]]]]]]]]]]]]],[2953,20,2953,83,[7,[2953,21,2953,82,[18,[[[2953,22,2953,47,[7,[[2953,24,2953,27,[11,"f1s"]],[2953,29,2953,45,[7,[[2953,31,2953,34,[11,"f2s"]],[2953,36,2953,43,[11,"unknown"]]]]]]]]],[2953,51,2953,82,[6,[[2953,53,2953,71,[0,[[2953,53,2953,63,[2,["Dict"],"union"]],[2953,64,2953,67,[2,[],"f1s"]],[2953,68,2953,71,[2,[],"f2s"]]]]],[2953,73,2953,80,[2,[],"unknown"]]]]]]]]]]]]]]]]]]]]],[2955,5,2958,13,[1,"|>",0,[2955,5,2955,39,[0,[[2955,5,2955,7,[2,[],"go"]],[2955,8,2955,9,[3,0]],[2955,10,2955,18,[2,[],"inFields"]],[2955,19,2955,39,[7,[2955,20,2955,38,[0,[[2955,20,2955,30,[2,[],"FieldOrder"]],[2955,31,2955,38,[2,[],"inOrder"]]]]]]]]]],[2956,12,2958,13,[7,[2956,13,2957,156,[18,[[[2956,14,2956,46,[7,[[2956,16,2956,26,[11,"fieldOrder"]],[2956,28,2956,44,[11,"hasUnknownFields"]]]]]],[2957,17,2957,156,[8,[[2957,19,2957,92,[[2957,19,2957,38,"canonicalFieldTypes"],[2957,41,2957,92,[0,[[2957,41,2957,49,[2,["Dict"],"map"]],[2957,50,2957,74,[7,[2957,51,2957,73,[18,[[[2957,52,2957,53,[0]],[2957,54,2957,55,[11,"v"]]],[2957,59,2957,73,[0,[[2957,59,2957,71,[2,["Tuple"],"second"]],[2957,72,2957,73,[2,[],"v"]]]]]]]]]],[2957,75,2957,92,[19,[2957,75,2957,82,[2,[],"inOrder"]],[2957,83,2957,92,"canonical"]]]]]]]],[2957,94,2957,117,[[2957,94,2957,104,"fieldOrder"],[2957,107,2957,117,[2,[],"fieldOrder"]]]],[2957,119,2957,155,[[2957,119,2957,135,"hasUnknownFields"],[2957,138,2957,154,[2,[],"hasUnknownFields"]]]]]]]]]]]]]]]]]]]]]],[2961,1,2967,25,[0,[[1,[2961,1,2963,3,"{-| Given a list of type vars (as string), create positional type vars from\nthem.\n-}"]],[1,[2964,1,2964,60,[[2964,1,2964,26,"makePositionalArgTypeVars"],[2964,29,2964,60,[6,[2964,29,2964,40,[1,[2964,29,2964,33,[[],"List"]],[[2964,34,2964,40,[1,[2964,34,2964,40,[[],"String"]],[]]]]]],[2964,44,2964,60,[1,[2964,44,2964,48,[[],"Dict"]],[[2964,49,2964,55,[1,[2964,49,2964,55,[[],"String"]],[]]],[2964,56,2964,60,[1,[2964,56,2964,60,[[],"Type"]],[]]]]]]]]]]],[2965,1,2967,25,[[2965,1,2965,26,"makePositionalArgTypeVars"],[],[2966,5,2967,25,[1,">>",1,[2966,5,2966,94,[0,[[2966,5,2966,20,[2,["List"],"indexedMap"]],[2966,21,2966,94,[7,[2966,22,2966,93,[18,[[[2966,23,2966,24,[11,"i"]],[2966,25,2966,26,[11,"s"]]],[2966,30,2966,93,[6,[[2966,32,2966,33,[2,[],"s"]],[2966,35,2966,91,[1,"<|",1,[2966,35,2966,50,[0,[[2966,35,2966,42,[2,[],"TypeVar"]],[2966,43,2966,50,[2,[],"Nothing"]]]]],[2966,54,2966,91,[1,"++",1,[2966,54,2966,71,[5,"positional arg "]],[2966,75,2966,91,[0,[[2966,75,2966,89,[2,["String"],"fromInt"]],[2966,90,2966,91,[2,[],"i"]]]]]]]]]]]]]]]]]]]],[2967,12,2967,25,[2,["Dict"],"fromList"]]]]]]]]],[2970,1,2988,13,[0,[[1,[2970,1,2971,3,"{-| Make a type for a record being accessed\n-}"]],[1,[2972,1,2972,82,[[2972,1,2972,21,"makeRecordAccessType"],[2972,24,2972,82,[6,[2972,24,2972,46,[1,[2972,24,2972,29,[[],"Maybe"]],[[2972,30,2972,46,[1,[2972,30,2972,46,[[],"DereferencedType"]],[]]]]]],[2972,50,2972,82,[6,[2972,50,2972,56,[1,[2972,50,2972,56,[[],"String"]],[]]],[2972,60,2972,82,[1,[2972,60,2972,65,[[],"Maybe"]],[[2972,66,2972,82,[1,[2972,66,2972,82,[[],"DereferencedType"]],[]]]]]]]]]]]]],[2973,1,2988,13,[[2973,1,2973,21,"makeRecordAccessType"],[[2973,22,2973,29,[11,"hasType"]],[2973,30,2973,40,[11,"accessFunc"]]],[2975,5,2988,13,[1,"|>",0,[2975,5,2975,30,[0,[[2975,5,2975,19,[2,[],"makeAccessFunc"]],[2975,20,2975,30,[2,[],"accessFunc"]]]]],[2976,12,2988,13,[7,[2976,13,2987,28,[18,[[[2976,14,2976,15,[11,"f"]]],[2977,17,2987,28,[0,[[2977,17,2977,26,[2,["Maybe"],"map"]],[2978,21,2986,22,[7,[2978,22,2985,34,[18,[[[2978,23,2978,24,[11,"t"]]],[2979,25,2985,34,[1,"<|",1,[2979,25,2979,41,[2,[],"DereferencedType"]],[2980,29,2985,34,[0,[[2980,29,2980,39,[2,[],"RecordType"]],[2982,33,2985,34,[8,[[2982,35,2982,99,[[2982,35,2982,42,"generic"],[2982,45,2982,99,[1,"<|",1,[2982,45,2982,49,[2,[],"Just"]],[2982,53,2982,99,[1,"<|",1,[2982,53,2982,68,[0,[[2982,53,2982,60,[2,[],"TypeVar"]],[2982,61,2982,68,[2,[],"Nothing"]]]]],[2982,72,2982,99,[1,"++",1,[2982,72,2982,94,[5,"record access field "]],[2982,98,2982,99,[2,[],"f"]]]]]]]]]],[2983,35,2984,33,[[2983,35,2983,44,"canonical"],[2983,47,2983,52,[2,[],"False"]]]],[2984,35,2985,33,[[2984,35,2984,41,"fields"],[2984,44,2984,64,[9,[[2984,46,2984,62,[6,[[2984,48,2984,49,[2,[],"f"]],[2984,51,2984,60,[0,[[2984,51,2984,58,[2,[],"getType"]],[2984,59,2984,60,[2,[],"t"]]]]]]]]]]]]]]]]]]]]]]]]]],[2987,21,2987,28,[2,[],"hasType"]]]]]]]]]]]]]]]]],[2991,1,3037,15,[0,[[1,[2991,1,2993,3,"{-| Given whether or not to descend beyond the initial type, a name prefix and a\ntype, generate `KnownRecord`s for records in that type.\n-}"]],[1,[2994,1,2994,80,[[2994,1,2994,23,"makeSubrecordsFromType"],[2994,26,2994,80,[6,[2994,26,2994,30,[1,[2994,26,2994,30,[[],"Bool"]],[]]],[2994,34,2994,80,[6,[2994,34,2994,40,[1,[2994,34,2994,40,[[],"String"]],[]]],[2994,44,2994,80,[6,[2994,44,2994,48,[1,[2994,44,2994,48,[[],"Type"]],[]]],[2994,52,2994,80,[1,[2994,52,2994,56,[[],"List"]],[[2994,57,2994,80,[3,[[2994,59,2994,65,[1,[2994,59,2994,65,[[],"String"]],[]]],[2994,67,2994,78,[1,[2994,67,2994,78,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]]]],[2995,1,3037,15,[[2995,1,2995,23,"makeSubrecordsFromType"],[[2995,24,2995,31,[11,"recurse"]],[2995,32,2995,42,[11,"namePrefix"]],[2995,43,2995,48,[11,"type_"]]],[2996,5,3037,15,[16,[[[2997,9,3003,26,[0,[[0],[1,[2997,9,2997,66,[[2997,9,2997,11,"go"],[2997,14,2997,66,[6,[2997,14,2997,26,[1,[2997,14,2997,19,[[],"Maybe"]],[[2997,20,2997,26,[1,[2997,20,2997,26,[[],"String"]],[]]]]]],[2997,30,2997,66,[6,[2997,30,2997,34,[1,[2997,30,2997,34,[[],"Type"]],[]]],[2997,38,2997,66,[1,[2997,38,2997,42,[[],"List"]],[[2997,43,2997,66,[3,[[2997,45,2997,51,[1,[2997,45,2997,51,[[],"String"]],[]]],[2997,53,2997,64,[1,[2997,53,2997,64,[[],"KnownRecord"]],[]]]]]]]]]]]]]]]],[2998,9,3003,26,[[2998,9,2998,11,"go"],[[2998,12,2998,13,[11,"s"]]],[2999,13,3003,26,[11,[2999,16,2999,23,[2,[],"recurse"]],[3000,17,3000,110,[0,[[3000,17,3000,39,[2,[],"makeSubrecordsFromType"]],[3000,40,3000,47,[2,[],"recurse"]],[3000,48,3000,110,[7,[3000,49,3000,109,[0,[[3000,49,3000,62,[2,["MaybeX"],"unwrap"]],[3000,63,3000,73,[2,[],"namePrefix"]],[3000,74,3000,107,[7,[3000,75,3000,106,[18,[[[3000,76,3000,82,[11,"subRec"]]],[3000,86,3000,106,[1,"++",1,[3000,86,3000,96,[2,[],"namePrefix"]],[3000,100,3000,106,[2,[],"subRec"]]]]]]]]],[3000,108,3000,109,[2,[],"s"]]]]]]]]]],[3003,17,3003,26,[0,[[3003,17,3003,23,[2,[],"always"]],[3003,24,3003,26,[9,[]]]]]]]]]]]]]],[3005,5,3037,15,[17,[[3005,10,3005,15,[2,[],"type_"]],[[[3006,9,3006,34,[12,[[],"FunctionType"],[[3006,22,3006,34,[8,[[3006,24,3006,28,"from"],[3006,30,3006,32,"to"]]]]]]],[3007,13,3007,45,[1,"++",1,[3007,13,3007,28,[0,[[3007,13,3007,15,[2,[],"go"]],[3007,16,3007,23,[2,[],"Nothing"]],[3007,24,3007,28,[2,[],"from"]]]]],[3007,32,3007,45,[0,[[3007,32,3007,34,[2,[],"go"]],[3007,35,3007,42,[2,[],"Nothing"]],[3007,43,3007,45,[2,[],"to"]]]]]]]],[[3009,9,3009,21,[12,[[],"TupleType"],[[3009,19,3009,21,[11,"ts"]]]]],[3010,13,3010,43,[0,[[3010,13,3010,27,[2,["List"],"concatMap"]],[3010,28,3010,40,[7,[3010,29,3010,39,[0,[[3010,29,3010,31,[2,[],"go"]],[3010,32,3010,39,[2,[],"Nothing"]]]]]]],[3010,41,3010,43,[2,[],"ts"]]]]]],[[3012,9,3012,20,[12,[[],"ListType"],[[3012,18,3012,20,[11,"t_"]]]]],[3013,13,3013,26,[0,[[3013,13,3013,15,[2,[],"go"]],[3013,16,3013,23,[2,[],"Nothing"]],[3013,24,3013,26,[2,[],"t_"]]]]]],[[3015,9,3015,39,[12,[[],"RecordType"],[[3015,20,3015,39,[8,[[3015,22,3015,29,"generic"],[3015,31,3015,37,"fields"]]]]]]],[3016,13,3031,80,[1,"::",1,[3016,13,3030,14,[6,[[3016,15,3016,25,[2,[],"namePrefix"]],[3017,15,3029,16,[8,[[3017,17,3026,31,[[3017,17,3017,22,"order"],[3018,21,3026,31,[0,[[3018,21,3018,39,[2,["ListX"],"indexedFoldl"]],[3019,25,3024,26,[7,[3019,26,3023,34,[18,[[[3019,27,3019,28,[11,"i"]],[3019,29,3019,37,[7,[[3019,31,3019,32,[11,"f"]],[3019,34,3019,35,[11,"t"]]]]]],[3020,29,3023,34,[0,[[3020,29,3020,40,[2,["Dict"],"insert"]],[3020,41,3020,42,[2,[],"f"]],[3021,33,3023,34,[6,[[3021,35,3021,36,[2,[],"i"]],[3022,35,3022,36,[2,[],"t"]]]]]]]]]]]]],[3025,25,3025,35,[2,["Dict"],"empty"]],[3026,25,3026,31,[2,[],"fields"]]]]]]],[3027,17,3028,15,[[3027,17,3027,26,"isGeneric"],[3027,29,3027,47,[1,"/=",2,[3027,29,3027,36,[2,[],"generic"]],[3027,40,3027,47,[2,[],"Nothing"]]]]]],[3028,17,3029,15,[[3028,17,3028,28,"isSubrecord"],[3028,31,3028,35,[2,[],"True"]]]]]]]]]],[3031,20,3031,80,[0,[[3031,20,3031,34,[2,["List"],"concatMap"]],[3031,35,3031,73,[7,[3031,36,3031,72,[18,[[[3031,37,3031,45,[7,[[3031,39,3031,40,[11,"f"]],[3031,42,3031,43,[11,"t"]]]]]],[3031,49,3031,72,[0,[[3031,49,3031,51,[2,[],"go"]],[3031,52,3031,70,[7,[3031,53,3031,69,[1,"<|",1,[3031,53,3031,57,[2,[],"Just"]],[3031,61,3031,69,[1,"++",1,[3031,61,3031,64,[5,"."]],[3031,68,3031,69,[2,[],"f"]]]]]]]],[3031,71,3031,72,[2,[],"t"]]]]]]]]]],[3031,74,3031,80,[2,[],"fields"]]]]]]]],[[3033,9,3033,10,[0]],[3037,13,3037,15,[9,[]]]]]]]]]]]]]]]],[3040,1,3061,31,[0,[[1,[3040,1,3041,3,"{-| Make a `TypeVar` from a string.\n-}"]],[1,[3042,1,3042,37,[[3042,1,3042,12,"makeTypeVar"],[3042,15,3042,37,[6,[3042,15,3042,19,[1,[3042,15,3042,19,[[],"Bool"]],[]]],[3042,23,3042,37,[6,[3042,23,3042,29,[1,[3042,23,3042,29,[[],"String"]],[]]],[3042,33,3042,37,[1,[3042,33,3042,37,[[],"Type"]],[]]]]]]]]]],[3043,1,3061,31,[[3043,1,3043,12,"makeTypeVar"],[[3043,13,3043,44,[11,"constrainedTypeVarsAreRespected"]],[3043,45,3043,46,[11,"s"]]],[3044,5,3061,31,[1,"|>",0,[3044,5,3060,69,[1,"|>",0,[3044,5,3058,6,[7,[3044,6,3057,16,[11,[3044,9,3044,37,[0,[[3044,9,3044,26,[2,["String"],"startsWith"]],[3044,27,3044,35,[5,"number"]],[3044,36,3044,37,[2,[],"s"]]]]],[3045,9,3045,20,[0,[[3045,9,3045,13,[2,[],"Just"]],[3045,14,3045,20,[2,[],"Number"]]]]],[3047,11,3057,16,[11,[3047,14,3047,46,[0,[[3047,14,3047,31,[2,["String"],"startsWith"]],[3047,32,3047,44,[5,"appendable"]],[3047,45,3047,46,[2,[],"s"]]]]],[3048,9,3048,24,[0,[[3048,9,3048,13,[2,[],"Just"]],[3048,14,3048,24,[2,[],"Appendable"]]]]],[3050,11,3057,16,[11,[3050,14,3050,46,[0,[[3050,14,3050,31,[2,["String"],"startsWith"]],[3050,32,3050,44,[5,"comparable"]],[3050,45,3050,46,[2,[],"s"]]]]],[3051,9,3051,24,[0,[[3051,9,3051,13,[2,[],"Just"]],[3051,14,3051,24,[2,[],"Comparable"]]]]],[3053,11,3057,16,[11,[3053,14,3053,46,[0,[[3053,14,3053,31,[2,["String"],"startsWith"]],[3053,32,3053,44,[5,"compappend"]],[3053,45,3053,46,[2,[],"s"]]]]],[3054,9,3054,24,[0,[[3054,9,3054,13,[2,[],"Just"]],[3054,14,3054,24,[2,[],"CompAppend"]]]]],[3057,9,3057,16,[2,[],"Nothing"]]]]]]]]]]]],[3060,12,3060,69,[0,[[3060,12,3060,25,[2,["MaybeX"],"filter"]],[3060,26,3060,69,[7,[3060,27,3060,68,[1,"<|",1,[3060,27,3060,33,[2,[],"always"]],[3060,37,3060,68,[2,[],"constrainedTypeVarsAreRespected"]]]]]]]]]]],[3061,12,3061,31,[7,[3061,13,3061,30,[18,[[[3061,14,3061,15,[11,"t"]]],[3061,19,3061,30,[0,[[3061,19,3061,26,[2,[],"TypeVar"]],[3061,27,3061,28,[2,[],"t"]],[3061,29,3061,30,[2,[],"s"]]]]]]]]]]]]]]]]],[3064,1,3131,31,[0,[[1,[3064,1,3065,3,"{-| Check if a type matches a constrained type variable.\n-}"]],[1,[3066,1,3066,45,[[3066,1,3066,17,"matchesTypeClass"],[3066,20,3066,45,[6,[3066,20,3066,24,[1,[3066,20,3066,24,[[],"Type"]],[]]],[3066,28,3066,45,[6,[3066,28,3066,37,[1,[3066,28,3066,37,[[],"Typeclass"]],[]]],[3066,41,3066,45,[1,[3066,41,3066,45,[[],"Bool"]],[]]]]]]]]]],[3067,1,3131,31,[[3067,1,3067,17,"matchesTypeClass"],[[3067,18,3067,23,[11,"type_"]],[3067,24,3067,29,[11,"class"]]],[3068,5,3131,31,[16,[[[3069,9,3080,26,[0,[[0],[1,[3069,9,3069,40,[[3069,9,3069,25,"typeIsAppendable"],[3069,28,3069,40,[6,[3069,28,3069,32,[1,[3069,28,3069,32,[[],"Type"]],[]]],[3069,36,3069,40,[1,[3069,36,3069,40,[[],"Bool"]],[]]]]]]]],[3070,9,3080,26,[[3070,9,3070,25,"typeIsAppendable"],[[3070,26,3070,27,[11,"t"]]],[3071,13,3080,26,[17,[[3071,18,3071,19,[2,[],"t"]],[[[3072,17,3072,56,[12,[[],"NamedType"],[[3072,27,3072,53,[7,[[3072,29,3072,41,[10,[[3072,31,3072,39,[3,"String"]]]]],[3072,43,3072,51,[3,"String"]]]]],[3072,54,3072,56,[10,[]]]]]],[3073,21,3073,25,[2,[],"True"]]],[[3075,17,3075,27,[12,[[],"ListType"],[[3075,26,3075,27,[0]]]]],[3076,21,3076,25,[2,[],"True"]]],[[3078,17,3078,18,[0]],[3080,21,3080,26,[2,[],"False"]]]]]]]]]]]],[3082,9,3105,26,[0,[[0],[1,[3082,9,3082,40,[[3082,9,3082,25,"typeIsComparable"],[3082,28,3082,40,[6,[3082,28,3082,32,[1,[3082,28,3082,32,[[],"Type"]],[]]],[3082,36,3082,40,[1,[3082,36,3082,40,[[],"Bool"]],[]]]]]]]],[3083,9,3105,26,[[3083,9,3083,25,"typeIsComparable"],[[3083,26,3083,27,[11,"t"]]],[3084,13,3105,26,[17,[[3084,18,3084,19,[2,[],"t"]],[[[3085,17,3085,56,[12,[[],"NamedType"],[[3085,27,3085,53,[7,[[3085,29,3085,41,[10,[[3085,31,3085,39,[3,"String"]]]]],[3085,43,3085,51,[3,"String"]]]]],[3085,54,3085,56,[10,[]]]]]],[3086,21,3086,25,[2,[],"True"]]],[[3088,17,3088,52,[12,[[],"NamedType"],[[3088,27,3088,49,[7,[[3088,29,3088,39,[10,[[3088,31,3088,37,[3,"Char"]]]]],[3088,41,3088,47,[3,"Char"]]]]],[3088,50,3088,52,[10,[]]]]]],[3089,21,3089,25,[2,[],"True"]]],[[3091,17,3091,53,[12,[[],"NamedType"],[[3091,27,3091,50,[7,[[3091,29,3091,41,[10,[[3091,31,3091,39,[3,"Basics"]]]]],[3091,43,3091,48,[3,"Int"]]]]],[3091,51,3091,53,[10,[]]]]]],[3092,21,3092,25,[2,[],"True"]]],[[3094,17,3094,55,[12,[[],"NamedType"],[[3094,27,3094,52,[7,[[3094,29,3094,41,[10,[[3094,31,3094,39,[3,"Basics"]]]]],[3094,43,3094,50,[3,"Float"]]]]],[3094,53,3094,55,[10,[]]]]]],[3095,21,3095,25,[2,[],"True"]]],[[3097,17,3097,28,[12,[[],"ListType"],[[3097,26,3097,28,[11,"t_"]]]]],[3098,21,3098,40,[0,[[3098,21,3098,37,[2,[],"typeIsComparable"]],[3098,38,3098,40,[2,[],"t_"]]]]]],[[3100,17,3100,29,[12,[[],"TupleType"],[[3100,27,3100,29,[11,"ts"]]]]],[3101,21,3101,49,[0,[[3101,21,3101,29,[2,["List"],"all"]],[3101,30,3101,46,[2,[],"typeIsComparable"]],[3101,47,3101,49,[2,[],"ts"]]]]]],[[3103,17,3103,18,[0]],[3105,21,3105,26,[2,[],"False"]]]]]]]]]]]],[3107,9,3118,26,[0,[[0],[1,[3107,9,3107,36,[[3107,9,3107,21,"typeIsNumber"],[3107,24,3107,36,[6,[3107,24,3107,28,[1,[3107,24,3107,28,[[],"Type"]],[]]],[3107,32,3107,36,[1,[3107,32,3107,36,[[],"Bool"]],[]]]]]]]],[3108,9,3118,26,[[3108,9,3108,21,"typeIsNumber"],[[3108,22,3108,23,[11,"t"]]],[3109,13,3118,26,[17,[[3109,18,3109,19,[2,[],"t"]],[[[3110,17,3110,53,[12,[[],"NamedType"],[[3110,27,3110,50,[7,[[3110,29,3110,41,[10,[[3110,31,3110,39,[3,"Basics"]]]]],[3110,43,3110,48,[3,"Int"]]]]],[3110,51,3110,53,[10,[]]]]]],[3111,21,3111,25,[2,[],"True"]]],[[3113,17,3113,55,[12,[[],"NamedType"],[[3113,27,3113,52,[7,[[3113,29,3113,41,[10,[[3113,31,3113,39,[3,"Basics"]]]]],[3113,43,3113,50,[3,"Float"]]]]],[3113,53,3113,55,[10,[]]]]]],[3114,21,3114,25,[2,[],"True"]]],[[3116,17,3116,18,[0]],[3118,21,3118,26,[2,[],"False"]]]]]]]]]]]]],[3120,5,3131,31,[17,[[3120,10,3120,15,[2,[],"class"]],[[[3121,9,3121,19,[12,[[],"Appendable"],[]]],[3122,13,3122,35,[0,[[3122,13,3122,29,[2,[],"typeIsAppendable"]],[3122,30,3122,35,[2,[],"type_"]]]]]],[[3124,9,3124,19,[12,[[],"Comparable"],[]]],[3125,13,3125,35,[0,[[3125,13,3125,29,[2,[],"typeIsComparable"]],[3125,30,3125,35,[2,[],"type_"]]]]]],[[3127,9,3127,19,[12,[[],"CompAppend"],[]]],[3128,13,3128,61,[1,"&&",1,[3128,13,3128,35,[0,[[3128,13,3128,29,[2,[],"typeIsAppendable"]],[3128,30,3128,35,[2,[],"type_"]]]]],[3128,39,3128,61,[0,[[3128,39,3128,55,[2,[],"typeIsComparable"]],[3128,56,3128,61,[2,[],"type_"]]]]]]]],[[3130,9,3130,15,[12,[[],"Number"],[]]],[3131,13,3131,31,[0,[[3131,13,3131,25,[2,[],"typeIsNumber"]],[3131,26,3131,31,[2,[],"type_"]]]]]]]]]]]]]]]]]],[3134,1,3162,6,[1,[[1,[3134,1,3146,3,"{-| The module context.\n\n`aliases` stores all type aliases.\n\n`canonicalRecords` stores known aliased records.\n\n`constructors` are different than functions, as they (might) require type\nvars.\n\n`functionTypes` stores the types of all functions (for type inference), along\nwith any (anonymous) records associated with custom types (by index).\n\n-}"]],[3147,12,3147,25,"ModuleContext"],[],[3148,5,3162,6,[4,[[3148,7,3148,69,[[3148,7,3148,14,"aliases"],[3148,17,3148,69,[1,[3148,17,3148,21,[[],"Dict"]],[[3148,22,3148,32,[1,[3148,22,3148,32,[[],"ModuleName"]],[]]],[3148,33,3148,69,[1,[3148,34,3148,38,[[],"Dict"]],[[3148,39,3148,45,[1,[3148,39,3148,45,[[],"String"]],[]]],[3148,46,3148,68,[1,[3148,46,3148,68,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[3149,7,3150,5,[[3149,7,3149,23,"canonicalRecords"],[3149,26,3149,67,[1,[3149,26,3149,30,[[],"Dict"]],[[3149,31,3149,41,[1,[3149,31,3149,41,[[],"ModuleName"]],[]]],[3149,42,3149,67,[1,[3149,43,3149,47,[[],"Dict"]],[[3149,48,3149,54,[1,[3149,48,3149,54,[[],"String"]],[]]],[3149,55,3149,66,[1,[3149,55,3149,66,[[],"KnownRecord"]],[]]]]]]]]]]],[3150,7,3151,5,[[3150,7,3150,19,"constructors"],[3150,22,3150,117,[1,[3150,22,3150,26,[[],"Dict"]],[[3150,27,3150,37,[1,[3150,27,3150,37,[[],"ModuleName"]],[]]],[3150,38,3150,117,[1,[3150,39,3150,43,[[],"Dict"]],[[3150,44,3150,50,[1,[3150,44,3150,50,[[],"String"]],[]]],[3150,51,3150,116,[4,[[3150,53,3150,82,[[3150,53,3150,67,"customTypeName"],[3150,70,3150,82,[1,[3150,70,3150,75,[[],"Maybe"]],[[3150,76,3150,82,[1,[3150,76,3150,82,[[],"String"]],[]]]]]]]],[3150,84,3150,115,[[3150,84,3150,89,"type_"],[3150,92,3150,114,[1,[3150,92,3150,114,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[3151,7,3152,5,[[3151,7,3151,20,"functionTypes"],[3151,23,3151,57,[1,[3151,23,3151,27,[[],"Dict"]],[[3151,28,3151,38,[1,[3151,28,3151,38,[[],"ModuleName"]],[]]],[3151,39,3151,57,[1,[3151,40,3151,44,[[],"Dict"]],[[3151,45,3151,51,[1,[3151,45,3151,51,[[],"String"]],[]]],[3151,52,3151,56,[1,[3151,52,3151,56,[[],"Type"]],[]]]]]]]]]]],[3152,7,3158,5,[[3152,7,3152,14,"exposed"],[3153,9,3157,10,[4,[[3153,11,3153,55,[[3153,11,3153,18,"aliases"],[3153,21,3153,55,[1,[3153,21,3153,25,[[],"Dict"]],[[3153,26,3153,32,[1,[3153,26,3153,32,[[],"String"]],[]]],[3153,33,3153,55,[1,[3153,33,3153,55,[[],"TypeWithPositionalVars"]],[]]]]]]]],[3154,11,3155,9,[[3154,11,3154,27,"canonicalRecords"],[3154,30,3154,53,[1,[3154,30,3154,34,[[],"Dict"]],[[3154,35,3154,41,[1,[3154,35,3154,41,[[],"String"]],[]]],[3154,42,3154,53,[1,[3154,42,3154,53,[[],"KnownRecord"]],[]]]]]]]],[3155,11,3156,9,[[3155,11,3155,23,"constructors"],[3155,26,3155,103,[1,[3155,26,3155,30,[[],"Dict"]],[[3155,31,3155,37,[1,[3155,31,3155,37,[[],"String"]],[]]],[3155,38,3155,103,[4,[[3155,40,3155,69,[[3155,40,3155,54,"customTypeName"],[3155,57,3155,69,[1,[3155,57,3155,62,[[],"Maybe"]],[[3155,63,3155,69,[1,[3155,63,3155,69,[[],"String"]],[]]]]]]]],[3155,71,3155,102,[[3155,71,3155,76,"type_"],[3155,79,3155,101,[1,[3155,79,3155,101,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]],[3156,11,3157,9,[[3156,11,3156,24,"functionTypes"],[3156,27,3156,43,[1,[3156,27,3156,31,[[],"Dict"]],[[3156,32,3156,38,[1,[3156,32,3156,38,[[],"String"]],[]]],[3156,39,3156,43,[1,[3156,39,3156,43,[[],"Type"]],[]]]]]]]]]]]]],[3158,7,3159,5,[[3158,7,3158,17,"moduleName"],[3158,20,3158,30,[1,[3158,20,3158,30,[[],"ModuleName"]],[]]]]],[3159,7,3160,5,[[3159,7,3159,20,"fileIsIgnored"],[3159,23,3159,27,[1,[3159,23,3159,27,[[],"Bool"]],[]]]]],[3160,7,3161,5,[[3160,7,3160,18,"lookupTable"],[3160,21,3160,42,[1,[3160,21,3160,42,[[],"ModuleNameLookupTable"]],[]]]]],[3161,7,3162,5,[[3161,7,3161,20,"extractSource"],[3161,23,3161,38,[6,[3161,23,3161,28,[1,[3161,23,3161,28,[[],"Range"]],[]]],[3161,32,3161,38,[1,[3161,32,3161,38,[[],"String"]],[]]]]]]]]]]]]],[3165,1,3178,14,[0,[[1,[3165,1,3167,3,"{-| Visit each module, first getting type aliases from all declarations and then\nchecking all expressions for records.\n-}"]],[1,[3168,1,3168,141,[[3168,1,3168,14,"moduleVisitor"],[3168,17,3168,141,[6,[3168,17,3168,27,[1,[3168,17,3168,27,[[],"RuleConfig"]],[]]],[3168,31,3168,141,[6,[3168,31,3168,68,[1,[3168,31,3168,52,[["Rule"],"ModuleRuleSchema"]],[[3168,53,3168,54,[0,"r"]],[3168,55,3168,68,[1,[3168,55,3168,68,[[],"ModuleContext"]],[]]]]]],[3168,72,3168,141,[1,[3168,72,3168,93,[["Rule"],"ModuleRuleSchema"]],[[3168,94,3168,127,[5,[3168,96,3168,97,"r"],[3168,99,3168,126,[[3168,100,3168,126,[[3168,100,3168,120,"hasAtLeastOneVisitor"],[3168,123,3168,125,[2]]]]]]]],[3168,128,3168,141,[1,[3168,128,3168,141,[[],"ModuleContext"]],[]]]]]]]]]]]]],[3169,1,3178,14,[[3169,1,3169,14,"moduleVisitor"],[[3169,15,3169,21,[11,"config"]],[3169,22,3169,28,[11,"schema"]]],[3170,5,3178,14,[1,"|>",0,[3170,5,3170,11,[2,[],"schema"]],[3171,12,3178,14,[0,[[3171,12,3171,44,[2,["Rule"],"withDeclarationEnterVisitor"]],[3172,13,3178,14,[7,[3172,14,3177,62,[18,[[[3172,15,3172,16,[11,"d"]],[3172,17,3172,18,[11,"c"]]],[3173,17,3177,62,[11,[3173,20,3173,35,[19,[3173,20,3173,21,[2,[],"c"]],[3173,22,3173,35,"fileIsIgnored"]]],[3174,21,3174,30,[6,[[3174,23,3174,25,[9,[]]],[3174,27,3174,28,[2,[],"c"]]]]],[3177,21,3177,62,[6,[[3177,23,3177,57,[0,[[3177,23,3177,46,[2,[],"declarationEnterVisitor"]],[3177,47,3177,53,[2,[],"config"]],[3177,54,3177,55,[2,[],"c"]],[3177,56,3177,57,[2,[],"d"]]]]],[3177,59,3177,60,[2,[],"c"]]]]]]]]]]]]]]]]]]]]]],[3181,1,3186,19,[2,[[1,[3181,1,3183,3,"{-| Any info we can glean about the record that might help us figure out what\nits field order should be.\n-}"]],[3184,6,3184,15,"OrderInfo"],[],[[3185,7,3185,31,[[3185,7,3185,20,"HasFieldOrder"],[[3185,21,3185,31,[1,[3185,21,3185,31,[[],"FieldOrder"]],[]]]]]],[3186,7,3186,19,[[3186,7,3186,19,"HasAllFields"],[]]]]]]],[3189,1,3202,6,[1,[[1,[3189,1,3191,3,"{-| A list of orders that match a list of fields, including both full matches\nand generic matches (with fields not present in the generic).\n-}"]],[3192,12,3192,24,"OrderMatches"],[],[3193,5,3202,6,[4,[[3193,7,3193,70,[[3193,7,3193,23,"canonicalMatches"],[3193,26,3193,70,[1,[3193,26,3193,30,[[],"List"]],[[3193,31,3193,70,[3,[[3193,33,3193,55,[3,[[3193,35,3193,45,[1,[3193,35,3193,45,[[],"ModuleName"]],[]]],[3193,47,3193,53,[1,[3193,47,3193,53,[[],"String"]],[]]]]]],[3193,57,3193,68,[1,[3193,57,3193,68,[[],"KnownRecord"]],[]]]]]]]]]]],[3194,7,3202,5,[[3194,7,3194,21,"genericMatches"],[3195,9,3201,14,[1,[3195,9,3195,13,[[],"List"]],[[3196,13,3201,14,[4,[[3196,15,3199,18,[[3196,15,3196,20,"type_"],[3197,17,3199,18,[3,[[3197,19,3197,41,[3,[[3197,21,3197,31,[1,[3197,21,3197,31,[[],"ModuleName"]],[]]],[3197,33,3197,39,[1,[3197,33,3197,39,[[],"String"]],[]]]]]],[3198,19,3198,30,[1,[3198,19,3198,30,[[],"KnownRecord"]],[]]]]]]]],[3200,15,3201,13,[[3200,15,3200,22,"missing"],[3200,25,3200,35,[1,[3200,25,3200,29,[[],"List"]],[[3200,30,3200,35,[1,[3200,30,3200,35,[[],"Field"]],[]]]]]]]]]]]]]]]]]]]]]],[3205,1,3220,13,[0,[[1,[3205,1,3207,3,"{-| Given a list of arguments and a flattened function type, return a list of\nargument types and the final function type.\n-}"]],[1,[3208,1,3208,114,[[3208,1,3208,27,"partiallyApplyArgsAndTypes"],[3208,30,3208,114,[6,[3208,30,3208,36,[1,[3208,30,3208,34,[[],"List"]],[[3208,35,3208,36,[0,"a"]]]]],[3208,40,3208,114,[6,[3208,40,3208,61,[1,[3208,40,3208,44,[[],"List"]],[[3208,45,3208,61,[1,[3208,45,3208,61,[[],"DereferencedType"]],[]]]]]],[3208,65,3208,114,[1,[3208,65,3208,70,[[],"Maybe"]],[[3208,71,3208,114,[3,[[3208,73,3208,94,[1,[3208,73,3208,77,[[],"List"]],[[3208,78,3208,94,[1,[3208,78,3208,94,[[],"DereferencedType"]],[]]]]]],[3208,96,3208,112,[1,[3208,96,3208,112,[[],"DereferencedType"]],[]]]]]]]]]]]]]]]],[3209,1,3220,13,[[3209,1,3209,27,"partiallyApplyArgsAndTypes"],[[3209,28,3209,32,[11,"args"]],[3209,33,3209,38,[11,"types"]]],[3210,5,3220,13,[1,"|>",0,[3210,5,3211,41,[1,"|>",0,[3210,5,3210,21,[0,[[3210,5,3210,16,[2,["List"],"length"]],[3210,17,3210,21,[2,[],"args"]]]]],[3211,12,3211,41,[7,[3211,13,3211,40,[18,[[[3211,14,3211,15,[11,"i"]]],[3211,19,3211,40,[0,[[3211,19,3211,32,[2,["ListX"],"splitAt"]],[3211,33,3211,34,[2,[],"i"]],[3211,35,3211,40,[2,[],"types"]]]]]]]]]]]],[3212,12,3220,13,[7,[3212,13,3219,55,[18,[[[3212,14,3212,34,[7,[[3212,16,3212,24,[11,"argTypes"]],[3212,26,3212,32,[11,"return"]]]]]],[3213,17,3219,55,[1,"|>",0,[3213,17,3218,26,[1,"|>",0,[3213,17,3213,40,[0,[[3213,17,3213,33,[2,["ListX"],"unconsLast"]],[3213,34,3213,40,[2,[],"return"]]]]],[3214,24,3218,26,[0,[[3214,24,3214,33,[2,["Maybe"],"map"]],[3215,25,3218,26,[7,[3215,26,3217,48,[1,">>",1,[3215,26,3215,66,[0,[[3215,26,3215,39,[2,["Tuple"],"mapBoth"]],[3215,40,3215,47,[2,[],"getType"]],[3215,48,3215,66,[7,[3215,49,3215,65,[0,[[3215,49,3215,57,[2,["List"],"map"]],[3215,58,3215,65,[2,[],"getType"]]]]]]]]]],[3216,32,3217,48,[1,">>",1,[3216,32,3216,69,[7,[3216,33,3216,68,[18,[[[3216,34,3216,43,[7,[[3216,36,3216,37,[11,"r"]],[3216,39,3216,41,[11,"ts"]]]]]],[3216,47,3216,68,[0,[[3216,47,3216,63,[2,[],"makeFunctionType"]],[3216,64,3216,65,[2,[],"r"]],[3216,66,3216,68,[2,[],"ts"]]]]]]]]]],[3217,32,3217,48,[2,[],"DereferencedType"]]]]]]]]]]]]],[3219,24,3219,55,[0,[[3219,24,3219,33,[2,["Maybe"],"map"]],[3219,34,3219,55,[7,[3219,35,3219,54,[0,[[3219,35,3219,45,[2,["Tuple"],"pair"]],[3219,46,3219,54,[2,[],"argTypes"]]]]]]]]]]]]]]]]]]]]]]]],[3223,1,3258,44,[0,[[1,[3223,1,3225,3,"{-| Prefix a string before type variables so as to disambiguate them for type\nmatching.\n-}"]],[1,[3226,1,3226,64,[[3226,1,3226,15,"prefixTypeVars"],[3226,18,3226,64,[6,[3226,18,3226,24,[1,[3226,18,3226,24,[[],"String"]],[]]],[3226,28,3226,64,[6,[3226,28,3226,44,[1,[3226,28,3226,44,[[],"DereferencedType"]],[]]],[3226,48,3226,64,[1,[3226,48,3226,64,[[],"DereferencedType"]],[]]]]]]]]]],[3227,1,3258,44,[[3227,1,3227,15,"prefixTypeVars"],[[3227,16,3227,22,[11,"prefix"]],[3227,23,3227,28,[11,"type_"]]],[3228,5,3258,44,[16,[[[3229,9,3256,29,[0,[[0],[1,[3229,9,3229,26,[[3229,9,3229,11,"go"],[3229,14,3229,26,[6,[3229,14,3229,18,[1,[3229,14,3229,18,[[],"Type"]],[]]],[3229,22,3229,26,[1,[3229,22,3229,26,[[],"Type"]],[]]]]]]]],[3230,9,3256,29,[[3230,9,3230,11,"go"],[[3230,12,3230,13,[11,"t"]]],[3231,13,3256,29,[17,[[3231,18,3231,19,[2,[],"t"]],[[[3232,17,3232,42,[12,[[],"FunctionType"],[[3232,30,3232,42,[8,[[3232,32,3232,36,"from"],[3232,38,3232,40,"to"]]]]]]],[3233,21,3233,64,[0,[[3233,21,3233,33,[2,[],"FunctionType"]],[3233,34,3233,64,[8,[[3233,36,3233,50,[[3233,36,3233,40,"from"],[3233,43,3233,50,[0,[[3233,43,3233,45,[2,[],"go"]],[3233,46,3233,50,[2,[],"from"]]]]]]],[3233,52,3233,63,[[3233,52,3233,54,"to"],[3233,57,3233,62,[0,[[3233,57,3233,59,[2,[],"go"]],[3233,60,3233,62,[2,[],"to"]]]]]]]]]]]]]],[[3235,17,3235,29,[12,[[],"TupleType"],[[3235,27,3235,29,[11,"ts"]]]]],[3236,21,3236,48,[1,"<|",1,[3236,21,3236,30,[2,[],"TupleType"]],[3236,34,3236,48,[0,[[3236,34,3236,42,[2,["List"],"map"]],[3236,43,3236,45,[2,[],"go"]],[3236,46,3236,48,[2,[],"ts"]]]]]]]],[[3238,17,3238,28,[12,[[],"ListType"],[[3238,26,3238,28,[11,"t_"]]]]],[3239,21,3239,38,[1,"<|",1,[3239,21,3239,29,[2,[],"ListType"]],[3239,33,3239,38,[0,[[3239,33,3239,35,[2,[],"go"]],[3239,36,3239,38,[2,[],"t_"]]]]]]]],[[3241,17,3241,50,[12,[[],"NamedType"],[[3241,27,3241,47,[7,[[3241,29,3241,39,[11,"moduleName"]],[3241,41,3241,45,[11,"name"]]]]],[3241,48,3241,50,[11,"ts"]]]]],[3242,21,3243,58,[1,"|>",0,[3242,21,3242,35,[0,[[3242,21,3242,29,[2,["List"],"map"]],[3242,30,3242,32,[2,[],"go"]],[3242,33,3242,35,[2,[],"ts"]]]]],[3243,28,3243,58,[0,[[3243,28,3243,37,[2,[],"NamedType"]],[3243,38,3243,58,[6,[[3243,40,3243,50,[2,[],"moduleName"]],[3243,52,3243,56,[2,[],"name"]]]]]]]]]]],[[3245,17,3245,29,[12,[[],"RecordType"],[[3245,28,3245,29,[11,"r"]]]]],[3246,21,3250,26,[0,[[3246,21,3246,31,[2,[],"RecordType"]],[3247,25,3250,26,[21,[3247,27,3247,28,"r"],[[3248,31,3249,29,[[3248,31,3248,38,"generic"],[3248,41,3248,63,[0,[[3248,41,3248,50,[2,["Maybe"],"map"]],[3248,51,3248,53,[2,[],"go"]],[3248,54,3248,63,[19,[3248,54,3248,55,[2,[],"r"]],[3248,56,3248,63,"generic"]]]]]]]],[3249,31,3250,25,[[3249,31,3249,37,"fields"],[3249,40,3249,78,[0,[[3249,40,3249,48,[2,["List"],"map"]],[3249,49,3249,69,[7,[3249,50,3249,68,[0,[[3249,50,3249,65,[2,["Tuple"],"mapSecond"]],[3249,66,3249,68,[2,[],"go"]]]]]]],[3249,70,3249,78,[19,[3249,70,3249,71,[2,[],"r"]],[3249,72,3249,78,"fields"]]]]]]]]]]]]]]],[[3252,17,3252,34,[12,[[],"TypeVar"],[[3252,25,3252,30,[11,"class"]],[3252,31,3252,34,[11,"var"]]]]],[3253,21,3253,50,[0,[[3253,21,3253,28,[2,[],"TypeVar"]],[3253,29,3253,34,[2,[],"class"]],[3253,35,3253,50,[7,[3253,36,3253,49,[1,"++",1,[3253,36,3253,42,[2,[],"prefix"]],[3253,46,3253,49,[2,[],"var"]]]]]]]]]],[[3255,17,3255,25,[12,[[],"UnitType"],[]]],[3256,21,3256,29,[2,[],"UnitType"]]]]]]]]]]]]],[3258,5,3258,44,[1,"<|",1,[3258,5,3258,21,[2,[],"DereferencedType"]],[3258,25,3258,44,[1,"<|",1,[3258,25,3258,27,[2,[],"go"]],[3258,31,3258,44,[0,[[3258,31,3258,38,[2,[],"getType"]],[3258,39,3258,44,[2,[],"type_"]]]]]]]]]]]]]]]]],[3261,1,3278,6,[1,[[1,[3261,1,3272,3,"{-| The project context.\n\n`aliases` stores all type aliases.\n\n`canonicalRecords` stores known aliased records.\n\n`constructors` are different than functions, as they (might) require type\nvars.\n\n`functionTypes` stores the types of all functions (for type inference).\n\n-}"]],[3273,12,3273,26,"ProjectContext"],[],[3274,5,3278,6,[4,[[3274,7,3274,69,[[3274,7,3274,14,"aliases"],[3274,17,3274,69,[1,[3274,17,3274,21,[[],"Dict"]],[[3274,22,3274,32,[1,[3274,22,3274,32,[[],"ModuleName"]],[]]],[3274,33,3274,69,[1,[3274,34,3274,38,[[],"Dict"]],[[3274,39,3274,45,[1,[3274,39,3274,45,[[],"String"]],[]]],[3274,46,3274,68,[1,[3274,46,3274,68,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]],[3275,7,3276,5,[[3275,7,3275,23,"canonicalRecords"],[3275,26,3275,67,[1,[3275,26,3275,30,[[],"Dict"]],[[3275,31,3275,41,[1,[3275,31,3275,41,[[],"ModuleName"]],[]]],[3275,42,3275,67,[1,[3275,43,3275,47,[[],"Dict"]],[[3275,48,3275,54,[1,[3275,48,3275,54,[[],"String"]],[]]],[3275,55,3275,66,[1,[3275,55,3275,66,[[],"KnownRecord"]],[]]]]]]]]]]],[3276,7,3277,5,[[3276,7,3276,19,"constructors"],[3276,22,3276,117,[1,[3276,22,3276,26,[[],"Dict"]],[[3276,27,3276,37,[1,[3276,27,3276,37,[[],"ModuleName"]],[]]],[3276,38,3276,117,[1,[3276,39,3276,43,[[],"Dict"]],[[3276,44,3276,50,[1,[3276,44,3276,50,[[],"String"]],[]]],[3276,51,3276,116,[4,[[3276,53,3276,82,[[3276,53,3276,67,"customTypeName"],[3276,70,3276,82,[1,[3276,70,3276,75,[[],"Maybe"]],[[3276,76,3276,82,[1,[3276,76,3276,82,[[],"String"]],[]]]]]]]],[3276,84,3276,115,[[3276,84,3276,89,"type_"],[3276,92,3276,114,[1,[3276,92,3276,114,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]]]],[3277,7,3278,5,[[3277,7,3277,20,"functionTypes"],[3277,23,3277,57,[1,[3277,23,3277,27,[[],"Dict"]],[[3277,28,3277,38,[1,[3277,28,3277,38,[[],"ModuleName"]],[]]],[3277,39,3277,57,[1,[3277,40,3277,44,[[],"Dict"]],[[3277,45,3277,51,[1,[3277,45,3277,51,[[],"String"]],[]]],[3277,52,3277,56,[1,[3277,52,3277,56,[[],"Type"]],[]]]]]]]]]]]]]]]]],[3281,1,3319,13,[0,[[1,[3281,1,3283,3,"{-| Given an error range and whether or not a record has all fields of the known\ntype, convert a `RecordDefinition` into a checkable record.\n-}"]],[1,[3284,1,3284,117,[[3284,1,3284,21,"recordDefToCheckable"],[3284,24,3284,117,[6,[3284,24,3284,37,[1,[3284,24,3284,37,[[],"ModuleContext"]],[]]],[3284,41,3284,117,[6,[3284,41,3284,46,[1,[3284,41,3284,46,[[],"Range"]],[]]],[3284,50,3284,117,[6,[3284,50,3284,54,[1,[3284,50,3284,54,[[],"Bool"]],[]]],[3284,58,3284,117,[6,[3284,58,3284,80,[1,[3284,58,3284,63,[[],"Maybe"]],[[3284,64,3284,80,[1,[3284,64,3284,80,[[],"DereferencedType"]],[]]]]]],[3284,84,3284,117,[6,[3284,84,3284,100,[1,[3284,84,3284,100,[[],"RecordDefinition"]],[]]],[3284,104,3284,117,[1,[3284,104,3284,117,[[],"RecordToCheck"]],[]]]]]]]]]]]]]]]],[3285,1,3319,13,[[3285,1,3285,21,"recordDefToCheckable"],[[3285,22,3285,29,[11,"context"]],[3285,30,3285,39,[11,"fullRange"]],[3285,40,3285,52,[11,"hasAllFields"]],[3285,53,3285,70,[11,"hasTypeFromParent"]],[3285,71,3285,77,[11,"fields"]]],[3286,5,3319,13,[16,[[[3287,9,3291,24,[0,[[0],[1,[3287,9,3287,65,[[3287,9,3287,17,"makeType"],[3287,20,3287,65,[6,[3287,20,3287,39,[1,[3287,20,3287,24,[[],"Node"]],[[3287,25,3287,39,[1,[3287,25,3287,39,[[],"TypeAnnotation"]],[]]]]]],[3287,43,3287,65,[1,[3287,43,3287,48,[[],"Maybe"]],[[3287,49,3287,65,[1,[3287,49,3287,65,[[],"DereferencedType"]],[]]]]]]]]]]],[3288,9,3291,24,[[3288,9,3288,17,"makeType"],[],[3289,13,3291,24,[1,">>",1,[3289,13,3289,48,[0,[[3289,13,3289,40,[2,[],"typeAnnotToNoncanonicalType"]],[3289,41,3289,48,[2,[],"context"]]]]],[3290,20,3291,24,[1,">>",1,[3290,20,3290,43,[0,[[3290,20,3290,35,[2,[],"dereferenceType"]],[3290,36,3290,43,[2,[],"context"]]]]],[3291,20,3291,24,[2,[],"Just"]]]]]]]]]]],[3293,9,3303,22,[0,[[0],[1,[3293,9,3293,36,[[3293,9,3293,18,"orderInfo"],[3293,21,3293,36,[1,[3293,21,3293,26,[[],"Maybe"]],[[3293,27,3293,36,[1,[3293,27,3293,36,[[],"OrderInfo"]],[]]]]]]]]],[3294,9,3303,22,[[3294,9,3294,18,"orderInfo"],[],[3295,13,3303,22,[1,"|>",0,[3295,13,3296,43,[1,"|>",0,[3295,13,3295,79,[0,[[3295,13,3295,26,[2,["Maybe"],"andThen"]],[3295,27,3295,61,[7,[3295,28,3295,60,[1,"<<",0,[3295,28,3295,42,[2,["Result"],"toMaybe"]],[3295,46,3295,60,[2,[],"makeFieldOrder"]]]]]],[3295,62,3295,79,[2,[],"hasTypeFromParent"]]]]],[3296,20,3296,43,[0,[[3296,20,3296,29,[2,["Maybe"],"map"]],[3296,30,3296,43,[2,[],"HasFieldOrder"]]]]]]],[3297,20,3303,22,[0,[[3297,20,3297,33,[2,["MaybeX"],"orElse"]],[3298,21,3303,22,[7,[3298,22,3302,32,[11,[3298,25,3298,37,[2,[],"hasAllFields"]],[3299,25,3299,42,[0,[[3299,25,3299,29,[2,[],"Just"]],[3299,30,3299,42,[2,[],"HasAllFields"]]]]],[3302,25,3302,32,[2,[],"Nothing"]]]]]]]]]]]]]]]]],[3305,5,3319,13,[1,"|>",0,[3305,5,3313,15,[0,[[3305,5,3305,13,[2,["List"],"map"]],[3306,9,3312,10,[7,[3306,10,3311,87,[18,[[[3306,11,3306,12,[11,"f"]]],[3307,13,3311,87,[16,[[[3308,17,3309,33,[1,[3308,17,3308,33,[7,[[3308,19,3308,24,[11,"field"]],[3308,26,3308,31,[11,"type_"]]]]],[3309,21,3309,33,[0,[[3309,21,3309,31,[2,["Node"],"value"]],[3309,32,3309,33,[2,[],"f"]]]]]]]],[3311,13,3311,87,[8,[[3311,15,3311,39,[[3311,15,3311,20,"field"],[3311,23,3311,39,[0,[[3311,23,3311,33,[2,["Node"],"value"]],[3311,34,3311,39,[2,[],"field"]]]]]]],[3311,41,3311,63,[[3311,41,3311,46,"type_"],[3311,49,3311,63,[0,[[3311,49,3311,57,[2,[],"makeType"]],[3311,58,3311,63,[2,[],"type_"]]]]]]],[3311,65,3311,86,[[3311,65,3311,70,"range"],[3311,73,3311,85,[0,[[3311,73,3311,83,[2,["Node"],"range"]],[3311,84,3311,85,[2,[],"f"]]]]]]]]]]]]]]]]]],[3313,9,3313,15,[2,[],"fields"]]]]],[3314,12,3319,13,[7,[3314,13,3318,18,[18,[[[3314,14,3314,16,[11,"fs"]]],[3315,17,3318,18,[8,[[3315,19,3315,40,[[3315,19,3315,28,"fullRange"],[3315,31,3315,40,[2,[],"fullRange"]]]],[3316,19,3317,17,[[3316,19,3316,28,"orderInfo"],[3316,31,3316,40,[2,[],"orderInfo"]]]],[3317,19,3318,17,[[3317,19,3317,25,"fields"],[3317,28,3317,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[3322,1,3349,13,[0,[[1,[3322,1,3324,3,"{-| Given an error range and maybe a type, convert a record pattern to a\ncheckable record.\n-}"]],[1,[3325,1,3325,98,[[3325,1,3325,25,"recordPatternToCheckable"],[3325,28,3325,98,[6,[3325,28,3325,33,[1,[3325,28,3325,33,[[],"Range"]],[]]],[3325,37,3325,98,[6,[3325,37,3325,59,[1,[3325,37,3325,42,[[],"Maybe"]],[[3325,43,3325,59,[1,[3325,43,3325,59,[[],"DereferencedType"]],[]]]]]],[3325,63,3325,98,[6,[3325,63,3325,81,[1,[3325,63,3325,67,[[],"List"]],[[3325,68,3325,81,[1,[3325,69,3325,73,[[],"Node"]],[[3325,74,3325,80,[1,[3325,74,3325,80,[[],"String"]],[]]]]]]]]],[3325,85,3325,98,[1,[3325,85,3325,98,[[],"RecordToCheck"]],[]]]]]]]]]]]],[3326,1,3349,13,[[3326,1,3326,25,"recordPatternToCheckable"],[[3326,26,3326,35,[11,"fullRange"]],[3326,36,3326,43,[11,"hasType"]]],[3327,5,3349,13,[16,[[[3328,9,3331,43,[0,[[0],[1,[3328,9,3328,36,[[3328,9,3328,18,"orderInfo"],[3328,21,3328,36,[1,[3328,21,3328,26,[[],"Maybe"]],[[3328,27,3328,36,[1,[3328,27,3328,36,[[],"OrderInfo"]],[]]]]]]]]],[3329,9,3331,43,[[3329,9,3329,18,"orderInfo"],[],[3330,13,3331,43,[1,"|>",0,[3330,13,3330,69,[0,[[3330,13,3330,26,[2,["Maybe"],"andThen"]],[3330,27,3330,61,[7,[3330,28,3330,60,[1,"<<",0,[3330,28,3330,42,[2,["Result"],"toMaybe"]],[3330,46,3330,60,[2,[],"makeFieldOrder"]]]]]],[3330,62,3330,69,[2,[],"hasType"]]]]],[3331,20,3331,43,[0,[[3331,20,3331,29,[2,["Maybe"],"map"]],[3331,30,3331,43,[2,[],"HasFieldOrder"]]]]]]]]]]]],[3333,9,3335,40,[0,[[0],[1,[3333,9,3333,45,[[3333,9,3333,14,"types"],[3333,17,3333,45,[1,[3333,17,3333,21,[[],"Dict"]],[[3333,22,3333,28,[1,[3333,22,3333,28,[[],"String"]],[]]],[3333,29,3333,45,[1,[3333,29,3333,45,[[],"DereferencedType"]],[]]]]]]]]],[3334,9,3335,40,[[3334,9,3334,14,"types"],[],[3335,13,3335,40,[0,[[3335,13,3335,32,[2,[],"getRecordFieldTypes"]],[3335,33,3335,40,[2,[],"hasType"]]]]]]]]]]],[3337,5,3349,13,[1,">>",1,[3337,5,3343,10,[0,[[3337,5,3337,13,[2,["List"],"map"]],[3338,9,3343,10,[7,[3338,10,3342,14,[18,[[[3338,11,3338,12,[11,"r"]]],[3339,13,3342,14,[8,[[3339,15,3339,35,[[3339,15,3339,20,"field"],[3339,23,3339,35,[0,[[3339,23,3339,33,[2,["Node"],"value"]],[3339,34,3339,35,[2,[],"r"]]]]]]],[3340,15,3341,13,[[3340,15,3340,20,"type_"],[3340,23,3340,52,[0,[[3340,23,3340,31,[2,["Dict"],"get"]],[3340,32,3340,46,[7,[3340,33,3340,45,[0,[[3340,33,3340,43,[2,["Node"],"value"]],[3340,44,3340,45,[2,[],"r"]]]]]]],[3340,47,3340,52,[2,[],"types"]]]]]]],[3341,15,3342,13,[[3341,15,3341,20,"range"],[3341,23,3341,35,[0,[[3341,23,3341,33,[2,["Node"],"range"]],[3341,34,3341,35,[2,[],"r"]]]]]]]]]]]]]]]]]],[3344,12,3349,13,[7,[3344,13,3348,18,[18,[[[3344,14,3344,16,[11,"fs"]]],[3345,17,3348,18,[8,[[3345,19,3345,40,[[3345,19,3345,28,"fullRange"],[3345,31,3345,40,[2,[],"fullRange"]]]],[3346,19,3347,17,[[3346,19,3346,28,"orderInfo"],[3346,31,3346,40,[2,[],"orderInfo"]]]],[3347,19,3348,17,[[3347,19,3347,25,"fields"],[3347,28,3347,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[3352,1,3395,13,[0,[[1,[3352,1,3354,3,"{-| Given an error range, whether or not a record has all fields of the known\ntype, and maybe a type, convert a list of record setters to a checkable record.\n-}"]],[1,[3355,1,3355,128,[[3355,1,3355,25,"recordSettersToCheckable"],[3355,28,3355,128,[6,[3355,28,3355,40,[1,[3355,28,3355,40,[[],"LocalContext"]],[]]],[3355,44,3355,128,[6,[3355,44,3355,49,[1,[3355,44,3355,49,[[],"Range"]],[]]],[3355,53,3355,128,[6,[3355,53,3355,57,[1,[3355,53,3355,57,[[],"Bool"]],[]]],[3355,61,3355,128,[6,[3355,61,3355,83,[1,[3355,61,3355,66,[[],"Maybe"]],[[3355,67,3355,83,[1,[3355,67,3355,83,[[],"DereferencedType"]],[]]]]]],[3355,87,3355,128,[6,[3355,87,3355,111,[1,[3355,87,3355,91,[[],"List"]],[[3355,92,3355,111,[1,[3355,93,3355,97,[[],"Node"]],[[3355,98,3355,110,[1,[3355,98,3355,110,[[],"RecordSetter"]],[]]]]]]]]],[3355,115,3355,128,[1,[3355,115,3355,128,[[],"RecordToCheck"]],[]]]]]]]]]]]]]]]],[3356,1,3395,13,[[3356,1,3356,25,"recordSettersToCheckable"],[[3356,26,3356,33,[11,"context"]],[3356,34,3356,43,[11,"fullRange"]],[3356,44,3356,56,[11,"hasAllFields"]],[3356,57,3356,64,[11,"hasType"]]],[3357,5,3395,13,[16,[[[3358,9,3364,24,[0,[[0],[1,[3358,9,3358,35,[[3358,9,3358,17,"fallback"],[3358,20,3358,35,[1,[3358,20,3358,25,[[],"Maybe"]],[[3358,26,3358,35,[1,[3358,26,3358,35,[[],"OrderInfo"]],[]]]]]]]]],[3359,9,3364,24,[[3359,9,3359,17,"fallback"],[],[3360,13,3364,24,[11,[3360,16,3360,28,[2,[],"hasAllFields"]],[3361,17,3361,34,[0,[[3361,17,3361,21,[2,[],"Just"]],[3361,22,3361,34,[2,[],"HasAllFields"]]]]],[3364,17,3364,24,[2,[],"Nothing"]]]]]]]]],[3366,9,3370,42,[0,[[0],[1,[3366,9,3366,36,[[3366,9,3366,18,"orderInfo"],[3366,21,3366,36,[1,[3366,21,3366,26,[[],"Maybe"]],[[3366,27,3366,36,[1,[3366,27,3366,36,[[],"OrderInfo"]],[]]]]]]]]],[3367,9,3370,42,[[3367,9,3367,18,"orderInfo"],[],[3368,13,3370,42,[1,"|>",0,[3368,13,3369,43,[1,"|>",0,[3368,13,3368,69,[0,[[3368,13,3368,26,[2,["Maybe"],"andThen"]],[3368,27,3368,61,[7,[3368,28,3368,60,[1,"<<",0,[3368,28,3368,42,[2,["Result"],"toMaybe"]],[3368,46,3368,60,[2,[],"makeFieldOrder"]]]]]],[3368,62,3368,69,[2,[],"hasType"]]]]],[3369,20,3369,43,[0,[[3369,20,3369,29,[2,["Maybe"],"map"]],[3369,30,3369,43,[2,[],"HasFieldOrder"]]]]]]],[3370,20,3370,42,[0,[[3370,20,3370,33,[2,["MaybeX"],"orElse"]],[3370,34,3370,42,[2,[],"fallback"]]]]]]]]]]]],[3372,9,3374,40,[0,[[0],[1,[3372,9,3372,45,[[3372,9,3372,14,"types"],[3372,17,3372,45,[1,[3372,17,3372,21,[[],"Dict"]],[[3372,22,3372,28,[1,[3372,22,3372,28,[[],"String"]],[]]],[3372,29,3372,45,[1,[3372,29,3372,45,[[],"DereferencedType"]],[]]]]]]]]],[3373,9,3374,40,[[3373,9,3373,14,"types"],[],[3374,13,3374,40,[0,[[3374,13,3374,32,[2,[],"getRecordFieldTypes"]],[3374,33,3374,40,[2,[],"hasType"]]]]]]]]]]],[3376,5,3395,13,[1,">>",1,[3376,5,3389,10,[0,[[3376,5,3376,13,[2,["List"],"map"]],[3377,9,3389,10,[7,[3377,10,3388,14,[18,[[[3377,11,3377,12,[11,"r"]]],[3378,13,3388,14,[16,[[[3379,17,3381,62,[0,[[0],[1,[3379,17,3379,27,[[3379,17,3379,18,"f"],[3379,21,3379,27,[1,[3379,21,3379,27,[[],"String"]],[]]]]]],[3380,17,3381,62,[[3380,17,3380,18,"f"],[],[3381,21,3381,62,[1,"<|",1,[3381,21,3381,31,[2,["Node"],"value"]],[3381,35,3381,62,[1,"<|",1,[3381,35,3381,46,[2,["Tuple"],"first"]],[3381,50,3381,62,[0,[[3381,50,3381,60,[2,["Node"],"value"]],[3381,61,3381,62,[2,[],"r"]]]]]]]]]]]]]]],[3383,13,3388,14,[8,[[3383,15,3383,24,[[3383,15,3383,20,"field"],[3383,23,3383,24,[2,[],"f"]]]],[3384,15,3387,13,[[3384,15,3384,20,"type_"],[3385,17,3386,104,[1,"|>",0,[3385,17,3385,33,[0,[[3385,17,3385,25,[2,["Dict"],"get"]],[3385,26,3385,27,[2,[],"f"]],[3385,28,3385,33,[2,[],"types"]]]]],[3386,24,3386,104,[0,[[3386,24,3386,41,[2,["MaybeX"],"orElseLazy"]],[3386,42,3386,104,[7,[3386,43,3386,103,[18,[[[3386,44,3386,46,[1]]],[3386,50,3386,103,[1,"<|",1,[3386,50,3386,71,[0,[[3386,50,3386,63,[2,[],"inferExprType"]],[3386,64,3386,71,[2,[],"context"]]]]],[3386,75,3386,103,[1,"<|",1,[3386,75,3386,87,[2,["Tuple"],"second"]],[3386,91,3386,103,[0,[[3386,91,3386,101,[2,["Node"],"value"]],[3386,102,3386,103,[2,[],"r"]]]]]]]]]]]]]]]]]]]]],[3387,15,3388,13,[[3387,15,3387,20,"range"],[3387,23,3387,35,[0,[[3387,23,3387,33,[2,["Node"],"range"]],[3387,34,3387,35,[2,[],"r"]]]]]]]]]]]]]]]]]]]]],[3390,12,3395,13,[7,[3390,13,3394,18,[18,[[[3390,14,3390,16,[11,"fs"]]],[3391,17,3394,18,[8,[[3391,19,3391,40,[[3391,19,3391,28,"fullRange"],[3391,31,3391,40,[2,[],"fullRange"]]]],[3392,19,3393,17,[[3392,19,3392,28,"orderInfo"],[3392,31,3392,40,[2,[],"orderInfo"]]]],[3393,19,3394,17,[[3393,19,3393,25,"fields"],[3393,28,3393,30,[2,[],"fs"]]]]]]]]]]]]]]]]]]]]]],[3398,1,3405,6,[1,[[1,[3398,1,3400,3,"{-| A record type, expression, or pattern, packaged in a standardized format for\nchecking.\n-}"]],[3401,12,3401,25,"RecordToCheck"],[],[3402,5,3405,6,[4,[[3402,7,3402,24,[[3402,7,3402,16,"fullRange"],[3402,19,3402,24,[1,[3402,19,3402,24,[[],"Range"]],[]]]]],[3403,7,3404,5,[[3403,7,3403,16,"orderInfo"],[3403,19,3403,34,[1,[3403,19,3403,24,[[],"Maybe"]],[[3403,25,3403,34,[1,[3403,25,3403,34,[[],"OrderInfo"]],[]]]]]]]],[3404,7,3405,5,[[3404,7,3404,13,"fields"],[3404,16,3404,26,[1,[3404,16,3404,20,[[],"List"]],[[3404,21,3404,26,[1,[3404,21,3404,26,[[],"Field"]],[]]]]]]]]]]]]]],[3408,1,3491,13,[0,[[1,[3408,1,3410,3,"{-| Given context and a predicate to filter valid records, find a list of\nrecords that match a list of fields.\n-}"]],[1,[3411,1,3411,81,[[3411,1,3411,13,"searchOrders"],[3411,16,3411,81,[6,[3411,16,3411,26,[1,[3411,16,3411,26,[[],"RuleConfig"]],[]]],[3411,30,3411,81,[6,[3411,30,3411,43,[1,[3411,30,3411,43,[[],"ModuleContext"]],[]]],[3411,47,3411,81,[6,[3411,47,3411,51,[1,[3411,47,3411,51,[[],"Bool"]],[]]],[3411,55,3411,81,[6,[3411,55,3411,65,[1,[3411,55,3411,59,[[],"List"]],[[3411,60,3411,65,[1,[3411,60,3411,65,[[],"Field"]],[]]]]]],[3411,69,3411,81,[1,[3411,69,3411,81,[[],"OrderMatches"]],[]]]]]]]]]]]]]],[3412,1,3491,13,[[3412,1,3412,13,"searchOrders"],[[3412,14,3412,58,[14,[3412,15,3412,57,[12,[[],"RuleConfig"],[[3412,26,3412,57,[8,[[3412,28,3412,55,"typecheckUnambiguousRecords"]]]]]]]]],[3412,59,3412,66,[11,"context"]],[3412,67,3412,79,[11,"hasAllFields"]],[3412,80,3412,86,[11,"fields"]]],[3413,5,3491,13,[16,[[[3414,9,3435,32,[0,[[0],[1,[3414,9,3414,41,[[3414,9,3414,19,"checkTypes"],[3414,22,3414,41,[6,[3414,22,3414,33,[1,[3414,22,3414,33,[[],"KnownRecord"]],[]]],[3414,37,3414,41,[1,[3414,37,3414,41,[[],"Bool"]],[]]]]]]]],[3415,9,3435,32,[[3415,9,3415,19,"checkTypes"],[[3415,20,3415,29,[8,[[3415,22,3415,27,"order"]]]]],[3416,13,3435,32,[1,"|>",0,[3416,13,3434,23,[0,[[3416,13,3416,23,[2,["List"],"foldl"]],[3417,17,3432,18,[7,[3417,18,3431,59,[18,[[[3417,19,3417,35,[8,[[3417,21,3417,26,"field"],[3417,28,3417,33,"type_"]]]],[3417,36,3417,56,[7,[[3417,38,3417,44,[11,"varAcc"]],[3417,46,3417,54,[11,"matchAcc"]]]]]],[3418,21,3431,59,[16,[[[3419,25,3424,71,[0,[[0],[1,[3419,25,3419,65,[[3419,25,3419,37,"assignedVars"],[3419,40,3419,65,[1,[3419,40,3419,44,[[],"Dict"]],[[3419,45,3419,60,[3,[[3419,47,3419,50,[1,[3419,47,3419,50,[[],"Int"]],[]]],[3419,52,3419,58,[1,[3419,52,3419,58,[[],"String"]],[]]]]]],[3419,61,3419,65,[1,[3419,61,3419,65,[[],"Type"]],[]]]]]]]]],[3420,25,3424,71,[[3420,25,3420,37,"assignedVars"],[],[3424,29,3424,71,[0,[[3424,29,3424,40,[2,["Dict"],"filter"]],[3424,41,3424,64,[7,[3424,42,3424,63,[18,[[[3424,43,3424,51,[7,[[3424,45,3424,46,[11,"i"]],[3424,48,3424,49,[0]]]]],[3424,52,3424,53,[0]]],[3424,57,3424,63,[1,"==",2,[3424,57,3424,58,[2,[],"i"]],[3424,62,3424,63,[3,2]]]]]]]]],[3424,65,3424,71,[2,[],"varAcc"]]]]]]]]]]],[3426,21,3431,59,[1,"|>",0,[3426,21,3430,68,[1,"|>",0,[3426,21,3428,70,[1,"|>",0,[3426,21,3427,79,[1,"|>",0,[3426,21,3426,41,[0,[[3426,21,3426,29,[2,["Dict"],"get"]],[3426,30,3426,35,[2,[],"field"]],[3426,36,3426,41,[2,[],"order"]]]]],[3427,28,3427,79,[0,[[3427,28,3427,37,[2,["Maybe"],"map"]],[3427,38,3427,79,[7,[3427,39,3427,78,[1,"<<",0,[3427,39,3427,62,[0,[[3427,39,3427,54,[2,[],"dereferenceType"]],[3427,55,3427,62,[2,[],"context"]]]]],[3427,66,3427,78,[2,["Tuple"],"second"]]]]]]]]]]],[3428,28,3428,70,[0,[[3428,28,3428,38,[2,["Maybe"],"map2"]],[3428,39,3428,64,[7,[3428,40,3428,63,[0,[[3428,40,3428,50,[2,[],"typesMatch"]],[3428,51,3428,63,[2,[],"assignedVars"]]]]]]],[3428,65,3428,70,[2,[],"type_"]]]]]]],[3430,28,3430,68,[0,[[3430,28,3430,45,[2,["Maybe"],"withDefault"]],[3430,46,3430,68,[6,[[3430,48,3430,60,[2,[],"assignedVars"]],[3430,62,3430,66,[2,[],"True"]]]]]]]]]],[3431,28,3431,59,[0,[[3431,28,3431,43,[2,["Tuple"],"mapSecond"]],[3431,44,3431,59,[7,[3431,45,3431,58,[0,[[3431,45,3431,49,[12,"&&"]],[3431,50,3431,58,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]]],[3433,17,3433,37,[6,[[3433,19,3433,29,[2,["Dict"],"empty"]],[3433,31,3433,35,[2,[],"True"]]]]],[3434,17,3434,23,[2,[],"fields"]]]]],[3435,20,3435,32,[2,["Tuple"],"second"]]]]]]]]],[3437,9,3440,33,[0,[[0],[1,[3437,9,3437,40,[[3437,9,3437,20,"matchFields"],[3437,23,3437,40,[1,[3437,23,3437,27,[[],"Dict"]],[[3437,28,3437,34,[1,[3437,28,3437,34,[[],"String"]],[]]],[3437,35,3437,40,[1,[3437,35,3437,40,[[],"Field"]],[]]]]]]]]],[3438,9,3440,33,[[3438,9,3438,20,"matchFields"],[],[3439,13,3440,33,[1,"|>",0,[3439,13,3439,51,[0,[[3439,13,3439,21,[2,["List"],"map"]],[3439,22,3439,44,[7,[3439,23,3439,43,[18,[[[3439,24,3439,25,[11,"f"]]],[3439,29,3439,43,[6,[[3439,31,3439,38,[19,[3439,31,3439,32,[2,[],"f"]],[3439,33,3439,38,"field"]]],[3439,40,3439,41,[2,[],"f"]]]]]]]]]],[3439,45,3439,51,[2,[],"fields"]]]]],[3440,20,3440,33,[2,["Dict"],"fromList"]]]]]]]]],[3442,9,3448,36,[0,[[0],[1,[3442,9,3442,47,[[3442,9,3442,26,"missingFieldLimit"],[3442,29,3442,47,[6,[3442,29,3442,40,[1,[3442,29,3442,40,[[],"KnownRecord"]],[]]],[3442,44,3442,47,[1,[3442,44,3442,47,[[],"Int"]],[]]]]]]]],[3443,9,3448,36,[[3443,9,3443,26,"missingFieldLimit"],[],[3444,13,3448,36,[11,[3444,16,3444,28,[2,[],"hasAllFields"]],[3445,17,3445,25,[0,[[3445,17,3445,23,[2,[],"always"]],[3445,24,3445,25,[3,1]]]]],[3448,17,3448,36,[1,"<<",0,[3448,17,3448,26,[2,["Dict"],"size"]],[3448,30,3448,36,[20,".order"]]]]]]]]]]],[3450,9,3471,20,[0,[[0],[1,[3450,9,3450,83,[[3450,9,3450,13,"step"],[3450,16,3450,83,[6,[3450,16,3450,26,[1,[3450,16,3450,26,[[],"ModuleName"]],[]]],[3450,30,3450,83,[6,[3450,30,3450,36,[1,[3450,30,3450,36,[[],"String"]],[]]],[3450,40,3450,83,[6,[3450,40,3450,51,[1,[3450,40,3450,51,[[],"KnownRecord"]],[]]],[3450,55,3450,83,[6,[3450,55,3450,67,[1,[3450,55,3450,67,[[],"OrderMatches"]],[]]],[3450,71,3450,83,[1,[3450,71,3450,83,[[],"OrderMatches"]],[]]]]]]]]]]]]]],[3451,9,3471,20,[[3451,9,3451,13,"step"],[[3451,14,3451,24,[11,"moduleName"]],[3451,25,3451,29,[11,"name"]],[3451,30,3451,31,[11,"o"]],[3451,32,3451,35,[11,"acc"]]],[3452,13,3471,20,[11,[3452,16,3452,80,[1,">=",2,[3452,16,3452,57,[0,[[3452,16,3452,25,[2,["Dict"],"size"]],[3452,26,3452,57,[7,[3452,27,3452,56,[0,[[3452,27,3452,36,[2,["Dict"],"diff"]],[3452,37,3452,44,[19,[3452,37,3452,38,[2,[],"o"]],[3452,39,3452,44,"order"]]],[3452,45,3452,56,[2,[],"matchFields"]]]]]]]]]],[3452,61,3452,80,[0,[[3452,61,3452,78,[2,[],"missingFieldLimit"]],[3452,79,3452,80,[2,[],"o"]]]]]]],[3454,17,3454,20,[2,[],"acc"]],[3456,18,3471,20,[11,[3456,21,3456,32,[19,[3456,21,3456,22,[2,[],"o"]],[3456,23,3456,32,"isGeneric"]]],[3457,17,3463,18,[21,[3457,19,3457,22,"acc"],[[3458,23,3463,17,[[3458,23,3458,37,"genericMatches"],[3459,25,3462,50,[1,"::",1,[3459,25,3461,26,[8,[[3459,27,3459,62,[[3459,27,3459,32,"type_"],[3459,35,3459,62,[6,[[3459,37,3459,57,[6,[[3459,39,3459,49,[2,[],"moduleName"]],[3459,51,3459,55,[2,[],"name"]]]]],[3459,59,3459,60,[2,[],"o"]]]]]]],[3460,27,3461,25,[[3460,27,3460,34,"missing"],[3460,37,3460,81,[1,"<|",1,[3460,37,3460,48,[2,["Dict"],"values"]],[3460,52,3460,81,[0,[[3460,52,3460,61,[2,["Dict"],"diff"]],[3460,62,3460,73,[2,[],"matchFields"]],[3460,74,3460,81,[19,[3460,74,3460,75,[2,[],"o"]],[3460,76,3460,81,"order"]]]]]]]]]]]]],[3462,32,3462,50,[19,[3462,32,3462,35,[2,[],"acc"]],[3462,36,3462,50,"genericMatches"]]]]]]]]]],[3465,18,3471,20,[11,[3465,21,3465,66,[1,"<|",1,[3465,21,3465,33,[2,["Dict"],"isEmpty"]],[3465,37,3465,66,[0,[[3465,37,3465,46,[2,["Dict"],"diff"]],[3465,47,3465,58,[2,[],"matchFields"]],[3465,59,3465,66,[19,[3465,59,3465,60,[2,[],"o"]],[3465,61,3465,66,"order"]]]]]]]],[3467,17,3467,97,[21,[3467,19,3467,22,"acc"],[[3467,25,3467,96,[[3467,25,3467,41,"canonicalMatches"],[3467,44,3467,95,[1,"::",1,[3467,44,3467,71,[6,[[3467,46,3467,66,[6,[[3467,48,3467,58,[2,[],"moduleName"]],[3467,60,3467,64,[2,[],"name"]]]]],[3467,68,3467,69,[2,[],"o"]]]]],[3467,75,3467,95,[19,[3467,75,3467,78,[2,[],"acc"]],[3467,79,3467,95,"canonicalMatches"]]]]]]]]]],[3471,17,3471,20,[2,[],"acc"]]]]]]]]]]]]]],[3473,5,3491,13,[1,"|>",0,[3473,5,3481,33,[0,[[3473,5,3473,15,[2,["Dict"],"foldl"]],[3474,9,3479,10,[7,[3474,10,3478,28,[18,[[[3474,11,3474,21,[11,"moduleName"]],[3474,22,3474,33,[11,"moduleTypes"]],[3474,34,3474,42,[11,"outerAcc"]]],[3475,13,3478,28,[0,[[3475,13,3475,23,[2,["Dict"],"foldl"]],[3476,17,3476,34,[7,[3476,18,3476,33,[0,[[3476,18,3476,22,[2,[],"step"]],[3476,23,3476,33,[2,[],"moduleName"]]]]]]],[3477,17,3477,25,[2,[],"outerAcc"]],[3478,17,3478,28,[2,[],"moduleTypes"]]]]]]]]]],[3480,9,3480,55,[8,[[3480,11,3480,32,[[3480,11,3480,27,"canonicalMatches"],[3480,30,3480,32,[9,[]]]]],[3480,34,3480,54,[[3480,34,3480,48,"genericMatches"],[3480,51,3480,53,[9,[]]]]]]]],[3481,9,3481,33,[19,[3481,9,3481,16,[2,[],"context"]],[3481,17,3481,33,"canonicalRecords"]]]]]],[3482,12,3491,13,[7,[3482,13,3490,24,[18,[[[3482,14,3482,59,[14,[3482,15,3482,58,[13,[3482,15,3482,51,[8,[[3482,17,3482,33,"canonicalMatches"],[3482,35,3482,49,"genericMatches"]]]],[3482,55,3482,58,"res"]]]]]],[3483,17,3490,24,[11,[3483,20,3483,112,[1,"||",1,[3483,20,3483,47,[2,[],"typecheckUnambiguousRecords"]],[3483,51,3483,112,[1,">",2,[3483,51,3483,108,[1,"+",0,[3483,51,3483,79,[0,[[3483,51,3483,62,[2,["List"],"length"]],[3483,63,3483,79,[2,[],"canonicalMatches"]]]]],[3483,82,3483,108,[0,[[3483,82,3483,93,[2,["List"],"length"]],[3483,94,3483,108,[2,[],"genericMatches"]]]]]]],[3483,111,3483,112,[3,1]]]]]],[3485,21,3487,22,[8,[[3485,23,3485,99,[[3485,23,3485,39,"canonicalMatches"],[3485,42,3485,99,[0,[[3485,42,3485,53,[2,["List"],"filter"]],[3485,54,3485,82,[7,[3485,55,3485,81,[1,"<<",0,[3485,55,3485,65,[2,[],"checkTypes"]],[3485,69,3485,81,[2,["Tuple"],"second"]]]]]],[3485,83,3485,99,[2,[],"canonicalMatches"]]]]]]],[3486,23,3487,21,[[3486,23,3486,37,"genericMatches"],[3486,40,3486,105,[0,[[3486,40,3486,51,[2,["List"],"filter"]],[3486,52,3486,90,[7,[3486,53,3486,89,[1,"<<",0,[3486,53,3486,79,[1,"<<",0,[3486,53,3486,63,[2,[],"checkTypes"]],[3486,67,3486,79,[2,["Tuple"],"second"]]]],[3486,83,3486,89,[20,".type_"]]]]]],[3486,91,3486,105,[2,[],"genericMatches"]]]]]]]]]],[3490,21,3490,24,[2,[],"res"]]]]]]]]]]]]]]]]]]],[3494,1,3498,24,[2,[[1,[3494,1,3495,3,"{-| Specify how to handle generic records.\n-}"]],[3496,6,3496,18,"SortGenerics"],[],[[3497,7,3497,25,[[3497,7,3497,25,"GenericFieldsFirst"],[]]],[3498,7,3498,24,[[3498,7,3498,24,"GenericFieldsLast"],[]]]]]]],[3501,1,3506,16,[2,[[1,[3501,1,3502,3,"{-| Specify how to handle records without a canonical order.\n-}"]],[3503,6,3503,31,"SortWithoutCanonicalOrder"],[],[[3504,7,3504,21,[[3504,7,3504,21,"Alphabetically"],[]]],[3505,7,3505,17,[[3505,7,3505,17,"ReportOnly"],[]]],[3506,7,3506,16,[[3506,7,3506,16,"DoNotSort"],[]]]]]]],[3509,1,3526,22,[2,[[1,[3509,1,3521,3,"{-| Specify how to deal with subrecords.\n\n  - `CanonicalWhenSubrecord` -- Subrecords have canonical order only when they\n    are part of their larger record/constructor.\n  - `CustomTypeArgsAlwaysCanonical` -- Arguments of custom types are always\n    canonical, but other subrecords are only canonical in place. This was the\n    behavior prior to 1.1.0.\n  - `AlwaysUnknown` -- Always consider subrecords unknown records (unless of\n    course they match something else).\n  - `AlwaysCanonical` -- Check for standalone subrecords as a lower-priority\n    \"known\" record.\n\n-}"]],[3522,6,3522,25,"SubrecordCanonicity"],[],[[3523,7,3523,29,[[3523,7,3523,29,"CanonicalWhenSubrecord"],[]]],[3524,7,3524,36,[[3524,7,3524,36,"CustomTypeArgsAlwaysCanonical"],[]]],[3525,7,3525,20,[[3525,7,3525,20,"AlwaysUnknown"],[]]],[3526,7,3526,22,[[3526,7,3526,22,"AlwaysCanonical"],[]]]]]]],[3529,1,3545,22,[0,[[1,[3529,1,3531,3,"{-| Return whether or not subrecords should be considered canonical, for\ncreating the type of a field or argument.\n-}"]],[1,[3532,1,3532,64,[[3532,1,3532,28,"subrecordCanonicityForField"],[3532,31,3532,64,[6,[3532,31,3532,50,[1,[3532,31,3532,50,[[],"SubrecordCanonicity"]],[]]],[3532,54,3532,64,[1,[3532,54,3532,59,[[],"Maybe"]],[[3532,60,3532,64,[1,[3532,60,3532,64,[[],"Bool"]],[]]]]]]]]]]],[3533,1,3545,22,[[3533,1,3533,28,"subrecordCanonicityForField"],[[3533,29,3533,47,[11,"subrecordTreatment"]]],[3534,5,3545,22,[17,[[3534,10,3534,28,[2,[],"subrecordTreatment"]],[[[3535,9,3535,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[3536,13,3536,22,[0,[[3536,13,3536,17,[2,[],"Just"]],[3536,18,3536,22,[2,[],"True"]]]]]],[[3538,9,3538,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[3539,13,3539,22,[0,[[3539,13,3539,17,[2,[],"Just"]],[3539,18,3539,22,[2,[],"True"]]]]]],[[3541,9,3541,22,[12,[[],"AlwaysUnknown"],[]]],[3542,13,3542,20,[2,[],"Nothing"]]],[[3544,9,3544,24,[12,[[],"AlwaysCanonical"],[]]],[3545,13,3545,22,[0,[[3545,13,3545,17,[2,[],"Just"]],[3545,18,3545,22,[2,[],"True"]]]]]]]]]]]]]]],[3548,1,3564,22,[0,[[1,[3548,1,3550,3,"{-| Return whether or not subrecords should be considered canonical, for\ncreating the type of a full record.\n-}"]],[1,[3551,1,3551,65,[[3551,1,3551,29,"subrecordCanonicityForRecord"],[3551,32,3551,65,[6,[3551,32,3551,51,[1,[3551,32,3551,51,[[],"SubrecordCanonicity"]],[]]],[3551,55,3551,65,[1,[3551,55,3551,60,[[],"Maybe"]],[[3551,61,3551,65,[1,[3551,61,3551,65,[[],"Bool"]],[]]]]]]]]]]],[3552,1,3564,22,[[3552,1,3552,29,"subrecordCanonicityForRecord"],[[3552,30,3552,48,[11,"subrecordTreatment"]]],[3553,5,3564,22,[17,[[3553,10,3553,28,[2,[],"subrecordTreatment"]],[[[3554,9,3554,31,[12,[[],"CanonicalWhenSubrecord"],[]]],[3555,13,3555,22,[0,[[3555,13,3555,17,[2,[],"Just"]],[3555,18,3555,22,[2,[],"True"]]]]]],[[3557,9,3557,38,[12,[[],"CustomTypeArgsAlwaysCanonical"],[]]],[3558,13,3558,22,[0,[[3558,13,3558,17,[2,[],"Just"]],[3558,18,3558,22,[2,[],"True"]]]]]],[[3560,9,3560,22,[12,[[],"AlwaysUnknown"],[]]],[3561,13,3561,23,[0,[[3561,13,3561,17,[2,[],"Just"]],[3561,18,3561,23,[2,[],"False"]]]]]],[[3563,9,3563,24,[12,[[],"AlwaysCanonical"],[]]],[3564,13,3564,22,[0,[[3564,13,3564,17,[2,[],"Just"]],[3564,18,3564,22,[2,[],"True"]]]]]]]]]]]]]]],[3567,1,3582,39,[2,[[1,[3567,1,3574,3,"{-| A type that, after being dereferenced, will not contain aliases and stores\nwhether or not records have canonical field order.\n\nNote that `TypeVar` is never concrete, as a `Type` is always made with full info\nabout all type variables, so the only way `TypeVar` can exist is if it's not\nused.\n\n-}"]],[3575,6,3575,10,"Type"],[],[[3576,7,3576,46,[[3576,7,3576,19,"FunctionType"],[[3576,20,3576,46,[4,[[3576,22,3576,33,[[3576,22,3576,26,"from"],[3576,29,3576,33,[1,[3576,29,3576,33,[[],"Type"]],[]]]]],[3576,35,3576,45,[[3576,35,3576,37,"to"],[3576,40,3576,44,[1,[3576,40,3576,44,[[],"Type"]],[]]]]]]]]]]],[3577,7,3577,28,[[3577,7,3577,16,"TupleType"],[[3577,17,3577,28,[1,[3577,18,3577,22,[[],"List"]],[[3577,23,3577,27,[1,[3577,23,3577,27,[[],"Type"]],[]]]]]]]]],[3578,7,3578,20,[[3578,7,3578,15,"ListType"],[[3578,16,3578,20,[1,[3578,16,3578,20,[[],"Type"]],[]]]]]],[3579,7,3579,15,[[3579,7,3579,15,"UnitType"],[]]],[3580,7,3580,51,[[3580,7,3580,16,"NamedType"],[[3580,17,3580,39,[3,[[3580,19,3580,29,[1,[3580,19,3580,29,[[],"ModuleName"]],[]]],[3580,31,3580,37,[1,[3580,31,3580,37,[[],"String"]],[]]]]]],[3580,40,3580,51,[1,[3580,41,3580,45,[[],"List"]],[[3580,46,3580,50,[1,[3580,46,3580,50,[[],"Type"]],[]]]]]]]]],[3581,7,3581,92,[[3581,7,3581,17,"RecordType"],[[3581,18,3581,92,[4,[[3581,20,3581,40,[[3581,20,3581,27,"generic"],[3581,30,3581,40,[1,[3581,30,3581,35,[[],"Maybe"]],[[3581,36,3581,40,[1,[3581,36,3581,40,[[],"Type"]],[]]]]]]]],[3581,42,3581,58,[[3581,42,3581,51,"canonical"],[3581,54,3581,58,[1,[3581,54,3581,58,[[],"Bool"]],[]]]]],[3581,60,3581,91,[[3581,60,3581,66,"fields"],[3581,69,3581,90,[1,[3581,69,3581,73,[[],"List"]],[[3581,74,3581,90,[3,[[3581,76,3581,82,[1,[3581,76,3581,82,[[],"String"]],[]]],[3581,84,3581,88,[1,[3581,84,3581,88,[[],"Type"]],[]]]]]]]]]]]]]]]]],[3582,7,3582,39,[[3582,7,3582,14,"TypeVar"],[[3582,15,3582,32,[1,[3582,16,3582,21,[[],"Maybe"]],[[3582,22,3582,31,[1,[3582,22,3582,31,[[],"Typeclass"]],[]]]]]],[3582,33,3582,39,[1,[3582,33,3582,39,[[],"String"]],[]]]]]]]]]],[3585,1,3592,10,[0,[[1,[3585,1,3586,3,"{-| Wrapper for `typeAnnotToType` when not dealing with aliases.\n-}"]],[1,[3587,1,3587,136,[[3587,1,3587,28,"typeAnnotToNoncanonicalType"],[3587,31,3587,136,[6,[3587,31,3587,105,[5,[3587,33,3587,40,"context"],[3587,42,3587,104,[[3587,43,3587,66,[[3587,43,3587,53,"moduleName"],[3587,56,3587,66,[1,[3587,56,3587,66,[[],"ModuleName"]],[]]]]],[3587,68,3587,104,[[3587,68,3587,79,"lookupTable"],[3587,82,3587,103,[1,[3587,82,3587,103,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[3587,109,3587,136,[6,[3587,109,3587,128,[1,[3587,109,3587,113,[[],"Node"]],[[3587,114,3587,128,[1,[3587,114,3587,128,[[],"TypeAnnotation"]],[]]]]]],[3587,132,3587,136,[1,[3587,132,3587,136,[[],"Type"]],[]]]]]]]]]],[3588,1,3592,10,[[3588,1,3588,28,"typeAnnotToNoncanonicalType"],[[3588,29,3588,36,[11,"context"]]],[3589,5,3592,10,[0,[[3589,5,3589,20,[2,[],"typeAnnotToType"]],[3589,21,3589,28,[2,[],"context"]],[3590,9,3592,10,[8,[[3590,11,3590,49,[[3590,11,3590,42,"constrainedTypeVarsAreRespected"],[3590,45,3590,49,[2,[],"True"]]]],[3591,11,3592,9,[[3591,11,3591,35,"subrecordIsAlsoCanonical"],[3591,38,3591,45,[2,[],"Nothing"]]]]]]]]]]]]]]],[3595,1,3664,58,[0,[[1,[3595,1,3598,3,"{-| Given context and whether or not a top-level record type (if `Just`) and\nsubrecords (if `Just True`) found are in canonical order, convert a\n`TypeAnnotation` into a `Type`.\n-}"]],[1,[3599,1,3599,209,[[3599,1,3599,16,"typeAnnotToType"],[3599,19,3599,209,[6,[3599,19,3599,93,[5,[3599,21,3599,28,"context"],[3599,30,3599,92,[[3599,31,3599,54,[[3599,31,3599,41,"moduleName"],[3599,44,3599,54,[1,[3599,44,3599,54,[[],"ModuleName"]],[]]]]],[3599,56,3599,92,[[3599,56,3599,67,"lookupTable"],[3599,70,3599,91,[1,[3599,70,3599,91,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[3599,97,3599,209,[6,[3599,97,3599,178,[4,[[3599,99,3599,137,[[3599,99,3599,130,"constrainedTypeVarsAreRespected"],[3599,133,3599,137,[1,[3599,133,3599,137,[[],"Bool"]],[]]]]],[3599,139,3599,177,[[3599,139,3599,163,"subrecordIsAlsoCanonical"],[3599,166,3599,176,[1,[3599,166,3599,171,[[],"Maybe"]],[[3599,172,3599,176,[1,[3599,172,3599,176,[[],"Bool"]],[]]]]]]]]]]],[3599,182,3599,209,[6,[3599,182,3599,201,[1,[3599,182,3599,186,[[],"Node"]],[[3599,187,3599,201,[1,[3599,187,3599,201,[[],"TypeAnnotation"]],[]]]]]],[3599,205,3599,209,[1,[3599,205,3599,209,[[],"Type"]],[]]]]]]]]]]]],[3600,1,3664,58,[[3600,1,3600,16,"typeAnnotToType"],[[3600,17,3600,24,[11,"context"]],[3600,25,3600,100,[14,[3600,26,3600,99,[13,[3600,26,3600,87,[8,[[3600,28,3600,59,"constrainedTypeVarsAreRespected"],[3600,61,3600,85,"subrecordIsAlsoCanonical"]]]],[3600,91,3600,99,"settings"]]]]],[3600,101,3600,106,[11,"annot"]]],[3601,5,3664,58,[16,[[[3602,9,3607,21,[0,[[0],[1,[3602,9,3602,41,[[3602,9,3602,11,"go"],[3602,14,3602,41,[6,[3602,14,3602,33,[1,[3602,14,3602,18,[[],"Node"]],[[3602,19,3602,33,[1,[3602,19,3602,33,[[],"TypeAnnotation"]],[]]]]]],[3602,37,3602,41,[1,[3602,37,3602,41,[[],"Type"]],[]]]]]]]],[3603,9,3607,21,[[3603,9,3603,11,"go"],[],[3604,13,3607,21,[1,"|>",0,[3604,13,3604,60,[0,[[3604,13,3604,26,[2,["MaybeX"],"filter"]],[3604,27,3604,35,[2,[],"identity"]],[3604,36,3604,60,[2,[],"subrecordIsAlsoCanonical"]]]]],[3605,20,3607,21,[7,[3605,21,3606,110,[18,[[[3605,22,3605,41,[11,"subrecordStillCanon"]]],[3606,25,3606,110,[0,[[3606,25,3606,40,[2,[],"typeAnnotToType"]],[3606,41,3606,48,[2,[],"context"]],[3606,49,3606,110,[21,[3606,51,3606,59,"settings"],[[3606,62,3606,109,[[3606,62,3606,86,"subrecordIsAlsoCanonical"],[3606,89,3606,108,[2,[],"subrecordStillCanon"]]]]]]]]]]]]]]]]]]]]]],[3609,9,3616,28,[0,[[0],[1,[3609,9,3609,84,[[3609,9,3609,17,"makeList"],[3609,20,3609,84,[6,[3609,20,3609,30,[1,[3609,20,3609,30,[[],"ModuleName"]],[]]],[3609,34,3609,84,[6,[3609,34,3609,40,[1,[3609,34,3609,40,[[],"String"]],[]]],[3609,44,3609,84,[6,[3609,44,3609,70,[1,[3609,44,3609,48,[[],"List"]],[[3609,49,3609,70,[1,[3609,50,3609,54,[[],"Node"]],[[3609,55,3609,69,[1,[3609,55,3609,69,[[],"TypeAnnotation"]],[]]]]]]]]],[3609,74,3609,84,[1,[3609,74,3609,79,[[],"Maybe"]],[[3609,80,3609,84,[1,[3609,80,3609,84,[[],"Type"]],[]]]]]]]]]]]]]]],[3610,9,3616,28,[[3610,9,3610,17,"makeList"],[[3610,18,3610,28,[11,"moduleName"]],[3610,29,3610,33,[11,"name"]],[3610,34,3610,38,[11,"args"]]],[3611,13,3616,28,[17,[[3611,18,3611,44,[6,[[3611,20,3611,30,[2,[],"moduleName"]],[3611,32,3611,36,[2,[],"name"]],[3611,38,3611,42,[2,[],"args"]]]]],[[[3612,17,3612,53,[7,[[3612,19,3612,29,[10,[[3612,21,3612,27,[3,"List"]]]]],[3612,31,3612,37,[3,"List"]],[3612,39,3612,51,[10,[[3612,41,3612,49,[11,"listType"]]]]]]]],[3613,21,3613,52,[1,"<|",1,[3613,21,3613,25,[2,[],"Just"]],[3613,29,3613,52,[1,"<|",1,[3613,29,3613,37,[2,[],"ListType"]],[3613,41,3613,52,[0,[[3613,41,3613,43,[2,[],"go"]],[3613,44,3613,52,[2,[],"listType"]]]]]]]]]],[[3615,17,3615,18,[0]],[3616,21,3616,28,[2,[],"Nothing"]]]]]]]]]]]]],[3618,5,3664,58,[17,[[3618,10,3618,26,[0,[[3618,10,3618,20,[2,["Node"],"value"]],[3618,21,3618,26,[2,[],"annot"]]]]],[[[3619,9,3619,24,[12,[[],"Typed"],[[3619,15,3619,19,[11,"name"]],[3619,20,3619,24,[11,"args"]]]]],[3620,13,3634,21,[1,"|>",0,[3620,13,3630,64,[1,"|>",0,[3620,13,3629,21,[1,"|>",0,[3620,13,3621,70,[1,"|>",0,[3620,13,3620,51,[0,[[3620,13,3620,26,[2,[],"moduleNameFor"]],[3620,27,3620,46,[19,[3620,27,3620,34,[2,[],"context"]],[3620,35,3620,46,"lookupTable"]]],[3620,47,3620,51,[2,[],"name"]]]]],[3621,20,3621,70,[0,[[3621,20,3621,37,[2,["Maybe"],"withDefault"]],[3621,38,3621,70,[7,[3621,39,3621,69,[1,"<|",1,[3621,39,3621,50,[2,["Tuple"],"first"]],[3621,54,3621,69,[0,[[3621,54,3621,64,[2,["Node"],"value"]],[3621,65,3621,69,[2,[],"name"]]]]]]]]]]]]]],[3622,20,3629,21,[7,[3622,21,3628,39,[18,[[[3622,22,3622,32,[11,"moduleName"]]],[3623,25,3628,39,[11,[3623,28,3623,44,[1,"==",2,[3623,28,3623,38,[2,[],"moduleName"]],[3623,42,3623,44,[9,[]]]]],[3625,29,3625,47,[19,[3625,29,3625,36,[2,[],"context"]],[3625,37,3625,47,"moduleName"]]],[3628,29,3628,39,[2,[],"moduleName"]]]]]]]]]]],[3630,20,3630,64,[0,[[3630,20,3630,30,[2,["Tuple"],"pair"]],[3630,31,3630,64,[7,[3630,32,3630,63,[1,"<|",1,[3630,32,3630,44,[2,["Tuple"],"second"]],[3630,48,3630,63,[0,[[3630,48,3630,58,[2,["Node"],"value"]],[3630,59,3630,63,[2,[],"name"]]]]]]]]]]]]]],[3631,20,3634,21,[7,[3631,21,3633,111,[18,[[[3631,22,3631,39,[7,[[3631,24,3631,25,[11,"n"]],[3631,27,3631,37,[11,"moduleName"]]]]]],[3632,25,3633,111,[1,"|>",0,[3632,25,3632,51,[0,[[3632,25,3632,33,[2,[],"makeList"]],[3632,34,3632,44,[2,[],"moduleName"]],[3632,45,3632,46,[2,[],"n"]],[3632,47,3632,51,[2,[],"args"]]]]],[3633,32,3633,111,[0,[[3633,32,3633,54,[2,["MaybeX"],"withDefaultLazy"]],[3633,55,3633,111,[7,[3633,56,3633,110,[18,[[[3633,57,3633,59,[1]]],[3633,63,3633,110,[1,"<|",1,[3633,63,3633,90,[0,[[3633,63,3633,72,[2,[],"NamedType"]],[3633,73,3633,90,[6,[[3633,75,3633,85,[2,[],"moduleName"]],[3633,87,3633,88,[2,[],"n"]]]]]]]],[3633,94,3633,110,[0,[[3633,94,3633,102,[2,["List"],"map"]],[3633,103,3633,105,[2,[],"go"]],[3633,106,3633,110,[2,[],"args"]]]]]]]]]]]]]]]]]]]]]]]]],[[3636,9,3636,13,[12,[[],"Unit"],[]]],[3637,13,3637,21,[2,[],"UnitType"]]],[[3639,9,3639,18,[12,[[],"Tupled"],[[3639,16,3639,18,[11,"ts"]]]]],[3640,13,3640,40,[1,"<|",1,[3640,13,3640,22,[2,[],"TupleType"]],[3640,26,3640,40,[0,[[3640,26,3640,34,[2,["List"],"map"]],[3640,35,3640,37,[2,[],"go"]],[3640,38,3640,40,[2,[],"ts"]]]]]]]],[[3642,9,3642,18,[12,[[],"Record"],[[3642,16,3642,18,[11,"fs"]]]]],[3643,13,3647,18,[0,[[3643,13,3643,23,[2,[],"RecordType"]],[3644,17,3647,18,[8,[[3644,19,3644,36,[[3644,19,3644,26,"generic"],[3644,29,3644,36,[2,[],"Nothing"]]]],[3645,19,3646,17,[[3645,19,3645,28,"canonical"],[3645,31,3645,66,[1,"/=",2,[3645,31,3645,55,[2,[],"subrecordIsAlsoCanonical"]],[3645,59,3645,66,[2,[],"Nothing"]]]]]],[3646,19,3647,17,[[3646,19,3646,25,"fields"],[3646,28,3646,83,[0,[[3646,28,3646,36,[2,["List"],"map"]],[3646,37,3646,80,[7,[3646,38,3646,79,[1,"<<",0,[3646,38,3646,65,[0,[[3646,38,3646,51,[2,["Tuple"],"mapBoth"]],[3646,52,3646,62,[2,["Node"],"value"]],[3646,63,3646,65,[2,[],"go"]]]]],[3646,69,3646,79,[2,["Node"],"value"]]]]]],[3646,81,3646,83,[2,[],"fs"]]]]]]]]]]]]]],[[3649,9,3649,33,[12,[[],"GenericRecord"],[[3649,23,3649,30,[11,"generic"]],[3649,31,3649,33,[11,"fs"]]]]],[3650,13,3658,18,[0,[[3650,13,3650,23,[2,[],"RecordType"]],[3651,17,3658,18,[8,[[3651,19,3655,66,[[3651,19,3651,26,"generic"],[3655,21,3655,66,[1,"<|",1,[3655,21,3655,25,[2,[],"Just"]],[3655,29,3655,66,[1,"<|",1,[3655,29,3655,44,[0,[[3655,29,3655,36,[2,[],"TypeVar"]],[3655,37,3655,44,[2,[],"Nothing"]]]]],[3655,48,3655,66,[0,[[3655,48,3655,58,[2,["Node"],"value"]],[3655,59,3655,66,[2,[],"generic"]]]]]]]]]]],[3656,19,3657,17,[[3656,19,3656,28,"canonical"],[3656,31,3656,66,[1,"/=",2,[3656,31,3656,55,[2,[],"subrecordIsAlsoCanonical"]],[3656,59,3656,66,[2,[],"Nothing"]]]]]],[3657,19,3658,17,[[3657,19,3657,25,"fields"],[3657,28,3657,97,[1,"<|",1,[3657,28,3657,80,[0,[[3657,28,3657,36,[2,["List"],"map"]],[3657,37,3657,80,[7,[3657,38,3657,79,[1,"<<",0,[3657,38,3657,65,[0,[[3657,38,3657,51,[2,["Tuple"],"mapBoth"]],[3657,52,3657,62,[2,["Node"],"value"]],[3657,63,3657,65,[2,[],"go"]]]]],[3657,69,3657,79,[2,["Node"],"value"]]]]]]]]],[3657,84,3657,97,[0,[[3657,84,3657,94,[2,["Node"],"value"]],[3657,95,3657,97,[2,[],"fs"]]]]]]]]]]]]]]]],[[3660,9,3660,39,[12,[[],"FunctionTypeAnnotation"],[[3660,32,3660,36,[11,"from"]],[3660,37,3660,39,[11,"to"]]]]],[3661,13,3661,56,[0,[[3661,13,3661,25,[2,[],"FunctionType"]],[3661,26,3661,56,[8,[[3661,28,3661,42,[[3661,28,3661,32,"from"],[3661,35,3661,42,[0,[[3661,35,3661,37,[2,[],"go"]],[3661,38,3661,42,[2,[],"from"]]]]]]],[3661,44,3661,55,[[3661,44,3661,46,"to"],[3661,49,3661,54,[0,[[3661,49,3661,51,[2,[],"go"]],[3661,52,3661,54,[2,[],"to"]]]]]]]]]]]]]],[[3663,9,3663,22,[12,[[],"GenericType"],[[3663,21,3663,22,[11,"s"]]]]],[3664,13,3664,58,[0,[[3664,13,3664,24,[2,[],"makeTypeVar"]],[3664,25,3664,56,[2,[],"constrainedTypeVarsAreRespected"]],[3664,57,3664,58,[2,[],"s"]]]]]]]]]]]]]]]]]],[3667,1,3678,34,[0,[[1,[3667,1,3671,3,"{-| Given context, whether or not a top-level record type (if `Just`) and\nsubrecords (if `Just True`) found are in canonical order, and a `Dict` of\npositional type variables, convert a `TypeAnnotation` into a\n`TypeWithPositionalVars`.\n-}"]],[1,[3672,1,3672,260,[[3672,1,3672,34,"typeAnnotToTypeWithPositionalVars"],[3672,37,3672,260,[6,[3672,37,3672,111,[5,[3672,39,3672,46,"context"],[3672,48,3672,110,[[3672,49,3672,72,[[3672,49,3672,59,"moduleName"],[3672,62,3672,72,[1,[3672,62,3672,72,[[],"ModuleName"]],[]]]]],[3672,74,3672,110,[[3672,74,3672,85,"lookupTable"],[3672,88,3672,109,[1,[3672,88,3672,109,[[],"ModuleNameLookupTable"]],[]]]]]]]]],[3672,115,3672,260,[6,[3672,115,3672,196,[4,[[3672,117,3672,155,[[3672,117,3672,148,"constrainedTypeVarsAreRespected"],[3672,151,3672,155,[1,[3672,151,3672,155,[[],"Bool"]],[]]]]],[3672,157,3672,195,[[3672,157,3672,181,"subrecordIsAlsoCanonical"],[3672,184,3672,194,[1,[3672,184,3672,189,[[],"Maybe"]],[[3672,190,3672,194,[1,[3672,190,3672,194,[[],"Bool"]],[]]]]]]]]]]],[3672,200,3672,260,[6,[3672,200,3672,211,[1,[3672,200,3672,204,[[],"List"]],[[3672,205,3672,211,[1,[3672,205,3672,211,[[],"String"]],[]]]]]],[3672,215,3672,260,[6,[3672,215,3672,234,[1,[3672,215,3672,219,[[],"Node"]],[[3672,220,3672,234,[1,[3672,220,3672,234,[[],"TypeAnnotation"]],[]]]]]],[3672,238,3672,260,[1,[3672,238,3672,260,[[],"TypeWithPositionalVars"]],[]]]]]]]]]]]]]],[3673,1,3678,34,[[3673,1,3673,34,"typeAnnotToTypeWithPositionalVars"],[[3673,35,3673,42,[11,"context"]],[3673,43,3673,51,[11,"settings"]],[3673,52,3673,60,[11,"typeArgs"]]],[3674,5,3678,34,[1,">>",1,[3674,5,3674,37,[0,[[3674,5,3674,20,[2,[],"typeAnnotToType"]],[3674,21,3674,28,[2,[],"context"]],[3674,29,3674,37,[2,[],"settings"]]]]],[3675,12,3678,34,[1,">>",1,[3675,12,3675,28,[2,[],"DereferencedType"]],[3676,12,3678,34,[1,">>",1,[3676,12,3676,63,[0,[[3676,12,3676,26,[2,[],"assignTypeVars"]],[3676,27,3676,63,[7,[3676,28,3676,62,[0,[[3676,28,3676,53,[2,[],"makePositionalArgTypeVars"]],[3676,54,3676,62,[2,[],"typeArgs"]]]]]]]]]],[3677,12,3678,34,[1,">>",1,[3677,12,3677,19,[2,[],"getType"]],[3678,12,3678,34,[2,[],"TypeWithPositionalVars"]]]]]]]]]]]]]]],[3681,1,3685,34,[2,[[1,[3681,1,3683,3,"{-| A type with positional type variables, e.g. `Ok a` having been created from\n`Result a b`.\n-}"]],[3684,6,3684,28,"TypeWithPositionalVars"],[],[[3685,7,3685,34,[[3685,7,3685,29,"TypeWithPositionalVars"],[[3685,30,3685,34,[1,[3685,30,3685,34,[[],"Type"]],[]]]]]]]]]],[3688,1,3694,17,[2,[[1,[3688,1,3689,3,"{-| Represent an Elm \"typeclass\" (constrained type variable, like `number`).\n-}"]],[3690,6,3690,15,"Typeclass"],[],[[3691,7,3691,17,[[3691,7,3691,17,"Appendable"],[]]],[3692,7,3692,13,[[3692,7,3692,13,"Number"],[]]],[3693,7,3693,17,[[3693,7,3693,17,"Comparable"],[]]],[3694,7,3694,17,[[3694,7,3694,17,"CompAppend"],[]]]]]]],[3697,1,3798,36,[0,[[1,[3697,1,3699,3,"{-| Check two `Type`s and see if they are theoretically equivalent (e.g. type\nvars can match anything.\n-}"]],[1,[3700,1,3700,118,[[3700,1,3700,11,"typesMatch"],[3700,14,3700,118,[6,[3700,14,3700,39,[1,[3700,14,3700,18,[[],"Dict"]],[[3700,19,3700,34,[3,[[3700,21,3700,24,[1,[3700,21,3700,24,[[],"Int"]],[]]],[3700,26,3700,32,[1,[3700,26,3700,32,[[],"String"]],[]]]]]],[3700,35,3700,39,[1,[3700,35,3700,39,[[],"Type"]],[]]]]]],[3700,43,3700,118,[6,[3700,43,3700,59,[1,[3700,43,3700,59,[[],"DereferencedType"]],[]]],[3700,63,3700,118,[6,[3700,63,3700,79,[1,[3700,63,3700,79,[[],"DereferencedType"]],[]]],[3700,83,3700,118,[3,[[3700,85,3700,110,[1,[3700,85,3700,89,[[],"Dict"]],[[3700,90,3700,105,[3,[[3700,92,3700,95,[1,[3700,92,3700,95,[[],"Int"]],[]]],[3700,97,3700,103,[1,[3700,97,3700,103,[[],"String"]],[]]]]]],[3700,106,3700,110,[1,[3700,106,3700,110,[[],"Type"]],[]]]]]],[3700,112,3700,116,[1,[3700,112,3700,116,[[],"Bool"]],[]]]]]]]]]]]]]]],[3701,1,3798,36,[[3701,1,3701,11,"typesMatch"],[[3701,12,3701,18,[11,"inVars"]],[3701,19,3701,48,[14,[3701,20,3701,47,[12,[[],"DereferencedType"],[[3701,37,3701,47,[11,"derefType1"]]]]]]],[3701,49,3701,78,[14,[3701,50,3701,77,[12,[[],"DereferencedType"],[[3701,67,3701,77,[11,"derefType2"]]]]]]]],[3702,5,3798,36,[16,[[[3703,9,3715,43,[0,[[0],[1,[3703,9,3703,118,[[3703,9,3703,25,"checkListOfTypes"],[3703,28,3703,118,[6,[3703,28,3703,53,[1,[3703,28,3703,32,[[],"Dict"]],[[3703,33,3703,48,[3,[[3703,35,3703,38,[1,[3703,35,3703,38,[[],"Int"]],[]]],[3703,40,3703,46,[1,[3703,40,3703,46,[[],"String"]],[]]]]]],[3703,49,3703,53,[1,[3703,49,3703,53,[[],"Type"]],[]]]]]],[3703,57,3703,118,[6,[3703,57,3703,66,[1,[3703,57,3703,61,[[],"List"]],[[3703,62,3703,66,[1,[3703,62,3703,66,[[],"Type"]],[]]]]]],[3703,70,3703,118,[6,[3703,70,3703,79,[1,[3703,70,3703,74,[[],"List"]],[[3703,75,3703,79,[1,[3703,75,3703,79,[[],"Type"]],[]]]]]],[3703,83,3703,118,[3,[[3703,85,3703,110,[1,[3703,85,3703,89,[[],"Dict"]],[[3703,90,3703,105,[3,[[3703,92,3703,95,[1,[3703,92,3703,95,[[],"Int"]],[]]],[3703,97,3703,103,[1,[3703,97,3703,103,[[],"String"]],[]]]]]],[3703,106,3703,110,[1,[3703,106,3703,110,[[],"Type"]],[]]]]]],[3703,112,3703,116,[1,[3703,112,3703,116,[[],"Bool"]],[]]]]]]]]]]]]]]],[3704,9,3715,43,[[3704,9,3704,25,"checkListOfTypes"],[[3704,26,3704,34,[11,"typeVars"]],[3704,35,3704,38,[11,"t1s"]],[3704,39,3704,42,[11,"t2s"]]],[3705,13,3715,43,[11,[3705,16,3705,50,[1,"/=",2,[3705,16,3705,31,[0,[[3705,16,3705,27,[2,["List"],"length"]],[3705,28,3705,31,[2,[],"t1s"]]]]],[3705,35,3705,50,[0,[[3705,35,3705,46,[2,["List"],"length"]],[3705,47,3705,50,[2,[],"t2s"]]]]]]],[3706,17,3706,36,[6,[[3706,19,3706,27,[2,[],"typeVars"]],[3706,29,3706,34,[2,[],"False"]]]]],[3709,17,3715,43,[1,"|>",0,[3709,17,3709,34,[0,[[3709,17,3709,26,[2,["ListX"],"zip"]],[3709,27,3709,30,[2,[],"t1s"]],[3709,31,3709,34,[2,[],"t2s"]]]]],[3710,24,3715,43,[0,[[3710,24,3710,34,[2,["List"],"foldl"]],[3711,25,3714,26,[7,[3711,26,3713,67,[18,[[[3711,27,3711,39,[7,[[3711,29,3711,32,[11,"t1_"]],[3711,34,3711,37,[11,"t2_"]]]]],[3711,40,3711,60,[7,[[3711,42,3711,48,[11,"varAcc"]],[3711,50,3711,58,[11,"matchAcc"]]]]]],[3712,29,3713,67,[1,"|>",0,[3712,29,3712,46,[0,[[3712,29,3712,31,[2,[],"go"]],[3712,32,3712,38,[2,[],"varAcc"]],[3712,39,3712,42,[2,[],"t1_"]],[3712,43,3712,46,[2,[],"t2_"]]]]],[3713,36,3713,67,[0,[[3713,36,3713,51,[2,["Tuple"],"mapSecond"]],[3713,52,3713,67,[7,[3713,53,3713,66,[0,[[3713,53,3713,57,[12,"&&"]],[3713,58,3713,66,[2,[],"matchAcc"]]]]]]]]]]]]]]]]],[3715,25,3715,43,[6,[[3715,27,3715,35,[2,[],"typeVars"]],[3715,37,3715,41,[2,[],"True"]]]]]]]]]]]]]]]]],[3717,9,3755,40,[0,[[0],[1,[3717,9,3717,94,[[3717,9,3717,11,"go"],[3717,14,3717,94,[6,[3717,14,3717,39,[1,[3717,14,3717,18,[[],"Dict"]],[[3717,19,3717,34,[3,[[3717,21,3717,24,[1,[3717,21,3717,24,[[],"Int"]],[]]],[3717,26,3717,32,[1,[3717,26,3717,32,[[],"String"]],[]]]]]],[3717,35,3717,39,[1,[3717,35,3717,39,[[],"Type"]],[]]]]]],[3717,43,3717,94,[6,[3717,43,3717,47,[1,[3717,43,3717,47,[[],"Type"]],[]]],[3717,51,3717,94,[6,[3717,51,3717,55,[1,[3717,51,3717,55,[[],"Type"]],[]]],[3717,59,3717,94,[3,[[3717,61,3717,86,[1,[3717,61,3717,65,[[],"Dict"]],[[3717,66,3717,81,[3,[[3717,68,3717,71,[1,[3717,68,3717,71,[[],"Int"]],[]]],[3717,73,3717,79,[1,[3717,73,3717,79,[[],"String"]],[]]]]]],[3717,82,3717,86,[1,[3717,82,3717,86,[[],"Type"]],[]]]]]],[3717,88,3717,92,[1,[3717,88,3717,92,[[],"Bool"]],[]]]]]]]]]]]]]]],[3718,9,3755,40,[[3718,9,3718,11,"go"],[[3718,12,3718,20,[11,"typeVars"]],[3718,21,3718,26,[11,"type1"]],[3718,27,3718,32,[11,"type2"]]],[3719,13,3755,40,[17,[[3719,18,3719,34,[6,[[3719,20,3719,25,[2,[],"type1"]],[3719,27,3719,32,[2,[],"type2"]]]]],[[[3720,17,3720,35,[7,[[3720,19,3720,30,[12,[[],"TypeVar"],[[3720,27,3720,28,[11,"c"]],[3720,29,3720,30,[11,"n"]]]]],[3720,32,3720,33,[11,"t"]]]]],[3721,21,3721,51,[0,[[3721,21,3721,34,[2,[],"matchTypeVars"]],[3721,35,3721,36,[3,1]],[3721,37,3721,45,[2,[],"typeVars"]],[3721,46,3721,47,[2,[],"c"]],[3721,48,3721,49,[2,[],"n"]],[3721,50,3721,51,[2,[],"t"]]]]]],[[3723,17,3723,35,[7,[[3723,19,3723,20,[11,"t"]],[3723,22,3723,33,[12,[[],"TypeVar"],[[3723,30,3723,31,[11,"c"]],[3723,32,3723,33,[11,"n"]]]]]]]],[3724,21,3724,51,[0,[[3724,21,3724,34,[2,[],"matchTypeVars"]],[3724,35,3724,36,[3,2]],[3724,37,3724,45,[2,[],"typeVars"]],[3724,46,3724,47,[2,[],"c"]],[3724,48,3724,49,[2,[],"n"]],[3724,50,3724,51,[2,[],"t"]]]]]],[[3726,17,3726,45,[7,[[3726,19,3726,30,[12,[[],"ListType"],[[3726,28,3726,30,[11,"t1"]]]]],[3726,32,3726,43,[12,[[],"ListType"],[[3726,41,3726,43,[11,"t2"]]]]]]]],[3727,21,3727,38,[0,[[3727,21,3727,23,[2,[],"go"]],[3727,24,3727,32,[2,[],"typeVars"]],[3727,33,3727,35,[2,[],"t1"]],[3727,36,3727,38,[2,[],"t2"]]]]]],[[3729,17,3729,49,[7,[[3729,19,3729,32,[12,[[],"TupleType"],[[3729,29,3729,32,[11,"t1s"]]]]],[3729,34,3729,47,[12,[[],"TupleType"],[[3729,44,3729,47,[11,"t2s"]]]]]]]],[3731,21,3731,54,[0,[[3731,21,3731,37,[2,[],"checkListOfTypes"]],[3731,38,3731,46,[2,[],"typeVars"]],[3731,47,3731,50,[2,[],"t1s"]],[3731,51,3731,54,[2,[],"t2s"]]]]]],[[3733,17,3733,53,[7,[[3733,19,3733,34,[12,[[],"FunctionType"],[[3733,32,3733,34,[11,"f1"]]]]],[3733,36,3733,51,[12,[[],"FunctionType"],[[3733,49,3733,51,[11,"f2"]]]]]]]],[3734,21,3734,84,[0,[[3734,21,3734,37,[2,[],"checkListOfTypes"]],[3734,38,3734,46,[2,[],"typeVars"]],[3734,47,3734,65,[9,[[3734,49,3734,56,[19,[3734,49,3734,51,[2,[],"f1"]],[3734,52,3734,56,"from"]]],[3734,58,3734,63,[19,[3734,58,3734,60,[2,[],"f1"]],[3734,61,3734,63,"to"]]]]]],[3734,66,3734,84,[9,[[3734,68,3734,75,[19,[3734,68,3734,70,[2,[],"f1"]],[3734,71,3734,75,"from"]]],[3734,77,3734,82,[19,[3734,77,3734,79,[2,[],"f2"]],[3734,80,3734,82,"to"]]]]]]]]]],[[3736,17,3736,39,[7,[[3736,19,3736,27,[12,[[],"UnitType"],[]]],[3736,29,3736,37,[12,[[],"UnitType"],[]]]]]],[3737,21,3737,39,[6,[[3737,23,3737,31,[2,[],"typeVars"]],[3737,33,3737,37,[2,[],"True"]]]]]],[[3739,17,3739,59,[7,[[3739,19,3739,37,[12,[[],"NamedType"],[[3739,29,3739,31,[11,"n1"]],[3739,32,3739,37,[11,"args1"]]]]],[3739,39,3739,57,[12,[[],"NamedType"],[[3739,49,3739,51,[11,"n2"]],[3739,52,3739,57,[11,"args2"]]]]]]]],[3740,21,3741,61,[1,"|>",0,[3740,21,3740,58,[0,[[3740,21,3740,37,[2,[],"checkListOfTypes"]],[3740,38,3740,46,[2,[],"typeVars"]],[3740,47,3740,52,[2,[],"args1"]],[3740,53,3740,58,[2,[],"args2"]]]]],[3741,28,3741,61,[0,[[3741,28,3741,43,[2,["Tuple"],"mapSecond"]],[3741,44,3741,61,[7,[3741,45,3741,60,[0,[[3741,45,3741,49,[12,"&&"]],[3741,50,3741,60,[7,[3741,51,3741,59,[1,"==",2,[3741,51,3741,53,[2,[],"n1"]],[3741,57,3741,59,[2,[],"n2"]]]]]]]]]]]]]]]]],[[3743,17,3743,49,[7,[[3743,19,3743,32,[12,[[],"RecordType"],[[3743,30,3743,32,[11,"r1"]]]]],[3743,34,3743,47,[12,[[],"RecordType"],[[3743,45,3743,47,[11,"r2"]]]]]]]],[3745,21,3752,78,[1,"|>",0,[3745,21,3751,62,[0,[[3745,21,3745,31,[2,["Dict"],"merge"]],[3746,25,3746,80,[7,[3746,26,3746,79,[18,[[[3746,27,3746,28,[11,"f"]],[3746,29,3746,31,[11,"t1"]],[3746,32,3746,35,[11,"acc"]]],[3746,39,3746,79,[21,[3746,41,3746,44,"acc"],[[3746,47,3746,78,[[3746,47,3746,52,"only1"],[3746,55,3746,77,[1,"::",1,[3746,55,3746,64,[6,[[3746,57,3746,58,[2,[],"f"]],[3746,60,3746,62,[2,[],"t1"]]]]],[3746,68,3746,77,[19,[3746,68,3746,71,[2,[],"acc"]],[3746,72,3746,77,"only1"]]]]]]]]]]]]]]],[3747,25,3747,82,[7,[3747,26,3747,81,[18,[[[3747,27,3747,28,[0]],[3747,29,3747,31,[11,"t1"]],[3747,32,3747,34,[11,"t2"]],[3747,35,3747,38,[11,"acc"]]],[3747,42,3747,81,[21,[3747,44,3747,47,"acc"],[[3747,50,3747,80,[[3747,50,3747,54,"both"],[3747,57,3747,79,[1,"::",1,[3747,57,3747,67,[6,[[3747,59,3747,61,[2,[],"t1"]],[3747,63,3747,65,[2,[],"t2"]]]]],[3747,71,3747,79,[19,[3747,71,3747,74,[2,[],"acc"]],[3747,75,3747,79,"both"]]]]]]]]]]]]]]],[3748,25,3748,80,[7,[3748,26,3748,79,[18,[[[3748,27,3748,28,[11,"f"]],[3748,29,3748,31,[11,"t2"]],[3748,32,3748,35,[11,"acc"]]],[3748,39,3748,79,[21,[3748,41,3748,44,"acc"],[[3748,47,3748,78,[[3748,47,3748,52,"only2"],[3748,55,3748,77,[1,"::",1,[3748,55,3748,64,[6,[[3748,57,3748,58,[2,[],"f"]],[3748,60,3748,62,[2,[],"t2"]]]]],[3748,68,3748,77,[19,[3748,68,3748,71,[2,[],"acc"]],[3748,72,3748,77,"only2"]]]]]]]]]]]]]]],[3749,25,3749,50,[7,[3749,26,3749,49,[0,[[3749,26,3749,39,[2,["Dict"],"fromList"]],[3749,40,3749,49,[19,[3749,40,3749,42,[2,[],"r1"]],[3749,43,3749,49,"fields"]]]]]]]],[3750,25,3750,50,[7,[3750,26,3750,49,[0,[[3750,26,3750,39,[2,["Dict"],"fromList"]],[3750,40,3750,49,[19,[3750,40,3750,42,[2,[],"r2"]],[3750,43,3750,49,"fields"]]]]]]]],[3751,25,3751,62,[8,[[3751,27,3751,36,[[3751,27,3751,31,"both"],[3751,34,3751,36,[9,[]]]]],[3751,38,3751,48,[[3751,38,3751,43,"only1"],[3751,46,3751,48,[9,[]]]]],[3751,50,3751,61,[[3751,50,3751,55,"only2"],[3751,58,3751,60,[9,[]]]]]]]]]]],[3752,28,3752,78,[0,[[3752,28,3752,47,[2,[],"validateRecordMatch"]],[3752,48,3752,56,[2,[],"typeVars"]],[3752,57,3752,67,[19,[3752,57,3752,59,[2,[],"r1"]],[3752,60,3752,67,"generic"]]],[3752,68,3752,78,[19,[3752,68,3752,70,[2,[],"r2"]],[3752,71,3752,78,"generic"]]]]]]]]],[[3754,17,3754,18,[0]],[3755,21,3755,40,[6,[[3755,23,3755,31,[2,[],"typeVars"]],[3755,33,3755,38,[2,[],"False"]]]]]]]]]]]]]]],[3757,9,3778,44,[0,[[0],[1,[3757,9,3757,133,[[3757,9,3757,22,"matchTypeVars"],[3757,25,3757,133,[6,[3757,25,3757,28,[1,[3757,25,3757,28,[[],"Int"]],[]]],[3757,32,3757,133,[6,[3757,32,3757,57,[1,[3757,32,3757,36,[[],"Dict"]],[[3757,37,3757,52,[3,[[3757,39,3757,42,[1,[3757,39,3757,42,[[],"Int"]],[]]],[3757,44,3757,50,[1,[3757,44,3757,50,[[],"String"]],[]]]]]],[3757,53,3757,57,[1,[3757,53,3757,57,[[],"Type"]],[]]]]]],[3757,61,3757,133,[6,[3757,61,3757,76,[1,[3757,61,3757,66,[[],"Maybe"]],[[3757,67,3757,76,[1,[3757,67,3757,76,[[],"Typeclass"]],[]]]]]],[3757,80,3757,133,[6,[3757,80,3757,86,[1,[3757,80,3757,86,[[],"String"]],[]]],[3757,90,3757,133,[6,[3757,90,3757,94,[1,[3757,90,3757,94,[[],"Type"]],[]]],[3757,98,3757,133,[3,[[3757,100,3757,125,[1,[3757,100,3757,104,[[],"Dict"]],[[3757,105,3757,120,[3,[[3757,107,3757,110,[1,[3757,107,3757,110,[[],"Int"]],[]]],[3757,112,3757,118,[1,[3757,112,3757,118,[[],"String"]],[]]]]]],[3757,121,3757,125,[1,[3757,121,3757,125,[[],"Type"]],[]]]]]],[3757,127,3757,131,[1,[3757,127,3757,131,[[],"Bool"]],[]]]]]]]]]]]]]]]]]]],[3758,9,3778,44,[[3758,9,3758,22,"matchTypeVars"],[[3758,23,3758,27,[11,"side"]],[3758,28,3758,36,[11,"typeVars"]],[3758,37,3758,46,[11,"typeclass"]],[3758,47,3758,51,[11,"name"]],[3758,52,3758,57,[11,"type_"]]],[3759,13,3778,44,[17,[[3759,18,3759,61,[6,[[3759,20,3759,52,[0,[[3759,20,3759,28,[2,["Dict"],"get"]],[3759,29,3759,43,[6,[[3759,31,3759,35,[2,[],"side"]],[3759,37,3759,41,[2,[],"name"]]]]],[3759,44,3759,52,[2,[],"typeVars"]]]]],[3759,54,3759,59,[2,[],"type_"]]]]],[[[3760,17,3760,30,[7,[[3760,19,3760,25,[12,[[],"Just"],[[3760,24,3760,25,[11,"t"]]]]],[3760,27,3760,28,[0]]]]],[3763,21,3764,73,[1,"|>",0,[3763,21,3763,69,[0,[[3763,21,3763,23,[2,[],"go"]],[3763,24,3763,61,[7,[3763,25,3763,60,[0,[[3763,25,3763,36,[2,["Dict"],"remove"]],[3763,37,3763,51,[6,[[3763,39,3763,43,[2,[],"side"]],[3763,45,3763,49,[2,[],"name"]]]]],[3763,52,3763,60,[2,[],"typeVars"]]]]]]],[3763,62,3763,63,[2,[],"t"]],[3763,64,3763,69,[2,[],"type_"]]]]],[3764,28,3764,73,[0,[[3764,28,3764,42,[2,["Tuple"],"mapFirst"]],[3764,43,3764,73,[7,[3764,44,3764,72,[0,[[3764,44,3764,55,[2,["Dict"],"insert"]],[3764,56,3764,70,[6,[[3764,58,3764,62,[2,[],"side"]],[3764,64,3764,68,[2,[],"name"]]]]],[3764,71,3764,72,[2,[],"t"]]]]]]]]]]]]],[[3766,17,3766,41,[7,[[3766,19,3766,26,[12,[[],"Nothing"],[]]],[3766,28,3766,39,[12,[[],"TypeVar"],[[3766,36,3766,37,[0]],[3766,38,3766,39,[0]]]]]]]],[3768,21,3768,39,[6,[[3768,23,3768,31,[2,[],"typeVars"]],[3768,33,3768,37,[2,[],"True"]]]]]],[[3770,17,3770,31,[7,[[3770,19,3770,26,[12,[[],"Nothing"],[]]],[3770,28,3770,29,[0]]]]],[3771,21,3778,44,[11,[3772,25,3773,54,[1,"|>",0,[3772,25,3772,69,[0,[[3772,25,3772,34,[2,["Maybe"],"map"]],[3772,35,3772,59,[7,[3772,36,3772,58,[0,[[3772,36,3772,52,[2,[],"matchesTypeClass"]],[3772,53,3772,58,[2,[],"type_"]]]]]]],[3772,60,3772,69,[2,[],"typeclass"]]]]],[3773,32,3773,54,[0,[[3773,32,3773,49,[2,["Maybe"],"withDefault"]],[3773,50,3773,54,[2,[],"True"]]]]]]],[3775,25,3775,76,[6,[[3775,27,3775,68,[0,[[3775,27,3775,38,[2,["Dict"],"insert"]],[3775,39,3775,53,[6,[[3775,41,3775,45,[2,[],"side"]],[3775,47,3775,51,[2,[],"name"]]]]],[3775,54,3775,59,[2,[],"type_"]],[3775,60,3775,68,[2,[],"typeVars"]]]]],[3775,70,3775,74,[2,[],"True"]]]]],[3778,25,3778,44,[6,[[3778,27,3778,35,[2,[],"typeVars"]],[3778,37,3778,42,[2,[],"False"]]]]]]]]]]]]]]]]],[3780,9,3796,21,[0,[[0],[1,[3780,9,3780,219,[[3780,9,3780,28,"validateRecordMatch"],[3780,31,3780,219,[6,[3780,31,3780,56,[1,[3780,31,3780,35,[[],"Dict"]],[[3780,36,3780,51,[3,[[3780,38,3780,41,[1,[3780,38,3780,41,[[],"Int"]],[]]],[3780,43,3780,49,[1,[3780,43,3780,49,[[],"String"]],[]]]]]],[3780,52,3780,56,[1,[3780,52,3780,56,[[],"Type"]],[]]]]]],[3780,60,3780,219,[6,[3780,60,3780,70,[1,[3780,60,3780,65,[[],"Maybe"]],[[3780,66,3780,70,[1,[3780,66,3780,70,[[],"Type"]],[]]]]]],[3780,74,3780,219,[6,[3780,74,3780,84,[1,[3780,74,3780,79,[[],"Maybe"]],[[3780,80,3780,84,[1,[3780,80,3780,84,[[],"Type"]],[]]]]]],[3780,88,3780,219,[6,[3780,88,3780,180,[4,[[3780,90,3780,116,[[3780,90,3780,94,"both"],[3780,97,3780,116,[1,[3780,97,3780,101,[[],"List"]],[[3780,102,3780,116,[3,[[3780,104,3780,108,[1,[3780,104,3780,108,[[],"Type"]],[]]],[3780,110,3780,114,[1,[3780,110,3780,114,[[],"Type"]],[]]]]]]]]]]],[3780,118,3780,147,[[3780,118,3780,123,"only1"],[3780,126,3780,147,[1,[3780,126,3780,130,[[],"List"]],[[3780,131,3780,147,[3,[[3780,133,3780,139,[1,[3780,133,3780,139,[[],"String"]],[]]],[3780,141,3780,145,[1,[3780,141,3780,145,[[],"Type"]],[]]]]]]]]]]],[3780,149,3780,179,[[3780,149,3780,154,"only2"],[3780,157,3780,178,[1,[3780,157,3780,161,[[],"List"]],[[3780,162,3780,178,[3,[[3780,164,3780,170,[1,[3780,164,3780,170,[[],"String"]],[]]],[3780,172,3780,176,[1,[3780,172,3780,176,[[],"Type"]],[]]]]]]]]]]]]]],[3780,184,3780,219,[3,[[3780,186,3780,211,[1,[3780,186,3780,190,[[],"Dict"]],[[3780,191,3780,206,[3,[[3780,193,3780,196,[1,[3780,193,3780,196,[[],"Int"]],[]]],[3780,198,3780,204,[1,[3780,198,3780,204,[[],"String"]],[]]]]]],[3780,207,3780,211,[1,[3780,207,3780,211,[[],"Type"]],[]]]]]],[3780,213,3780,217,[1,[3780,213,3780,217,[[],"Bool"]],[]]]]]]]]]]]]]]]]],[3781,9,3796,21,[[3781,9,3781,28,"validateRecordMatch"],[[3781,29,3781,37,[11,"typeVars"]],[3781,38,3781,46,[11,"generic1"]],[3781,47,3781,55,[11,"generic2"]],[3781,56,3781,78,[8,[[3781,58,3781,62,"both"],[3781,64,3781,69,"only1"],[3781,71,3781,76,"only2"]]]]],[3783,13,3796,21,[1,"|>",0,[3783,13,3790,21,[1,"|>",0,[3783,13,3784,72,[1,"|>",0,[3783,13,3783,28,[0,[[3783,13,3783,23,[2,["List"],"unzip"]],[3783,24,3783,28,[2,[],"both"]]]]],[3784,20,3784,72,[7,[3784,21,3784,71,[18,[[[3784,22,3784,34,[7,[[3784,24,3784,27,[11,"l1s"]],[3784,29,3784,32,[11,"l2s"]]]]]],[3784,38,3784,71,[0,[[3784,38,3784,54,[2,[],"checkListOfTypes"]],[3784,55,3784,63,[2,[],"typeVars"]],[3784,64,3784,67,[2,[],"l1s"]],[3784,68,3784,71,[2,[],"l2s"]]]]]]]]]]]],[3785,20,3790,21,[7,[3785,21,3789,63,[18,[[[3785,22,3785,40,[7,[[3785,24,3785,28,[11,"vars"]],[3785,30,3785,38,[11,"matchAcc"]]]]]],[3786,25,3789,63,[1,"|>",0,[3786,25,3788,78,[1,"|>",0,[3786,25,3787,139,[1,"|>",0,[3786,25,3786,61,[0,[[3786,25,3786,33,[2,[],"validate"]],[3786,34,3786,55,[7,[3786,35,3786,54,[1,"<<",0,[3786,35,3786,38,[2,[],"not"]],[3786,42,3786,54,[2,["List"],"isEmpty"]]]]]],[3786,56,3786,61,[2,[],"only1"]]]]],[3787,32,3787,139,[0,[[3787,32,3787,42,[2,["Maybe"],"map2"]],[3787,43,3787,130,[7,[3787,44,3787,129,[18,[[[3787,45,3787,46,[11,"g"]],[3787,47,3787,49,[11,"fs"]]],[3787,53,3787,129,[0,[[3787,53,3787,55,[2,[],"go"]],[3787,56,3787,60,[2,[],"vars"]],[3787,61,3787,127,[7,[3787,62,3787,126,[0,[[3787,62,3787,72,[2,[],"RecordType"]],[3787,73,3787,126,[8,[[3787,75,3787,92,[[3787,75,3787,82,"generic"],[3787,85,3787,92,[2,[],"Nothing"]]]],[3787,94,3787,111,[[3787,94,3787,103,"canonical"],[3787,106,3787,111,[2,[],"False"]]]],[3787,113,3787,125,[[3787,113,3787,119,"fields"],[3787,122,3787,124,[2,[],"fs"]]]]]]]]]]]],[3787,128,3787,129,[2,[],"g"]]]]]]]]]],[3787,131,3787,139,[2,[],"generic2"]]]]]]],[3788,32,3788,78,[0,[[3788,32,3788,49,[2,["Maybe"],"withDefault"]],[3788,50,3788,78,[6,[[3788,52,3788,56,[2,[],"vars"]],[3788,58,3788,76,[0,[[3788,58,3788,70,[2,["List"],"isEmpty"]],[3788,71,3788,76,[2,[],"only1"]]]]]]]]]]]]],[3789,32,3789,63,[0,[[3789,32,3789,47,[2,["Tuple"],"mapSecond"]],[3789,48,3789,63,[7,[3789,49,3789,62,[0,[[3789,49,3789,53,[12,"&&"]],[3789,54,3789,62,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]],[3791,20,3796,21,[7,[3791,21,3795,63,[18,[[[3791,22,3791,40,[7,[[3791,24,3791,28,[11,"vars"]],[3791,30,3791,38,[11,"matchAcc"]]]]]],[3792,25,3795,63,[1,"|>",0,[3792,25,3794,78,[1,"|>",0,[3792,25,3793,139,[1,"|>",0,[3792,25,3792,61,[0,[[3792,25,3792,33,[2,[],"validate"]],[3792,34,3792,55,[7,[3792,35,3792,54,[1,"<<",0,[3792,35,3792,38,[2,[],"not"]],[3792,42,3792,54,[2,["List"],"isEmpty"]]]]]],[3792,56,3792,61,[2,[],"only2"]]]]],[3793,32,3793,139,[0,[[3793,32,3793,42,[2,["Maybe"],"map2"]],[3793,43,3793,130,[7,[3793,44,3793,129,[18,[[[3793,45,3793,46,[11,"g"]],[3793,47,3793,49,[11,"fs"]]],[3793,53,3793,129,[0,[[3793,53,3793,55,[2,[],"go"]],[3793,56,3793,60,[2,[],"vars"]],[3793,61,3793,127,[7,[3793,62,3793,126,[0,[[3793,62,3793,72,[2,[],"RecordType"]],[3793,73,3793,126,[8,[[3793,75,3793,92,[[3793,75,3793,82,"generic"],[3793,85,3793,92,[2,[],"Nothing"]]]],[3793,94,3793,111,[[3793,94,3793,103,"canonical"],[3793,106,3793,111,[2,[],"False"]]]],[3793,113,3793,125,[[3793,113,3793,119,"fields"],[3793,122,3793,124,[2,[],"fs"]]]]]]]]]]]],[3793,128,3793,129,[2,[],"g"]]]]]]]]]],[3793,131,3793,139,[2,[],"generic1"]]]]]]],[3794,32,3794,78,[0,[[3794,32,3794,49,[2,["Maybe"],"withDefault"]],[3794,50,3794,78,[6,[[3794,52,3794,56,[2,[],"vars"]],[3794,58,3794,76,[0,[[3794,58,3794,70,[2,["List"],"isEmpty"]],[3794,71,3794,76,[2,[],"only2"]]]]]]]]]]]]],[3795,32,3795,63,[0,[[3795,32,3795,47,[2,["Tuple"],"mapSecond"]],[3795,48,3795,63,[7,[3795,49,3795,62,[0,[[3795,49,3795,53,[12,"&&"]],[3795,54,3795,62,[2,[],"matchAcc"]]]]]]]]]]]]]]]]]]]]]]]]],[3798,5,3798,36,[0,[[3798,5,3798,7,[2,[],"go"]],[3798,8,3798,14,[2,[],"inVars"]],[3798,15,3798,25,[2,[],"derefType1"]],[3798,26,3798,36,[2,[],"derefType2"]]]]]]]]]]]]],[3801,1,3873,20,[0,[[1,[3801,1,3802,3,"{-| Given two types that are not the same, try to find a compatible type.\n-}"]],[1,[3803,1,3803,43,[[3803,1,3803,14,"unifyTwoTypes"],[3803,17,3803,43,[6,[3803,17,3803,21,[1,[3803,17,3803,21,[[],"Type"]],[]]],[3803,25,3803,43,[6,[3803,25,3803,29,[1,[3803,25,3803,29,[[],"Type"]],[]]],[3803,33,3803,43,[1,[3803,33,3803,38,[[],"Maybe"]],[[3803,39,3803,43,[1,[3803,39,3803,43,[[],"Type"]],[]]]]]]]]]]]]],[3804,1,3873,20,[[3804,1,3804,14,"unifyTwoTypes"],[[3804,15,3804,20,[11,"type1"]],[3804,21,3804,26,[11,"type2"]]],[3805,5,3873,20,[17,[[3805,10,3805,26,[6,[[3805,12,3805,17,[2,[],"type1"]],[3805,19,3805,24,[2,[],"type2"]]]]],[[[3806,9,3806,33,[7,[[3806,11,3806,28,[12,[[],"TypeVar"],[[3806,19,3806,26,[12,[[],"Nothing"],[]]],[3806,27,3806,28,[0]]]]],[3806,30,3806,31,[0]]]]],[3807,13,3807,23,[0,[[3807,13,3807,17,[2,[],"Just"]],[3807,18,3807,23,[2,[],"type2"]]]]]],[[3809,9,3809,33,[7,[[3809,11,3809,12,[0]],[3809,14,3809,31,[12,[[],"TypeVar"],[[3809,22,3809,29,[12,[[],"Nothing"],[]]],[3809,30,3809,31,[0]]]]]]]],[3810,13,3810,23,[0,[[3810,13,3810,17,[2,[],"Just"]],[3810,18,3810,23,[2,[],"type1"]]]]]],[[3812,9,3812,35,[7,[[3812,11,3812,30,[12,[[],"TypeVar"],[[3812,19,3812,28,[14,[3812,20,3812,27,[12,[[],"Just"],[[3812,25,3812,27,[11,"tc"]]]]]]],[3812,29,3812,30,[0]]]]],[3812,32,3812,33,[0]]]]],[3813,13,3813,57,[0,[[3813,13,3813,21,[2,[],"validate"]],[3813,22,3813,51,[7,[3813,23,3813,50,[18,[[[3813,24,3813,25,[11,"t"]]],[3813,29,3813,50,[0,[[3813,29,3813,45,[2,[],"matchesTypeClass"]],[3813,46,3813,47,[2,[],"t"]],[3813,48,3813,50,[2,[],"tc"]]]]]]]]]],[3813,52,3813,57,[2,[],"type2"]]]]]],[[3815,9,3815,35,[7,[[3815,11,3815,12,[0]],[3815,14,3815,33,[12,[[],"TypeVar"],[[3815,22,3815,31,[14,[3815,23,3815,30,[12,[[],"Just"],[[3815,28,3815,30,[11,"tc"]]]]]]],[3815,32,3815,33,[0]]]]]]]],[3816,13,3816,57,[0,[[3816,13,3816,21,[2,[],"validate"]],[3816,22,3816,51,[7,[3816,23,3816,50,[18,[[[3816,24,3816,25,[11,"t"]]],[3816,29,3816,50,[0,[[3816,29,3816,45,[2,[],"matchesTypeClass"]],[3816,46,3816,47,[2,[],"t"]],[3816,48,3816,50,[2,[],"tc"]]]]]]]]]],[3816,52,3816,57,[2,[],"type1"]]]]]],[[3818,9,3818,45,[7,[[3818,11,3818,26,[12,[[],"FunctionType"],[[3818,24,3818,26,[11,"f1"]]]]],[3818,28,3818,43,[12,[[],"FunctionType"],[[3818,41,3818,43,[11,"f2"]]]]]]]],[3819,13,3821,46,[0,[[3819,13,3819,23,[2,["Maybe"],"map2"]],[3819,24,3819,75,[7,[3819,25,3819,74,[18,[[[3819,26,3819,30,[11,"from"]],[3819,31,3819,33,[11,"to"]]],[3819,37,3819,74,[0,[[3819,37,3819,49,[2,[],"FunctionType"]],[3819,50,3819,74,[8,[[3819,52,3819,63,[[3819,52,3819,56,"from"],[3819,59,3819,63,[2,[],"from"]]]],[3819,65,3819,73,[[3819,65,3819,67,"to"],[3819,70,3819,72,[2,[],"to"]]]]]]]]]]]]]]],[3820,17,3820,50,[7,[3820,18,3820,49,[0,[[3820,18,3820,28,[2,[],"unifyTypes"]],[3820,29,3820,49,[9,[[3820,31,3820,38,[19,[3820,31,3820,33,[2,[],"f1"]],[3820,34,3820,38,"from"]]],[3820,40,3820,47,[19,[3820,40,3820,42,[2,[],"f2"]],[3820,43,3820,47,"from"]]]]]]]]]]],[3821,17,3821,46,[7,[3821,18,3821,45,[0,[[3821,18,3821,28,[2,[],"unifyTypes"]],[3821,29,3821,45,[9,[[3821,31,3821,36,[19,[3821,31,3821,33,[2,[],"f1"]],[3821,34,3821,36,"to"]]],[3821,38,3821,43,[19,[3821,38,3821,40,[2,[],"f2"]],[3821,41,3821,43,"to"]]]]]]]]]]]]]]],[[3823,9,3823,37,[7,[[3823,11,3823,22,[12,[[],"ListType"],[[3823,20,3823,22,[11,"t1"]]]]],[3823,24,3823,35,[12,[[],"ListType"],[[3823,33,3823,35,[11,"t2"]]]]]]]],[3824,13,3825,38,[1,"|>",0,[3824,13,3824,34,[0,[[3824,13,3824,23,[2,[],"unifyTypes"]],[3824,24,3824,34,[9,[[3824,26,3824,28,[2,[],"t1"]],[3824,30,3824,32,[2,[],"t2"]]]]]]]],[3825,20,3825,38,[0,[[3825,20,3825,29,[2,["Maybe"],"map"]],[3825,30,3825,38,[2,[],"ListType"]]]]]]]],[[3827,9,3827,41,[7,[[3827,11,3827,24,[12,[[],"TupleType"],[[3827,21,3827,24,[11,"t1s"]]]]],[3827,26,3827,39,[12,[[],"TupleType"],[[3827,36,3827,39,[11,"t2s"]]]]]]]],[3828,13,3830,39,[1,"|>",0,[3828,13,3829,74,[1,"|>",0,[3828,13,3828,30,[0,[[3828,13,3828,22,[2,["ListX"],"zip"]],[3828,23,3828,26,[2,[],"t1s"]],[3828,27,3828,30,[2,[],"t2s"]]]]],[3829,20,3829,74,[0,[[3829,20,3829,35,[2,["MaybeX"],"traverse"]],[3829,36,3829,74,[7,[3829,37,3829,73,[18,[[[3829,38,3829,48,[7,[[3829,40,3829,42,[11,"t1"]],[3829,44,3829,46,[11,"t2"]]]]]],[3829,52,3829,73,[0,[[3829,52,3829,62,[2,[],"unifyTypes"]],[3829,63,3829,73,[9,[[3829,65,3829,67,[2,[],"t1"]],[3829,69,3829,71,[2,[],"t2"]]]]]]]]]]]]]]]]]],[3830,20,3830,39,[0,[[3830,20,3830,29,[2,["Maybe"],"map"]],[3830,30,3830,39,[2,[],"TupleType"]]]]]]]],[[3832,9,3832,41,[7,[[3832,11,3832,24,[12,[[],"RecordType"],[[3832,22,3832,24,[11,"r1"]]]]],[3832,26,3832,39,[12,[[],"RecordType"],[[3832,37,3832,39,[11,"r2"]]]]]]]],[3834,13,3868,21,[1,"|>",0,[3834,13,3847,54,[0,[[3834,13,3834,23,[2,["Dict"],"merge"]],[3835,17,3835,72,[7,[3835,18,3835,71,[18,[[[3835,19,3835,20,[11,"f"]],[3835,21,3835,23,[11,"t1"]],[3835,24,3835,27,[11,"acc"]]],[3835,31,3835,71,[21,[3835,33,3835,36,"acc"],[[3835,39,3835,70,[[3835,39,3835,44,"only1"],[3835,47,3835,69,[1,"::",1,[3835,47,3835,56,[6,[[3835,49,3835,50,[2,[],"f"]],[3835,52,3835,54,[2,[],"t1"]]]]],[3835,60,3835,69,[19,[3835,60,3835,63,[2,[],"acc"]],[3835,64,3835,69,"only1"]]]]]]]]]]]]]]],[3836,17,3843,18,[7,[3836,18,3842,22,[18,[[[3836,19,3836,20,[11,"f"]],[3836,21,3836,23,[11,"t1"]],[3836,24,3836,26,[11,"t2"]],[3836,27,3836,30,[11,"acc"]]],[3837,21,3842,22,[21,[3837,23,3837,26,"acc"],[[3838,27,3842,21,[[3838,27,3838,31,"both"],[3839,29,3841,57,[1,"|>",0,[3839,29,3840,60,[1,"|>",0,[3839,29,3839,50,[0,[[3839,29,3839,39,[2,[],"unifyTypes"]],[3839,40,3839,50,[9,[[3839,42,3839,44,[2,[],"t1"]],[3839,46,3839,48,[2,[],"t2"]]]]]]]],[3840,36,3840,60,[0,[[3840,36,3840,45,[2,["Maybe"],"map"]],[3840,46,3840,60,[7,[3840,47,3840,59,[0,[[3840,47,3840,57,[2,["Tuple"],"pair"]],[3840,58,3840,59,[2,[],"f"]]]]]]]]]]]],[3841,36,3841,57,[7,[3841,37,3841,56,[18,[[[3841,38,3841,39,[11,"x"]]],[3841,43,3841,56,[1,"::",1,[3841,43,3841,44,[2,[],"x"]],[3841,48,3841,56,[19,[3841,48,3841,51,[2,[],"acc"]],[3841,52,3841,56,"both"]]]]]]]]]]]]]]]]]]]]]],[3844,17,3844,72,[7,[3844,18,3844,71,[18,[[[3844,19,3844,20,[11,"f"]],[3844,21,3844,23,[11,"t2"]],[3844,24,3844,27,[11,"acc"]]],[3844,31,3844,71,[21,[3844,33,3844,36,"acc"],[[3844,39,3844,70,[[3844,39,3844,44,"only2"],[3844,47,3844,69,[1,"::",1,[3844,47,3844,56,[6,[[3844,49,3844,50,[2,[],"f"]],[3844,52,3844,54,[2,[],"t2"]]]]],[3844,60,3844,69,[19,[3844,60,3844,63,[2,[],"acc"]],[3844,64,3844,69,"only2"]]]]]]]]]]]]]]],[3845,17,3845,42,[7,[3845,18,3845,41,[0,[[3845,18,3845,31,[2,["Dict"],"fromList"]],[3845,32,3845,41,[19,[3845,32,3845,34,[2,[],"r1"]],[3845,35,3845,41,"fields"]]]]]]]],[3846,17,3846,42,[7,[3846,18,3846,41,[0,[[3846,18,3846,31,[2,["Dict"],"fromList"]],[3846,32,3846,41,[19,[3846,32,3846,34,[2,[],"r2"]],[3846,35,3846,41,"fields"]]]]]]]],[3847,17,3847,54,[8,[[3847,19,3847,28,[[3847,19,3847,23,"both"],[3847,26,3847,28,[9,[]]]]],[3847,30,3847,40,[[3847,30,3847,35,"only1"],[3847,38,3847,40,[9,[]]]]],[3847,42,3847,53,[[3847,42,3847,47,"only2"],[3847,50,3847,52,[9,[]]]]]]]]]]],[3848,20,3868,21,[7,[3848,21,3867,34,[18,[[[3848,22,3848,44,[8,[[3848,24,3848,28,"both"],[3848,30,3848,35,"only1"],[3848,37,3848,42,"only2"]]]]],[3849,25,3867,34,[1,"|>",0,[3849,25,3849,44,[0,[[3849,25,3849,39,[2,["MaybeX"],"combine"]],[3849,40,3849,44,[2,[],"both"]]]]],[3850,32,3867,34,[0,[[3850,32,3850,45,[2,["Maybe"],"andThen"]],[3851,33,3867,34,[7,[3851,34,3866,52,[18,[[[3851,35,3851,40,[11,"both_"]]],[3852,37,3866,52,[17,[[3852,42,3852,90,[6,[[3852,44,3852,65,[6,[[3852,46,3852,56,[19,[3852,46,3852,48,[2,[],"r1"]],[3852,49,3852,56,"generic"]]],[3852,58,3852,63,[2,[],"only2"]]]]],[3852,67,3852,88,[6,[[3852,69,3852,79,[19,[3852,69,3852,71,[2,[],"r2"]],[3852,72,3852,79,"generic"]]],[3852,81,3852,86,[2,[],"only1"]]]]]]]],[[[3853,41,3853,97,[7,[[3853,43,3853,68,[7,[[3853,45,3853,63,[12,[[],"Just"],[[3853,50,3853,63,[14,[3853,51,3853,62,[12,[[],"TypeVar"],[[3853,59,3853,60,[0]],[3853,61,3853,62,[0]]]]]]]]]],[3853,65,3853,66,[0]]]]],[3853,70,3853,95,[7,[[3853,72,3853,90,[12,[[],"Just"],[[3853,77,3853,90,[14,[3853,78,3853,89,[12,[[],"TypeVar"],[[3853,86,3853,87,[0]],[3853,88,3853,89,[0]]]]]]]]]],[3853,92,3853,93,[0]]]]]]]],[3854,45,3854,105,[1,"<|",1,[3854,45,3854,49,[2,[],"Just"]],[3854,53,3854,105,[0,[[3854,53,3854,63,[2,[],"RecordType"]],[3854,64,3854,105,[21,[3854,66,3854,68,"r1"],[[3854,71,3854,104,[[3854,71,3854,77,"fields"],[3854,80,3854,103,[1,"++",1,[3854,80,3854,85,[2,[],"only1"]],[3854,89,3854,103,[1,"++",1,[3854,89,3854,94,[2,[],"both_"]],[3854,98,3854,103,[2,[],"only2"]]]]]]]]]]]]]]]]],[[3856,41,3856,77,[7,[[3856,43,3856,58,[7,[[3856,45,3856,52,[12,[[],"Nothing"],[]]],[3856,54,3856,56,[10,[]]]]]],[3856,60,3856,75,[7,[[3856,62,3856,69,[12,[[],"Nothing"],[]]],[3856,71,3856,73,[10,[]]]]]]]]],[3857,45,3857,87,[1,"<|",1,[3857,45,3857,49,[2,[],"Just"]],[3857,53,3857,87,[0,[[3857,53,3857,63,[2,[],"RecordType"]],[3857,64,3857,87,[21,[3857,66,3857,68,"r1"],[[3857,71,3857,86,[[3857,71,3857,77,"fields"],[3857,80,3857,85,[2,[],"both_"]]]]]]]]]]]]],[[3859,41,3859,87,[7,[[3859,43,3859,68,[7,[[3859,45,3859,63,[12,[[],"Just"],[[3859,50,3859,63,[14,[3859,51,3859,62,[12,[[],"TypeVar"],[[3859,59,3859,60,[0]],[3859,61,3859,62,[0]]]]]]]]]],[3859,65,3859,66,[0]]]]],[3859,70,3859,85,[7,[[3859,72,3859,79,[12,[[],"Nothing"],[]]],[3859,81,3859,83,[10,[]]]]]]]]],[3860,45,3860,96,[1,"<|",1,[3860,45,3860,49,[2,[],"Just"]],[3860,53,3860,96,[0,[[3860,53,3860,63,[2,[],"RecordType"]],[3860,64,3860,96,[21,[3860,66,3860,68,"r1"],[[3860,71,3860,95,[[3860,71,3860,77,"fields"],[3860,80,3860,94,[1,"++",1,[3860,80,3860,85,[2,[],"both_"]],[3860,89,3860,94,[2,[],"only2"]]]]]]]]]]]]]]],[[3862,41,3862,87,[7,[[3862,43,3862,58,[7,[[3862,45,3862,52,[12,[[],"Nothing"],[]]],[3862,54,3862,56,[10,[]]]]]],[3862,60,3862,85,[7,[[3862,62,3862,80,[12,[[],"Just"],[[3862,67,3862,80,[14,[3862,68,3862,79,[12,[[],"TypeVar"],[[3862,76,3862,77,[0]],[3862,78,3862,79,[0]]]]]]]]]],[3862,82,3862,83,[0]]]]]]]],[3863,45,3863,96,[1,"<|",1,[3863,45,3863,49,[2,[],"Just"]],[3863,53,3863,96,[0,[[3863,53,3863,63,[2,[],"RecordType"]],[3863,64,3863,96,[21,[3863,66,3863,68,"r1"],[[3863,71,3863,95,[[3863,71,3863,77,"fields"],[3863,80,3863,94,[1,"++",1,[3863,80,3863,85,[2,[],"both_"]],[3863,89,3863,94,[2,[],"only1"]]]]]]]]]]]]]]],[[3865,41,3865,42,[0]],[3866,45,3866,52,[2,[],"Nothing"]]]]]]]]]]]]]]]]]]]]]]]]],[[3870,9,3870,10,[0]],[3873,13,3873,20,[2,[],"Nothing"]]]]]]]]]]]],[3876,1,3903,13,[0,[[1,[3876,1,3877,3,"{-| Given a list of types, try to reduce them to a single type.\n-}"]],[1,[3878,1,3878,37,[[3878,1,3878,11,"unifyTypes"],[3878,14,3878,37,[6,[3878,14,3878,23,[1,[3878,14,3878,18,[[],"List"]],[[3878,19,3878,23,[1,[3878,19,3878,23,[[],"Type"]],[]]]]]],[3878,27,3878,37,[1,[3878,27,3878,32,[[],"Maybe"]],[[3878,33,3878,37,[1,[3878,33,3878,37,[[],"Type"]],[]]]]]]]]]]],[3879,1,3903,13,[[3879,1,3879,11,"unifyTypes"],[],[3880,5,3903,13,[1,">>",1,[3880,5,3889,11,[0,[[3880,5,3880,15,[2,["List"],"foldl"]],[3881,9,3888,10,[7,[3881,10,3887,25,[18,[[[3881,11,3881,12,[11,"t"]],[3881,13,3881,16,[11,"acc"]]],[3883,13,3887,25,[11,[3883,16,3883,33,[0,[[3883,16,3883,27,[2,["List"],"member"]],[3883,28,3883,29,[2,[],"t"]],[3883,30,3883,33,[2,[],"acc"]]]]],[3884,17,3884,20,[2,[],"acc"]],[3887,17,3887,25,[1,"::",1,[3887,17,3887,18,[2,[],"t"]],[3887,22,3887,25,[2,[],"acc"]]]]]]]]]]],[3889,9,3889,11,[9,[]]]]]],[3890,12,3903,13,[7,[3890,13,3902,98,[18,[[[3890,14,3890,16,[11,"ts"]]],[3891,17,3902,98,[17,[[3891,22,3891,99,[6,[[3891,24,3891,26,[2,[],"ts"]],[3891,28,3891,97,[0,[[3891,28,3891,39,[2,["List"],"filter"]],[3891,40,3891,94,[7,[3891,41,3891,93,[0,[[3891,41,3891,45,[12,"/="]],[3891,46,3891,93,[7,[3891,47,3891,92,[0,[[3891,47,3891,54,[2,[],"TypeVar"]],[3891,55,3891,62,[2,[],"Nothing"]],[3891,63,3891,92,[5,"inferred empty list typevar"]]]]]]]]]]]],[3891,95,3891,97,[2,[],"ts"]]]]]]]],[[[3892,21,3892,33,[7,[[3892,23,3892,28,[10,[[3892,25,3892,26,[11,"t"]]]]],[3892,30,3892,31,[0]]]]],[3893,25,3893,31,[0,[[3893,25,3893,29,[2,[],"Just"]],[3893,30,3893,31,[2,[],"t"]]]]]],[[3895,21,3895,30,[7,[[3895,23,3895,24,[0]],[3895,26,3895,28,[10,[]]]]]],[3896,25,3896,32,[2,[],"Nothing"]]],[[3898,21,3898,33,[7,[[3898,23,3898,24,[0]],[3898,26,3898,31,[10,[[3898,28,3898,29,[11,"t"]]]]]]]],[3899,25,3899,31,[0,[[3899,25,3899,29,[2,[],"Just"]],[3899,30,3899,31,[2,[],"t"]]]]]],[[3901,21,3901,36,[7,[[3901,23,3901,24,[0]],[3901,26,3901,34,[9,[3901,26,3901,27,[11,"t"]],[3901,31,3901,34,[11,"ts_"]]]]]]],[3902,25,3902,98,[0,[[3902,25,3902,35,[2,["List"],"foldl"]],[3902,36,3902,85,[7,[3902,37,3902,84,[18,[[[3902,38,3902,40,[11,"t_"]],[3902,41,3902,44,[11,"acc"]]],[3902,48,3902,84,[0,[[3902,48,3902,61,[2,["Maybe"],"andThen"]],[3902,62,3902,80,[7,[3902,63,3902,79,[0,[[3902,63,3902,76,[2,[],"unifyTwoTypes"]],[3902,77,3902,79,[2,[],"t_"]]]]]]],[3902,81,3902,84,[2,[],"acc"]]]]]]]]]],[3902,86,3902,94,[7,[3902,87,3902,93,[0,[[3902,87,3902,91,[2,[],"Just"]],[3902,92,3902,93,[2,[],"t"]]]]]]],[3902,95,3902,98,[2,[],"ts_"]]]]]]]]]]]]]]]]]]]]]],[3906,1,3924,15,[0,[[1,[3906,1,3907,3,"{-| Report that an unknown record was encountered without fixes.\n-}"]],[1,[3908,1,3908,63,[[3908,1,3908,19,"unknownRecordError"],[3908,22,3908,63,[6,[3908,22,3908,35,[1,[3908,22,3908,35,[[],"RecordToCheck"]],[]]],[3908,39,3908,63,[6,[3908,39,3908,44,[1,[3908,39,3908,44,[[],"Range"]],[]]],[3908,48,3908,63,[1,[3908,48,3908,52,[[],"List"]],[[3908,53,3908,63,[1,[3908,54,3908,59,[[],"Error"]],[[3908,60,3908,62,[4,[]]]]]]]]]]]]]]]],[3909,1,3924,15,[[3909,1,3909,19,"unknownRecordError"],[[3909,20,3909,30,[8,[[3909,22,3909,28,"fields"]]]],[3909,31,3909,36,[11,"range"]]],[3910,5,3924,15,[17,[[3910,10,3910,16,[2,[],"fields"]],[[[3911,9,3911,20,[9,[3911,9,3911,10,[0]],[3911,14,3911,20,[9,[3911,14,3911,15,[0]],[3911,19,3911,20,[0]]]]]],[3912,13,3920,14,[9,[[3912,15,3919,22,[0,[[3912,15,3912,25,[2,["Rule"],"error"]],[3913,17,3918,18,[8,[[3913,19,3916,22,[[3913,19,3913,26,"details"],[3914,21,3916,22,[9,[[3914,23,3914,173,[5,"This record did not correspond with any known alias or custom type argument record, so whether or not its fields are sorted could not be determined!"]],[3915,23,3915,137,[5,"Create a type alias for this record type, or remove reportUnknownRecordsWithoutFix from your rule configuration."]]]]]]],[3917,19,3918,17,[[3917,19,3917,26,"message"],[3917,29,3917,58,[5,"Unknown record encountered."]]]]]]],[3919,17,3919,22,[2,[],"range"]]]]]]]]],[[3922,9,3922,10,[0]],[3924,13,3924,15,[9,[]]]]]]]]]]]]]],[[11,1,56,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, defaults\n\n\n### Sorting\n\n@docs sortGenericFieldsLast\n\n\n### Ambiguous Records\n\nAn ambiguous record is a record that matches more than one known \"canonical\"\nrecord.\n\n@docs doNotSortAmbiguousRecords, reportAmbiguousRecordsWithoutFix\n\n\n### Unknown Records\n\nAn unknown record is a record that does not match any known \"canonical\" records.\n\n@docs doNotSortUnknownRecords, reportUnknownRecordsWithoutFix\n\n\n### Subrecords\n\nSubrecords are records that are either within the fields of a type alias or are\narguments of a custom type.\n\n@docs treatSubrecordsAsUnknown, treatAllSubrecordsAsCanonical, treatCustomTypeRecordsAsCanonical\n\n\n### Other Settings\n\n@docs typecheckAllRecords\n\n-}"],[632,29,632,151,"-- Function declarations do not have canonical record orders nor do they have type variables (that might be made concrete)"],[695,25,695,79,"-- Constrained type vars are not respected for aliases"],[713,35,713,79,"-- Generic records do not have constructors."],[765,13,765,34,"-- Nothing to do for:"],[766,13,766,31,"-- PortDeclaration"],[767,13,767,32,"-- InfixDeclaration"],[768,13,768,29,"-- Destructuring"],[804,13,804,50,"-- Do not report 0 or 1 field records"],[893,13,893,101,"-- Try to infer type of e for type info, since destructuring can't have type annotations"],[936,13,936,62,"-- Get type info we've stored and use it to check"],[937,13,937,111,"-- Note that while `findFunctionType` requires local context, a pattern can only be a constructor,"],[938,13,938,89,"-- which cannot be local, so we can just create an empty local context here."],[942,17,942,32,"-- No type info"],[946,13,946,67,"-- `p` has type in list, and `ps` is overall list type"],[951,13,951,47,"-- Bind `name` to the overall type"],[955,13,955,60,"-- Bind `name` to overall type and then descend"],[959,13,959,45,"-- Parentheses don't affect type"],[963,13,963,31,"-- No bindings in:"],[964,13,964,26,"-- AllPattern"],[965,13,965,27,"-- UnitPattern"],[966,13,966,27,"-- CharPattern"],[967,13,967,29,"-- StringPattern"],[968,13,968,26,"-- IntPattern"],[969,13,969,26,"-- HexPattern"],[970,13,970,28,"-- FloatPattern"],[998,33,998,52,"-- Assign type vars"],[1008,25,1008,85,"-- Couldn't find the function type, so type info is gone now"],[1016,33,1016,52,"-- Assign type vars"],[1026,25,1026,85,"-- Couldn't find the function type, so type info is gone now"],[1030,21,1030,46,"-- Unwrap the parentheses"],[1035,25,1035,96,"-- Assume there is only one argument, because if not, it's a type error"],[1039,21,1039,80,"-- * This is valid application, but we can't infer the type"],[1040,21,1040,47,"-- LambdaExpression Lambda"],[1041,21,1041,98,"-- * These are possibly valid, but can't infer the \"return\" type of the block"],[1042,21,1042,60,"-- Application (List (Node Expression))"],[1043,21,1043,46,"-- LetExpression LetBlock"],[1044,21,1044,48,"-- CaseExpression CaseBlock"],[1045,21,1045,85,"-- IfBlock (Node Expression) (Node Expression) (Node Expression)"],[1046,21,1046,101,"-- OperatorApplication String InfixDirection (Node Expression) (Node Expression)"],[1047,21,1047,68,"-- RecordAccess (Node Expression) (Node String)"],[1048,21,1048,60,"-- * Cannot apply args to non-functions"],[1049,21,1049,32,"-- UnitExpr"],[1050,21,1050,45,"-- GLSLExpression String"],[1051,21,1051,61,"-- List.concatMap (checkExpr Nothing) es"],[1052,21,1052,87,"-- RecordUpdateExpression (Node String) (List (Node RecordSetter))"],[1053,21,1053,57,"-- ListExpr (List (Node Expression))"],[1054,21,1054,61,"-- RecordExpr (List (Node RecordSetter))"],[1055,21,1055,38,"-- Literal String"],[1056,21,1056,40,"-- CharLiteral Char"],[1057,21,1057,65,"-- TupledExpression (List (Node Expression))"],[1058,21,1058,35,"-- Integer Int"],[1059,21,1059,31,"-- Hex Int"],[1060,21,1060,39,"-- Floatable Float"],[1061,21,1061,39,"-- Operator String"],[1062,21,1062,50,"-- Negation (Node Expression)"],[1093,9,1093,96,"-- Simple patterns simply descend into sub expressions of, unwrapping type if necessary"],[1095,13,1095,46,"-- Negation doesn't change a type"],[1099,13,1099,47,"-- Parentheses don't change a type"],[1104,17,1104,47,"-- Lists must have a list type"],[1112,13,1112,58,"-- Try to pull type info from known functions"],[1116,13,1116,44,"-- Handle a few known operators"],[1120,13,1120,89,"-- List predicate must have type Bool and branches have same type as overall"],[1124,13,1124,45,"-- Tuples must have a tuple type"],[1129,13,1129,65,"-- Try to infer type of case expression for patterns"],[1130,13,1130,50,"-- Branches have same type as overall"],[1149,13,1149,35,"-- Check as a function"],[1153,13,1153,64,"-- Create new bindings from any that have type info"],[1168,13,1168,78,"-- A record expression has to have all fields of the known record"],[1176,17,1176,73,"-- Used any found record information to check subrecords"],[1180,13,1180,88,"-- A record update must have the same type as the record, so type is useful"],[1181,13,1181,95,"-- A record update expression does not have to have all fields of the known record"],[1189,21,1189,84,"-- Get type from updated var if we don't have a good annotation"],[1195,17,1195,73,"-- Used any found record information to check subrecords"],[1202,13,1202,95,"-- The following neither have subexpressions nor are a record and so are dead ends"],[1203,13,1203,24,"-- UnitExpr"],[1204,13,1204,37,"-- PrefixOperator String"],[1205,13,1205,31,"-- Operator String"],[1206,13,1206,27,"-- Integer Int"],[1207,13,1207,23,"-- Hex Int"],[1208,13,1208,31,"-- Floatable Float"],[1209,13,1209,37,"-- GLSLExpression String"],[1210,13,1210,43,"-- RecordAccessFunction String"],[1211,13,1211,30,"-- Literal String"],[1212,13,1212,32,"-- CharLiteral Char"],[1213,13,1213,49,"-- FunctionOrValue ModuleName String"],[1269,13,1269,101,"-- Try to infer type of e for type info, since destructuring can't have type annotations"],[1287,13,1287,111,"-- Other operators, we don't know (or rather care) what they do, so just treat them like functions"],[1302,13,1302,45,"-- Tuples must have a tuple type"],[1308,17,1308,43,"-- Uncons has to be a list"],[1317,17,1317,49,"-- List pattern has to be a list"],[1325,13,1325,47,"-- As pattern does not change type"],[1329,13,1329,46,"-- Parentheses do not change type"],[1333,13,1333,62,"-- Get type info we've stored and use it to check"],[1334,13,1334,111,"-- Note that while `findFunctionType` requires local context, a pattern can only be a constructor,"],[1335,13,1335,89,"-- which cannot be local, so we can just create an empty local context here."],[1344,17,1344,94,"-- No such thing as subrecords for patterns, so we can just return the errors"],[1348,13,1348,51,"-- Neither can descend into nor check:"],[1349,13,1349,26,"-- AllPattern"],[1350,13,1350,27,"-- UnitPattern"],[1351,13,1351,32,"-- CharPattern Char"],[1352,13,1352,36,"-- StringPattern String"],[1353,13,1353,30,"-- IntPattern Int"],[1354,13,1354,30,"-- HexPattern Int"],[1355,13,1355,34,"-- FloatPattern Float"],[1356,13,1356,33,"-- VarPattern String"],[1391,13,1391,76,"-- Assume opening `{` is just the first character of the range."],[1398,21,1398,80,"-- Unknown record, so sort alphabetically if config says to"],[1402,21,1402,63,"-- Unknown record, so report without fixes"],[1406,21,1406,53,"-- Unknown record; don't sort it"],[1435,17,1435,41,"-- Dedupe by field order"],[1439,29,1439,69,"-- Prefer matches without unknown fields"],[1446,37,1446,95,"-- Keep only matching field types between duplicate orders"],[1455,29,1455,97,"-- Prefer matches without unknown fields and that are not subrecords"],[1471,13,1471,58,"-- Completely unknown record, so no type data"],[1472,13,1472,53,"-- Sort alphabetically if config says to"],[1476,13,1476,95,"-- Generic with unknown fields, so sort accordingly and use what type info we have"],[1480,13,1480,34,"-- Unambiguous record"],[1484,13,1484,31,"--Ambiguous record"],[1488,21,1488,87,"-- Keep any fields that have identical types despite the ambiguity"],[1495,21,1495,61,"-- Sort alphabetically if config says to"],[1499,21,1499,62,"-- Report without fixes if config says to"],[1505,21,1505,57,"-- Do not sort if config says not to"],[1530,9,1530,38,"-- Records are simply records"],[1535,17,1535,73,"-- Used any found record information to check subrecords"],[1542,17,1542,73,"-- Used any found record information to check subrecords"],[1545,9,1545,60,"-- Descend into functions, tuples, and custom types"],[1559,13,1559,45,"-- Tuples must have a tuple type"],[1580,9,1580,48,"-- Generic and unit types are dead ends"],[1628,5,1628,74,"-- Find aliases, canonical records, and function types and store them"],[1742,25,1742,83,"-- Constrained type vars aren't respected for type aliases"],[1756,29,1756,75,"-- Arguments only have order if config says so"],[1831,53,1831,109,"-- Constrained type vars do apply to record constructors"],[1834,53,1834,99,"-- Arguments only have order if config says so"],[1844,53,1844,85,"-- Return type *does* have order"],[1858,31,1858,69,"-- No constructors for generic records"],[1925,25,1925,43,"-- Apply type vars"],[1927,25,1927,73,"-- If no aliases match, it must be a custom type"],[1940,37,1940,107,"-- Generic records overwrite more \"inner\" fields with their outer ones"],[1946,21,1946,32,"-- UnitType"],[1947,21,1947,31,"-- TypeVar"],[1990,13,1990,81,"-- Can't use module name lookup, so just have to hope this is right."],[2010,21,2010,75,"-- Generic records completely ignore typeclasses, i.e."],[2011,21,2011,76,"-- `type alias G comparable = { comparable | x : Int }`"],[2012,21,2012,56,"-- is just a normal generic record."],[2088,21,2088,93,"-- Constructor, not a function, which cannot be defined in local context"],[2154,29,2154,124,"-- Either it's an empty generic or nothing matched; either way just say what fields are missing"],[2174,13,2174,83,"-- Don't worry about module name, because this will never be ambiguous"],[2192,9,2192,48,"-- There aren't any duplicate operators"],[2454,25,2454,44,"-- Assign type vars"],[2459,25,2459,67,"-- Definitely can't infer an operator type"],[2464,21,2464,46,"-- Unwrap the parentheses"],[2468,21,2468,83,"-- Assume there's only one arg, since it's a type error if not"],[2478,21,2478,45,"-- Try to infer the type"],[2494,21,2494,57,"-- Mr. Incredible says UNIT IS UNIT."],[2519,25,2519,57,"-- An empty list can be anything"],[2523,25,2523,55,"-- Have to check all and unify"],[2548,21,2548,63,"-- Type is just whatever is in parentheses"],[2555,21,2555,58,"-- Try to infer either side and unify"],[2565,21,2565,56,"-- Try to infer all cases and unify"],[2603,21,2603,122,"-- We know the expression being accessed is a record with a field of the type of the total expression"],[2610,49,2610,104,"-- This is, in essence, a generic record with one field"],[2623,21,2623,52,"-- Handle a few known operators"],[2717,23,2717,75,"-- Constrained type vars don't apply to type aliases"],[2720,21,2720,62,"-- Subrecords canonical if config says so"],[2740,21,2740,56,"-- Only create the top level record"],[2761,21,2761,75,"-- Constrained type vars are not respected for aliases"],[2764,21,2764,62,"-- Subrecords canonical if config says so"],[2780,21,2780,56,"-- Only create the top level record"],[2848,53,2848,139,"-- Unit record is always canonical, or else it's a type error, in which case who knows"],[2898,13,2898,70,"-- This is an ugly hack to put generic fields first/last,"],[2899,13,2899,101,"-- but it works as long as a record doesn't have over 1,000,000 fields, which seems safe"],[2974,5,2974,106,"-- We know the expression being accessed is a record with a field of the type of the total expression"],[2981,33,2981,88,"-- This is, in essence, a generic record with one field"],[3034,13,3034,24,"-- UnitType"],[3035,13,3035,23,"-- TypeVar"],[3036,13,3036,25,"-- NamedType"],[3059,9,3059,88,"-- Sometimes constrained type variables are not respected, like in type aliases"],[3079,21,3079,50,"-- Nothing else is appendable"],[3104,21,3104,50,"-- Nothing else is comparable"],[3117,21,3117,48,"-- Nothing else is a number"],[3421,29,3421,115,"-- Only keep type variables assigned on the known record, since fields are independent"],[3422,29,3422,116,"-- For example, { a = Nothing, b = Nothing } should not require `a` and `b` to have the"],[3423,29,3423,114,"-- same type variable (but it does for the known record if they are both `Maybe var`)"],[3429,25,3429,87,"-- If any `Nothing`s were encountered, we're missing type info"],[3453,17,3453,47,"-- Too many fields are missing"],[3466,17,3466,88,"-- Record is not generic and has no extra fields, so it is a good match"],[3470,17,3470,94,"-- Record was not generic but extra fields were present, so it wasn't a match"],[3484,21,3484,82,"-- If there are multiple matches, try to disambiguate by type"],[3624,29,3624,95,"-- If the module name is empty, then update to current module name"],[3652,21,3652,75,"-- Generic records completely ignore typeclasses, i.e."],[3653,21,3653,76,"-- `type alias G comparable = { comparable | x : Int }`"],[3654,21,3654,56,"-- is just a normal generic record."],[3730,21,3730,48,"-- Tuples must be same size"],[3744,21,3744,100,"-- Divide fields into those that are present in both and those that are missing"],[3761,21,3761,85,"-- If the type var has been assigned, check if that type matches"],[3762,21,3762,116,"-- Remove the matched typevar, because if the same exists within it refers to a different value"],[3767,21,3767,131,"-- Handle base case.  This isn't right, but not worth going to the effort of matching typeclasses and the like"],[3782,13,3782,41,"-- Fields in both must match"],[3833,13,3833,92,"-- Divide fields into those that are present in both and those that are missing"],[3871,13,3871,56,"-- UnitType unifies with nothing but itself"],[3872,13,3872,57,"-- NamedType unifies with nothing but itself"],[3882,13,3882,99,"-- Dedupe the slow way because custom types aren't comparable and order doesn't matter"],[3923,13,3923,50,"-- Do not report 0 or 1 field records"]]]]
