[1,[[1,1,1,42,[0,[[1,8,1,27,["NoUnsortedCasesTest"]],[1,28,1,42,[1,[[1,38,1,41,[1,"all"]]]]]]]],[[3,1,13,10,[[3,8,3,23,["NoUnsortedCases"]],[0],[1,[4,5,13,10,[1,[[5,11,5,19,[1,"defaults"]],[6,11,6,34,[1,"doNotLookPastUnsortable"]],[7,11,7,28,[1,"doNotSortLiterals"]],[8,11,8,41,[1,"doNotSortTypesFromDependencies"]],[9,11,9,15,[1,"rule"]],[10,11,10,35,[1,"sortListPatternsByLength"]],[11,11,11,32,[1,"sortOnlyMatchingTypes"]],[12,11,12,50,[1,"sortTypesFromDependenciesAlphabetically"]]]]]]]],[14,1,14,19,[[14,8,14,19,["Review","Test"]],[0],[0]]],[15,1,15,44,[[15,8,15,12,["Test"]],[0],[1,[15,13,15,44,[1,[[15,23,15,27,[2,"Test"]],[15,29,15,37,[1,"describe"]],[15,39,15,43,[1,"test"]]]]]]]]],[[18,1,21,32,[0,[[0],[1,[18,1,18,11,[[18,1,18,4,"all"],[18,7,18,11,[1,[18,7,18,11,[[],"Test"]],[]]]]]],[19,1,21,32,[[19,1,19,4,"all"],[],[20,5,21,32,[0,[[20,5,20,13,[2,[],"describe"]],[20,14,20,31,[5,"NoUnsortedCases"]],[21,9,21,32,[9,[[21,11,21,17,[2,[],"passes"]],[21,19,21,24,[2,[],"fails"]],[21,26,21,30,[2,[],"bugs"]]]]]]]]]]]]],[24,1,112,10,[0,[[0],[1,[24,1,24,12,[[24,1,24,5,"bugs"],[24,8,24,12,[1,[24,8,24,12,[[],"Test"]],[]]]]]],[25,1,112,10,[[25,1,25,5,"bugs"],[],[26,5,112,10,[0,[[26,5,26,13,[2,[],"describe"]],[26,14,26,33,[5,"correctly handles"]],[27,9,112,10,[9,[[27,11,55,50,[1,"<|",1,[27,11,27,53,[0,[[27,11,27,15,[2,[],"test"]],[27,16,27,53,[5,"does not unstably sort patterns (1)"]]]]],[28,13,55,50,[18,[[[28,14,28,16,[1]]],[29,17,55,50,[1,"|>",0,[29,17,54,55,[1,"|>",0,[29,17,53,4,[5,"module A exposing (..)\n\n\ntype Foo\n    = A\n    | B\n\n\na =\n    case ( x, y, z ) of\n        ( _, False, Just B ) ->\n            0\n\n        ( _, False, Nothing ) ->\n            1\n\n        ( True, True, Just A ) ->\n            2\n\n        ( _, True, _ ) ->\n            3\n\n        _ ->\n            4\n"]],[54,24,54,55,[0,[[54,24,54,39,[2,["Review","Test"],"run"]],[54,40,54,55,[7,[54,41,54,54,[0,[[54,41,54,45,[2,[],"rule"]],[54,46,54,54,[2,[],"defaults"]]]]]]]]]]]],[55,24,55,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[56,11,111,26,[1,"<|",1,[56,11,56,53,[0,[[56,11,56,15,[2,[],"test"]],[56,16,56,53,[5,"does not unstably sort patterns (2)"]]]]],[57,13,111,26,[18,[[[57,14,57,16,[1]]],[58,17,111,26,[1,"|>",0,[58,17,83,55,[1,"|>",0,[58,17,82,4,[5,"module A exposing (..)\n\n\ntype Foo\n    = A\n    | B\n\n\na =\n    case ( x, y, z ) of\n        ( _, False, Nothing ) ->\n            1\n\n        ( _, False, Just B ) ->\n            0\n\n        ( True, True, Just A ) ->\n            2\n\n        ( _, True, _ ) ->\n            3\n\n        _ ->\n            4\n"]],[83,24,83,55,[0,[[83,24,83,39,[2,["Review","Test"],"run"]],[83,40,83,55,[7,[83,41,83,54,[0,[[83,41,83,45,[2,[],"rule"]],[83,46,83,54,[2,[],"defaults"]]]]]]]]]]]],[84,24,111,26,[0,[[84,24,84,48,[2,["Review","Test"],"expectErrors"]],[85,25,111,26,[9,[[85,27,110,4,[1,"|>",0,[85,27,85,40,[2,[],"unsortedError"]],[86,32,110,4,[0,[[86,32,86,53,[2,["Review","Test"],"whenFixed"]],[86,54,110,4,[5,"module A exposing (..)\n\n\ntype Foo\n    = A\n    | B\n\n\na =\n    case ( x, y, z ) of\n        ( _, False, Just B ) ->\n            0\n\n        ( _, False, Nothing ) ->\n            1\n\n        ( True, True, Just A ) ->\n            2\n\n        ( _, True, _ ) ->\n            3\n\n        _ ->\n            4\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[115,1,143,10,[0,[[0],[1,[115,1,115,14,[[115,1,115,7,"passes"],[115,10,115,14,[1,[115,10,115,14,[[],"Test"]],[]]]]]],[116,1,143,10,[[116,1,116,7,"passes"],[],[117,5,143,10,[0,[[117,5,117,13,[2,[],"describe"]],[117,14,117,45,[5,"does not report an error when"]],[118,9,143,10,[9,[[118,11,132,50,[1,"<|",1,[118,11,118,32,[0,[[118,11,118,15,[2,[],"test"]],[118,16,118,32,[5,"case is sorted"]]]]],[119,13,132,50,[18,[[[119,14,119,16,[1]]],[120,17,132,50,[1,"|>",0,[120,17,131,55,[1,"|>",0,[120,17,130,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]],[131,24,131,55,[0,[[131,24,131,39,[2,["Review","Test"],"run"]],[131,40,131,55,[7,[131,41,131,54,[0,[[131,41,131,45,[2,[],"rule"]],[131,46,131,54,[2,[],"defaults"]]]]]]]]]]]],[132,24,132,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[133,11,133,28,[2,[],"passesCrossModule"]],[134,11,134,26,[2,[],"passesWildcards"]],[135,11,135,36,[2,[],"passesTransparentPatterns"]],[136,11,136,23,[2,[],"passesTuples"]],[137,11,137,22,[2,[],"passesLists"]],[138,11,138,23,[2,[],"passesUncons"]],[139,11,139,25,[2,[],"passesLiterals"]],[140,11,140,38,[2,[],"passesTypesFromDependencies"]],[141,11,141,28,[2,[],"passesSubpatterns"]],[142,11,142,31,[2,[],"passesNotOnWhitelist"]]]]]]]]]]]]],[146,1,281,10,[0,[[0],[1,[146,1,146,25,[[146,1,146,18,"passesCrossModule"],[146,21,146,25,[1,[146,21,146,25,[[],"Test"]],[]]]]]],[147,1,281,10,[[147,1,147,18,"passesCrossModule"],[],[148,5,281,10,[0,[[148,5,148,13,[2,[],"describe"]],[148,14,148,49,[5,"case is defined in another module"]],[149,9,281,10,[9,[[149,11,168,50,[1,"<|",1,[149,11,149,31,[0,[[149,11,149,15,[2,[],"test"]],[149,16,149,31,[5,"and is sorted"]]]]],[150,13,168,50,[18,[[[150,14,150,16,[1]]],[151,17,168,50,[1,"|>",0,[151,17,167,64,[1,"|>",0,[151,17,166,18,[9,[[151,19,154,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[155,19,165,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]],[167,24,167,64,[0,[[167,24,167,48,[2,["Review","Test"],"runOnModules"]],[167,49,167,64,[7,[167,50,167,63,[0,[[167,50,167,54,[2,[],"rule"]],[167,55,167,63,[2,[],"defaults"]]]]]]]]]]]],[168,24,168,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[169,11,188,50,[1,"<|",1,[169,11,169,106,[0,[[169,11,169,15,[2,[],"test"]],[169,16,169,106,[5,"but type is not exported (this is a compile error, just for checking context management)"]]]]],[170,13,188,50,[18,[[[170,14,170,16,[1]]],[171,17,188,50,[1,"|>",0,[171,17,187,64,[1,"|>",0,[171,17,186,18,[9,[[171,19,174,4,[5,"module A exposing (Custom)\n\ntype Custom = Foo | Bar | Baz\n"]],[175,19,185,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n"]]]]],[187,24,187,64,[0,[[187,24,187,48,[2,["Review","Test"],"runOnModules"]],[187,49,187,64,[7,[187,50,187,63,[0,[[187,50,187,54,[2,[],"rule"]],[187,55,187,63,[2,[],"defaults"]]]]]]]]]]]],[188,24,188,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[189,11,208,50,[1,"<|",1,[189,11,189,38,[0,[[189,11,189,15,[2,[],"test"]],[189,16,189,38,[5,"with qualified names"]]]]],[190,13,208,50,[18,[[[190,14,190,16,[1]]],[191,17,208,50,[1,"|>",0,[191,17,207,64,[1,"|>",0,[191,17,206,18,[9,[[191,19,194,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[195,19,205,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]],[207,24,207,64,[0,[[207,24,207,48,[2,["Review","Test"],"runOnModules"]],[207,49,207,64,[7,[207,50,207,63,[0,[[207,50,207,54,[2,[],"rule"]],[207,55,207,63,[2,[],"defaults"]]]]]]]]]]]],[208,24,208,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[209,11,233,50,[1,"<|",1,[209,11,209,53,[0,[[209,11,209,15,[2,[],"test"]],[209,16,209,53,[5,"with qualified names disambiguating"]]]]],[210,13,233,50,[18,[[[210,14,210,16,[1]]],[211,17,233,50,[1,"|>",0,[211,17,232,64,[1,"|>",0,[211,17,231,18,[9,[[211,19,214,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[215,19,218,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[219,19,230,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]],[232,24,232,64,[0,[[232,24,232,48,[2,["Review","Test"],"runOnModules"]],[232,49,232,64,[7,[232,50,232,63,[0,[[232,50,232,54,[2,[],"rule"]],[232,55,232,63,[2,[],"defaults"]]]]]]]]]]]],[233,24,233,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[234,11,258,50,[1,"<|",1,[234,11,234,47,[0,[[234,11,234,15,[2,[],"test"]],[234,16,234,47,[5,"with disambiguation by import"]]]]],[235,13,258,50,[18,[[[235,14,235,16,[1]]],[236,17,258,50,[1,"|>",0,[236,17,257,64,[1,"|>",0,[236,17,256,18,[9,[[236,19,239,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[240,19,243,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[244,19,255,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]],[257,24,257,64,[0,[[257,24,257,48,[2,["Review","Test"],"runOnModules"]],[257,49,257,64,[7,[257,50,257,63,[0,[[257,50,257,54,[2,[],"rule"]],[257,55,257,63,[2,[],"defaults"]]]]]]]]]]]],[258,24,258,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[259,11,280,50,[1,"<|",1,[259,11,259,33,[0,[[259,11,259,15,[2,[],"test"]],[259,16,259,33,[5,"with local name"]]]]],[260,13,280,50,[18,[[[260,14,260,16,[1]]],[261,17,280,50,[1,"|>",0,[261,17,279,64,[1,"|>",0,[261,17,278,18,[9,[[261,19,264,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[265,19,277,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]],[279,24,279,64,[0,[[279,24,279,48,[2,["Review","Test"],"runOnModules"]],[279,49,279,64,[7,[279,50,279,63,[0,[[279,50,279,54,[2,[],"rule"]],[279,55,279,63,[2,[],"defaults"]]]]]]]]]]]],[280,24,280,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[284,1,432,10,[0,[[0],[1,[284,1,284,23,[[284,1,284,16,"passesWildcards"],[284,19,284,23,[1,[284,19,284,23,[[],"Test"]],[]]]]]],[285,1,432,10,[[285,1,285,16,"passesWildcards"],[],[286,5,432,10,[0,[[286,5,286,13,[2,[],"describe"]],[286,14,286,30,[5,"with wildcards"]],[287,9,432,10,[9,[[287,11,301,50,[1,"<|",1,[287,11,287,61,[0,[[287,11,287,15,[2,[],"test"]],[287,16,287,61,[5,"and is sorted order with all pattern at end"]]]]],[288,13,301,50,[18,[[[288,14,288,16,[1]]],[289,17,301,50,[1,"|>",0,[289,17,300,55,[1,"|>",0,[289,17,299,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        _ -> \"Bar\"\n"]],[300,24,300,55,[0,[[300,24,300,39,[2,["Review","Test"],"run"]],[300,40,300,55,[7,[300,41,300,54,[0,[[300,41,300,45,[2,[],"rule"]],[300,46,300,54,[2,[],"defaults"]]]]]]]]]]]],[301,24,301,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[302,11,316,50,[1,"<|",1,[302,11,302,55,[0,[[302,11,302,15,[2,[],"test"]],[302,16,302,55,[5,"and is sorted with var pattern at end"]]]]],[303,13,316,50,[18,[[[303,14,303,16,[1]]],[304,17,316,50,[1,"|>",0,[304,17,315,55,[1,"|>",0,[304,17,314,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        bar -> \"Bar\"\n"]],[315,24,315,55,[0,[[315,24,315,39,[2,["Review","Test"],"run"]],[315,40,315,55,[7,[315,41,315,54,[0,[[315,41,315,45,[2,[],"rule"]],[315,46,315,54,[2,[],"defaults"]]]]]]]]]]]],[316,24,316,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[317,11,333,50,[1,"<|",1,[317,11,317,82,[0,[[317,11,317,15,[2,[],"test"]],[317,16,317,82,[5,"preserves control flow when sorting would destroy it with tuples"]]]]],[318,13,333,50,[18,[[[318,14,318,16,[1]]],[319,17,333,50,[1,"|>",0,[319,17,332,55,[1,"|>",0,[319,17,331,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (_, A) -> \"A\"\n        (Foo, _) -> \"FooNotA\"\n        _ -> \"Too many...\"\n"]],[332,24,332,55,[0,[[332,24,332,39,[2,["Review","Test"],"run"]],[332,40,332,55,[7,[332,41,332,54,[0,[[332,41,332,45,[2,[],"rule"]],[332,46,332,54,[2,[],"defaults"]]]]]]]]]]]],[333,24,333,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[334,11,401,26,[1,"<|",1,[334,11,334,70,[0,[[334,11,334,15,[2,[],"test"]],[334,16,334,70,[5,"control flow is not mangled by transitive assumption"]]]]],[335,13,401,26,[18,[[[335,14,335,16,[1]]],[336,17,401,26,[1,"|>",0,[336,17,367,55,[1,"|>",0,[336,17,366,4,[5,"module A exposing (..)\n\ntype T\n    = A\n    | B\n    | C String\n    | D Int\n\nfoo t1 t2=\n    case ( t1, t2 ) of\n        ( A, _ ) ->\n            Just A\n\n        ( _, A ) ->\n            Just A\n\n        ( _, C s ) ->\n            Just (C s)\n\n        ( C s, _ ) ->\n            Just (C s)\n\n        ( B, _ ) ->\n            Just B\n\n        ( _, B ) ->\n            Just B\n\n        ( D _, D i ) ->\n            Just (D i)\n"]],[367,24,367,55,[0,[[367,24,367,39,[2,["Review","Test"],"run"]],[367,40,367,55,[7,[367,41,367,54,[0,[[367,41,367,45,[2,[],"rule"]],[367,46,367,54,[2,[],"defaults"]]]]]]]]]]]],[368,24,401,26,[0,[[368,24,368,48,[2,["Review","Test"],"expectErrors"]],[369,25,401,26,[9,[[369,27,400,4,[1,"|>",0,[369,27,369,40,[2,[],"unsortedError"]],[370,32,400,4,[0,[[370,32,370,53,[2,["Review","Test"],"whenFixed"]],[370,54,400,4,[5,"module A exposing (..)\n\ntype T\n    = A\n    | B\n    | C String\n    | D Int\n\nfoo t1 t2=\n    case ( t1, t2 ) of\n        ( A, _ ) ->\n            Just A\n\n        ( _, A ) ->\n            Just A\n\n        ( _, C s ) ->\n            Just (C s)\n\n        ( B, _ ) ->\n            Just B\n\n        ( C s, _ ) ->\n            Just (C s)\n\n        ( _, B ) ->\n            Just B\n\n        ( D _, D i ) ->\n            Just (D i)\n"]]]]]]]]]]]]]]]]]]]],[402,11,416,50,[1,"<|",1,[402,11,402,81,[0,[[402,11,402,15,[2,[],"test"]],[402,16,402,81,[5,"preserves control flow when sorting would destroy it with lists"]]]]],[403,13,416,50,[18,[[[403,14,403,16,[1]]],[404,17,416,50,[1,"|>",0,[404,17,415,55,[1,"|>",0,[404,17,414,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        [_, Foo] -> \"_Foo\"\n        [Foo, _] -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[415,24,415,55,[0,[[415,24,415,39,[2,["Review","Test"],"run"]],[415,40,415,55,[7,[415,41,415,54,[0,[[415,41,415,45,[2,[],"rule"]],[415,46,415,54,[2,[],"defaults"]]]]]]]]]]]],[416,24,416,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[417,11,431,50,[1,"<|",1,[417,11,417,82,[0,[[417,11,417,15,[2,[],"test"]],[417,16,417,82,[5,"preserves control flow when sorting would destroy it with uncons"]]]]],[418,13,431,50,[18,[[[418,14,418,16,[1]]],[419,17,431,50,[1,"|>",0,[419,17,430,55,[1,"|>",0,[419,17,429,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        _ :: Foo :: _ -> \"_Foo_\"\n        Foo :: _ -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[430,24,430,55,[0,[[430,24,430,39,[2,["Review","Test"],"run"]],[430,40,430,55,[7,[430,41,430,54,[0,[[430,41,430,45,[2,[],"rule"]],[430,46,430,54,[2,[],"defaults"]]]]]]]]]]]],[431,24,431,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[435,1,468,10,[0,[[0],[1,[435,1,435,33,[[435,1,435,26,"passesTransparentPatterns"],[435,29,435,33,[1,[435,29,435,33,[[],"Test"]],[]]]]]],[436,1,468,10,[[436,1,436,26,"passesTransparentPatterns"],[],[437,5,468,10,[0,[[437,5,437,13,[2,[],"describe"]],[437,14,437,41,[5,"with transparent patterns"]],[438,9,468,10,[9,[[438,11,452,50,[1,"<|",1,[438,11,438,59,[0,[[438,11,438,15,[2,[],"test"]],[438,16,438,59,[5,"and is sorted with parenthesized patterns"]]]]],[439,13,452,50,[18,[[[439,14,439,16,[1]]],[440,17,452,50,[1,"|>",0,[440,17,451,55,[1,"|>",0,[440,17,450,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        (Baz) -> \"Bar\"\n"]],[451,24,451,55,[0,[[451,24,451,39,[2,["Review","Test"],"run"]],[451,40,451,55,[7,[451,41,451,54,[0,[[451,41,451,45,[2,[],"rule"]],[451,46,451,54,[2,[],"defaults"]]]]]]]]]]]],[452,24,452,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[453,11,467,50,[1,"<|",1,[453,11,453,47,[0,[[453,11,453,15,[2,[],"test"]],[453,16,453,47,[5,"and is sorted with as pattern"]]]]],[454,13,467,50,[18,[[[454,14,454,16,[1]]],[455,17,467,50,[1,"|>",0,[455,17,466,55,[1,"|>",0,[455,17,465,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        (Bar as b) -> \"Bar\"\n        Baz -> \"Baz\"\n"]],[466,24,466,55,[0,[[466,24,466,39,[2,["Review","Test"],"run"]],[466,40,466,55,[7,[466,41,466,54,[0,[[466,41,466,45,[2,[],"rule"]],[466,46,466,54,[2,[],"defaults"]]]]]]]]]]]],[467,24,467,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[471,1,586,10,[0,[[0],[1,[471,1,471,20,[[471,1,471,13,"passesTuples"],[471,16,471,20,[1,[471,16,471,20,[[],"Test"]],[]]]]]],[472,1,586,10,[[472,1,472,13,"passesTuples"],[],[473,5,586,10,[0,[[473,5,473,13,[2,[],"describe"]],[473,14,473,27,[5,"with tuples"]],[474,9,586,10,[9,[[474,11,496,50,[1,"<|",1,[474,11,474,31,[0,[[474,11,474,15,[2,[],"test"]],[474,16,474,31,[5,"and is sorted"]]]]],[475,13,496,50,[18,[[[475,14,475,16,[1]]],[476,17,496,50,[1,"|>",0,[476,17,495,55,[1,"|>",0,[476,17,494,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]],[495,24,495,55,[0,[[495,24,495,39,[2,["Review","Test"],"run"]],[495,40,495,55,[7,[495,41,495,54,[0,[[495,41,495,45,[2,[],"rule"]],[495,46,495,54,[2,[],"defaults"]]]]]]]]]]]],[496,24,496,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[497,11,520,50,[1,"<|",1,[497,11,497,46,[0,[[497,11,497,15,[2,[],"test"]],[497,16,497,46,[5,"and is sorted with threeples"]]]]],[498,13,520,50,[18,[[[498,14,498,16,[1]]],[499,17,520,50,[1,"|>",0,[499,17,519,55,[1,"|>",0,[499,17,518,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case (custom1, custom2, custom3) of\n        (Foo, A, Foo) -> \"FooAFoo\"\n        (Foo, A, Bar) -> \"FooABar\"\n        (Foo, A, Baz) -> \"FooABaz\"\n        (Foo, B, Foo) -> \"FooBFoo\"\n        (Foo, B, Bar) -> \"FooBBar\"\n        (Foo, B, Baz) -> \"FooBBaz\"\n        (Foo, C, Foo) -> \"FooCFoo\"\n        (Foo, C, Bar) -> \"FooCBar\"\n        (Foo, C, Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[519,24,519,55,[0,[[519,24,519,39,[2,["Review","Test"],"run"]],[519,40,519,55,[7,[519,41,519,54,[0,[[519,41,519,45,[2,[],"rule"]],[519,46,519,54,[2,[],"defaults"]]]]]]]]]]]],[520,24,520,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[521,11,544,50,[1,"<|",1,[521,11,521,50,[0,[[521,11,521,15,[2,[],"test"]],[521,16,521,50,[5,"and is sorted with nested tuples"]]]]],[522,13,544,50,[18,[[[522,14,522,16,[1]]],[523,17,544,50,[1,"|>",0,[523,17,543,55,[1,"|>",0,[523,17,542,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, custom2), custom3) of\n        ((Foo, A), Foo) -> \"FooAFoo\"\n        ((Foo, A), Bar) -> \"FooABar\"\n        ((Foo, A), Baz) -> \"FooABaz\"\n        ((Foo, B), Foo) -> \"FooBFoo\"\n        ((Foo, B), Bar) -> \"FooBBar\"\n        ((Foo, B), Baz) -> \"FooBBaz\"\n        ((Foo, C), Foo) -> \"FooCFoo\"\n        ((Foo, C), Bar) -> \"FooCBar\"\n        ((Foo, C), Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[543,24,543,55,[0,[[543,24,543,39,[2,["Review","Test"],"run"]],[543,40,543,55,[7,[543,41,543,54,[0,[[543,41,543,45,[2,[],"rule"]],[543,46,543,54,[2,[],"defaults"]]]]]]]]]]]],[544,24,544,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[545,11,565,50,[1,"<|",1,[545,11,545,57,[0,[[545,11,545,15,[2,[],"test"]],[545,16,545,57,[5,"and is sorted with deeply nested tuples"]]]]],[546,13,565,50,[18,[[[546,14,546,16,[1]]],[547,17,565,50,[1,"|>",0,[547,17,564,55,[1,"|>",0,[547,17,563,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, (custom2, custom2)), custom3, (custom2, custom2)) of\n        ((Foo, (A, A)), Foo, (A, A)) -> \"1\"\n        ((Foo, (A, B)), Foo, (A, A)) -> \"2\"\n        ((Foo, (A, C)), Foo, (A, A)) -> \"3\"\n        ((Foo, (B, A)), Foo, (A, A)) -> \"4\"\n        ((Foo, (B, A)), Foo, (A, C)) -> \"5\"\n        ((Foo, (B, A)), Foo, (B, A)) -> \"6\"\n        _ -> \"Too many...\"\n"]],[564,24,564,55,[0,[[564,24,564,39,[2,["Review","Test"],"run"]],[564,40,564,55,[7,[564,41,564,54,[0,[[564,41,564,45,[2,[],"rule"]],[564,46,564,54,[2,[],"defaults"]]]]]]]]]]]],[565,24,565,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[566,11,585,50,[1,"<|",1,[566,11,566,83,[0,[[566,11,566,15,[2,[],"test"]],[566,16,566,83,[5,"preserves order when moving wildcards would create compile errors"]]]]],[567,13,585,50,[18,[[[567,14,567,16,[1]]],[568,17,585,50,[1,"|>",0,[568,17,584,55,[1,"|>",0,[568,17,583,4,[5,"module A exposing (..)\n\ntype Thing\n    = Thing Int Int\n    | OtherThing\n\ntoInt : Thing -> Result a -> Int\ntoInt foo bar =\n    case ( foo, bar) of\n        ( Thing _ _, _ ) ->\n            1\n        ( _, Ok _ ) ->\n            2\n        ( _, Err _ ) ->\n           3\n"]],[584,24,584,55,[0,[[584,24,584,39,[2,["Review","Test"],"run"]],[584,40,584,55,[7,[584,41,584,54,[0,[[584,41,584,45,[2,[],"rule"]],[584,46,584,54,[2,[],"defaults"]]]]]]]]]]]],[585,24,585,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[589,1,595,10,[0,[[0],[1,[589,1,589,19,[[589,1,589,12,"passesLists"],[589,15,589,19,[1,[589,15,589,19,[[],"Test"]],[]]]]]],[590,1,595,10,[[590,1,590,12,"passesLists"],[],[591,5,595,10,[0,[[591,5,591,13,[2,[],"describe"]],[591,14,591,26,[5,"with lists"]],[592,9,595,10,[9,[[592,11,592,33,[2,[],"passesListsLengthFirst"]],[593,11,593,33,[2,[],"passesListsElementwise"]],[594,11,594,23,[2,[],"passesUncons"]]]]]]]]]]]]],[598,1,657,10,[0,[[0],[1,[598,1,598,30,[[598,1,598,23,"passesListsLengthFirst"],[598,26,598,30,[1,[598,26,598,30,[[],"Test"]],[]]]]]],[599,1,657,10,[[599,1,599,23,"passesListsLengthFirst"],[],[600,5,657,10,[0,[[600,5,600,13,[2,[],"describe"]],[600,14,600,35,[5,"sorted length-first"]],[601,9,657,10,[9,[[601,11,628,50,[1,"<|",1,[601,11,601,31,[0,[[601,11,601,15,[2,[],"test"]],[601,16,601,31,[5,"and is sorted"]]]]],[602,13,628,50,[18,[[[602,14,602,16,[1]]],[603,17,628,50,[1,"|>",0,[603,17,627,26,[1,"|>",0,[603,17,622,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]],[623,24,627,26,[0,[[623,24,623,39,[2,["Review","Test"],"run"]],[624,25,627,26,[7,[624,26,626,36,[1,"|>",0,[624,26,625,56,[1,"|>",0,[624,26,624,34,[2,[],"defaults"]],[625,32,625,56,[2,[],"sortListPatternsByLength"]]]],[626,32,626,36,[2,[],"rule"]]]]]]]]]]],[628,24,628,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[629,11,656,50,[1,"<|",1,[629,11,629,50,[0,[[629,11,629,15,[2,[],"test"]],[629,16,629,50,[5,"is sorted with mixed list/uncons"]]]]],[630,13,656,50,[18,[[[630,14,630,16,[1]]],[631,17,656,50,[1,"|>",0,[631,17,655,26,[1,"|>",0,[631,17,650,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        Foo :: [] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Bar, Foo] -> \"BarFoo\"\n        Bar :: Bar :: [] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Foo :: _ -> \"Foo+\"\n        Bar :: _ -> \"Bar+\"\n        _ -> \"Too many...\"\n"]],[651,24,655,26,[0,[[651,24,651,39,[2,["Review","Test"],"run"]],[652,25,655,26,[7,[652,26,654,36,[1,"|>",0,[652,26,653,56,[1,"|>",0,[652,26,652,34,[2,[],"defaults"]],[653,32,653,56,[2,[],"sortListPatternsByLength"]]]],[654,32,654,36,[2,[],"rule"]]]]]]]]]]],[656,24,656,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[660,1,715,10,[0,[[0],[1,[660,1,660,30,[[660,1,660,23,"passesListsElementwise"],[660,26,660,30,[1,[660,26,660,30,[[],"Test"]],[]]]]]],[661,1,715,10,[[661,1,661,23,"passesListsElementwise"],[],[662,5,715,10,[0,[[662,5,662,13,[2,[],"describe"]],[662,14,662,34,[5,"sorted elementwise"]],[663,9,715,10,[9,[[663,11,686,50,[1,"<|",1,[663,11,663,27,[0,[[663,11,663,15,[2,[],"test"]],[663,16,663,27,[5,"is sorted"]]]]],[664,13,686,50,[18,[[[664,14,664,16,[1]]],[665,17,686,50,[1,"|>",0,[665,17,685,55,[1,"|>",0,[665,17,684,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[685,24,685,55,[0,[[685,24,685,39,[2,["Review","Test"],"run"]],[685,40,685,55,[7,[685,41,685,54,[0,[[685,41,685,45,[2,[],"rule"]],[685,46,685,54,[2,[],"defaults"]]]]]]]]]]]],[686,24,686,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[687,11,714,50,[1,"<|",1,[687,11,687,50,[0,[[687,11,687,15,[2,[],"test"]],[687,16,687,50,[5,"is sorted with mixed list/uncons"]]]]],[688,13,714,50,[18,[[[688,14,688,16,[1]]],[689,17,714,50,[1,"|>",0,[689,17,713,55,[1,"|>",0,[689,17,712,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        Foo :: Foo :: [] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        Foo :: _ -> \"Foo+\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Bar :: _ -> \"Bar+\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[713,24,713,55,[0,[[713,24,713,39,[2,["Review","Test"],"run"]],[713,40,713,55,[7,[713,41,713,54,[0,[[713,41,713,45,[2,[],"rule"]],[713,46,713,54,[2,[],"defaults"]]]]]]]]]]]],[714,24,714,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[718,1,786,10,[0,[[0],[1,[718,1,718,20,[[718,1,718,13,"passesUncons"],[718,16,718,20,[1,[718,16,718,20,[[],"Test"]],[]]]]]],[719,1,786,10,[[719,1,719,13,"passesUncons"],[],[720,5,786,10,[0,[[720,5,720,13,[2,[],"describe"]],[720,14,720,27,[5,"with uncons"]],[721,9,786,10,[9,[[721,11,735,50,[1,"<|",1,[721,11,721,27,[0,[[721,11,721,15,[2,[],"test"]],[721,16,721,27,[5,"is sorted"]]]]],[722,13,735,50,[18,[[[722,14,722,16,[1]]],[723,17,735,50,[1,"|>",0,[723,17,734,55,[1,"|>",0,[723,17,733,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        Foo :: _ -> \"Foo\"\n        Bar :: _ -> \"Bar\"\n        Baz :: _ -> \"Baz\"\n"]],[734,24,734,55,[0,[[734,24,734,39,[2,["Review","Test"],"run"]],[734,40,734,55,[7,[734,41,734,54,[0,[[734,41,734,45,[2,[],"rule"]],[734,46,734,54,[2,[],"defaults"]]]]]]]]]]]],[735,24,735,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[736,11,750,50,[1,"<|",1,[736,11,736,44,[0,[[736,11,736,15,[2,[],"test"]],[736,16,736,44,[5,"is sorted including tuples"]]]]],[737,13,750,50,[18,[[[737,14,737,16,[1]]],[738,17,750,50,[1,"|>",0,[738,17,749,55,[1,"|>",0,[738,17,748,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List (Custom, Int) -> String\ntoString xs =\n    case xs of\n        (Foo, 1) :: (Foo, 2) :: _ -> \"Foo\"\n        (Bar, 1) :: (Bar, 2) :: _ -> \"Bar\"\n        (Baz, 1) :: (Baz, 2) :: _ -> \"Baz\"\n"]],[749,24,749,55,[0,[[749,24,749,39,[2,["Review","Test"],"run"]],[749,40,749,55,[7,[749,41,749,54,[0,[[749,41,749,45,[2,[],"rule"]],[749,46,749,54,[2,[],"defaults"]]]]]]]]]]]],[750,24,750,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[751,11,766,50,[1,"<|",1,[751,11,751,106,[0,[[751,11,751,15,[2,[],"test"]],[751,16,751,106,[5,"preserves order when mixed with lists when matches could be equally short in simple case"]]]]],[752,13,766,50,[18,[[[752,14,752,16,[1]]],[753,17,766,50,[1,"|>",0,[753,17,765,55,[1,"|>",0,[753,17,764,4,[5,"module A exposing (..)\n\nfoo : List String -> String\nfoo list =\n    case list of\n        [] ->\n            \"\"\n        [ last ] ->\n            last\n        second :: rest ->\n            second ++ rest\n"]],[765,24,765,55,[0,[[765,24,765,39,[2,["Review","Test"],"run"]],[765,40,765,55,[7,[765,41,765,54,[0,[[765,41,765,45,[2,[],"rule"]],[765,46,765,54,[2,[],"defaults"]]]]]]]]]]]],[766,24,766,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[767,11,785,50,[1,"<|",1,[767,11,767,107,[0,[[767,11,767,15,[2,[],"test"]],[767,16,767,107,[5,"preserves order when mixed with lists when matches could be equally short in complex case"]]]]],[768,13,785,50,[18,[[[768,14,768,16,[1]]],[769,17,785,50,[1,"|>",0,[769,17,784,55,[1,"|>",0,[769,17,783,4,[5,"module A exposing (..)\n\ntype Nonempty a\n    = Nonempty a (List a)\n\nfoo : String -> Nonempty String -> String\nfoo fn list =\n    case list of\n        Nonempty first [] ->\n            first\n        Nonempty first [ last ] ->\n            first ++ \" \" ++ fn ++ \" \" ++ last\n        Nonempty first (second :: rest) ->\n            first ++ \", \" ++ foo fn (Nonempty second rest)\n"]],[784,24,784,55,[0,[[784,24,784,39,[2,["Review","Test"],"run"]],[784,40,784,55,[7,[784,41,784,54,[0,[[784,41,784,45,[2,[],"rule"]],[784,46,784,54,[2,[],"defaults"]]]]]]]]]]]],[785,24,785,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[789,1,824,10,[0,[[0],[1,[789,1,789,22,[[789,1,789,15,"passesLiterals"],[789,18,789,22,[1,[789,18,789,22,[[],"Test"]],[]]]]]],[790,1,824,10,[[790,1,790,15,"passesLiterals"],[],[791,5,824,10,[0,[[791,5,791,13,[2,[],"describe"]],[791,14,791,29,[5,"with literals"]],[792,9,824,10,[9,[[792,11,805,50,[1,"<|",1,[792,11,792,34,[0,[[792,11,792,15,[2,[],"test"]],[792,16,792,34,[5,"in literal order"]]]]],[793,13,805,50,[18,[[[793,14,793,16,[1]]],[794,17,805,50,[1,"|>",0,[794,17,804,55,[1,"|>",0,[794,17,803,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0 -> \"0\"\n        2 -> \"2\"\n        4 -> \"4\"\n        _ -> \"Something else...\"\n"]],[804,24,804,55,[0,[[804,24,804,39,[2,["Review","Test"],"run"]],[804,40,804,55,[7,[804,41,804,54,[0,[[804,41,804,45,[2,[],"rule"]],[804,46,804,54,[2,[],"defaults"]]]]]]]]]]]],[805,24,805,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[806,11,823,50,[1,"<|",1,[806,11,806,66,[0,[[806,11,806,15,[2,[],"test"]],[806,16,806,66,[5,"in literal order in combination with other types"]]]]],[807,13,823,50,[18,[[[807,14,807,16,[1]]],[808,17,823,50,[1,"|>",0,[808,17,822,55,[1,"|>",0,[808,17,821,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Bar, 0) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]],[822,24,822,55,[0,[[822,24,822,39,[2,["Review","Test"],"run"]],[822,40,822,55,[7,[822,41,822,54,[0,[[822,41,822,45,[2,[],"rule"]],[822,46,822,54,[2,[],"defaults"]]]]]]]]]]]],[823,24,823,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[827,1,880,10,[0,[[0],[1,[827,1,827,35,[[827,1,827,28,"passesTypesFromDependencies"],[827,31,827,35,[1,[827,31,827,35,[[],"Test"]],[]]]]]],[828,1,880,10,[[828,1,828,28,"passesTypesFromDependencies"],[],[829,5,880,10,[0,[[829,5,829,13,[2,[],"describe"]],[829,14,829,44,[5,"with types from dependencies"]],[830,9,880,10,[9,[[830,11,841,50,[1,"<|",1,[830,11,830,48,[0,[[830,11,830,15,[2,[],"test"]],[830,16,830,48,[5,"is sorted in declaration order"]]]]],[831,13,841,50,[18,[[[831,14,831,16,[1]]],[832,17,841,50,[1,"|>",0,[832,17,840,55,[1,"|>",0,[832,17,839,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]],[840,24,840,55,[0,[[840,24,840,39,[2,["Review","Test"],"run"]],[840,40,840,55,[7,[840,41,840,54,[0,[[840,41,840,45,[2,[],"rule"]],[840,46,840,54,[2,[],"defaults"]]]]]]]]]]]],[841,24,841,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[842,11,857,50,[1,"<|",1,[842,11,842,49,[0,[[842,11,842,15,[2,[],"test"]],[842,16,842,49,[5,"is sorted in alphabetical order"]]]]],[843,13,857,50,[18,[[[843,14,843,16,[1]]],[844,17,857,50,[1,"|>",0,[844,17,856,26,[1,"|>",0,[844,17,851,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n"]],[852,24,856,26,[0,[[852,24,852,39,[2,["Review","Test"],"run"]],[853,25,856,26,[7,[853,26,855,36,[1,"|>",0,[853,26,854,71,[1,"|>",0,[853,26,853,34,[2,[],"defaults"]],[854,32,854,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[855,32,855,36,[2,[],"rule"]]]]]]]]]]],[857,24,857,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[858,11,879,50,[1,"<|",1,[858,11,858,47,[0,[[858,11,858,15,[2,[],"test"]],[858,16,858,47,[5,"in any order when not sorting"]]]]],[859,13,879,50,[18,[[[859,14,859,16,[1]]],[860,17,879,50,[1,"|>",0,[860,17,878,26,[1,"|>",0,[860,17,873,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n\ntoString2 : Bool -> String\ntoString2 b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]],[874,24,878,26,[0,[[874,24,874,39,[2,["Review","Test"],"run"]],[875,25,878,26,[7,[875,26,877,36,[1,"|>",0,[875,26,876,62,[1,"|>",0,[875,26,875,34,[2,[],"defaults"]],[876,32,876,62,[2,[],"doNotSortTypesFromDependencies"]]]],[877,32,877,36,[2,[],"rule"]]]]]]]]]]],[879,24,879,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[883,1,949,10,[0,[[0],[1,[883,1,883,25,[[883,1,883,18,"passesSubpatterns"],[883,21,883,25,[1,[883,21,883,25,[[],"Test"]],[]]]]]],[884,1,949,10,[[884,1,884,18,"passesSubpatterns"],[],[885,5,949,10,[0,[[885,5,885,13,[2,[],"describe"]],[885,14,885,32,[5,"with subpatterns"]],[886,9,949,10,[9,[[886,11,905,50,[1,"<|",1,[886,11,886,27,[0,[[886,11,886,15,[2,[],"test"]],[886,16,886,27,[5,"is sorted"]]]]],[887,13,905,50,[18,[[[887,14,887,16,[1]]],[888,17,905,50,[1,"|>",0,[888,17,904,26,[1,"|>",0,[888,17,899,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]],[900,24,904,26,[0,[[900,24,900,39,[2,["Review","Test"],"run"]],[901,25,904,26,[7,[901,26,903,36,[1,"|>",0,[901,26,902,71,[1,"|>",0,[901,26,901,34,[2,[],"defaults"]],[902,32,902,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[903,32,903,36,[2,[],"rule"]]]]]]]]]]],[905,24,905,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[906,11,926,50,[1,"<|",1,[906,11,906,44,[0,[[906,11,906,15,[2,[],"test"]],[906,16,906,44,[5,"with non-sortable patterns"]]]]],[907,13,926,50,[18,[[[907,14,907,16,[1]]],[908,17,926,50,[1,"|>",0,[908,17,925,26,[1,"|>",0,[908,17,920,4,[5,"module A exposing (..)\n\ntype Container = Container Custom Int Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container Foo 1 2 -> \"Foo\"\n        Container Bar 2 1 -> \"Bar\"\n        Container Baz 2 2 -> \"Baz\"\n"]],[921,24,925,26,[0,[[921,24,921,39,[2,["Review","Test"],"run"]],[922,25,925,26,[7,[922,26,924,36,[1,"|>",0,[922,26,923,49,[1,"|>",0,[922,26,922,34,[2,[],"defaults"]],[923,32,923,49,[2,[],"doNotSortLiterals"]]]],[924,32,924,36,[2,[],"rule"]]]]]]]]]]],[926,24,926,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[927,11,948,50,[1,"<|",1,[927,11,927,73,[0,[[927,11,927,15,[2,[],"test"]],[927,16,927,73,[5,"does not sort past non-sortable patterns when specified"]]]]],[928,13,948,50,[18,[[[928,14,928,16,[1]]],[929,17,948,50,[1,"|>",0,[929,17,947,26,[1,"|>",0,[929,17,941,4,[5,"module A exposing (..)\n\ntype Container = Container Int Custom Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container 1 Baz 1 -> \"Baz\"\n        Container 1 Foo 1 -> \"Foo\"\n        Container 1 Bar 1 -> \"Bar\"\n"]],[942,24,947,26,[0,[[942,24,942,39,[2,["Review","Test"],"run"]],[943,25,947,26,[7,[943,26,946,36,[1,"|>",0,[943,26,945,55,[1,"|>",0,[943,26,944,49,[1,"|>",0,[943,26,943,34,[2,[],"defaults"]],[944,32,944,49,[2,[],"doNotSortLiterals"]]]],[945,32,945,55,[2,[],"doNotLookPastUnsortable"]]]],[946,32,946,36,[2,[],"rule"]]]]]]]]]]],[948,24,948,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[952,1,1108,10,[0,[[0],[1,[952,1,952,28,[[952,1,952,21,"passesNotOnWhitelist"],[952,24,952,28,[1,[952,24,952,28,[[],"Test"]],[]]]]]],[953,1,1108,10,[[953,1,953,21,"passesNotOnWhitelist"],[],[954,5,1108,10,[0,[[954,5,954,13,[2,[],"describe"]],[954,14,954,32,[5,"not on whitelist"]],[955,9,1108,10,[9,[[955,11,978,50,[1,"<|",1,[955,11,955,28,[0,[[955,11,955,15,[2,[],"test"]],[955,16,955,28,[5,"not sorted"]]]]],[956,13,978,50,[18,[[[956,14,956,16,[1]]],[957,17,978,50,[1,"|>",0,[957,17,977,26,[1,"|>",0,[957,17,972,18,[9,[[957,19,960,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[961,19,971,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[973,24,977,26,[0,[[973,24,973,48,[2,["Review","Test"],"runOnModules"]],[974,25,977,26,[7,[974,26,976,36,[1,"|>",0,[974,26,975,85,[1,"|>",0,[974,26,974,34,[2,[],"defaults"]],[975,32,975,85,[0,[[975,32,975,53,[2,[],"sortOnlyMatchingTypes"]],[975,54,975,85,[7,[975,55,975,84,[0,[[975,55,975,66,[2,[],"matchesName"]],[975,67,975,84,[6,[[975,69,975,72,[5,"B"]],[975,74,975,82,[5,"Custom"]]]]]]]]]]]]]]],[976,32,976,36,[2,[],"rule"]]]]]]]]]]],[978,24,978,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[979,11,1002,50,[1,"<|",1,[979,11,979,38,[0,[[979,11,979,15,[2,[],"test"]],[979,16,979,38,[5,"with qualified names"]]]]],[980,13,1002,50,[18,[[[980,14,980,16,[1]]],[981,17,1002,50,[1,"|>",0,[981,17,1001,26,[1,"|>",0,[981,17,996,18,[9,[[981,19,984,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[985,19,995,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n        A.Baz -> \"Baz\"\n"]]]]],[997,24,1001,26,[0,[[997,24,997,48,[2,["Review","Test"],"runOnModules"]],[998,25,1001,26,[7,[998,26,1000,36,[1,"|>",0,[998,26,999,85,[1,"|>",0,[998,26,998,34,[2,[],"defaults"]],[999,32,999,85,[0,[[999,32,999,53,[2,[],"sortOnlyMatchingTypes"]],[999,54,999,85,[7,[999,55,999,84,[0,[[999,55,999,66,[2,[],"matchesName"]],[999,67,999,84,[6,[[999,69,999,72,[5,"B"]],[999,74,999,82,[5,"Custom"]]]]]]]]]]]]]]],[1000,32,1000,36,[2,[],"rule"]]]]]]]]]]],[1002,24,1002,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1003,11,1031,50,[1,"<|",1,[1003,11,1003,53,[0,[[1003,11,1003,15,[2,[],"test"]],[1003,16,1003,53,[5,"with qualified names disambiguating"]]]]],[1004,13,1031,50,[18,[[[1004,14,1004,16,[1]]],[1005,17,1031,50,[1,"|>",0,[1005,17,1030,26,[1,"|>",0,[1005,17,1025,18,[9,[[1005,19,1008,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1009,19,1012,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1013,19,1024,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n        A.Baz -> \"Baz\"\n"]]]]],[1026,24,1030,26,[0,[[1026,24,1026,48,[2,["Review","Test"],"runOnModules"]],[1027,25,1030,26,[7,[1027,26,1029,36,[1,"|>",0,[1027,26,1028,85,[1,"|>",0,[1027,26,1027,34,[2,[],"defaults"]],[1028,32,1028,85,[0,[[1028,32,1028,53,[2,[],"sortOnlyMatchingTypes"]],[1028,54,1028,85,[7,[1028,55,1028,84,[0,[[1028,55,1028,66,[2,[],"matchesName"]],[1028,67,1028,84,[6,[[1028,69,1028,72,[5,"B"]],[1028,74,1028,82,[5,"Custom"]]]]]]]]]]]]]]],[1029,32,1029,36,[2,[],"rule"]]]]]]]]]]],[1031,24,1031,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1032,11,1060,50,[1,"<|",1,[1032,11,1032,47,[0,[[1032,11,1032,15,[2,[],"test"]],[1032,16,1032,47,[5,"with disambiguation by import"]]]]],[1033,13,1060,50,[18,[[[1033,14,1033,16,[1]]],[1034,17,1060,50,[1,"|>",0,[1034,17,1059,26,[1,"|>",0,[1034,17,1054,18,[9,[[1034,19,1037,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1038,19,1041,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1042,19,1053,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n"]]]]],[1055,24,1059,26,[0,[[1055,24,1055,48,[2,["Review","Test"],"runOnModules"]],[1056,25,1059,26,[7,[1056,26,1058,36,[1,"|>",0,[1056,26,1057,85,[1,"|>",0,[1056,26,1056,34,[2,[],"defaults"]],[1057,32,1057,85,[0,[[1057,32,1057,53,[2,[],"sortOnlyMatchingTypes"]],[1057,54,1057,85,[7,[1057,55,1057,84,[0,[[1057,55,1057,66,[2,[],"matchesName"]],[1057,67,1057,84,[6,[[1057,69,1057,72,[5,"A"]],[1057,74,1057,82,[5,"Custom"]]]]]]]]]]]]]]],[1058,32,1058,36,[2,[],"rule"]]]]]]]]]]],[1060,24,1060,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1061,11,1086,50,[1,"<|",1,[1061,11,1061,33,[0,[[1061,11,1061,15,[2,[],"test"]],[1061,16,1061,33,[5,"with local name"]]]]],[1062,13,1086,50,[18,[[[1062,14,1062,16,[1]]],[1063,17,1086,50,[1,"|>",0,[1063,17,1085,26,[1,"|>",0,[1063,17,1080,18,[9,[[1063,19,1066,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1067,19,1079,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n"]]]]],[1081,24,1085,26,[0,[[1081,24,1081,48,[2,["Review","Test"],"runOnModules"]],[1082,25,1085,26,[7,[1082,26,1084,36,[1,"|>",0,[1082,26,1083,85,[1,"|>",0,[1082,26,1082,34,[2,[],"defaults"]],[1083,32,1083,85,[0,[[1083,32,1083,53,[2,[],"sortOnlyMatchingTypes"]],[1083,54,1083,85,[7,[1083,55,1083,84,[0,[[1083,55,1083,66,[2,[],"matchesName"]],[1083,67,1083,84,[6,[[1083,69,1083,72,[5,"A"]],[1083,74,1083,82,[5,"Custom"]]]]]]]]]]]]]]],[1084,32,1084,36,[2,[],"rule"]]]]]]]]]]],[1086,24,1086,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[1087,11,1107,50,[1,"<|",1,[1087,11,1087,34,[0,[[1087,11,1087,15,[2,[],"test"]],[1087,16,1087,34,[5,"with import name"]]]]],[1088,13,1107,50,[18,[[[1088,14,1088,16,[1]]],[1089,17,1107,50,[1,"|>",0,[1089,17,1106,26,[1,"|>",0,[1089,17,1101,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Bool -> Custom -> String\ntoString b custom =\n    case (b, custom) of\n        (False, Bar) -> \"Bar\"\n        (False, Foo) -> \"Foo\"\n        (True, Foo) -> \"Foo\"\n        (False, Baz) -> \"Baz\"\n        _ -> \"Rest\"\n"]],[1102,24,1106,26,[0,[[1102,24,1102,39,[2,["Review","Test"],"run"]],[1103,25,1106,26,[7,[1103,26,1105,36,[1,"|>",0,[1103,26,1104,85,[1,"|>",0,[1103,26,1103,34,[2,[],"defaults"]],[1104,32,1104,85,[0,[[1104,32,1104,53,[2,[],"sortOnlyMatchingTypes"]],[1104,54,1104,85,[7,[1104,55,1104,84,[0,[[1104,55,1104,66,[2,[],"matchesName"]],[1104,67,1104,84,[6,[[1104,69,1104,72,[5,"A"]],[1104,74,1104,82,[5,"Custom"]]]]]]]]]]]]]]],[1105,32,1105,36,[2,[],"rule"]]]]]]]]]]],[1107,24,1107,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[1111,1,1181,10,[0,[[0],[1,[1111,1,1111,13,[[1111,1,1111,6,"fails"],[1111,9,1111,13,[1,[1111,9,1111,13,[[],"Test"]],[]]]]]],[1112,1,1181,10,[[1112,1,1112,6,"fails"],[],[1113,5,1181,10,[0,[[1113,5,1113,13,[2,[],"describe"]],[1113,14,1113,37,[5,"reports an error when"]],[1114,9,1181,10,[9,[[1114,11,1141,26,[1,"<|",1,[1114,11,1114,36,[0,[[1114,11,1114,15,[2,[],"test"]],[1114,16,1114,36,[5,"case is not sorted"]]]]],[1115,13,1141,26,[18,[[[1115,14,1115,16,[1]]],[1116,17,1141,26,[1,"|>",0,[1116,17,1127,55,[1,"|>",0,[1116,17,1126,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n"]],[1127,24,1127,55,[0,[[1127,24,1127,39,[2,["Review","Test"],"run"]],[1127,40,1127,55,[7,[1127,41,1127,54,[0,[[1127,41,1127,45,[2,[],"rule"]],[1127,46,1127,54,[2,[],"defaults"]]]]]]]]]]]],[1128,24,1141,26,[0,[[1128,24,1128,48,[2,["Review","Test"],"expectErrors"]],[1129,25,1141,26,[9,[[1129,27,1140,4,[1,"|>",0,[1129,27,1129,40,[2,[],"unsortedError"]],[1130,32,1140,4,[0,[[1130,32,1130,53,[2,["Review","Test"],"whenFixed"]],[1130,54,1140,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[1142,11,1169,26,[1,"<|",1,[1142,11,1142,37,[0,[[1142,11,1142,15,[2,[],"test"]],[1142,16,1142,37,[5,"type is not exposed"]]]]],[1143,13,1169,26,[18,[[[1143,14,1143,16,[1]]],[1144,17,1169,26,[1,"|>",0,[1144,17,1155,55,[1,"|>",0,[1144,17,1154,4,[5,"module A exposing (toString)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n"]],[1155,24,1155,55,[0,[[1155,24,1155,39,[2,["Review","Test"],"run"]],[1155,40,1155,55,[7,[1155,41,1155,54,[0,[[1155,41,1155,45,[2,[],"rule"]],[1155,46,1155,54,[2,[],"defaults"]]]]]]]]]]]],[1156,24,1169,26,[0,[[1156,24,1156,48,[2,["Review","Test"],"expectErrors"]],[1157,25,1169,26,[9,[[1157,27,1168,4,[1,"|>",0,[1157,27,1157,40,[2,[],"unsortedError"]],[1158,32,1168,4,[0,[[1158,32,1158,53,[2,["Review","Test"],"whenFixed"]],[1158,54,1168,4,[5,"module A exposing (toString)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[1170,11,1170,24,[2,[],"fixesProperly"]],[1171,11,1171,27,[2,[],"failsCrossModule"]],[1172,11,1172,25,[2,[],"failsWildcards"]],[1173,11,1173,35,[2,[],"failsTransparentPatterns"]],[1174,11,1174,22,[2,[],"failsTuples"]],[1175,11,1175,21,[2,[],"failsLists"]],[1176,11,1176,22,[2,[],"failsUncons"]],[1177,11,1177,24,[2,[],"failsLiterals"]],[1178,11,1178,37,[2,[],"failsTypesFromDependencies"]],[1179,11,1179,27,[2,[],"failsSubpatterns"]],[1180,11,1180,27,[2,[],"failsOnWhitelist"]]]]]]]]]]]]],[1184,1,1356,10,[0,[[0],[1,[1184,1,1184,21,[[1184,1,1184,14,"fixesProperly"],[1184,17,1184,21,[1,[1184,17,1184,21,[[],"Test"]],[]]]]]],[1185,1,1356,10,[[1185,1,1185,14,"fixesProperly"],[],[1186,5,1356,10,[0,[[1186,5,1186,13,[2,[],"describe"]],[1186,14,1186,31,[5,"automatic fixes"]],[1187,9,1356,10,[9,[[1187,11,1232,26,[1,"<|",1,[1187,11,1187,35,[0,[[1187,11,1187,15,[2,[],"test"]],[1187,16,1187,35,[5,"preserve comments"]]]]],[1188,13,1232,26,[18,[[[1188,14,1188,16,[1]]],[1189,17,1232,26,[1,"|>",0,[1189,17,1209,55,[1,"|>",0,[1189,17,1208,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    -- A block of patterns\n    case custom of\n        Bar ->\n            -- Bar\n            \"Bar\"\n\n        Baz ->\n            -- Baz\n            \"Baz\"\n\n        Foo ->\n            -- Foo\n            \"Foo\"\n"]],[1209,24,1209,55,[0,[[1209,24,1209,39,[2,["Review","Test"],"run"]],[1209,40,1209,55,[7,[1209,41,1209,54,[0,[[1209,41,1209,45,[2,[],"rule"]],[1209,46,1209,54,[2,[],"defaults"]]]]]]]]]]]],[1210,24,1232,26,[0,[[1210,24,1210,48,[2,["Review","Test"],"expectErrors"]],[1211,25,1232,26,[9,[[1211,27,1231,4,[1,"|>",0,[1211,27,1211,40,[2,[],"unsortedError"]],[1212,32,1231,4,[0,[[1212,32,1212,53,[2,["Review","Test"],"whenFixed"]],[1212,54,1231,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    -- A block of patterns\n    case custom of\n        Foo ->\n            -- Foo\n            \"Foo\"\n\n        Bar ->\n            -- Bar\n            \"Bar\"\n\n        Baz ->\n            -- Baz\n            \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[1233,11,1300,26,[1,"<|",1,[1233,11,1233,57,[0,[[1233,11,1233,15,[2,[],"test"]],[1233,16,1233,57,[5,"work with multiline expression/patterns"]]]]],[1234,13,1300,26,[18,[[[1234,14,1234,16,[1]]],[1235,17,1300,26,[1,"|>",0,[1235,17,1266,55,[1,"|>",0,[1235,17,1265,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String -> String\ntoString custom string =\n    -- A multiline expression\n    case\n        ( custom\n        , string\n        )\n    of\n        ( Bar, \"A pattern\" ) ->\n            -- Bar\n            \"Bar\"\n\n        ( Baz, foo ) ->\n            -- Baz\n            \"Baz\"\n\n        ( Foo, _ ) ->\n            -- Foo\n            toString\n                |> toPipeline\n                |> andSuch\n\n        _ ->\n            \"\"\"Multiline\n        string\n        expression?\"\"\"\n"]],[1266,24,1266,55,[0,[[1266,24,1266,39,[2,["Review","Test"],"run"]],[1266,40,1266,55,[7,[1266,41,1266,54,[0,[[1266,41,1266,45,[2,[],"rule"]],[1266,46,1266,54,[2,[],"defaults"]]]]]]]]]]]],[1267,24,1300,26,[0,[[1267,24,1267,48,[2,["Review","Test"],"expectErrors"]],[1268,25,1300,26,[9,[[1268,27,1299,4,[1,"|>",0,[1268,27,1268,40,[2,[],"unsortedError"]],[1269,32,1299,4,[0,[[1269,32,1269,53,[2,["Review","Test"],"whenFixed"]],[1269,54,1299,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String -> String\ntoString custom string =\n    -- A multiline expression\n    case\n        ( custom\n        , string\n        )\n    of\n        ( Foo, _ ) ->\n            -- Foo\n            toString\n                |> toPipeline\n                |> andSuch\n\n        ( Bar, \"A pattern\" ) ->\n            -- Bar\n            \"Bar\"\n\n        ( Baz, foo ) ->\n            -- Baz\n            \"Baz\"\n\n        _ ->\n            \"\"\"Multiline\n        string\n        expression?\"\"\"\n"]]]]]]]]]]]]]]]]]]]],[1301,11,1355,26,[1,"<|",1,[1301,11,1301,55,[0,[[1301,11,1301,15,[2,[],"test"]],[1301,16,1301,55,[5,"do not mangle syntax in complex cases"]]]]],[1302,13,1355,26,[18,[[[1302,14,1302,16,[1]]],[1303,17,1355,26,[1,"|>",0,[1303,17,1327,55,[1,"|>",0,[1303,17,1326,12,[5,"module A exposing (..)\ntype A = B | C | D\nfoo bar =\n    let\n        thing =\n            case bar of\n                B ->\n                    \\a b ->\n                        case ( Nothing, Nothing ) of\n                            ( Just a_, Just b_ ) ->\n                                GT\n                            ( Just _, Nothing ) ->\n                                LT\n                            ( Nothing, Just _ ) ->\n                                GT\n                            ( Nothing, Nothing ) ->\n                                LT\n                D ->\n                    \\a b -> GT\n                C ->\n                    \\a b -> GT\n    in\n    thing\n        "]],[1327,24,1327,55,[0,[[1327,24,1327,39,[2,["Review","Test"],"run"]],[1327,40,1327,55,[7,[1327,41,1327,54,[0,[[1327,41,1327,45,[2,[],"rule"]],[1327,46,1327,54,[2,[],"defaults"]]]]]]]]]]]],[1328,24,1355,26,[0,[[1328,24,1328,48,[2,["Review","Test"],"expectErrors"]],[1329,25,1355,26,[9,[[1329,27,1354,12,[1,"|>",0,[1329,27,1330,122,[1,"|>",0,[1329,27,1329,40,[2,[],"unsortedError"]],[1330,32,1330,122,[0,[[1330,32,1330,53,[2,["Review","Test"],"atExactly"]],[1330,54,1330,122,[8,[[1330,56,1330,88,[[1330,56,1330,61,"start"],[1330,64,1330,88,[8,[[1330,66,1330,73,[[1330,66,1330,69,"row"],[1330,72,1330,73,[3,6]]]],[1330,75,1330,87,[[1330,75,1330,81,"column"],[1330,84,1330,86,[3,13]]]]]]]]],[1330,90,1330,121,[[1330,90,1330,93,"end"],[1330,96,1330,120,[8,[[1330,98,1330,105,[[1330,98,1330,101,"row"],[1330,104,1330,105,[3,6]]]],[1330,107,1330,119,[[1330,107,1330,113,"column"],[1330,116,1330,118,[3,17]]]]]]]]]]]]]]]]],[1331,32,1354,12,[0,[[1331,32,1331,53,[2,["Review","Test"],"whenFixed"]],[1331,54,1354,12,[5,"module A exposing (..)\ntype A = B | C | D\nfoo bar =\n    let\n        thing =\n            case bar of\n                B ->\n                    \\a b ->\n                        case ( Nothing, Nothing ) of\n                            ( Just a_, Just b_ ) ->\n                                GT\n                            ( Just _, Nothing ) ->\n                                LT\n                            ( Nothing, Just _ ) ->\n                                GT\n                            ( Nothing, Nothing ) ->\n                                LT\n                C ->\n                    \\a b -> GT\n                D ->\n                    \\a b -> GT\n    in\n    thing\n        "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1359,1,1562,10,[0,[[0],[1,[1359,1,1359,24,[[1359,1,1359,17,"failsCrossModule"],[1359,20,1359,24,[1,[1359,20,1359,24,[[],"Test"]],[]]]]]],[1360,1,1562,10,[[1360,1,1360,17,"failsCrossModule"],[],[1361,5,1562,10,[0,[[1361,5,1361,13,[2,[],"describe"]],[1361,14,1361,49,[5,"case is defined in another module"]],[1362,9,1562,10,[9,[[1362,11,1397,26,[1,"<|",1,[1362,11,1362,31,[0,[[1362,11,1362,15,[2,[],"test"]],[1362,16,1362,31,[5,"is not sorted"]]]]],[1363,13,1397,26,[18,[[[1363,14,1363,16,[1]]],[1364,17,1397,26,[1,"|>",0,[1364,17,1380,64,[1,"|>",0,[1364,17,1379,18,[9,[[1364,19,1367,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1368,19,1378,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n"]]]]],[1380,24,1380,64,[0,[[1380,24,1380,48,[2,["Review","Test"],"runOnModules"]],[1380,49,1380,64,[7,[1380,50,1380,63,[0,[[1380,50,1380,54,[2,[],"rule"]],[1380,55,1380,63,[2,[],"defaults"]]]]]]]]]]]],[1381,24,1397,26,[0,[[1381,24,1381,58,[2,["Review","Test"],"expectErrorsForModules"]],[1382,25,1397,26,[9,[[1382,27,1396,28,[6,[[1382,29,1382,32,[5,"B"]],[1383,29,1395,30,[9,[[1383,31,1394,4,[1,"|>",0,[1383,31,1383,44,[2,[],"unsortedError"]],[1384,36,1394,4,[0,[[1384,36,1384,57,[2,["Review","Test"],"whenFixed"]],[1384,58,1394,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1398,11,1434,26,[1,"<|",1,[1398,11,1398,38,[0,[[1398,11,1398,15,[2,[],"test"]],[1398,16,1398,38,[5,"with qualified names"]]]]],[1399,13,1434,26,[18,[[[1399,14,1399,16,[1]]],[1400,17,1434,26,[1,"|>",0,[1400,17,1416,64,[1,"|>",0,[1400,17,1415,18,[9,[[1400,19,1403,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1404,19,1414,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n        A.Baz -> \"Baz\"\n"]]]]],[1416,24,1416,64,[0,[[1416,24,1416,48,[2,["Review","Test"],"runOnModules"]],[1416,49,1416,64,[7,[1416,50,1416,63,[0,[[1416,50,1416,54,[2,[],"rule"]],[1416,55,1416,63,[2,[],"defaults"]]]]]]]]]]]],[1417,24,1434,26,[0,[[1417,24,1417,58,[2,["Review","Test"],"expectErrorsForModules"]],[1418,25,1434,26,[9,[[1418,27,1433,28,[6,[[1418,29,1418,32,[5,"B"]],[1419,29,1432,30,[9,[[1419,31,1431,4,[1,"|>",0,[1419,31,1419,44,[2,[],"unsortedError"]],[1420,36,1431,4,[0,[[1420,36,1420,57,[2,["Review","Test"],"whenFixed"]],[1421,37,1431,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1435,11,1477,26,[1,"<|",1,[1435,11,1435,53,[0,[[1435,11,1435,15,[2,[],"test"]],[1435,16,1435,53,[5,"with qualified names disambiguating"]]]]],[1436,13,1477,26,[18,[[[1436,14,1436,16,[1]]],[1437,17,1477,26,[1,"|>",0,[1437,17,1458,64,[1,"|>",0,[1437,17,1457,18,[9,[[1437,19,1440,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1441,19,1444,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1445,19,1456,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Baz -> \"Baz\"\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n"]]]]],[1458,24,1458,64,[0,[[1458,24,1458,48,[2,["Review","Test"],"runOnModules"]],[1458,49,1458,64,[7,[1458,50,1458,63,[0,[[1458,50,1458,54,[2,[],"rule"]],[1458,55,1458,63,[2,[],"defaults"]]]]]]]]]]]],[1459,24,1477,26,[0,[[1459,24,1459,58,[2,["Review","Test"],"expectErrorsForModules"]],[1460,25,1477,26,[9,[[1460,27,1476,28,[6,[[1460,29,1460,32,[5,"C"]],[1461,29,1475,30,[9,[[1461,31,1474,4,[1,"|>",0,[1461,31,1461,44,[2,[],"unsortedError"]],[1462,36,1474,4,[0,[[1462,36,1462,57,[2,["Review","Test"],"whenFixed"]],[1463,37,1474,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1478,11,1520,26,[1,"<|",1,[1478,11,1478,47,[0,[[1478,11,1478,15,[2,[],"test"]],[1478,16,1478,47,[5,"with disambiguation by import"]]]]],[1479,13,1520,26,[18,[[[1479,14,1479,16,[1]]],[1480,17,1520,26,[1,"|>",0,[1480,17,1501,64,[1,"|>",0,[1480,17,1500,18,[9,[[1480,19,1483,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1484,19,1487,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1488,19,1499,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]],[1501,24,1501,64,[0,[[1501,24,1501,48,[2,["Review","Test"],"runOnModules"]],[1501,49,1501,64,[7,[1501,50,1501,63,[0,[[1501,50,1501,54,[2,[],"rule"]],[1501,55,1501,63,[2,[],"defaults"]]]]]]]]]]]],[1502,24,1520,26,[0,[[1502,24,1502,58,[2,["Review","Test"],"expectErrorsForModules"]],[1503,25,1520,26,[9,[[1503,27,1519,28,[6,[[1503,29,1503,32,[5,"C"]],[1504,29,1518,30,[9,[[1504,31,1517,4,[1,"|>",0,[1504,31,1504,44,[2,[],"unsortedError"]],[1505,36,1517,4,[0,[[1505,36,1505,57,[2,["Review","Test"],"whenFixed"]],[1506,37,1517,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1521,11,1561,26,[1,"<|",1,[1521,11,1521,33,[0,[[1521,11,1521,15,[2,[],"test"]],[1521,16,1521,33,[5,"with local name"]]]]],[1522,13,1561,26,[18,[[[1522,14,1522,16,[1]]],[1523,17,1561,26,[1,"|>",0,[1523,17,1541,64,[1,"|>",0,[1523,17,1540,18,[9,[[1523,19,1526,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1527,19,1539,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]],[1541,24,1541,64,[0,[[1541,24,1541,48,[2,["Review","Test"],"runOnModules"]],[1541,49,1541,64,[7,[1541,50,1541,63,[0,[[1541,50,1541,54,[2,[],"rule"]],[1541,55,1541,63,[2,[],"defaults"]]]]]]]]]]]],[1542,24,1561,26,[0,[[1542,24,1542,58,[2,["Review","Test"],"expectErrorsForModules"]],[1543,25,1561,26,[9,[[1543,27,1560,28,[6,[[1543,29,1543,32,[5,"B"]],[1544,29,1559,30,[9,[[1544,31,1558,4,[1,"|>",0,[1544,31,1544,44,[2,[],"unsortedError"]],[1545,36,1558,4,[0,[[1545,36,1545,57,[2,["Review","Test"],"whenFixed"]],[1546,37,1558,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1565,1,1726,10,[0,[[0],[1,[1565,1,1565,22,[[1565,1,1565,15,"failsWildcards"],[1565,18,1565,22,[1,[1565,18,1565,22,[[],"Test"]],[]]]]]],[1566,1,1726,10,[[1566,1,1566,15,"failsWildcards"],[],[1567,5,1726,10,[0,[[1567,5,1567,13,[2,[],"describe"]],[1567,14,1567,30,[5,"with wildcards"]],[1568,9,1726,10,[9,[[1568,11,1596,26,[1,"<|",1,[1568,11,1568,55,[0,[[1568,11,1568,15,[2,[],"test"]],[1568,16,1568,55,[5,"is not sorted with all pattern at end"]]]]],[1569,13,1596,26,[18,[[[1569,14,1569,16,[1]]],[1570,17,1596,26,[1,"|>",0,[1570,17,1581,55,[1,"|>",0,[1570,17,1580,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        _ -> \"Bar\"\n"]],[1581,24,1581,55,[0,[[1581,24,1581,39,[2,["Review","Test"],"run"]],[1581,40,1581,55,[7,[1581,41,1581,54,[0,[[1581,41,1581,45,[2,[],"rule"]],[1581,46,1581,54,[2,[],"defaults"]]]]]]]]]]]],[1582,24,1596,26,[0,[[1582,24,1582,48,[2,["Review","Test"],"expectErrors"]],[1583,25,1596,26,[9,[[1583,27,1595,4,[1,"|>",0,[1583,27,1583,40,[2,[],"unsortedError"]],[1584,32,1595,4,[0,[[1584,32,1584,53,[2,["Review","Test"],"whenFixed"]],[1585,33,1595,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        _ -> \"Bar\"\n"]]]]]]]]]]]]]]]]]]]],[1597,11,1625,26,[1,"<|",1,[1597,11,1597,55,[0,[[1597,11,1597,15,[2,[],"test"]],[1597,16,1597,55,[5,"is not sorted with var pattern at end"]]]]],[1598,13,1625,26,[18,[[[1598,14,1598,16,[1]]],[1599,17,1625,26,[1,"|>",0,[1599,17,1610,55,[1,"|>",0,[1599,17,1609,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        bar -> \"Bar\"\n"]],[1610,24,1610,55,[0,[[1610,24,1610,39,[2,["Review","Test"],"run"]],[1610,40,1610,55,[7,[1610,41,1610,54,[0,[[1610,41,1610,45,[2,[],"rule"]],[1610,46,1610,54,[2,[],"defaults"]]]]]]]]]]]],[1611,24,1625,26,[0,[[1611,24,1611,48,[2,["Review","Test"],"expectErrors"]],[1612,25,1625,26,[9,[[1612,27,1624,4,[1,"|>",0,[1612,27,1612,40,[2,[],"unsortedError"]],[1613,32,1624,4,[0,[[1613,32,1613,53,[2,["Review","Test"],"whenFixed"]],[1614,33,1624,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        bar -> \"Bar\"\n"]]]]]]]]]]]]]]]]]]]],[1626,11,1661,26,[1,"<|",1,[1626,11,1626,65,[0,[[1626,11,1626,15,[2,[],"test"]],[1626,16,1626,65,[5,"sorts past wildcards where possible with tuples"]]]]],[1627,13,1661,26,[18,[[[1627,14,1627,16,[1]]],[1628,17,1661,26,[1,"|>",0,[1628,17,1643,55,[1,"|>",0,[1628,17,1642,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (_, B) -> \"B\"\n        (_, A) -> \"A\"\n        (Bar, _) -> \"BarNotBOrA\"\n        (Foo, _) -> \"FooNotBOrA\"\n        _ -> \"Too many...\"\n"]],[1643,24,1643,55,[0,[[1643,24,1643,39,[2,["Review","Test"],"run"]],[1643,40,1643,55,[7,[1643,41,1643,54,[0,[[1643,41,1643,45,[2,[],"rule"]],[1643,46,1643,54,[2,[],"defaults"]]]]]]]]]]]],[1644,24,1661,26,[0,[[1644,24,1644,48,[2,["Review","Test"],"expectErrors"]],[1645,25,1661,26,[9,[[1645,27,1660,4,[1,"|>",0,[1645,27,1645,40,[2,[],"unsortedError"]],[1646,32,1660,4,[0,[[1646,32,1646,53,[2,["Review","Test"],"whenFixed"]],[1646,54,1660,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (_, A) -> \"A\"\n        (_, B) -> \"B\"\n        (Foo, _) -> \"FooNotBOrA\"\n        (Bar, _) -> \"BarNotBOrA\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1662,11,1693,26,[1,"<|",1,[1662,11,1662,64,[0,[[1662,11,1662,15,[2,[],"test"]],[1662,16,1662,64,[5,"sorts past wildcards where possible with lists"]]]]],[1663,13,1693,26,[18,[[[1663,14,1663,16,[1]]],[1664,17,1693,26,[1,"|>",0,[1664,17,1677,55,[1,"|>",0,[1664,17,1676,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        [_, Bar] -> \"_Bar\"\n        [_, Foo] -> \"_Foo\"\n        [Bar, _] -> \"Bar_\"\n        [Foo, _] -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[1677,24,1677,55,[0,[[1677,24,1677,39,[2,["Review","Test"],"run"]],[1677,40,1677,55,[7,[1677,41,1677,54,[0,[[1677,41,1677,45,[2,[],"rule"]],[1677,46,1677,54,[2,[],"defaults"]]]]]]]]]]]],[1678,24,1693,26,[0,[[1678,24,1678,48,[2,["Review","Test"],"expectErrors"]],[1679,25,1693,26,[9,[[1679,27,1692,4,[1,"|>",0,[1679,27,1679,40,[2,[],"unsortedError"]],[1680,32,1692,4,[0,[[1680,32,1680,53,[2,["Review","Test"],"whenFixed"]],[1680,54,1692,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        [_, Foo] -> \"_Foo\"\n        [_, Bar] -> \"_Bar\"\n        [Foo, _] -> \"Foo_\"\n        [Bar, _] -> \"Bar_\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1694,11,1725,26,[1,"<|",1,[1694,11,1694,65,[0,[[1694,11,1694,15,[2,[],"test"]],[1694,16,1694,65,[5,"sorts past wildcards where possible with uncons"]]]]],[1695,13,1725,26,[18,[[[1695,14,1695,16,[1]]],[1696,17,1725,26,[1,"|>",0,[1696,17,1709,55,[1,"|>",0,[1696,17,1708,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        _ :: Bar :: _ -> \"_Bar_\"\n        _ :: Foo :: _ -> \"_Foo_\"\n        Bar :: _ -> \"Bar_\"\n        Foo :: _ -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[1709,24,1709,55,[0,[[1709,24,1709,39,[2,["Review","Test"],"run"]],[1709,40,1709,55,[7,[1709,41,1709,54,[0,[[1709,41,1709,45,[2,[],"rule"]],[1709,46,1709,54,[2,[],"defaults"]]]]]]]]]]]],[1710,24,1725,26,[0,[[1710,24,1710,48,[2,["Review","Test"],"expectErrors"]],[1711,25,1725,26,[9,[[1711,27,1724,4,[1,"|>",0,[1711,27,1711,40,[2,[],"unsortedError"]],[1712,32,1724,4,[0,[[1712,32,1712,53,[2,["Review","Test"],"whenFixed"]],[1712,54,1724,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        _ :: Foo :: _ -> \"_Foo_\"\n        _ :: Bar :: _ -> \"_Bar_\"\n        Foo :: _ -> \"Foo_\"\n        Bar :: _ -> \"Bar_\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1729,1,1790,10,[0,[[0],[1,[1729,1,1729,32,[[1729,1,1729,25,"failsTransparentPatterns"],[1729,28,1729,32,[1,[1729,28,1729,32,[[],"Test"]],[]]]]]],[1730,1,1790,10,[[1730,1,1730,25,"failsTransparentPatterns"],[],[1731,5,1790,10,[0,[[1731,5,1731,13,[2,[],"describe"]],[1731,14,1731,41,[5,"with transparent patterns"]],[1732,9,1790,10,[9,[[1732,11,1760,26,[1,"<|",1,[1732,11,1732,59,[0,[[1732,11,1732,15,[2,[],"test"]],[1732,16,1732,59,[5,"is not sorted with parenthesized patterns"]]]]],[1733,13,1760,26,[18,[[[1733,14,1733,16,[1]]],[1734,17,1760,26,[1,"|>",0,[1734,17,1745,55,[1,"|>",0,[1734,17,1744,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        (Baz) -> \"Bar\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]],[1745,24,1745,55,[0,[[1745,24,1745,39,[2,["Review","Test"],"run"]],[1745,40,1745,55,[7,[1745,41,1745,54,[0,[[1745,41,1745,45,[2,[],"rule"]],[1745,46,1745,54,[2,[],"defaults"]]]]]]]]]]]],[1746,24,1760,26,[0,[[1746,24,1746,48,[2,["Review","Test"],"expectErrors"]],[1747,25,1760,26,[9,[[1747,27,1759,4,[1,"|>",0,[1747,27,1747,40,[2,[],"unsortedError"]],[1748,32,1759,4,[0,[[1748,32,1748,53,[2,["Review","Test"],"whenFixed"]],[1749,33,1759,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        (Baz) -> \"Bar\"\n"]]]]]]]]]]]]]]]]]]]],[1761,11,1789,26,[1,"<|",1,[1761,11,1761,47,[0,[[1761,11,1761,15,[2,[],"test"]],[1761,16,1761,47,[5,"is not sorted with as pattern"]]]]],[1762,13,1789,26,[18,[[[1762,14,1762,16,[1]]],[1763,17,1789,26,[1,"|>",0,[1763,17,1774,55,[1,"|>",0,[1763,17,1773,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        (Bar as b) -> \"Bar\"\n"]],[1774,24,1774,55,[0,[[1774,24,1774,39,[2,["Review","Test"],"run"]],[1774,40,1774,55,[7,[1774,41,1774,54,[0,[[1774,41,1774,45,[2,[],"rule"]],[1774,46,1774,54,[2,[],"defaults"]]]]]]]]]]]],[1775,24,1789,26,[0,[[1775,24,1775,48,[2,["Review","Test"],"expectErrors"]],[1776,25,1789,26,[9,[[1776,27,1788,4,[1,"|>",0,[1776,27,1776,40,[2,[],"unsortedError"]],[1777,32,1788,4,[0,[[1777,32,1777,53,[2,["Review","Test"],"whenFixed"]],[1778,33,1788,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        (Bar as b) -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1793,1,2021,10,[0,[[0],[1,[1793,1,1793,19,[[1793,1,1793,12,"failsTuples"],[1793,15,1793,19,[1,[1793,15,1793,19,[[],"Test"]],[]]]]]],[1794,1,2021,10,[[1794,1,1794,12,"failsTuples"],[],[1795,5,2021,10,[0,[[1795,5,1795,13,[2,[],"describe"]],[1795,14,1795,27,[5,"with tuples"]],[1796,9,2021,10,[9,[[1796,11,1840,26,[1,"<|",1,[1796,11,1796,46,[0,[[1796,11,1796,15,[2,[],"test"]],[1796,16,1796,46,[5,"is not sorted at first level"]]]]],[1797,13,1840,26,[18,[[[1797,14,1797,16,[1]]],[1798,17,1840,26,[1,"|>",0,[1798,17,1817,55,[1,"|>",0,[1798,17,1816,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]],[1817,24,1817,55,[0,[[1817,24,1817,39,[2,["Review","Test"],"run"]],[1817,40,1817,55,[7,[1817,41,1817,54,[0,[[1817,41,1817,45,[2,[],"rule"]],[1817,46,1817,54,[2,[],"defaults"]]]]]]]]]]]],[1818,24,1840,26,[0,[[1818,24,1818,48,[2,["Review","Test"],"expectErrors"]],[1819,25,1840,26,[9,[[1819,27,1839,4,[1,"|>",0,[1819,27,1819,40,[2,[],"unsortedError"]],[1820,32,1839,4,[0,[[1820,32,1820,53,[2,["Review","Test"],"whenFixed"]],[1821,33,1839,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]]]]]]]]]]]]]]]]]]]],[1841,11,1885,26,[1,"<|",1,[1841,11,1841,47,[0,[[1841,11,1841,15,[2,[],"test"]],[1841,16,1841,47,[5,"is not sorted at second level"]]]]],[1842,13,1885,26,[18,[[[1842,14,1842,16,[1]]],[1843,17,1885,26,[1,"|>",0,[1843,17,1862,55,[1,"|>",0,[1843,17,1861,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, C) -> \"FooC\"\n        (Foo, B) -> \"FooB\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]],[1862,24,1862,55,[0,[[1862,24,1862,39,[2,["Review","Test"],"run"]],[1862,40,1862,55,[7,[1862,41,1862,54,[0,[[1862,41,1862,45,[2,[],"rule"]],[1862,46,1862,54,[2,[],"defaults"]]]]]]]]]]]],[1863,24,1885,26,[0,[[1863,24,1863,48,[2,["Review","Test"],"expectErrors"]],[1864,25,1885,26,[9,[[1864,27,1884,4,[1,"|>",0,[1864,27,1864,40,[2,[],"unsortedError"]],[1865,32,1884,4,[0,[[1865,32,1865,53,[2,["Review","Test"],"whenFixed"]],[1866,33,1884,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]]]]]]]]]]]]]]]]]]]],[1886,11,1932,26,[1,"<|",1,[1886,11,1886,61,[0,[[1886,11,1886,15,[2,[],"test"]],[1886,16,1886,61,[5,"is not sorted with threeples at third level"]]]]],[1887,13,1932,26,[18,[[[1887,14,1887,16,[1]]],[1888,17,1932,26,[1,"|>",0,[1888,17,1908,55,[1,"|>",0,[1888,17,1907,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case (custom1, custom2, custom3) of\n        (Foo, A, Foo) -> \"FooAFoo\"\n        (Foo, A, Bar) -> \"FooABar\"\n        (Foo, A, Baz) -> \"FooABaz\"\n        (Foo, B, Foo) -> \"FooBFoo\"\n        (Foo, B, Baz) -> \"FooBBaz\"\n        (Foo, B, Bar) -> \"FooBBar\"\n        (Foo, C, Foo) -> \"FooCFoo\"\n        (Foo, C, Bar) -> \"FooCBar\"\n        (Foo, C, Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[1908,24,1908,55,[0,[[1908,24,1908,39,[2,["Review","Test"],"run"]],[1908,40,1908,55,[7,[1908,41,1908,54,[0,[[1908,41,1908,45,[2,[],"rule"]],[1908,46,1908,54,[2,[],"defaults"]]]]]]]]]]]],[1909,24,1932,26,[0,[[1909,24,1909,48,[2,["Review","Test"],"expectErrors"]],[1910,25,1932,26,[9,[[1910,27,1931,4,[1,"|>",0,[1910,27,1910,40,[2,[],"unsortedError"]],[1911,32,1931,4,[0,[[1911,32,1911,53,[2,["Review","Test"],"whenFixed"]],[1912,33,1931,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case (custom1, custom2, custom3) of\n        (Foo, A, Foo) -> \"FooAFoo\"\n        (Foo, A, Bar) -> \"FooABar\"\n        (Foo, A, Baz) -> \"FooABaz\"\n        (Foo, B, Foo) -> \"FooBFoo\"\n        (Foo, B, Bar) -> \"FooBBar\"\n        (Foo, B, Baz) -> \"FooBBaz\"\n        (Foo, C, Foo) -> \"FooCFoo\"\n        (Foo, C, Bar) -> \"FooCBar\"\n        (Foo, C, Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1933,11,1979,26,[1,"<|",1,[1933,11,1933,50,[0,[[1933,11,1933,15,[2,[],"test"]],[1933,16,1933,50,[5,"is not sorted with nested tuples"]]]]],[1934,13,1979,26,[18,[[[1934,14,1934,16,[1]]],[1935,17,1979,26,[1,"|>",0,[1935,17,1955,55,[1,"|>",0,[1935,17,1954,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, custom2), custom3) of\n        ((Foo, A), Foo) -> \"FooAFoo\"\n        ((Foo, A), Bar) -> \"FooABar\"\n        ((Foo, A), Baz) -> \"FooABaz\"\n        ((Foo, B), Foo) -> \"FooBFoo\"\n        ((Foo, C), Foo) -> \"FooCFoo\"\n        ((Foo, B), Bar) -> \"FooBBar\"\n        ((Foo, B), Baz) -> \"FooBBaz\"\n        ((Foo, C), Bar) -> \"FooCBar\"\n        ((Foo, C), Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[1955,24,1955,55,[0,[[1955,24,1955,39,[2,["Review","Test"],"run"]],[1955,40,1955,55,[7,[1955,41,1955,54,[0,[[1955,41,1955,45,[2,[],"rule"]],[1955,46,1955,54,[2,[],"defaults"]]]]]]]]]]]],[1956,24,1979,26,[0,[[1956,24,1956,48,[2,["Review","Test"],"expectErrors"]],[1957,25,1979,26,[9,[[1957,27,1978,4,[1,"|>",0,[1957,27,1957,40,[2,[],"unsortedError"]],[1958,32,1978,4,[0,[[1958,32,1958,53,[2,["Review","Test"],"whenFixed"]],[1959,33,1978,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, custom2), custom3) of\n        ((Foo, A), Foo) -> \"FooAFoo\"\n        ((Foo, A), Bar) -> \"FooABar\"\n        ((Foo, A), Baz) -> \"FooABaz\"\n        ((Foo, B), Foo) -> \"FooBFoo\"\n        ((Foo, B), Bar) -> \"FooBBar\"\n        ((Foo, B), Baz) -> \"FooBBaz\"\n        ((Foo, C), Foo) -> \"FooCFoo\"\n        ((Foo, C), Bar) -> \"FooCBar\"\n        ((Foo, C), Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1980,11,2020,26,[1,"<|",1,[1980,11,1980,57,[0,[[1980,11,1980,15,[2,[],"test"]],[1980,16,1980,57,[5,"is not sorted with deeply nested tuples"]]]]],[1981,13,2020,26,[18,[[[1981,14,1981,16,[1]]],[1982,17,2020,26,[1,"|>",0,[1982,17,1999,55,[1,"|>",0,[1982,17,1998,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, (custom2, custom2)), custom3, (custom2, custom2)) of\n        ((Foo, (A, A)), Foo, (A, A)) -> \"1\"\n        ((Foo, (A, B)), Foo, (A, A)) -> \"2\"\n        ((Foo, (B, A)), Foo, (A, A)) -> \"4\"\n        ((Foo, (A, C)), Foo, (A, A)) -> \"3\"\n        ((Foo, (B, A)), Foo, (A, C)) -> \"5\"\n        ((Foo, (B, A)), Foo, (B, A)) -> \"6\"\n        _ -> \"Too many...\"\n"]],[1999,24,1999,55,[0,[[1999,24,1999,39,[2,["Review","Test"],"run"]],[1999,40,1999,55,[7,[1999,41,1999,54,[0,[[1999,41,1999,45,[2,[],"rule"]],[1999,46,1999,54,[2,[],"defaults"]]]]]]]]]]]],[2000,24,2020,26,[0,[[2000,24,2000,48,[2,["Review","Test"],"expectErrors"]],[2001,25,2020,26,[9,[[2001,27,2019,4,[1,"|>",0,[2001,27,2001,40,[2,[],"unsortedError"]],[2002,32,2019,4,[0,[[2002,32,2002,53,[2,["Review","Test"],"whenFixed"]],[2003,33,2019,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, (custom2, custom2)), custom3, (custom2, custom2)) of\n        ((Foo, (A, A)), Foo, (A, A)) -> \"1\"\n        ((Foo, (A, B)), Foo, (A, A)) -> \"2\"\n        ((Foo, (A, C)), Foo, (A, A)) -> \"3\"\n        ((Foo, (B, A)), Foo, (A, A)) -> \"4\"\n        ((Foo, (B, A)), Foo, (A, C)) -> \"5\"\n        ((Foo, (B, A)), Foo, (B, A)) -> \"6\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2024,1,2029,10,[0,[[0],[1,[2024,1,2024,18,[[2024,1,2024,11,"failsLists"],[2024,14,2024,18,[1,[2024,14,2024,18,[[],"Test"]],[]]]]]],[2025,1,2029,10,[[2025,1,2025,11,"failsLists"],[],[2026,5,2029,10,[0,[[2026,5,2026,13,[2,[],"describe"]],[2026,14,2026,26,[5,"with lists"]],[2027,9,2029,10,[9,[[2027,11,2027,32,[2,[],"failsListsLengthFirst"]],[2028,11,2028,32,[2,[],"failsListsElementwise"]]]]]]]]]]]]],[2032,1,2195,10,[0,[[0],[1,[2032,1,2032,29,[[2032,1,2032,22,"failsListsLengthFirst"],[2032,25,2032,29,[1,[2032,25,2032,29,[[],"Test"]],[]]]]]],[2033,1,2195,10,[[2033,1,2033,22,"failsListsLengthFirst"],[],[2034,5,2195,10,[0,[[2034,5,2034,13,[2,[],"describe"]],[2034,14,2034,35,[5,"sorted length-first"]],[2035,9,2195,10,[9,[[2035,11,2085,26,[1,"<|",1,[2035,11,2035,31,[0,[[2035,11,2035,15,[2,[],"test"]],[2035,16,2035,31,[5,"is not sorted"]]]]],[2036,13,2085,26,[18,[[[2036,14,2036,16,[1]]],[2037,17,2085,26,[1,"|>",0,[2037,17,2061,26,[1,"|>",0,[2037,17,2056,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Bar, Bar] -> \"BarBar\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]],[2057,24,2061,26,[0,[[2057,24,2057,39,[2,["Review","Test"],"run"]],[2058,25,2061,26,[7,[2058,26,2060,36,[1,"|>",0,[2058,26,2059,56,[1,"|>",0,[2058,26,2058,34,[2,[],"defaults"]],[2059,32,2059,56,[2,[],"sortListPatternsByLength"]]]],[2060,32,2060,36,[2,[],"rule"]]]]]]]]]]],[2062,24,2085,26,[0,[[2062,24,2062,48,[2,["Review","Test"],"expectErrors"]],[2063,25,2085,26,[9,[[2063,27,2084,4,[1,"|>",0,[2063,27,2063,40,[2,[],"unsortedError"]],[2064,32,2084,4,[0,[[2064,32,2064,53,[2,["Review","Test"],"whenFixed"]],[2065,33,2084,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[2086,11,2136,26,[1,"<|",1,[2086,11,2086,38,[0,[[2086,11,2086,15,[2,[],"test"]],[2086,16,2086,38,[5,"in elementwise order"]]]]],[2087,13,2136,26,[18,[[[2087,14,2087,16,[1]]],[2088,17,2136,26,[1,"|>",0,[2088,17,2112,26,[1,"|>",0,[2088,17,2107,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[2108,24,2112,26,[0,[[2108,24,2108,39,[2,["Review","Test"],"run"]],[2109,25,2112,26,[7,[2109,26,2111,36,[1,"|>",0,[2109,26,2110,56,[1,"|>",0,[2109,26,2109,34,[2,[],"defaults"]],[2110,32,2110,56,[2,[],"sortListPatternsByLength"]]]],[2111,32,2111,36,[2,[],"rule"]]]]]]]]]]],[2113,24,2136,26,[0,[[2113,24,2113,48,[2,["Review","Test"],"expectErrors"]],[2114,25,2136,26,[9,[[2114,27,2135,4,[1,"|>",0,[2114,27,2114,40,[2,[],"unsortedError"]],[2115,32,2135,4,[0,[[2115,32,2115,53,[2,["Review","Test"],"whenFixed"]],[2116,33,2135,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[2137,11,2194,26,[1,"<|",1,[2137,11,2137,61,[0,[[2137,11,2137,15,[2,[],"test"]],[2137,16,2137,61,[5,"with mixed list/uncons in elementwise order"]]]]],[2138,13,2194,26,[18,[[[2138,14,2138,16,[1]]],[2139,17,2194,26,[1,"|>",0,[2139,17,2167,26,[1,"|>",0,[2139,17,2162,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        Foo :: Foo :: [] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        Foo :: _ -> \"Foo+\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Bar :: _ -> \"Bar+\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[2163,24,2167,26,[0,[[2163,24,2163,39,[2,["Review","Test"],"run"]],[2164,25,2167,26,[7,[2164,26,2166,36,[1,"|>",0,[2164,26,2165,56,[1,"|>",0,[2164,26,2164,34,[2,[],"defaults"]],[2165,32,2165,56,[2,[],"sortListPatternsByLength"]]]],[2166,32,2166,36,[2,[],"rule"]]]]]]]]]]],[2168,24,2194,26,[0,[[2168,24,2168,48,[2,["Review","Test"],"expectErrors"]],[2169,25,2194,26,[9,[[2169,27,2193,4,[1,"|>",0,[2169,27,2169,40,[2,[],"unsortedError"]],[2170,32,2193,4,[0,[[2170,32,2170,53,[2,["Review","Test"],"whenFixed"]],[2170,54,2193,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        Foo :: Foo :: [] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Foo :: _ -> \"Foo+\"\n        Bar :: _ -> \"Bar+\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2198,1,2341,10,[0,[[0],[1,[2198,1,2198,29,[[2198,1,2198,22,"failsListsElementwise"],[2198,25,2198,29,[1,[2198,25,2198,29,[[],"Test"]],[]]]]]],[2199,1,2341,10,[[2199,1,2199,22,"failsListsElementwise"],[],[2200,5,2341,10,[0,[[2200,5,2200,13,[2,[],"describe"]],[2200,14,2200,34,[5,"sorted elementwise"]],[2201,9,2341,10,[9,[[2201,11,2247,26,[1,"<|",1,[2201,11,2201,31,[0,[[2201,11,2201,15,[2,[],"test"]],[2201,16,2201,31,[5,"is not sorted"]]]]],[2202,13,2247,26,[18,[[[2202,14,2202,16,[1]]],[2203,17,2247,26,[1,"|>",0,[2203,17,2223,55,[1,"|>",0,[2203,17,2222,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Baz] -> \"Baz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        _ -> \"Too many...\"\n"]],[2223,24,2223,55,[0,[[2223,24,2223,39,[2,["Review","Test"],"run"]],[2223,40,2223,55,[7,[2223,41,2223,54,[0,[[2223,41,2223,45,[2,[],"rule"]],[2223,46,2223,54,[2,[],"defaults"]]]]]]]]]]]],[2224,24,2247,26,[0,[[2224,24,2224,48,[2,["Review","Test"],"expectErrors"]],[2225,25,2247,26,[9,[[2225,27,2246,4,[1,"|>",0,[2225,27,2225,40,[2,[],"unsortedError"]],[2226,32,2246,4,[0,[[2226,32,2226,53,[2,["Review","Test"],"whenFixed"]],[2227,33,2246,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[2248,11,2294,26,[1,"<|",1,[2248,11,2248,39,[0,[[2248,11,2248,15,[2,[],"test"]],[2248,16,2248,39,[5,"in length-first order"]]]]],[2249,13,2294,26,[18,[[[2249,14,2249,16,[1]]],[2250,17,2294,26,[1,"|>",0,[2250,17,2270,55,[1,"|>",0,[2250,17,2269,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]],[2270,24,2270,55,[0,[[2270,24,2270,39,[2,["Review","Test"],"run"]],[2270,40,2270,55,[7,[2270,41,2270,54,[0,[[2270,41,2270,45,[2,[],"rule"]],[2270,46,2270,54,[2,[],"defaults"]]]]]]]]]]]],[2271,24,2294,26,[0,[[2271,24,2271,48,[2,["Review","Test"],"expectErrors"]],[2272,25,2294,26,[9,[[2272,27,2293,4,[1,"|>",0,[2272,27,2272,40,[2,[],"unsortedError"]],[2273,32,2293,4,[0,[[2273,32,2273,53,[2,["Review","Test"],"whenFixed"]],[2274,33,2293,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[2295,11,2340,26,[1,"<|",1,[2295,11,2295,62,[0,[[2295,11,2295,15,[2,[],"test"]],[2295,16,2295,62,[5,"with mixed list/uncons in length-first order"]]]]],[2296,13,2340,26,[18,[[[2296,14,2296,16,[1]]],[2297,17,2340,26,[1,"|>",0,[2297,17,2317,55,[1,"|>",0,[2297,17,2316,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        Foo :: [] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Bar, Foo] -> \"BarFoo\"\n        Bar :: Bar :: [] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Foo :: _ -> \"Foo+\"\n        Bar :: _ -> \"Bar+\"\n        _ -> \"Too many...\"\n"]],[2317,24,2317,55,[0,[[2317,24,2317,39,[2,["Review","Test"],"run"]],[2317,40,2317,55,[7,[2317,41,2317,54,[0,[[2317,41,2317,45,[2,[],"rule"]],[2317,46,2317,54,[2,[],"defaults"]]]]]]]]]]]],[2318,24,2340,26,[0,[[2318,24,2318,48,[2,["Review","Test"],"expectErrors"]],[2319,25,2340,26,[9,[[2319,27,2339,4,[1,"|>",0,[2319,27,2319,40,[2,[],"unsortedError"]],[2320,32,2339,4,[0,[[2320,32,2320,53,[2,["Review","Test"],"whenFixed"]],[2320,54,2339,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        Foo :: [] -> \"Foo\"\n        Foo :: _ -> \"Foo+\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        Bar :: Bar :: [] -> \"BarBar\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Bar :: _ -> \"Bar+\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2344,1,2403,10,[0,[[0],[1,[2344,1,2344,19,[[2344,1,2344,12,"failsUncons"],[2344,15,2344,19,[1,[2344,15,2344,19,[[],"Test"]],[]]]]]],[2345,1,2403,10,[[2345,1,2345,12,"failsUncons"],[],[2346,5,2403,10,[0,[[2346,5,2346,13,[2,[],"describe"]],[2346,14,2346,27,[5,"with uncons"]],[2347,9,2403,10,[9,[[2347,11,2374,26,[1,"<|",1,[2347,11,2347,31,[0,[[2347,11,2347,15,[2,[],"test"]],[2347,16,2347,31,[5,"is not sorted"]]]]],[2348,13,2374,26,[18,[[[2348,14,2348,16,[1]]],[2349,17,2374,26,[1,"|>",0,[2349,17,2360,55,[1,"|>",0,[2349,17,2359,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        Foo :: _ -> \"Foo\"\n        Baz :: _ -> \"Baz\"\n        Bar :: _ -> \"Bar\"\n"]],[2360,24,2360,55,[0,[[2360,24,2360,39,[2,["Review","Test"],"run"]],[2360,40,2360,55,[7,[2360,41,2360,54,[0,[[2360,41,2360,45,[2,[],"rule"]],[2360,46,2360,54,[2,[],"defaults"]]]]]]]]]]]],[2361,24,2374,26,[0,[[2361,24,2361,48,[2,["Review","Test"],"expectErrors"]],[2362,25,2374,26,[9,[[2362,27,2373,4,[1,"|>",0,[2362,27,2362,40,[2,[],"unsortedError"]],[2363,32,2373,4,[0,[[2363,32,2363,53,[2,["Review","Test"],"whenFixed"]],[2363,54,2373,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        Foo :: _ -> \"Foo\"\n        Bar :: _ -> \"Bar\"\n        Baz :: _ -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[2375,11,2402,26,[1,"<|",1,[2375,11,2375,48,[0,[[2375,11,2375,15,[2,[],"test"]],[2375,16,2375,48,[5,"is not sorted including tuples"]]]]],[2376,13,2402,26,[18,[[[2376,14,2376,16,[1]]],[2377,17,2402,26,[1,"|>",0,[2377,17,2388,55,[1,"|>",0,[2377,17,2387,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List (Custom, Int) -> String\ntoString xs =\n    case xs of\n        (Bar, 1) :: (Bar, 2) :: _ -> \"Bar\"\n        (Foo, 1) :: (Foo, 2) :: _ -> \"Foo\"\n        (Baz, 1) :: (Baz, 2) :: _ -> \"Baz\"\n"]],[2388,24,2388,55,[0,[[2388,24,2388,39,[2,["Review","Test"],"run"]],[2388,40,2388,55,[7,[2388,41,2388,54,[0,[[2388,41,2388,45,[2,[],"rule"]],[2388,46,2388,54,[2,[],"defaults"]]]]]]]]]]]],[2389,24,2402,26,[0,[[2389,24,2389,48,[2,["Review","Test"],"expectErrors"]],[2390,25,2402,26,[9,[[2390,27,2401,4,[1,"|>",0,[2390,27,2390,40,[2,[],"unsortedError"]],[2391,32,2401,4,[0,[[2391,32,2391,53,[2,["Review","Test"],"whenFixed"]],[2391,54,2401,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List (Custom, Int) -> String\ntoString xs =\n    case xs of\n        (Foo, 1) :: (Foo, 2) :: _ -> \"Foo\"\n        (Bar, 1) :: (Bar, 2) :: _ -> \"Bar\"\n        (Baz, 1) :: (Baz, 2) :: _ -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2406,1,2605,10,[0,[[0],[1,[2406,1,2406,21,[[2406,1,2406,14,"failsLiterals"],[2406,17,2406,21,[1,[2406,17,2406,21,[[],"Test"]],[]]]]]],[2407,1,2605,10,[[2407,1,2407,14,"failsLiterals"],[],[2408,5,2605,10,[0,[[2408,5,2408,13,[2,[],"describe"]],[2408,14,2408,29,[5,"with literals"]],[2409,9,2605,10,[9,[[2409,11,2434,26,[1,"<|",1,[2409,11,2409,48,[0,[[2409,11,2409,15,[2,[],"test"]],[2409,16,2409,48,[5,"not in literal order with ints"]]]]],[2410,13,2434,26,[18,[[[2410,14,2410,16,[1]]],[2411,17,2434,26,[1,"|>",0,[2411,17,2421,55,[1,"|>",0,[2411,17,2420,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        2 -> \"2\"\n        0 -> \"0\"\n        4 -> \"4\"\n        _ -> \"Something else...\"\n"]],[2421,24,2421,55,[0,[[2421,24,2421,39,[2,["Review","Test"],"run"]],[2421,40,2421,55,[7,[2421,41,2421,54,[0,[[2421,41,2421,45,[2,[],"rule"]],[2421,46,2421,54,[2,[],"defaults"]]]]]]]]]]]],[2422,24,2434,26,[0,[[2422,24,2422,48,[2,["Review","Test"],"expectErrors"]],[2423,25,2434,26,[9,[[2423,27,2433,4,[1,"|>",0,[2423,27,2423,40,[2,[],"unsortedError"]],[2424,32,2433,4,[0,[[2424,32,2424,53,[2,["Review","Test"],"whenFixed"]],[2424,54,2433,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0 -> \"0\"\n        2 -> \"2\"\n        4 -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[2435,11,2460,26,[1,"<|",1,[2435,11,2435,52,[0,[[2435,11,2435,15,[2,[],"test"]],[2435,16,2435,52,[5,"not in literal order with hex ints"]]]]],[2436,13,2460,26,[18,[[[2436,14,2436,16,[1]]],[2437,17,2460,26,[1,"|>",0,[2437,17,2447,55,[1,"|>",0,[2437,17,2446,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0x2 -> \"2\"\n        0x0 -> \"0\"\n        0xF -> \"F\"\n        _ -> \"Something else...\"\n"]],[2447,24,2447,55,[0,[[2447,24,2447,39,[2,["Review","Test"],"run"]],[2447,40,2447,55,[7,[2447,41,2447,54,[0,[[2447,41,2447,45,[2,[],"rule"]],[2447,46,2447,54,[2,[],"defaults"]]]]]]]]]]]],[2448,24,2460,26,[0,[[2448,24,2448,48,[2,["Review","Test"],"expectErrors"]],[2449,25,2460,26,[9,[[2449,27,2459,4,[1,"|>",0,[2449,27,2449,40,[2,[],"unsortedError"]],[2450,32,2459,4,[0,[[2450,32,2450,53,[2,["Review","Test"],"whenFixed"]],[2450,54,2459,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0x0 -> \"0\"\n        0x2 -> \"2\"\n        0xF -> \"F\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[2461,11,2486,26,[1,"<|",1,[2461,11,2461,50,[0,[[2461,11,2461,15,[2,[],"test"]],[2461,16,2461,50,[5,"not in literal order with floats"]]]]],[2462,13,2486,26,[18,[[[2462,14,2462,16,[1]]],[2463,17,2486,26,[1,"|>",0,[2463,17,2473,55,[1,"|>",0,[2463,17,2472,4,[5,"module A exposing (..)\n\ntoString : Float -> String\ntoString f =\n    case f of\n        2.3 -> \"2\"\n        0.0 -> \"0\"\n        4.0 -> \"4\"\n        _ -> \"Something else...\"\n"]],[2473,24,2473,55,[0,[[2473,24,2473,39,[2,["Review","Test"],"run"]],[2473,40,2473,55,[7,[2473,41,2473,54,[0,[[2473,41,2473,45,[2,[],"rule"]],[2473,46,2473,54,[2,[],"defaults"]]]]]]]]]]]],[2474,24,2486,26,[0,[[2474,24,2474,48,[2,["Review","Test"],"expectErrors"]],[2475,25,2486,26,[9,[[2475,27,2485,4,[1,"|>",0,[2475,27,2475,40,[2,[],"unsortedError"]],[2476,32,2485,4,[0,[[2476,32,2476,53,[2,["Review","Test"],"whenFixed"]],[2476,54,2485,4,[5,"module A exposing (..)\n\ntoString : Float -> String\ntoString f =\n    case f of\n        0.0 -> \"0\"\n        2.3 -> \"2\"\n        4.0 -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[2487,11,2512,26,[1,"<|",1,[2487,11,2487,51,[0,[[2487,11,2487,15,[2,[],"test"]],[2487,16,2487,51,[5,"not in literal order with Strings"]]]]],[2488,13,2512,26,[18,[[[2488,14,2488,16,[1]]],[2489,17,2512,26,[1,"|>",0,[2489,17,2499,55,[1,"|>",0,[2489,17,2498,4,[5,"module A exposing (..)\n\ntoString : String -> Char\ntoString s =\n    case s of\n        \"A\" -> 'A'\n        \"C\" -> 'C'\n        \"B\" -> 'B'\n        _ -> \"Something else...\"\n"]],[2499,24,2499,55,[0,[[2499,24,2499,39,[2,["Review","Test"],"run"]],[2499,40,2499,55,[7,[2499,41,2499,54,[0,[[2499,41,2499,45,[2,[],"rule"]],[2499,46,2499,54,[2,[],"defaults"]]]]]]]]]]]],[2500,24,2512,26,[0,[[2500,24,2500,48,[2,["Review","Test"],"expectErrors"]],[2501,25,2512,26,[9,[[2501,27,2511,4,[1,"|>",0,[2501,27,2501,40,[2,[],"unsortedError"]],[2502,32,2511,4,[0,[[2502,32,2502,53,[2,["Review","Test"],"whenFixed"]],[2502,54,2511,4,[5,"module A exposing (..)\n\ntoString : String -> Char\ntoString s =\n    case s of\n        \"A\" -> 'A'\n        \"B\" -> 'B'\n        \"C\" -> 'C'\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[2513,11,2538,26,[1,"<|",1,[2513,11,2513,49,[0,[[2513,11,2513,15,[2,[],"test"]],[2513,16,2513,49,[5,"not in literal order with Chars"]]]]],[2514,13,2538,26,[18,[[[2514,14,2514,16,[1]]],[2515,17,2538,26,[1,"|>",0,[2515,17,2525,55,[1,"|>",0,[2515,17,2524,4,[5,"module A exposing (..)\n\ntoString : Char -> String\ntoString c =\n    case c of\n        'A' -> \"A\"\n        'C' -> \"C\"\n        'B' -> \"B\"\n        _ -> \"Something else...\"\n"]],[2525,24,2525,55,[0,[[2525,24,2525,39,[2,["Review","Test"],"run"]],[2525,40,2525,55,[7,[2525,41,2525,54,[0,[[2525,41,2525,45,[2,[],"rule"]],[2525,46,2525,54,[2,[],"defaults"]]]]]]]]]]]],[2526,24,2538,26,[0,[[2526,24,2526,48,[2,["Review","Test"],"expectErrors"]],[2527,25,2538,26,[9,[[2527,27,2537,4,[1,"|>",0,[2527,27,2527,40,[2,[],"unsortedError"]],[2528,32,2537,4,[0,[[2528,32,2528,53,[2,["Review","Test"],"whenFixed"]],[2528,54,2537,4,[5,"module A exposing (..)\n\ntoString : Char -> String\ntoString c =\n    case c of\n        'A' -> \"A\"\n        'B' -> \"B\"\n        'C' -> \"C\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[2539,11,2572,26,[1,"<|",1,[2539,11,2539,70,[0,[[2539,11,2539,15,[2,[],"test"]],[2539,16,2539,70,[5,"not in literal order in combination with other types"]]]]],[2540,13,2572,26,[18,[[[2540,14,2540,16,[1]]],[2541,17,2572,26,[1,"|>",0,[2541,17,2555,55,[1,"|>",0,[2541,17,2554,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 2) -> \"0\"\n        (Foo, 0) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]],[2555,24,2555,55,[0,[[2555,24,2555,39,[2,["Review","Test"],"run"]],[2555,40,2555,55,[7,[2555,41,2555,54,[0,[[2555,41,2555,45,[2,[],"rule"]],[2555,46,2555,54,[2,[],"defaults"]]]]]]]]]]]],[2556,24,2572,26,[0,[[2556,24,2556,48,[2,["Review","Test"],"expectErrors"]],[2557,25,2572,26,[9,[[2557,27,2571,4,[1,"|>",0,[2557,27,2557,40,[2,[],"unsortedError"]],[2558,32,2571,4,[0,[[2558,32,2558,53,[2,["Review","Test"],"whenFixed"]],[2558,54,2571,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Foo, 2) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[2573,11,2604,26,[1,"<|",1,[2573,11,2573,81,[0,[[2573,11,2573,15,[2,[],"test"]],[2573,16,2573,81,[5,"in literal order in combination with other types and not sorted"]]]]],[2574,13,2604,26,[18,[[[2574,14,2574,16,[1]]],[2575,17,2604,26,[1,"|>",0,[2575,17,2588,55,[1,"|>",0,[2575,17,2587,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Baz, 2) -> \"2\"\n        (Bar, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]],[2588,24,2588,55,[0,[[2588,24,2588,39,[2,["Review","Test"],"run"]],[2588,40,2588,55,[7,[2588,41,2588,54,[0,[[2588,41,2588,45,[2,[],"rule"]],[2588,46,2588,54,[2,[],"defaults"]]]]]]]]]]]],[2589,24,2604,26,[0,[[2589,24,2589,48,[2,["Review","Test"],"expectErrors"]],[2590,25,2604,26,[9,[[2590,27,2603,4,[1,"|>",0,[2590,27,2590,40,[2,[],"unsortedError"]],[2591,32,2603,4,[0,[[2591,32,2591,53,[2,["Review","Test"],"whenFixed"]],[2591,54,2603,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2608,1,2659,10,[0,[[0],[1,[2608,1,2608,34,[[2608,1,2608,27,"failsTypesFromDependencies"],[2608,30,2608,34,[1,[2608,30,2608,34,[[],"Test"]],[]]]]]],[2609,1,2659,10,[[2609,1,2609,27,"failsTypesFromDependencies"],[],[2610,5,2659,10,[0,[[2610,5,2610,13,[2,[],"describe"]],[2610,14,2610,44,[5,"with types from dependencies"]],[2611,9,2659,10,[9,[[2611,11,2632,26,[1,"<|",1,[2611,11,2611,64,[0,[[2611,11,2611,15,[2,[],"test"]],[2611,16,2611,64,[5,"in alphabetical order with declaration sorting"]]]]],[2612,13,2632,26,[18,[[[2612,14,2612,16,[1]]],[2613,17,2632,26,[1,"|>",0,[2613,17,2621,55,[1,"|>",0,[2613,17,2620,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n"]],[2621,24,2621,55,[0,[[2621,24,2621,39,[2,["Review","Test"],"run"]],[2621,40,2621,55,[7,[2621,41,2621,54,[0,[[2621,41,2621,45,[2,[],"rule"]],[2621,46,2621,54,[2,[],"defaults"]]]]]]]]]]]],[2622,24,2632,26,[0,[[2622,24,2622,48,[2,["Review","Test"],"expectErrors"]],[2623,25,2632,26,[9,[[2623,27,2631,4,[1,"|>",0,[2623,27,2623,40,[2,[],"unsortedError"]],[2624,32,2631,4,[0,[[2624,32,2624,53,[2,["Review","Test"],"whenFixed"]],[2624,54,2631,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]]]]]]]]]]]]]]]]]]]],[2633,11,2658,26,[1,"<|",1,[2633,11,2633,64,[0,[[2633,11,2633,15,[2,[],"test"]],[2633,16,2633,64,[5,"in declaration order with alphabetical sorting"]]]]],[2634,13,2658,26,[18,[[[2634,14,2634,16,[1]]],[2635,17,2658,26,[1,"|>",0,[2635,17,2647,26,[1,"|>",0,[2635,17,2642,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]],[2643,24,2647,26,[0,[[2643,24,2643,39,[2,["Review","Test"],"run"]],[2644,25,2647,26,[7,[2644,26,2646,36,[1,"|>",0,[2644,26,2645,71,[1,"|>",0,[2644,26,2644,34,[2,[],"defaults"]],[2645,32,2645,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[2646,32,2646,36,[2,[],"rule"]]]]]]]]]]],[2648,24,2658,26,[0,[[2648,24,2648,48,[2,["Review","Test"],"expectErrors"]],[2649,25,2658,26,[9,[[2649,27,2657,4,[1,"|>",0,[2649,27,2649,40,[2,[],"unsortedError"]],[2650,32,2657,4,[0,[[2650,32,2650,53,[2,["Review","Test"],"whenFixed"]],[2650,54,2657,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2662,1,2805,10,[0,[[0],[1,[2662,1,2662,24,[[2662,1,2662,17,"failsSubpatterns"],[2662,20,2662,24,[1,[2662,20,2662,24,[[],"Test"]],[]]]]]],[2663,1,2805,10,[[2663,1,2663,17,"failsSubpatterns"],[],[2664,5,2805,10,[0,[[2664,5,2664,13,[2,[],"describe"]],[2664,14,2664,32,[5,"with subpatterns"]],[2665,9,2805,10,[9,[[2665,11,2698,26,[1,"<|",1,[2665,11,2665,43,[0,[[2665,11,2665,15,[2,[],"test"]],[2665,16,2665,43,[5,"not sorted at first level"]]]]],[2666,13,2698,26,[18,[[[2666,14,2666,16,[1]]],[2667,17,2698,26,[1,"|>",0,[2667,17,2683,26,[1,"|>",0,[2667,17,2678,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Nothing -> \"Nothing\"\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n"]],[2679,24,2683,26,[0,[[2679,24,2679,39,[2,["Review","Test"],"run"]],[2680,25,2683,26,[7,[2680,26,2682,36,[1,"|>",0,[2680,26,2681,71,[1,"|>",0,[2680,26,2680,34,[2,[],"defaults"]],[2681,32,2681,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[2682,32,2682,36,[2,[],"rule"]]]]]]]]]]],[2684,24,2698,26,[0,[[2684,24,2684,48,[2,["Review","Test"],"expectErrors"]],[2685,25,2698,26,[9,[[2685,27,2697,4,[1,"|>",0,[2685,27,2685,40,[2,[],"unsortedError"]],[2686,32,2697,4,[0,[[2686,32,2686,53,[2,["Review","Test"],"whenFixed"]],[2686,54,2697,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]]]]]]]]]]]]]]]]]]]],[2699,11,2732,26,[1,"<|",1,[2699,11,2699,43,[0,[[2699,11,2699,15,[2,[],"test"]],[2699,16,2699,43,[5,"not sorted at lower level"]]]]],[2700,13,2732,26,[18,[[[2700,14,2700,16,[1]]],[2701,17,2732,26,[1,"|>",0,[2701,17,2717,26,[1,"|>",0,[2701,17,2712,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Bar -> \"Bar\"\n        Just Foo -> \"Foo\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]],[2713,24,2717,26,[0,[[2713,24,2713,39,[2,["Review","Test"],"run"]],[2714,25,2717,26,[7,[2714,26,2716,36,[1,"|>",0,[2714,26,2715,71,[1,"|>",0,[2714,26,2714,34,[2,[],"defaults"]],[2715,32,2715,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[2716,32,2716,36,[2,[],"rule"]]]]]]]]]]],[2718,24,2732,26,[0,[[2718,24,2718,48,[2,["Review","Test"],"expectErrors"]],[2719,25,2732,26,[9,[[2719,27,2731,4,[1,"|>",0,[2719,27,2719,40,[2,[],"unsortedError"]],[2720,32,2731,4,[0,[[2720,32,2720,53,[2,["Review","Test"],"whenFixed"]],[2720,54,2731,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]]]]]]]]]]]]]]]]]]]],[2733,11,2768,26,[1,"<|",1,[2733,11,2733,44,[0,[[2733,11,2733,15,[2,[],"test"]],[2733,16,2733,44,[5,"with non-sortable patterns"]]]]],[2734,13,2768,26,[18,[[[2734,14,2734,16,[1]]],[2735,17,2768,26,[1,"|>",0,[2735,17,2752,26,[1,"|>",0,[2735,17,2747,4,[5,"module A exposing (..)\n\ntype Container = Container Custom Int Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container Bar 2 1 -> \"Bar\"\n        Container Foo 1 2 -> \"Foo\"\n        Container Baz 2 2 -> \"Baz\"\n"]],[2748,24,2752,26,[0,[[2748,24,2748,39,[2,["Review","Test"],"run"]],[2749,25,2752,26,[7,[2749,26,2751,36,[1,"|>",0,[2749,26,2750,49,[1,"|>",0,[2749,26,2749,34,[2,[],"defaults"]],[2750,32,2750,49,[2,[],"doNotSortLiterals"]]]],[2751,32,2751,36,[2,[],"rule"]]]]]]]]]]],[2753,24,2768,26,[0,[[2753,24,2753,48,[2,["Review","Test"],"expectErrors"]],[2754,25,2768,26,[9,[[2754,27,2767,4,[1,"|>",0,[2754,27,2754,40,[2,[],"unsortedError"]],[2755,32,2767,4,[0,[[2755,32,2755,53,[2,["Review","Test"],"whenFixed"]],[2755,54,2767,4,[5,"module A exposing (..)\n\ntype Container = Container Custom Int Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container Foo 1 2 -> \"Foo\"\n        Container Bar 2 1 -> \"Bar\"\n        Container Baz 2 2 -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[2769,11,2804,26,[1,"<|",1,[2769,11,2769,50,[0,[[2769,11,2769,15,[2,[],"test"]],[2769,16,2769,50,[5,"sorts past non-sortable patterns"]]]]],[2770,13,2804,26,[18,[[[2770,14,2770,16,[1]]],[2771,17,2804,26,[1,"|>",0,[2771,17,2788,26,[1,"|>",0,[2771,17,2783,4,[5,"module A exposing (..)\n\ntype Container = Container Int {field : Bool} Custom Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container 1 {field} Baz 1 -> \"Baz\"\n        Container 1 {field} Foo 1 -> \"Foo\"\n        Container 1 {field} Bar 1 -> \"Bar\"\n"]],[2784,24,2788,26,[0,[[2784,24,2784,39,[2,["Review","Test"],"run"]],[2785,25,2788,26,[7,[2785,26,2787,36,[1,"|>",0,[2785,26,2786,49,[1,"|>",0,[2785,26,2785,34,[2,[],"defaults"]],[2786,32,2786,49,[2,[],"doNotSortLiterals"]]]],[2787,32,2787,36,[2,[],"rule"]]]]]]]]]]],[2789,24,2804,26,[0,[[2789,24,2789,48,[2,["Review","Test"],"expectErrors"]],[2790,25,2804,26,[9,[[2790,27,2803,4,[1,"|>",0,[2790,27,2790,40,[2,[],"unsortedError"]],[2791,32,2803,4,[0,[[2791,32,2791,53,[2,["Review","Test"],"whenFixed"]],[2791,54,2803,4,[5,"module A exposing (..)\n\ntype Container = Container Int {field : Bool} Custom Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container 1 {field} Foo 1 -> \"Foo\"\n        Container 1 {field} Bar 1 -> \"Bar\"\n        Container 1 {field} Baz 1 -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2808,1,3118,10,[0,[[0],[1,[2808,1,2808,24,[[2808,1,2808,17,"failsOnWhitelist"],[2808,20,2808,24,[1,[2808,20,2808,24,[[],"Test"]],[]]]]]],[2809,1,3118,10,[[2809,1,2809,17,"failsOnWhitelist"],[],[2810,5,3118,10,[0,[[2810,5,2810,13,[2,[],"describe"]],[2810,14,2810,28,[5,"on whitelist"]],[2811,9,3118,10,[9,[[2811,11,2850,26,[1,"<|",1,[2811,11,2811,28,[0,[[2811,11,2811,15,[2,[],"test"]],[2811,16,2811,28,[5,"not sorted"]]]]],[2812,13,2850,26,[18,[[[2812,14,2812,16,[1]]],[2813,17,2850,26,[1,"|>",0,[2813,17,2833,26,[1,"|>",0,[2813,17,2828,18,[9,[[2813,19,2816,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2817,19,2827,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[2829,24,2833,26,[0,[[2829,24,2829,48,[2,["Review","Test"],"runOnModules"]],[2830,25,2833,26,[7,[2830,26,2832,36,[1,"|>",0,[2830,26,2831,85,[1,"|>",0,[2830,26,2830,34,[2,[],"defaults"]],[2831,32,2831,85,[0,[[2831,32,2831,53,[2,[],"sortOnlyMatchingTypes"]],[2831,54,2831,85,[7,[2831,55,2831,84,[0,[[2831,55,2831,66,[2,[],"matchesName"]],[2831,67,2831,84,[6,[[2831,69,2831,72,[5,"A"]],[2831,74,2831,82,[5,"Custom"]]]]]]]]]]]]]]],[2832,32,2832,36,[2,[],"rule"]]]]]]]]]]],[2834,24,2850,26,[0,[[2834,24,2834,58,[2,["Review","Test"],"expectErrorsForModules"]],[2835,25,2850,26,[9,[[2835,27,2849,28,[6,[[2835,29,2835,32,[5,"B"]],[2836,29,2848,30,[9,[[2836,31,2847,4,[1,"|>",0,[2836,31,2836,44,[2,[],"unsortedError"]],[2837,36,2847,4,[0,[[2837,36,2837,57,[2,["Review","Test"],"whenFixed"]],[2837,58,2847,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[2851,11,2890,26,[1,"<|",1,[2851,11,2851,38,[0,[[2851,11,2851,15,[2,[],"test"]],[2851,16,2851,38,[5,"with qualified names"]]]]],[2852,13,2890,26,[18,[[[2852,14,2852,16,[1]]],[2853,17,2890,26,[1,"|>",0,[2853,17,2873,26,[1,"|>",0,[2853,17,2868,18,[9,[[2853,19,2856,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2857,19,2867,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Baz -> \"Baz\"\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n"]]]]],[2869,24,2873,26,[0,[[2869,24,2869,48,[2,["Review","Test"],"runOnModules"]],[2870,25,2873,26,[7,[2870,26,2872,36,[1,"|>",0,[2870,26,2871,85,[1,"|>",0,[2870,26,2870,34,[2,[],"defaults"]],[2871,32,2871,85,[0,[[2871,32,2871,53,[2,[],"sortOnlyMatchingTypes"]],[2871,54,2871,85,[7,[2871,55,2871,84,[0,[[2871,55,2871,66,[2,[],"matchesName"]],[2871,67,2871,84,[6,[[2871,69,2871,72,[5,"A"]],[2871,74,2871,82,[5,"Custom"]]]]]]]]]]]]]]],[2872,32,2872,36,[2,[],"rule"]]]]]]]]]]],[2874,24,2890,26,[0,[[2874,24,2874,58,[2,["Review","Test"],"expectErrorsForModules"]],[2875,25,2890,26,[9,[[2875,27,2889,28,[6,[[2875,29,2875,32,[5,"B"]],[2876,29,2888,30,[9,[[2876,31,2887,4,[1,"|>",0,[2876,31,2876,44,[2,[],"unsortedError"]],[2877,36,2887,4,[0,[[2877,36,2877,57,[2,["Review","Test"],"whenFixed"]],[2877,58,2887,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[2891,11,2936,26,[1,"<|",1,[2891,11,2891,53,[0,[[2891,11,2891,15,[2,[],"test"]],[2891,16,2891,53,[5,"with qualified names disambiguating"]]]]],[2892,13,2936,26,[18,[[[2892,14,2892,16,[1]]],[2893,17,2936,26,[1,"|>",0,[2893,17,2918,26,[1,"|>",0,[2893,17,2913,18,[9,[[2893,19,2896,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2897,19,2900,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2901,19,2912,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Baz -> \"Baz\"\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n"]]]]],[2914,24,2918,26,[0,[[2914,24,2914,48,[2,["Review","Test"],"runOnModules"]],[2915,25,2918,26,[7,[2915,26,2917,36,[1,"|>",0,[2915,26,2916,85,[1,"|>",0,[2915,26,2915,34,[2,[],"defaults"]],[2916,32,2916,85,[0,[[2916,32,2916,53,[2,[],"sortOnlyMatchingTypes"]],[2916,54,2916,85,[7,[2916,55,2916,84,[0,[[2916,55,2916,66,[2,[],"matchesName"]],[2916,67,2916,84,[6,[[2916,69,2916,72,[5,"A"]],[2916,74,2916,82,[5,"Custom"]]]]]]]]]]]]]]],[2917,32,2917,36,[2,[],"rule"]]]]]]]]]]],[2919,24,2936,26,[0,[[2919,24,2919,58,[2,["Review","Test"],"expectErrorsForModules"]],[2920,25,2936,26,[9,[[2920,27,2935,28,[6,[[2920,29,2920,32,[5,"C"]],[2921,29,2934,30,[9,[[2921,31,2933,4,[1,"|>",0,[2921,31,2921,44,[2,[],"unsortedError"]],[2922,36,2933,4,[0,[[2922,36,2922,57,[2,["Review","Test"],"whenFixed"]],[2922,58,2933,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[2937,11,2982,26,[1,"<|",1,[2937,11,2937,47,[0,[[2937,11,2937,15,[2,[],"test"]],[2937,16,2937,47,[5,"with disambiguation by import"]]]]],[2938,13,2982,26,[18,[[[2938,14,2938,16,[1]]],[2939,17,2982,26,[1,"|>",0,[2939,17,2964,26,[1,"|>",0,[2939,17,2959,18,[9,[[2939,19,2942,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2943,19,2946,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2947,19,2958,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[2960,24,2964,26,[0,[[2960,24,2960,48,[2,["Review","Test"],"runOnModules"]],[2961,25,2964,26,[7,[2961,26,2963,36,[1,"|>",0,[2961,26,2962,85,[1,"|>",0,[2961,26,2961,34,[2,[],"defaults"]],[2962,32,2962,85,[0,[[2962,32,2962,53,[2,[],"sortOnlyMatchingTypes"]],[2962,54,2962,85,[7,[2962,55,2962,84,[0,[[2962,55,2962,66,[2,[],"matchesName"]],[2962,67,2962,84,[6,[[2962,69,2962,72,[5,"B"]],[2962,74,2962,82,[5,"Custom"]]]]]]]]]]]]]]],[2963,32,2963,36,[2,[],"rule"]]]]]]]]]]],[2965,24,2982,26,[0,[[2965,24,2965,58,[2,["Review","Test"],"expectErrorsForModules"]],[2966,25,2982,26,[9,[[2966,27,2981,28,[6,[[2966,29,2966,32,[5,"C"]],[2967,29,2980,30,[9,[[2967,31,2979,4,[1,"|>",0,[2967,31,2967,44,[2,[],"unsortedError"]],[2968,36,2979,4,[0,[[2968,36,2968,57,[2,["Review","Test"],"whenFixed"]],[2968,58,2979,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[2983,11,3026,26,[1,"<|",1,[2983,11,2983,33,[0,[[2983,11,2983,15,[2,[],"test"]],[2983,16,2983,33,[5,"with local name"]]]]],[2984,13,3026,26,[18,[[[2984,14,2984,16,[1]]],[2985,17,3026,26,[1,"|>",0,[2985,17,3007,26,[1,"|>",0,[2985,17,3002,18,[9,[[2985,19,2988,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2989,19,3001,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[3003,24,3007,26,[0,[[3003,24,3003,48,[2,["Review","Test"],"runOnModules"]],[3004,25,3007,26,[7,[3004,26,3006,36,[1,"|>",0,[3004,26,3005,85,[1,"|>",0,[3004,26,3004,34,[2,[],"defaults"]],[3005,32,3005,85,[0,[[3005,32,3005,53,[2,[],"sortOnlyMatchingTypes"]],[3005,54,3005,85,[7,[3005,55,3005,84,[0,[[3005,55,3005,66,[2,[],"matchesName"]],[3005,67,3005,84,[6,[[3005,69,3005,72,[5,"B"]],[3005,74,3005,82,[5,"Custom"]]]]]]]]]]]]]]],[3006,32,3006,36,[2,[],"rule"]]]]]]]]]]],[3008,24,3026,26,[0,[[3008,24,3008,58,[2,["Review","Test"],"expectErrorsForModules"]],[3009,25,3026,26,[9,[[3009,27,3025,28,[6,[[3009,29,3009,32,[5,"B"]],[3010,29,3024,30,[9,[[3010,31,3023,4,[1,"|>",0,[3010,31,3010,44,[2,[],"unsortedError"]],[3011,36,3023,4,[0,[[3011,36,3011,57,[2,["Review","Test"],"whenFixed"]],[3011,58,3023,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[3027,11,3070,26,[1,"<|",1,[3027,11,3027,33,[0,[[3027,11,3027,15,[2,[],"test"]],[3027,16,3027,33,[5,"with sub module"]]]]],[3028,13,3070,26,[18,[[[3028,14,3028,16,[1]]],[3029,17,3070,26,[1,"|>",0,[3029,17,3051,26,[1,"|>",0,[3029,17,3046,18,[9,[[3029,19,3032,4,[5,"module A.C.Internal exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[3033,19,3045,4,[5,"module B exposing (..)\n\nimport A.C.Internal as X\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        X.Baz -> \"Baz\"\n        X.Foo -> \"Foo\"\n        X.Bar -> \"Bar\"\n"]]]]],[3047,24,3051,26,[0,[[3047,24,3047,48,[2,["Review","Test"],"runOnModules"]],[3048,25,3051,26,[7,[3048,26,3050,36,[1,"|>",0,[3048,26,3049,96,[1,"|>",0,[3048,26,3048,34,[2,[],"defaults"]],[3049,32,3049,96,[0,[[3049,32,3049,53,[2,[],"sortOnlyMatchingTypes"]],[3049,54,3049,96,[7,[3049,55,3049,95,[0,[[3049,55,3049,66,[2,[],"matchesName"]],[3049,67,3049,95,[6,[[3049,69,3049,83,[5,"A.C.Internal"]],[3049,85,3049,93,[5,"Custom"]]]]]]]]]]]]]]],[3050,32,3050,36,[2,[],"rule"]]]]]]]]]]],[3052,24,3070,26,[0,[[3052,24,3052,58,[2,["Review","Test"],"expectErrorsForModules"]],[3053,25,3070,26,[9,[[3053,27,3069,28,[6,[[3053,29,3053,32,[5,"B"]],[3054,29,3068,30,[9,[[3054,31,3067,4,[1,"|>",0,[3054,31,3054,44,[2,[],"unsortedError"]],[3055,36,3067,4,[0,[[3055,36,3055,57,[2,["Review","Test"],"whenFixed"]],[3055,58,3067,4,[5,"module B exposing (..)\n\nimport A.C.Internal as X\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        X.Baz -> \"Baz\"\n        X.Bar -> \"Bar\"\n        X.Foo -> \"Foo\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[3071,11,3117,26,[1,"<|",1,[3071,11,3071,34,[0,[[3071,11,3071,15,[2,[],"test"]],[3071,16,3071,34,[5,"with import name"]]]]],[3072,13,3117,26,[18,[[[3072,14,3072,16,[1]]],[3073,17,3117,26,[1,"|>",0,[3073,17,3101,26,[1,"|>",0,[3073,17,3085,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Bool -> Custom -> String\ntoString b custom =\n    case (b, custom) of\n        (False, Bar) -> \"Bar\"\n        (False, Foo) -> \"Foo\"\n        (True, Foo) -> \"Foo\"\n        (False, Baz) -> \"Baz\"\n        _ -> \"Rest\"\n"]],[3086,24,3101,26,[0,[[3086,24,3086,39,[2,["Review","Test"],"run"]],[3087,25,3101,26,[7,[3087,26,3100,36,[1,"|>",0,[3087,26,3099,34,[1,"|>",0,[3087,26,3087,34,[2,[],"defaults"]],[3088,32,3099,34,[0,[[3088,32,3088,53,[2,[],"sortOnlyMatchingTypes"]],[3089,33,3099,34,[7,[3089,34,3098,50,[18,[[[3089,35,3089,36,[11,"m"]],[3089,37,3089,38,[11,"t"]]],[3090,37,3098,50,[17,[[3090,42,3090,50,[6,[[3090,44,3090,45,[2,[],"m"]],[3090,47,3090,48,[2,[],"t"]]]]],[[[3091,41,3091,58,[7,[[3091,43,3091,46,[3,"A"]],[3091,48,3091,56,[3,"Custom"]]]]],[3092,45,3092,49,[2,[],"True"]]],[[3094,41,3094,61,[7,[[3094,43,3094,51,[3,"Basics"]],[3094,53,3094,59,[3,"Bool"]]]]],[3095,45,3095,49,[2,[],"True"]]],[[3097,41,3097,42,[0]],[3098,45,3098,50,[2,[],"False"]]]]]]]]]]]]]]]]],[3100,32,3100,36,[2,[],"rule"]]]]]]]]]]],[3102,24,3117,26,[0,[[3102,24,3102,48,[2,["Review","Test"],"expectErrors"]],[3103,25,3117,26,[9,[[3103,27,3116,4,[1,"|>",0,[3103,27,3103,40,[2,[],"unsortedError"]],[3104,32,3116,4,[0,[[3104,32,3104,53,[2,["Review","Test"],"whenFixed"]],[3104,54,3116,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Bool -> Custom -> String\ntoString b custom =\n    case (b, custom) of\n        (True, Foo) -> \"Foo\"\n        (False, Foo) -> \"Foo\"\n        (False, Bar) -> \"Bar\"\n        (False, Baz) -> \"Baz\"\n        _ -> \"Rest\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[3121,1,3123,27,[0,[[0],[1,[3121,1,3121,61,[[3121,1,3121,12,"matchesName"],[3121,15,3121,61,[6,[3121,15,3121,33,[3,[[3121,17,3121,23,[1,[3121,17,3121,23,[[],"String"]],[]]],[3121,25,3121,31,[1,[3121,25,3121,31,[[],"String"]],[]]]]]],[3121,37,3121,61,[6,[3121,37,3121,43,[1,[3121,37,3121,43,[[],"String"]],[]]],[3121,47,3121,61,[6,[3121,47,3121,53,[1,[3121,47,3121,53,[[],"String"]],[]]],[3121,57,3121,61,[1,[3121,57,3121,61,[[],"Bool"]],[]]]]]]]]]]]],[3122,1,3123,27,[[3122,1,3122,12,"matchesName"],[[3122,13,3122,27,[7,[[3122,15,3122,19,[11,"expM"]],[3122,21,3122,25,[11,"expT"]]]]],[3122,28,3122,29,[11,"m"]],[3122,30,3122,31,[11,"t"]]],[3123,5,3123,27,[1,"&&",1,[3123,5,3123,14,[1,"==",2,[3123,5,3123,6,[2,[],"m"]],[3123,10,3123,14,[2,[],"expM"]]]],[3123,18,3123,27,[1,"==",2,[3123,18,3123,19,[2,[],"t"]],[3123,23,3123,27,[2,[],"expT"]]]]]]]]]]],[3126,1,3134,10,[0,[[0],[1,[3126,1,3126,42,[[3126,1,3126,14,"unsortedError"],[3126,17,3126,42,[1,[3126,17,3126,42,[["Review","Test"],"ExpectedError"]],[]]]]]],[3127,1,3134,10,[[3127,1,3127,14,"unsortedError"],[],[3128,5,3134,10,[0,[[3128,5,3128,22,[2,["Review","Test"],"error"]],[3129,9,3134,10,[8,[[3129,11,3131,14,[[3129,11,3129,18,"details"],[3130,13,3131,14,[9,[[3130,15,3130,118,[5,"Case patterns were found out of order.  They should be sorted as specified in the rule configuration."]]]]]]],[3132,11,3133,9,[[3132,11,3132,18,"message"],[3132,21,3132,52,[5,"Case patterns are not sorted."]]]],[3133,11,3134,9,[[3133,11,3133,16,"under"],[3133,19,3133,25,[5,"case"]]]]]]]]]]]]]]]],[]]]
