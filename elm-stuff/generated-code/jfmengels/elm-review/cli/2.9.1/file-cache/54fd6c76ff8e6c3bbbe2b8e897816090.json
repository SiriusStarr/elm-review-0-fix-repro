[1,[[1,1,4,6,[0,[[1,8,1,23,["NoUnsortedCases"]],[1,24,4,6,[1,[[2,7,2,11,[1,"rule"]],[3,7,3,17,[2,"RuleConfig"]],[3,19,3,27,[1,"defaults"]],[3,29,3,50,[1,"sortOnlyMatchingTypes"]],[3,52,3,69,[1,"doNotSortLiterals"]],[3,71,3,101,[1,"doNotSortTypesFromDependencies"]],[3,103,3,142,[1,"sortTypesFromDependenciesAlphabetically"]],[3,144,3,168,[1,"sortListPatternsByLength"]],[3,170,3,193,[1,"doNotLookPastUnsortable"]]]]]]]],[[20,1,20,28,[[20,8,20,12,["Dict"]],[0],[1,[20,13,20,28,[1,[[20,23,20,27,[2,"Dict"]]]]]]]],[21,1,21,27,[[21,8,21,18,["Dict","Extra"]],[1,[21,22,21,27,["DictX"]]],[0]]],[22,1,22,16,[[22,8,22,16,["Elm","Docs"]],[0],[0]]],[23,1,23,68,[[23,8,23,30,["Elm","Syntax","Declaration"]],[1,[23,34,23,45,["Declaration"]]],[1,[23,46,23,68,[1,[[23,56,23,67,[2,"Declaration"]]]]]]]],[24,1,24,71,[[24,8,24,27,["Elm","Syntax","Exposing"]],[0],[1,[24,28,24,71,[1,[[24,38,24,50,[3,["Exposing",[1,[24,46,24,50]]]]],[24,52,24,70,[3,["TopLevelExpose",[1,[24,66,24,70]]]]]]]]]]],[25,1,25,65,[[25,8,25,29,["Elm","Syntax","Expression"]],[1,[25,33,25,43,["Expression"]]],[1,[25,44,25,65,[1,[[25,54,25,64,[2,"Expression"]]]]]]]],[26,1,26,53,[[26,8,26,25,["Elm","Syntax","Module"]],[1,[26,29,26,35,["Module"]]],[1,[26,36,26,53,[1,[[26,46,26,52,[2,"Module"]]]]]]]],[27,1,27,51,[[27,8,27,29,["Elm","Syntax","ModuleName"]],[0],[1,[27,30,27,51,[1,[[27,40,27,50,[2,"ModuleName"]]]]]]]],[28,1,28,47,[[28,8,28,23,["Elm","Syntax","Node"]],[1,[28,27,28,31,["Node"]]],[1,[28,32,28,47,[1,[[28,42,28,46,[2,"Node"]]]]]]]],[29,1,29,56,[[29,8,29,26,["Elm","Syntax","Pattern"]],[1,[29,30,29,37,["Pattern"]]],[1,[29,38,29,56,[1,[[29,48,29,55,[2,"Pattern"]]]]]]]],[30,1,30,50,[[30,8,30,24,["Elm","Syntax","Range"]],[1,[30,28,30,33,["Range"]]],[1,[30,34,30,50,[1,[[30,44,30,49,[2,"Range"]]]]]]]],[31,1,31,39,[[31,8,31,23,["Elm","Syntax","Type"]],[0],[1,[31,24,31,39,[1,[[31,34,31,38,[2,"Type"]]]]]]]],[32,1,32,27,[[32,8,32,18,["List","Extra"]],[1,[32,22,32,27,["ListX"]]],[0]]],[33,1,33,29,[[33,8,33,19,["Maybe","Extra"]],[1,[33,23,33,29,["MaybeX"]]],[0]]],[34,1,34,84,[[34,8,34,36,["Review","ModuleNameLookupTable"]],[0],[1,[34,37,34,84,[1,[[34,47,34,68,[2,"ModuleNameLookupTable"]],[34,70,34,83,[1,"moduleNameFor"]]]]]]]],[35,1,35,69,[[35,8,35,33,["Review","Project","Dependency"]],[1,[35,37,35,47,["Dependency"]]],[1,[35,48,35,69,[1,[[35,58,35,68,[2,"Dependency"]]]]]]]],[36,1,36,50,[[36,8,36,19,["Review","Rule"]],[1,[36,23,36,27,["Rule"]]],[1,[36,28,36,50,[1,[[36,38,36,43,[2,"Error"]],[36,45,36,49,[2,"Rule"]]]]]]]],[37,1,37,26,[[37,8,37,11,["Set"]],[0],[1,[37,12,37,26,[1,[[37,22,37,25,[2,"Set"]]]]]]]],[38,1,38,90,[[38,8,38,12,["Util"]],[0],[1,[38,13,38,90,[1,[[38,23,38,35,[1,"checkSorting"]],[38,37,38,55,[1,"fallbackCompareFor"]],[38,57,38,89,[1,"fallbackCompareWithUnsortableFor"]]]]]]]]],[[41,1,223,38,[0,[[1,[41,1,210,3,"{-| Reports case patterns that are not in the \"proper\" order.\n\nðŸ”§ Running with `--fix` will automatically sort the patterns.\n\nThe proper order of custom types is the order in which they are defined in your\nsource files, and the order of other patterns may be specified in the rule\nconfiguration. See the [Configuration](#configuration) section below for more\ninformation.\n\n    config =\n        [ NoUnsortedCases.rule NoUnsortedCases.defaults\n        ]\n\n\n## Fail\n\n    type Custom\n        = Foo\n        | Bar\n        | Baz\n\n    func1 c =\n        case c of\n            Bar ->\n                \"bar\"\n\n            Foo ->\n                \"foo\"\n\n            Baz ->\n                \"baz\"\n\n    func2 cs =\n        case cs of\n            [ Bar ] ->\n                \"bar\"\n\n            [ Foo ] ->\n                \"foo\"\n\n            [ Foo, Foo ] ->\n                \"foofoo\"\n\n            [ Baz ] ->\n                \"baz\"\n\n            _ ->\n                \"other\"\n\n    func3 c =\n        case c of\n            Nothing ->\n                \"\"\n\n            Just Bar ->\n                \"bar\"\n\n            Just Foo ->\n                \"foo\"\n\n            Just Baz ->\n                \"baz\"\n\n    func4 c1 c2 =\n        case ( c1, c2 ) of\n            ( Foo, Baz ) ->\n                \"foo baz\"\n\n            ( Foo, Bar ) ->\n                \"foo bar\"\n\n            ( Bar, Foo ) ->\n                \"bar foo\"\n\n            ( Baz, Foo ) ->\n                \"baz foo\"\n\n            _ ->\n                \"other\"\n\n\n## Success\n\n    type Custom\n        = Foo\n        | Bar\n        | Baz\n\n    func1 c =\n        case c of\n            Foo ->\n                \"foo\"\n\n            Bar ->\n                \"bar\"\n\n            Baz ->\n                \"baz\"\n\n    func2 cs =\n        case cs of\n            [ Foo ] ->\n                \"foo\"\n\n            [ Foo, Foo ] ->\n                \"foofoo\"\n\n            [ Bar ] ->\n                \"bar\"\n\n            [ Baz ] ->\n                \"baz\"\n\n            _ ->\n                \"other\"\n\n    func3 c =\n        case c of\n            Just Foo ->\n                \"foo\"\n\n            Just Bar ->\n                \"bar\"\n\n            Just Baz ->\n                \"baz\"\n\n            Nothing ->\n                \"\"\n\n    func4 c1 c2 =\n        case ( c1, c2 ) of\n            ( Foo, Bar ) ->\n                \"foo bar\"\n\n            ( Foo, Baz ) ->\n                \"foo baz\"\n\n            ( Bar, Foo ) ->\n                \"bar foo\"\n\n            ( Baz, Foo ) ->\n                \"baz foo\"\n\n            _ ->\n                \"other\"\n\n\n## When (not) to enable this rule\n\nThis rule is useful when you want to ensure that you pattern match in a\nconsistent, predictable order, that is consistent with the order in which a type\nwas defined, as well as ensuring (optionally) that literal patterns and the like\nare sorted.\n\nThis rule is not useful when you want to be able to write case patterns in\ndifferent orders throughout your codebase, e.g. if you want to emphasize what\npattern is most important at any given point or glean a tiny bit of performance\nout of matching the more commonly-expected patterns first.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template SiriusStarr/elm-review-no-unsorted/example --rules NoUnsortedCases\n```\n\n-}"]],[1,[211,1,211,26,[[211,1,211,5,"rule"],[211,8,211,26,[6,[211,8,211,18,[1,[211,8,211,18,[[],"RuleConfig"]],[]]],[211,22,211,26,[1,[211,22,211,26,[[],"Rule"]],[]]]]]]]],[212,1,223,38,[[212,1,212,5,"rule"],[[212,6,212,12,[11,"config"]]],[213,5,223,38,[1,"|>",0,[213,5,222,44,[1,"|>",0,[213,5,221,47,[1,"|>",0,[213,5,220,14,[1,"|>",0,[213,5,215,57,[1,"|>",0,[213,5,214,94,[1,"|>",0,[213,5,213,70,[0,[[213,5,213,30,[2,["Rule"],"newProjectRuleSchema"]],[213,31,213,48,[5,"NoUnsortedCases"]],[213,49,213,70,[2,[],"initialProjectContext"]]]]],[214,12,214,94,[0,[[214,12,214,47,[2,["Rule"],"withDependenciesProjectVisitor"]],[214,48,214,94,[7,[214,49,214,93,[18,[[[214,50,214,51,[11,"d"]],[214,52,214,53,[11,"c"]]],[214,57,214,93,[6,[[214,59,214,61,[9,[]]],[214,63,214,91,[0,[[214,63,214,80,[2,[],"dependencyVisitor"]],[214,81,214,87,[2,[],"config"]],[214,88,214,89,[2,[],"d"]],[214,90,214,91,[2,[],"c"]]]]]]]]]]]]]]]]]],[215,12,215,57,[0,[[215,12,215,34,[2,["Rule"],"withModuleVisitor"]],[215,35,215,57,[7,[215,36,215,56,[0,[[215,36,215,49,[2,[],"moduleVisitor"]],[215,50,215,56,[2,[],"config"]]]]]]]]]]]],[216,12,220,14,[0,[[216,12,216,53,[2,["Rule"],"withModuleContextUsingContextCreator"]],[217,13,220,14,[8,[[217,15,217,56,[[217,15,217,34,"foldProjectContexts"],[217,37,217,56,[2,[],"foldProjectContexts"]]]],[218,15,219,13,[[218,15,218,34,"fromModuleToProject"],[218,37,218,56,[2,[],"fromModuleToProject"]]]],[219,15,220,13,[[219,15,219,34,"fromProjectToModule"],[219,37,219,63,[0,[[219,37,219,56,[2,[],"fromProjectToModule"]],[219,57,219,63,[2,[],"config"]]]]]]]]]]]]]]],[221,12,221,47,[2,["Rule"],"withContextFromImportedModules"]]]],[222,12,222,44,[2,["Rule"],"providesFixesForProjectRule"]]]],[223,12,223,38,[2,["Rule"],"fromProjectRuleSchema"]]]]]]]]],[226,1,236,10,[2,[[1,[226,1,228,3,"{-| Configuration for this rule. Create a new one with `defaults` and use\n`doNotSortLiterals`, `sortListPatternsByLength`, etc. to alter it.\n-}"]],[229,6,229,16,"RuleConfig"],[],[[230,7,236,10,[[230,7,230,17,"RuleConfig"],[[231,9,236,10,[4,[[231,11,231,36,[[231,11,231,29,"lookPastUnsortable"],[231,32,231,36,[1,[231,32,231,36,[[],"Bool"]],[]]]]],[232,11,233,9,[[232,11,232,20,"sortLists"],[232,23,232,32,[1,[232,23,232,32,[[],"SortLists"]],[]]]]],[233,11,234,9,[[233,11,233,23,"sortLiterals"],[233,26,233,30,[1,[233,26,233,30,[[],"Bool"]],[]]]]],[234,11,235,9,[[234,11,234,36,"sortTypesFromDependencies"],[234,39,234,64,[1,[234,39,234,64,[[],"SortTypesFromDependencies"]],[]]]]],[235,11,236,9,[[235,11,235,28,"sortablePredicate"],[235,31,235,55,[6,[235,31,235,37,[1,[235,31,235,37,[[],"String"]],[]]],[235,41,235,55,[6,[235,41,235,47,[1,[235,41,235,47,[[],"String"]],[]]],[235,51,235,55,[1,[235,51,235,55,[[],"Bool"]],[]]]]]]]]]]]]]]]]]]],[239,1,248,18,[2,[[1,[239,1,245,3,"{-| List patterns may be sorted in one of two ways:\n\n  - `Elementwise` -- Patterns are sorted by comparing elements sequentially at each position (from left to right). This is the same behavior as\n    `List.sort`.\n  - `LengthFirst` -- Shorter patterns always come before longer pattern, with patterns of the same length sorted elementwise at each position.\n\n-}"]],[246,6,246,15,"SortLists"],[],[[247,7,247,18,[[247,7,247,18,"Elementwise"],[]]],[248,7,248,18,[[248,7,248,18,"LengthFirst"],[]]]]]]],[251,1,265,16,[2,[[1,[251,1,261,3,"{-| Specify how to sort types that are **imported from dependencies**.\n\n  - `DeclarationOrder` -- Sort types in the order they appear in the\n    dependency's source file (or more technically in its documentation); this is\n    identical to the behavior of types defined within your own modules.\n  - `AlphabeticalOrder` -- Sort types alphabetically.\n  - `DoNotSort` -- Do not sort types from dependencies at all. Note that this\n    will render unsortable any patterns requiring types from dependencies to be\n    sorted.\n\n-}"]],[262,6,262,31,"SortTypesFromDependencies"],[],[[263,7,263,23,[[263,7,263,23,"DeclarationOrder"],[]]],[264,7,264,24,[[264,7,264,24,"AlphabeticalOrder"],[]]],[265,7,265,16,[[265,7,265,16,"DoNotSort"],[]]]]]]],[268,1,327,10,[0,[[1,[268,1,318,3,"{-| The default configuration, with the following behavior:\n\n  - All custom types are sorted. (This can be restricted by using\n    `sortOnlyMatchingTypes`.)\n\n  - Literal patterns (`String`, `Int`, etc.) are sorted in the natural order for their type.\n\n  - Types imported from dependencies are sorted in declaration order, i.e. in the order they appear in the dependency's source file (or more technically in its documentation); this is identical to the behavior of types defined within your own modules.\n\n  - Lists are sorted elementwise, by comparing the elements sequentially at each\n    position (from left to right).\n\n  - Unsortable patterns can be looked beyond to resolve ties, for example:\n\n```\nfunc custom =\n    case custom of\n        Container { field } Bar ->\n            not field\n\n        Container { field } Baz ->\n            field\n\n        Container { field } Foo ->\n            field\n```\n\nwill be sorted to\n\n    func custom =\n        case custom of\n            Container { field } Foo ->\n                field\n\n            Container { field } Bar ->\n                not field\n\n            Container { field } Baz ->\n                field\n\nUse `doNotSortLiterals`, `sortListPatternsByLength`, etc. to alter any of this\nbehavior, e.g.\n\n    config =\n        [ NoUnsortedCases.defaults\n            |> NoUnsortedCases.doNotSortLiterals\n            |> NoUnsortedCases.sortListPatternsByLength\n            |> NoUnsortedCases.rule\n        ]\n\n-}"]],[1,[319,1,319,22,[[319,1,319,9,"defaults"],[319,12,319,22,[1,[319,12,319,22,[[],"RuleConfig"]],[]]]]]],[320,1,327,10,[[320,1,320,9,"defaults"],[],[321,5,327,10,[0,[[321,5,321,15,[2,[],"RuleConfig"]],[322,9,327,10,[8,[[322,11,322,36,[[322,11,322,29,"lookPastUnsortable"],[322,32,322,36,[2,[],"True"]]]],[323,11,324,9,[[323,11,323,20,"sortLists"],[323,23,323,34,[2,[],"Elementwise"]]]],[324,11,325,9,[[324,11,324,23,"sortLiterals"],[324,26,324,30,[2,[],"True"]]]],[325,11,326,9,[[325,11,325,36,"sortTypesFromDependencies"],[325,39,325,55,[2,[],"DeclarationOrder"]]]],[326,11,327,9,[[326,11,326,28,"sortablePredicate"],[326,31,326,43,[18,[[[326,32,326,33,[0]],[326,34,326,35,[0]]],[326,39,326,43,[2,[],"True"]]]]]]]]]]]]]]]]]],[330,1,393,61,[0,[[1,[330,1,390,3,"{-| Restrict custom type sorting to only those matching a provided predicate.\nThis function takes two strings, the first being the full module name of a type,\ne.g. `\"Review.Rule\"` and the second being the name of a type, e.g. `\"Rule\"`, and\nreturns a `Bool` indicating whether the type should be sorted (with `True`\nmeaning sortable). For example:\n\nModule Foo:\n\n    module Foo exposing (Foo(..))\n\n    type Foo\n        = Foo\n        | Bar\n        | Baz\n\nModule Main:\n\n    module Main exposing (..)\n\n    type Msg\n        = ButtonPressed\n        | ButtonClicked\n\nModule ReviewConfig:\n\n    onlyMsg moduleName typeName =\n        case ( moduleName, typeName ) of\n            ( \"Main\", \"Msg\" ) ->\n                True\n\n            _ ->\n                False\n\n    config =\n        [ NoUnsortedCases.defaults\n            |> NoUnsortedCases.sortOnlyMatchingTypes onlyMsg\n            |> NoUnsortedCases.rule\n        ]\n\nwill sort the following pattern:\n\n    case msg of\n        ButtonClicked ->\n            ( { model | clicked = True }, Cmd.none )\n\n        ButtonPressed ->\n            ( { model | pressed = True }, Cmd.none )\n\nbut will not sort:\n\n    case foo of\n        Bar ->\n            \"bar\"\n\n        Baz ->\n            \"baz\"\n\n        Foo ->\n            \"foo\"\n\n-}"]],[1,[391,1,391,79,[[391,1,391,22,"sortOnlyMatchingTypes"],[391,25,391,79,[6,[391,25,391,51,[6,[391,26,391,32,[1,[391,26,391,32,[[],"String"]],[]]],[391,36,391,50,[6,[391,36,391,42,[1,[391,36,391,42,[[],"String"]],[]]],[391,46,391,50,[1,[391,46,391,50,[[],"Bool"]],[]]]]]]],[391,55,391,79,[6,[391,55,391,65,[1,[391,55,391,65,[[],"RuleConfig"]],[]]],[391,69,391,79,[1,[391,69,391,79,[[],"RuleConfig"]],[]]]]]]]]]],[392,1,393,61,[[392,1,392,22,"sortOnlyMatchingTypes"],[[392,23,392,40,[11,"sortablePredicate"]],[392,41,392,55,[14,[392,42,392,54,[12,[[],"RuleConfig"],[[392,53,392,54,[11,"c"]]]]]]]],[393,5,393,61,[0,[[393,5,393,15,[2,[],"RuleConfig"]],[393,16,393,61,[21,[393,18,393,19,"c"],[[393,22,393,60,[[393,22,393,39,"sortablePredicate"],[393,42,393,59,[2,[],"sortablePredicate"]]]]]]]]]]]]]]],[396,1,402,44,[0,[[1,[396,1,399,3,"{-| Change the behavior of the rule to **not** sort literal patterns. If\nliterals are not sorted, case expressions that would require sorting literals\ncannot be sorted and will thus be ignored by the rule.\n-}"]],[1,[400,1,400,45,[[400,1,400,18,"doNotSortLiterals"],[400,21,400,45,[6,[400,21,400,31,[1,[400,21,400,31,[[],"RuleConfig"]],[]]],[400,35,400,45,[1,[400,35,400,45,[[],"RuleConfig"]],[]]]]]]]],[401,1,402,44,[[401,1,401,18,"doNotSortLiterals"],[[401,19,401,33,[14,[401,20,401,32,[12,[[],"RuleConfig"],[[401,31,401,32,[11,"c"]]]]]]]],[402,5,402,44,[0,[[402,5,402,15,[2,[],"RuleConfig"]],[402,16,402,44,[21,[402,18,402,19,"c"],[[402,22,402,43,[[402,22,402,34,"sortLiterals"],[402,37,402,42,[2,[],"False"]]]]]]]]]]]]]]],[405,1,498,47,[0,[[1,[405,1,495,3,"{-| List patterns may be sorted in one of two ways:\n\n  - Elementwise (**default**) -- Patterns are sorted by comparing elements\n    sequentially at each position (from left to right). This is the same\n    behavior as `List.sort` (which is why it is the default).\n  - Length First -- Shorter patterns always come before longer pattern, with patterns of the same length sorted elementwise at each position.\n\nNote that uncons patterns are considered the length of their matching list, with\nwildcard patterns considered to have infinite length for the purposes of\nsorting. This is necessary to ensure that earlier patterns are not erroneously\nmatched by wildcards.\n\n**Elementwise**\n\n    case list of\n        [] ->\n            \"\"\n\n        [ 1 ] ->\n            \"1\"\n\n        [ 1, 1 ] ->\n            \"11\"\n\n        [ 1, 1, 1 ] ->\n            \"111\"\n\n        [ 1, 2 ] ->\n            \"12\"\n\n        [ 1, 3 ] ->\n            \"13\"\n\n        [ 2 ] ->\n            \"2\"\n\n        [ 2, 1 ] ->\n            \"21\"\n\n        [ 2, 2 ] ->\n            \"22\"\n\n        [ 2, 3 ] ->\n            \"23\"\n\n        [ 3 ] ->\n            \"3\"\n\n        _ ->\n            \"Too many...\"\n\n**Length First**\n\n    case list of\n        [] ->\n            \"\"\n\n        [ 1 ] ->\n            \"1\"\n\n        [ 2 ] ->\n            \"2\"\n\n        [ 3 ] ->\n            \"3\"\n\n        [ 1, 1 ] ->\n            \"11\"\n\n        [ 1, 2 ] ->\n            \"12\"\n\n        [ 1, 3 ] ->\n            \"13\"\n\n        [ 2, 1 ] ->\n            \"21\"\n\n        [ 2, 2 ] ->\n            \"22\"\n\n        [ 2, 3 ] ->\n            \"23\"\n\n        [ 1, 1, 1 ] ->\n            \"111\"\n\n        _ ->\n            \"Too many...\"\n\n-}"]],[1,[496,1,496,52,[[496,1,496,25,"sortListPatternsByLength"],[496,28,496,52,[6,[496,28,496,38,[1,[496,28,496,38,[[],"RuleConfig"]],[]]],[496,42,496,52,[1,[496,42,496,52,[[],"RuleConfig"]],[]]]]]]]],[497,1,498,47,[[497,1,497,25,"sortListPatternsByLength"],[[497,26,497,40,[14,[497,27,497,39,[12,[[],"RuleConfig"],[[497,38,497,39,[11,"c"]]]]]]]],[498,5,498,47,[0,[[498,5,498,15,[2,[],"RuleConfig"]],[498,16,498,47,[21,[498,18,498,19,"c"],[[498,22,498,46,[[498,22,498,31,"sortLists"],[498,34,498,45,[2,[],"LengthFirst"]]]]]]]]]]]]]]],[501,1,505,69,[0,[[1,[501,1,502,3,"{-| Sort custom types imported from dependencies (including `Basics` types like `Maybe` and `Bool`) alphabetically, rather than by their source order in the dependency's source code.\n-}"]],[1,[503,1,503,67,[[503,1,503,40,"sortTypesFromDependenciesAlphabetically"],[503,43,503,67,[6,[503,43,503,53,[1,[503,43,503,53,[[],"RuleConfig"]],[]]],[503,57,503,67,[1,[503,57,503,67,[[],"RuleConfig"]],[]]]]]]]],[504,1,505,69,[[504,1,504,40,"sortTypesFromDependenciesAlphabetically"],[[504,41,504,55,[14,[504,42,504,54,[12,[[],"RuleConfig"],[[504,53,504,54,[11,"c"]]]]]]]],[505,5,505,69,[0,[[505,5,505,15,[2,[],"RuleConfig"]],[505,16,505,69,[21,[505,18,505,19,"c"],[[505,22,505,68,[[505,22,505,47,"sortTypesFromDependencies"],[505,50,505,67,[2,[],"AlphabeticalOrder"]]]]]]]]]]]]]]],[508,1,513,61,[0,[[1,[508,1,510,3,"{-| Do not sort types from dependencies at all. Note that this will render\nunsortable any patterns requiring types from dependencies to be sorted.\n-}"]],[1,[511,1,511,58,[[511,1,511,31,"doNotSortTypesFromDependencies"],[511,34,511,58,[6,[511,34,511,44,[1,[511,34,511,44,[[],"RuleConfig"]],[]]],[511,48,511,58,[1,[511,48,511,58,[[],"RuleConfig"]],[]]]]]]]],[512,1,513,61,[[512,1,512,31,"doNotSortTypesFromDependencies"],[[512,32,512,46,[14,[512,33,512,45,[12,[[],"RuleConfig"],[[512,44,512,45,[11,"c"]]]]]]]],[513,5,513,61,[0,[[513,5,513,15,[2,[],"RuleConfig"]],[513,16,513,61,[21,[513,18,513,19,"c"],[[513,22,513,60,[[513,22,513,47,"sortTypesFromDependencies"],[513,50,513,59,[2,[],"DoNotSort"]]]]]]]]]]]]]]],[516,1,532,50,[0,[[1,[516,1,529,3,"{-| Do not look beyond unsortable patterns, rendering the following unsortable:\n\n    func custom =\n        case custom of\n            Container { field } Bar ->\n                not field\n\n            Container { field } Baz ->\n                field\n\n            Container { field } Foo ->\n                field\n\n-}"]],[1,[530,1,530,51,[[530,1,530,24,"doNotLookPastUnsortable"],[530,27,530,51,[6,[530,27,530,37,[1,[530,27,530,37,[[],"RuleConfig"]],[]]],[530,41,530,51,[1,[530,41,530,51,[[],"RuleConfig"]],[]]]]]]]],[531,1,532,50,[[531,1,531,24,"doNotLookPastUnsortable"],[[531,25,531,39,[14,[531,26,531,38,[12,[[],"RuleConfig"],[[531,37,531,38,[11,"c"]]]]]]]],[532,5,532,50,[0,[[532,5,532,15,[2,[],"RuleConfig"]],[532,16,532,50,[21,[532,18,532,19,"c"],[[532,22,532,49,[[532,22,532,40,"lookPastUnsortable"],[532,43,532,48,[2,[],"False"]]]]]]]]]]]]]]],[539,1,552,6,[1,[[1,[539,1,541,3,"{-| The project context, consisting of a map from module names to a map of type\nnames to orders.\n-}"]],[542,12,542,26,"ProjectContext"],[],[543,5,552,6,[4,[[543,7,551,14,[[543,7,543,18,"customTypes"],[544,9,551,14,[1,[544,9,544,13,[[],"Dict"]],[[545,13,545,23,[1,[545,13,545,23,[[],"ModuleName"]],[]]],[546,13,551,14,[1,[546,14,546,18,[[],"Dict"]],[[547,17,547,23,[1,[547,17,547,23,[[],"String"]],[]]],[548,17,550,18,[4,[[548,19,548,44,[[548,19,548,31,"constructors"],[548,34,548,44,[1,[548,34,548,37,[[],"Set"]],[[548,38,548,44,[1,[548,38,548,44,[[],"String"]],[]]]]]]]],[549,19,550,17,[[549,19,549,35,"declarationOrder"],[549,38,549,49,[1,[549,38,549,42,[[],"List"]],[[549,43,549,49,[1,[549,43,549,49,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]]],[555,1,585,6,[1,[[1,[555,1,565,3,"{-| The module context, consisting of a map from module names to a map of type\nnames to orders.\n\n  - `customTypes` -- Orderings of all known custom types.\n  - `exposedCustomTypes` -- All custom type orders that are exposed from local\n    module.\n  - `fileIsIgnored` -- Whether file should not be checked for errors\n  - `lookupTable` -- Module name lookup table\n  - `extractSourceCode` -- Source extractor for fixes\n\n-}"]],[566,12,566,25,"ModuleContext"],[],[567,5,585,6,[4,[[567,7,575,14,[[567,7,567,18,"customTypes"],[568,9,575,14,[1,[568,9,568,13,[[],"Dict"]],[[569,13,569,23,[1,[569,13,569,23,[[],"ModuleName"]],[]]],[570,13,575,14,[1,[570,14,570,18,[[],"Dict"]],[[571,17,571,23,[1,[571,17,571,23,[[],"String"]],[]]],[572,17,574,18,[4,[[572,19,572,44,[[572,19,572,31,"constructors"],[572,34,572,44,[1,[572,34,572,37,[[],"Set"]],[[572,38,572,44,[1,[572,38,572,44,[[],"String"]],[]]]]]]]],[573,19,574,17,[[573,19,573,35,"declarationOrder"],[573,38,573,49,[1,[573,38,573,42,[[],"List"]],[[573,43,573,49,[1,[573,43,573,49,[[],"String"]],[]]]]]]]]]]]]]]]]]]],[576,7,582,5,[[576,7,576,25,"exposedCustomTypes"],[577,9,581,14,[1,[577,9,577,13,[[],"Dict"]],[[578,13,578,19,[1,[578,13,578,19,[[],"String"]],[]]],[579,13,581,14,[4,[[579,15,579,40,[[579,15,579,27,"constructors"],[579,30,579,40,[1,[579,30,579,33,[[],"Set"]],[[579,34,579,40,[1,[579,34,579,40,[[],"String"]],[]]]]]]]],[580,15,581,13,[[580,15,580,31,"declarationOrder"],[580,34,580,45,[1,[580,34,580,38,[[],"List"]],[[580,39,580,45,[1,[580,39,580,45,[[],"String"]],[]]]]]]]]]]]]]]]],[582,7,583,5,[[582,7,582,20,"fileIsIgnored"],[582,23,582,27,[1,[582,23,582,27,[[],"Bool"]],[]]]]],[583,7,584,5,[[583,7,583,18,"lookupTable"],[583,21,583,42,[1,[583,21,583,42,[[],"ModuleNameLookupTable"]],[]]]]],[584,7,585,5,[[584,7,584,20,"extractSource"],[584,23,584,38,[6,[584,23,584,28,[1,[584,23,584,28,[[],"Range"]],[]]],[584,32,584,38,[1,[584,32,584,38,[[],"String"]],[]]]]]]]]]]]]],[588,1,652,15,[2,[[1,[588,1,640,3,"{-| Any pattern that might be sortable.\n\n  - `Constructor` -- A constructor pattern, with its type, declaration order, and any subpatterns, e.g. `Just 1 ->` becomes\n\n```\nConstructor\n    { order = 0\n    , subpatterns = [ Just (Literal (IntLiteral 1)) ]\n    , type_ = ( [ \"Basics\" ], \"Maybe\" )\n    }\n```\n\n  - `ListTupleOrUncons` -- A list, tuple, or uncons pattern, e.g. `(Nothing, Nothing) ->` becomes\n\n```\nListTupleOrUncons\n    { subpatterns =\n        [ Constructor\n            { order = 1\n            , subpatterns = []\n            , type_ = ( [ \"Basics\" ], \"Maybe\" )\n            }\n        , Constructor\n            { order = 1\n            , subpatterns = []\n            , type_ = ( [ \"Basics\" ], \"Maybe\" )\n            }\n        ]\n    , terminates = True\n    }\n```\n\nand `var :: _ ->` becomes\n\n    ListTupleOrUncons\n        { subpatterns =\n            [ Wildcard ]\n        , terminates = False\n        }\n\n  - `Literal` -- A literal pattern, e.g. `1 ->` becomes\n\n```\nLiteral (IntLiteral 1)\n```\n\n  - `Wildcard` -- A wildcard or var pattern, e.g. `var ->` becomes\n\n```\nWildcard\n```\n\n-}"]],[641,6,641,21,"SortablePattern"],[],[[642,7,646,10,[[642,7,642,18,"Constructor"],[[643,9,646,10,[4,[[643,11,643,22,[[643,11,643,16,"order"],[643,19,643,22,[1,[643,19,643,22,[[],"Int"]],[]]]]],[644,11,645,9,[[644,11,644,22,"subpatterns"],[644,25,644,53,[1,[644,25,644,29,[[],"List"]],[[644,30,644,53,[1,[644,31,644,36,[[],"Maybe"]],[[644,37,644,52,[1,[644,37,644,52,[[],"SortablePattern"]],[]]]]]]]]]]],[645,11,646,9,[[645,11,645,16,"type_"],[645,19,645,41,[3,[[645,21,645,31,[1,[645,21,645,31,[[],"ModuleName"]],[]]],[645,33,645,39,[1,[645,33,645,39,[[],"String"]],[]]]]]]]]]]]]]],[647,7,650,10,[[647,7,647,24,"ListTupleOrUncons"],[[648,9,650,10,[4,[[648,11,648,45,[[648,11,648,22,"subpatterns"],[648,25,648,45,[1,[648,25,648,29,[[],"List"]],[[648,30,648,45,[1,[648,30,648,45,[[],"SortablePattern"]],[]]]]]]]],[649,11,650,9,[[649,11,649,21,"terminates"],[649,24,649,28,[1,[649,24,649,28,[[],"Bool"]],[]]]]]]]]]]],[651,7,651,29,[[651,7,651,14,"Literal"],[[651,15,651,29,[1,[651,15,651,29,[[],"LiteralPattern"]],[]]]]]],[652,7,652,15,[[652,7,652,15,"Wildcard"],[]]]]]]],[655,1,662,25,[2,[[1,[655,1,657,3,"{-| A literal pattern. Int and Hex literals are not distinguished, as they are\nsorted identically.\n-}"]],[658,6,658,20,"LiteralPattern"],[],[[659,7,659,23,[[659,7,659,18,"CharLiteral"],[[659,19,659,23,[1,[659,19,659,23,[[],"Char"]],[]]]]]],[660,7,660,27,[[660,7,660,20,"StringLiteral"],[[660,21,660,27,[1,[660,21,660,27,[[],"String"]],[]]]]]],[661,7,661,21,[[661,7,661,17,"IntLiteral"],[[661,18,661,21,[1,[661,18,661,21,[[],"Int"]],[]]]]]],[662,7,662,25,[[662,7,662,19,"FloatLiteral"],[[662,20,662,25,[1,[662,20,662,25,[[],"Float"]],[]]]]]]]]]],[669,1,682,14,[0,[[1,[669,1,671,3,"{-| Visit each module, first getting types from all declarations and then\nchecking all expressions for `case`s.\n-}"]],[1,[672,1,672,161,[[672,1,672,14,"moduleVisitor"],[672,17,672,161,[6,[672,17,672,27,[1,[672,17,672,27,[[],"RuleConfig"]],[]]],[672,31,672,161,[6,[672,31,672,78,[1,[672,31,672,52,[["Rule"],"ModuleRuleSchema"]],[[672,53,672,64,[0,"schemaState"]],[672,65,672,78,[1,[672,65,672,78,[[],"ModuleContext"]],[]]]]]],[672,82,672,161,[1,[672,82,672,103,[["Rule"],"ModuleRuleSchema"]],[[672,104,672,147,[5,[672,106,672,117,"schemaState"],[672,119,672,146,[[672,120,672,146,[[672,120,672,140,"hasAtLeastOneVisitor"],[672,143,672,145,[2]]]]]]]],[672,148,672,161,[1,[672,148,672,161,[[],"ModuleContext"]],[]]]]]]]]]]]]],[673,1,682,14,[[673,1,673,14,"moduleVisitor"],[[673,15,673,21,[11,"config"]],[673,22,673,28,[11,"schema"]]],[674,5,682,14,[1,"|>",0,[674,5,674,11,[2,[],"schema"]],[675,12,682,14,[0,[[675,12,675,43,[2,["Rule"],"withExpressionEnterVisitor"]],[676,13,682,14,[7,[676,14,681,56,[18,[[[676,15,676,16,[11,"e"]],[676,17,676,18,[11,"c"]]],[677,17,681,56,[11,[677,20,677,35,[19,[677,20,677,21,[2,[],"c"]],[677,22,677,35,"fileIsIgnored"]]],[678,21,678,30,[6,[[678,23,678,25,[9,[]]],[678,27,678,28,[2,[],"c"]]]]],[681,21,681,56,[6,[[681,23,681,51,[0,[[681,23,681,40,[2,[],"expressionVisitor"]],[681,41,681,47,[2,[],"config"]],[681,48,681,49,[2,[],"e"]],[681,50,681,51,[2,[],"c"]]]]],[681,53,681,54,[2,[],"c"]]]]]]]]]]]]]]]]]]]]]],[685,1,690,6,[0,[[1,[685,1,686,3,"{-| The initial project context knows of no types.\n-}"]],[1,[687,1,687,39,[[687,1,687,22,"initialProjectContext"],[687,25,687,39,[1,[687,25,687,39,[[],"ProjectContext"]],[]]]]]],[688,1,690,6,[[688,1,688,22,"initialProjectContext"],[],[689,5,690,6,[8,[[689,7,689,31,[[689,7,689,18,"customTypes"],[689,21,689,31,[2,["Dict"],"empty"]]]]]]]]]]]],[693,1,707,31,[0,[[1,[693,1,694,3,"{-| Create a `ProjectContext` from a `ModuleContext`.\n-}"]],[1,[695,1,695,71,[[695,1,695,20,"fromModuleToProject"],[695,23,695,71,[1,[695,23,695,42,[["Rule"],"ContextCreator"]],[[695,43,695,56,[1,[695,43,695,56,[[],"ModuleContext"]],[]]],[695,57,695,71,[1,[695,57,695,71,[[],"ProjectContext"]],[]]]]]]]]],[696,1,707,31,[[696,1,696,20,"fromModuleToProject"],[],[697,5,707,31,[1,"|>",0,[697,5,706,10,[0,[[697,5,697,28,[2,["Rule"],"initContextCreator"]],[698,9,706,10,[7,[698,10,705,14,[18,[[[698,11,698,21,[11,"moduleName"]],[698,22,698,44,[8,[[698,24,698,42,"exposedCustomTypes"]]]]],[699,13,705,14,[8,[[699,15,704,65,[[699,15,699,26,"customTypes"],[700,17,704,65,[11,[700,20,700,51,[0,[[700,20,700,32,[2,["Dict"],"isEmpty"]],[700,33,700,51,[2,[],"exposedCustomTypes"]]]]],[701,21,701,31,[2,["Dict"],"empty"]],[704,21,704,65,[0,[[704,21,704,35,[2,["Dict"],"singleton"]],[704,36,704,46,[2,[],"moduleName"]],[704,47,704,65,[2,[],"exposedCustomTypes"]]]]]]]]]]]]]]]]]]]],[707,12,707,31,[2,["Rule"],"withModuleName"]]]]]]]]],[710,1,736,28,[0,[[1,[710,1,711,3,"{-| Create a `ModuleContext` from a `ProjectContext`.\n-}"]],[1,[712,1,712,85,[[712,1,712,20,"fromProjectToModule"],[712,23,712,85,[6,[712,23,712,33,[1,[712,23,712,33,[[],"RuleConfig"]],[]]],[712,37,712,85,[1,[712,37,712,56,[["Rule"],"ContextCreator"]],[[712,57,712,71,[1,[712,57,712,71,[[],"ProjectContext"]],[]]],[712,72,712,85,[1,[712,72,712,85,[[],"ModuleContext"]],[]]]]]]]]]]],[713,1,736,28,[[713,1,713,20,"fromProjectToModule"],[[713,21,713,27,[11,"config"]]],[714,5,736,28,[1,"|>",0,[714,5,735,34,[1,"|>",0,[714,5,734,31,[1,"|>",0,[714,5,733,40,[1,"|>",0,[714,5,732,42,[1,"|>",0,[714,5,731,10,[0,[[714,5,714,28,[2,["Rule"],"initContextCreator"]],[715,9,731,10,[7,[715,10,730,14,[18,[[[715,11,715,22,[11,"lookupTable"]],[715,23,715,36,[11,"extractSource"]],[715,37,715,47,[11,"moduleName"]],[715,48,715,61,[11,"fileIsIgnored"]],[715,62,715,96,[8,[[715,64,715,80,"moduleDefinition"],[715,82,715,94,"declarations"]]]],[715,97,715,111,[11,"projectContext"]]],[716,13,730,14,[16,[[[717,17,723,26,[1,[717,17,717,52,[8,[[717,19,717,30,"customTypes"],[717,32,717,50,"exposedCustomTypes"]]]],[718,21,723,26,[0,[[718,21,718,43,[2,[],"declarationListVisitor"]],[718,44,718,50,[2,[],"config"]],[719,25,719,37,[2,[],"declarations"]],[720,25,723,26,[8,[[720,27,720,67,[[720,27,720,38,"customTypes"],[720,41,720,67,[19,[720,41,720,55,[2,[],"projectContext"]],[720,56,720,67,"customTypes"]]]]],[721,27,722,25,[[721,27,721,39,"exposedTypes"],[721,42,721,88,[1,"<|",1,[721,42,721,57,[2,[],"getExposedTypes"]],[721,61,721,88,[0,[[721,61,721,71,[2,["Node"],"value"]],[721,72,721,88,[2,[],"moduleDefinition"]]]]]]]]],[722,27,723,25,[[722,27,722,37,"moduleName"],[722,40,722,66,[0,[[722,40,722,51,[2,["String"],"join"]],[722,52,722,55,[5,"."]],[722,56,722,66,[2,[],"moduleName"]]]]]]]]]]]]]]]],[725,13,730,14,[8,[[725,15,725,40,[[725,15,725,26,"customTypes"],[725,29,725,40,[2,[],"customTypes"]]]],[726,15,727,13,[[726,15,726,33,"exposedCustomTypes"],[726,36,726,54,[2,[],"exposedCustomTypes"]]]],[727,15,728,13,[[727,15,727,28,"fileIsIgnored"],[727,31,727,44,[2,[],"fileIsIgnored"]]]],[728,15,729,13,[[728,15,728,26,"lookupTable"],[728,29,728,40,[2,[],"lookupTable"]]]],[729,15,730,13,[[729,15,729,28,"extractSource"],[729,31,729,44,[2,[],"extractSource"]]]]]]]]]]]]]]]]]],[732,12,732,42,[2,["Rule"],"withModuleNameLookupTable"]]]],[733,12,733,40,[2,["Rule"],"withSourceCodeExtractor"]]]],[734,12,734,31,[2,["Rule"],"withModuleName"]]]],[735,12,735,34,[2,["Rule"],"withIsFileIgnored"]]]],[736,12,736,28,[2,["Rule"],"withFullAst"]]]]]]]]],[739,1,764,13,[0,[[1,[739,1,741,3,"{-| Get a set of all types with exposed constructors or `Nothing` if everything\nis exposed.\n-}"]],[1,[742,1,742,47,[[742,1,742,16,"getExposedTypes"],[742,19,742,47,[6,[742,19,742,25,[1,[742,19,742,25,[[],"Module"]],[]]],[742,29,742,47,[1,[742,29,742,34,[[],"Maybe"]],[[742,35,742,47,[1,[742,36,742,39,[[],"Set"]],[[742,40,742,46,[1,[742,40,742,46,[[],"String"]],[]]]]]]]]]]]]]],[743,1,764,13,[[743,1,743,16,"getExposedTypes"],[],[744,5,764,13,[16,[[[745,9,752,28,[0,[[0],[1,[745,9,745,79,[[745,9,745,41,"keepTypesWithExposedConstructors"],[745,44,745,79,[6,[745,44,745,63,[1,[745,44,745,48,[[],"Node"]],[[745,49,745,63,[1,[745,49,745,63,[[],"TopLevelExpose"]],[]]]]]],[745,67,745,79,[1,[745,67,745,72,[[],"Maybe"]],[[745,73,745,79,[1,[745,73,745,79,[[],"String"]],[]]]]]]]]]]],[746,9,752,28,[[746,9,746,41,"keepTypesWithExposedConstructors"],[[746,42,746,43,[11,"e"]]],[747,13,752,28,[17,[[747,18,747,30,[0,[[747,18,747,28,[2,["Node"],"value"]],[747,29,747,30,[2,[],"e"]]]]],[[[748,17,748,36,[12,[[],"TypeExpose"],[[748,28,748,36,[8,[[748,30,748,34,"name"]]]]]]],[749,21,749,30,[0,[[749,21,749,25,[2,[],"Just"]],[749,26,749,30,[2,[],"name"]]]]]],[[751,17,751,18,[0]],[752,21,752,28,[2,[],"Nothing"]]]]]]]]]]]]],[754,5,764,13,[1,">>",1,[754,5,754,24,[2,["Module"],"exposingList"]],[755,12,764,13,[7,[755,13,763,36,[18,[[[755,14,755,15,[11,"l"]]],[756,17,763,36,[17,[[756,22,756,23,[2,[],"l"]],[[[757,21,757,26,[12,[[],"All"],[[757,25,757,26,[0]]]]],[758,25,758,32,[2,[],"Nothing"]]],[[760,21,760,32,[12,[[],"Explicit"],[[760,30,760,32,[11,"es"]]]]],[761,25,763,36,[1,"|>",0,[761,25,762,44,[1,"|>",0,[761,25,761,75,[0,[[761,25,761,39,[2,["List"],"filterMap"]],[761,40,761,72,[2,[],"keepTypesWithExposedConstructors"]],[761,73,761,75,[2,[],"es"]]]]],[762,32,762,44,[2,["Set"],"fromList"]]]],[763,32,763,36,[2,[],"Just"]]]]]]]]]]]]]]]]]]]]]]]],[767,1,773,6,[0,[[1,[767,1,768,3,"{-| Combine `ProjectContext`s by taking the union of known type orders.\n-}"]],[1,[769,1,769,73,[[769,1,769,20,"foldProjectContexts"],[769,23,769,73,[6,[769,23,769,37,[1,[769,23,769,37,[[],"ProjectContext"]],[]]],[769,41,769,73,[6,[769,41,769,55,[1,[769,41,769,55,[[],"ProjectContext"]],[]]],[769,59,769,73,[1,[769,59,769,73,[[],"ProjectContext"]],[]]]]]]]]]],[770,1,773,6,[[770,1,770,20,"foldProjectContexts"],[[770,21,770,31,[11,"newContext"]],[770,32,770,43,[11,"prevContext"]]],[771,5,773,6,[8,[[771,7,772,66,[[771,7,771,18,"customTypes"],[772,9,772,66,[0,[[772,9,772,19,[2,["Dict"],"union"]],[772,20,772,42,[19,[772,20,772,30,[2,[],"newContext"]],[772,31,772,42,"customTypes"]]],[772,43,772,66,[19,[772,43,772,54,[2,[],"prevContext"]],[772,55,772,66,"customTypes"]]]]]]]]]]]]]]]],[780,1,840,16,[0,[[1,[780,1,781,3,"{-| Visit all dependencies and store type order from them.\n-}"]],[1,[782,1,782,93,[[782,1,782,18,"dependencyVisitor"],[782,21,782,93,[6,[782,21,782,31,[1,[782,21,782,31,[[],"RuleConfig"]],[]]],[782,35,782,93,[6,[782,35,782,57,[1,[782,35,782,39,[[],"Dict"]],[[782,40,782,46,[1,[782,40,782,46,[[],"String"]],[]]],[782,47,782,57,[1,[782,47,782,57,[[],"Dependency"]],[]]]]]],[782,61,782,93,[6,[782,61,782,75,[1,[782,61,782,75,[[],"ProjectContext"]],[]]],[782,79,782,93,[1,[782,79,782,93,[[],"ProjectContext"]],[]]]]]]]]]]]],[783,1,840,16,[[783,1,783,18,"dependencyVisitor"],[[783,19,783,38,[14,[783,20,783,37,[12,[[],"RuleConfig"],[[783,31,783,37,[11,"config"]]]]]]],[783,39,783,43,[11,"deps"]],[783,44,783,51,[11,"context"]]],[784,5,840,16,[16,[[[785,9,810,28,[0,[[0],[1,[785,9,785,129,[[785,9,785,19,"docToEntry"],[785,22,785,129,[6,[785,22,785,28,[1,[785,22,785,28,[[],"String"]],[]]],[785,32,785,129,[6,[785,32,785,46,[1,[785,32,785,46,[["Elm","Docs"],"Union"]],[]]],[785,50,785,129,[1,[785,50,785,55,[[],"Maybe"]],[[785,56,785,129,[3,[[785,58,785,64,[1,[785,58,785,64,[[],"String"]],[]]],[785,66,785,127,[4,[[785,68,785,93,[[785,68,785,80,"constructors"],[785,83,785,93,[1,[785,83,785,86,[[],"Set"]],[[785,87,785,93,[1,[785,87,785,93,[[],"String"]],[]]]]]]]],[785,95,785,126,[[785,95,785,111,"declarationOrder"],[785,114,785,125,[1,[785,114,785,118,[[],"List"]],[[785,119,785,125,[1,[785,119,785,125,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]],[786,9,810,28,[[786,9,786,19,"docToEntry"],[[786,20,786,30,[11,"moduleName"]],[786,31,786,45,[8,[[786,33,786,37,"name"],[786,39,786,43,"tags"]]]]],[787,13,810,28,[16,[[[788,17,790,46,[0,[[0],[1,[788,17,788,43,[[788,17,788,29,"constructors"],[788,32,788,43,[1,[788,32,788,36,[[],"List"]],[[788,37,788,43,[1,[788,37,788,43,[[],"String"]],[]]]]]]]]],[789,17,790,46,[[789,17,789,29,"constructors"],[],[790,21,790,46,[0,[[790,21,790,29,[2,["List"],"map"]],[790,30,790,41,[2,["Tuple"],"first"]],[790,42,790,46,[2,[],"tags"]]]]]]]]]]],[792,13,810,28,[17,[[792,18,792,96,[6,[[792,20,792,60,[0,[[792,20,792,44,[19,[792,20,792,26,[2,[],"config"]],[792,27,792,44,"sortablePredicate"]]],[792,45,792,55,[2,[],"moduleName"]],[792,56,792,60,[2,[],"name"]]]]],[792,62,792,94,[19,[792,62,792,68,[2,[],"config"]],[792,69,792,94,"sortTypesFromDependencies"]]]]]],[[[793,17,793,44,[7,[[793,19,793,23,[12,[[],"True"],[]]],[793,25,793,42,[12,[[],"AlphabeticalOrder"],[]]]]]],[794,21,799,26,[0,[[794,21,794,25,[2,[],"Just"]],[795,25,799,26,[6,[[795,27,795,31,[2,[],"name"]],[796,27,798,28,[8,[[796,29,796,69,[[796,29,796,41,"constructors"],[796,44,796,69,[0,[[796,44,796,56,[2,["Set"],"fromList"]],[796,57,796,69,[2,[],"constructors"]]]]]]],[797,29,798,27,[[797,29,797,45,"declarationOrder"],[797,48,797,89,[0,[[797,48,797,68,[2,["ListX"],"stableSortWith"]],[797,69,797,76,[2,[],"compare"]],[797,77,797,89,[2,[],"constructors"]]]]]]]]]]]]]]]]],[[801,17,801,28,[7,[[801,19,801,23,[12,[[],"True"],[]]],[801,25,801,26,[0]]]]],[802,21,807,26,[0,[[802,21,802,25,[2,[],"Just"]],[803,25,807,26,[6,[[803,27,803,31,[2,[],"name"]],[804,27,806,28,[8,[[804,29,804,69,[[804,29,804,41,"constructors"],[804,44,804,69,[0,[[804,44,804,56,[2,["Set"],"fromList"]],[804,57,804,69,[2,[],"constructors"]]]]]]],[805,29,806,27,[[805,29,805,45,"declarationOrder"],[805,48,805,60,[2,[],"constructors"]]]]]]]]]]]]]],[[809,17,809,29,[7,[[809,19,809,24,[12,[[],"False"],[]]],[809,26,809,27,[0]]]]],[810,21,810,28,[2,[],"Nothing"]]]]]]]]]]]]]]]],[812,5,840,16,[11,[812,8,812,53,[1,"/=",2,[812,8,812,40,[19,[812,8,812,14,[2,[],"config"]],[812,15,812,40,"sortTypesFromDependencies"]]],[812,44,812,53,[2,[],"DoNotSort"]]]],[813,9,837,17,[0,[[813,9,813,19,[2,["Dict"],"foldl"]],[814,13,835,14,[7,[814,14,834,92,[18,[[[814,15,814,16,[0]],[814,17,814,20,[11,"dep"]],[814,21,814,24,[11,"acc"]]],[815,17,834,92,[1,"|>",0,[815,17,833,37,[1,"|>",0,[815,17,832,26,[1,"|>",0,[815,17,815,39,[0,[[815,17,815,35,[2,["Dependency"],"modules"]],[815,36,815,39,[2,[],"dep"]]]]],[816,24,832,26,[0,[[816,24,816,38,[2,["List"],"filterMap"]],[817,25,832,26,[7,[817,26,831,38,[18,[[[817,27,817,43,[8,[[817,29,817,33,"name"],[817,35,817,41,"unions"]]]]],[818,29,831,38,[1,"|>",0,[818,29,826,37,[1,"|>",0,[818,29,819,49,[1,"|>",0,[818,29,818,68,[0,[[818,29,818,43,[2,["List"],"filterMap"]],[818,44,818,61,[7,[818,45,818,60,[0,[[818,45,818,55,[2,[],"docToEntry"]],[818,56,818,60,[2,[],"name"]]]]]]],[818,62,818,68,[2,[],"unions"]]]]],[819,36,819,49,[2,["Dict"],"fromList"]]]],[820,36,826,37,[7,[820,37,825,52,[18,[[[820,38,820,40,[11,"ts"]]],[821,41,825,52,[11,[821,44,821,59,[0,[[821,44,821,56,[2,["Dict"],"isEmpty"]],[821,57,821,59,[2,[],"ts"]]]]],[822,45,822,52,[2,[],"Nothing"]],[825,45,825,52,[0,[[825,45,825,49,[2,[],"Just"]],[825,50,825,52,[2,[],"ts"]]]]]]]]]]]]]],[827,36,831,38,[0,[[827,36,827,45,[2,["Maybe"],"map"]],[828,37,831,38,[7,[828,38,830,64,[0,[[828,38,828,48,[2,["Tuple"],"pair"]],[830,41,830,64,[7,[830,42,830,63,[0,[[830,42,830,54,[2,["String"],"split"]],[830,55,830,58,[5,"."]],[830,59,830,63,[2,[],"name"]]]]]]]]]]]]]]]]]]]]]]]]]]],[833,24,833,37,[2,["Dict"],"fromList"]]]],[834,24,834,92,[7,[834,25,834,91,[18,[[[834,26,834,31,[11,"types"]]],[834,35,834,91,[21,[834,37,834,40,"acc"],[[834,43,834,90,[[834,43,834,54,"customTypes"],[834,57,834,89,[0,[[834,57,834,67,[2,["Dict"],"union"]],[834,68,834,73,[2,[],"types"]],[834,74,834,89,[19,[834,74,834,77,[2,[],"acc"]],[834,78,834,89,"customTypes"]]]]]]]]]]]]]]]]]]]]]]],[836,13,836,20,[2,[],"context"]],[837,13,837,17,[2,[],"deps"]]]]],[840,9,840,16,[2,[],"context"]]]]]]]]]]]],[843,1,922,13,[0,[[1,[843,1,844,3,"{-| Visit declarations, storing custom type orders.\n-}"]],[1,[845,1,877,10,[[845,1,845,23,"declarationListVisitor"],[846,5,877,10,[6,[846,5,846,15,[1,[846,5,846,15,[[],"RuleConfig"]],[]]],[847,8,877,10,[6,[847,8,847,31,[1,[847,8,847,12,[[],"List"]],[[847,13,847,31,[1,[847,14,847,18,[[],"Node"]],[[847,19,847,30,[1,[847,19,847,30,[[],"Declaration"]],[]]]]]]]]],[849,9,877,10,[6,[849,9,860,10,[4,[[849,11,857,18,[[849,11,849,22,"customTypes"],[850,13,857,18,[1,[850,13,850,17,[[],"Dict"]],[[851,17,851,27,[1,[851,17,851,27,[[],"ModuleName"]],[]]],[852,17,857,18,[1,[852,18,852,22,[[],"Dict"]],[[853,21,853,27,[1,[853,21,853,27,[[],"String"]],[]]],[854,21,856,22,[4,[[854,23,854,48,[[854,23,854,35,"constructors"],[854,38,854,48,[1,[854,38,854,41,[[],"Set"]],[[854,42,854,48,[1,[854,42,854,48,[[],"String"]],[]]]]]]]],[855,23,856,21,[[855,23,855,39,"declarationOrder"],[855,42,855,53,[1,[855,42,855,46,[[],"List"]],[[855,47,855,53,[1,[855,47,855,53,[[],"String"]],[]]]]]]]]]]]]]]]]]]],[858,11,859,9,[[858,11,858,23,"exposedTypes"],[858,26,858,44,[1,[858,26,858,31,[[],"Maybe"]],[[858,32,858,44,[1,[858,33,858,36,[[],"Set"]],[[858,37,858,43,[1,[858,37,858,43,[[],"String"]],[]]]]]]]]]]],[859,11,860,9,[[859,11,859,21,"moduleName"],[859,24,859,30,[1,[859,24,859,30,[[],"String"]],[]]]]]]]],[862,9,877,10,[4,[[862,11,870,18,[[862,11,862,22,"customTypes"],[863,13,870,18,[1,[863,13,863,17,[[],"Dict"]],[[864,17,864,27,[1,[864,17,864,27,[[],"ModuleName"]],[]]],[865,17,870,18,[1,[865,18,865,22,[[],"Dict"]],[[866,21,866,27,[1,[866,21,866,27,[[],"String"]],[]]],[867,21,869,22,[4,[[867,23,867,48,[[867,23,867,35,"constructors"],[867,38,867,48,[1,[867,38,867,41,[[],"Set"]],[[867,42,867,48,[1,[867,42,867,48,[[],"String"]],[]]]]]]]],[868,23,869,21,[[868,23,868,39,"declarationOrder"],[868,42,868,53,[1,[868,42,868,46,[[],"List"]],[[868,47,868,53,[1,[868,47,868,53,[[],"String"]],[]]]]]]]]]]]]]]]]]]],[871,11,877,9,[[871,11,871,29,"exposedCustomTypes"],[872,13,876,18,[1,[872,13,872,17,[[],"Dict"]],[[873,17,873,23,[1,[873,17,873,23,[[],"String"]],[]]],[874,17,876,18,[4,[[874,19,874,44,[[874,19,874,31,"constructors"],[874,34,874,44,[1,[874,34,874,37,[[],"Set"]],[[874,38,874,44,[1,[874,38,874,44,[[],"String"]],[]]]]]]]],[875,19,876,17,[[875,19,875,35,"declarationOrder"],[875,38,875,49,[1,[875,38,875,42,[[],"List"]],[[875,43,875,49,[1,[875,43,875,49,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]]]]]]]],[878,1,922,13,[[878,1,878,23,"declarationListVisitor"],[[878,24,878,43,[14,[878,25,878,42,[12,[[],"RuleConfig"],[[878,36,878,42,[11,"config"]]]]]]],[878,44,878,56,[11,"declarations"]],[878,57,878,98,[8,[[878,59,878,70,"customTypes"],[878,72,878,84,"exposedTypes"],[878,86,878,96,"moduleName"]]]]],[879,5,922,13,[16,[[[880,9,894,28,[0,[[0],[1,[880,9,880,124,[[880,9,880,22,"getCustomType"],[880,25,880,124,[6,[880,25,880,41,[1,[880,25,880,29,[[],"Node"]],[[880,30,880,41,[1,[880,30,880,41,[[],"Declaration"]],[]]]]]],[880,45,880,124,[1,[880,45,880,50,[[],"Maybe"]],[[880,51,880,124,[3,[[880,53,880,59,[1,[880,53,880,59,[[],"String"]],[]]],[880,61,880,122,[4,[[880,63,880,88,[[880,63,880,75,"constructors"],[880,78,880,88,[1,[880,78,880,81,[[],"Set"]],[[880,82,880,88,[1,[880,82,880,88,[[],"String"]],[]]]]]]]],[880,90,880,121,[[880,90,880,106,"declarationOrder"],[880,109,880,120,[1,[880,109,880,113,[[],"List"]],[[880,114,880,120,[1,[880,114,880,120,[[],"String"]],[]]]]]]]]]]]]]]]]]]]]]],[881,9,894,28,[[881,9,881,22,"getCustomType"],[[881,23,881,27,[11,"node"]]],[882,13,894,28,[17,[[882,18,882,33,[0,[[882,18,882,28,[2,["Node"],"value"]],[882,29,882,33,[2,[],"node"]]]]],[[[883,17,883,70,[12,[["Declaration"],"CustomTypeDeclaration"],[[883,51,883,70,[14,[883,52,883,69,[13,[883,52,883,60,[8,[[883,54,883,58,"name"]]]],[883,64,883,69,"type_"]]]]]]]],[884,21,891,32,[11,[884,24,884,77,[0,[[884,24,884,48,[19,[884,24,884,30,[2,[],"config"]],[884,31,884,48,"sortablePredicate"]]],[884,49,884,59,[2,[],"moduleName"]],[884,60,884,77,[7,[884,61,884,76,[0,[[884,61,884,71,[2,["Node"],"value"]],[884,72,884,76,[2,[],"name"]]]]]]]]]],[885,25,888,30,[0,[[885,25,885,29,[2,[],"Just"]],[886,29,888,30,[6,[[886,31,886,52,[0,[[886,31,886,41,[2,["Node"],"value"]],[886,42,886,52,[19,[886,42,886,47,[2,[],"type_"]],[886,48,886,52,"name"]]]]]],[887,31,887,53,[0,[[887,31,887,47,[2,[],"typeConstructors"]],[887,48,887,53,[2,[],"type_"]]]]]]]]]]],[891,25,891,32,[2,[],"Nothing"]]]]],[[893,17,893,18,[0]],[894,21,894,28,[2,[],"Nothing"]]]]]]]]]]]],[896,9,904,21,[0,[[0],[1,[896,9,896,97,[[896,9,896,25,"typeConstructors"],[896,28,896,97,[6,[896,28,896,32,[1,[896,28,896,32,[[],"Type"]],[]]],[896,36,896,97,[4,[[896,38,896,63,[[896,38,896,50,"constructors"],[896,53,896,63,[1,[896,53,896,56,[[],"Set"]],[[896,57,896,63,[1,[896,57,896,63,[[],"String"]],[]]]]]]]],[896,65,896,96,[[896,65,896,81,"declarationOrder"],[896,84,896,95,[1,[896,84,896,88,[[],"List"]],[[896,89,896,95,[1,[896,89,896,95,[[],"String"]],[]]]]]]]]]]]]]]]],[897,9,904,21,[[897,9,897,25,"typeConstructors"],[[897,26,897,31,[11,"type_"]]],[898,13,904,21,[1,"|>",0,[898,13,899,64,[1,"|>",0,[898,13,898,31,[19,[898,13,898,18,[2,[],"type_"]],[898,19,898,31,"constructors"]]],[899,20,899,64,[0,[[899,20,899,28,[2,["List"],"map"]],[899,29,899,64,[7,[899,30,899,63,[1,">>",1,[899,30,899,40,[2,["Node"],"value"]],[899,44,899,63,[1,">>",1,[899,44,899,49,[20,".name"]],[899,53,899,63,[2,["Node"],"value"]]]]]]]]]]]]],[900,20,904,21,[7,[900,21,903,26,[18,[[[900,22,900,24,[11,"cs"]]],[901,25,903,26,[8,[[901,27,901,57,[[901,27,901,39,"constructors"],[901,42,901,57,[0,[[901,42,901,54,[2,["Set"],"fromList"]],[901,55,901,57,[2,[],"cs"]]]]]]],[902,27,903,25,[[902,27,902,43,"declarationOrder"],[902,46,902,48,[2,[],"cs"]]]]]]]]]]]]]]]]]]]],[907,5,922,13,[1,"|>",0,[907,5,907,46,[0,[[907,5,907,19,[2,["List"],"filterMap"]],[907,20,907,33,[2,[],"getCustomType"]],[907,34,907,46,[2,[],"declarations"]]]]],[908,12,922,13,[7,[908,13,921,22,[18,[[[908,14,908,16,[11,"ts"]]],[909,17,921,22,[11,[909,20,909,35,[0,[[909,20,909,32,[2,["List"],"isEmpty"]],[909,33,909,35,[2,[],"ts"]]]]],[910,21,912,22,[8,[[910,23,910,48,[[910,23,910,34,"customTypes"],[910,37,910,48,[2,[],"customTypes"]]]],[911,23,912,21,[[911,23,911,41,"exposedCustomTypes"],[911,44,911,54,[2,["Dict"],"empty"]]]]]]],[915,21,921,22,[8,[[915,23,917,68,[[915,23,915,34,"customTypes"],[916,25,917,68,[1,"|>",0,[916,25,916,41,[0,[[916,25,916,38,[2,["Dict"],"fromList"]],[916,39,916,41,[2,[],"ts"]]]]],[917,32,917,68,[7,[917,33,917,67,[18,[[[917,34,917,35,[11,"v"]]],[917,39,917,67,[0,[[917,39,917,50,[2,["Dict"],"insert"]],[917,51,917,53,[9,[]]],[917,54,917,55,[2,[],"v"]],[917,56,917,67,[2,[],"customTypes"]]]]]]]]]]]]]],[918,23,921,21,[[918,23,918,41,"exposedCustomTypes"],[919,25,920,45,[1,"|>",0,[919,25,919,115,[0,[[919,25,919,36,[2,["List"],"filter"]],[919,37,919,112,[7,[919,38,919,111,[18,[[[919,39,919,54,[7,[[919,41,919,49,[11,"typeName"]],[919,51,919,52,[0]]]]]],[919,58,919,111,[0,[[919,58,919,71,[2,["MaybeX"],"unwrap"]],[919,72,919,76,[2,[],"True"]],[919,77,919,98,[7,[919,78,919,97,[0,[[919,78,919,88,[2,["Set"],"member"]],[919,89,919,97,[2,[],"typeName"]]]]]]],[919,99,919,111,[2,[],"exposedTypes"]]]]]]]]]],[919,113,919,115,[2,[],"ts"]]]]],[920,32,920,45,[2,["Dict"],"fromList"]]]]]]]]]]]]]]]]]]]]]]]]]],[925,1,977,15,[0,[[1,[925,1,927,3,"{-| Visit all expressions in a module, checking for `case`s and ensuring those\nare sorted properly.\n-}"]],[1,[928,1,928,86,[[928,1,928,18,"expressionVisitor"],[928,21,928,86,[6,[928,21,928,31,[1,[928,21,928,31,[[],"RuleConfig"]],[]]],[928,35,928,86,[6,[928,35,928,50,[1,[928,35,928,39,[[],"Node"]],[[928,40,928,50,[1,[928,40,928,50,[[],"Expression"]],[]]]]]],[928,54,928,86,[6,[928,54,928,67,[1,[928,54,928,67,[[],"ModuleContext"]],[]]],[928,71,928,86,[1,[928,71,928,75,[[],"List"]],[[928,76,928,86,[1,[928,77,928,82,[[],"Error"]],[[928,83,928,85,[4,[]]]]]]]]]]]]]]]]]],[929,1,977,15,[[929,1,929,18,"expressionVisitor"],[[929,19,929,25,[11,"config"]],[929,26,929,30,[11,"node"]],[929,31,929,38,[11,"context"]]],[930,5,977,15,[17,[[930,10,930,25,[0,[[930,10,930,20,[2,["Node"],"value"]],[930,21,930,25,[2,[],"node"]]]]],[[[931,9,931,44,[12,[["Expression"],"CaseExpression"],[[931,35,931,44,[8,[[931,37,931,42,"cases"]]]]]]],[932,13,973,40,[16,[[[933,17,941,85,[0,[[0],[1,[933,17,933,35,[[933,17,933,27,"errorRange"],[933,30,933,35,[1,[933,30,933,35,[[],"Range"]],[]]]]]],[934,17,941,85,[[934,17,934,27,"errorRange"],[],[935,21,941,85,[16,[[[936,25,938,44,[0,[[0],[1,[936,25,936,34,[[936,25,936,26,"r"],[936,29,936,34,[1,[936,29,936,34,[[],"Range"]],[]]]]]],[937,25,938,44,[[937,25,937,26,"r"],[],[938,29,938,44,[0,[[938,29,938,39,[2,["Node"],"range"]],[938,40,938,44,[2,[],"node"]]]]]]]]]]],[941,21,941,85,[21,[941,23,941,24,"r"],[[941,27,941,84,[[941,27,941,30,"end"],[941,33,941,83,[8,[[941,35,941,52,[[941,35,941,38,"row"],[941,41,941,52,[19,[941,41,941,48,[19,[941,41,941,42,[2,[],"r"]],[941,43,941,48,"start"]]],[941,49,941,52,"row"]]]]],[941,54,941,82,[[941,54,941,60,"column"],[941,63,941,81,[1,"+",0,[941,63,941,77,[19,[941,63,941,70,[19,[941,63,941,64,[2,[],"r"]],[941,65,941,70,"start"]]],[941,71,941,77,"column"]]],[941,80,941,81,[3,4]]]]]]]]]]]]]]]]]]]]]]],[944,13,973,40,[1,"|>",0,[944,13,972,22,[1,"|>",0,[944,13,961,22,[0,[[944,13,944,31,[2,["ListX"],"indexedFoldr"]],[945,17,959,18,[7,[945,18,958,67,[18,[[[945,19,945,20,[11,"i"]],[945,21,945,29,[7,[[945,23,945,24,[11,"p"]],[945,26,945,27,[11,"e"]]]]],[945,30,945,33,[11,"acc"]]],[946,21,958,67,[1,"|>",0,[946,21,957,30,[1,"|>",0,[946,21,946,56,[0,[[946,21,946,39,[2,[],"getSortablePattern"]],[946,40,946,46,[2,[],"config"]],[946,47,946,54,[2,[],"context"]],[946,55,946,56,[2,[],"p"]]]]],[947,28,957,30,[0,[[947,28,947,37,[2,["Maybe"],"map"]],[948,29,957,30,[7,[948,30,956,34,[18,[[[948,31,948,33,[11,"sP"]]],[949,33,956,34,[8,[[949,35,949,44,[[949,35,949,40,"index"],[949,43,949,44,[2,[],"i"]]]],[950,35,951,33,[[950,35,950,42,"pattern"],[950,45,950,47,[2,[],"sP"]]]],[951,35,956,33,[[951,35,951,40,"range"],[952,37,955,42,[0,[[952,37,952,50,[2,["Range"],"combine"]],[953,41,955,42,[9,[[953,43,953,55,[0,[[953,43,953,53,[2,["Node"],"range"]],[953,54,953,55,[2,[],"p"]]]]],[954,43,954,55,[0,[[954,43,954,53,[2,["Node"],"range"]],[954,54,954,55,[2,[],"e"]]]]]]]]]]]]]]]]]]]]]]]]]],[958,28,958,67,[0,[[958,28,958,38,[2,["Maybe"],"map2"]],[958,39,958,63,[7,[958,40,958,62,[18,[[[958,41,958,45,[11,"acc_"]],[958,46,958,48,[11,"sP"]]],[958,52,958,62,[1,"::",1,[958,52,958,54,[2,[],"sP"]],[958,58,958,62,[2,[],"acc_"]]]]]]]]],[958,64,958,67,[2,[],"acc"]]]]]]]]]]]],[960,17,960,26,[7,[960,18,960,25,[0,[[960,18,960,22,[2,[],"Just"]],[960,23,960,25,[9,[]]]]]]]],[961,17,961,22,[2,[],"cases"]]]]],[962,20,972,22,[0,[[962,20,962,29,[2,["Maybe"],"map"]],[963,21,972,22,[7,[963,22,971,35,[0,[[963,22,963,34,[2,[],"checkSorting"]],[963,35,963,56,[19,[963,35,963,42,[2,[],"context"]],[963,43,963,56,"extractSource"]]],[964,25,964,40,[5,"Case patterns"]],[965,25,970,26,[9,[[966,27,966,114,[18,[[[966,28,966,30,[11,"c1"]],[966,31,966,33,[11,"c2"]]],[966,37,966,114,[0,[[966,37,966,57,[2,[],"compareByControlFlow"]],[966,58,966,64,[2,[],"config"]],[966,65,966,89,[6,[[966,67,966,75,[19,[966,67,966,69,[2,[],"c1"]],[966,70,966,75,"index"]]],[966,77,966,87,[19,[966,77,966,79,[2,[],"c1"]],[966,80,966,87,"pattern"]]]]]],[966,90,966,114,[6,[[966,92,966,100,[19,[966,92,966,94,[2,[],"c2"]],[966,95,966,100,"index"]]],[966,102,966,112,[19,[966,102,966,104,[2,[],"c2"]],[966,105,966,112,"pattern"]]]]]]]]]]]],[969,27,969,105,[18,[[[969,28,969,30,[11,"c1"]],[969,31,969,33,[11,"c2"]]],[969,37,969,105,[1,"<|",1,[969,37,969,57,[0,[[969,37,969,54,[2,["Maybe"],"withDefault"]],[969,55,969,57,[2,[],"EQ"]]]]],[969,61,969,105,[0,[[969,61,969,76,[2,[],"comparePatterns"]],[969,77,969,83,[2,[],"config"]],[969,84,969,94,[19,[969,84,969,86,[2,[],"c1"]],[969,87,969,94,"pattern"]]],[969,95,969,105,[19,[969,95,969,97,[2,[],"c2"]],[969,98,969,105,"pattern"]]]]]]]]]]]]]],[971,25,971,35,[2,[],"errorRange"]]]]]]]]]]]],[973,20,973,40,[0,[[973,20,973,37,[2,["Maybe"],"withDefault"]],[973,38,973,40,[9,[]]]]]]]]]]]],[[975,9,975,10,[0]],[977,13,977,15,[9,[]]]]]]]]]]]]],[980,1,1104,20,[0,[[1,[980,1,982,3,"{-| Given config, context, and a pattern, convert it into a pattern we know\nhow to sort, if possible.\n-}"]],[1,[983,1,983,90,[[983,1,983,19,"getSortablePattern"],[983,22,983,90,[6,[983,22,983,32,[1,[983,22,983,32,[[],"RuleConfig"]],[]]],[983,36,983,90,[6,[983,36,983,49,[1,[983,36,983,49,[[],"ModuleContext"]],[]]],[983,53,983,90,[6,[983,53,983,65,[1,[983,53,983,57,[[],"Node"]],[[983,58,983,65,[1,[983,58,983,65,[[],"Pattern"]],[]]]]]],[983,69,983,90,[1,[983,69,983,74,[[],"Maybe"]],[[983,75,983,90,[1,[983,75,983,90,[[],"SortablePattern"]],[]]]]]]]]]]]]]]],[984,1,1104,20,[[984,1,984,19,"getSortablePattern"],[[984,20,984,55,[14,[984,21,984,54,[13,[984,21,984,40,[14,[984,22,984,39,[12,[[],"RuleConfig"],[[984,33,984,39,[11,"config"]]]]]]],[984,44,984,54,"ruleConfig"]]]]],[984,56,984,63,[11,"context"]],[984,64,984,68,[11,"node"]]],[985,5,1104,20,[16,[[[986,9,988,50,[0,[[0],[1,[986,9,986,51,[[986,9,986,11,"go"],[986,14,986,51,[6,[986,14,986,26,[1,[986,14,986,18,[[],"Node"]],[[986,19,986,26,[1,[986,19,986,26,[[],"Pattern"]],[]]]]]],[986,30,986,51,[1,[986,30,986,35,[[],"Maybe"]],[[986,36,986,51,[1,[986,36,986,51,[[],"SortablePattern"]],[]]]]]]]]]]],[987,9,988,50,[[987,9,987,11,"go"],[],[988,13,988,50,[0,[[988,13,988,31,[2,[],"getSortablePattern"]],[988,32,988,42,[2,[],"ruleConfig"]],[988,43,988,50,[2,[],"context"]]]]]]]]]],[990,9,992,34,[0,[[0],[1,[990,9,990,25,[[990,9,990,10,"n"],[990,13,990,25,[1,[990,13,990,17,[[],"Node"]],[[990,18,990,25,[1,[990,18,990,25,[[],"Pattern"]],[]]]]]]]]],[991,9,992,34,[[991,9,991,10,"n"],[],[992,13,992,34,[0,[[992,13,992,29,[2,[],"getActualPattern"]],[992,30,992,34,[2,[],"node"]]]]]]]]]],[994,9,1000,24,[0,[[0],[1,[994,9,994,74,[[994,9,994,20,"makeLiteral"],[994,23,994,74,[6,[994,23,994,44,[6,[994,24,994,25,[0,"a"]],[994,29,994,43,[1,[994,29,994,43,[[],"LiteralPattern"]],[]]]]],[994,48,994,74,[6,[994,48,994,49,[0,"a"]],[994,53,994,74,[1,[994,53,994,58,[[],"Maybe"]],[[994,59,994,74,[1,[994,59,994,74,[[],"SortablePattern"]],[]]]]]]]]]]]]],[995,9,1000,24,[[995,9,995,20,"makeLiteral"],[[995,21,995,22,[11,"l"]],[995,23,995,24,[11,"a"]]],[996,13,1000,24,[11,[996,16,996,35,[19,[996,16,996,22,[2,[],"config"]],[996,23,996,35,"sortLiterals"]]],[997,17,997,39,[1,"<|",1,[997,17,997,21,[2,[],"Just"]],[997,25,997,39,[1,"<|",1,[997,25,997,32,[2,[],"Literal"]],[997,36,997,39,[0,[[997,36,997,37,[2,[],"l"]],[997,38,997,39,[2,[],"a"]]]]]]]]],[1000,17,1000,24,[2,[],"Nothing"]]]]]]]]],[1002,9,1025,22,[0,[[0],[1,[1002,9,1002,100,[[1002,9,1002,29,"findConstructorOrder"],[1002,32,1002,100,[6,[1002,32,1002,38,[1,[1002,32,1002,38,[[],"String"]],[]]],[1002,42,1002,100,[6,[1002,42,1002,61,[1,[1002,42,1002,46,[[],"List"]],[[1002,47,1002,61,[1,[1002,48,1002,52,[[],"Node"]],[[1002,53,1002,60,[1,[1002,53,1002,60,[[],"Pattern"]],[]]]]]]]]],[1002,65,1002,100,[6,[1002,65,1002,75,[1,[1002,65,1002,75,[[],"ModuleName"]],[]]],[1002,79,1002,100,[1,[1002,79,1002,84,[[],"Maybe"]],[[1002,85,1002,100,[1,[1002,85,1002,100,[[],"SortablePattern"]],[]]]]]]]]]]]]]]],[1003,9,1025,22,[[1003,9,1003,29,"findConstructorOrder"],[[1003,30,1003,41,[11,"constructor"]],[1003,42,1003,44,[11,"ps"]],[1003,45,1003,55,[11,"moduleName"]]],[1005,13,1025,22,[1,"|>",0,[1005,13,1012,22,[1,"|>",0,[1005,13,1005,52,[0,[[1005,13,1005,21,[2,["Dict"],"get"]],[1005,22,1005,32,[2,[],"moduleName"]],[1005,33,1005,52,[19,[1005,33,1005,40,[2,[],"context"]],[1005,41,1005,52,"customTypes"]]]]]],[1007,20,1012,22,[0,[[1007,20,1007,33,[2,["Maybe"],"andThen"]],[1008,21,1012,22,[7,[1008,22,1011,26,[0,[[1008,22,1008,32,[2,["DictX"],"find"]],[1009,25,1011,26,[7,[1009,26,1010,64,[18,[[[1009,27,1009,28,[0]],[1009,29,1009,45,[8,[[1009,31,1009,43,"constructors"]]]]],[1010,29,1010,64,[0,[[1010,29,1010,39,[2,["Set"],"member"]],[1010,40,1010,51,[2,[],"constructor"]],[1010,52,1010,64,[2,[],"constructors"]]]]]]]]]]]]]]]]]]]],[1014,20,1025,22,[0,[[1014,20,1014,33,[2,["Maybe"],"andThen"]],[1015,21,1025,22,[7,[1015,22,1024,34,[18,[[[1015,23,1015,60,[7,[[1015,25,1015,36,[11,"matchedType"]],[1015,38,1015,58,[8,[[1015,40,1015,56,"declarationOrder"]]]]]]]],[1016,25,1024,34,[1,"|>",0,[1016,25,1016,69,[0,[[1016,25,1016,40,[2,["ListX"],"elemIndex"]],[1016,41,1016,52,[2,[],"constructor"]],[1016,53,1016,69,[2,[],"declarationOrder"]]]]],[1017,32,1024,34,[0,[[1017,32,1017,41,[2,["Maybe"],"map"]],[1018,33,1024,34,[7,[1018,34,1023,42,[18,[[[1018,35,1018,40,[11,"order"]]],[1019,37,1023,42,[0,[[1019,37,1019,48,[2,[],"Constructor"]],[1020,41,1023,42,[8,[[1020,43,1020,56,[[1020,43,1020,48,"order"],[1020,51,1020,56,[2,[],"order"]]]],[1021,43,1022,41,[[1021,43,1021,54,"subpatterns"],[1021,57,1021,71,[0,[[1021,57,1021,65,[2,["List"],"map"]],[1021,66,1021,68,[2,[],"go"]],[1021,69,1021,71,[2,[],"ps"]]]]]]],[1022,43,1023,41,[[1022,43,1022,48,"type_"],[1022,51,1022,78,[6,[[1022,53,1022,63,[2,[],"moduleName"]],[1022,65,1022,76,[2,[],"matchedType"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1027,5,1104,20,[17,[[1027,10,1027,22,[0,[[1027,10,1027,20,[2,["Node"],"value"]],[1027,21,1027,22,[2,[],"n"]]]]],[[[1029,9,1029,41,[12,[["Pattern"],"NamedPattern"],[[1029,30,1029,38,[8,[[1029,32,1029,36,"name"]]]],[1029,39,1029,41,[11,"ps"]]]]],[1030,13,1031,64,[1,"|>",0,[1030,13,1030,48,[0,[[1030,13,1030,26,[2,[],"moduleNameFor"]],[1030,27,1030,46,[19,[1030,27,1030,34,[2,[],"context"]],[1030,35,1030,46,"lookupTable"]]],[1030,47,1030,48,[2,[],"n"]]]]],[1031,20,1031,64,[0,[[1031,20,1031,33,[2,["Maybe"],"andThen"]],[1031,34,1031,64,[7,[1031,35,1031,63,[0,[[1031,35,1031,55,[2,[],"findConstructorOrder"]],[1031,56,1031,60,[2,[],"name"]],[1031,61,1031,63,[2,[],"ps"]]]]]]]]]]]]],[[1034,9,1034,32,[12,[["Pattern"],"TuplePattern"],[[1034,30,1034,32,[11,"ps"]]]]],[1035,13,1042,22,[1,"|>",0,[1035,13,1035,34,[0,[[1035,13,1035,28,[2,["MaybeX"],"traverse"]],[1035,29,1035,31,[2,[],"go"]],[1035,32,1035,34,[2,[],"ps"]]]]],[1036,20,1042,22,[0,[[1036,20,1036,29,[2,["Maybe"],"map"]],[1037,21,1042,22,[7,[1037,22,1041,30,[18,[[[1037,23,1037,34,[11,"subpatterns"]]],[1038,25,1041,30,[0,[[1038,25,1038,42,[2,[],"ListTupleOrUncons"]],[1039,29,1041,30,[8,[[1039,31,1039,56,[[1039,31,1039,42,"subpatterns"],[1039,45,1039,56,[2,[],"subpatterns"]]]],[1040,31,1041,29,[[1040,31,1040,41,"terminates"],[1040,44,1040,48,[2,[],"True"]]]]]]]]]]]]]]]]]]]]],[[1044,9,1044,31,[12,[["Pattern"],"ListPattern"],[[1044,29,1044,31,[11,"ps"]]]]],[1045,13,1052,22,[1,"|>",0,[1045,13,1045,34,[0,[[1045,13,1045,28,[2,["MaybeX"],"traverse"]],[1045,29,1045,31,[2,[],"go"]],[1045,32,1045,34,[2,[],"ps"]]]]],[1046,20,1052,22,[0,[[1046,20,1046,29,[2,["Maybe"],"map"]],[1047,21,1052,22,[7,[1047,22,1051,30,[18,[[[1047,23,1047,34,[11,"subpatterns"]]],[1048,25,1051,30,[0,[[1048,25,1048,42,[2,[],"ListTupleOrUncons"]],[1049,29,1051,30,[8,[[1049,31,1049,56,[[1049,31,1049,42,"subpatterns"],[1049,45,1049,56,[2,[],"subpatterns"]]]],[1050,31,1051,29,[[1050,31,1050,41,"terminates"],[1050,44,1050,48,[2,[],"True"]]]]]]]]]]]]]]]]]]]]],[[1055,9,1055,36,[12,[["Pattern"],"UnConsPattern"],[[1055,31,1055,33,[11,"p1"]],[1055,34,1055,36,[11,"p2"]]]]],[1056,13,1077,31,[16,[[[1057,17,1074,36,[0,[[0],[1,[1057,17,1057,83,[[1057,17,1057,21,"cons"],[1057,24,1057,83,[6,[1057,24,1057,39,[1,[1057,24,1057,39,[[],"SortablePattern"]],[]]],[1057,43,1057,83,[6,[1057,43,1057,58,[1,[1057,43,1057,58,[[],"SortablePattern"]],[]]],[1057,62,1057,83,[1,[1057,62,1057,67,[[],"Maybe"]],[[1057,68,1057,83,[1,[1057,68,1057,83,[[],"SortablePattern"]],[]]]]]]]]]]]]],[1058,17,1074,36,[[1058,17,1058,21,"cons"],[[1058,22,1058,23,[11,"x"]],[1058,24,1058,26,[11,"xs"]]],[1059,21,1074,36,[17,[[1059,26,1059,28,[2,[],"xs"]],[[[1060,25,1060,33,[12,[[],"Wildcard"],[]]],[1061,29,1065,38,[1,"<|",1,[1061,29,1061,33,[2,[],"Just"]],[1062,33,1065,38,[0,[[1062,33,1062,50,[2,[],"ListTupleOrUncons"]],[1063,37,1065,38,[8,[[1063,39,1063,58,[[1063,39,1063,50,"subpatterns"],[1063,53,1063,58,[9,[[1063,55,1063,56,[2,[],"x"]]]]]]],[1064,39,1065,37,[[1064,39,1064,49,"terminates"],[1064,52,1064,57,[2,[],"False"]]]]]]]]]]]]],[[1067,25,1067,44,[12,[[],"ListTupleOrUncons"],[[1067,43,1067,44,[11,"r"]]]]],[1068,29,1070,77,[1,"<|",1,[1068,29,1068,33,[2,[],"Just"]],[1069,33,1070,77,[0,[[1069,33,1069,50,[2,[],"ListTupleOrUncons"]],[1070,37,1070,77,[21,[1070,39,1070,40,"r"],[[1070,43,1070,76,[[1070,43,1070,54,"subpatterns"],[1070,57,1070,75,[1,"::",1,[1070,57,1070,58,[2,[],"x"]],[1070,62,1070,75,[19,[1070,62,1070,63,[2,[],"r"]],[1070,64,1070,75,"subpatterns"]]]]]]]]]]]]]]]],[[1072,25,1072,26,[0]],[1074,29,1074,36,[2,[],"Nothing"]]]]]]]]]]]]],[1076,13,1077,31,[1,"|>",0,[1076,13,1076,44,[0,[[1076,13,1076,23,[2,["Maybe"],"map2"]],[1076,24,1076,28,[2,[],"cons"]],[1076,29,1076,36,[7,[1076,30,1076,35,[0,[[1076,30,1076,32,[2,[],"go"]],[1076,33,1076,35,[2,[],"p1"]]]]]]],[1076,37,1076,44,[7,[1076,38,1076,43,[0,[[1076,38,1076,40,[2,[],"go"]],[1076,41,1076,43,[2,[],"p2"]]]]]]]]]],[1077,20,1077,31,[2,["MaybeX"],"join"]]]]]]]],[[1080,9,1080,27,[12,[["Pattern"],"AllPattern"],[]]],[1081,13,1081,26,[0,[[1081,13,1081,17,[2,[],"Just"]],[1081,18,1081,26,[2,[],"Wildcard"]]]]]],[[1083,9,1083,29,[12,[["Pattern"],"VarPattern"],[[1083,28,1083,29,[0]]]]],[1084,13,1084,26,[0,[[1084,13,1084,17,[2,[],"Just"]],[1084,18,1084,26,[2,[],"Wildcard"]]]]]],[[1087,9,1087,30,[12,[["Pattern"],"CharPattern"],[[1087,29,1087,30,[11,"c"]]]]],[1088,13,1088,38,[0,[[1088,13,1088,24,[2,[],"makeLiteral"]],[1088,25,1088,36,[2,[],"CharLiteral"]],[1088,37,1088,38,[2,[],"c"]]]]]],[[1090,9,1090,32,[12,[["Pattern"],"StringPattern"],[[1090,31,1090,32,[11,"s"]]]]],[1091,13,1091,40,[0,[[1091,13,1091,24,[2,[],"makeLiteral"]],[1091,25,1091,38,[2,[],"StringLiteral"]],[1091,39,1091,40,[2,[],"s"]]]]]],[[1093,9,1093,29,[12,[["Pattern"],"IntPattern"],[[1093,28,1093,29,[11,"i"]]]]],[1094,13,1094,37,[0,[[1094,13,1094,24,[2,[],"makeLiteral"]],[1094,25,1094,35,[2,[],"IntLiteral"]],[1094,36,1094,37,[2,[],"i"]]]]]],[[1096,9,1096,29,[12,[["Pattern"],"HexPattern"],[[1096,28,1096,29,[11,"i"]]]]],[1097,13,1097,37,[0,[[1097,13,1097,24,[2,[],"makeLiteral"]],[1097,25,1097,35,[2,[],"IntLiteral"]],[1097,36,1097,37,[2,[],"i"]]]]]],[[1099,9,1099,31,[12,[["Pattern"],"FloatPattern"],[[1099,30,1099,31,[11,"f"]]]]],[1100,13,1100,39,[0,[[1100,13,1100,24,[2,[],"makeLiteral"]],[1100,25,1100,37,[2,[],"FloatLiteral"]],[1100,38,1100,39,[2,[],"f"]]]]]],[[1102,9,1102,10,[0]],[1104,13,1104,20,[2,[],"Nothing"]]]]]]]]]]]]]]],[1107,1,1122,17,[0,[[1,[1107,1,1109,3,"{-| Unwrap a pattern to get at the actual pattern inside of any parentheses or\n`as` patterns.\n-}"]],[1,[1110,1,1110,48,[[1110,1,1110,17,"getActualPattern"],[1110,20,1110,48,[6,[1110,20,1110,32,[1,[1110,20,1110,24,[[],"Node"]],[[1110,25,1110,32,[1,[1110,25,1110,32,[[],"Pattern"]],[]]]]]],[1110,36,1110,48,[1,[1110,36,1110,40,[[],"Node"]],[[1110,41,1110,48,[1,[1110,41,1110,48,[[],"Pattern"]],[]]]]]]]]]]],[1111,1,1122,17,[[1111,1,1111,17,"getActualPattern"],[[1111,18,1111,22,[11,"node"]]],[1112,5,1122,17,[17,[[1112,10,1112,25,[0,[[1112,10,1112,20,[2,["Node"],"value"]],[1112,21,1112,25,[2,[],"node"]]]]],[[[1114,9,1114,39,[12,[["Pattern"],"ParenthesizedPattern"],[[1114,38,1114,39,[11,"p"]]]]],[1115,13,1115,31,[0,[[1115,13,1115,29,[2,[],"getActualPattern"]],[1115,30,1115,31,[2,[],"p"]]]]]],[[1117,9,1117,30,[12,[["Pattern"],"AsPattern"],[[1117,27,1117,28,[11,"p"]],[1117,29,1117,30,[0]]]]],[1118,13,1118,31,[0,[[1118,13,1118,29,[2,[],"getActualPattern"]],[1118,30,1118,31,[2,[],"p"]]]]]],[[1121,9,1121,10,[0]],[1122,13,1122,17,[2,[],"node"]]]]]]]]]]]],[1125,1,1144,20,[0,[[1,[1125,1,1126,3,"{-| Compare two literal types, determining their order (if not a type error).\n-}"]],[1,[1127,1,1127,65,[[1127,1,1127,15,"compareLiteral"],[1127,18,1127,65,[6,[1127,18,1127,32,[1,[1127,18,1127,32,[[],"LiteralPattern"]],[]]],[1127,36,1127,65,[6,[1127,36,1127,50,[1,[1127,36,1127,50,[[],"LiteralPattern"]],[]]],[1127,54,1127,65,[1,[1127,54,1127,59,[[],"Maybe"]],[[1127,60,1127,65,[1,[1127,60,1127,65,[[],"Order"]],[]]]]]]]]]]]]],[1128,1,1144,20,[[1128,1,1128,15,"compareLiteral"],[[1128,16,1128,18,[11,"l1"]],[1128,19,1128,21,[11,"l2"]]],[1129,5,1144,20,[17,[[1129,10,1129,20,[6,[[1129,12,1129,14,[2,[],"l1"]],[1129,16,1129,18,[2,[],"l2"]]]]],[[[1130,9,1130,43,[7,[[1130,11,1130,25,[12,[[],"CharLiteral"],[[1130,23,1130,25,[11,"c1"]]]]],[1130,27,1130,41,[12,[[],"CharLiteral"],[[1130,39,1130,41,[11,"c2"]]]]]]]],[1131,13,1131,34,[1,"<|",1,[1131,13,1131,17,[2,[],"Just"]],[1131,21,1131,34,[0,[[1131,21,1131,28,[2,[],"compare"]],[1131,29,1131,31,[2,[],"c1"]],[1131,32,1131,34,[2,[],"c2"]]]]]]]],[[1133,9,1133,47,[7,[[1133,11,1133,27,[12,[[],"StringLiteral"],[[1133,25,1133,27,[11,"s1"]]]]],[1133,29,1133,45,[12,[[],"StringLiteral"],[[1133,43,1133,45,[11,"s2"]]]]]]]],[1134,13,1134,34,[1,"<|",1,[1134,13,1134,17,[2,[],"Just"]],[1134,21,1134,34,[0,[[1134,21,1134,28,[2,[],"compare"]],[1134,29,1134,31,[2,[],"s1"]],[1134,32,1134,34,[2,[],"s2"]]]]]]]],[[1136,9,1136,41,[7,[[1136,11,1136,24,[12,[[],"IntLiteral"],[[1136,22,1136,24,[11,"i1"]]]]],[1136,26,1136,39,[12,[[],"IntLiteral"],[[1136,37,1136,39,[11,"i2"]]]]]]]],[1137,13,1137,34,[1,"<|",1,[1137,13,1137,17,[2,[],"Just"]],[1137,21,1137,34,[0,[[1137,21,1137,28,[2,[],"compare"]],[1137,29,1137,31,[2,[],"i1"]],[1137,32,1137,34,[2,[],"i2"]]]]]]]],[[1139,9,1139,45,[7,[[1139,11,1139,26,[12,[[],"FloatLiteral"],[[1139,24,1139,26,[11,"f1"]]]]],[1139,28,1139,43,[12,[[],"FloatLiteral"],[[1139,41,1139,43,[11,"f2"]]]]]]]],[1140,13,1140,34,[1,"<|",1,[1140,13,1140,17,[2,[],"Just"]],[1140,21,1140,34,[0,[[1140,21,1140,28,[2,[],"compare"]],[1140,29,1140,31,[2,[],"f1"]],[1140,32,1140,34,[2,[],"f2"]]]]]]]],[[1142,9,1142,10,[0]],[1144,13,1144,20,[2,[],"Nothing"]]]]]]]]]]]],[1147,1,1211,15,[0,[[1,[1147,1,1150,3,"{-| Sort two patterns by the preservation of control flow, e.g. assuring that\nwildcards are not moved before non-wildcards. If this function returns `EQ`,\nthen the two patterns may have their order switched safely.\n-}"]],[1,[1151,1,1151,99,[[1151,1,1151,21,"compareByControlFlow"],[1151,24,1151,99,[6,[1151,24,1151,34,[1,[1151,24,1151,34,[[],"RuleConfig"]],[]]],[1151,38,1151,99,[6,[1151,38,1151,62,[3,[[1151,40,1151,43,[1,[1151,40,1151,43,[[],"Int"]],[]]],[1151,45,1151,60,[1,[1151,45,1151,60,[[],"SortablePattern"]],[]]]]]],[1151,66,1151,99,[6,[1151,66,1151,90,[3,[[1151,68,1151,71,[1,[1151,68,1151,71,[[],"Int"]],[]]],[1151,73,1151,88,[1,[1151,73,1151,88,[[],"SortablePattern"]],[]]]]]],[1151,94,1151,99,[1,[1151,94,1151,99,[[],"Order"]],[]]]]]]]]]]]],[1152,1,1211,15,[[1152,1,1152,21,"compareByControlFlow"],[[1152,22,1152,28,[11,"config"]],[1152,29,1152,41,[7,[[1152,31,1152,33,[11,"i1"]],[1152,35,1152,39,[11,"pat1"]]]]],[1152,42,1152,54,[7,[[1152,44,1152,46,[11,"i2"]],[1152,48,1152,52,[11,"pat2"]]]]]],[1153,5,1211,15,[16,[[[1154,9,1156,62,[0,[[0],[1,[1154,9,1154,57,[[1154,9,1154,11,"go"],[1154,14,1154,57,[6,[1154,14,1154,29,[1,[1154,14,1154,29,[[],"SortablePattern"]],[]]],[1154,33,1154,57,[6,[1154,33,1154,48,[1,[1154,33,1154,48,[[],"SortablePattern"]],[]]],[1154,52,1154,57,[1,[1154,52,1154,57,[[],"Order"]],[]]]]]]]]]],[1155,9,1156,62,[[1155,9,1155,11,"go"],[[1155,12,1155,14,[11,"p1"]],[1155,15,1155,17,[11,"p2"]]],[1156,13,1156,62,[0,[[1156,13,1156,33,[2,[],"compareByControlFlow"]],[1156,34,1156,40,[2,[],"config"]],[1156,41,1156,51,[6,[[1156,43,1156,45,[2,[],"i1"]],[1156,47,1156,49,[2,[],"p1"]]]]],[1156,52,1156,62,[6,[[1156,54,1156,56,[2,[],"i2"]],[1156,58,1156,60,[2,[],"p2"]]]]]]]]]]]]]],[1158,5,1211,15,[17,[[1158,10,1158,24,[6,[[1158,12,1158,16,[2,[],"pat1"]],[1158,18,1158,22,[2,[],"pat2"]]]]],[[[1160,9,1160,31,[7,[[1160,11,1160,19,[12,[[],"Wildcard"],[]]],[1160,21,1160,29,[12,[[],"Wildcard"],[]]]]]],[1161,13,1161,15,[2,[],"EQ"]]],[[1164,9,1164,24,[7,[[1164,11,1164,19,[12,[[],"Wildcard"],[]]],[1164,21,1164,22,[0]]]]],[1165,13,1165,26,[0,[[1165,13,1165,20,[2,[],"compare"]],[1165,21,1165,23,[2,[],"i1"]],[1165,24,1165,26,[2,[],"i2"]]]]]],[[1167,9,1167,24,[7,[[1167,11,1167,12,[0]],[1167,14,1167,22,[12,[[],"Wildcard"],[]]]]]],[1168,13,1168,26,[0,[[1168,13,1168,20,[2,[],"compare"]],[1168,21,1168,23,[2,[],"i1"]],[1168,24,1168,26,[2,[],"i2"]]]]]],[[1170,9,1170,43,[7,[[1170,11,1170,25,[12,[[],"Constructor"],[[1170,23,1170,25,[11,"c1"]]]]],[1170,27,1170,41,[12,[[],"Constructor"],[[1170,39,1170,41,[11,"c2"]]]]]]]],[1171,13,1197,19,[16,[[[1172,17,1189,31,[0,[[0],[1,[1172,17,1172,101,[[1172,17,1172,23,"goSubs"],[1172,26,1172,101,[6,[1172,26,1172,54,[1,[1172,26,1172,30,[[],"List"]],[[1172,31,1172,54,[1,[1172,32,1172,37,[[],"Maybe"]],[[1172,38,1172,53,[1,[1172,38,1172,53,[[],"SortablePattern"]],[]]]]]]]]],[1172,58,1172,101,[6,[1172,58,1172,86,[1,[1172,58,1172,62,[[],"List"]],[[1172,63,1172,86,[1,[1172,64,1172,69,[[],"Maybe"]],[[1172,70,1172,85,[1,[1172,70,1172,85,[[],"SortablePattern"]],[]]]]]]]]],[1172,90,1172,101,[6,[1172,90,1172,92,[2]],[1172,96,1172,101,[1,[1172,96,1172,101,[[],"Order"]],[]]]]]]]]]]]],[1173,17,1189,31,[[1173,17,1173,23,"goSubs"],[[1173,24,1173,29,[11,"pat1s"]],[1173,30,1173,35,[11,"pat2s"]],[1173,36,1173,38,[1]]],[1174,21,1189,31,[17,[[1174,26,1174,42,[6,[[1174,28,1174,33,[2,[],"pat1s"]],[1174,35,1174,40,[2,[],"pat2s"]]]]],[[[1176,25,1176,63,[7,[[1176,27,1176,47,[9,[1176,27,1176,42,[14,[1176,28,1176,41,[12,[[],"Just"],[[1176,33,1176,41,[12,[[],"Wildcard"],[]]]]]]]],[1176,46,1176,47,[0]]]],[1176,49,1176,61,[9,[1176,49,1176,56,[12,[[],"Nothing"],[]]],[1176,60,1176,61,[0]]]]]]],[1177,29,1177,42,[0,[[1177,29,1177,36,[2,[],"compare"]],[1177,37,1177,39,[2,[],"i1"]],[1177,40,1177,42,[2,[],"i2"]]]]]],[[1179,25,1179,63,[7,[[1179,27,1179,39,[9,[1179,27,1179,34,[12,[[],"Nothing"],[]]],[1179,38,1179,39,[0]]]],[1179,41,1179,61,[9,[1179,41,1179,56,[14,[1179,42,1179,55,[12,[[],"Just"],[[1179,47,1179,55,[12,[[],"Wildcard"],[]]]]]]]],[1179,60,1179,61,[0]]]]]]],[1180,29,1180,42,[0,[[1180,29,1180,36,[2,[],"compare"]],[1180,37,1180,39,[2,[],"i1"]],[1180,40,1180,42,[2,[],"i2"]]]]]],[[1182,25,1182,49,[7,[[1182,27,1182,36,[9,[1182,27,1182,29,[11,"p1"]],[1182,33,1182,36,[11,"p1s"]]]],[1182,38,1182,47,[9,[1182,38,1182,40,[11,"p2"]],[1182,44,1182,47,[11,"p2s"]]]]]]],[1184,29,1185,100,[1,"|>",0,[1184,29,1184,43,[0,[[1184,29,1184,35,[2,[],"goSubs"]],[1184,36,1184,39,[2,[],"p1s"]],[1184,40,1184,43,[2,[],"p2s"]]]]],[1185,36,1185,100,[0,[[1185,36,1185,54,[2,[],"fallbackCompareFor"]],[1185,55,1185,100,[7,[1185,56,1185,99,[1,"<|",1,[1185,56,1185,76,[0,[[1185,56,1185,73,[2,["Maybe"],"withDefault"]],[1185,74,1185,76,[2,[],"EQ"]]]]],[1185,80,1185,99,[0,[[1185,80,1185,90,[2,["Maybe"],"map2"]],[1185,91,1185,93,[2,[],"go"]],[1185,94,1185,96,[2,[],"p1"]],[1185,97,1185,99,[2,[],"p2"]]]]]]]]]]]]]]],[[1187,25,1187,26,[0]],[1189,29,1189,31,[2,[],"EQ"]]]]]]]]]]]]],[1191,13,1197,19,[11,[1191,16,1191,36,[1,"==",2,[1191,16,1191,24,[19,[1191,16,1191,18,[2,[],"c1"]],[1191,19,1191,24,"order"]]],[1191,28,1191,36,[19,[1191,28,1191,30,[2,[],"c2"]],[1191,31,1191,36,"order"]]]]],[1193,17,1193,56,[0,[[1193,17,1193,23,[2,[],"goSubs"]],[1193,24,1193,38,[19,[1193,24,1193,26,[2,[],"c1"]],[1193,27,1193,38,"subpatterns"]]],[1193,39,1193,53,[19,[1193,39,1193,41,[2,[],"c2"]],[1193,42,1193,53,"subpatterns"]]],[1193,54,1193,56,[10]]]]],[1197,17,1197,19,[2,[],"EQ"]]]]]]]],[[1200,9,1200,55,[7,[[1200,11,1200,31,[12,[[],"ListTupleOrUncons"],[[1200,29,1200,31,[11,"r1"]]]]],[1200,33,1200,53,[12,[[],"ListTupleOrUncons"],[[1200,51,1200,53,[11,"r2"]]]]]]]],[1201,13,1207,30,[11,[1201,16,1201,55,[0,[[1201,16,1201,42,[2,[],"safelySortableListPatterns"]],[1201,43,1201,49,[2,[],"config"]],[1201,50,1201,52,[2,[],"r1"]],[1201,53,1201,55,[2,[],"r2"]]]]],[1203,17,1203,19,[2,[],"EQ"]],[1207,17,1207,30,[0,[[1207,17,1207,24,[2,[],"compare"]],[1207,25,1207,27,[2,[],"i1"]],[1207,28,1207,30,[2,[],"i2"]]]]]]]],[[1210,9,1210,10,[0]],[1211,13,1211,15,[2,[],"EQ"]]]]]]]]]]]]]]],[1214,1,1247,26,[0,[[1,[1214,1,1216,3,"{-| Check if list/tuple/uncons patterns can safely be sorted by making certain\nneither would override the other's control flow.\n-}"]],[1,[1217,1,1217,170,[[1217,1,1217,27,"safelySortableListPatterns"],[1217,30,1217,170,[6,[1217,30,1217,40,[1,[1217,30,1217,40,[[],"RuleConfig"]],[]]],[1217,44,1217,170,[6,[1217,44,1217,101,[4,[[1217,46,1217,80,[[1217,46,1217,57,"subpatterns"],[1217,60,1217,80,[1,[1217,60,1217,64,[[],"List"]],[[1217,65,1217,80,[1,[1217,65,1217,80,[[],"SortablePattern"]],[]]]]]]]],[1217,82,1217,100,[[1217,82,1217,92,"terminates"],[1217,95,1217,99,[1,[1217,95,1217,99,[[],"Bool"]],[]]]]]]]],[1217,105,1217,170,[6,[1217,105,1217,162,[4,[[1217,107,1217,141,[[1217,107,1217,118,"subpatterns"],[1217,121,1217,141,[1,[1217,121,1217,125,[[],"List"]],[[1217,126,1217,141,[1,[1217,126,1217,141,[[],"SortablePattern"]],[]]]]]]]],[1217,143,1217,161,[[1217,143,1217,153,"terminates"],[1217,156,1217,160,[1,[1217,156,1217,160,[[],"Bool"]],[]]]]]]]],[1217,166,1217,170,[1,[1217,166,1217,170,[[],"Bool"]],[]]]]]]]]]]]],[1218,1,1247,26,[[1218,1,1218,27,"safelySortableListPatterns"],[[1218,28,1218,34,[11,"config"]],[1218,35,1218,37,[11,"r1"]],[1218,38,1218,40,[11,"r2"]]],[1219,5,1247,26,[17,[[1219,10,1219,44,[6,[[1219,12,1219,26,[19,[1219,12,1219,14,[2,[],"r1"]],[1219,15,1219,26,"subpatterns"]]],[1219,28,1219,42,[19,[1219,28,1219,30,[2,[],"r2"]],[1219,31,1219,42,"subpatterns"]]]]]],[[[1220,9,1220,29,[7,[[1220,11,1220,18,[9,[1220,11,1220,12,[11,"x"]],[1220,16,1220,18,[11,"xs"]]]],[1220,20,1220,27,[9,[1220,20,1220,21,[11,"y"]],[1220,25,1220,27,[11,"ys"]]]]]]],[1222,13,1235,26,[17,[[1222,18,1222,44,[0,[[1222,18,1222,33,[2,[],"comparePatterns"]],[1222,34,1222,40,[2,[],"config"]],[1222,41,1222,42,[2,[],"x"]],[1222,43,1222,44,[2,[],"y"]]]]],[[[1223,17,1223,24,[12,[[],"Just"],[[1223,22,1223,24,[12,[[],"EQ"],[]]]]]],[1225,21,1227,50,[0,[[1225,21,1225,47,[2,[],"safelySortableListPatterns"]],[1225,48,1225,54,[2,[],"config"]],[1226,25,1226,50,[21,[1226,27,1226,29,"r1"],[[1226,32,1226,49,[[1226,32,1226,43,"subpatterns"],[1226,46,1226,48,[2,[],"xs"]]]]]]],[1227,25,1227,50,[21,[1227,27,1227,29,"r2"],[[1227,32,1227,49,[[1227,32,1227,43,"subpatterns"],[1227,46,1227,48,[2,[],"ys"]]]]]]]]]]],[[1229,17,1229,23,[12,[[],"Just"],[[1229,22,1229,23,[0]]]]],[1231,21,1231,25,[2,[],"True"]]],[[1233,17,1233,24,[12,[[],"Nothing"],[]]],[1235,21,1235,26,[2,[],"False"]]]]]]]],[[1237,9,1237,19,[7,[[1237,11,1237,13,[10,[]]],[1237,15,1237,17,[10,[]]]]]],[1239,13,1239,17,[2,[],"True"]]],[[1241,9,1241,18,[7,[[1241,11,1241,13,[10,[]]],[1241,15,1241,16,[0]]]]],[1243,13,1243,26,[19,[1243,13,1243,15,[2,[],"r1"]],[1243,16,1243,26,"terminates"]]]],[[1245,9,1245,18,[7,[[1245,11,1245,12,[0]],[1245,14,1245,16,[10,[]]]]]],[1247,13,1247,26,[19,[1247,13,1247,15,[2,[],"r2"]],[1247,16,1247,26,"terminates"]]]]]]]]]]]]],[1250,1,1337,20,[0,[[1,[1250,1,1251,3,"{-| Compare two sortable patterns, determining their order (if not a type error).\n-}"]],[1,[1252,1,1252,82,[[1252,1,1252,16,"comparePatterns"],[1252,19,1252,82,[6,[1252,19,1252,29,[1,[1252,19,1252,29,[[],"RuleConfig"]],[]]],[1252,33,1252,82,[6,[1252,33,1252,48,[1,[1252,33,1252,48,[[],"SortablePattern"]],[]]],[1252,52,1252,82,[6,[1252,52,1252,67,[1,[1252,52,1252,67,[[],"SortablePattern"]],[]]],[1252,71,1252,82,[1,[1252,71,1252,76,[[],"Maybe"]],[[1252,77,1252,82,[1,[1252,77,1252,82,[[],"Order"]],[]]]]]]]]]]]]]]],[1253,1,1337,20,[[1253,1,1253,16,"comparePatterns"],[[1253,17,1253,68,[14,[1253,18,1253,67,[13,[1253,18,1253,53,[14,[1253,19,1253,52,[12,[[],"RuleConfig"],[[1253,30,1253,52,[8,[[1253,32,1253,50,"lookPastUnsortable"]]]]]]]]],[1253,57,1253,67,"ruleConfig"]]]]],[1253,69,1253,73,[11,"pat1"]],[1253,74,1253,78,[11,"pat2"]]],[1254,5,1337,20,[16,[[[1255,9,1257,45,[0,[[0],[1,[1255,9,1255,63,[[1255,9,1255,11,"go"],[1255,14,1255,63,[6,[1255,14,1255,29,[1,[1255,14,1255,29,[[],"SortablePattern"]],[]]],[1255,33,1255,63,[6,[1255,33,1255,48,[1,[1255,33,1255,48,[[],"SortablePattern"]],[]]],[1255,52,1255,63,[1,[1255,52,1255,57,[[],"Maybe"]],[[1255,58,1255,63,[1,[1255,58,1255,63,[[],"Order"]],[]]]]]]]]]]]]],[1256,9,1257,45,[[1256,9,1256,11,"go"],[[1256,12,1256,14,[11,"p1"]],[1256,15,1256,17,[11,"p2"]]],[1257,13,1257,45,[0,[[1257,13,1257,28,[2,[],"comparePatterns"]],[1257,29,1257,39,[2,[],"ruleConfig"]],[1257,40,1257,42,[2,[],"p1"]],[1257,43,1257,45,[2,[],"p2"]]]]]]]]]]],[1259,5,1337,20,[17,[[1259,10,1259,24,[6,[[1259,12,1259,16,[2,[],"pat1"]],[1259,18,1259,22,[2,[],"pat2"]]]]],[[[1261,9,1261,31,[7,[[1261,11,1261,19,[12,[[],"Wildcard"],[]]],[1261,21,1261,29,[12,[[],"Wildcard"],[]]]]]],[1262,13,1262,20,[0,[[1262,13,1262,17,[2,[],"Just"]],[1262,18,1262,20,[2,[],"EQ"]]]]]],[[1265,9,1265,24,[7,[[1265,11,1265,19,[12,[[],"Wildcard"],[]]],[1265,21,1265,22,[0]]]]],[1266,13,1266,20,[2,[],"Nothing"]]],[[1268,9,1268,24,[7,[[1268,11,1268,12,[0]],[1268,14,1268,22,[12,[[],"Wildcard"],[]]]]]],[1269,13,1269,20,[2,[],"Nothing"]]],[[1272,9,1272,35,[7,[[1272,11,1272,21,[12,[[],"Literal"],[[1272,19,1272,21,[11,"l1"]]]]],[1272,23,1272,33,[12,[[],"Literal"],[[1272,31,1272,33,[11,"l2"]]]]]]]],[1273,13,1273,33,[0,[[1273,13,1273,27,[2,[],"compareLiteral"]],[1273,28,1273,30,[2,[],"l1"]],[1273,31,1273,33,[2,[],"l2"]]]]]],[[1276,9,1276,43,[7,[[1276,11,1276,25,[12,[[],"Constructor"],[[1276,23,1276,25,[11,"c1"]]]]],[1276,27,1276,41,[12,[[],"Constructor"],[[1276,39,1276,41,[11,"c2"]]]]]]]],[1277,13,1299,88,[16,[[[1278,17,1295,36,[0,[[0],[1,[1278,17,1278,107,[[1278,17,1278,23,"goSubs"],[1278,26,1278,107,[6,[1278,26,1278,54,[1,[1278,26,1278,30,[[],"List"]],[[1278,31,1278,54,[1,[1278,32,1278,37,[[],"Maybe"]],[[1278,38,1278,53,[1,[1278,38,1278,53,[[],"SortablePattern"]],[]]]]]]]]],[1278,58,1278,107,[6,[1278,58,1278,86,[1,[1278,58,1278,62,[[],"List"]],[[1278,63,1278,86,[1,[1278,64,1278,69,[[],"Maybe"]],[[1278,70,1278,85,[1,[1278,70,1278,85,[[],"SortablePattern"]],[]]]]]]]]],[1278,90,1278,107,[6,[1278,90,1278,92,[2]],[1278,96,1278,107,[1,[1278,96,1278,101,[[],"Maybe"]],[[1278,102,1278,107,[1,[1278,102,1278,107,[[],"Order"]],[]]]]]]]]]]]]]]],[1279,17,1295,36,[[1279,17,1279,23,"goSubs"],[[1279,24,1279,29,[11,"pat1s"]],[1279,30,1279,35,[11,"pat2s"]],[1279,36,1279,38,[1]]],[1280,21,1295,36,[17,[[1280,26,1280,62,[6,[[1280,28,1280,33,[2,[],"pat1s"]],[1280,35,1280,40,[2,[],"pat2s"]],[1280,42,1280,60,[2,[],"lookPastUnsortable"]]]]],[[[1281,25,1281,66,[7,[[1281,27,1281,43,[9,[1281,27,1281,36,[14,[1281,28,1281,35,[12,[[],"Just"],[[1281,33,1281,35,[11,"p1"]]]]]]],[1281,40,1281,43,[11,"p1s"]]]],[1281,45,1281,61,[9,[1281,45,1281,54,[14,[1281,46,1281,53,[12,[[],"Just"],[[1281,51,1281,53,[11,"p2"]]]]]]],[1281,58,1281,61,[11,"p2s"]]]],[1281,63,1281,64,[0]]]]],[1282,29,1283,79,[1,"|>",0,[1282,29,1282,43,[0,[[1282,29,1282,35,[2,[],"goSubs"]],[1282,36,1282,39,[2,[],"p1s"]],[1282,40,1282,43,[2,[],"p2s"]]]]],[1283,36,1283,79,[0,[[1283,36,1283,68,[2,[],"fallbackCompareWithUnsortableFor"]],[1283,69,1283,79,[7,[1283,70,1283,78,[0,[[1283,70,1283,72,[2,[],"go"]],[1283,73,1283,75,[2,[],"p1"]],[1283,76,1283,78,[2,[],"p2"]]]]]]]]]]]]],[[1285,25,1285,65,[7,[[1285,27,1285,41,[9,[1285,27,1285,34,[12,[[],"Nothing"],[]]],[1285,38,1285,41,[11,"p1s"]]]],[1285,43,1285,57,[9,[1285,43,1285,50,[12,[[],"Nothing"],[]]],[1285,54,1285,57,[11,"p2s"]]]],[1285,59,1285,63,[12,[[],"True"],[]]]]]],[1287,29,1287,46,[0,[[1287,29,1287,35,[2,[],"goSubs"]],[1287,36,1287,39,[2,[],"p1s"]],[1287,40,1287,43,[2,[],"p2s"]],[1287,44,1287,46,[10]]]]]],[[1289,25,1289,38,[7,[[1289,27,1289,29,[10,[]]],[1289,31,1289,33,[10,[]]],[1289,35,1289,36,[0]]]]],[1291,29,1291,36,[0,[[1291,29,1291,33,[2,[],"Just"]],[1291,34,1291,36,[2,[],"EQ"]]]]]],[[1293,25,1293,26,[0]],[1295,29,1295,36,[2,[],"Nothing"]]]]]]]]]]]]],[1298,13,1299,88,[1,"|>",0,[1298,13,1298,49,[0,[[1298,13,1298,19,[2,[],"goSubs"]],[1298,20,1298,34,[19,[1298,20,1298,22,[2,[],"c1"]],[1298,23,1298,34,"subpatterns"]]],[1298,35,1298,49,[19,[1298,35,1298,37,[2,[],"c2"]],[1298,38,1298,49,"subpatterns"]]]]]],[1299,20,1299,88,[0,[[1299,20,1299,52,[2,[],"fallbackCompareWithUnsortableFor"]],[1299,53,1299,88,[7,[1299,54,1299,87,[1,"<|",1,[1299,54,1299,58,[2,[],"Just"]],[1299,62,1299,87,[0,[[1299,62,1299,69,[2,[],"compare"]],[1299,70,1299,78,[19,[1299,70,1299,72,[2,[],"c1"]],[1299,73,1299,78,"order"]]],[1299,79,1299,87,[19,[1299,79,1299,81,[2,[],"c2"]],[1299,82,1299,87,"order"]]]]]]]]]]]]]]]]]]],[[1302,9,1302,55,[7,[[1302,11,1302,31,[12,[[],"ListTupleOrUncons"],[[1302,29,1302,31,[11,"r1"]]]]],[1302,33,1302,53,[12,[[],"ListTupleOrUncons"],[[1302,51,1302,53,[11,"r2"]]]]]]]],[1303,13,1333,91,[17,[[1304,17,1306,18,[6,[[1304,19,1304,52,[6,[[1304,21,1304,35,[19,[1304,21,1304,23,[2,[],"r1"]],[1304,24,1304,35,"subpatterns"]]],[1304,37,1304,50,[19,[1304,37,1304,39,[2,[],"r1"]],[1304,40,1304,50,"terminates"]]]]]],[1305,19,1305,52,[6,[[1305,21,1305,35,[19,[1305,21,1305,23,[2,[],"r2"]],[1305,24,1305,35,"subpatterns"]]],[1305,37,1305,50,[19,[1305,37,1305,39,[2,[],"r2"]],[1305,40,1305,50,"terminates"]]]]]]]]],[[[1309,17,1309,48,[7,[[1309,19,1309,32,[7,[[1309,21,1309,23,[10,[]]],[1309,25,1309,30,[12,[[],"False"],[]]]]]],[1309,34,1309,46,[7,[[1309,36,1309,38,[10,[]]],[1309,40,1309,44,[12,[[],"True"],[]]]]]]]]],[1310,21,1310,28,[0,[[1310,21,1310,25,[2,[],"Just"]],[1310,26,1310,28,[2,[],"GT"]]]]]],[[1312,17,1312,48,[7,[[1312,19,1312,31,[7,[[1312,21,1312,23,[10,[]]],[1312,25,1312,29,[12,[[],"True"],[]]]]]],[1312,33,1312,46,[7,[[1312,35,1312,37,[10,[]]],[1312,39,1312,44,[12,[[],"False"],[]]]]]]]]],[1313,21,1313,28,[0,[[1313,21,1313,25,[2,[],"Just"]],[1313,26,1313,28,[2,[],"LT"]]]]]],[[1315,17,1315,41,[7,[[1315,19,1315,28,[7,[[1315,21,1315,23,[10,[]]],[1315,25,1315,26,[0]]]]],[1315,30,1315,39,[7,[[1315,32,1315,34,[10,[]]],[1315,36,1315,37,[0]]]]]]]],[1316,21,1316,28,[0,[[1316,21,1316,25,[2,[],"Just"]],[1316,26,1316,28,[2,[],"EQ"]]]]]],[[1319,17,1319,48,[7,[[1319,19,1319,32,[7,[[1319,21,1319,27,[9,[1319,21,1319,22,[0]],[1319,26,1319,27,[0]]]],[1319,29,1319,30,[0]]]]],[1319,34,1319,46,[7,[[1319,36,1319,38,[10,[]]],[1319,40,1319,44,[12,[[],"True"],[]]]]]]]]],[1320,21,1320,28,[0,[[1320,21,1320,25,[2,[],"Just"]],[1320,26,1320,28,[2,[],"GT"]]]]]],[[1322,17,1322,49,[7,[[1322,19,1322,32,[7,[[1322,21,1322,27,[9,[1322,21,1322,22,[0]],[1322,26,1322,27,[0]]]],[1322,29,1322,30,[0]]]]],[1322,34,1322,47,[7,[[1322,36,1322,38,[10,[]]],[1322,40,1322,45,[12,[[],"False"],[]]]]]]]]],[1323,21,1323,28,[0,[[1323,21,1323,25,[2,[],"Just"]],[1323,26,1323,28,[2,[],"LT"]]]]]],[[1325,17,1325,48,[7,[[1325,19,1325,31,[7,[[1325,21,1325,23,[10,[]]],[1325,25,1325,29,[12,[[],"True"],[]]]]]],[1325,33,1325,46,[7,[[1325,35,1325,41,[9,[1325,35,1325,36,[0]],[1325,40,1325,41,[0]]]],[1325,43,1325,44,[0]]]]]]]],[1326,21,1326,28,[0,[[1326,21,1326,25,[2,[],"Just"]],[1326,26,1326,28,[2,[],"LT"]]]]]],[[1328,17,1328,49,[7,[[1328,19,1328,32,[7,[[1328,21,1328,23,[10,[]]],[1328,25,1328,30,[12,[[],"False"],[]]]]]],[1328,34,1328,47,[7,[[1328,36,1328,42,[9,[1328,36,1328,37,[0]],[1328,41,1328,42,[0]]]],[1328,44,1328,45,[0]]]]]]]],[1329,21,1329,28,[0,[[1329,21,1329,25,[2,[],"Just"]],[1329,26,1329,28,[2,[],"GT"]]]]]],[[1332,17,1332,55,[7,[[1332,19,1332,35,[7,[[1332,21,1332,30,[9,[1332,21,1332,23,[11,"p1"]],[1332,27,1332,30,[11,"p1s"]]]],[1332,32,1332,33,[0]]]]],[1332,37,1332,53,[7,[[1332,39,1332,48,[9,[1332,39,1332,41,[11,"p2"]],[1332,45,1332,48,[11,"p2s"]]]],[1332,50,1332,51,[0]]]]]]]],[1333,21,1333,91,[0,[[1333,21,1333,48,[2,[],"compareNonemptyListPatterns"]],[1333,49,1333,59,[2,[],"ruleConfig"]],[1333,60,1333,75,[6,[[1333,62,1333,64,[2,[],"r1"]],[1333,66,1333,68,[2,[],"p1"]],[1333,70,1333,73,[2,[],"p1s"]]]]],[1333,76,1333,91,[6,[[1333,78,1333,80,[2,[],"r2"]],[1333,82,1333,84,[2,[],"p2"]],[1333,86,1333,89,[2,[],"p2s"]]]]]]]]]]]]]],[[1336,9,1336,10,[0]],[1337,13,1337,20,[2,[],"Nothing"]]]]]]]]]]]]]]],[1340,1,1362,21,[0,[[1,[1340,1,1342,3,"{-| Compare nonempty list/tuple/uncons pattern sorting by checking by length (if\nconfigured to) and element-wise.\n-}"]],[1,[1343,1,1343,264,[[1343,1,1343,28,"compareNonemptyListPatterns"],[1343,31,1343,264,[6,[1343,31,1343,41,[1,[1343,31,1343,41,[[],"RuleConfig"]],[]]],[1343,45,1343,264,[6,[1343,45,1343,145,[3,[[1343,47,1343,104,[4,[[1343,49,1343,83,[[1343,49,1343,60,"subpatterns"],[1343,63,1343,83,[1,[1343,63,1343,67,[[],"List"]],[[1343,68,1343,83,[1,[1343,68,1343,83,[[],"SortablePattern"]],[]]]]]]]],[1343,85,1343,103,[[1343,85,1343,95,"terminates"],[1343,98,1343,102,[1,[1343,98,1343,102,[[],"Bool"]],[]]]]]]]],[1343,106,1343,121,[1,[1343,106,1343,121,[[],"SortablePattern"]],[]]],[1343,123,1343,143,[1,[1343,123,1343,127,[[],"List"]],[[1343,128,1343,143,[1,[1343,128,1343,143,[[],"SortablePattern"]],[]]]]]]]]],[1343,149,1343,264,[6,[1343,149,1343,249,[3,[[1343,151,1343,208,[4,[[1343,153,1343,187,[[1343,153,1343,164,"subpatterns"],[1343,167,1343,187,[1,[1343,167,1343,171,[[],"List"]],[[1343,172,1343,187,[1,[1343,172,1343,187,[[],"SortablePattern"]],[]]]]]]]],[1343,189,1343,207,[[1343,189,1343,199,"terminates"],[1343,202,1343,206,[1,[1343,202,1343,206,[[],"Bool"]],[]]]]]]]],[1343,210,1343,225,[1,[1343,210,1343,225,[[],"SortablePattern"]],[]]],[1343,227,1343,247,[1,[1343,227,1343,231,[[],"List"]],[[1343,232,1343,247,[1,[1343,232,1343,247,[[],"SortablePattern"]],[]]]]]]]]],[1343,253,1343,264,[1,[1343,253,1343,258,[[],"Maybe"]],[[1343,259,1343,264,[1,[1343,259,1343,264,[[],"Order"]],[]]]]]]]]]]]]]]],[1344,1,1362,21,[[1344,1,1344,28,"compareNonemptyListPatterns"],[[1344,29,1344,67,[14,[1344,30,1344,66,[13,[1344,30,1344,56,[14,[1344,31,1344,55,[12,[[],"RuleConfig"],[[1344,42,1344,55,[8,[[1344,44,1344,53,"sortLists"]]]]]]]]],[1344,60,1344,66,"config"]]]]],[1344,68,1344,83,[7,[[1344,70,1344,72,[11,"r1"]],[1344,74,1344,76,[11,"p1"]],[1344,78,1344,81,[11,"p1s"]]]]],[1344,84,1344,99,[7,[[1344,86,1344,88,[11,"r2"]],[1344,90,1344,92,[11,"p2"]],[1344,94,1344,97,[11,"p2s"]]]]]],[1345,5,1362,21,[16,[[[1346,9,1355,36,[0,[[0],[1,[1346,9,1346,38,[[1346,9,1346,18,"checkSubs"],[1346,21,1346,38,[6,[1346,21,1346,23,[2]],[1346,27,1346,38,[1,[1346,27,1346,32,[[],"Maybe"]],[[1346,33,1346,38,[1,[1346,33,1346,38,[[],"Order"]],[]]]]]]]]]]],[1347,9,1355,36,[[1347,9,1347,18,"checkSubs"],[[1347,19,1347,21,[1]]],[1348,13,1355,36,[17,[[1348,18,1348,46,[0,[[1348,18,1348,33,[2,[],"comparePatterns"]],[1348,34,1348,40,[2,[],"config"]],[1348,41,1348,43,[2,[],"p1"]],[1348,44,1348,46,[2,[],"p2"]]]]],[[[1349,17,1349,24,[12,[[],"Just"],[[1349,22,1349,24,[12,[[],"EQ"],[]]]]]],[1350,21,1352,71,[0,[[1350,21,1350,36,[2,[],"comparePatterns"]],[1350,37,1350,43,[2,[],"config"]],[1351,25,1351,71,[7,[1351,26,1351,70,[0,[[1351,26,1351,43,[2,[],"ListTupleOrUncons"]],[1351,44,1351,70,[21,[1351,46,1351,48,"r1"],[[1351,51,1351,69,[[1351,51,1351,62,"subpatterns"],[1351,65,1351,68,[2,[],"p1s"]]]]]]]]]]]],[1352,25,1352,71,[7,[1352,26,1352,70,[0,[[1352,26,1352,43,[2,[],"ListTupleOrUncons"]],[1352,44,1352,70,[21,[1352,46,1352,48,"r2"],[[1352,51,1352,69,[[1352,51,1352,62,"subpatterns"],[1352,65,1352,68,[2,[],"p2s"]]]]]]]]]]]]]]]],[[1354,17,1354,32,[11,"ltOrGtOrNothing"]],[1355,21,1355,36,[2,[],"ltOrGtOrNothing"]]]]]]]]]]]]],[1357,5,1362,21,[11,[1357,8,1357,32,[1,"==",2,[1357,8,1357,17,[2,[],"sortLists"]],[1357,21,1357,32,[2,[],"LengthFirst"]]]],[1358,9,1359,90,[1,"|>",0,[1358,9,1358,18,[2,[],"checkSubs"]],[1359,16,1359,90,[0,[[1359,16,1359,48,[2,[],"fallbackCompareWithUnsortableFor"]],[1359,49,1359,90,[7,[1359,50,1359,89,[1,"<|",1,[1359,50,1359,54,[2,[],"Just"]],[1359,58,1359,89,[0,[[1359,58,1359,83,[2,[],"comparePatternListLengths"]],[1359,84,1359,86,[2,[],"r1"]],[1359,87,1359,89,[2,[],"r2"]]]]]]]]]]]]]],[1362,9,1362,21,[0,[[1362,9,1362,18,[2,[],"checkSubs"]],[1362,19,1362,21,[10]]]]]]]]]]]]]]],[1365,1,1392,80,[0,[[1,[1365,1,1368,3,"{-| Compare the list lengths of two lists of `SortablePattern`, with the caveat\nthat a list must be infinitely long if it ends in a wildcard, with a shorter\nlist ending in a wildcard being \"longer\" (more specified) than a longer one.\n-}"]],[1,[1369,1,1377,13,[[1369,1,1369,26,"comparePatternListLengths"],[1370,5,1377,13,[6,[1370,5,1372,6,[4,[[1370,7,1370,41,[[1370,7,1370,18,"subpatterns"],[1370,21,1370,41,[1,[1370,21,1370,25,[[],"List"]],[[1370,26,1370,41,[1,[1370,26,1370,41,[[],"SortablePattern"]],[]]]]]]]],[1371,7,1372,5,[[1371,7,1371,17,"terminates"],[1371,20,1371,24,[1,[1371,20,1371,24,[[],"Bool"]],[]]]]]]]],[1374,9,1377,13,[6,[1374,9,1376,10,[4,[[1374,11,1374,45,[[1374,11,1374,22,"subpatterns"],[1374,25,1374,45,[1,[1374,25,1374,29,[[],"List"]],[[1374,30,1374,45,[1,[1374,30,1374,45,[[],"SortablePattern"]],[]]]]]]]],[1375,11,1376,9,[[1375,11,1375,21,"terminates"],[1375,24,1375,28,[1,[1375,24,1375,28,[[],"Bool"]],[]]]]]]]],[1377,8,1377,13,[1,[1377,8,1377,13,[[],"Order"]],[]]]]]]]]]],[1378,1,1392,80,[[1378,1,1378,26,"comparePatternListLengths"],[[1378,27,1378,30,[11,"p1s"]],[1378,31,1378,34,[11,"p2s"]]],[1379,5,1392,80,[17,[[1379,10,1379,44,[6,[[1379,12,1379,26,[19,[1379,12,1379,15,[2,[],"p1s"]],[1379,16,1379,26,"terminates"]]],[1379,28,1379,42,[19,[1379,28,1379,31,[2,[],"p2s"]],[1379,32,1379,42,"terminates"]]]]]],[[[1380,9,1380,25,[7,[[1380,11,1380,16,[12,[[],"False"],[]]],[1380,18,1380,23,[12,[[],"False"],[]]]]]],[1382,13,1382,80,[0,[[1382,13,1382,20,[2,[],"compare"]],[1382,21,1382,50,[7,[1382,22,1382,49,[0,[[1382,22,1382,33,[2,["List"],"length"]],[1382,34,1382,49,[19,[1382,34,1382,37,[2,[],"p2s"]],[1382,38,1382,49,"subpatterns"]]]]]]]],[1382,51,1382,80,[7,[1382,52,1382,79,[0,[[1382,52,1382,63,[2,["List"],"length"]],[1382,64,1382,79,[19,[1382,64,1382,67,[2,[],"p1s"]],[1382,68,1382,79,"subpatterns"]]]]]]]]]]]],[[1384,9,1384,24,[7,[[1384,11,1384,16,[12,[[],"False"],[]]],[1384,18,1384,22,[12,[[],"True"],[]]]]]],[1385,13,1385,15,[2,[],"GT"]]],[[1387,9,1387,24,[7,[[1387,11,1387,15,[12,[[],"True"],[]]],[1387,17,1387,22,[12,[[],"False"],[]]]]]],[1388,13,1388,15,[2,[],"LT"]]],[[1390,9,1390,23,[7,[[1390,11,1390,15,[12,[[],"True"],[]]],[1390,17,1390,21,[12,[[],"True"],[]]]]]],[1392,13,1392,80,[0,[[1392,13,1392,20,[2,[],"compare"]],[1392,21,1392,50,[7,[1392,22,1392,49,[0,[[1392,22,1392,33,[2,["List"],"length"]],[1392,34,1392,49,[19,[1392,34,1392,37,[2,[],"p1s"]],[1392,38,1392,49,"subpatterns"]]]]]]]],[1392,51,1392,80,[7,[1392,52,1392,79,[0,[[1392,52,1392,63,[2,["List"],"length"]],[1392,64,1392,79,[19,[1392,64,1392,67,[2,[],"p2s"]],[1392,68,1392,79,"subpatterns"]]]]]]]]]]]]]]]]]]]]]],[[6,1,18,3,"{-|\n\n\n## Review Rule\n\n@docs rule\n\n\n## Configuration\n\n@docs RuleConfig, defaults, sortOnlyMatchingTypes, doNotSortLiterals, doNotSortTypesFromDependencies, sortTypesFromDependenciesAlphabetically, sortListPatternsByLength, doNotLookPastUnsortable\n\n-}"],[536,1,536,11,"-- * Types"],[666,1,666,20,"-- * MODULE VISITOR"],[777,1,777,24,"-- * DEPENDENCY VISITOR"],[829,41,829,69,"-- Convert to a `ModuleName`"],[906,5,906,57,"-- Find custom types that were defined in the module"],[976,13,976,56,"-- Nothing to sort in non-case expressions."],[968,25,968,44,"-- Then by ordering"],[965,27,965,69,"-- Sort by control flow preservation first"],[943,13,943,64,"-- Convert all patterns to sortable ones, if we can"],[940,21,940,88,"-- Assume that the `case` of a case block is just the first 4 chars"],[1103,13,1103,135,"-- Remaining patterns are Unit and Record, which are not sortable, and Parens/As patterns, which we have already unwrapped"],[1086,9,1086,51,"-- Literals can be sorted if configured to"],[1079,9,1079,35,"-- Var and _ are wildcards"],[1073,29,1073,101,"-- You can't cons onto a constructor or Literal, so this is a type error"],[1054,9,1054,100,"-- Uncons pattern we recursively convert each subpattern and convert to the equivalent list"],[1033,9,1033,67,"-- Tuples and lists we recursively convert each subpattern"],[1028,9,1028,75,"-- Find declaration sorting for named patterns and their arguments"],[1013,17,1013,46,"-- Find its constructor order"],[1006,17,1006,65,"-- Find the type that the constructor belongs to"],[1004,13,1004,40,"-- Get types for the module"],[1120,9,1120,53,"-- Other pattern are just the pattern itself"],[1113,9,1113,58,"-- Parenthesized/as patterns we just descend into"],[1143,13,1143,50,"-- This is a type error, so ignore it"],[1209,9,1209,88,"-- Anything else is a type error or has no wildcards, so we needn't consider it"],[1206,17,1206,47,"-- Otherwise, enforce ordering"],[1202,17,1202,40,"-- Can safely sort them"],[1199,9,1199,37,"-- Lists, Tuples, and Uncons"],[1196,17,1196,102,"-- Otherwise, no possibility of control flow confusion, as constructors are different"],[1192,17,1192,108,"-- If the constructors are the same, then control flow confusion could occur in subpatterns"],[1188,29,1188,93,"-- Either exhausted subpatterns with no problems or a type error"],[1183,29,1183,92,"-- Check each subpattern sequentially for control flow ordering"],[1175,25,1175,86,"-- Wildcards cannot be moved compared to things we can't sort"],[1163,9,1163,86,"-- Wildcards cannot be moved relative to non-wildcards, so return index order"],[1159,9,1159,70,"-- If both are wildcards, then they do not have defined order"],[1246,13,1246,80,"-- r2 is shorter than r1, so it is safe to sort it if it terminates"],[1242,13,1242,80,"-- r1 is shorter than r2, so it is safe to sort it if it terminates"],[1238,13,1238,69,"-- Both have been exhausted, so no problems sorting them"],[1234,21,1234,90,"-- If the left-most subpattern is not sortable, they cannot be sorted"],[1230,21,1230,122,"-- If the left-most subpattern is sortable, then they can be distinguished and so are safely sortable"],[1224,21,1224,133,"-- If the left-most subpatterns are equal, then they are sortable if the next subpattern is sortable, so recurse"],[1221,13,1221,58,"-- Check if the head of the lists is sortable"],[1335,9,1335,75,"-- Anything else should be a type error, so we needn't consider it"],[1331,17,1331,61,"-- Otherwise, compare the lists sequentially"],[1318,17,1318,110,"-- If one list is shorter than another, it goes after if it is infinite or before if it isn't"],[1308,17,1308,76,"-- If the lists are the same length, infinite ones go later"],[1301,9,1301,37,"-- Lists, Tuples, and Uncons"],[1297,13,1297,39,"-- Fallback to subpatterns"],[1294,29,1294,84,"-- Lists should be even, so other cases aren't sortable"],[1290,29,1290,100,"-- Both lists of subpatterns exhausted without a \"winner\", so return EQ"],[1286,29,1286,119,"-- If at the point where arguments are both unsortable, then proceed past if configured to"],[1275,9,1275,142,"--Constructors are compared by index, then by comparing subpatterns sequentially, failing if a non-sortable subpattern is encountered"],[1271,9,1271,120,"-- Literals are simply compared; if sorting literals is turned off, then LiteralPatterns are not created at all"],[1264,9,1264,128,"-- Wildcards cannot be moved relative to non-wildcards, so return Nothing, which ensures that they are not sorted past."],[1260,9,1260,57,"-- Wildcards can be sorted past if both are wild"],[1381,13,1381,56,"-- Flip comparison if both end in wildcards"],[1391,13,1391,48,"-- Compare normally if neither does"]]]]
