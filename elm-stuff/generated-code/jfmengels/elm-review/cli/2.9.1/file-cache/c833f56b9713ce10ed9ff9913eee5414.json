[1,[[1,1,1,42,[0,[[1,8,1,27,["NoUnsortedCasesTest"]],[1,28,1,42,[1,[[1,38,1,41,[1,"all"]]]]]]]],[[3,1,13,10,[[3,8,3,23,["NoUnsortedCases"]],[0],[1,[4,5,13,10,[1,[[5,11,5,19,[1,"defaults"]],[6,11,6,34,[1,"doNotLookPastUnsortable"]],[7,11,7,28,[1,"doNotSortLiterals"]],[8,11,8,41,[1,"doNotSortTypesFromDependencies"]],[9,11,9,15,[1,"rule"]],[10,11,10,35,[1,"sortListPatternsByLength"]],[11,11,11,32,[1,"sortOnlyMatchingTypes"]],[12,11,12,50,[1,"sortTypesFromDependenciesAlphabetically"]]]]]]]],[14,1,14,19,[[14,8,14,19,["Review","Test"]],[0],[0]]],[15,1,15,44,[[15,8,15,12,["Test"]],[0],[1,[15,13,15,44,[1,[[15,23,15,27,[2,"Test"]],[15,29,15,37,[1,"describe"]],[15,39,15,43,[1,"test"]]]]]]]]],[[18,1,21,32,[0,[[0],[1,[18,1,18,11,[[18,1,18,4,"all"],[18,7,18,11,[1,[18,7,18,11,[[],"Test"]],[]]]]]],[19,1,21,32,[[19,1,19,4,"all"],[],[20,5,21,32,[0,[[20,5,20,13,[2,[],"describe"]],[20,14,20,31,[5,"NoUnsortedCases"]],[21,9,21,32,[9,[[21,11,21,17,[2,[],"passes"]],[21,19,21,24,[2,[],"fails"]],[21,26,21,30,[2,[],"bugs"]]]]]]]]]]]]],[24,1,112,10,[0,[[0],[1,[24,1,24,12,[[24,1,24,5,"bugs"],[24,8,24,12,[1,[24,8,24,12,[[],"Test"]],[]]]]]],[25,1,112,10,[[25,1,25,5,"bugs"],[],[26,5,112,10,[0,[[26,5,26,13,[2,[],"describe"]],[26,14,26,33,[5,"correctly handles"]],[27,9,112,10,[9,[[27,11,55,50,[1,"<|",1,[27,11,27,53,[0,[[27,11,27,15,[2,[],"test"]],[27,16,27,53,[5,"does not unstably sort patterns (1)"]]]]],[28,13,55,50,[18,[[[28,14,28,16,[1]]],[29,17,55,50,[1,"|>",0,[29,17,54,55,[1,"|>",0,[29,17,53,4,[5,"module A exposing (..)\n\n\ntype Foo\n    = A\n    | B\n\n\na =\n    case ( x, y, z ) of\n        ( _, False, Just B ) ->\n            0\n\n        ( _, False, Nothing ) ->\n            1\n\n        ( True, True, Just A ) ->\n            2\n\n        ( _, True, _ ) ->\n            3\n\n        _ ->\n            4\n"]],[54,24,54,55,[0,[[54,24,54,39,[2,["Review","Test"],"run"]],[54,40,54,55,[7,[54,41,54,54,[0,[[54,41,54,45,[2,[],"rule"]],[54,46,54,54,[2,[],"defaults"]]]]]]]]]]]],[55,24,55,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[56,11,111,26,[1,"<|",1,[56,11,56,53,[0,[[56,11,56,15,[2,[],"test"]],[56,16,56,53,[5,"does not unstably sort patterns (2)"]]]]],[57,13,111,26,[18,[[[57,14,57,16,[1]]],[58,17,111,26,[1,"|>",0,[58,17,83,55,[1,"|>",0,[58,17,82,4,[5,"module A exposing (..)\n\n\ntype Foo\n    = A\n    | B\n\n\na =\n    case ( x, y, z ) of\n        ( _, False, Nothing ) ->\n            1\n\n        ( _, False, Just B ) ->\n            0\n\n        ( True, True, Just A ) ->\n            2\n\n        ( _, True, _ ) ->\n            3\n\n        _ ->\n            4\n"]],[83,24,83,55,[0,[[83,24,83,39,[2,["Review","Test"],"run"]],[83,40,83,55,[7,[83,41,83,54,[0,[[83,41,83,45,[2,[],"rule"]],[83,46,83,54,[2,[],"defaults"]]]]]]]]]]]],[84,24,111,26,[0,[[84,24,84,48,[2,["Review","Test"],"expectErrors"]],[85,25,111,26,[9,[[85,27,110,4,[1,"|>",0,[85,27,85,40,[2,[],"unsortedError"]],[86,32,110,4,[0,[[86,32,86,53,[2,["Review","Test"],"whenFixed"]],[86,54,110,4,[5,"module A exposing (..)\n\n\ntype Foo\n    = A\n    | B\n\n\na =\n    case ( x, y, z ) of\n        ( _, False, Just B ) ->\n            0\n\n        ( _, False, Nothing ) ->\n            1\n\n        ( True, True, Just A ) ->\n            2\n\n        ( _, True, _ ) ->\n            3\n\n        _ ->\n            4\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[115,1,185,10,[0,[[0],[1,[115,1,115,13,[[115,1,115,6,"fails"],[115,9,115,13,[1,[115,9,115,13,[[],"Test"]],[]]]]]],[116,1,185,10,[[116,1,116,6,"fails"],[],[117,5,185,10,[0,[[117,5,117,13,[2,[],"describe"]],[117,14,117,37,[5,"reports an error when"]],[118,9,185,10,[9,[[118,11,145,26,[1,"<|",1,[118,11,118,36,[0,[[118,11,118,15,[2,[],"test"]],[118,16,118,36,[5,"case is not sorted"]]]]],[119,13,145,26,[18,[[[119,14,119,16,[1]]],[120,17,145,26,[1,"|>",0,[120,17,131,55,[1,"|>",0,[120,17,130,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n"]],[131,24,131,55,[0,[[131,24,131,39,[2,["Review","Test"],"run"]],[131,40,131,55,[7,[131,41,131,54,[0,[[131,41,131,45,[2,[],"rule"]],[131,46,131,54,[2,[],"defaults"]]]]]]]]]]]],[132,24,145,26,[0,[[132,24,132,48,[2,["Review","Test"],"expectErrors"]],[133,25,145,26,[9,[[133,27,144,4,[1,"|>",0,[133,27,133,40,[2,[],"unsortedError"]],[134,32,144,4,[0,[[134,32,134,53,[2,["Review","Test"],"whenFixed"]],[134,54,144,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[146,11,173,26,[1,"<|",1,[146,11,146,37,[0,[[146,11,146,15,[2,[],"test"]],[146,16,146,37,[5,"type is not exposed"]]]]],[147,13,173,26,[18,[[[147,14,147,16,[1]]],[148,17,173,26,[1,"|>",0,[148,17,159,55,[1,"|>",0,[148,17,158,4,[5,"module A exposing (toString)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n"]],[159,24,159,55,[0,[[159,24,159,39,[2,["Review","Test"],"run"]],[159,40,159,55,[7,[159,41,159,54,[0,[[159,41,159,45,[2,[],"rule"]],[159,46,159,54,[2,[],"defaults"]]]]]]]]]]]],[160,24,173,26,[0,[[160,24,160,48,[2,["Review","Test"],"expectErrors"]],[161,25,173,26,[9,[[161,27,172,4,[1,"|>",0,[161,27,161,40,[2,[],"unsortedError"]],[162,32,172,4,[0,[[162,32,162,53,[2,["Review","Test"],"whenFixed"]],[162,54,172,4,[5,"module A exposing (toString)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[174,11,174,24,[2,[],"fixesProperly"]],[175,11,175,27,[2,[],"failsCrossModule"]],[176,11,176,25,[2,[],"failsWildcards"]],[177,11,177,35,[2,[],"failsTransparentPatterns"]],[178,11,178,22,[2,[],"failsTuples"]],[179,11,179,21,[2,[],"failsLists"]],[180,11,180,22,[2,[],"failsUncons"]],[181,11,181,24,[2,[],"failsLiterals"]],[182,11,182,37,[2,[],"failsTypesFromDependencies"]],[183,11,183,27,[2,[],"failsSubpatterns"]],[184,11,184,27,[2,[],"failsOnWhitelist"]]]]]]]]]]]]],[188,1,391,10,[0,[[0],[1,[188,1,188,24,[[188,1,188,17,"failsCrossModule"],[188,20,188,24,[1,[188,20,188,24,[[],"Test"]],[]]]]]],[189,1,391,10,[[189,1,189,17,"failsCrossModule"],[],[190,5,391,10,[0,[[190,5,190,13,[2,[],"describe"]],[190,14,190,49,[5,"case is defined in another module"]],[191,9,391,10,[9,[[191,11,226,26,[1,"<|",1,[191,11,191,31,[0,[[191,11,191,15,[2,[],"test"]],[191,16,191,31,[5,"is not sorted"]]]]],[192,13,226,26,[18,[[[192,14,192,16,[1]]],[193,17,226,26,[1,"|>",0,[193,17,209,64,[1,"|>",0,[193,17,208,18,[9,[[193,19,196,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[197,19,207,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n"]]]]],[209,24,209,64,[0,[[209,24,209,48,[2,["Review","Test"],"runOnModules"]],[209,49,209,64,[7,[209,50,209,63,[0,[[209,50,209,54,[2,[],"rule"]],[209,55,209,63,[2,[],"defaults"]]]]]]]]]]]],[210,24,226,26,[0,[[210,24,210,58,[2,["Review","Test"],"expectErrorsForModules"]],[211,25,226,26,[9,[[211,27,225,28,[6,[[211,29,211,32,[5,"B"]],[212,29,224,30,[9,[[212,31,223,4,[1,"|>",0,[212,31,212,44,[2,[],"unsortedError"]],[213,36,223,4,[0,[[213,36,213,57,[2,["Review","Test"],"whenFixed"]],[213,58,223,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[227,11,263,26,[1,"<|",1,[227,11,227,38,[0,[[227,11,227,15,[2,[],"test"]],[227,16,227,38,[5,"with qualified names"]]]]],[228,13,263,26,[18,[[[228,14,228,16,[1]]],[229,17,263,26,[1,"|>",0,[229,17,245,64,[1,"|>",0,[229,17,244,18,[9,[[229,19,232,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[233,19,243,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n        A.Baz -> \"Baz\"\n"]]]]],[245,24,245,64,[0,[[245,24,245,48,[2,["Review","Test"],"runOnModules"]],[245,49,245,64,[7,[245,50,245,63,[0,[[245,50,245,54,[2,[],"rule"]],[245,55,245,63,[2,[],"defaults"]]]]]]]]]]]],[246,24,263,26,[0,[[246,24,246,58,[2,["Review","Test"],"expectErrorsForModules"]],[247,25,263,26,[9,[[247,27,262,28,[6,[[247,29,247,32,[5,"B"]],[248,29,261,30,[9,[[248,31,260,4,[1,"|>",0,[248,31,248,44,[2,[],"unsortedError"]],[249,36,260,4,[0,[[249,36,249,57,[2,["Review","Test"],"whenFixed"]],[250,37,260,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[264,11,306,26,[1,"<|",1,[264,11,264,53,[0,[[264,11,264,15,[2,[],"test"]],[264,16,264,53,[5,"with qualified names disambiguating"]]]]],[265,13,306,26,[18,[[[265,14,265,16,[1]]],[266,17,306,26,[1,"|>",0,[266,17,287,64,[1,"|>",0,[266,17,286,18,[9,[[266,19,269,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[270,19,273,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[274,19,285,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Baz -> \"Baz\"\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n"]]]]],[287,24,287,64,[0,[[287,24,287,48,[2,["Review","Test"],"runOnModules"]],[287,49,287,64,[7,[287,50,287,63,[0,[[287,50,287,54,[2,[],"rule"]],[287,55,287,63,[2,[],"defaults"]]]]]]]]]]]],[288,24,306,26,[0,[[288,24,288,58,[2,["Review","Test"],"expectErrorsForModules"]],[289,25,306,26,[9,[[289,27,305,28,[6,[[289,29,289,32,[5,"C"]],[290,29,304,30,[9,[[290,31,303,4,[1,"|>",0,[290,31,290,44,[2,[],"unsortedError"]],[291,36,303,4,[0,[[291,36,291,57,[2,["Review","Test"],"whenFixed"]],[292,37,303,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[307,11,349,26,[1,"<|",1,[307,11,307,47,[0,[[307,11,307,15,[2,[],"test"]],[307,16,307,47,[5,"with disambiguation by import"]]]]],[308,13,349,26,[18,[[[308,14,308,16,[1]]],[309,17,349,26,[1,"|>",0,[309,17,330,64,[1,"|>",0,[309,17,329,18,[9,[[309,19,312,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[313,19,316,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[317,19,328,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]],[330,24,330,64,[0,[[330,24,330,48,[2,["Review","Test"],"runOnModules"]],[330,49,330,64,[7,[330,50,330,63,[0,[[330,50,330,54,[2,[],"rule"]],[330,55,330,63,[2,[],"defaults"]]]]]]]]]]]],[331,24,349,26,[0,[[331,24,331,58,[2,["Review","Test"],"expectErrorsForModules"]],[332,25,349,26,[9,[[332,27,348,28,[6,[[332,29,332,32,[5,"C"]],[333,29,347,30,[9,[[333,31,346,4,[1,"|>",0,[333,31,333,44,[2,[],"unsortedError"]],[334,36,346,4,[0,[[334,36,334,57,[2,["Review","Test"],"whenFixed"]],[335,37,346,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[350,11,390,26,[1,"<|",1,[350,11,350,33,[0,[[350,11,350,15,[2,[],"test"]],[350,16,350,33,[5,"with local name"]]]]],[351,13,390,26,[18,[[[351,14,351,16,[1]]],[352,17,390,26,[1,"|>",0,[352,17,370,64,[1,"|>",0,[352,17,369,18,[9,[[352,19,355,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[356,19,368,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]],[370,24,370,64,[0,[[370,24,370,48,[2,["Review","Test"],"runOnModules"]],[370,49,370,64,[7,[370,50,370,63,[0,[[370,50,370,54,[2,[],"rule"]],[370,55,370,63,[2,[],"defaults"]]]]]]]]]]]],[371,24,390,26,[0,[[371,24,371,58,[2,["Review","Test"],"expectErrorsForModules"]],[372,25,390,26,[9,[[372,27,389,28,[6,[[372,29,372,32,[5,"B"]],[373,29,388,30,[9,[[373,31,387,4,[1,"|>",0,[373,31,373,44,[2,[],"unsortedError"]],[374,36,387,4,[0,[[374,36,374,57,[2,["Review","Test"],"whenFixed"]],[375,37,387,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[394,1,399,10,[0,[[0],[1,[394,1,394,18,[[394,1,394,11,"failsLists"],[394,14,394,18,[1,[394,14,394,18,[[],"Test"]],[]]]]]],[395,1,399,10,[[395,1,395,11,"failsLists"],[],[396,5,399,10,[0,[[396,5,396,13,[2,[],"describe"]],[396,14,396,26,[5,"with lists"]],[397,9,399,10,[9,[[397,11,397,32,[2,[],"failsListsLengthFirst"]],[398,11,398,32,[2,[],"failsListsElementwise"]]]]]]]]]]]]],[402,1,545,10,[0,[[0],[1,[402,1,402,29,[[402,1,402,22,"failsListsElementwise"],[402,25,402,29,[1,[402,25,402,29,[[],"Test"]],[]]]]]],[403,1,545,10,[[403,1,403,22,"failsListsElementwise"],[],[404,5,545,10,[0,[[404,5,404,13,[2,[],"describe"]],[404,14,404,34,[5,"sorted elementwise"]],[405,9,545,10,[9,[[405,11,451,26,[1,"<|",1,[405,11,405,31,[0,[[405,11,405,15,[2,[],"test"]],[405,16,405,31,[5,"is not sorted"]]]]],[406,13,451,26,[18,[[[406,14,406,16,[1]]],[407,17,451,26,[1,"|>",0,[407,17,427,55,[1,"|>",0,[407,17,426,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Baz] -> \"Baz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        _ -> \"Too many...\"\n"]],[427,24,427,55,[0,[[427,24,427,39,[2,["Review","Test"],"run"]],[427,40,427,55,[7,[427,41,427,54,[0,[[427,41,427,45,[2,[],"rule"]],[427,46,427,54,[2,[],"defaults"]]]]]]]]]]]],[428,24,451,26,[0,[[428,24,428,48,[2,["Review","Test"],"expectErrors"]],[429,25,451,26,[9,[[429,27,450,4,[1,"|>",0,[429,27,429,40,[2,[],"unsortedError"]],[430,32,450,4,[0,[[430,32,430,53,[2,["Review","Test"],"whenFixed"]],[431,33,450,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[452,11,498,26,[1,"<|",1,[452,11,452,39,[0,[[452,11,452,15,[2,[],"test"]],[452,16,452,39,[5,"in length-first order"]]]]],[453,13,498,26,[18,[[[453,14,453,16,[1]]],[454,17,498,26,[1,"|>",0,[454,17,474,55,[1,"|>",0,[454,17,473,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]],[474,24,474,55,[0,[[474,24,474,39,[2,["Review","Test"],"run"]],[474,40,474,55,[7,[474,41,474,54,[0,[[474,41,474,45,[2,[],"rule"]],[474,46,474,54,[2,[],"defaults"]]]]]]]]]]]],[475,24,498,26,[0,[[475,24,475,48,[2,["Review","Test"],"expectErrors"]],[476,25,498,26,[9,[[476,27,497,4,[1,"|>",0,[476,27,476,40,[2,[],"unsortedError"]],[477,32,497,4,[0,[[477,32,477,53,[2,["Review","Test"],"whenFixed"]],[478,33,497,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[499,11,544,26,[1,"<|",1,[499,11,499,62,[0,[[499,11,499,15,[2,[],"test"]],[499,16,499,62,[5,"with mixed list/uncons in length-first order"]]]]],[500,13,544,26,[18,[[[500,14,500,16,[1]]],[501,17,544,26,[1,"|>",0,[501,17,521,55,[1,"|>",0,[501,17,520,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        Foo :: [] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Bar, Foo] -> \"BarFoo\"\n        Bar :: Bar :: [] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Foo :: _ -> \"Foo+\"\n        Bar :: _ -> \"Bar+\"\n        _ -> \"Too many...\"\n"]],[521,24,521,55,[0,[[521,24,521,39,[2,["Review","Test"],"run"]],[521,40,521,55,[7,[521,41,521,54,[0,[[521,41,521,45,[2,[],"rule"]],[521,46,521,54,[2,[],"defaults"]]]]]]]]]]]],[522,24,544,26,[0,[[522,24,522,48,[2,["Review","Test"],"expectErrors"]],[523,25,544,26,[9,[[523,27,543,4,[1,"|>",0,[523,27,523,40,[2,[],"unsortedError"]],[524,32,543,4,[0,[[524,32,524,53,[2,["Review","Test"],"whenFixed"]],[524,54,543,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        Foo :: [] -> \"Foo\"\n        Foo :: _ -> \"Foo+\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        Bar :: Bar :: [] -> \"BarBar\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Bar :: _ -> \"Bar+\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[548,1,711,10,[0,[[0],[1,[548,1,548,29,[[548,1,548,22,"failsListsLengthFirst"],[548,25,548,29,[1,[548,25,548,29,[[],"Test"]],[]]]]]],[549,1,711,10,[[549,1,549,22,"failsListsLengthFirst"],[],[550,5,711,10,[0,[[550,5,550,13,[2,[],"describe"]],[550,14,550,35,[5,"sorted length-first"]],[551,9,711,10,[9,[[551,11,601,26,[1,"<|",1,[551,11,551,31,[0,[[551,11,551,15,[2,[],"test"]],[551,16,551,31,[5,"is not sorted"]]]]],[552,13,601,26,[18,[[[552,14,552,16,[1]]],[553,17,601,26,[1,"|>",0,[553,17,577,26,[1,"|>",0,[553,17,572,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Bar, Bar] -> \"BarBar\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]],[573,24,577,26,[0,[[573,24,573,39,[2,["Review","Test"],"run"]],[574,25,577,26,[7,[574,26,576,36,[1,"|>",0,[574,26,575,56,[1,"|>",0,[574,26,574,34,[2,[],"defaults"]],[575,32,575,56,[2,[],"sortListPatternsByLength"]]]],[576,32,576,36,[2,[],"rule"]]]]]]]]]]],[578,24,601,26,[0,[[578,24,578,48,[2,["Review","Test"],"expectErrors"]],[579,25,601,26,[9,[[579,27,600,4,[1,"|>",0,[579,27,579,40,[2,[],"unsortedError"]],[580,32,600,4,[0,[[580,32,580,53,[2,["Review","Test"],"whenFixed"]],[581,33,600,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[602,11,652,26,[1,"<|",1,[602,11,602,38,[0,[[602,11,602,15,[2,[],"test"]],[602,16,602,38,[5,"in elementwise order"]]]]],[603,13,652,26,[18,[[[603,14,603,16,[1]]],[604,17,652,26,[1,"|>",0,[604,17,628,26,[1,"|>",0,[604,17,623,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[624,24,628,26,[0,[[624,24,624,39,[2,["Review","Test"],"run"]],[625,25,628,26,[7,[625,26,627,36,[1,"|>",0,[625,26,626,56,[1,"|>",0,[625,26,625,34,[2,[],"defaults"]],[626,32,626,56,[2,[],"sortListPatternsByLength"]]]],[627,32,627,36,[2,[],"rule"]]]]]]]]]]],[629,24,652,26,[0,[[629,24,629,48,[2,["Review","Test"],"expectErrors"]],[630,25,652,26,[9,[[630,27,651,4,[1,"|>",0,[630,27,630,40,[2,[],"unsortedError"]],[631,32,651,4,[0,[[631,32,631,53,[2,["Review","Test"],"whenFixed"]],[632,33,651,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[653,11,710,26,[1,"<|",1,[653,11,653,61,[0,[[653,11,653,15,[2,[],"test"]],[653,16,653,61,[5,"with mixed list/uncons in elementwise order"]]]]],[654,13,710,26,[18,[[[654,14,654,16,[1]]],[655,17,710,26,[1,"|>",0,[655,17,683,26,[1,"|>",0,[655,17,678,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        Foo :: Foo :: [] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        Foo :: _ -> \"Foo+\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Bar :: _ -> \"Bar+\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[679,24,683,26,[0,[[679,24,679,39,[2,["Review","Test"],"run"]],[680,25,683,26,[7,[680,26,682,36,[1,"|>",0,[680,26,681,56,[1,"|>",0,[680,26,680,34,[2,[],"defaults"]],[681,32,681,56,[2,[],"sortListPatternsByLength"]]]],[682,32,682,36,[2,[],"rule"]]]]]]]]]]],[684,24,710,26,[0,[[684,24,684,48,[2,["Review","Test"],"expectErrors"]],[685,25,710,26,[9,[[685,27,709,4,[1,"|>",0,[685,27,685,40,[2,[],"unsortedError"]],[686,32,709,4,[0,[[686,32,686,53,[2,["Review","Test"],"whenFixed"]],[686,54,709,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        Foo :: Foo :: [] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Foo :: _ -> \"Foo+\"\n        Bar :: _ -> \"Bar+\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[714,1,913,10,[0,[[0],[1,[714,1,714,21,[[714,1,714,14,"failsLiterals"],[714,17,714,21,[1,[714,17,714,21,[[],"Test"]],[]]]]]],[715,1,913,10,[[715,1,715,14,"failsLiterals"],[],[716,5,913,10,[0,[[716,5,716,13,[2,[],"describe"]],[716,14,716,29,[5,"with literals"]],[717,9,913,10,[9,[[717,11,742,26,[1,"<|",1,[717,11,717,48,[0,[[717,11,717,15,[2,[],"test"]],[717,16,717,48,[5,"not in literal order with ints"]]]]],[718,13,742,26,[18,[[[718,14,718,16,[1]]],[719,17,742,26,[1,"|>",0,[719,17,729,55,[1,"|>",0,[719,17,728,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        2 -> \"2\"\n        0 -> \"0\"\n        4 -> \"4\"\n        _ -> \"Something else...\"\n"]],[729,24,729,55,[0,[[729,24,729,39,[2,["Review","Test"],"run"]],[729,40,729,55,[7,[729,41,729,54,[0,[[729,41,729,45,[2,[],"rule"]],[729,46,729,54,[2,[],"defaults"]]]]]]]]]]]],[730,24,742,26,[0,[[730,24,730,48,[2,["Review","Test"],"expectErrors"]],[731,25,742,26,[9,[[731,27,741,4,[1,"|>",0,[731,27,731,40,[2,[],"unsortedError"]],[732,32,741,4,[0,[[732,32,732,53,[2,["Review","Test"],"whenFixed"]],[732,54,741,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0 -> \"0\"\n        2 -> \"2\"\n        4 -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[743,11,768,26,[1,"<|",1,[743,11,743,52,[0,[[743,11,743,15,[2,[],"test"]],[743,16,743,52,[5,"not in literal order with hex ints"]]]]],[744,13,768,26,[18,[[[744,14,744,16,[1]]],[745,17,768,26,[1,"|>",0,[745,17,755,55,[1,"|>",0,[745,17,754,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0x2 -> \"2\"\n        0x0 -> \"0\"\n        0xF -> \"F\"\n        _ -> \"Something else...\"\n"]],[755,24,755,55,[0,[[755,24,755,39,[2,["Review","Test"],"run"]],[755,40,755,55,[7,[755,41,755,54,[0,[[755,41,755,45,[2,[],"rule"]],[755,46,755,54,[2,[],"defaults"]]]]]]]]]]]],[756,24,768,26,[0,[[756,24,756,48,[2,["Review","Test"],"expectErrors"]],[757,25,768,26,[9,[[757,27,767,4,[1,"|>",0,[757,27,757,40,[2,[],"unsortedError"]],[758,32,767,4,[0,[[758,32,758,53,[2,["Review","Test"],"whenFixed"]],[758,54,767,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0x0 -> \"0\"\n        0x2 -> \"2\"\n        0xF -> \"F\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[769,11,794,26,[1,"<|",1,[769,11,769,50,[0,[[769,11,769,15,[2,[],"test"]],[769,16,769,50,[5,"not in literal order with floats"]]]]],[770,13,794,26,[18,[[[770,14,770,16,[1]]],[771,17,794,26,[1,"|>",0,[771,17,781,55,[1,"|>",0,[771,17,780,4,[5,"module A exposing (..)\n\ntoString : Float -> String\ntoString f =\n    case f of\n        2.3 -> \"2\"\n        0.0 -> \"0\"\n        4.0 -> \"4\"\n        _ -> \"Something else...\"\n"]],[781,24,781,55,[0,[[781,24,781,39,[2,["Review","Test"],"run"]],[781,40,781,55,[7,[781,41,781,54,[0,[[781,41,781,45,[2,[],"rule"]],[781,46,781,54,[2,[],"defaults"]]]]]]]]]]]],[782,24,794,26,[0,[[782,24,782,48,[2,["Review","Test"],"expectErrors"]],[783,25,794,26,[9,[[783,27,793,4,[1,"|>",0,[783,27,783,40,[2,[],"unsortedError"]],[784,32,793,4,[0,[[784,32,784,53,[2,["Review","Test"],"whenFixed"]],[784,54,793,4,[5,"module A exposing (..)\n\ntoString : Float -> String\ntoString f =\n    case f of\n        0.0 -> \"0\"\n        2.3 -> \"2\"\n        4.0 -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[795,11,820,26,[1,"<|",1,[795,11,795,51,[0,[[795,11,795,15,[2,[],"test"]],[795,16,795,51,[5,"not in literal order with Strings"]]]]],[796,13,820,26,[18,[[[796,14,796,16,[1]]],[797,17,820,26,[1,"|>",0,[797,17,807,55,[1,"|>",0,[797,17,806,4,[5,"module A exposing (..)\n\ntoString : String -> Char\ntoString s =\n    case s of\n        \"A\" -> 'A'\n        \"C\" -> 'C'\n        \"B\" -> 'B'\n        _ -> \"Something else...\"\n"]],[807,24,807,55,[0,[[807,24,807,39,[2,["Review","Test"],"run"]],[807,40,807,55,[7,[807,41,807,54,[0,[[807,41,807,45,[2,[],"rule"]],[807,46,807,54,[2,[],"defaults"]]]]]]]]]]]],[808,24,820,26,[0,[[808,24,808,48,[2,["Review","Test"],"expectErrors"]],[809,25,820,26,[9,[[809,27,819,4,[1,"|>",0,[809,27,809,40,[2,[],"unsortedError"]],[810,32,819,4,[0,[[810,32,810,53,[2,["Review","Test"],"whenFixed"]],[810,54,819,4,[5,"module A exposing (..)\n\ntoString : String -> Char\ntoString s =\n    case s of\n        \"A\" -> 'A'\n        \"B\" -> 'B'\n        \"C\" -> 'C'\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[821,11,846,26,[1,"<|",1,[821,11,821,49,[0,[[821,11,821,15,[2,[],"test"]],[821,16,821,49,[5,"not in literal order with Chars"]]]]],[822,13,846,26,[18,[[[822,14,822,16,[1]]],[823,17,846,26,[1,"|>",0,[823,17,833,55,[1,"|>",0,[823,17,832,4,[5,"module A exposing (..)\n\ntoString : Char -> String\ntoString c =\n    case c of\n        'A' -> \"A\"\n        'C' -> \"C\"\n        'B' -> \"B\"\n        _ -> \"Something else...\"\n"]],[833,24,833,55,[0,[[833,24,833,39,[2,["Review","Test"],"run"]],[833,40,833,55,[7,[833,41,833,54,[0,[[833,41,833,45,[2,[],"rule"]],[833,46,833,54,[2,[],"defaults"]]]]]]]]]]]],[834,24,846,26,[0,[[834,24,834,48,[2,["Review","Test"],"expectErrors"]],[835,25,846,26,[9,[[835,27,845,4,[1,"|>",0,[835,27,835,40,[2,[],"unsortedError"]],[836,32,845,4,[0,[[836,32,836,53,[2,["Review","Test"],"whenFixed"]],[836,54,845,4,[5,"module A exposing (..)\n\ntoString : Char -> String\ntoString c =\n    case c of\n        'A' -> \"A\"\n        'B' -> \"B\"\n        'C' -> \"C\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[847,11,880,26,[1,"<|",1,[847,11,847,70,[0,[[847,11,847,15,[2,[],"test"]],[847,16,847,70,[5,"not in literal order in combination with other types"]]]]],[848,13,880,26,[18,[[[848,14,848,16,[1]]],[849,17,880,26,[1,"|>",0,[849,17,863,55,[1,"|>",0,[849,17,862,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 2) -> \"0\"\n        (Foo, 0) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]],[863,24,863,55,[0,[[863,24,863,39,[2,["Review","Test"],"run"]],[863,40,863,55,[7,[863,41,863,54,[0,[[863,41,863,45,[2,[],"rule"]],[863,46,863,54,[2,[],"defaults"]]]]]]]]]]]],[864,24,880,26,[0,[[864,24,864,48,[2,["Review","Test"],"expectErrors"]],[865,25,880,26,[9,[[865,27,879,4,[1,"|>",0,[865,27,865,40,[2,[],"unsortedError"]],[866,32,879,4,[0,[[866,32,866,53,[2,["Review","Test"],"whenFixed"]],[866,54,879,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Foo, 2) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]],[881,11,912,26,[1,"<|",1,[881,11,881,81,[0,[[881,11,881,15,[2,[],"test"]],[881,16,881,81,[5,"in literal order in combination with other types and not sorted"]]]]],[882,13,912,26,[18,[[[882,14,882,16,[1]]],[883,17,912,26,[1,"|>",0,[883,17,896,55,[1,"|>",0,[883,17,895,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Baz, 2) -> \"2\"\n        (Bar, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]],[896,24,896,55,[0,[[896,24,896,39,[2,["Review","Test"],"run"]],[896,40,896,55,[7,[896,41,896,54,[0,[[896,41,896,45,[2,[],"rule"]],[896,46,896,54,[2,[],"defaults"]]]]]]]]]]]],[897,24,912,26,[0,[[897,24,897,48,[2,["Review","Test"],"expectErrors"]],[898,25,912,26,[9,[[898,27,911,4,[1,"|>",0,[898,27,898,40,[2,[],"unsortedError"]],[899,32,911,4,[0,[[899,32,899,53,[2,["Review","Test"],"whenFixed"]],[899,54,911,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[916,1,1226,10,[0,[[0],[1,[916,1,916,24,[[916,1,916,17,"failsOnWhitelist"],[916,20,916,24,[1,[916,20,916,24,[[],"Test"]],[]]]]]],[917,1,1226,10,[[917,1,917,17,"failsOnWhitelist"],[],[918,5,1226,10,[0,[[918,5,918,13,[2,[],"describe"]],[918,14,918,28,[5,"on whitelist"]],[919,9,1226,10,[9,[[919,11,958,26,[1,"<|",1,[919,11,919,28,[0,[[919,11,919,15,[2,[],"test"]],[919,16,919,28,[5,"not sorted"]]]]],[920,13,958,26,[18,[[[920,14,920,16,[1]]],[921,17,958,26,[1,"|>",0,[921,17,941,26,[1,"|>",0,[921,17,936,18,[9,[[921,19,924,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[925,19,935,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[937,24,941,26,[0,[[937,24,937,48,[2,["Review","Test"],"runOnModules"]],[938,25,941,26,[7,[938,26,940,36,[1,"|>",0,[938,26,939,85,[1,"|>",0,[938,26,938,34,[2,[],"defaults"]],[939,32,939,85,[0,[[939,32,939,53,[2,[],"sortOnlyMatchingTypes"]],[939,54,939,85,[7,[939,55,939,84,[0,[[939,55,939,66,[2,[],"matchesName"]],[939,67,939,84,[6,[[939,69,939,72,[5,"A"]],[939,74,939,82,[5,"Custom"]]]]]]]]]]]]]]],[940,32,940,36,[2,[],"rule"]]]]]]]]]]],[942,24,958,26,[0,[[942,24,942,58,[2,["Review","Test"],"expectErrorsForModules"]],[943,25,958,26,[9,[[943,27,957,28,[6,[[943,29,943,32,[5,"B"]],[944,29,956,30,[9,[[944,31,955,4,[1,"|>",0,[944,31,944,44,[2,[],"unsortedError"]],[945,36,955,4,[0,[[945,36,945,57,[2,["Review","Test"],"whenFixed"]],[945,58,955,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[959,11,998,26,[1,"<|",1,[959,11,959,38,[0,[[959,11,959,15,[2,[],"test"]],[959,16,959,38,[5,"with qualified names"]]]]],[960,13,998,26,[18,[[[960,14,960,16,[1]]],[961,17,998,26,[1,"|>",0,[961,17,981,26,[1,"|>",0,[961,17,976,18,[9,[[961,19,964,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[965,19,975,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Baz -> \"Baz\"\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n"]]]]],[977,24,981,26,[0,[[977,24,977,48,[2,["Review","Test"],"runOnModules"]],[978,25,981,26,[7,[978,26,980,36,[1,"|>",0,[978,26,979,85,[1,"|>",0,[978,26,978,34,[2,[],"defaults"]],[979,32,979,85,[0,[[979,32,979,53,[2,[],"sortOnlyMatchingTypes"]],[979,54,979,85,[7,[979,55,979,84,[0,[[979,55,979,66,[2,[],"matchesName"]],[979,67,979,84,[6,[[979,69,979,72,[5,"A"]],[979,74,979,82,[5,"Custom"]]]]]]]]]]]]]]],[980,32,980,36,[2,[],"rule"]]]]]]]]]]],[982,24,998,26,[0,[[982,24,982,58,[2,["Review","Test"],"expectErrorsForModules"]],[983,25,998,26,[9,[[983,27,997,28,[6,[[983,29,983,32,[5,"B"]],[984,29,996,30,[9,[[984,31,995,4,[1,"|>",0,[984,31,984,44,[2,[],"unsortedError"]],[985,36,995,4,[0,[[985,36,985,57,[2,["Review","Test"],"whenFixed"]],[985,58,995,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[999,11,1044,26,[1,"<|",1,[999,11,999,53,[0,[[999,11,999,15,[2,[],"test"]],[999,16,999,53,[5,"with qualified names disambiguating"]]]]],[1000,13,1044,26,[18,[[[1000,14,1000,16,[1]]],[1001,17,1044,26,[1,"|>",0,[1001,17,1026,26,[1,"|>",0,[1001,17,1021,18,[9,[[1001,19,1004,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1005,19,1008,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1009,19,1020,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Baz -> \"Baz\"\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n"]]]]],[1022,24,1026,26,[0,[[1022,24,1022,48,[2,["Review","Test"],"runOnModules"]],[1023,25,1026,26,[7,[1023,26,1025,36,[1,"|>",0,[1023,26,1024,85,[1,"|>",0,[1023,26,1023,34,[2,[],"defaults"]],[1024,32,1024,85,[0,[[1024,32,1024,53,[2,[],"sortOnlyMatchingTypes"]],[1024,54,1024,85,[7,[1024,55,1024,84,[0,[[1024,55,1024,66,[2,[],"matchesName"]],[1024,67,1024,84,[6,[[1024,69,1024,72,[5,"A"]],[1024,74,1024,82,[5,"Custom"]]]]]]]]]]]]]]],[1025,32,1025,36,[2,[],"rule"]]]]]]]]]]],[1027,24,1044,26,[0,[[1027,24,1027,58,[2,["Review","Test"],"expectErrorsForModules"]],[1028,25,1044,26,[9,[[1028,27,1043,28,[6,[[1028,29,1028,32,[5,"C"]],[1029,29,1042,30,[9,[[1029,31,1041,4,[1,"|>",0,[1029,31,1029,44,[2,[],"unsortedError"]],[1030,36,1041,4,[0,[[1030,36,1030,57,[2,["Review","Test"],"whenFixed"]],[1030,58,1041,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1045,11,1090,26,[1,"<|",1,[1045,11,1045,47,[0,[[1045,11,1045,15,[2,[],"test"]],[1045,16,1045,47,[5,"with disambiguation by import"]]]]],[1046,13,1090,26,[18,[[[1046,14,1046,16,[1]]],[1047,17,1090,26,[1,"|>",0,[1047,17,1072,26,[1,"|>",0,[1047,17,1067,18,[9,[[1047,19,1050,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[1051,19,1054,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1055,19,1066,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[1068,24,1072,26,[0,[[1068,24,1068,48,[2,["Review","Test"],"runOnModules"]],[1069,25,1072,26,[7,[1069,26,1071,36,[1,"|>",0,[1069,26,1070,85,[1,"|>",0,[1069,26,1069,34,[2,[],"defaults"]],[1070,32,1070,85,[0,[[1070,32,1070,53,[2,[],"sortOnlyMatchingTypes"]],[1070,54,1070,85,[7,[1070,55,1070,84,[0,[[1070,55,1070,66,[2,[],"matchesName"]],[1070,67,1070,84,[6,[[1070,69,1070,72,[5,"B"]],[1070,74,1070,82,[5,"Custom"]]]]]]]]]]]]]]],[1071,32,1071,36,[2,[],"rule"]]]]]]]]]]],[1073,24,1090,26,[0,[[1073,24,1073,58,[2,["Review","Test"],"expectErrorsForModules"]],[1074,25,1090,26,[9,[[1074,27,1089,28,[6,[[1074,29,1074,32,[5,"C"]],[1075,29,1088,30,[9,[[1075,31,1087,4,[1,"|>",0,[1075,31,1075,44,[2,[],"unsortedError"]],[1076,36,1087,4,[0,[[1076,36,1076,57,[2,["Review","Test"],"whenFixed"]],[1076,58,1087,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1091,11,1134,26,[1,"<|",1,[1091,11,1091,33,[0,[[1091,11,1091,15,[2,[],"test"]],[1091,16,1091,33,[5,"with local name"]]]]],[1092,13,1134,26,[18,[[[1092,14,1092,16,[1]]],[1093,17,1134,26,[1,"|>",0,[1093,17,1115,26,[1,"|>",0,[1093,17,1110,18,[9,[[1093,19,1096,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1097,19,1109,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[1111,24,1115,26,[0,[[1111,24,1111,48,[2,["Review","Test"],"runOnModules"]],[1112,25,1115,26,[7,[1112,26,1114,36,[1,"|>",0,[1112,26,1113,85,[1,"|>",0,[1112,26,1112,34,[2,[],"defaults"]],[1113,32,1113,85,[0,[[1113,32,1113,53,[2,[],"sortOnlyMatchingTypes"]],[1113,54,1113,85,[7,[1113,55,1113,84,[0,[[1113,55,1113,66,[2,[],"matchesName"]],[1113,67,1113,84,[6,[[1113,69,1113,72,[5,"B"]],[1113,74,1113,82,[5,"Custom"]]]]]]]]]]]]]]],[1114,32,1114,36,[2,[],"rule"]]]]]]]]]]],[1116,24,1134,26,[0,[[1116,24,1116,58,[2,["Review","Test"],"expectErrorsForModules"]],[1117,25,1134,26,[9,[[1117,27,1133,28,[6,[[1117,29,1117,32,[5,"B"]],[1118,29,1132,30,[9,[[1118,31,1131,4,[1,"|>",0,[1118,31,1118,44,[2,[],"unsortedError"]],[1119,36,1131,4,[0,[[1119,36,1119,57,[2,["Review","Test"],"whenFixed"]],[1119,58,1131,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1135,11,1178,26,[1,"<|",1,[1135,11,1135,33,[0,[[1135,11,1135,15,[2,[],"test"]],[1135,16,1135,33,[5,"with sub module"]]]]],[1136,13,1178,26,[18,[[[1136,14,1136,16,[1]]],[1137,17,1178,26,[1,"|>",0,[1137,17,1159,26,[1,"|>",0,[1137,17,1154,18,[9,[[1137,19,1140,4,[5,"module A.C.Internal exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[1141,19,1153,4,[5,"module B exposing (..)\n\nimport A.C.Internal as X\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        X.Baz -> \"Baz\"\n        X.Foo -> \"Foo\"\n        X.Bar -> \"Bar\"\n"]]]]],[1155,24,1159,26,[0,[[1155,24,1155,48,[2,["Review","Test"],"runOnModules"]],[1156,25,1159,26,[7,[1156,26,1158,36,[1,"|>",0,[1156,26,1157,96,[1,"|>",0,[1156,26,1156,34,[2,[],"defaults"]],[1157,32,1157,96,[0,[[1157,32,1157,53,[2,[],"sortOnlyMatchingTypes"]],[1157,54,1157,96,[7,[1157,55,1157,95,[0,[[1157,55,1157,66,[2,[],"matchesName"]],[1157,67,1157,95,[6,[[1157,69,1157,83,[5,"A.C.Internal"]],[1157,85,1157,93,[5,"Custom"]]]]]]]]]]]]]]],[1158,32,1158,36,[2,[],"rule"]]]]]]]]]]],[1160,24,1178,26,[0,[[1160,24,1160,58,[2,["Review","Test"],"expectErrorsForModules"]],[1161,25,1178,26,[9,[[1161,27,1177,28,[6,[[1161,29,1161,32,[5,"B"]],[1162,29,1176,30,[9,[[1162,31,1175,4,[1,"|>",0,[1162,31,1162,44,[2,[],"unsortedError"]],[1163,36,1175,4,[0,[[1163,36,1163,57,[2,["Review","Test"],"whenFixed"]],[1163,58,1175,4,[5,"module B exposing (..)\n\nimport A.C.Internal as X\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        X.Baz -> \"Baz\"\n        X.Bar -> \"Bar\"\n        X.Foo -> \"Foo\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]],[1179,11,1225,26,[1,"<|",1,[1179,11,1179,34,[0,[[1179,11,1179,15,[2,[],"test"]],[1179,16,1179,34,[5,"with import name"]]]]],[1180,13,1225,26,[18,[[[1180,14,1180,16,[1]]],[1181,17,1225,26,[1,"|>",0,[1181,17,1209,26,[1,"|>",0,[1181,17,1193,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Bool -> Custom -> String\ntoString b custom =\n    case (b, custom) of\n        (False, Bar) -> \"Bar\"\n        (False, Foo) -> \"Foo\"\n        (True, Foo) -> \"Foo\"\n        (False, Baz) -> \"Baz\"\n        _ -> \"Rest\"\n"]],[1194,24,1209,26,[0,[[1194,24,1194,39,[2,["Review","Test"],"run"]],[1195,25,1209,26,[7,[1195,26,1208,36,[1,"|>",0,[1195,26,1207,34,[1,"|>",0,[1195,26,1195,34,[2,[],"defaults"]],[1196,32,1207,34,[0,[[1196,32,1196,53,[2,[],"sortOnlyMatchingTypes"]],[1197,33,1207,34,[7,[1197,34,1206,50,[18,[[[1197,35,1197,36,[11,"m"]],[1197,37,1197,38,[11,"t"]]],[1198,37,1206,50,[17,[[1198,42,1198,50,[6,[[1198,44,1198,45,[2,[],"m"]],[1198,47,1198,48,[2,[],"t"]]]]],[[[1199,41,1199,58,[7,[[1199,43,1199,46,[3,"A"]],[1199,48,1199,56,[3,"Custom"]]]]],[1200,45,1200,49,[2,[],"True"]]],[[1202,41,1202,61,[7,[[1202,43,1202,51,[3,"Basics"]],[1202,53,1202,59,[3,"Bool"]]]]],[1203,45,1203,49,[2,[],"True"]]],[[1205,41,1205,42,[0]],[1206,45,1206,50,[2,[],"False"]]]]]]]]]]]]]]]]],[1208,32,1208,36,[2,[],"rule"]]]]]]]]]]],[1210,24,1225,26,[0,[[1210,24,1210,48,[2,["Review","Test"],"expectErrors"]],[1211,25,1225,26,[9,[[1211,27,1224,4,[1,"|>",0,[1211,27,1211,40,[2,[],"unsortedError"]],[1212,32,1224,4,[0,[[1212,32,1212,53,[2,["Review","Test"],"whenFixed"]],[1212,54,1224,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Bool -> Custom -> String\ntoString b custom =\n    case (b, custom) of\n        (True, Foo) -> \"Foo\"\n        (False, Foo) -> \"Foo\"\n        (False, Bar) -> \"Bar\"\n        (False, Baz) -> \"Baz\"\n        _ -> \"Rest\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1229,1,1372,10,[0,[[0],[1,[1229,1,1229,24,[[1229,1,1229,17,"failsSubpatterns"],[1229,20,1229,24,[1,[1229,20,1229,24,[[],"Test"]],[]]]]]],[1230,1,1372,10,[[1230,1,1230,17,"failsSubpatterns"],[],[1231,5,1372,10,[0,[[1231,5,1231,13,[2,[],"describe"]],[1231,14,1231,32,[5,"with subpatterns"]],[1232,9,1372,10,[9,[[1232,11,1265,26,[1,"<|",1,[1232,11,1232,43,[0,[[1232,11,1232,15,[2,[],"test"]],[1232,16,1232,43,[5,"not sorted at first level"]]]]],[1233,13,1265,26,[18,[[[1233,14,1233,16,[1]]],[1234,17,1265,26,[1,"|>",0,[1234,17,1250,26,[1,"|>",0,[1234,17,1245,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Nothing -> \"Nothing\"\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n"]],[1246,24,1250,26,[0,[[1246,24,1246,39,[2,["Review","Test"],"run"]],[1247,25,1250,26,[7,[1247,26,1249,36,[1,"|>",0,[1247,26,1248,71,[1,"|>",0,[1247,26,1247,34,[2,[],"defaults"]],[1248,32,1248,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[1249,32,1249,36,[2,[],"rule"]]]]]]]]]]],[1251,24,1265,26,[0,[[1251,24,1251,48,[2,["Review","Test"],"expectErrors"]],[1252,25,1265,26,[9,[[1252,27,1264,4,[1,"|>",0,[1252,27,1252,40,[2,[],"unsortedError"]],[1253,32,1264,4,[0,[[1253,32,1253,53,[2,["Review","Test"],"whenFixed"]],[1253,54,1264,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]]]]]]]]]]]]]]]]]]]],[1266,11,1299,26,[1,"<|",1,[1266,11,1266,43,[0,[[1266,11,1266,15,[2,[],"test"]],[1266,16,1266,43,[5,"not sorted at lower level"]]]]],[1267,13,1299,26,[18,[[[1267,14,1267,16,[1]]],[1268,17,1299,26,[1,"|>",0,[1268,17,1284,26,[1,"|>",0,[1268,17,1279,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Bar -> \"Bar\"\n        Just Foo -> \"Foo\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]],[1280,24,1284,26,[0,[[1280,24,1280,39,[2,["Review","Test"],"run"]],[1281,25,1284,26,[7,[1281,26,1283,36,[1,"|>",0,[1281,26,1282,71,[1,"|>",0,[1281,26,1281,34,[2,[],"defaults"]],[1282,32,1282,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[1283,32,1283,36,[2,[],"rule"]]]]]]]]]]],[1285,24,1299,26,[0,[[1285,24,1285,48,[2,["Review","Test"],"expectErrors"]],[1286,25,1299,26,[9,[[1286,27,1298,4,[1,"|>",0,[1286,27,1286,40,[2,[],"unsortedError"]],[1287,32,1298,4,[0,[[1287,32,1287,53,[2,["Review","Test"],"whenFixed"]],[1287,54,1298,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]]]]]]]]]]]]]]]]]]]],[1300,11,1335,26,[1,"<|",1,[1300,11,1300,44,[0,[[1300,11,1300,15,[2,[],"test"]],[1300,16,1300,44,[5,"with non-sortable patterns"]]]]],[1301,13,1335,26,[18,[[[1301,14,1301,16,[1]]],[1302,17,1335,26,[1,"|>",0,[1302,17,1319,26,[1,"|>",0,[1302,17,1314,4,[5,"module A exposing (..)\n\ntype Container = Container Custom Int Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container Bar 2 1 -> \"Bar\"\n        Container Foo 1 2 -> \"Foo\"\n        Container Baz 2 2 -> \"Baz\"\n"]],[1315,24,1319,26,[0,[[1315,24,1315,39,[2,["Review","Test"],"run"]],[1316,25,1319,26,[7,[1316,26,1318,36,[1,"|>",0,[1316,26,1317,49,[1,"|>",0,[1316,26,1316,34,[2,[],"defaults"]],[1317,32,1317,49,[2,[],"doNotSortLiterals"]]]],[1318,32,1318,36,[2,[],"rule"]]]]]]]]]]],[1320,24,1335,26,[0,[[1320,24,1320,48,[2,["Review","Test"],"expectErrors"]],[1321,25,1335,26,[9,[[1321,27,1334,4,[1,"|>",0,[1321,27,1321,40,[2,[],"unsortedError"]],[1322,32,1334,4,[0,[[1322,32,1322,53,[2,["Review","Test"],"whenFixed"]],[1322,54,1334,4,[5,"module A exposing (..)\n\ntype Container = Container Custom Int Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container Foo 1 2 -> \"Foo\"\n        Container Bar 2 1 -> \"Bar\"\n        Container Baz 2 2 -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[1336,11,1371,26,[1,"<|",1,[1336,11,1336,50,[0,[[1336,11,1336,15,[2,[],"test"]],[1336,16,1336,50,[5,"sorts past non-sortable patterns"]]]]],[1337,13,1371,26,[18,[[[1337,14,1337,16,[1]]],[1338,17,1371,26,[1,"|>",0,[1338,17,1355,26,[1,"|>",0,[1338,17,1350,4,[5,"module A exposing (..)\n\ntype Container = Container Int {field : Bool} Custom Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container 1 {field} Baz 1 -> \"Baz\"\n        Container 1 {field} Foo 1 -> \"Foo\"\n        Container 1 {field} Bar 1 -> \"Bar\"\n"]],[1351,24,1355,26,[0,[[1351,24,1351,39,[2,["Review","Test"],"run"]],[1352,25,1355,26,[7,[1352,26,1354,36,[1,"|>",0,[1352,26,1353,49,[1,"|>",0,[1352,26,1352,34,[2,[],"defaults"]],[1353,32,1353,49,[2,[],"doNotSortLiterals"]]]],[1354,32,1354,36,[2,[],"rule"]]]]]]]]]]],[1356,24,1371,26,[0,[[1356,24,1356,48,[2,["Review","Test"],"expectErrors"]],[1357,25,1371,26,[9,[[1357,27,1370,4,[1,"|>",0,[1357,27,1357,40,[2,[],"unsortedError"]],[1358,32,1370,4,[0,[[1358,32,1358,53,[2,["Review","Test"],"whenFixed"]],[1358,54,1370,4,[5,"module A exposing (..)\n\ntype Container = Container Int {field : Bool} Custom Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container 1 {field} Foo 1 -> \"Foo\"\n        Container 1 {field} Bar 1 -> \"Bar\"\n        Container 1 {field} Baz 1 -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1375,1,1436,10,[0,[[0],[1,[1375,1,1375,32,[[1375,1,1375,25,"failsTransparentPatterns"],[1375,28,1375,32,[1,[1375,28,1375,32,[[],"Test"]],[]]]]]],[1376,1,1436,10,[[1376,1,1376,25,"failsTransparentPatterns"],[],[1377,5,1436,10,[0,[[1377,5,1377,13,[2,[],"describe"]],[1377,14,1377,41,[5,"with transparent patterns"]],[1378,9,1436,10,[9,[[1378,11,1406,26,[1,"<|",1,[1378,11,1378,59,[0,[[1378,11,1378,15,[2,[],"test"]],[1378,16,1378,59,[5,"is not sorted with parenthesized patterns"]]]]],[1379,13,1406,26,[18,[[[1379,14,1379,16,[1]]],[1380,17,1406,26,[1,"|>",0,[1380,17,1391,55,[1,"|>",0,[1380,17,1390,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        (Baz) -> \"Bar\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]],[1391,24,1391,55,[0,[[1391,24,1391,39,[2,["Review","Test"],"run"]],[1391,40,1391,55,[7,[1391,41,1391,54,[0,[[1391,41,1391,45,[2,[],"rule"]],[1391,46,1391,54,[2,[],"defaults"]]]]]]]]]]]],[1392,24,1406,26,[0,[[1392,24,1392,48,[2,["Review","Test"],"expectErrors"]],[1393,25,1406,26,[9,[[1393,27,1405,4,[1,"|>",0,[1393,27,1393,40,[2,[],"unsortedError"]],[1394,32,1405,4,[0,[[1394,32,1394,53,[2,["Review","Test"],"whenFixed"]],[1395,33,1405,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        (Baz) -> \"Bar\"\n"]]]]]]]]]]]]]]]]]]]],[1407,11,1435,26,[1,"<|",1,[1407,11,1407,47,[0,[[1407,11,1407,15,[2,[],"test"]],[1407,16,1407,47,[5,"is not sorted with as pattern"]]]]],[1408,13,1435,26,[18,[[[1408,14,1408,16,[1]]],[1409,17,1435,26,[1,"|>",0,[1409,17,1420,55,[1,"|>",0,[1409,17,1419,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        (Bar as b) -> \"Bar\"\n"]],[1420,24,1420,55,[0,[[1420,24,1420,39,[2,["Review","Test"],"run"]],[1420,40,1420,55,[7,[1420,41,1420,54,[0,[[1420,41,1420,45,[2,[],"rule"]],[1420,46,1420,54,[2,[],"defaults"]]]]]]]]]]]],[1421,24,1435,26,[0,[[1421,24,1421,48,[2,["Review","Test"],"expectErrors"]],[1422,25,1435,26,[9,[[1422,27,1434,4,[1,"|>",0,[1422,27,1422,40,[2,[],"unsortedError"]],[1423,32,1434,4,[0,[[1423,32,1423,53,[2,["Review","Test"],"whenFixed"]],[1424,33,1434,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        (Bar as b) -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1439,1,1667,10,[0,[[0],[1,[1439,1,1439,19,[[1439,1,1439,12,"failsTuples"],[1439,15,1439,19,[1,[1439,15,1439,19,[[],"Test"]],[]]]]]],[1440,1,1667,10,[[1440,1,1440,12,"failsTuples"],[],[1441,5,1667,10,[0,[[1441,5,1441,13,[2,[],"describe"]],[1441,14,1441,27,[5,"with tuples"]],[1442,9,1667,10,[9,[[1442,11,1486,26,[1,"<|",1,[1442,11,1442,46,[0,[[1442,11,1442,15,[2,[],"test"]],[1442,16,1442,46,[5,"is not sorted at first level"]]]]],[1443,13,1486,26,[18,[[[1443,14,1443,16,[1]]],[1444,17,1486,26,[1,"|>",0,[1444,17,1463,55,[1,"|>",0,[1444,17,1462,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]],[1463,24,1463,55,[0,[[1463,24,1463,39,[2,["Review","Test"],"run"]],[1463,40,1463,55,[7,[1463,41,1463,54,[0,[[1463,41,1463,45,[2,[],"rule"]],[1463,46,1463,54,[2,[],"defaults"]]]]]]]]]]]],[1464,24,1486,26,[0,[[1464,24,1464,48,[2,["Review","Test"],"expectErrors"]],[1465,25,1486,26,[9,[[1465,27,1485,4,[1,"|>",0,[1465,27,1465,40,[2,[],"unsortedError"]],[1466,32,1485,4,[0,[[1466,32,1466,53,[2,["Review","Test"],"whenFixed"]],[1467,33,1485,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]]]]]]]]]]]]]]]]]]]],[1487,11,1531,26,[1,"<|",1,[1487,11,1487,47,[0,[[1487,11,1487,15,[2,[],"test"]],[1487,16,1487,47,[5,"is not sorted at second level"]]]]],[1488,13,1531,26,[18,[[[1488,14,1488,16,[1]]],[1489,17,1531,26,[1,"|>",0,[1489,17,1508,55,[1,"|>",0,[1489,17,1507,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, C) -> \"FooC\"\n        (Foo, B) -> \"FooB\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]],[1508,24,1508,55,[0,[[1508,24,1508,39,[2,["Review","Test"],"run"]],[1508,40,1508,55,[7,[1508,41,1508,54,[0,[[1508,41,1508,45,[2,[],"rule"]],[1508,46,1508,54,[2,[],"defaults"]]]]]]]]]]]],[1509,24,1531,26,[0,[[1509,24,1509,48,[2,["Review","Test"],"expectErrors"]],[1510,25,1531,26,[9,[[1510,27,1530,4,[1,"|>",0,[1510,27,1510,40,[2,[],"unsortedError"]],[1511,32,1530,4,[0,[[1511,32,1511,53,[2,["Review","Test"],"whenFixed"]],[1512,33,1530,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]]]]]]]]]]]]]]]]]]]],[1532,11,1578,26,[1,"<|",1,[1532,11,1532,61,[0,[[1532,11,1532,15,[2,[],"test"]],[1532,16,1532,61,[5,"is not sorted with threeples at third level"]]]]],[1533,13,1578,26,[18,[[[1533,14,1533,16,[1]]],[1534,17,1578,26,[1,"|>",0,[1534,17,1554,55,[1,"|>",0,[1534,17,1553,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case (custom1, custom2, custom3) of\n        (Foo, A, Foo) -> \"FooAFoo\"\n        (Foo, A, Bar) -> \"FooABar\"\n        (Foo, A, Baz) -> \"FooABaz\"\n        (Foo, B, Foo) -> \"FooBFoo\"\n        (Foo, B, Baz) -> \"FooBBaz\"\n        (Foo, B, Bar) -> \"FooBBar\"\n        (Foo, C, Foo) -> \"FooCFoo\"\n        (Foo, C, Bar) -> \"FooCBar\"\n        (Foo, C, Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[1554,24,1554,55,[0,[[1554,24,1554,39,[2,["Review","Test"],"run"]],[1554,40,1554,55,[7,[1554,41,1554,54,[0,[[1554,41,1554,45,[2,[],"rule"]],[1554,46,1554,54,[2,[],"defaults"]]]]]]]]]]]],[1555,24,1578,26,[0,[[1555,24,1555,48,[2,["Review","Test"],"expectErrors"]],[1556,25,1578,26,[9,[[1556,27,1577,4,[1,"|>",0,[1556,27,1556,40,[2,[],"unsortedError"]],[1557,32,1577,4,[0,[[1557,32,1557,53,[2,["Review","Test"],"whenFixed"]],[1558,33,1577,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case (custom1, custom2, custom3) of\n        (Foo, A, Foo) -> \"FooAFoo\"\n        (Foo, A, Bar) -> \"FooABar\"\n        (Foo, A, Baz) -> \"FooABaz\"\n        (Foo, B, Foo) -> \"FooBFoo\"\n        (Foo, B, Bar) -> \"FooBBar\"\n        (Foo, B, Baz) -> \"FooBBaz\"\n        (Foo, C, Foo) -> \"FooCFoo\"\n        (Foo, C, Bar) -> \"FooCBar\"\n        (Foo, C, Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1579,11,1625,26,[1,"<|",1,[1579,11,1579,50,[0,[[1579,11,1579,15,[2,[],"test"]],[1579,16,1579,50,[5,"is not sorted with nested tuples"]]]]],[1580,13,1625,26,[18,[[[1580,14,1580,16,[1]]],[1581,17,1625,26,[1,"|>",0,[1581,17,1601,55,[1,"|>",0,[1581,17,1600,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, custom2), custom3) of\n        ((Foo, A), Foo) -> \"FooAFoo\"\n        ((Foo, A), Bar) -> \"FooABar\"\n        ((Foo, A), Baz) -> \"FooABaz\"\n        ((Foo, B), Foo) -> \"FooBFoo\"\n        ((Foo, C), Foo) -> \"FooCFoo\"\n        ((Foo, B), Bar) -> \"FooBBar\"\n        ((Foo, B), Baz) -> \"FooBBaz\"\n        ((Foo, C), Bar) -> \"FooCBar\"\n        ((Foo, C), Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[1601,24,1601,55,[0,[[1601,24,1601,39,[2,["Review","Test"],"run"]],[1601,40,1601,55,[7,[1601,41,1601,54,[0,[[1601,41,1601,45,[2,[],"rule"]],[1601,46,1601,54,[2,[],"defaults"]]]]]]]]]]]],[1602,24,1625,26,[0,[[1602,24,1602,48,[2,["Review","Test"],"expectErrors"]],[1603,25,1625,26,[9,[[1603,27,1624,4,[1,"|>",0,[1603,27,1603,40,[2,[],"unsortedError"]],[1604,32,1624,4,[0,[[1604,32,1604,53,[2,["Review","Test"],"whenFixed"]],[1605,33,1624,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, custom2), custom3) of\n        ((Foo, A), Foo) -> \"FooAFoo\"\n        ((Foo, A), Bar) -> \"FooABar\"\n        ((Foo, A), Baz) -> \"FooABaz\"\n        ((Foo, B), Foo) -> \"FooBFoo\"\n        ((Foo, B), Bar) -> \"FooBBar\"\n        ((Foo, B), Baz) -> \"FooBBaz\"\n        ((Foo, C), Foo) -> \"FooCFoo\"\n        ((Foo, C), Bar) -> \"FooCBar\"\n        ((Foo, C), Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1626,11,1666,26,[1,"<|",1,[1626,11,1626,57,[0,[[1626,11,1626,15,[2,[],"test"]],[1626,16,1626,57,[5,"is not sorted with deeply nested tuples"]]]]],[1627,13,1666,26,[18,[[[1627,14,1627,16,[1]]],[1628,17,1666,26,[1,"|>",0,[1628,17,1645,55,[1,"|>",0,[1628,17,1644,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, (custom2, custom2)), custom3, (custom2, custom2)) of\n        ((Foo, (A, A)), Foo, (A, A)) -> \"1\"\n        ((Foo, (A, B)), Foo, (A, A)) -> \"2\"\n        ((Foo, (B, A)), Foo, (A, A)) -> \"4\"\n        ((Foo, (A, C)), Foo, (A, A)) -> \"3\"\n        ((Foo, (B, A)), Foo, (A, C)) -> \"5\"\n        ((Foo, (B, A)), Foo, (B, A)) -> \"6\"\n        _ -> \"Too many...\"\n"]],[1645,24,1645,55,[0,[[1645,24,1645,39,[2,["Review","Test"],"run"]],[1645,40,1645,55,[7,[1645,41,1645,54,[0,[[1645,41,1645,45,[2,[],"rule"]],[1645,46,1645,54,[2,[],"defaults"]]]]]]]]]]]],[1646,24,1666,26,[0,[[1646,24,1646,48,[2,["Review","Test"],"expectErrors"]],[1647,25,1666,26,[9,[[1647,27,1665,4,[1,"|>",0,[1647,27,1647,40,[2,[],"unsortedError"]],[1648,32,1665,4,[0,[[1648,32,1648,53,[2,["Review","Test"],"whenFixed"]],[1649,33,1665,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, (custom2, custom2)), custom3, (custom2, custom2)) of\n        ((Foo, (A, A)), Foo, (A, A)) -> \"1\"\n        ((Foo, (A, B)), Foo, (A, A)) -> \"2\"\n        ((Foo, (A, C)), Foo, (A, A)) -> \"3\"\n        ((Foo, (B, A)), Foo, (A, A)) -> \"4\"\n        ((Foo, (B, A)), Foo, (A, C)) -> \"5\"\n        ((Foo, (B, A)), Foo, (B, A)) -> \"6\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1670,1,1721,10,[0,[[0],[1,[1670,1,1670,34,[[1670,1,1670,27,"failsTypesFromDependencies"],[1670,30,1670,34,[1,[1670,30,1670,34,[[],"Test"]],[]]]]]],[1671,1,1721,10,[[1671,1,1671,27,"failsTypesFromDependencies"],[],[1672,5,1721,10,[0,[[1672,5,1672,13,[2,[],"describe"]],[1672,14,1672,44,[5,"with types from dependencies"]],[1673,9,1721,10,[9,[[1673,11,1694,26,[1,"<|",1,[1673,11,1673,64,[0,[[1673,11,1673,15,[2,[],"test"]],[1673,16,1673,64,[5,"in alphabetical order with declaration sorting"]]]]],[1674,13,1694,26,[18,[[[1674,14,1674,16,[1]]],[1675,17,1694,26,[1,"|>",0,[1675,17,1683,55,[1,"|>",0,[1675,17,1682,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n"]],[1683,24,1683,55,[0,[[1683,24,1683,39,[2,["Review","Test"],"run"]],[1683,40,1683,55,[7,[1683,41,1683,54,[0,[[1683,41,1683,45,[2,[],"rule"]],[1683,46,1683,54,[2,[],"defaults"]]]]]]]]]]]],[1684,24,1694,26,[0,[[1684,24,1684,48,[2,["Review","Test"],"expectErrors"]],[1685,25,1694,26,[9,[[1685,27,1693,4,[1,"|>",0,[1685,27,1685,40,[2,[],"unsortedError"]],[1686,32,1693,4,[0,[[1686,32,1686,53,[2,["Review","Test"],"whenFixed"]],[1686,54,1693,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]]]]]]]]]]]]]]]]]]]],[1695,11,1720,26,[1,"<|",1,[1695,11,1695,64,[0,[[1695,11,1695,15,[2,[],"test"]],[1695,16,1695,64,[5,"in declaration order with alphabetical sorting"]]]]],[1696,13,1720,26,[18,[[[1696,14,1696,16,[1]]],[1697,17,1720,26,[1,"|>",0,[1697,17,1709,26,[1,"|>",0,[1697,17,1704,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]],[1705,24,1709,26,[0,[[1705,24,1705,39,[2,["Review","Test"],"run"]],[1706,25,1709,26,[7,[1706,26,1708,36,[1,"|>",0,[1706,26,1707,71,[1,"|>",0,[1706,26,1706,34,[2,[],"defaults"]],[1707,32,1707,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[1708,32,1708,36,[2,[],"rule"]]]]]]]]]]],[1710,24,1720,26,[0,[[1710,24,1710,48,[2,["Review","Test"],"expectErrors"]],[1711,25,1720,26,[9,[[1711,27,1719,4,[1,"|>",0,[1711,27,1711,40,[2,[],"unsortedError"]],[1712,32,1719,4,[0,[[1712,32,1712,53,[2,["Review","Test"],"whenFixed"]],[1712,54,1719,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1724,1,1783,10,[0,[[0],[1,[1724,1,1724,19,[[1724,1,1724,12,"failsUncons"],[1724,15,1724,19,[1,[1724,15,1724,19,[[],"Test"]],[]]]]]],[1725,1,1783,10,[[1725,1,1725,12,"failsUncons"],[],[1726,5,1783,10,[0,[[1726,5,1726,13,[2,[],"describe"]],[1726,14,1726,27,[5,"with uncons"]],[1727,9,1783,10,[9,[[1727,11,1754,26,[1,"<|",1,[1727,11,1727,31,[0,[[1727,11,1727,15,[2,[],"test"]],[1727,16,1727,31,[5,"is not sorted"]]]]],[1728,13,1754,26,[18,[[[1728,14,1728,16,[1]]],[1729,17,1754,26,[1,"|>",0,[1729,17,1740,55,[1,"|>",0,[1729,17,1739,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        Foo :: _ -> \"Foo\"\n        Baz :: _ -> \"Baz\"\n        Bar :: _ -> \"Bar\"\n"]],[1740,24,1740,55,[0,[[1740,24,1740,39,[2,["Review","Test"],"run"]],[1740,40,1740,55,[7,[1740,41,1740,54,[0,[[1740,41,1740,45,[2,[],"rule"]],[1740,46,1740,54,[2,[],"defaults"]]]]]]]]]]]],[1741,24,1754,26,[0,[[1741,24,1741,48,[2,["Review","Test"],"expectErrors"]],[1742,25,1754,26,[9,[[1742,27,1753,4,[1,"|>",0,[1742,27,1742,40,[2,[],"unsortedError"]],[1743,32,1753,4,[0,[[1743,32,1743,53,[2,["Review","Test"],"whenFixed"]],[1743,54,1753,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        Foo :: _ -> \"Foo\"\n        Bar :: _ -> \"Bar\"\n        Baz :: _ -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[1755,11,1782,26,[1,"<|",1,[1755,11,1755,48,[0,[[1755,11,1755,15,[2,[],"test"]],[1755,16,1755,48,[5,"is not sorted including tuples"]]]]],[1756,13,1782,26,[18,[[[1756,14,1756,16,[1]]],[1757,17,1782,26,[1,"|>",0,[1757,17,1768,55,[1,"|>",0,[1757,17,1767,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List (Custom, Int) -> String\ntoString xs =\n    case xs of\n        (Bar, 1) :: (Bar, 2) :: _ -> \"Bar\"\n        (Foo, 1) :: (Foo, 2) :: _ -> \"Foo\"\n        (Baz, 1) :: (Baz, 2) :: _ -> \"Baz\"\n"]],[1768,24,1768,55,[0,[[1768,24,1768,39,[2,["Review","Test"],"run"]],[1768,40,1768,55,[7,[1768,41,1768,54,[0,[[1768,41,1768,45,[2,[],"rule"]],[1768,46,1768,54,[2,[],"defaults"]]]]]]]]]]]],[1769,24,1782,26,[0,[[1769,24,1769,48,[2,["Review","Test"],"expectErrors"]],[1770,25,1782,26,[9,[[1770,27,1781,4,[1,"|>",0,[1770,27,1770,40,[2,[],"unsortedError"]],[1771,32,1781,4,[0,[[1771,32,1771,53,[2,["Review","Test"],"whenFixed"]],[1771,54,1781,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List (Custom, Int) -> String\ntoString xs =\n    case xs of\n        (Foo, 1) :: (Foo, 2) :: _ -> \"Foo\"\n        (Bar, 1) :: (Bar, 2) :: _ -> \"Bar\"\n        (Baz, 1) :: (Baz, 2) :: _ -> \"Baz\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1786,1,1947,10,[0,[[0],[1,[1786,1,1786,22,[[1786,1,1786,15,"failsWildcards"],[1786,18,1786,22,[1,[1786,18,1786,22,[[],"Test"]],[]]]]]],[1787,1,1947,10,[[1787,1,1787,15,"failsWildcards"],[],[1788,5,1947,10,[0,[[1788,5,1788,13,[2,[],"describe"]],[1788,14,1788,30,[5,"with wildcards"]],[1789,9,1947,10,[9,[[1789,11,1817,26,[1,"<|",1,[1789,11,1789,55,[0,[[1789,11,1789,15,[2,[],"test"]],[1789,16,1789,55,[5,"is not sorted with all pattern at end"]]]]],[1790,13,1817,26,[18,[[[1790,14,1790,16,[1]]],[1791,17,1817,26,[1,"|>",0,[1791,17,1802,55,[1,"|>",0,[1791,17,1801,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        _ -> \"Bar\"\n"]],[1802,24,1802,55,[0,[[1802,24,1802,39,[2,["Review","Test"],"run"]],[1802,40,1802,55,[7,[1802,41,1802,54,[0,[[1802,41,1802,45,[2,[],"rule"]],[1802,46,1802,54,[2,[],"defaults"]]]]]]]]]]]],[1803,24,1817,26,[0,[[1803,24,1803,48,[2,["Review","Test"],"expectErrors"]],[1804,25,1817,26,[9,[[1804,27,1816,4,[1,"|>",0,[1804,27,1804,40,[2,[],"unsortedError"]],[1805,32,1816,4,[0,[[1805,32,1805,53,[2,["Review","Test"],"whenFixed"]],[1806,33,1816,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        _ -> \"Bar\"\n"]]]]]]]]]]]]]]]]]]]],[1818,11,1846,26,[1,"<|",1,[1818,11,1818,55,[0,[[1818,11,1818,15,[2,[],"test"]],[1818,16,1818,55,[5,"is not sorted with var pattern at end"]]]]],[1819,13,1846,26,[18,[[[1819,14,1819,16,[1]]],[1820,17,1846,26,[1,"|>",0,[1820,17,1831,55,[1,"|>",0,[1820,17,1830,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        bar -> \"Bar\"\n"]],[1831,24,1831,55,[0,[[1831,24,1831,39,[2,["Review","Test"],"run"]],[1831,40,1831,55,[7,[1831,41,1831,54,[0,[[1831,41,1831,45,[2,[],"rule"]],[1831,46,1831,54,[2,[],"defaults"]]]]]]]]]]]],[1832,24,1846,26,[0,[[1832,24,1832,48,[2,["Review","Test"],"expectErrors"]],[1833,25,1846,26,[9,[[1833,27,1845,4,[1,"|>",0,[1833,27,1833,40,[2,[],"unsortedError"]],[1834,32,1845,4,[0,[[1834,32,1834,53,[2,["Review","Test"],"whenFixed"]],[1835,33,1845,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        bar -> \"Bar\"\n"]]]]]]]]]]]]]]]]]]]],[1847,11,1882,26,[1,"<|",1,[1847,11,1847,65,[0,[[1847,11,1847,15,[2,[],"test"]],[1847,16,1847,65,[5,"sorts past wildcards where possible with tuples"]]]]],[1848,13,1882,26,[18,[[[1848,14,1848,16,[1]]],[1849,17,1882,26,[1,"|>",0,[1849,17,1864,55,[1,"|>",0,[1849,17,1863,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (_, B) -> \"B\"\n        (_, A) -> \"A\"\n        (Bar, _) -> \"BarNotBOrA\"\n        (Foo, _) -> \"FooNotBOrA\"\n        _ -> \"Too many...\"\n"]],[1864,24,1864,55,[0,[[1864,24,1864,39,[2,["Review","Test"],"run"]],[1864,40,1864,55,[7,[1864,41,1864,54,[0,[[1864,41,1864,45,[2,[],"rule"]],[1864,46,1864,54,[2,[],"defaults"]]]]]]]]]]]],[1865,24,1882,26,[0,[[1865,24,1865,48,[2,["Review","Test"],"expectErrors"]],[1866,25,1882,26,[9,[[1866,27,1881,4,[1,"|>",0,[1866,27,1866,40,[2,[],"unsortedError"]],[1867,32,1881,4,[0,[[1867,32,1867,53,[2,["Review","Test"],"whenFixed"]],[1867,54,1881,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (_, A) -> \"A\"\n        (_, B) -> \"B\"\n        (Foo, _) -> \"FooNotBOrA\"\n        (Bar, _) -> \"BarNotBOrA\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1883,11,1914,26,[1,"<|",1,[1883,11,1883,64,[0,[[1883,11,1883,15,[2,[],"test"]],[1883,16,1883,64,[5,"sorts past wildcards where possible with lists"]]]]],[1884,13,1914,26,[18,[[[1884,14,1884,16,[1]]],[1885,17,1914,26,[1,"|>",0,[1885,17,1898,55,[1,"|>",0,[1885,17,1897,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        [_, Bar] -> \"_Bar\"\n        [_, Foo] -> \"_Foo\"\n        [Bar, _] -> \"Bar_\"\n        [Foo, _] -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[1898,24,1898,55,[0,[[1898,24,1898,39,[2,["Review","Test"],"run"]],[1898,40,1898,55,[7,[1898,41,1898,54,[0,[[1898,41,1898,45,[2,[],"rule"]],[1898,46,1898,54,[2,[],"defaults"]]]]]]]]]]]],[1899,24,1914,26,[0,[[1899,24,1899,48,[2,["Review","Test"],"expectErrors"]],[1900,25,1914,26,[9,[[1900,27,1913,4,[1,"|>",0,[1900,27,1900,40,[2,[],"unsortedError"]],[1901,32,1913,4,[0,[[1901,32,1901,53,[2,["Review","Test"],"whenFixed"]],[1901,54,1913,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        [_, Foo] -> \"_Foo\"\n        [_, Bar] -> \"_Bar\"\n        [Foo, _] -> \"Foo_\"\n        [Bar, _] -> \"Bar_\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]],[1915,11,1946,26,[1,"<|",1,[1915,11,1915,65,[0,[[1915,11,1915,15,[2,[],"test"]],[1915,16,1915,65,[5,"sorts past wildcards where possible with uncons"]]]]],[1916,13,1946,26,[18,[[[1916,14,1916,16,[1]]],[1917,17,1946,26,[1,"|>",0,[1917,17,1930,55,[1,"|>",0,[1917,17,1929,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        _ :: Bar :: _ -> \"_Bar_\"\n        _ :: Foo :: _ -> \"_Foo_\"\n        Bar :: _ -> \"Bar_\"\n        Foo :: _ -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[1930,24,1930,55,[0,[[1930,24,1930,39,[2,["Review","Test"],"run"]],[1930,40,1930,55,[7,[1930,41,1930,54,[0,[[1930,41,1930,45,[2,[],"rule"]],[1930,46,1930,54,[2,[],"defaults"]]]]]]]]]]]],[1931,24,1946,26,[0,[[1931,24,1931,48,[2,["Review","Test"],"expectErrors"]],[1932,25,1946,26,[9,[[1932,27,1945,4,[1,"|>",0,[1932,27,1932,40,[2,[],"unsortedError"]],[1933,32,1945,4,[0,[[1933,32,1933,53,[2,["Review","Test"],"whenFixed"]],[1933,54,1945,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        _ :: Foo :: _ -> \"_Foo_\"\n        _ :: Bar :: _ -> \"_Bar_\"\n        Foo :: _ -> \"Foo_\"\n        Bar :: _ -> \"Bar_\"\n        _ -> \"Too many...\"\n"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[1950,1,2122,10,[0,[[0],[1,[1950,1,1950,21,[[1950,1,1950,14,"fixesProperly"],[1950,17,1950,21,[1,[1950,17,1950,21,[[],"Test"]],[]]]]]],[1951,1,2122,10,[[1951,1,1951,14,"fixesProperly"],[],[1952,5,2122,10,[0,[[1952,5,1952,13,[2,[],"describe"]],[1952,14,1952,31,[5,"automatic fixes"]],[1953,9,2122,10,[9,[[1953,11,1998,26,[1,"<|",1,[1953,11,1953,35,[0,[[1953,11,1953,15,[2,[],"test"]],[1953,16,1953,35,[5,"preserve comments"]]]]],[1954,13,1998,26,[18,[[[1954,14,1954,16,[1]]],[1955,17,1998,26,[1,"|>",0,[1955,17,1975,55,[1,"|>",0,[1955,17,1974,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    -- A block of patterns\n    case custom of\n        Bar ->\n            -- Bar\n            \"Bar\"\n\n        Baz ->\n            -- Baz\n            \"Baz\"\n\n        Foo ->\n            -- Foo\n            \"Foo\"\n"]],[1975,24,1975,55,[0,[[1975,24,1975,39,[2,["Review","Test"],"run"]],[1975,40,1975,55,[7,[1975,41,1975,54,[0,[[1975,41,1975,45,[2,[],"rule"]],[1975,46,1975,54,[2,[],"defaults"]]]]]]]]]]]],[1976,24,1998,26,[0,[[1976,24,1976,48,[2,["Review","Test"],"expectErrors"]],[1977,25,1998,26,[9,[[1977,27,1997,4,[1,"|>",0,[1977,27,1977,40,[2,[],"unsortedError"]],[1978,32,1997,4,[0,[[1978,32,1978,53,[2,["Review","Test"],"whenFixed"]],[1978,54,1997,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    -- A block of patterns\n    case custom of\n        Foo ->\n            -- Foo\n            \"Foo\"\n\n        Bar ->\n            -- Bar\n            \"Bar\"\n\n        Baz ->\n            -- Baz\n            \"Baz\"\n"]]]]]]]]]]]]]]]]]]]],[1999,11,2066,26,[1,"<|",1,[1999,11,1999,57,[0,[[1999,11,1999,15,[2,[],"test"]],[1999,16,1999,57,[5,"work with multiline expression/patterns"]]]]],[2000,13,2066,26,[18,[[[2000,14,2000,16,[1]]],[2001,17,2066,26,[1,"|>",0,[2001,17,2032,55,[1,"|>",0,[2001,17,2031,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String -> String\ntoString custom string =\n    -- A multiline expression\n    case\n        ( custom\n        , string\n        )\n    of\n        ( Bar, \"A pattern\" ) ->\n            -- Bar\n            \"Bar\"\n\n        ( Baz, foo ) ->\n            -- Baz\n            \"Baz\"\n\n        ( Foo, _ ) ->\n            -- Foo\n            toString\n                |> toPipeline\n                |> andSuch\n\n        _ ->\n            \"\"\"Multiline\n        string\n        expression?\"\"\"\n"]],[2032,24,2032,55,[0,[[2032,24,2032,39,[2,["Review","Test"],"run"]],[2032,40,2032,55,[7,[2032,41,2032,54,[0,[[2032,41,2032,45,[2,[],"rule"]],[2032,46,2032,54,[2,[],"defaults"]]]]]]]]]]]],[2033,24,2066,26,[0,[[2033,24,2033,48,[2,["Review","Test"],"expectErrors"]],[2034,25,2066,26,[9,[[2034,27,2065,4,[1,"|>",0,[2034,27,2034,40,[2,[],"unsortedError"]],[2035,32,2065,4,[0,[[2035,32,2035,53,[2,["Review","Test"],"whenFixed"]],[2035,54,2065,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String -> String\ntoString custom string =\n    -- A multiline expression\n    case\n        ( custom\n        , string\n        )\n    of\n        ( Foo, _ ) ->\n            -- Foo\n            toString\n                |> toPipeline\n                |> andSuch\n\n        ( Bar, \"A pattern\" ) ->\n            -- Bar\n            \"Bar\"\n\n        ( Baz, foo ) ->\n            -- Baz\n            \"Baz\"\n\n        _ ->\n            \"\"\"Multiline\n        string\n        expression?\"\"\"\n"]]]]]]]]]]]]]]]]]]]],[2067,11,2121,26,[1,"<|",1,[2067,11,2067,55,[0,[[2067,11,2067,15,[2,[],"test"]],[2067,16,2067,55,[5,"do not mangle syntax in complex cases"]]]]],[2068,13,2121,26,[18,[[[2068,14,2068,16,[1]]],[2069,17,2121,26,[1,"|>",0,[2069,17,2093,55,[1,"|>",0,[2069,17,2092,12,[5,"module A exposing (..)\ntype A = B | C | D\nfoo bar =\n    let\n        thing =\n            case bar of\n                B ->\n                    \\a b ->\n                        case ( Nothing, Nothing ) of\n                            ( Just a_, Just b_ ) ->\n                                GT\n                            ( Just _, Nothing ) ->\n                                LT\n                            ( Nothing, Just _ ) ->\n                                GT\n                            ( Nothing, Nothing ) ->\n                                LT\n                D ->\n                    \\a b -> GT\n                C ->\n                    \\a b -> GT\n    in\n    thing\n        "]],[2093,24,2093,55,[0,[[2093,24,2093,39,[2,["Review","Test"],"run"]],[2093,40,2093,55,[7,[2093,41,2093,54,[0,[[2093,41,2093,45,[2,[],"rule"]],[2093,46,2093,54,[2,[],"defaults"]]]]]]]]]]]],[2094,24,2121,26,[0,[[2094,24,2094,48,[2,["Review","Test"],"expectErrors"]],[2095,25,2121,26,[9,[[2095,27,2120,12,[1,"|>",0,[2095,27,2096,122,[1,"|>",0,[2095,27,2095,40,[2,[],"unsortedError"]],[2096,32,2096,122,[0,[[2096,32,2096,53,[2,["Review","Test"],"atExactly"]],[2096,54,2096,122,[8,[[2096,56,2096,88,[[2096,56,2096,61,"start"],[2096,64,2096,88,[8,[[2096,66,2096,73,[[2096,66,2096,69,"row"],[2096,72,2096,73,[3,6]]]],[2096,75,2096,87,[[2096,75,2096,81,"column"],[2096,84,2096,86,[3,13]]]]]]]]],[2096,90,2096,121,[[2096,90,2096,93,"end"],[2096,96,2096,120,[8,[[2096,98,2096,105,[[2096,98,2096,101,"row"],[2096,104,2096,105,[3,6]]]],[2096,107,2096,119,[[2096,107,2096,113,"column"],[2096,116,2096,118,[3,17]]]]]]]]]]]]]]]]],[2097,32,2120,12,[0,[[2097,32,2097,53,[2,["Review","Test"],"whenFixed"]],[2097,54,2120,12,[5,"module A exposing (..)\ntype A = B | C | D\nfoo bar =\n    let\n        thing =\n            case bar of\n                B ->\n                    \\a b ->\n                        case ( Nothing, Nothing ) of\n                            ( Just a_, Just b_ ) ->\n                                GT\n                            ( Just _, Nothing ) ->\n                                LT\n                            ( Nothing, Just _ ) ->\n                                GT\n                            ( Nothing, Nothing ) ->\n                                LT\n                C ->\n                    \\a b -> GT\n                D ->\n                    \\a b -> GT\n    in\n    thing\n        "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],[2125,1,2127,27,[0,[[0],[1,[2125,1,2125,61,[[2125,1,2125,12,"matchesName"],[2125,15,2125,61,[6,[2125,15,2125,33,[3,[[2125,17,2125,23,[1,[2125,17,2125,23,[[],"String"]],[]]],[2125,25,2125,31,[1,[2125,25,2125,31,[[],"String"]],[]]]]]],[2125,37,2125,61,[6,[2125,37,2125,43,[1,[2125,37,2125,43,[[],"String"]],[]]],[2125,47,2125,61,[6,[2125,47,2125,53,[1,[2125,47,2125,53,[[],"String"]],[]]],[2125,57,2125,61,[1,[2125,57,2125,61,[[],"Bool"]],[]]]]]]]]]]]],[2126,1,2127,27,[[2126,1,2126,12,"matchesName"],[[2126,13,2126,27,[7,[[2126,15,2126,19,[11,"expM"]],[2126,21,2126,25,[11,"expT"]]]]],[2126,28,2126,29,[11,"m"]],[2126,30,2126,31,[11,"t"]]],[2127,5,2127,27,[1,"&&",1,[2127,5,2127,14,[1,"==",2,[2127,5,2127,6,[2,[],"m"]],[2127,10,2127,14,[2,[],"expM"]]]],[2127,18,2127,27,[1,"==",2,[2127,18,2127,19,[2,[],"t"]],[2127,23,2127,27,[2,[],"expT"]]]]]]]]]]],[2130,1,2158,10,[0,[[0],[1,[2130,1,2130,14,[[2130,1,2130,7,"passes"],[2130,10,2130,14,[1,[2130,10,2130,14,[[],"Test"]],[]]]]]],[2131,1,2158,10,[[2131,1,2131,7,"passes"],[],[2132,5,2158,10,[0,[[2132,5,2132,13,[2,[],"describe"]],[2132,14,2132,45,[5,"does not report an error when"]],[2133,9,2158,10,[9,[[2133,11,2147,50,[1,"<|",1,[2133,11,2133,32,[0,[[2133,11,2133,15,[2,[],"test"]],[2133,16,2133,32,[5,"case is sorted"]]]]],[2134,13,2147,50,[18,[[[2134,14,2134,16,[1]]],[2135,17,2147,50,[1,"|>",0,[2135,17,2146,55,[1,"|>",0,[2135,17,2145,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]],[2146,24,2146,55,[0,[[2146,24,2146,39,[2,["Review","Test"],"run"]],[2146,40,2146,55,[7,[2146,41,2146,54,[0,[[2146,41,2146,45,[2,[],"rule"]],[2146,46,2146,54,[2,[],"defaults"]]]]]]]]]]]],[2147,24,2147,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2148,11,2148,28,[2,[],"passesCrossModule"]],[2149,11,2149,26,[2,[],"passesWildcards"]],[2150,11,2150,36,[2,[],"passesTransparentPatterns"]],[2151,11,2151,23,[2,[],"passesTuples"]],[2152,11,2152,22,[2,[],"passesLists"]],[2153,11,2153,23,[2,[],"passesUncons"]],[2154,11,2154,25,[2,[],"passesLiterals"]],[2155,11,2155,38,[2,[],"passesTypesFromDependencies"]],[2156,11,2156,28,[2,[],"passesSubpatterns"]],[2157,11,2157,31,[2,[],"passesNotOnWhitelist"]]]]]]]]]]]]],[2161,1,2296,10,[0,[[0],[1,[2161,1,2161,25,[[2161,1,2161,18,"passesCrossModule"],[2161,21,2161,25,[1,[2161,21,2161,25,[[],"Test"]],[]]]]]],[2162,1,2296,10,[[2162,1,2162,18,"passesCrossModule"],[],[2163,5,2296,10,[0,[[2163,5,2163,13,[2,[],"describe"]],[2163,14,2163,49,[5,"case is defined in another module"]],[2164,9,2296,10,[9,[[2164,11,2183,50,[1,"<|",1,[2164,11,2164,31,[0,[[2164,11,2164,15,[2,[],"test"]],[2164,16,2164,31,[5,"and is sorted"]]]]],[2165,13,2183,50,[18,[[[2165,14,2165,16,[1]]],[2166,17,2183,50,[1,"|>",0,[2166,17,2182,64,[1,"|>",0,[2166,17,2181,18,[9,[[2166,19,2169,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2170,19,2180,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]],[2182,24,2182,64,[0,[[2182,24,2182,48,[2,["Review","Test"],"runOnModules"]],[2182,49,2182,64,[7,[2182,50,2182,63,[0,[[2182,50,2182,54,[2,[],"rule"]],[2182,55,2182,63,[2,[],"defaults"]]]]]]]]]]]],[2183,24,2183,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2184,11,2203,50,[1,"<|",1,[2184,11,2184,106,[0,[[2184,11,2184,15,[2,[],"test"]],[2184,16,2184,106,[5,"but type is not exported (this is a compile error, just for checking context management)"]]]]],[2185,13,2203,50,[18,[[[2185,14,2185,16,[1]]],[2186,17,2203,50,[1,"|>",0,[2186,17,2202,64,[1,"|>",0,[2186,17,2201,18,[9,[[2186,19,2189,4,[5,"module A exposing (Custom)\n\ntype Custom = Foo | Bar | Baz\n"]],[2190,19,2200,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n"]]]]],[2202,24,2202,64,[0,[[2202,24,2202,48,[2,["Review","Test"],"runOnModules"]],[2202,49,2202,64,[7,[2202,50,2202,63,[0,[[2202,50,2202,54,[2,[],"rule"]],[2202,55,2202,63,[2,[],"defaults"]]]]]]]]]]]],[2203,24,2203,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2204,11,2223,50,[1,"<|",1,[2204,11,2204,38,[0,[[2204,11,2204,15,[2,[],"test"]],[2204,16,2204,38,[5,"with qualified names"]]]]],[2205,13,2223,50,[18,[[[2205,14,2205,16,[1]]],[2206,17,2223,50,[1,"|>",0,[2206,17,2222,64,[1,"|>",0,[2206,17,2221,18,[9,[[2206,19,2209,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2210,19,2220,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]],[2222,24,2222,64,[0,[[2222,24,2222,48,[2,["Review","Test"],"runOnModules"]],[2222,49,2222,64,[7,[2222,50,2222,63,[0,[[2222,50,2222,54,[2,[],"rule"]],[2222,55,2222,63,[2,[],"defaults"]]]]]]]]]]]],[2223,24,2223,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2224,11,2248,50,[1,"<|",1,[2224,11,2224,53,[0,[[2224,11,2224,15,[2,[],"test"]],[2224,16,2224,53,[5,"with qualified names disambiguating"]]]]],[2225,13,2248,50,[18,[[[2225,14,2225,16,[1]]],[2226,17,2248,50,[1,"|>",0,[2226,17,2247,64,[1,"|>",0,[2226,17,2246,18,[9,[[2226,19,2229,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2230,19,2233,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2234,19,2245,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Foo -> \"Foo\"\n        A.Bar -> \"Bar\"\n        A.Baz -> \"Baz\"\n"]]]]],[2247,24,2247,64,[0,[[2247,24,2247,48,[2,["Review","Test"],"runOnModules"]],[2247,49,2247,64,[7,[2247,50,2247,63,[0,[[2247,50,2247,54,[2,[],"rule"]],[2247,55,2247,63,[2,[],"defaults"]]]]]]]]]]]],[2248,24,2248,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2249,11,2273,50,[1,"<|",1,[2249,11,2249,47,[0,[[2249,11,2249,15,[2,[],"test"]],[2249,16,2249,47,[5,"with disambiguation by import"]]]]],[2250,13,2273,50,[18,[[[2250,14,2250,16,[1]]],[2251,17,2273,50,[1,"|>",0,[2251,17,2272,64,[1,"|>",0,[2251,17,2271,18,[9,[[2251,19,2254,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2255,19,2258,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2259,19,2270,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n"]]]]],[2272,24,2272,64,[0,[[2272,24,2272,48,[2,["Review","Test"],"runOnModules"]],[2272,49,2272,64,[7,[2272,50,2272,63,[0,[[2272,50,2272,54,[2,[],"rule"]],[2272,55,2272,63,[2,[],"defaults"]]]]]]]]]]]],[2273,24,2273,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2274,11,2295,50,[1,"<|",1,[2274,11,2274,33,[0,[[2274,11,2274,15,[2,[],"test"]],[2274,16,2274,33,[5,"with local name"]]]]],[2275,13,2295,50,[18,[[[2275,14,2275,16,[1]]],[2276,17,2295,50,[1,"|>",0,[2276,17,2294,64,[1,"|>",0,[2276,17,2293,18,[9,[[2276,19,2279,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2280,19,2292,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        Baz -> \"Baz\"\n"]]]]],[2294,24,2294,64,[0,[[2294,24,2294,48,[2,["Review","Test"],"runOnModules"]],[2294,49,2294,64,[7,[2294,50,2294,63,[0,[[2294,50,2294,54,[2,[],"rule"]],[2294,55,2294,63,[2,[],"defaults"]]]]]]]]]]]],[2295,24,2295,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2299,1,2305,10,[0,[[0],[1,[2299,1,2299,19,[[2299,1,2299,12,"passesLists"],[2299,15,2299,19,[1,[2299,15,2299,19,[[],"Test"]],[]]]]]],[2300,1,2305,10,[[2300,1,2300,12,"passesLists"],[],[2301,5,2305,10,[0,[[2301,5,2301,13,[2,[],"describe"]],[2301,14,2301,26,[5,"with lists"]],[2302,9,2305,10,[9,[[2302,11,2302,33,[2,[],"passesListsLengthFirst"]],[2303,11,2303,33,[2,[],"passesListsElementwise"]],[2304,11,2304,23,[2,[],"passesUncons"]]]]]]]]]]]]],[2308,1,2363,10,[0,[[0],[1,[2308,1,2308,30,[[2308,1,2308,23,"passesListsElementwise"],[2308,26,2308,30,[1,[2308,26,2308,30,[[],"Test"]],[]]]]]],[2309,1,2363,10,[[2309,1,2309,23,"passesListsElementwise"],[],[2310,5,2363,10,[0,[[2310,5,2310,13,[2,[],"describe"]],[2310,14,2310,34,[5,"sorted elementwise"]],[2311,9,2363,10,[9,[[2311,11,2334,50,[1,"<|",1,[2311,11,2311,27,[0,[[2311,11,2311,15,[2,[],"test"]],[2311,16,2311,27,[5,"is sorted"]]]]],[2312,13,2334,50,[18,[[[2312,14,2312,16,[1]]],[2313,17,2334,50,[1,"|>",0,[2313,17,2333,55,[1,"|>",0,[2313,17,2332,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[2333,24,2333,55,[0,[[2333,24,2333,39,[2,["Review","Test"],"run"]],[2333,40,2333,55,[7,[2333,41,2333,54,[0,[[2333,41,2333,45,[2,[],"rule"]],[2333,46,2333,54,[2,[],"defaults"]]]]]]]]]]]],[2334,24,2334,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2335,11,2362,50,[1,"<|",1,[2335,11,2335,50,[0,[[2335,11,2335,15,[2,[],"test"]],[2335,16,2335,50,[5,"is sorted with mixed list/uncons"]]]]],[2336,13,2362,50,[18,[[[2336,14,2336,16,[1]]],[2337,17,2362,50,[1,"|>",0,[2337,17,2361,55,[1,"|>",0,[2337,17,2360,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        Foo :: Foo :: [] -> \"FooFoo\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        Foo :: _ -> \"Foo+\"\n        [Bar] -> \"Bar\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Bar :: _ -> \"Bar+\"\n        [Baz] -> \"Baz\"\n        _ -> \"Too many...\"\n"]],[2361,24,2361,55,[0,[[2361,24,2361,39,[2,["Review","Test"],"run"]],[2361,40,2361,55,[7,[2361,41,2361,54,[0,[[2361,41,2361,45,[2,[],"rule"]],[2361,46,2361,54,[2,[],"defaults"]]]]]]]]]]]],[2362,24,2362,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2366,1,2425,10,[0,[[0],[1,[2366,1,2366,30,[[2366,1,2366,23,"passesListsLengthFirst"],[2366,26,2366,30,[1,[2366,26,2366,30,[[],"Test"]],[]]]]]],[2367,1,2425,10,[[2367,1,2367,23,"passesListsLengthFirst"],[],[2368,5,2425,10,[0,[[2368,5,2368,13,[2,[],"describe"]],[2368,14,2368,35,[5,"sorted length-first"]],[2369,9,2425,10,[9,[[2369,11,2396,50,[1,"<|",1,[2369,11,2369,31,[0,[[2369,11,2369,15,[2,[],"test"]],[2369,16,2369,31,[5,"and is sorted"]]]]],[2370,13,2396,50,[18,[[[2370,14,2370,16,[1]]],[2371,17,2396,50,[1,"|>",0,[2371,17,2395,26,[1,"|>",0,[2371,17,2390,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        [Foo] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Foo, Foo] -> \"FooFoo\"\n        [Foo, Bar] -> \"FooBar\"\n        [Foo, Baz] -> \"FooBaz\"\n        [Bar, Foo] -> \"BarFoo\"\n        [Bar, Bar] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        [Foo, Foo, Foo] -> \"FooFooFoo\"\n        _ -> \"Too many...\"\n"]],[2391,24,2395,26,[0,[[2391,24,2391,39,[2,["Review","Test"],"run"]],[2392,25,2395,26,[7,[2392,26,2394,36,[1,"|>",0,[2392,26,2393,56,[1,"|>",0,[2392,26,2392,34,[2,[],"defaults"]],[2393,32,2393,56,[2,[],"sortListPatternsByLength"]]]],[2394,32,2394,36,[2,[],"rule"]]]]]]]]]]],[2396,24,2396,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2397,11,2424,50,[1,"<|",1,[2397,11,2397,50,[0,[[2397,11,2397,15,[2,[],"test"]],[2397,16,2397,50,[5,"is sorted with mixed list/uncons"]]]]],[2398,13,2424,50,[18,[[[2398,14,2398,16,[1]]],[2399,17,2424,50,[1,"|>",0,[2399,17,2423,26,[1,"|>",0,[2399,17,2418,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        [] -> \"\"\n        Foo :: [] -> \"Foo\"\n        [Bar] -> \"Bar\"\n        [Baz] -> \"Baz\"\n        [Bar, Foo] -> \"BarFoo\"\n        Bar :: Bar :: [] -> \"BarBar\"\n        [Bar, Baz] -> \"BarBaz\"\n        Bar :: Bar :: _ -> \"BarBar+\"\n        Bar :: _ :: _ -> \"Bar++\"\n        Foo :: _ -> \"Foo+\"\n        Bar :: _ -> \"Bar+\"\n        _ -> \"Too many...\"\n"]],[2419,24,2423,26,[0,[[2419,24,2419,39,[2,["Review","Test"],"run"]],[2420,25,2423,26,[7,[2420,26,2422,36,[1,"|>",0,[2420,26,2421,56,[1,"|>",0,[2420,26,2420,34,[2,[],"defaults"]],[2421,32,2421,56,[2,[],"sortListPatternsByLength"]]]],[2422,32,2422,36,[2,[],"rule"]]]]]]]]]]],[2424,24,2424,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2428,1,2463,10,[0,[[0],[1,[2428,1,2428,22,[[2428,1,2428,15,"passesLiterals"],[2428,18,2428,22,[1,[2428,18,2428,22,[[],"Test"]],[]]]]]],[2429,1,2463,10,[[2429,1,2429,15,"passesLiterals"],[],[2430,5,2463,10,[0,[[2430,5,2430,13,[2,[],"describe"]],[2430,14,2430,29,[5,"with literals"]],[2431,9,2463,10,[9,[[2431,11,2444,50,[1,"<|",1,[2431,11,2431,34,[0,[[2431,11,2431,15,[2,[],"test"]],[2431,16,2431,34,[5,"in literal order"]]]]],[2432,13,2444,50,[18,[[[2432,14,2432,16,[1]]],[2433,17,2444,50,[1,"|>",0,[2433,17,2443,55,[1,"|>",0,[2433,17,2442,4,[5,"module A exposing (..)\n\ntoString : Int -> String\ntoString i =\n    case i of\n        0 -> \"0\"\n        2 -> \"2\"\n        4 -> \"4\"\n        _ -> \"Something else...\"\n"]],[2443,24,2443,55,[0,[[2443,24,2443,39,[2,["Review","Test"],"run"]],[2443,40,2443,55,[7,[2443,41,2443,54,[0,[[2443,41,2443,45,[2,[],"rule"]],[2443,46,2443,54,[2,[],"defaults"]]]]]]]]]]]],[2444,24,2444,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2445,11,2462,50,[1,"<|",1,[2445,11,2445,66,[0,[[2445,11,2445,15,[2,[],"test"]],[2445,16,2445,66,[5,"in literal order in combination with other types"]]]]],[2446,13,2462,50,[18,[[[2446,14,2446,16,[1]]],[2447,17,2462,50,[1,"|>",0,[2447,17,2461,55,[1,"|>",0,[2447,17,2460,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> Int -> String\ntoString c i =\n    case (c, i) of\n        (Foo, 0) -> \"0\"\n        (Bar, 0) -> \"0\"\n        (Bar, 2) -> \"2\"\n        (Baz, 2) -> \"2\"\n        (_, 4) -> \"4\"\n        _ -> \"Something else...\"\n"]],[2461,24,2461,55,[0,[[2461,24,2461,39,[2,["Review","Test"],"run"]],[2461,40,2461,55,[7,[2461,41,2461,54,[0,[[2461,41,2461,45,[2,[],"rule"]],[2461,46,2461,54,[2,[],"defaults"]]]]]]]]]]]],[2462,24,2462,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2466,1,2622,10,[0,[[0],[1,[2466,1,2466,28,[[2466,1,2466,21,"passesNotOnWhitelist"],[2466,24,2466,28,[1,[2466,24,2466,28,[[],"Test"]],[]]]]]],[2467,1,2622,10,[[2467,1,2467,21,"passesNotOnWhitelist"],[],[2468,5,2622,10,[0,[[2468,5,2468,13,[2,[],"describe"]],[2468,14,2468,32,[5,"not on whitelist"]],[2469,9,2622,10,[9,[[2469,11,2492,50,[1,"<|",1,[2469,11,2469,28,[0,[[2469,11,2469,15,[2,[],"test"]],[2469,16,2469,28,[5,"not sorted"]]]]],[2470,13,2492,50,[18,[[[2470,14,2470,16,[1]]],[2471,17,2492,50,[1,"|>",0,[2471,17,2491,26,[1,"|>",0,[2471,17,2486,18,[9,[[2471,19,2474,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2475,19,2485,4,[5,"module B exposing (..)\n\nimport A exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Baz -> \"Baz\"\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n"]]]]],[2487,24,2491,26,[0,[[2487,24,2487,48,[2,["Review","Test"],"runOnModules"]],[2488,25,2491,26,[7,[2488,26,2490,36,[1,"|>",0,[2488,26,2489,85,[1,"|>",0,[2488,26,2488,34,[2,[],"defaults"]],[2489,32,2489,85,[0,[[2489,32,2489,53,[2,[],"sortOnlyMatchingTypes"]],[2489,54,2489,85,[7,[2489,55,2489,84,[0,[[2489,55,2489,66,[2,[],"matchesName"]],[2489,67,2489,84,[6,[[2489,69,2489,72,[5,"B"]],[2489,74,2489,82,[5,"Custom"]]]]]]]]]]]]]]],[2490,32,2490,36,[2,[],"rule"]]]]]]]]]]],[2492,24,2492,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2493,11,2516,50,[1,"<|",1,[2493,11,2493,38,[0,[[2493,11,2493,15,[2,[],"test"]],[2493,16,2493,38,[5,"with qualified names"]]]]],[2494,13,2516,50,[18,[[[2494,14,2494,16,[1]]],[2495,17,2516,50,[1,"|>",0,[2495,17,2515,26,[1,"|>",0,[2495,17,2510,18,[9,[[2495,19,2498,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2499,19,2509,4,[5,"module B exposing (..)\n\nimport A\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n        A.Baz -> \"Baz\"\n"]]]]],[2511,24,2515,26,[0,[[2511,24,2511,48,[2,["Review","Test"],"runOnModules"]],[2512,25,2515,26,[7,[2512,26,2514,36,[1,"|>",0,[2512,26,2513,85,[1,"|>",0,[2512,26,2512,34,[2,[],"defaults"]],[2513,32,2513,85,[0,[[2513,32,2513,53,[2,[],"sortOnlyMatchingTypes"]],[2513,54,2513,85,[7,[2513,55,2513,84,[0,[[2513,55,2513,66,[2,[],"matchesName"]],[2513,67,2513,84,[6,[[2513,69,2513,72,[5,"B"]],[2513,74,2513,82,[5,"Custom"]]]]]]]]]]]]]]],[2514,32,2514,36,[2,[],"rule"]]]]]]]]]]],[2516,24,2516,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2517,11,2545,50,[1,"<|",1,[2517,11,2517,53,[0,[[2517,11,2517,15,[2,[],"test"]],[2517,16,2517,53,[5,"with qualified names disambiguating"]]]]],[2518,13,2545,50,[18,[[[2518,14,2518,16,[1]]],[2519,17,2545,50,[1,"|>",0,[2519,17,2544,26,[1,"|>",0,[2519,17,2539,18,[9,[[2519,19,2522,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2523,19,2526,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2527,19,2538,4,[5,"module C exposing (..)\n\nimport A\nimport B\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        A.Bar -> \"Bar\"\n        A.Foo -> \"Foo\"\n        A.Baz -> \"Baz\"\n"]]]]],[2540,24,2544,26,[0,[[2540,24,2540,48,[2,["Review","Test"],"runOnModules"]],[2541,25,2544,26,[7,[2541,26,2543,36,[1,"|>",0,[2541,26,2542,85,[1,"|>",0,[2541,26,2541,34,[2,[],"defaults"]],[2542,32,2542,85,[0,[[2542,32,2542,53,[2,[],"sortOnlyMatchingTypes"]],[2542,54,2542,85,[7,[2542,55,2542,84,[0,[[2542,55,2542,66,[2,[],"matchesName"]],[2542,67,2542,84,[6,[[2542,69,2542,72,[5,"B"]],[2542,74,2542,82,[5,"Custom"]]]]]]]]]]]]]]],[2543,32,2543,36,[2,[],"rule"]]]]]]]]]]],[2545,24,2545,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2546,11,2574,50,[1,"<|",1,[2546,11,2546,47,[0,[[2546,11,2546,15,[2,[],"test"]],[2546,16,2546,47,[5,"with disambiguation by import"]]]]],[2547,13,2574,50,[18,[[[2547,14,2547,16,[1]]],[2548,17,2574,50,[1,"|>",0,[2548,17,2573,26,[1,"|>",0,[2548,17,2568,18,[9,[[2548,19,2551,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n"]],[2552,19,2555,4,[5,"module B exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2556,19,2567,4,[5,"module C exposing (..)\n\nimport A\nimport B exposing (Custom(..))\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n"]]]]],[2569,24,2573,26,[0,[[2569,24,2569,48,[2,["Review","Test"],"runOnModules"]],[2570,25,2573,26,[7,[2570,26,2572,36,[1,"|>",0,[2570,26,2571,85,[1,"|>",0,[2570,26,2570,34,[2,[],"defaults"]],[2571,32,2571,85,[0,[[2571,32,2571,53,[2,[],"sortOnlyMatchingTypes"]],[2571,54,2571,85,[7,[2571,55,2571,84,[0,[[2571,55,2571,66,[2,[],"matchesName"]],[2571,67,2571,84,[6,[[2571,69,2571,72,[5,"A"]],[2571,74,2571,82,[5,"Custom"]]]]]]]]]]]]]]],[2572,32,2572,36,[2,[],"rule"]]]]]]]]]]],[2574,24,2574,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2575,11,2600,50,[1,"<|",1,[2575,11,2575,33,[0,[[2575,11,2575,15,[2,[],"test"]],[2575,16,2575,33,[5,"with local name"]]]]],[2576,13,2600,50,[18,[[[2576,14,2576,16,[1]]],[2577,17,2600,50,[1,"|>",0,[2577,17,2599,26,[1,"|>",0,[2577,17,2594,18,[9,[[2577,19,2580,4,[5,"module A exposing (..)\n\ntype Custom = Baz | Bar | Foo\n"]],[2581,19,2593,4,[5,"module B exposing (..)\n\nimport A\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Bar -> \"Bar\"\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n"]]]]],[2595,24,2599,26,[0,[[2595,24,2595,48,[2,["Review","Test"],"runOnModules"]],[2596,25,2599,26,[7,[2596,26,2598,36,[1,"|>",0,[2596,26,2597,85,[1,"|>",0,[2596,26,2596,34,[2,[],"defaults"]],[2597,32,2597,85,[0,[[2597,32,2597,53,[2,[],"sortOnlyMatchingTypes"]],[2597,54,2597,85,[7,[2597,55,2597,84,[0,[[2597,55,2597,66,[2,[],"matchesName"]],[2597,67,2597,84,[6,[[2597,69,2597,72,[5,"A"]],[2597,74,2597,82,[5,"Custom"]]]]]]]]]]]]]]],[2598,32,2598,36,[2,[],"rule"]]]]]]]]]]],[2600,24,2600,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2601,11,2621,50,[1,"<|",1,[2601,11,2601,34,[0,[[2601,11,2601,15,[2,[],"test"]],[2601,16,2601,34,[5,"with import name"]]]]],[2602,13,2621,50,[18,[[[2602,14,2602,16,[1]]],[2603,17,2621,50,[1,"|>",0,[2603,17,2620,26,[1,"|>",0,[2603,17,2615,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Bool -> Custom -> String\ntoString b custom =\n    case (b, custom) of\n        (False, Bar) -> \"Bar\"\n        (False, Foo) -> \"Foo\"\n        (True, Foo) -> \"Foo\"\n        (False, Baz) -> \"Baz\"\n        _ -> \"Rest\"\n"]],[2616,24,2620,26,[0,[[2616,24,2616,39,[2,["Review","Test"],"run"]],[2617,25,2620,26,[7,[2617,26,2619,36,[1,"|>",0,[2617,26,2618,85,[1,"|>",0,[2617,26,2617,34,[2,[],"defaults"]],[2618,32,2618,85,[0,[[2618,32,2618,53,[2,[],"sortOnlyMatchingTypes"]],[2618,54,2618,85,[7,[2618,55,2618,84,[0,[[2618,55,2618,66,[2,[],"matchesName"]],[2618,67,2618,84,[6,[[2618,69,2618,72,[5,"A"]],[2618,74,2618,82,[5,"Custom"]]]]]]]]]]]]]]],[2619,32,2619,36,[2,[],"rule"]]]]]]]]]]],[2621,24,2621,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2625,1,2691,10,[0,[[0],[1,[2625,1,2625,25,[[2625,1,2625,18,"passesSubpatterns"],[2625,21,2625,25,[1,[2625,21,2625,25,[[],"Test"]],[]]]]]],[2626,1,2691,10,[[2626,1,2626,18,"passesSubpatterns"],[],[2627,5,2691,10,[0,[[2627,5,2627,13,[2,[],"describe"]],[2627,14,2627,32,[5,"with subpatterns"]],[2628,9,2691,10,[9,[[2628,11,2647,50,[1,"<|",1,[2628,11,2628,27,[0,[[2628,11,2628,15,[2,[],"test"]],[2628,16,2628,27,[5,"is sorted"]]]]],[2629,13,2647,50,[18,[[[2629,14,2629,16,[1]]],[2630,17,2647,50,[1,"|>",0,[2630,17,2646,26,[1,"|>",0,[2630,17,2641,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Maybe Custom -> String\ntoString custom =\n    case custom of\n        Just Foo -> \"Foo\"\n        Just Bar -> \"Bar\"\n        Just Baz -> \"Baz\"\n        Nothing -> \"Nothing\"\n"]],[2642,24,2646,26,[0,[[2642,24,2642,39,[2,["Review","Test"],"run"]],[2643,25,2646,26,[7,[2643,26,2645,36,[1,"|>",0,[2643,26,2644,71,[1,"|>",0,[2643,26,2643,34,[2,[],"defaults"]],[2644,32,2644,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[2645,32,2645,36,[2,[],"rule"]]]]]]]]]]],[2647,24,2647,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2648,11,2668,50,[1,"<|",1,[2648,11,2648,44,[0,[[2648,11,2648,15,[2,[],"test"]],[2648,16,2648,44,[5,"with non-sortable patterns"]]]]],[2649,13,2668,50,[18,[[[2649,14,2649,16,[1]]],[2650,17,2668,50,[1,"|>",0,[2650,17,2667,26,[1,"|>",0,[2650,17,2662,4,[5,"module A exposing (..)\n\ntype Container = Container Custom Int Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container Foo 1 2 -> \"Foo\"\n        Container Bar 2 1 -> \"Bar\"\n        Container Baz 2 2 -> \"Baz\"\n"]],[2663,24,2667,26,[0,[[2663,24,2663,39,[2,["Review","Test"],"run"]],[2664,25,2667,26,[7,[2664,26,2666,36,[1,"|>",0,[2664,26,2665,49,[1,"|>",0,[2664,26,2664,34,[2,[],"defaults"]],[2665,32,2665,49,[2,[],"doNotSortLiterals"]]]],[2666,32,2666,36,[2,[],"rule"]]]]]]]]]]],[2668,24,2668,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2669,11,2690,50,[1,"<|",1,[2669,11,2669,73,[0,[[2669,11,2669,15,[2,[],"test"]],[2669,16,2669,73,[5,"does not sort past non-sortable patterns when specified"]]]]],[2670,13,2690,50,[18,[[[2670,14,2670,16,[1]]],[2671,17,2690,50,[1,"|>",0,[2671,17,2689,26,[1,"|>",0,[2671,17,2683,4,[5,"module A exposing (..)\n\ntype Container = Container Int Custom Int\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Container -> String\ntoString c =\n    case c of\n        Container 1 Baz 1 -> \"Baz\"\n        Container 1 Foo 1 -> \"Foo\"\n        Container 1 Bar 1 -> \"Bar\"\n"]],[2684,24,2689,26,[0,[[2684,24,2684,39,[2,["Review","Test"],"run"]],[2685,25,2689,26,[7,[2685,26,2688,36,[1,"|>",0,[2685,26,2687,55,[1,"|>",0,[2685,26,2686,49,[1,"|>",0,[2685,26,2685,34,[2,[],"defaults"]],[2686,32,2686,49,[2,[],"doNotSortLiterals"]]]],[2687,32,2687,55,[2,[],"doNotLookPastUnsortable"]]]],[2688,32,2688,36,[2,[],"rule"]]]]]]]]]]],[2690,24,2690,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2694,1,2727,10,[0,[[0],[1,[2694,1,2694,33,[[2694,1,2694,26,"passesTransparentPatterns"],[2694,29,2694,33,[1,[2694,29,2694,33,[[],"Test"]],[]]]]]],[2695,1,2727,10,[[2695,1,2695,26,"passesTransparentPatterns"],[],[2696,5,2727,10,[0,[[2696,5,2696,13,[2,[],"describe"]],[2696,14,2696,41,[5,"with transparent patterns"]],[2697,9,2727,10,[9,[[2697,11,2711,50,[1,"<|",1,[2697,11,2697,59,[0,[[2697,11,2697,15,[2,[],"test"]],[2697,16,2697,59,[5,"and is sorted with parenthesized patterns"]]]]],[2698,13,2711,50,[18,[[[2698,14,2698,16,[1]]],[2699,17,2711,50,[1,"|>",0,[2699,17,2710,55,[1,"|>",0,[2699,17,2709,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Bar -> \"Bar\"\n        (Baz) -> \"Bar\"\n"]],[2710,24,2710,55,[0,[[2710,24,2710,39,[2,["Review","Test"],"run"]],[2710,40,2710,55,[7,[2710,41,2710,54,[0,[[2710,41,2710,45,[2,[],"rule"]],[2710,46,2710,54,[2,[],"defaults"]]]]]]]]]]]],[2711,24,2711,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2712,11,2726,50,[1,"<|",1,[2712,11,2712,47,[0,[[2712,11,2712,15,[2,[],"test"]],[2712,16,2712,47,[5,"and is sorted with as pattern"]]]]],[2713,13,2726,50,[18,[[[2713,14,2713,16,[1]]],[2714,17,2726,50,[1,"|>",0,[2714,17,2725,55,[1,"|>",0,[2714,17,2724,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        (Bar as b) -> \"Bar\"\n        Baz -> \"Baz\"\n"]],[2725,24,2725,55,[0,[[2725,24,2725,39,[2,["Review","Test"],"run"]],[2725,40,2725,55,[7,[2725,41,2725,54,[0,[[2725,41,2725,45,[2,[],"rule"]],[2725,46,2725,54,[2,[],"defaults"]]]]]]]]]]]],[2726,24,2726,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2730,1,2845,10,[0,[[0],[1,[2730,1,2730,20,[[2730,1,2730,13,"passesTuples"],[2730,16,2730,20,[1,[2730,16,2730,20,[[],"Test"]],[]]]]]],[2731,1,2845,10,[[2731,1,2731,13,"passesTuples"],[],[2732,5,2845,10,[0,[[2732,5,2732,13,[2,[],"describe"]],[2732,14,2732,27,[5,"with tuples"]],[2733,9,2845,10,[9,[[2733,11,2755,50,[1,"<|",1,[2733,11,2733,31,[0,[[2733,11,2733,15,[2,[],"test"]],[2733,16,2733,31,[5,"and is sorted"]]]]],[2734,13,2755,50,[18,[[[2734,14,2734,16,[1]]],[2735,17,2755,50,[1,"|>",0,[2735,17,2754,55,[1,"|>",0,[2735,17,2753,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (Foo, A) -> \"FooA\"\n        (Foo, B) -> \"FooB\"\n        (Foo, C) -> \"FooC\"\n        (Bar, A) -> \"BarA\"\n        (Bar, B) -> \"BarB\"\n        (Bar, C) -> \"BarC\"\n        (Baz, A) -> \"BazA\"\n        (Baz, B) -> \"BazB\"\n        (Baz, C) -> \"BazC\"\n"]],[2754,24,2754,55,[0,[[2754,24,2754,39,[2,["Review","Test"],"run"]],[2754,40,2754,55,[7,[2754,41,2754,54,[0,[[2754,41,2754,45,[2,[],"rule"]],[2754,46,2754,54,[2,[],"defaults"]]]]]]]]]]]],[2755,24,2755,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2756,11,2779,50,[1,"<|",1,[2756,11,2756,46,[0,[[2756,11,2756,15,[2,[],"test"]],[2756,16,2756,46,[5,"and is sorted with threeples"]]]]],[2757,13,2779,50,[18,[[[2757,14,2757,16,[1]]],[2758,17,2779,50,[1,"|>",0,[2758,17,2778,55,[1,"|>",0,[2758,17,2777,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case (custom1, custom2, custom3) of\n        (Foo, A, Foo) -> \"FooAFoo\"\n        (Foo, A, Bar) -> \"FooABar\"\n        (Foo, A, Baz) -> \"FooABaz\"\n        (Foo, B, Foo) -> \"FooBFoo\"\n        (Foo, B, Bar) -> \"FooBBar\"\n        (Foo, B, Baz) -> \"FooBBaz\"\n        (Foo, C, Foo) -> \"FooCFoo\"\n        (Foo, C, Bar) -> \"FooCBar\"\n        (Foo, C, Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[2778,24,2778,55,[0,[[2778,24,2778,39,[2,["Review","Test"],"run"]],[2778,40,2778,55,[7,[2778,41,2778,54,[0,[[2778,41,2778,45,[2,[],"rule"]],[2778,46,2778,54,[2,[],"defaults"]]]]]]]]]]]],[2779,24,2779,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2780,11,2803,50,[1,"<|",1,[2780,11,2780,50,[0,[[2780,11,2780,15,[2,[],"test"]],[2780,16,2780,50,[5,"and is sorted with nested tuples"]]]]],[2781,13,2803,50,[18,[[[2781,14,2781,16,[1]]],[2782,17,2803,50,[1,"|>",0,[2782,17,2802,55,[1,"|>",0,[2782,17,2801,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, custom2), custom3) of\n        ((Foo, A), Foo) -> \"FooAFoo\"\n        ((Foo, A), Bar) -> \"FooABar\"\n        ((Foo, A), Baz) -> \"FooABaz\"\n        ((Foo, B), Foo) -> \"FooBFoo\"\n        ((Foo, B), Bar) -> \"FooBBar\"\n        ((Foo, B), Baz) -> \"FooBBaz\"\n        ((Foo, C), Foo) -> \"FooCFoo\"\n        ((Foo, C), Bar) -> \"FooCBar\"\n        ((Foo, C), Baz) -> \"FooCBaz\"\n        _ -> \"Too many...\"\n"]],[2802,24,2802,55,[0,[[2802,24,2802,39,[2,["Review","Test"],"run"]],[2802,40,2802,55,[7,[2802,41,2802,54,[0,[[2802,41,2802,45,[2,[],"rule"]],[2802,46,2802,54,[2,[],"defaults"]]]]]]]]]]]],[2803,24,2803,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2804,11,2824,50,[1,"<|",1,[2804,11,2804,57,[0,[[2804,11,2804,15,[2,[],"test"]],[2804,16,2804,57,[5,"and is sorted with deeply nested tuples"]]]]],[2805,13,2824,50,[18,[[[2805,14,2805,16,[1]]],[2806,17,2824,50,[1,"|>",0,[2806,17,2823,55,[1,"|>",0,[2806,17,2822,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> Custom1 -> String\ntoString custom1 custom2 custom3 =\n    case ((custom1, (custom2, custom2)), custom3, (custom2, custom2)) of\n        ((Foo, (A, A)), Foo, (A, A)) -> \"1\"\n        ((Foo, (A, B)), Foo, (A, A)) -> \"2\"\n        ((Foo, (A, C)), Foo, (A, A)) -> \"3\"\n        ((Foo, (B, A)), Foo, (A, A)) -> \"4\"\n        ((Foo, (B, A)), Foo, (A, C)) -> \"5\"\n        ((Foo, (B, A)), Foo, (B, A)) -> \"6\"\n        _ -> \"Too many...\"\n"]],[2823,24,2823,55,[0,[[2823,24,2823,39,[2,["Review","Test"],"run"]],[2823,40,2823,55,[7,[2823,41,2823,54,[0,[[2823,41,2823,45,[2,[],"rule"]],[2823,46,2823,54,[2,[],"defaults"]]]]]]]]]]]],[2824,24,2824,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2825,11,2844,50,[1,"<|",1,[2825,11,2825,83,[0,[[2825,11,2825,15,[2,[],"test"]],[2825,16,2825,83,[5,"preserves order when moving wildcards would create compile errors"]]]]],[2826,13,2844,50,[18,[[[2826,14,2826,16,[1]]],[2827,17,2844,50,[1,"|>",0,[2827,17,2843,55,[1,"|>",0,[2827,17,2842,4,[5,"module A exposing (..)\n\ntype Thing\n    = Thing Int Int\n    | OtherThing\n\ntoInt : Thing -> Result a -> Int\ntoInt foo bar =\n    case ( foo, bar) of\n        ( Thing _ _, _ ) ->\n            1\n        ( _, Ok _ ) ->\n            2\n        ( _, Err _ ) ->\n           3\n"]],[2843,24,2843,55,[0,[[2843,24,2843,39,[2,["Review","Test"],"run"]],[2843,40,2843,55,[7,[2843,41,2843,54,[0,[[2843,41,2843,45,[2,[],"rule"]],[2843,46,2843,54,[2,[],"defaults"]]]]]]]]]]]],[2844,24,2844,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2848,1,2901,10,[0,[[0],[1,[2848,1,2848,35,[[2848,1,2848,28,"passesTypesFromDependencies"],[2848,31,2848,35,[1,[2848,31,2848,35,[[],"Test"]],[]]]]]],[2849,1,2901,10,[[2849,1,2849,28,"passesTypesFromDependencies"],[],[2850,5,2901,10,[0,[[2850,5,2850,13,[2,[],"describe"]],[2850,14,2850,44,[5,"with types from dependencies"]],[2851,9,2901,10,[9,[[2851,11,2862,50,[1,"<|",1,[2851,11,2851,48,[0,[[2851,11,2851,15,[2,[],"test"]],[2851,16,2851,48,[5,"is sorted in declaration order"]]]]],[2852,13,2862,50,[18,[[[2852,14,2852,16,[1]]],[2853,17,2862,50,[1,"|>",0,[2853,17,2861,55,[1,"|>",0,[2853,17,2860,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]],[2861,24,2861,55,[0,[[2861,24,2861,39,[2,["Review","Test"],"run"]],[2861,40,2861,55,[7,[2861,41,2861,54,[0,[[2861,41,2861,45,[2,[],"rule"]],[2861,46,2861,54,[2,[],"defaults"]]]]]]]]]]]],[2862,24,2862,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2863,11,2878,50,[1,"<|",1,[2863,11,2863,49,[0,[[2863,11,2863,15,[2,[],"test"]],[2863,16,2863,49,[5,"is sorted in alphabetical order"]]]]],[2864,13,2878,50,[18,[[[2864,14,2864,16,[1]]],[2865,17,2878,50,[1,"|>",0,[2865,17,2877,26,[1,"|>",0,[2865,17,2872,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n"]],[2873,24,2877,26,[0,[[2873,24,2873,39,[2,["Review","Test"],"run"]],[2874,25,2877,26,[7,[2874,26,2876,36,[1,"|>",0,[2874,26,2875,71,[1,"|>",0,[2874,26,2874,34,[2,[],"defaults"]],[2875,32,2875,71,[2,[],"sortTypesFromDependenciesAlphabetically"]]]],[2876,32,2876,36,[2,[],"rule"]]]]]]]]]]],[2878,24,2878,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2879,11,2900,50,[1,"<|",1,[2879,11,2879,47,[0,[[2879,11,2879,15,[2,[],"test"]],[2879,16,2879,47,[5,"in any order when not sorting"]]]]],[2880,13,2900,50,[18,[[[2880,14,2880,16,[1]]],[2881,17,2900,50,[1,"|>",0,[2881,17,2899,26,[1,"|>",0,[2881,17,2894,4,[5,"module A exposing (..)\n\ntoString : Bool -> String\ntoString b =\n    case b of\n        False -> \"False\"\n        True -> \"True\"\n\ntoString2 : Bool -> String\ntoString2 b =\n    case b of\n        True -> \"True\"\n        False -> \"False\"\n"]],[2895,24,2899,26,[0,[[2895,24,2895,39,[2,["Review","Test"],"run"]],[2896,25,2899,26,[7,[2896,26,2898,36,[1,"|>",0,[2896,26,2897,62,[1,"|>",0,[2896,26,2896,34,[2,[],"defaults"]],[2897,32,2897,62,[2,[],"doNotSortTypesFromDependencies"]]]],[2898,32,2898,36,[2,[],"rule"]]]]]]]]]]],[2900,24,2900,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2904,1,2972,10,[0,[[0],[1,[2904,1,2904,20,[[2904,1,2904,13,"passesUncons"],[2904,16,2904,20,[1,[2904,16,2904,20,[[],"Test"]],[]]]]]],[2905,1,2972,10,[[2905,1,2905,13,"passesUncons"],[],[2906,5,2972,10,[0,[[2906,5,2906,13,[2,[],"describe"]],[2906,14,2906,27,[5,"with uncons"]],[2907,9,2972,10,[9,[[2907,11,2921,50,[1,"<|",1,[2907,11,2907,27,[0,[[2907,11,2907,15,[2,[],"test"]],[2907,16,2907,27,[5,"is sorted"]]]]],[2908,13,2921,50,[18,[[[2908,14,2908,16,[1]]],[2909,17,2921,50,[1,"|>",0,[2909,17,2920,55,[1,"|>",0,[2909,17,2919,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString xs =\n    case xs of\n        Foo :: _ -> \"Foo\"\n        Bar :: _ -> \"Bar\"\n        Baz :: _ -> \"Baz\"\n"]],[2920,24,2920,55,[0,[[2920,24,2920,39,[2,["Review","Test"],"run"]],[2920,40,2920,55,[7,[2920,41,2920,54,[0,[[2920,41,2920,45,[2,[],"rule"]],[2920,46,2920,54,[2,[],"defaults"]]]]]]]]]]]],[2921,24,2921,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2922,11,2936,50,[1,"<|",1,[2922,11,2922,44,[0,[[2922,11,2922,15,[2,[],"test"]],[2922,16,2922,44,[5,"is sorted including tuples"]]]]],[2923,13,2936,50,[18,[[[2923,14,2923,16,[1]]],[2924,17,2936,50,[1,"|>",0,[2924,17,2935,55,[1,"|>",0,[2924,17,2934,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List (Custom, Int) -> String\ntoString xs =\n    case xs of\n        (Foo, 1) :: (Foo, 2) :: _ -> \"Foo\"\n        (Bar, 1) :: (Bar, 2) :: _ -> \"Bar\"\n        (Baz, 1) :: (Baz, 2) :: _ -> \"Baz\"\n"]],[2935,24,2935,55,[0,[[2935,24,2935,39,[2,["Review","Test"],"run"]],[2935,40,2935,55,[7,[2935,41,2935,54,[0,[[2935,41,2935,45,[2,[],"rule"]],[2935,46,2935,54,[2,[],"defaults"]]]]]]]]]]]],[2936,24,2936,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2937,11,2952,50,[1,"<|",1,[2937,11,2937,106,[0,[[2937,11,2937,15,[2,[],"test"]],[2937,16,2937,106,[5,"preserves order when mixed with lists when matches could be equally short in simple case"]]]]],[2938,13,2952,50,[18,[[[2938,14,2938,16,[1]]],[2939,17,2952,50,[1,"|>",0,[2939,17,2951,55,[1,"|>",0,[2939,17,2950,4,[5,"module A exposing (..)\n\nfoo : List String -> String\nfoo list =\n    case list of\n        [] ->\n            \"\"\n        [ last ] ->\n            last\n        second :: rest ->\n            second ++ rest\n"]],[2951,24,2951,55,[0,[[2951,24,2951,39,[2,["Review","Test"],"run"]],[2951,40,2951,55,[7,[2951,41,2951,54,[0,[[2951,41,2951,45,[2,[],"rule"]],[2951,46,2951,54,[2,[],"defaults"]]]]]]]]]]]],[2952,24,2952,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2953,11,2971,50,[1,"<|",1,[2953,11,2953,107,[0,[[2953,11,2953,15,[2,[],"test"]],[2953,16,2953,107,[5,"preserves order when mixed with lists when matches could be equally short in complex case"]]]]],[2954,13,2971,50,[18,[[[2954,14,2954,16,[1]]],[2955,17,2971,50,[1,"|>",0,[2955,17,2970,55,[1,"|>",0,[2955,17,2969,4,[5,"module A exposing (..)\n\ntype Nonempty a\n    = Nonempty a (List a)\n\nfoo : String -> Nonempty String -> String\nfoo fn list =\n    case list of\n        Nonempty first [] ->\n            first\n        Nonempty first [ last ] ->\n            first ++ \" \" ++ fn ++ \" \" ++ last\n        Nonempty first (second :: rest) ->\n            first ++ \", \" ++ foo fn (Nonempty second rest)\n"]],[2970,24,2970,55,[0,[[2970,24,2970,39,[2,["Review","Test"],"run"]],[2970,40,2970,55,[7,[2970,41,2970,54,[0,[[2970,41,2970,45,[2,[],"rule"]],[2970,46,2970,54,[2,[],"defaults"]]]]]]]]]]]],[2971,24,2971,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[2975,1,3123,10,[0,[[0],[1,[2975,1,2975,23,[[2975,1,2975,16,"passesWildcards"],[2975,19,2975,23,[1,[2975,19,2975,23,[[],"Test"]],[]]]]]],[2976,1,3123,10,[[2976,1,2976,16,"passesWildcards"],[],[2977,5,3123,10,[0,[[2977,5,2977,13,[2,[],"describe"]],[2977,14,2977,30,[5,"with wildcards"]],[2978,9,3123,10,[9,[[2978,11,2992,50,[1,"<|",1,[2978,11,2978,61,[0,[[2978,11,2978,15,[2,[],"test"]],[2978,16,2978,61,[5,"and is sorted order with all pattern at end"]]]]],[2979,13,2992,50,[18,[[[2979,14,2979,16,[1]]],[2980,17,2992,50,[1,"|>",0,[2980,17,2991,55,[1,"|>",0,[2980,17,2990,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        _ -> \"Bar\"\n"]],[2991,24,2991,55,[0,[[2991,24,2991,39,[2,["Review","Test"],"run"]],[2991,40,2991,55,[7,[2991,41,2991,54,[0,[[2991,41,2991,45,[2,[],"rule"]],[2991,46,2991,54,[2,[],"defaults"]]]]]]]]]]]],[2992,24,2992,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[2993,11,3007,50,[1,"<|",1,[2993,11,2993,55,[0,[[2993,11,2993,15,[2,[],"test"]],[2993,16,2993,55,[5,"and is sorted with var pattern at end"]]]]],[2994,13,3007,50,[18,[[[2994,14,2994,16,[1]]],[2995,17,3007,50,[1,"|>",0,[2995,17,3006,55,[1,"|>",0,[2995,17,3005,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : Custom -> String\ntoString custom =\n    case custom of\n        Foo -> \"Foo\"\n        Baz -> \"Baz\"\n        bar -> \"Bar\"\n"]],[3006,24,3006,55,[0,[[3006,24,3006,39,[2,["Review","Test"],"run"]],[3006,40,3006,55,[7,[3006,41,3006,54,[0,[[3006,41,3006,45,[2,[],"rule"]],[3006,46,3006,54,[2,[],"defaults"]]]]]]]]]]]],[3007,24,3007,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[3008,11,3024,50,[1,"<|",1,[3008,11,3008,82,[0,[[3008,11,3008,15,[2,[],"test"]],[3008,16,3008,82,[5,"preserves control flow when sorting would destroy it with tuples"]]]]],[3009,13,3024,50,[18,[[[3009,14,3009,16,[1]]],[3010,17,3024,50,[1,"|>",0,[3010,17,3023,55,[1,"|>",0,[3010,17,3022,4,[5,"module A exposing (..)\n\ntype Custom1 = Foo | Bar | Baz\n\ntype Custom2 = A | B | C\n\ntoString : Custom1 -> Custom2 -> String\ntoString custom1 custom2 =\n    case (custom1, custom2) of\n        (_, A) -> \"A\"\n        (Foo, _) -> \"FooNotA\"\n        _ -> \"Too many...\"\n"]],[3023,24,3023,55,[0,[[3023,24,3023,39,[2,["Review","Test"],"run"]],[3023,40,3023,55,[7,[3023,41,3023,54,[0,[[3023,41,3023,45,[2,[],"rule"]],[3023,46,3023,54,[2,[],"defaults"]]]]]]]]]]]],[3024,24,3024,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[3025,11,3092,26,[1,"<|",1,[3025,11,3025,70,[0,[[3025,11,3025,15,[2,[],"test"]],[3025,16,3025,70,[5,"control flow is not mangled by transitive assumption"]]]]],[3026,13,3092,26,[18,[[[3026,14,3026,16,[1]]],[3027,17,3092,26,[1,"|>",0,[3027,17,3058,55,[1,"|>",0,[3027,17,3057,4,[5,"module A exposing (..)\n\ntype T\n    = A\n    | B\n    | C String\n    | D Int\n\nfoo t1 t2=\n    case ( t1, t2 ) of\n        ( A, _ ) ->\n            Just A\n\n        ( _, A ) ->\n            Just A\n\n        ( _, C s ) ->\n            Just (C s)\n\n        ( C s, _ ) ->\n            Just (C s)\n\n        ( B, _ ) ->\n            Just B\n\n        ( _, B ) ->\n            Just B\n\n        ( D _, D i ) ->\n            Just (D i)\n"]],[3058,24,3058,55,[0,[[3058,24,3058,39,[2,["Review","Test"],"run"]],[3058,40,3058,55,[7,[3058,41,3058,54,[0,[[3058,41,3058,45,[2,[],"rule"]],[3058,46,3058,54,[2,[],"defaults"]]]]]]]]]]]],[3059,24,3092,26,[0,[[3059,24,3059,48,[2,["Review","Test"],"expectErrors"]],[3060,25,3092,26,[9,[[3060,27,3091,4,[1,"|>",0,[3060,27,3060,40,[2,[],"unsortedError"]],[3061,32,3091,4,[0,[[3061,32,3061,53,[2,["Review","Test"],"whenFixed"]],[3061,54,3091,4,[5,"module A exposing (..)\n\ntype T\n    = A\n    | B\n    | C String\n    | D Int\n\nfoo t1 t2=\n    case ( t1, t2 ) of\n        ( A, _ ) ->\n            Just A\n\n        ( _, A ) ->\n            Just A\n\n        ( _, C s ) ->\n            Just (C s)\n\n        ( B, _ ) ->\n            Just B\n\n        ( C s, _ ) ->\n            Just (C s)\n\n        ( _, B ) ->\n            Just B\n\n        ( D _, D i ) ->\n            Just (D i)\n"]]]]]]]]]]]]]]]]]]]],[3093,11,3107,50,[1,"<|",1,[3093,11,3093,81,[0,[[3093,11,3093,15,[2,[],"test"]],[3093,16,3093,81,[5,"preserves control flow when sorting would destroy it with lists"]]]]],[3094,13,3107,50,[18,[[[3094,14,3094,16,[1]]],[3095,17,3107,50,[1,"|>",0,[3095,17,3106,55,[1,"|>",0,[3095,17,3105,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        [_, Foo] -> \"_Foo\"\n        [Foo, _] -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[3106,24,3106,55,[0,[[3106,24,3106,39,[2,["Review","Test"],"run"]],[3106,40,3106,55,[7,[3106,41,3106,54,[0,[[3106,41,3106,45,[2,[],"rule"]],[3106,46,3106,54,[2,[],"defaults"]]]]]]]]]]]],[3107,24,3107,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]],[3108,11,3122,50,[1,"<|",1,[3108,11,3108,82,[0,[[3108,11,3108,15,[2,[],"test"]],[3108,16,3108,82,[5,"preserves control flow when sorting would destroy it with uncons"]]]]],[3109,13,3122,50,[18,[[[3109,14,3109,16,[1]]],[3110,17,3122,50,[1,"|>",0,[3110,17,3121,55,[1,"|>",0,[3110,17,3120,4,[5,"module A exposing (..)\n\ntype Custom = Foo | Bar | Baz\n\ntoString : List Custom -> String\ntoString cs =\n    case cs of\n        _ :: Foo :: _ -> \"_Foo_\"\n        Foo :: _ -> \"Foo_\"\n        _ -> \"Too many...\"\n"]],[3121,24,3121,55,[0,[[3121,24,3121,39,[2,["Review","Test"],"run"]],[3121,40,3121,55,[7,[3121,41,3121,54,[0,[[3121,41,3121,45,[2,[],"rule"]],[3121,46,3121,54,[2,[],"defaults"]]]]]]]]]]]],[3122,24,3122,50,[2,["Review","Test"],"expectNoErrors"]]]]]]]]]]]]]]]]]]]],[3126,1,3134,10,[0,[[0],[1,[3126,1,3126,42,[[3126,1,3126,14,"unsortedError"],[3126,17,3126,42,[1,[3126,17,3126,42,[["Review","Test"],"ExpectedError"]],[]]]]]],[3127,1,3134,10,[[3127,1,3127,14,"unsortedError"],[],[3128,5,3134,10,[0,[[3128,5,3128,22,[2,["Review","Test"],"error"]],[3129,9,3134,10,[8,[[3129,11,3131,14,[[3129,11,3129,18,"details"],[3130,13,3131,14,[9,[[3130,15,3130,118,[5,"Case patterns were found out of order.  They should be sorted as specified in the rule configuration."]]]]]]],[3132,11,3133,9,[[3132,11,3132,18,"message"],[3132,21,3132,52,[5,"Case patterns are not sorted."]]]],[3133,11,3134,9,[[3133,11,3133,16,"under"],[3133,19,3133,25,[5,"case"]]]]]]]]]]]]]]]],[]]]
